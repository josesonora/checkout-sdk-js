{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"tslib\"","webpack:///external \"@bigcommerce/data-store\"","webpack:///external \"lodash\"","webpack:///external \"rxjs\"","webpack:///external \"@bigcommerce/memoize\"","webpack:///./src/shipping/consignment-actions.ts","webpack:///external \"rxjs/operators\"","webpack:///./src/customer/customer-strategy-actions.ts","webpack:///./src/payment/payment-strategy-actions.ts","webpack:///./src/common/error/errors/missing-data-error.ts","webpack:///./src/shipping/shipping-strategy-actions.ts","webpack:///./src/checkout/checkout-actions.ts","webpack:///./src/order/order-actions.ts","webpack:///./src/payment/payment-method-actions.ts","webpack:///./src/billing/billing-address-actions.ts","webpack:///./src/checkout-buttons/checkout-button-actions.ts","webpack:///./src/coupon/coupon-actions.ts","webpack:///./src/payment/instrument/instrument-actions.ts","webpack:///./src/common/error/errors/standard-error.ts","webpack:///./src/common/utility/set-prototype-of.ts","webpack:///./src/coupon/gift-certificate-actions.ts","webpack:///./src/remote-checkout/remote-checkout-actions.ts","webpack:///./src/common/error/errors/request-error.ts","webpack:///./src/config/config-actions.ts","webpack:///./src/payment/payment-status-types.ts","webpack:///./src/common/utility/is-plain-object.ts","webpack:///./src/geography/country-actions.ts","webpack:///./src/shipping/shipping-country-actions.ts","webpack:///external \"@bigcommerce/request-sender\"","webpack:///./src/store-credit/store-credit-actions.ts","webpack:///./src/common/http-request/content-type.ts","webpack:///./src/payment/errors/payment-method-client-unavailable-error.ts","webpack:///external \"@bigcommerce/script-loader\"","webpack:///./src/common/error/errors/invalid-argument-error.ts","webpack:///./src/payment/payment-method-types.ts","webpack:///./src/payment/payment-actions.ts","webpack:///./src/common/http-request/join-includes.ts","webpack:///external \"shallowequal\"","webpack:///./src/common/utility/is-equal.ts","webpack:///external \"@bigcommerce/form-poster\"","webpack:///external \"reselect\"","webpack:///./src/customer/customer-actions.ts","webpack:///./src/spam-protection/spam-protection-actions.ts","webpack:///./src/common/selector/with-memoized-combiner.ts","webpack:///./src/common/error/error-actions.ts","webpack:///./src/payment/payment-method-action-creator.ts","webpack:///./src/payment/payment-method-request-sender.ts","webpack:///./src/checkout/checkout-default-includes.ts","webpack:///./src/common/http-request/internal-api-headers.ts","webpack:///./src/common/utility/bind-decorator.ts","webpack:///./src/payment/strategies/braintree/braintree-script-loader.ts","webpack:///./src/payment/strategies/braintree/braintree-sdk-creator.ts","webpack:///./src/common/error/errors/not-initialized-error.ts","webpack:///./src/common/error/throw-error-action.ts","webpack:///./src/common/data-store/cache-action.ts","webpack:///./src/common/data-store/is-action-options.ts","webpack:///./src/common/data-store/cachable-action-decorator.ts","webpack:///./src/common/http-request/join-or-merge-includes.ts","webpack:///./src/common/http-request/merge-includes.ts","webpack:///./src/common/utility/omit-deep.ts","webpack:///./src/customer/customer-request-sender.ts","webpack:///./src/checkout/checkout-action-creator.ts","webpack:///./src/shipping/consignment-action-creator.ts","webpack:///./src/shipping/consignment-request-sender.ts","webpack:///./src/payment/strategies/masterpass/get-callback-url.ts","webpack:///./src/common/utility/is-private.ts","webpack:///./src/common/error/errors/unrecoverable-error.ts","webpack:///./src/common/error/errors/map-from-internal-error-response.ts","webpack:///./src/common/error/request-error-factory.ts","webpack:///./src/common/error/errors/map-from-storefront-error-response.ts","webpack:///./src/common/error/clear-error-reducer.ts","webpack:///./src/common/utility/replace.ts","webpack:///./src/common/utility/object-set.ts","webpack:///./src/billing/billing-address-state.ts","webpack:///./src/billing/billing-address-reducer.ts","webpack:///./src/common/utility/array-replace.ts","webpack:///./src/common/utility/object-merge.ts","webpack:///./src/cart/cart-state.ts","webpack:///./src/cart/cart-reducer.ts","webpack:///./src/checkout-buttons/checkout-button-state.ts","webpack:///./src/checkout-buttons/checkout-button-reducer.ts","webpack:///./src/config/config-state.ts","webpack:///./src/config/config-reducer.ts","webpack:///./src/coupon/coupon-state.ts","webpack:///./src/coupon/coupon-reducer.ts","webpack:///./src/coupon/gift-certificate-state.ts","webpack:///./src/coupon/gift-certificate-reducer.ts","webpack:///./src/customer/customer-state.ts","webpack:///./src/customer/customer-reducer.ts","webpack:///./src/customer/customer-strategy-state.ts","webpack:///./src/customer/customer-strategy-reducer.ts","webpack:///./src/geography/country-state.ts","webpack:///./src/geography/country-reducer.ts","webpack:///./src/order/order-state.ts","webpack:///./src/order/order-reducer.ts","webpack:///./src/payment/payment-reducer.ts","webpack:///./src/payment/payment-method-state.ts","webpack:///./src/payment/payment-method-reducer.ts","webpack:///./src/common/utility/merge-or-push.ts","webpack:///./src/payment/payment-strategy-state.ts","webpack:///./src/payment/payment-strategy-reducer.ts","webpack:///./src/payment/instrument/instrument-state.ts","webpack:///./src/payment/instrument/instrument-reducer.ts","webpack:///./src/remote-checkout/remote-checkout-state.ts","webpack:///./src/remote-checkout/remote-checkout-reducer.ts","webpack:///./src/shipping/consignment-state.ts","webpack:///./src/shipping/consignment-reducer.ts","webpack:///./src/shipping/shipping-country-state.ts","webpack:///./src/shipping/shipping-country-reducer.ts","webpack:///./src/shipping/shipping-strategy-state.ts","webpack:///./src/shipping/shipping-strategy-reducer.ts","webpack:///./src/store-credit/store-credit-reducer.ts","webpack:///./src/checkout/checkout-state.ts","webpack:///./src/checkout/checkout-reducer.ts","webpack:///./src/common/utility/guard.ts","webpack:///./src/common/utility/create-freeze-proxy.ts","webpack:///./src/form/form-selector.ts","webpack:///./src/payment/instrument/supported-payment-instruments.ts","webpack:///./src/address/is-address-equal.ts","webpack:///./src/shipping/consignment-selector.ts","webpack:///./src/store-credit/store-credit-state.ts","webpack:///./src/checkout/create-internal-checkout-selectors.ts","webpack:///./src/billing/billing-address-selector.ts","webpack:///./src/checkout-buttons/checkout-button-selector.ts","webpack:///./src/coupon/coupon-selector.ts","webpack:///./src/customer/customer-selector.ts","webpack:///./src/remote-checkout/remote-checkout-selector.ts","webpack:///./src/shipping/shipping-address-selector.ts","webpack:///./src/payment/payment-selector.ts","webpack:///./src/cart/cart-selector.ts","webpack:///./src/config/config-selector.ts","webpack:///./src/geography/country-selector.ts","webpack:///./src/customer/customer-strategy-selector.ts","webpack:///./src/coupon/gift-certificate-selector.ts","webpack:///./src/payment/instrument/instrument-selector.ts","webpack:///./src/payment/payment-method-selector.ts","webpack:///./src/payment/payment-strategy-selector.ts","webpack:///./src/shipping/shipping-country-selector.ts","webpack:///./src/shipping/shipping-strategy-selector.ts","webpack:///./src/checkout/checkout-selector.ts","webpack:///./src/order/order-selector.ts","webpack:///./src/store-credit/store-credit-selector.ts","webpack:///./src/checkout/create-checkout-store.ts","webpack:///./src/checkout/create-action-transformer.ts","webpack:///./src/common/error/create-request-error-factory.ts","webpack:///./src/checkout/create-checkout-store-reducer.ts","webpack:///./src/checkout/errors/checkout-not-available-error.ts","webpack:///./src/checkout/checkout-request-sender.ts","webpack:///./src/checkout/checkout-params.ts","webpack:///./src/common/selector/selector-decorator.ts","webpack:///./src/checkout-buttons/checkout-button-error-selector.ts","webpack:///./src/checkout-buttons/checkout-button-status-selector.ts","webpack:///./src/checkout-buttons/create-checkout-button-selectors.ts","webpack:///./src/checkout-buttons/checkout-button-initializer.ts","webpack:///./src/checkout-buttons/strategies/checkout-button-method-type.ts","webpack:///./src/common/dom/is-element-id.ts","webpack:///./src/common/dom/set-unique-element-id.ts","webpack:///./src/checkout-buttons/checkout-button-strategy-action-creator.ts","webpack:///./src/checkout-buttons/strategies/braintree/braintree-paypal-button-strategy.ts","webpack:///./src/checkout-buttons/strategies/googlepay/googlepay-button-strategy.ts","webpack:///./src/checkout-buttons/strategies/masterpass/masterpass-button-strategy.ts","webpack:///./src/checkout-buttons/strategies/paypal/paypal-button-strategy.ts","webpack:///./src/checkout-buttons/create-checkout-button-initializer.ts","webpack:///./src/checkout-buttons/create-checkout-button-registry.ts","webpack:///./src/common/utility/cache-key-maps.ts","webpack:///./src/common/utility/cache-key-resolver.ts","webpack:///./src/common/error/errors/map-from-payment-error-response.ts","webpack:///./src/common/error/errors/timeout-error.ts","webpack:///./src/payment/errors/payment-method-invalid-error.ts","webpack:///./src/common/selector/create-selector.ts","webpack:///./src/config/config-action-creator.ts","webpack:///./src/config/config-request-sender.ts","webpack:///./src/billing/billing-address-request-sender.ts","webpack:///./src/common/registry/registry.ts","webpack:///./src/payment/strategies/masterpass/masterpass-script-loader.ts","webpack:///./src/remote-checkout/errors/remote-checkout-synchronization-error.ts","webpack:///./src/payment/strategies/googlepay/googlepay-authorizenet-initializer.ts","webpack:///./src/payment/strategies/googlepay/googlepay-braintree-initializer.ts","webpack:///./src/payment/strategies/googlepay/googlepay-stripe-initializer.ts","webpack:///./src/payment/strategies/paypal/paypal-script-loader.ts","webpack:///./src/bundles/checkout-button.ts","webpack:///./src/payment/strategies/googlepay/googlepay.ts","webpack:///./src/payment/strategies/googlepay/googlepay-payment-processor.ts","webpack:///./src/payment/strategies/googlepay/googlepay-script-loader.ts","webpack:///./src/payment/strategies/googlepay/create-googlepay-payment-processor.ts","webpack:///./src/billing/errors/unable-to-continue-as-guest-error.ts","webpack:///./src/billing/errors/update-customer-error.ts","webpack:///./src/billing/billing-address-action-creator.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","ConsignmentActionType","CustomerStrategyActionType","PaymentStrategyActionType","MissingDataErrorType","subtype","type","MissingBillingAddress","MissingCart","MissingConsignments","MissingCheckout","MissingCheckoutConfig","MissingOrderConfig","MissingOrder","MissingOrderId","MissingPayment","MissingPaymentToken","MissingPaymentMethod","MissingShippingAddress","getErrorMessage","ShippingStrategyActionType","CheckoutActionType","OrderActionType","PaymentMethodActionType","BillingAddressActionType","CheckoutButtonActionType","CouponActionType","InstrumentActionType","message","setPrototypeOf","__proto__","Error","captureStackTrace","stack","GiftCertificateActionType","RemoteCheckoutActionType","DEFAULT_RESPONSE","body","headers","status","response","errors","ConfigActionType","ACKNOWLEDGE","FINALIZE","isPlainObject","CountryActionType","ShippingCountryActionType","StoreCreditActionType","ContentType","HOSTED","OFFLINE","PaymentActionType","joinIncludes","includes","join","isEqual","objectA","objectB","options","Array","isArray","length","index","isArrayEqual","Date","getTime","isDateEqual","RegExp","toString","isRegExpEqual","filter","keyFilter","keysA","keys","keysB","isObjectEqual","CustomerActionType","SpamProtectionActionType","withMemoizedCombiner","creator","combiner","args","pop","result","combinerArgs","ErrorActionType","_requestSender","loadPaymentMethods","observer","next","LoadPaymentMethodsRequested","then","meta","deviceSessionId","sessionHash","LoadPaymentMethodsSucceeded","complete","catch","error","LoadPaymentMethodsFailed","loadPaymentMethod","methodId","LoadPaymentMethodRequested","undefined","LoadPaymentMethodSucceeded","LoadPaymentMethodFailed","timeout","this","Accept","JsonV1","url","INTERNAL_USE_ONLY","bindMethodDecorator","_","descriptor","method","boundMethod","set","target","decoratedTarget","getOwnPropertyNames","forEach","getOwnPropertyDescriptor","bindClassDecorator","_scriptLoader","_window","loadClient","loadScript","braintree","client","load3DS","threeDSecure","loadDataCollector","dataCollector","loadPaypal","paypal","loadPaypalCheckout","paypalCheckout","loadVisaCheckout","visaCheckout","loadGooglePayment","googlePayment","_braintreeScriptLoader","_dataCollectors","initialize","clientToken","_clientToken","getClient","PaymentNotInitialized","_client","authorization","getPaypal","_paypal","Promise","all","getPaypalCheckout","_paypalCheckout","get3DS","_3ds","getDataCollector","cacheKey","cached","kount","code","deviceData","teardown","resolve","getVisaCheckout","_visaCheckout","getGooglePaymentComponent","_googlePay","_teardown","default","mod","NotInitializedErrorType","CustomerNotInitialized","ShippingNotInitialized","SpamProtectionNotInitialized","throwErrorAction","action","payload","cacheAction","fn","pipe","store","isActionOptions","param","useCache","cachableActionDecorator","memoizedMethods","WeakMap","decorateMethod","lastArg","instanceMethods","joinOrMergeIncludes","baseIncludes","includeDictionaryOrList","includesDictionary","deletions","on","additions","mergeIncludes","omitDeep","predicate","map","updateCustomer","customer","post","signInCustomer","credentials","signOutCustomer","delete","_checkoutRequestSender","_configActionCreator","loadCheckout","id","LoadCheckoutRequested","loadConfig","LoadCheckoutSucceeded","LoadCheckoutFailed","loadDefaultCheckout","state","getState","context","config","getContextConfig","checkoutId","updateCheckout","checkout","getCheckout","UpdateCheckoutRequested","UpdateCheckoutSucceeded","UpdateCheckoutFailed","loadCurrentCheckout","_consignmentRequestSender","unassignItemsByAddress","consignment","existingConsignment","consignments","getConsignmentByAddress","shippingAddress","lineItems","_removeLineItems","cart","getCart","updateConsignment","deleteConsignment","assignItemsByAddress","_createOrUpdateConsignment","_addLineItems","selectShippingOption","getConsignments","consignmentUpdateBody","shippingOptionId","consignmentMeta","UpdateShippingOptionRequested","UpdateShippingOptionSucceeded","UpdateShippingOptionFailed","loadShippingOptions","LoadShippingOptionsRequested","params","include","AvailableShippingOptions","LoadShippingOptionsSucceeded","LoadShippingOptionsFailed","updateAddress","address","_getUpdateAddressRequestBody","createConsignments","CreateConsignmentsRequested","CreateConsignmentsSucceeded","CreateConsignmentsFailed","UpdateConsignmentRequested","UpdateConsignmentSucceeded","UpdateConsignmentFailed","consignmentId","DeleteConsignmentRequested","DeleteConsignmentSucceeded","DeleteConsignmentFailed","updateShippingOption","_isUpdateConsignmentRequest","physicalItems","customItems","item","itemId","quantity","_hydrateLineItems","lineItemIds","existingItem","sharedItem","lineItem","concat","request","DEFAULT_INCLUDES","put","getCallbackUrl","origin","window","location","isPrivate","indexOf","joinErrors","reduce","_factoryMethods","register","detail","title","mapFromInternalErrorResponse","mapFromStorefrontErrorResponse","factoryMethod","createError","_getType","_isStorefrontErrorResponseBody","_isInternalErrorResponseBody","internalType","split","errorResponse","storefrontErrorResponse","internalErrorResponse","clearErrorReducer","ClearError","isClearErrorAction","replace","currentValue","newValue","objectSet","DEFAULT_STATE","statuses","billingAddressReducer","data","dataReducer","errorsReducer","statusesReducer","reducer","UpdateBillingAddressSucceeded","ContinueAsGuestSucceeded","LoadOrderSucceeded","billingAddress","UpdateBillingAddressRequested","UpdateBillingAddressFailed","UpdateCustomerRequested","UpdateCustomerSucceeded","ContinueAsGuestRequested","UpdateCustomerFailed","ContinueAsGuestFailed","arrayReplace","currentArray","newArray","matchObject","sameAsCurrentCount","sameAsNewCount","countSameAsReplaced","replacedValue","newItem","currentItem","objectMerge","currentObject","newObject","cartReducer","ApplyCouponSucceeded","RemoveCouponSucceeded","ApplyGiftCertificateSucceeded","RemoveGiftCertificateSucceeded","DEFAULT_DATA_STATE","initializedContainers","DEFAULT_ERROR_STATE","DEFAULT_STATUS_STATE","checkoutButtonReducer","InitializeButtonSucceeded","containerId","DeinitializeButtonSucceeded","InitializeButtonRequested","InitializeButtonFailed","DeinitializeButtonRequested","DeinitializeButtonFailed","configReducer","LoadConfigSucceeded","LoadConfigFailed","LoadConfigRequested","couponReducer","coupons","ApplyCouponRequested","ApplyCouponFailed","RemoveCouponRequested","RemoveCouponFailed","giftCertificateReducer","giftCertificates","ApplyGiftCertificateRequested","ApplyGiftCertificateFailed","RemoveGiftCertificateRequested","RemoveGiftCertificateFailed","customerReducer","customerStrategyReducer","InitializeSucceeded","isInitialized","DeinitializeSucceeded","InitializeRequested","initializeError","initializeMethodId","InitializeFailed","DeinitializeRequested","deinitializeError","deinitializeMethodId","DeinitializeFailed","SignInRequested","SignInSucceeded","signInError","signInMethodId","SignInFailed","SignOutRequested","SignOutSucceeded","signOutError","signOutMethodId","SignOutFailed","WidgetInteractionStarted","WidgetInteractionFinished","widgetInteractionError","widgetInteractionMethodId","WidgetInteractionFailed","isInitializing","isDeinitializing","isSigningIn","isSigningOut","isWidgetInteracting","countryReducer","LoadCountriesSucceeded","LoadCountriesRequested","LoadCountriesFailed","orderReducer","metaReducer","LoadOrderPaymentsSucceeded","FinalizeOrderSucceeded","SubmitOrderSucceeded","callbackUrl","order","orderToken","token","payment","LoadOrderRequested","LoadOrderPaymentsRequested","LoadOrderFailed","LoadOrderPaymentsFailed","paymentReducer","SubmitPaymentSucceeded","paymentMethodReducer","array","defaultPredicate","push","mergeOrPush","gateway","methodA","methodB","loadMethodId","loadMethodError","isLoadingMethod","paymentStrategyReducer","ExecuteRequested","ExecuteSucceeded","executeError","executeMethodId","ExecuteFailed","FinalizeRequested","FinalizeSucceeded","finalizeError","finalizeMethodId","FinalizeFailed","isExecuting","isFinalizing","instrumentReducer","LoadInstrumentsSucceeded","vaultedInstruments","DeleteInstrumentSucceeded","LoadInstrumentsRequested","DeleteInstrumentRequested","deleteError","failedInstrument","LoadInstrumentsFailed","DeleteInstrumentFailed","instrumentId","isDeleting","deletingInstrument","remoteCheckoutReducer","InitializeRemoteBillingSucceeded","billing","InitializeRemoteShippingSucceeded","shipping","LoadRemoteSettingsSucceeded","UpdateRemoteCheckout","updateShippingOptionError","updateError","isUpdating","isUpdatingShippingOption","consignmentReducer","SignOutCustomerSucceeded","shippingCountryReducer","LoadShippingCountriesSucceeded","LoadShippingCountriesRequested","LoadShippingCountriesFailed","shippingStrategyReducer","UpdateAddressRequested","UpdateAddressSucceeded","updateAddressError","updateAddressMethodId","UpdateAddressFailed","SelectOptionRequested","SelectOptionSucceeded","selectOptionError","selectOptionMethodId","SelectOptionFailed","isUpdatingAddress","isSelectingOption","storeCreditReducer","ApplyStoreCreditRequested","ApplyStoreCreditSucceeded","ApplyStoreCreditFailed","checkoutReducer","orderId","guard","errorFactory","createFreezeProxy","trap","proxy","iteratee","getPrototypeOf","traversePrototypeOf","charAt","createProxy","createFormSelectorFactory","getShippingAddressFields","countries","countryCode","selectedCountry","storeConfig","formFields","shippingAddressFields","field","processField","getBillingAddressFields","billingAddressFields","country","items","label","fieldType","itemtype","processCountry","subdivisions","requiresState","required","processProvince","hasPostalCodes","Boolean","processsPostCode","provider","braintreepaypal","authorizenet","stripe","stripev3","cybersource","converge","bluesnapv2","paymetric","normalize","firstName","lastName","company","address1","address2","city","stateOrProvince","postalCode","phone","customFields","createConsignmentSelectorFactory","getConsignmentById","addressA","addressB","getShippingOption","selectedShippingOption","getLoadError","loadError","getCreateError","getLoadShippingOptionsError","loadShippingOptionsError","getUnassignedItems","assignedLineItemIds","itemIds","getUpdateError","getDeleteError","getItemAssignmentError","getUpdateShippingOptionError","isLoading","isLoadingShippingOptions","isCreating","isAssigningItems","createInternalCheckoutSelectorsFactory","getBillingAddress","getBillingAddressOrThrow","getContinueAsGuestError","isContinuingAsGuest","getInitializeError","getDeinitializeError","getCoupons","getRemoveError","getApplyError","isApplying","isRemoving","getCustomer","getShippingAddress","getInternalPayment","getGatewayPayment","getHostedPayment","getPaymentId","getPaymentStatus","getPaymentToken","getPaymentRedirectUrl","isPaymentDataRequired","isPaymentDataSubmitted","createBillingAddressSelector","continueAsGuestError","createCartSelector","createCartSelectorFactory","createCheckoutButtonSelector","createConfigSelector","getConfig","getStoreConfig","getExternalSource","externalSource","createConfigSelectorFactory","createCountrySelector","getCountries","createCountrySelectorFactory","createCouponSelector","removeCouponError","applyCouponError","isApplyingCoupon","isRemovingCoupon","createCustomerSelector","createCustomerStrategySelector","getSignInError","getSignOutError","getWidgetInteractionError","createCustomerStrategySelectorFactory","createGiftCertificateSelector","getGiftCertificates","removeGiftCertificateError","applyGiftCertificateError","isApplyingGiftCertificate","isRemovingGiftCertificate","createGiftCertificateSelectorFactory","createInstrumentSelector","getInstrumentsByPaymentMethod","instruments","paymentMethod","paymentMethodKey","currentMethod","getCardInstrument","cards","find","instrument","bigpayToken","some","card","getInstruments","getInstrumentsMeta","createInstrumentSelectorFactory","createFormSelector","createPaymentMethodSelector","getPaymentMethods","paymentMethods","getPaymentMethodsMeta","getPaymentMethod","gatewayId","getPaymentMethodOrThrow","getLoadMethodError","createPaymentMethodSelectorFactory","createPaymentStrategySelector","getExecuteError","getFinalizeError","getWidgetInteractingError","createPaymentStrategySelectorFactory","createRemoteCheckoutSelector","createShippingAddressSelector","createShippingCountrySelector","getShippingCountries","createShippingCountrySelectorFactory","createShippingStrategySelector","getUpdateAddressError","getSelectOptionError","createShippingStrategySelectorFactory","createConsignmentSelector","createCheckoutSelector","getCheckoutOrThrow","getOutstandingBalance","useStoreCredit","grandTotal","storeCredit","Math","max","outstandingBalance","isExecutingSpamCheck","createCheckoutSelectorFactory","createOrderSelector","getOrder","getOrderOrThrow","getOrderMeta","createOrderSelectorFactory","createPaymentSelector","payments","providerId","providerType","internalPayment","step","redirectUrl","nonce","createStoreCreditSelector","applyError","createStoreCreditSelectorFactory","checkoutButton","customerStrategies","form","paymentStrategies","remoteCheckout","shippingCountries","shippingStrategies","selectors","shouldWarnMutation","createCheckoutStore","initialState","requestErrorFactory","factory","actionTransformer","action$","every","createInternalCheckoutSelectors","stateTransformer","CheckoutIncludes","selectorDecorator","resolver","memoizedMethod","cachedValue","getUsedCount","cache","getKey","selectorMethodDecorator","_checkoutButton","getInitializeButtonError","getDeinitializeButtonError","CheckoutButtonErrorSelector","isInitializingButton","isDeinitializingButton","CheckoutButtonStatusSelector","createCheckoutButtonSelectors","CheckoutButtonMethodType","_store","_buttonStrategyActionCreator","_state","subscribe","subscriber","filters","initializeButton","containerIds","test","selector","idPrefix","containers","document","querySelectorAll","slice","container","setUniqueElementId","queueId","dispatch","deinitializeButton","deinitialize","CheckoutButtonInitializer","_registry","_paymentMethodActionCreator","_checkoutActionCreator","_braintreeSDKCreator","_paypalScriptLoader","_formPoster","_offerCredit","paypalOptions","braintreepaypalcredit","_paymentMethod","allowedSources","disallowedSources","allowCredit","FUNDING","CREDIT","Button","render","env","testMode","commit","shouldProcessPayment","funding","allowed","disallowed","style","shape","_setupPayment","onPaymentError","onAuthorize","_tokenizePayment","onAuthorizeError","onError","addresses","CheckoutButtonNotInitialized","createPayment","flow","enableShippingAddress","shippingAddressEditable","shippingAddressOverride","_mapToBraintreeAddress","amount","currency","offerCredit","tokenizePayment","postForm","payment_type","device_data","shipping_address","JSON","stringify","_mapToLegacyShippingAddress","billing_address","_mapToLegacyBillingAddress","details","recipientName","email","first_name","last_name","phone_number","address_line_1","line1","address_line_2","line2","country_code","postal_code","stateOrProvinceCode","_googlePayPaymentProcessor","_methodId","_getMethodId","_walletButton","_createSignInButton","parentNode","removeChild","getElementById","googlePayButton","createButton","_handleWalletButtonClick","appendChild","event","preventDefault","displayWallet","paymentData","handleSuccess","updateShippingAddress","_onPaymentSelectComplete","_onError","_masterpassScriptLoader","initializationData","load","masterpass","_masterpassClient","_signInButton","removeEventListener","buttonContainer","button","createElement","src","addEventListener","_createMasterpassPayload","allowedCardTypes","cartAmount","cartId","suppressShippingAddress","_host","merchantId","clientId","actions","res","paymentID","payerID","paymentId","payerId","payerInfo","payer","payer_info","createCheckoutButtonInitializer","host","requestSender","formPoster","registry","scriptLoader","checkoutActionCreator","BRAINTREE_PAYPAL","BRAINTREE_PAYPAL_CREDIT","MASTERPASS","GOOGLEPAY_AUTHORIZENET","GOOGLEPAY_BRAINTREE","GOOGLEPAY_STRIPE","PAYPALEXPRESS","createCheckoutButtonRegistry","isTerminalCacheKeyMap","_lastId","_map","maps","_usedMaps","_options","maxSize","onExpire","_resolveMap","parentMap","usedCount","_generateMap","_removeLeastUsedMap","isMatched","mapIndex","unshift","splice","parent","terminalMap","recentlyUsedMap","_removeMap","isRootCacheKeyMap","mapFromPaymentErrorResponse","_configRequestSender","DEFAULT_PARAMS","createAddress","_factories","_instances","defaultToken","cacheToken","_getInstance","_hasFactory","_hasInstance","baseRequest","apiVersion","apiVersionMinor","hasShippingAddress","_getGooglePaymentDataRequest","parseResponse","paymentMethodData","info","cardNetwork","cardDetails","btoa","cardType","lastFour","paymentGatewayId","googleMerchantName","googleMerchantId","platformToken","paymentGatewaySpecification","_getPaymentGatewaySpecification","gatewayMerchantId","cardPaymentMethod","_getCardPaymentMethod","allowedPaymentMethods","transactionInfo","totalPriceStatus","totalPrice","toFixed","currencyCode","merchantInfo","merchantName","authJwt","emailRequired","shippingAddressRequired","shippingAddressParameters","phoneNumberRequired","parameters","tokenizationSpecification","allowedAuthMethods","allowedCardNetworks","billingAddressRequired","billingAddressParameters","format","googleBraintreePaymentInstance","_googlePaymentInstance","_createGooglePayPayload","parse","tokenizationData","androidPayCards","description","lastTwo","binData","googlePayBraintreePaymentDataRequest","cardRequirements","billingAddressFormat","_mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2","createPaymentDataRequest","googlePayBraintreeDataRequestV1","paymentMethodTokenizationParameters","_mapGooglePayStripeDataRequestToGooglePayDataRequestV2","brand","last4","err","stripeVersion","stripePublishableKey","scriptSrc","async","attributes","ButtonType","ButtonColor","_googlePayScriptLoader","_googlePayInitializer","_billingAddressActionCreator","_consigmentActionCreator","_configureWallet","onClick","buttonType","buttonColor","Short","Default","_googlePayClient","loadPaymentData","_getPaymentDataRequest","_postForm","_updateBillingAddress","_mapGooglePayAddressToShippingAddress","googlePay","paymentDataRequest","_getGooglePayClient","_paymentDataRequest","isReadyToPay","_getCardInformation","cardInformation","number","google","environment","api","PaymentsClient","_mapGooglePayAddressToBillingAddress","companyName","address3","locality","administrativeArea","phoneNumber","postPaymentData","card_information","remoteBillingAddress","googlePayAddressMapped","createGooglePayPaymentProcessor","initializer","_customerRequestSender","continueAsGuest","isGuest","billingAddressRequestBody","existingBillingAddressRequestBody","_createOrUpdateBillingAddress","_updateCustomerConsent","marketingEmailConsent","acceptsMarketing"],"mappings":"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","file":"checkout-button.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 169);\n","module.exports = require(\"tslib\");","module.exports = require(\"@bigcommerce/data-store\");","module.exports = require(\"lodash\");","module.exports = require(\"rxjs\");","module.exports = require(\"@bigcommerce/memoize\");","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nimport { ConsignmentMeta } from './consignment';\n\nexport enum ConsignmentActionType {\n    CreateConsignmentsRequested = 'CREATE_CONSIGNMENTS_REQUESTED',\n    CreateConsignmentsSucceeded = 'CREATE_CONSIGNMENTS_SUCCEEDED',\n    CreateConsignmentsFailed = 'CREATE_CONSIGNMENTS_FAILED',\n\n    UpdateConsignmentRequested = 'UPDATE_CONSIGNMENT_REQUESTED',\n    UpdateConsignmentSucceeded = 'UPDATE_CONSIGNMENT_SUCCEEDED',\n    UpdateConsignmentFailed = 'UPDATE_CONSIGNMENT_FAILED',\n\n    DeleteConsignmentRequested = 'DELETE_CONSIGNMENT_REQUESTED',\n    DeleteConsignmentSucceeded = 'DELETE_CONSIGNMENT_SUCCEEDED',\n    DeleteConsignmentFailed = 'DELETE_CONSIGNMENT_FAILED',\n\n    UpdateShippingOptionRequested = 'UPDATE_SHIPPING_OPTION_REQUESTED',\n    UpdateShippingOptionSucceeded = 'UPDATE_SHIPPING_OPTION_SUCCEEDED',\n    UpdateShippingOptionFailed = 'UPDATE_SHIPPING_OPTION_FAILED',\n\n    LoadShippingOptionsRequested = 'LOAD_SHIPPING_OPTIONS_REQUESTED',\n    LoadShippingOptionsSucceeded = 'LOAD_SHIPPING_OPTIONS_SUCCEEDED',\n    LoadShippingOptionsFailed = 'LOAD_SHIPPING_OPTIONS_FAILED',\n}\n\nexport type ConsignmentAction =\n    CreateConsignmentsAction |\n    UpdateConsignmentAction |\n    DeleteConsignmentAction |\n    UpdateShippingOptionAction |\n    LoadShippingOptionsAction;\n\nexport type CreateConsignmentsAction =\n    CreateConsignmentsRequestedAction |\n    CreateConsignmentsSucceededAction |\n    CreateConsignmentsFailedAction;\n\nexport type UpdateConsignmentAction =\n    UpdateConsignmentRequestedAction |\n    UpdateConsignmentSucceededAction |\n    UpdateConsignmentFailedAction;\n\nexport type DeleteConsignmentAction =\n    DeleteConsignmentRequestedAction |\n    DeleteConsignmentSucceededAction |\n    DeleteConsignmentFailedAction;\n\nexport type UpdateShippingOptionAction =\n    UpdateShippingOptionRequestedAction |\n    UpdateShippingOptionSucceededAction |\n    UpdateShippingOptionFailedAction;\n\nexport type LoadShippingOptionsAction =\n    LoadShippingOptionsRequestedAction |\n    LoadShippingOptionsSucceededAction |\n    LoadShippingOptionsFailedAction;\n\nexport interface CreateConsignmentsRequestedAction extends Action {\n    type: ConsignmentActionType.CreateConsignmentsRequested;\n}\n\nexport interface CreateConsignmentsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.CreateConsignmentsSucceeded;\n}\n\nexport interface CreateConsignmentsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.CreateConsignmentsFailed;\n}\n\nexport interface UpdateConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentRequested;\n}\n\nexport interface UpdateConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentSucceeded;\n}\n\nexport interface UpdateConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentFailed;\n}\n\nexport interface DeleteConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentRequested;\n}\n\nexport interface DeleteConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentSucceeded;\n}\n\nexport interface DeleteConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentFailed;\n}\n\nexport interface UpdateShippingOptionRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionRequested;\n}\n\nexport interface UpdateShippingOptionSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionSucceeded;\n}\n\nexport interface UpdateShippingOptionFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionFailed;\n}\n\nexport interface LoadShippingOptionsRequestedAction extends Action {\n    type: ConsignmentActionType.LoadShippingOptionsRequested;\n}\n\nexport interface LoadShippingOptionsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.LoadShippingOptionsSucceeded;\n}\n\nexport interface LoadShippingOptionsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.LoadShippingOptionsFailed;\n}\n","module.exports = require(\"rxjs/operators\");","import { Action } from '@bigcommerce/data-store';\n\nexport enum CustomerStrategyActionType {\n    SignInFailed = 'CUSTOMER_STRATEGY_SIGN_IN_FAILED',\n    SignInRequested = 'CUSTOMER_STRATEGY_SIGN_IN_REQUESTED',\n    SignInSucceeded = 'CUSTOMER_STRATEGY_SIGN_IN_SUCCEEDED',\n    SignOutFailed = 'CUSTOMER_STRATEGY_SIGN_OUT_FAILED',\n    SignOutRequested = 'CUSTOMER_STRATEGY_SIGN_OUT_REQUESTED',\n    SignOutSucceeded = 'CUSTOMER_STRATEGY_SIGN_OUT_SUCCEEDED',\n    InitializeFailed = 'CUSTOMER_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'CUSTOMER_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'CUSTOMER_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'CUSTOMER_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'CUSTOMER_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'CUSTOMER_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type CustomerStrategyAction =\n    CustomerStrategySignInAction |\n    CustomerStrategySignOutAction |\n    CustomerStrategyInitializeAction |\n    CustomerStrategyDeinitializeAction |\n    CustomerStrategyWidgetAction;\n\nexport type CustomerStrategySignInAction =\n    SignInRequestedAction |\n    SignInSucceededAction |\n    SignInFailedAction;\n\nexport type CustomerStrategySignOutAction =\n    SignOutRequestedAction |\n    SignOutSucceededAction |\n    SignOutFailedAction;\n\nexport type CustomerStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type CustomerStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type CustomerStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface SignInRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignInRequested;\n}\n\nexport interface SignInSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignInSucceeded;\n}\n\nexport interface SignInFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignInFailed;\n}\n\nexport interface SignOutRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignOutRequested;\n}\n\nexport interface SignOutSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignOutSucceeded;\n}\n\nexport interface SignOutFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignOutFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderPaymentsAction } from '../order';\n\nexport enum PaymentStrategyActionType {\n    ExecuteFailed = 'PAYMENT_STRATEGY_EXECUTE_FAILED',\n    ExecuteRequested = 'PAYMENT_STRATEGY_EXECUTE_REQUESTED',\n    ExecuteSucceeded = 'PAYMENT_STRATEGY_EXECUTE_SUCCEEDED',\n    FinalizeFailed = 'PAYMENT_STRATEGY_FINALIZE_FAILED',\n    FinalizeRequested = 'PAYMENT_STRATEGY_FINALIZE_REQUESTED',\n    FinalizeSucceeded = 'PAYMENT_STRATEGY_FINALIZE_SUCCEEDED',\n    InitializeFailed = 'PAYMENT_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'PAYMENT_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'PAYMENT_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'PAYMENT_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'PAYMENT_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'PAYMENT_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type PaymentStrategyAction =\n    PaymentStrategyExecuteAction |\n    PaymentStrategyFinalizeAction |\n    PaymentStrategyInitializeAction |\n    PaymentStrategyDeinitializeAction |\n    PaymentStrategyWidgetAction;\n\nexport type PaymentStrategyExecuteAction =\n    ExecuteRequestedAction |\n    ExecuteSucceededAction |\n    ExecuteFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyFinalizeAction =\n    FinalizeRequestedAction |\n    FinalizeSucceededAction |\n    FinalizeFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type PaymentStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type PaymentStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface ExecuteRequestedAction extends Action {\n    type: PaymentStrategyActionType.ExecuteRequested;\n}\n\nexport interface ExecuteSucceededAction extends Action {\n    type: PaymentStrategyActionType.ExecuteSucceeded;\n}\n\nexport interface ExecuteFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.ExecuteFailed;\n}\n\nexport interface FinalizeRequestedAction extends Action {\n    type: PaymentStrategyActionType.FinalizeRequested;\n}\n\nexport interface FinalizeSucceededAction extends Action {\n    type: PaymentStrategyActionType.FinalizeSucceeded;\n}\n\nexport interface FinalizeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.FinalizeFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.WidgetInteractionFailed;\n}\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentInstrument,\n    MissingPaymentMethod,\n    MissingPaymentToken,\n    MissingShippingAddress,\n}\n\n/**\n * Throw this error when data that is expected to exist is missing. Usually it\n * is due to the fact that certain data has not been retrieved from or saved to\n * the server yet. And such data is required to perform certain actions.\n */\nexport default class MissingDataError extends StandardError {\n    constructor(\n        public subtype: MissingDataErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'MissingDataError';\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n    case MissingDataErrorType.MissingBillingAddress:\n        return 'Unable to proceed because billing address data is unavailable.';\n\n    case MissingDataErrorType.MissingCart:\n        return 'Unable to proceed because cart data is unavailable.';\n\n    case MissingDataErrorType.MissingConsignments:\n        return 'Unable to proceed because consignments data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckout:\n        return 'Unable to proceed because checkout data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckoutConfig:\n    case MissingDataErrorType.MissingOrderConfig:\n        return 'Unable to proceed because configuration data is unavailable.';\n\n    case MissingDataErrorType.MissingOrder:\n        return 'Unable to proceed because order data is unavailable.';\n\n    case MissingDataErrorType.MissingOrderId:\n        return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n    case MissingDataErrorType.MissingPayment:\n        return 'Unable to proceed because payment data is unavailable.';\n\n    case MissingDataErrorType.MissingPaymentToken:\n        return 'Unable to proceed because the token required to submit a payment is missing.';\n\n    case MissingDataErrorType.MissingPaymentMethod:\n        return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n    case MissingDataErrorType.MissingShippingAddress:\n        return 'Unable to proceed because shipping address data is unavailable.';\n\n    default:\n        return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ShippingStrategyActionType {\n    UpdateAddressFailed = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_FAILED',\n    UpdateAddressRequested = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_REQUESTED',\n    UpdateAddressSucceeded = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_SUCCEEDED',\n    SelectOptionFailed = 'SHIPPING_STRATEGY_SELECT_OPTION_FAILED',\n    SelectOptionRequested = 'SHIPPING_STRATEGY_SELECT_OPTION_REQUESTED',\n    SelectOptionSucceeded = 'SHIPPING_STRATEGY_SELECT_OPTION_SUCCEEDED',\n    InitializeFailed = 'SHIPPING_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'SHIPPING_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'SHIPPING_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'SHIPPING_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'SHIPPING_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'SHIPPING_STRATEGY_DEINITIALIZE_SUCCEEDED',\n}\n\nexport type ShippingStrategyAction =\n    ShippingStrategyUpdateAddressAction |\n    ShippingStrategySelectOptionAction |\n    ShippingStrategyInitializeAction |\n    ShippingStrategyDeinitializeAction;\n\nexport type ShippingStrategyUpdateAddressAction =\n    UpdateAddressRequestedAction |\n    UpdateAddressSucceededAction |\n    UpdateAddressFailedAction;\n\nexport type ShippingStrategySelectOptionAction =\n    SelectOptionRequestedAction |\n    SelectOptionSucceededAction |\n    SelectOptionFailedAction;\n\nexport type ShippingStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type ShippingStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport interface UpdateAddressRequestedAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressRequested;\n}\n\nexport interface UpdateAddressSucceededAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressSucceeded;\n}\n\nexport interface UpdateAddressFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.UpdateAddressFailed;\n}\n\nexport interface SelectOptionRequestedAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionRequested;\n}\n\nexport interface SelectOptionSucceededAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionSucceeded;\n}\n\nexport interface SelectOptionFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.SelectOptionFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.DeinitializeFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadConfigAction } from '../config';\n\nimport Checkout from './checkout';\n\nexport enum CheckoutActionType {\n    LoadCheckoutRequested = 'LOAD_CHECKOUT_REQUESTED',\n    LoadCheckoutSucceeded = 'LOAD_CHECKOUT_SUCCEEDED',\n    LoadCheckoutFailed = 'LOAD_CHECKOUT_FAILED',\n\n    UpdateCheckoutRequested = 'UPDATE_CHECKOUT_REQUESTED',\n    UpdateCheckoutSucceeded = 'UPDATE_CHECKOUT_SUCCEEDED',\n    UpdateCheckoutFailed = 'UPDATE_CHECKOUT_FAILED',\n}\n\nexport type CheckoutAction = LoadCheckoutAction | UpdateCheckoutAction;\n\nexport type LoadCheckoutAction =\n    LoadCheckoutRequestedAction |\n    LoadCheckoutSucceededAction |\n    LoadCheckoutFailedAction |\n    LoadConfigAction;\n\nexport type UpdateCheckoutAction =\n    UpdateCheckoutRequestedAction |\n    UpdateCheckoutSucceededAction |\n    UpdateCheckoutFailedAction;\n\nexport interface LoadCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.LoadCheckoutRequested;\n}\n\nexport interface LoadCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.LoadCheckoutSucceeded;\n}\n\nexport interface LoadCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.LoadCheckoutFailed;\n}\n\nexport interface UpdateCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.UpdateCheckoutRequested;\n}\n\nexport interface UpdateCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.UpdateCheckoutSucceeded;\n}\n\nexport interface UpdateCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.UpdateCheckoutFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { InternalOrderResponseData } from './internal-order-responses';\nimport Order from './order';\n\nexport enum OrderActionType {\n    LoadOrderRequested = 'LOAD_ORDER_REQUESTED',\n    LoadOrderSucceeded = 'LOAD_ORDER_SUCCEEDED',\n    LoadOrderFailed = 'LOAD_ORDER_FAILED',\n\n    LoadOrderPaymentsRequested = 'LOAD_ORDER_PAYMENTS_REQUESTED',\n    LoadOrderPaymentsSucceeded = 'LOAD_ORDER_PAYMENTS_SUCCEEDED',\n    LoadOrderPaymentsFailed = 'LOAD_ORDER_PAYMENTS_FAILED',\n\n    SubmitOrderRequested = 'SUBMIT_ORDER_REQUESTED',\n    SubmitOrderSucceeded = 'SUBMIT_ORDER_SUCCEEDED',\n    SubmitOrderFailed = 'SUBMIT_ORDER_FAILED',\n\n    FinalizeOrderRequested = 'FINALIZE_ORDER_REQUESTED',\n    FinalizeOrderSucceeded = 'FINALIZE_ORDER_SUCCEEDED',\n    FinalizeOrderFailed = 'FINALIZE_ORDER_FAILED',\n}\n\nexport type OrderAction = LoadOrderAction |\n    LoadOrderPaymentsAction |\n    SubmitOrderAction |\n    FinalizeOrderAction;\n\nexport type LoadOrderPaymentsAction = LoadOrderPaymentsRequestedAction |\n    LoadOrderPaymentsSucceededAction |\n    LoadOrderPaymentsFailedAction;\n\nexport type LoadOrderAction =\n    LoadOrderRequestedAction |\n    LoadOrderSucceededAction |\n    LoadOrderFailedAction;\n\nexport type SubmitOrderAction =\n    SubmitOrderRequestedAction |\n    SubmitOrderSucceededAction |\n    SubmitOrderFailedAction |\n    LoadOrderAction;\n\nexport type FinalizeOrderAction =\n    FinalizeOrderRequestedAction |\n    FinalizeOrderSucceededAction |\n    FinalizeOrderFailedAction |\n    LoadOrderAction;\n\nexport interface LoadOrderRequestedAction extends Action {\n    type: OrderActionType.LoadOrderRequested;\n}\n\nexport interface LoadOrderSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderSucceeded;\n}\n\nexport interface LoadOrderFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderFailed;\n}\n\nexport interface LoadOrderPaymentsRequestedAction extends Action {\n    type: OrderActionType.LoadOrderPaymentsRequested;\n}\n\nexport interface LoadOrderPaymentsSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderPaymentsSucceeded;\n}\n\nexport interface LoadOrderPaymentsFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderPaymentsFailed;\n}\n\nexport interface SubmitOrderRequestedAction extends Action {\n    type: OrderActionType.SubmitOrderRequested;\n}\n\nexport interface SubmitOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.SubmitOrderSucceeded;\n}\n\nexport interface SubmitOrderFailedAction extends Action<Error> {\n    type: OrderActionType.SubmitOrderFailed;\n}\n\nexport interface FinalizeOrderRequestedAction extends Action {\n    type: OrderActionType.FinalizeOrderRequested;\n}\n\nexport interface FinalizeOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.FinalizeOrderSucceeded;\n}\n\nexport interface FinalizeOrderFailedAction extends Action<Error> {\n    type: OrderActionType.FinalizeOrderFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport enum PaymentMethodActionType {\n    LoadPaymentMethodRequested = 'LOAD_PAYMENT_METHOD_REQUESTED',\n    LoadPaymentMethodSucceeded = 'LOAD_PAYMENT_METHOD_SUCCEEDED',\n    LoadPaymentMethodFailed = 'LOAD_PAYMENT_METHOD_FAILED',\n\n    LoadPaymentMethodsRequested = 'LOAD_PAYMENT_METHODS_REQUESTED',\n    LoadPaymentMethodsSucceeded = 'LOAD_PAYMENT_METHODS_SUCCEEDED',\n    LoadPaymentMethodsFailed = 'LOAD_PAYMENT_METHODS_FAILED',\n}\n\nexport type PaymentMethodAction = LoadPaymentMethodAction | LoadPaymentMethodsAction;\n\nexport type LoadPaymentMethodAction =\n    LoadPaymentMethodRequestedAction |\n    LoadPaymentMethodSucceededAction |\n    LoadPaymentMethodFailedAction;\n\nexport type LoadPaymentMethodsAction =\n    LoadPaymentMethodsRequestedAction |\n    LoadPaymentMethodsSucceededAction |\n    LoadPaymentMethodsFailedAction;\n\nexport interface LoadPaymentMethodRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodRequested;\n}\n\nexport interface LoadPaymentMethodSucceededAction extends Action<PaymentMethod> {\n    type: PaymentMethodActionType.LoadPaymentMethodSucceeded;\n}\n\nexport interface LoadPaymentMethodFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodFailed;\n}\n\nexport interface LoadPaymentMethodsRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodsRequested;\n}\n\nexport interface LoadPaymentMethodsSucceededAction extends Action<PaymentMethod[], PaymentMethodMeta> {\n    type: PaymentMethodActionType.LoadPaymentMethodsSucceeded;\n}\n\nexport interface LoadPaymentMethodsFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum BillingAddressActionType {\n    UpdateBillingAddressRequested = 'UPDATE_BILLING_ADDRESS_REQUESTED',\n    UpdateBillingAddressSucceeded = 'UPDATE_BILLING_ADDRESS_SUCCEEDED',\n    UpdateBillingAddressFailed = 'UPDATE_BILLING_ADDRESS_FAILED',\n\n    ContinueAsGuestRequested = 'CONTINUE_AS_GUEST_REQUESTED',\n    ContinueAsGuestSucceeded = 'CONTINUE_AS_GUEST_SUCCEEDED',\n    ContinueAsGuestFailed = 'CONTINUE_AS_GUEST_FAILED',\n}\n\nexport type BillingAddressAction =\n    ContinueAsGuestAction |\n    UpdateBillingAddressAction;\n\nexport type UpdateBillingAddressAction =\n    UpdateBillingAddressRequested |\n    UpdateBillingAddressSucceeded |\n    UpdateBillingAddressFailed;\n\nexport type ContinueAsGuestAction =\n    ContinueAsGuestRequested |\n    ContinueAsGuestSucceeded |\n    ContinueAsGuestFailed;\n\nexport interface UpdateBillingAddressRequested extends Action {\n    type: BillingAddressActionType.UpdateBillingAddressRequested;\n}\n\nexport interface UpdateBillingAddressSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.UpdateBillingAddressSucceeded;\n}\n\nexport interface UpdateBillingAddressFailed extends Action<Error> {\n    type: BillingAddressActionType.UpdateBillingAddressFailed;\n}\n\nexport interface ContinueAsGuestRequested extends Action {\n    type: BillingAddressActionType.ContinueAsGuestRequested;\n}\n\nexport interface ContinueAsGuestSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.ContinueAsGuestSucceeded;\n}\n\nexport interface ContinueAsGuestFailed extends Action<Error> {\n    type: BillingAddressActionType.ContinueAsGuestFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadPaymentMethodAction } from '../payment';\n\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport enum CheckoutButtonActionType {\n    InitializeButtonFailed = 'INITIALIZE_BUTTON_FAILED',\n    InitializeButtonRequested = 'INITIALIZE_BUTTON_REQUESTED',\n    InitializeButtonSucceeded = 'INITIALIZE_BUTTON_SUCCEEDED',\n\n    DeinitializeButtonFailed = 'DEINITIALIZE_BUTTON_FAILED',\n    DeinitializeButtonRequested = 'DEINITIALIZE_BUTTON_REQUESTED',\n    DeinitializeButtonSucceeded = 'DEINITIALIZE_BUTTON_SUCCEEDED',\n}\n\nexport type CheckoutButtonAction = InitializeButtonAction | DeinitializeButtonAction;\n\nexport type InitializeButtonAction =\n    InitializeButtonRequestedAction |\n    InitializeButtonSucceededAction |\n    InitializeButtonFailedAction |\n    LoadPaymentMethodAction;\n\nexport type DeinitializeButtonAction =\n    DeinitializeButtonRequestedAction |\n    DeinitializeButtonSucceededAction |\n    DeinitializeButtonFailedAction;\n\nexport interface CheckoutButtonActionMeta {\n    methodId: CheckoutButtonMethodType;\n}\n\nexport interface InitializeButtonActionMeta extends CheckoutButtonActionMeta {\n    containerId: string;\n}\n\nexport interface InitializeButtonRequestedAction extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonRequested;\n}\n\nexport interface InitializeButtonSucceededAction extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonSucceeded;\n}\n\nexport interface InitializeButtonFailedAction extends Action<Error, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonFailed;\n}\n\nexport interface DeinitializeButtonRequestedAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonRequested;\n}\n\nexport interface DeinitializeButtonSucceededAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonSucceeded;\n}\n\nexport interface DeinitializeButtonFailedAction extends Action<Error, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum CouponActionType {\n    ApplyCouponRequested = 'APPLY_COUPON_REQUESTED',\n    ApplyCouponSucceeded = 'APPLY_COUPON_SUCCEEDED',\n    ApplyCouponFailed = 'APPLY_COUPON_FAILED',\n\n    RemoveCouponRequested = 'REMOVE_COUPON_REQUESTED',\n    RemoveCouponSucceeded = 'REMOVE_COUPON_SUCCEEDED',\n    RemoveCouponFailed = 'REMOVE_COUPON_FAILED',\n}\n\nexport type CouponAction =\n    ApplyCouponAction |\n    RemoveCouponAction;\n\nexport type ApplyCouponAction =\n    ApplyCouponRequestedAction |\n    ApplyCouponSucceededAction |\n    ApplyCouponFailedAction;\n\nexport type RemoveCouponAction =\n    RemoveCouponRequestedAction |\n    RemoveCouponSucceededAction |\n    RemoveCouponFailedAction;\n\nexport interface ApplyCouponRequestedAction extends Action {\n    type: CouponActionType.ApplyCouponRequested;\n}\n\nexport interface ApplyCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.ApplyCouponSucceeded;\n}\n\nexport interface ApplyCouponFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: CouponActionType.ApplyCouponFailed;\n}\n\nexport interface RemoveCouponRequestedAction extends Action {\n    type: CouponActionType.RemoveCouponRequested;\n}\n\nexport interface RemoveCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.RemoveCouponSucceeded;\n}\n\nexport interface RemoveCouponFailedAction extends Action<RequestError> {\n    type: CouponActionType.RemoveCouponFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { VaultAccessToken } from './instrument';\nimport { InstrumentsResponseBody } from './instrument-response-body';\n\nexport enum InstrumentActionType {\n    LoadInstrumentsRequested = 'LOAD_INSTRUMENTS_REQUESTED',\n    LoadInstrumentsSucceeded = 'LOAD_INSTRUMENTS_SUCCEEDED',\n    LoadInstrumentsFailed = 'LOAD_INSTRUMENTS_FAILED',\n\n    DeleteInstrumentRequested = 'DELETE_INSTRUMENT_REQUESTED',\n    DeleteInstrumentSucceeded = 'DELETE_INSTRUMENT_SUCCEEDED',\n    DeleteInstrumentFailed = 'DELETE_INSTRUMENT_FAILED',\n}\n\nexport type InstrumentAction =\n    LoadInstrumentsAction |\n    DeleteInstrumentAction;\n\nexport type LoadInstrumentsAction =\n    LoadInstrumentsRequestedAction |\n    LoadInstrumentsSucceededAction |\n    LoadInstrumentsFailedAction;\n\nexport type DeleteInstrumentAction =\n    DeleteInstrumentRequestedAction |\n    DeleteInstrumentSucceededAction |\n    DeleteInstrumentFailedAction;\n\nexport interface LoadInstrumentsRequestedAction extends Action {\n    type: InstrumentActionType.LoadInstrumentsRequested;\n}\n\nexport interface LoadInstrumentsSucceededAction extends Action<InstrumentsResponseBody, VaultAccessToken> {\n    type: InstrumentActionType.LoadInstrumentsSucceeded;\n}\n\nexport interface LoadInstrumentsFailedAction extends Action<Error> {\n    type: InstrumentActionType.LoadInstrumentsFailed;\n}\n\nexport interface DeleteInstrumentRequestedAction extends Action {\n    type: InstrumentActionType.DeleteInstrumentRequested;\n}\n\nexport interface DeleteInstrumentSucceededAction extends Action<InstrumentsResponseBody, VaultAccessToken & { instrumentId: string }> {\n    type: InstrumentActionType.DeleteInstrumentSucceeded;\n}\n\nexport interface DeleteInstrumentFailedAction extends Action<Error> {\n    type: InstrumentActionType.DeleteInstrumentFailed;\n}\n","import { setPrototypeOf } from '../../utility';\n\nimport CustomError from './custom-error';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = (new Error(this.message)).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum GiftCertificateActionType {\n    ApplyGiftCertificateRequested = 'APPLY_GIFT_CERTIFICATE_REQUESTED',\n    ApplyGiftCertificateSucceeded = 'APPLY_GIFT_CERTIFICATE_SUCCEEDED',\n    ApplyGiftCertificateFailed = 'APPLY_GIFT_CERTIFICATE_FAILED',\n\n    RemoveGiftCertificateRequested = 'REMOVE_GIFT_CERTIFICATE_REQUESTED',\n    RemoveGiftCertificateSucceeded = 'REMOVE_GIFT_CERTIFICATE_SUCCEEDED',\n    RemoveGiftCertificateFailed = 'REMOVE_GIFT_CERTIFICATE_FAILED',\n}\n\nexport type GiftCertificateAction =\n    ApplyGiftCertificateAction |\n    RemoveGiftCertificateAction;\n\nexport type ApplyGiftCertificateAction =\n    ApplyGiftCertificateRequestedAction |\n    ApplyGiftCertificateSucceededAction |\n    ApplyGiftCertificateFailedAction;\n\nexport type RemoveGiftCertificateAction =\n    RemoveGiftCertificateRequestedAction |\n    RemoveGiftCertificateSucceededAction |\n    RemoveGiftCertificateFailedAction;\n\nexport interface ApplyGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.ApplyGiftCertificateRequested;\n}\n\nexport interface ApplyGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.ApplyGiftCertificateSucceeded;\n}\n\nexport interface ApplyGiftCertificateFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.ApplyGiftCertificateFailed;\n}\n\nexport interface RemoveGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.RemoveGiftCertificateRequested;\n}\n\nexport interface RemoveGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.RemoveGiftCertificateSucceeded;\n}\n\nexport interface RemoveGiftCertificateFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.RemoveGiftCertificateFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { AmazonPayRemoteCheckout } from './methods';\n\nexport enum RemoteCheckoutActionType {\n    InitializeRemoteBillingRequested = 'INITIALIZE_REMOTE_BILLING_REQUESTED',\n    InitializeRemoteBillingSucceeded = 'INITIALIZE_REMOTE_BILLING_SUCCEEDED',\n    InitializeRemoteBillingFailed = 'INITIALIZE_REMOTE_BILLING_FAILED',\n\n    InitializeRemoteShippingRequested = 'INITIALIZE_REMOTE_SHIPPING_REQUESTED',\n    InitializeRemoteShippingSucceeded = 'INITIALIZE_REMOTE_SHIPPING_SUCCEEDED',\n    InitializeRemoteShippingFailed = 'INITIALIZE_REMOTE_SHIPPING_FAILED',\n\n    InitializeRemotePaymentRequested = 'INITIALIZE_REMOTE_PAYMENT_REQUESTED',\n    InitializeRemotePaymentSucceeded = 'INITIALIZE_REMOTE_PAYMENT_SUCCEEDED',\n    InitializeRemotePaymentFailed = 'INITIALIZE_REMOTE_PAYMENT_FAILED',\n\n    LoadRemoteSettingsRequested = 'LOAD_REMOTE_SETTINGS_REQUESTED',\n    LoadRemoteSettingsSucceeded = 'LOAD_REMOTE_SETTINGS_SUCCEEDED',\n    LoadRemoteSettingsFailed = 'LOAD_REMOTE_SETTINGS_FAILED',\n\n    SignOutRemoteCustomerRequested = 'SIGN_OUT_REMOTE_CUSTOMER_REQUESTED',\n    SignOutRemoteCustomerSucceeded = 'SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED',\n    SignOutRemoteCustomerFailed = 'SIGN_OUT_REMOTE_CUSTOMER_FAILED',\n\n    UpdateRemoteCheckout = 'UPDATE_REMOTE_CHECKOUT',\n}\n\nexport type RemoteCheckoutAction = InitializeRemoteBillingAction |\n    InitializeRemoteShippingAction |\n    InitializeRemotePaymentAction |\n    SignOutRemoteCustomerAction |\n    LoadRemoteSettingsAction |\n    UpdateRemoteCheckoutAction;\n\nexport type InitializeRemoteBillingAction = InitializeRemoteBillingSucceededAction |\n    InitializeRemoteBillingFailedAction |\n    InitializeRemoteBillingRequestedAction;\n\nexport interface InitializeRemoteBillingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingSucceeded;\n}\n\nexport interface InitializeRemoteBillingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingFailed;\n}\n\nexport interface InitializeRemoteBillingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingRequested;\n}\n\nexport type InitializeRemoteShippingAction = InitializeRemoteShippingSucceededAction |\n    InitializeRemoteShippingFailedAction |\n    InitializeRemoteShippingRequestedAction;\n\nexport interface InitializeRemoteShippingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingSucceeded;\n}\n\nexport interface InitializeRemoteShippingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingFailed;\n}\n\nexport interface InitializeRemoteShippingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingRequested;\n}\n\nexport type InitializeRemotePaymentAction = InitializeRemotePaymentSucceededAction |\n    InitializeRemotePaymentFailedAction |\n    InitializeRemotePaymentRequestedAction;\n\nexport interface InitializeRemotePaymentSucceededAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentSucceeded;\n}\n\nexport interface InitializeRemotePaymentFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentFailed;\n}\n\nexport interface InitializeRemotePaymentRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentRequested;\n}\n\nexport type SignOutRemoteCustomerAction = SignOutRemoteCustomerSucceededAction |\n    SignOutRemoteCustomerFailedAction |\n    SignOutRemoteCustomerRequestedAction;\n\nexport interface SignOutRemoteCustomerSucceededAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded;\n}\n\nexport interface SignOutRemoteCustomerFailedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerFailed;\n}\n\nexport interface SignOutRemoteCustomerRequestedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerRequested;\n}\n\nexport type LoadRemoteSettingsAction = LoadRemoteSettingsSucceededAction |\n    LoadRemoteSettingsRequestedAction |\n    LoadRemoteSettingsFailedAction;\n\nexport interface LoadRemoteSettingsSucceededAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsSucceeded;\n}\n\nexport interface LoadRemoteSettingsRequestedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsRequested;\n}\n\nexport interface LoadRemoteSettingsFailedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsFailed;\n}\n\nexport interface UpdateRemoteCheckoutAction extends Action {\n    type: RemoteCheckoutActionType.UpdateRemoteCheckout;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n};\n\n/**\n * Throw this error if we are unable to make a request to the server. It wraps\n * any server response into a JS error object.\n */\nexport default class RequestError<TBody = any> extends StandardError {\n    body: TBody | {};\n    headers: { [key: string]: any };\n    errors: Array<{ code: string; message?: string }>;\n    status: number;\n\n    constructor(\n        response?: Response<TBody | {}>,\n        { message, errors }: {\n            message?: string;\n            errors?: Array<{ code: string; message?: string }>;\n        } = {}\n    ) {\n        const { body, headers, status } = response || DEFAULT_RESPONSE;\n\n        super(message || 'An unexpected error has occurred.');\n\n        this.name = 'RequestError';\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.errors = errors || [];\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport Config from './config';\n\nexport enum ConfigActionType {\n    LoadConfigRequested = 'LOAD_CONFIG_REQUESTED',\n    LoadConfigSucceeded = 'LOAD_CONFIG_SUCCEEDED',\n    LoadConfigFailed = 'LOAD_CONFIG_FAILED',\n}\n\nexport type LoadConfigAction =\n    LoadConfigRequestedAction |\n    LoadConfigSucceededAction |\n    LoadConfigFailedAction;\n\nexport interface LoadConfigRequestedAction extends Action {\n    type: ConfigActionType.LoadConfigRequested;\n}\n\nexport interface LoadConfigSucceededAction extends Action<Config> {\n    type: ConfigActionType.LoadConfigSucceeded;\n}\n\nexport interface LoadConfigFailedAction extends Action<Error> {\n    type: ConfigActionType.LoadConfigFailed;\n}\n","export const ACKNOWLEDGE = 'ACKNOWLEDGE';\nexport const FINALIZE = 'FINALIZE';\nexport const INITIALIZE = 'INITIALIZE';\n","import { isPlainObject as lodashIsPlainObject } from 'lodash';\n\n// We need this wrapper because Lodash's version doesn't act as a type guard\nexport default function isPlainObject(value: any): value is object {\n    return lodashIsPlainObject(value);\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport Country from './country';\n\nexport enum CountryActionType {\n    LoadCountriesRequested = 'LOAD_COUNTRIES_REQUESTED',\n    LoadCountriesSucceeded = 'LOAD_COUNTRIES_SUCCEEDED',\n    LoadCountriesFailed = 'LOAD_COUNTRIES_FAILED',\n}\n\nexport type LoadCountriesAction =\n    LoadCountriesRequestedAction |\n    LoadCountriesSucceededAction |\n    LoadCountriesFailedAction;\n\nexport interface LoadCountriesRequestedAction extends Action {\n    type: CountryActionType.LoadCountriesRequested;\n}\n\nexport interface LoadCountriesSucceededAction extends Action<Country[]> {\n    type: CountryActionType.LoadCountriesSucceeded;\n}\n\nexport interface LoadCountriesFailedAction extends Action<Error> {\n    type: CountryActionType.LoadCountriesFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Country } from '../geography';\n\nexport enum ShippingCountryActionType {\n    LoadShippingCountriesRequested = 'LOAD_SHIPPING_COUNTRIES_REQUESTED',\n    LoadShippingCountriesSucceeded = 'LOAD_SHIPPING_COUNTRIES_SUCCEEDED',\n    LoadShippingCountriesFailed = 'LOAD_SHIPPING_COUNTRIES_FAILED',\n}\n\nexport type LoadShippingCountriesAction = LoadShippingCountriesRequestedAction |\n    LoadShippingCountriesSucceededAction |\n    LoadShippingCountriesFailedAction;\n\nexport interface LoadShippingCountriesRequestedAction extends Action {\n    type: ShippingCountryActionType.LoadShippingCountriesRequested;\n}\n\nexport interface LoadShippingCountriesSucceededAction extends Action<Country[]> {\n    type: ShippingCountryActionType.LoadShippingCountriesSucceeded;\n}\n\nexport interface LoadShippingCountriesFailedAction extends Action<Error> {\n    type: ShippingCountryActionType.LoadShippingCountriesFailed;\n}\n","module.exports = require(\"@bigcommerce/request-sender\");","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum StoreCreditActionType {\n    ApplyStoreCreditRequested = 'APPLY_STORE_CREDIT_REQUESTED',\n    ApplyStoreCreditSucceeded = 'APPLY_STORE_CREDIT_SUCCEEDED',\n    ApplyStoreCreditFailed = 'APPLY_STORE_CREDIT_FAILED',\n}\n\nexport type StoreCreditAction =\n    ApplyStoreCreditAction;\n\nexport type ApplyStoreCreditAction =\n    ApplyStoreCreditRequestedAction |\n    ApplyStoreCreditSucceededAction |\n    ApplyStoreCreditFailedAction;\n\nexport interface ApplyStoreCreditRequestedAction extends Action {\n    type: StoreCreditActionType.ApplyStoreCreditRequested;\n}\n\nexport interface ApplyStoreCreditSucceededAction extends Action<Checkout> {\n    type: StoreCreditActionType.ApplyStoreCreditSucceeded;\n}\n\nexport interface ApplyStoreCreditFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: StoreCreditActionType.ApplyStoreCreditFailed;\n}\n","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when the client library of a payment method fails\n * to load, or for some reason, it is inaccessible.\n */\nexport default class PaymentMethodClientUnavailableError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to proceed because the client library of a payment method is not loaded or ready to be used.');\n\n        this.name = 'PaymentMethodClientUnavailableError';\n        this.type = 'payment_method_client_unavailable';\n    }\n}\n","module.exports = require(\"@bigcommerce/script-loader\");","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","export const HOSTED = 'PAYMENT_TYPE_HOSTED';\nexport const OFFLINE = 'PAYMENT_TYPE_OFFLINE';\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderAction } from '../order';\n\nimport PaymentResponseBody from './payment-response-body';\n\nexport enum PaymentActionType {\n    SubmitPaymentRequested = 'SUBMIT_PAYMENT_REQUESTED',\n    SubmitPaymentSucceeded = 'SUBMIT_PAYMENT_SUCCEEDED',\n    SubmitPaymentFailed = 'SUBMIT_PAYMENT_FAILED',\n\n    InitializeOffsitePaymentRequested = 'INITIALIZE_OFFSITE_PAYMENT_REQUESTED',\n    InitializeOffsitePaymentSucceeded = 'INITIALIZE_OFFSITE_PAYMENT_SUCCEEDED',\n    InitializeOffsitePaymentFailed = 'INITIALIZE_OFFSITE_PAYMENT_FAILED',\n}\n\nexport type PaymentAction = SubmitPaymentAction |\n    InitializeOffsitePaymentAction;\n\nexport type SubmitPaymentAction =\n    SubmitPaymentRequestedAction |\n    SubmitPaymentSucceededAction |\n    SubmitPaymentFailedAction |\n    LoadOrderAction;\n\nexport type InitializeOffsitePaymentAction =\n    InitializeOffsitePaymentRequestedAction |\n    InitializeOffsitePaymentSucceededAction |\n    InitializeOffsitePaymentFailedAction;\n\nexport interface SubmitPaymentRequestedAction extends Action {\n    type: PaymentActionType.SubmitPaymentRequested;\n}\n\nexport interface SubmitPaymentSucceededAction extends Action<PaymentResponseBody> {\n    type: PaymentActionType.SubmitPaymentSucceeded;\n}\n\nexport interface SubmitPaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.SubmitPaymentFailed;\n}\n\nexport interface InitializeOffsitePaymentRequestedAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentRequested;\n}\n\nexport interface InitializeOffsitePaymentSucceededAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentSucceeded;\n}\n\nexport interface InitializeOffsitePaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.InitializeOffsitePaymentFailed;\n}\n","import { uniq } from 'lodash';\n\nexport default function joinIncludes<T>(includes: T[]): string {\n    return uniq(includes).join(',');\n}\n","module.exports = require(\"shallowequal\");","export interface CompareOptions {\n    keyFilter?(key: string): boolean;\n}\n\nexport default function isEqual(objectA: any, objectB: any, options?: CompareOptions): boolean {\n    if (objectA === objectB) {\n        return true;\n    }\n\n    if (objectA && objectB && typeof objectA === 'object' && typeof objectB === 'object') {\n        if (Array.isArray(objectA) && Array.isArray(objectB)) {\n            return isArrayEqual(objectA, objectB, options);\n        }\n\n        if (Array.isArray(objectA) || Array.isArray(objectB)) {\n            return false;\n        }\n\n        if ((objectA instanceof Date) && (objectB instanceof Date)) {\n            return isDateEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof Date) || (objectB instanceof Date)) {\n            return false;\n        }\n\n        if ((objectA instanceof RegExp) && (objectB instanceof RegExp)) {\n            return isRegExpEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof RegExp) || (objectB instanceof RegExp)) {\n            return false;\n        }\n\n        return isObjectEqual(objectA, objectB, options);\n    }\n\n    return objectA === objectB;\n}\n\nfunction isRegExpEqual(objectA: RegExp, objectB: RegExp): boolean {\n    return objectA.toString() === objectB.toString();\n}\n\nfunction isDateEqual(objectA: Date, objectB: Date): boolean {\n    return objectA.getTime() === objectB.getTime();\n}\n\nfunction isArrayEqual(objectA: any[], objectB: any[], options?: CompareOptions): boolean {\n    if (objectA.length !== objectB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = objectA.length; index < length; index++) {\n        if (!isEqual(objectA[index], objectB[index], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction isObjectEqual(\n    objectA: { [key: string]: any },\n    objectB: { [key: string]: any },\n    options?: CompareOptions\n): boolean {\n    const filter = options && options.keyFilter;\n    const keysA = filter ? Object.keys(objectA).filter(filter) : Object.keys(objectA);\n    const keysB = filter ? Object.keys(objectB).filter(filter) : Object.keys(objectB);\n\n    if (keysA.length !== keysB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = keysA.length; index < length; index++) {\n        const key = keysA[index];\n\n        if (!objectB.hasOwnProperty(key)) {\n            return false;\n        }\n\n        if (!isEqual(objectA[key], objectB[key], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n","module.exports = require(\"@bigcommerce/form-poster\");","module.exports = require(\"reselect\");","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadCheckoutAction } from '../checkout';\n\nimport { CurrentCustomer } from './customer';\nimport { InternalCustomerResponseData } from './internal-customer-responses';\n\nexport enum CustomerActionType {\n    SignInCustomerRequested = 'SIGN_IN_CUSTOMER_REQUESTED',\n    SignInCustomerSucceeded = 'SIGN_IN_CUSTOMER_SUCCEEDED',\n    SignInCustomerFailed = 'SIGN_IN_CUSTOMER_FAILED',\n\n    SignOutCustomerRequested = 'SIGN_OUT_CUSTOMER_REQUESTED',\n    SignOutCustomerSucceeded = 'SIGN_OUT_CUSTOMER_SUCCEEDED',\n    SignOutCustomerFailed = 'SIGN_OUT_CUSTOMER_FAILED',\n\n    UpdateCustomerRequested = 'UPDATE_CUSTOMER_REQUESTED',\n    UpdateCustomerSucceeded = 'UPDATE_CUSTOMER_SUCCEEDED',\n    UpdateCustomerFailed = 'UPDATE_CUSTOMER_FAILED',\n}\n\nexport type CustomerAction =\n    UpdateCustomerAction |\n    SignInCustomerAction |\n    SignOutCustomerAction;\n\nexport type SignInCustomerAction =\n    SignInCustomerRequestedAction |\n    SignInCustomerSucceededAction |\n    SignInCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport type SignOutCustomerAction =\n    SignOutCustomerRequestedAction |\n    SignOutCustomerSucceededAction |\n    SignOutCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport type UpdateCustomerAction =\n    UpdateCustomerRequestedAction |\n    UpdateCustomerSucceededAction |\n    UpdateCustomerFailedAction;\n\nexport interface SignInCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignInCustomerRequested;\n}\n\nexport interface SignInCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignInCustomerSucceeded;\n}\n\nexport interface SignInCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignInCustomerFailed;\n}\n\nexport interface SignOutCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignOutCustomerRequested;\n}\n\nexport interface SignOutCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignOutCustomerSucceeded;\n}\n\nexport interface SignOutCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignOutCustomerFailed;\n}\n\nexport interface UpdateCustomerRequestedAction extends Action {\n    type: CustomerActionType.UpdateCustomerRequested;\n}\n\nexport interface UpdateCustomerSucceededAction extends Action<CurrentCustomer> {\n    type: CustomerActionType.UpdateCustomerSucceeded;\n}\n\nexport interface UpdateCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.UpdateCustomerFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum SpamProtectionActionType {\n    InitializeFailed = 'SPAM_PROTECTION_INITIALIZE_FAILED',\n    InitializeSucceeded = 'SPAM_PROTECTION_INITIALIZE_SUCCEEDED',\n    InitializeRequested = 'SPAM_PROTECTION_INITIALIZE_REQUESTED',\n    ExecuteRequested = 'SPAM_PROTECTION_EXECUTE_REQUESTED',\n    ExecuteSucceeded = 'SPAM_PROTECTION_EXECUTE_SUCCEEDED',\n    ExecuteFailed = 'SPAM_PROTECTION_EXECUTE_FAILED',\n}\n\nexport type SpamProtectionAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction |\n    ExecuteRequestedAction |\n    ExecuteSucceededAction |\n    ExecuteFailedAction;\n\nexport interface InitializeRequestedAction extends Action {\n    type: SpamProtectionActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: SpamProtectionActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: SpamProtectionActionType.InitializeFailed;\n}\n\nexport interface ExecuteRequestedAction extends Action {\n    type: SpamProtectionActionType.ExecuteRequested;\n}\n\nexport interface ExecuteSucceededAction extends Action<Checkout> {\n    type: SpamProtectionActionType.ExecuteSucceeded;\n}\n\nexport interface ExecuteFailedAction extends Action {\n    type: SpamProtectionActionType.ExecuteFailed;\n}\n","import { memoize } from '@bigcommerce/memoize';\nimport { createSelector as defaultSelectorCreator } from 'reselect';\n\n/**\n * Decorate selector creators with the ability to memoize the return value of\n * their combiner if it is a function (which effectively works as a partially\n * applied combiner).\n */\nexport default function withMemoizedCombiner<T extends typeof defaultSelectorCreator>(\n    creator: T\n): T {\n    return ((...args: any[]) => {\n        const combiner = args.pop();\n\n        // Reselect's default `createSelector` has many overloads. To avoid having\n        // to redefine all of them, we're using `any` to bypass the typechecker.\n        return (creator as any)(...args, (...combinerArgs: any[]) => {\n            // Although there are many overloads, all of them have the last argument\n            // as the combiner.\n            const result = combiner(...combinerArgs);\n\n            if (typeof result === 'function') {\n                return memoize(result);\n            }\n\n            return result;\n        });\n    }) as T;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ErrorActionType {\n    ClearError = 'CLEAR_ERROR',\n}\n\nexport type ErrorAction = ClearErrorAction;\n\nexport interface ClearErrorAction extends Action {\n    type: ErrorActionType.ClearError;\n    payload: Error;\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { cachableAction, ActionOptions } from '../common/data-store';\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadPaymentMethodsAction, LoadPaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\n\nexport default class PaymentMethodActionCreator {\n    constructor(\n        private _requestSender: PaymentMethodRequestSender\n    ) {}\n\n    loadPaymentMethods(options?: RequestOptions): Observable<LoadPaymentMethodsAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodsAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsRequested));\n\n            this._requestSender.loadPaymentMethods(options)\n                .then(response => {\n                    const meta = {\n                        deviceSessionId: response.headers['x-device-session-id'],\n                        sessionHash: response.headers['x-session-hash'],\n                    };\n\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsSucceeded, response.body, meta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodsFailed, response));\n                });\n        });\n    }\n\n    @cachableAction\n    loadPaymentMethod(methodId: string, options?: RequestOptions & ActionOptions): Observable<LoadPaymentMethodAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodRequested, undefined, { methodId }));\n\n            this._requestSender.loadPaymentMethod(methodId, options)\n                .then(response => {\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodSucceeded, response.body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodFailed, response, { methodId }));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport PaymentMethod from './payment-method';\n\nexport default class PaymentMethodRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadPaymentMethods({ timeout }: RequestOptions = {}): Promise<Response<PaymentMethod[]>> {\n        const url = '/api/storefront/payments';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n\n    loadPaymentMethod(methodId: string, { timeout }: RequestOptions = {}): Promise<Response<PaymentMethod>> {\n        const url = `/api/storefront/payments/${methodId}`;\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","const CHECKOUT_DEFAULT_INCLUDES = [\n    'cart.lineItems.physicalItems.options',\n    'cart.lineItems.digitalItems.options',\n    'customer',\n    'customer.customerGroup',\n    'payments',\n    'promotions.banners',\n];\n\nexport default CHECKOUT_DEFAULT_INCLUDES;\n","export const INTERNAL_USE_ONLY = 'This API endpoint is for internal use only and may change in the future';\n","/**\n * Decorates a class or a method by binding all its prototype methods or itself\n * to the calling instance respectively.\n */\nfunction bindDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T>;\nfunction bindDecorator<T extends Constructor<object>>(target: T): T;\nfunction bindDecorator(target: any, key?: any, descriptor?: any): any {\n    if (!key || !descriptor) {\n        return bindClassDecorator(target);\n    }\n\n    return bindMethodDecorator(target, key, descriptor);\n}\n\nexport default bindDecorator;\n\n/**\n * Decorates a class by binding all its prototype methods to the calling\n * instance.\n */\nexport function bindClassDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                bindMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\n/**\n * Decorates a method by binding it to the calling instance.\n */\nexport function bindMethodDecorator<T extends Method>(_: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let method: T = descriptor.value;\n\n    return {\n        get() {\n            const boundMethod = method.bind(this) as T;\n\n            Object.defineProperty(this, key, {\n                ...descriptor,\n                value: boundMethod,\n            });\n\n            return boundMethod;\n        },\n        set(value) {\n            method = value;\n        },\n    };\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\nexport type Method = (...args: any[]) => any;\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\nimport { GooglePayCreator } from '../googlepay';\n\nimport { BraintreeClientCreator, BraintreeDataCollectorCreator, BraintreeHostWindow, BraintreePaypalCheckoutCreator, BraintreePaypalCreator, BraintreeThreeDSecureCreator, BraintreeVisaCheckoutCreator } from './braintree';\n\nexport default class BraintreeScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: BraintreeHostWindow = window\n    ) {}\n\n    loadClient(): Promise<BraintreeClientCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/client.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.client) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.client;\n            });\n    }\n\n    load3DS(): Promise<BraintreeThreeDSecureCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/three-d-secure.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.threeDSecure) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.threeDSecure;\n            });\n    }\n\n    loadDataCollector(): Promise<BraintreeDataCollectorCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/data-collector.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.dataCollector) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.dataCollector;\n            });\n    }\n\n    loadPaypal(): Promise<BraintreePaypalCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/paypal.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypal) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.paypal;\n            });\n    }\n\n    loadPaypalCheckout(): Promise<BraintreePaypalCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/paypal-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypalCheckout) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.paypalCheckout;\n            });\n    }\n\n    loadVisaCheckout(): Promise<BraintreeVisaCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/visa-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.visaCheckout) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.visaCheckout;\n            });\n    }\n\n    loadGooglePayment(): Promise<GooglePayCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/google-payment.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.googlePayment) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.googlePayment;\n            });\n    }\n}\n","import { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport { BraintreeClient, BraintreeDataCollector, BraintreeModule, BraintreePaypal, BraintreePaypalCheckout, BraintreeThreeDSecure, BraintreeVisaCheckout, GooglePayBraintreeSDK } from './braintree';\nimport BraintreeScriptLoader from './braintree-script-loader';\n\nexport default class BraintreeSDKCreator {\n    private _client?: Promise<BraintreeClient>;\n    private _3ds?: Promise<BraintreeThreeDSecure>;\n    private _paypal?: Promise<BraintreePaypal>;\n    private _paypalCheckout?: Promise<BraintreePaypalCheckout>;\n    private _clientToken?: string;\n    private _visaCheckout?: Promise<BraintreeVisaCheckout>;\n    private _dataCollectors: {\n        default?: Promise<BraintreeDataCollector>;\n        paypal?: Promise<BraintreeDataCollector>;\n    } = {};\n    private _googlePay?: Promise<GooglePayBraintreeSDK>;\n\n    constructor(\n        private _braintreeScriptLoader: BraintreeScriptLoader\n    ) {}\n\n    initialize(clientToken: string) {\n        this._clientToken = clientToken;\n    }\n\n    getClient(): Promise<BraintreeClient> {\n        if (!this._clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!this._client) {\n            this._client = this._braintreeScriptLoader.loadClient()\n                .then(client => client.create({ authorization: this._clientToken }));\n        }\n\n        return this._client;\n    }\n\n    getPaypal(): Promise<BraintreePaypal> {\n        if (!this._paypal) {\n            this._paypal = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypal(),\n            ])\n            .then(([client, paypal]) => paypal.create({ client }));\n        }\n\n        return this._paypal;\n    }\n\n    getPaypalCheckout(): Promise<BraintreePaypalCheckout> {\n        if (!this._paypalCheckout) {\n            this._paypalCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypalCheckout(),\n            ])\n                .then(([client, paypalCheckout]) => paypalCheckout.create({ client }));\n        }\n\n        return this._paypalCheckout;\n    }\n\n    get3DS(): Promise<BraintreeThreeDSecure> {\n        if (!this._3ds) {\n            this._3ds = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.load3DS(),\n            ])\n            .then(([client, threeDSecure]) => threeDSecure.create({ client }));\n        }\n\n        return this._3ds;\n    }\n\n    getDataCollector(options?: { paypal: boolean }): Promise<BraintreeDataCollector> {\n        const cacheKey = options && options.paypal ? 'paypal' : 'default';\n        let cached = this._dataCollectors[cacheKey];\n\n        if (!cached) {\n            cached = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadDataCollector(),\n            ])\n            .then(([client, dataCollector]) => dataCollector.create({ client, kount: true, ...options }))\n            .catch(error => {\n                if (error && error.code === 'DATA_COLLECTOR_KOUNT_NOT_ENABLED') {\n                    return { deviceData: undefined, teardown: () => Promise.resolve() };\n                }\n\n                throw error;\n            });\n\n            this._dataCollectors[cacheKey] = cached;\n        }\n\n        return cached;\n    }\n\n    getVisaCheckout(): Promise<BraintreeVisaCheckout> {\n        if (!this._visaCheckout) {\n            this._visaCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadVisaCheckout(),\n            ])\n            .then(([client, visaCheckout]) => visaCheckout.create({ client }));\n        }\n\n        return this._visaCheckout;\n    }\n\n    getGooglePaymentComponent(): Promise<GooglePayBraintreeSDK> {\n        if (!this._googlePay) {\n            this._googlePay = Promise.all ([\n                this.getClient(),\n                this._braintreeScriptLoader.loadGooglePayment(),\n            ])\n                .then(([client, googlePay]) => googlePay.create({ client }));\n        }\n\n        return this._googlePay;\n    }\n\n    teardown(): Promise<void> {\n        return Promise.all([\n            this._teardown(this._3ds),\n            this._teardown(this._dataCollectors.default),\n            this._teardown(this._dataCollectors.paypal),\n            this._teardown(this._visaCheckout),\n            this._teardown(this._googlePay),\n        ]).then(() => {\n            this._3ds = undefined;\n            this._visaCheckout = undefined;\n            this._dataCollectors = {};\n            this._googlePay = undefined;\n        });\n    }\n\n    private _teardown(module?: Promise<BraintreeModule>) {\n        return module ?\n            module.then(mod => mod.teardown()) :\n            Promise.resolve();\n    }\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n    SpamProtectionNotInitialized,\n}\n\n/**\n * Throw this error if a method requires a certain initialization call to be\n * made first. Some objects can be constructed but they cannot be used until a\n * separate initialization call is made.\n */\nexport default class NotInitializedError extends StandardError {\n    constructor(\n        public subtype: NotInitializedErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'NotInitializedError';\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n    case NotInitializedErrorType.CustomerNotInitialized:\n        return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.PaymentNotInitialized:\n        return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.ShippingNotInitialized:\n        return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.SpamProtectionNotInitialized:\n        return 'Unable to proceed because the checkout spam protection has not been initialized.';\n\n    default:\n        return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import { createErrorAction, Action } from '@bigcommerce/data-store';\nimport { concat, of, throwError, Observable } from 'rxjs';\n\nexport default function throwErrorAction<TPayload, TMeta, TType extends string>(\n    type: TType,\n    error?: TPayload,\n    meta?: TMeta\n): Observable<Action<TPayload, TMeta, TType>> {\n    if (isErrorAction(error)) {\n        return concat(of(error), throwError(createErrorAction(type, error.payload, meta)));\n    }\n\n    return throwError(createErrorAction(type, error, meta));\n}\n\nfunction isErrorAction(action: any): action is Action {\n    return action && action.type && action.error;\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { memoize } from '@bigcommerce/memoize';\nimport { from, Observable } from 'rxjs';\nimport { shareReplay } from 'rxjs/operators';\n\nexport default function cacheAction<TFunction extends CreateActionFn>(\n    fn: TFunction\n): TFunction {\n    function decoratedFn(this: any, ...args: any[]) {\n        const action = fn.call(this, ...args);\n\n        if (action instanceof Observable) {\n            return from(action).pipe(shareReplay());\n        }\n\n        if (typeof action === 'function') {\n            return memoize(store => from(action(store)).pipe(shareReplay()));\n        }\n\n        return action;\n    }\n\n    return memoize(decoratedFn as TFunction);\n}\n\ntype CreateActionFn = (...args: any[]) => Observable<Action> | ThunkAction<Action> | Action;\n","import ActionOptions from './action-options';\n\nexport default function isActionOptions(param: any): param is ActionOptions {\n    return param && typeof param.useCache === 'boolean';\n}\n","import cacheAction from './cache-action';\nimport isActionOptions from './is-action-options';\n\nexport default function cachableActionDecorator<TMethod extends (...args: any[]) => any>(\n    _: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<TMethod>\n): TypedPropertyDescriptor<TMethod> {\n    const memoizedMethods = new WeakMap<object, { [key: string]: TMethod }>();\n\n    function decorateMethod(this: object, method: TMethod): TMethod {\n        return ((...args: any[]) => {\n            const lastArg = args[args.length - 1];\n            const { useCache } = isActionOptions(lastArg) ? lastArg : { useCache: false };\n\n            if (!useCache) {\n                return method.call(this, ...args);\n            }\n\n            const instanceMethods = memoizedMethods.get(this) || {};\n\n            if (!memoizedMethods.get(this)) {\n                memoizedMethods.set(this, instanceMethods);\n            }\n\n            if (!instanceMethods[key]) {\n                instanceMethods[key] = cacheAction(method);\n            }\n\n            return instanceMethods[key].call(this, ...args);\n        }) as TMethod;\n    }\n\n    return {\n        get() {\n            if (typeof descriptor.value !== 'function') {\n                throw new Error('Decorator should be used in functions');\n            }\n\n            const value = decorateMethod.call(this, descriptor.value);\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n    };\n}\n","import joinIncludes from './join-includes';\nimport mergeIncludes from './merge-includes';\n\n/**\n * Joins or merges a base list of includes with a set of additional includes.\n */\nexport default function joinOrMergeIncludes<T extends string>(\n    baseIncludes: T[],\n    includeDictionaryOrList: { [key in T]?: boolean } | T[] = []\n): string {\n    return Array.isArray(includeDictionaryOrList) ?\n        joinIncludes([\n            ...baseIncludes,\n            ...includeDictionaryOrList,\n        ]) :\n        mergeIncludes(baseIncludes, includeDictionaryOrList);\n}\n","import { difference, filter, keys, pickBy } from 'lodash';\n\nimport joinIncludes from './join-includes';\n\n/**\n * Merges includes given a list of base includes and a dictionary\n * of includes\n */\nexport default function mergeIncludes<T extends string>(\n    baseIncludes: T[],\n    includesDictionary?: { [key in T]?: boolean }\n): string {\n    const deletions = keys(pickBy(includesDictionary, on => !on));\n    const additions = keys(filter(includesDictionary));\n\n    return joinIncludes([\n            ...difference(baseIncludes, deletions),\n            ...additions,\n        ]);\n}\n","import { isPlainObject, omitBy, transform } from 'lodash';\n\nexport default function omitDeep(object: any, predicate: (value: any, key: string) => boolean): any {\n    if (Array.isArray(object)) {\n        return object.map(value => omitDeep(value, predicate));\n    }\n\n    if (isPlainObject(object)) {\n        return transform(omitBy(object, predicate), (result, value, key) => {\n            result[key] = omitDeep(value, predicate);\n        }, {} as { [key: string]: any });\n    }\n\n    return object;\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { CurrentCustomer } from './customer';\nimport CustomerCredentials from './customer-credentials';\nimport { InternalCustomerResponseBody } from './internal-customer-responses';\n\nexport default class CustomerRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    updateCustomer(customer: CurrentCustomer, { timeout }: RequestOptions = {}): Promise<Response<CurrentCustomer>> {\n        const url = '/api/storefront/customer';\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: customer, headers, timeout });\n    }\n\n    signInCustomer(credentials: CustomerCredentials, { timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.post(url, { timeout, body: credentials });\n    }\n\n    signOutCustomer({ timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.delete(url, { timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, merge, of, Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\n\nimport { CheckoutRequestBody } from './checkout';\nimport { CheckoutActionType, LoadCheckoutAction, UpdateCheckoutAction } from './checkout-actions';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default class CheckoutActionCreator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender,\n        private _configActionCreator: ConfigActionCreator\n    ) {}\n\n    loadCheckout(id: string, options?: RequestOptions): Observable<LoadCheckoutAction> {\n        return concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            merge(\n                this._configActionCreator.loadConfig({ ...options, useCache: true }),\n                defer(() => this._checkoutRequestSender.loadCheckout(id, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body)))\n            )\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    loadDefaultCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            this._configActionCreator.loadConfig(),\n            defer(async () => {\n                const state = store.getState();\n                const context = state.config.getContextConfig();\n\n                if (!context || !context.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                const { body } = await this._checkoutRequestSender.loadCheckout(context.checkoutId, options);\n\n                return createAction(CheckoutActionType.LoadCheckoutSucceeded, body);\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    updateCheckout(\n        body: CheckoutRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateCheckoutAction, InternalCheckoutSelectors> {\n        return store => new Observable(observer => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CheckoutActionType.UpdateCheckoutRequested));\n\n            this._checkoutRequestSender.updateCheckout(checkout.id, body, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CheckoutActionType.UpdateCheckoutSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CheckoutActionType.UpdateCheckoutFailed, response));\n                });\n        });\n    }\n\n    loadCurrentCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            return this.loadCheckout(checkout.id, options);\n        };\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { find } from 'lodash';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { Cart } from '../cart';\nimport { CheckoutIncludes, CheckoutParams, CheckoutRequestSender, InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport Consignment, { ConsignmentsRequestBody, ConsignmentAssignmentRequestBody, ConsignmentCreateRequestBody, ConsignmentLineItem, ConsignmentRequestBody, ConsignmentShippingOptionRequestBody, ConsignmentUpdateRequestBody } from './consignment';\nimport { ConsignmentActionType, CreateConsignmentsAction, DeleteConsignmentAction, LoadShippingOptionsAction, UpdateConsignmentAction, UpdateShippingOptionAction } from './consignment-actions';\nimport ConsignmentRequestSender from './consignment-request-sender';\n\nexport default class ConsignmentActionCreator {\n    constructor(\n        private _consignmentRequestSender: ConsignmentRequestSender,\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    unassignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            if (!existingConsignment) {\n                throw new InvalidArgumentError('No consignment found for the specified address');\n            }\n\n            const lineItems = this._removeLineItems(\n                consignment.lineItems,\n                existingConsignment,\n                state.cart.getCart()\n            );\n\n            if (!lineItems.length) {\n                return this.deleteConsignment(existingConsignment.id, options)(store);\n            }\n\n            return this.updateConsignment({\n                id: existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems,\n            }, options)(store);\n        };\n    }\n\n    assignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            return this._createOrUpdateConsignment({\n                id: existingConsignment && existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems: this._addLineItems(\n                    consignment.lineItems,\n                    existingConsignment,\n                    state.cart.getCart()\n                ),\n            }, options)(store);\n        };\n    }\n\n    selectShippingOption(\n        id: string,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n            const consignments = state.consignments.getConsignments();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (!consignments || !consignments.length) {\n                throw new MissingDataError(MissingDataErrorType.MissingConsignments);\n            }\n\n            const consignmentUpdateBody = {\n                id: consignments[0].id,\n                shippingOptionId: id,\n            };\n\n            const consignmentMeta = {\n                id: consignments[0].id,\n            };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignmentUpdateBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(\n                        ConsignmentActionType.UpdateShippingOptionSucceeded,\n                        body,\n                        consignmentMeta\n                    ));\n\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(\n                        ConsignmentActionType.UpdateShippingOptionFailed,\n                        response,\n                        consignmentMeta\n                    ));\n                });\n        });\n    }\n\n    loadShippingOptions(options?: RequestOptions): ThunkAction<LoadShippingOptionsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadShippingOptionsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.LoadShippingOptionsRequested));\n\n            this._checkoutRequestSender.loadCheckout(checkout.id, {\n                ...options,\n                params: {\n                    include: [CheckoutIncludes.AvailableShippingOptions],\n                },\n            })\n            .then(({ body }) => {\n                observer.next(createAction(ConsignmentActionType.LoadShippingOptionsSucceeded, body));\n                observer.complete();\n            })\n            .catch(response => {\n                observer.error(createErrorAction(ConsignmentActionType.LoadShippingOptionsFailed, response));\n            });\n        });\n    }\n\n    updateAddress(\n        address: AddressRequestBody,\n        options?: RequestOptions<CheckoutParams>\n    ): ThunkAction<CreateConsignmentsAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const consignment = this._getUpdateAddressRequestBody(address, store);\n            const consignments = store.getState().consignments.getConsignments();\n\n            if (consignments && consignments.length) {\n                (consignment as ConsignmentUpdateRequestBody).id = consignments[0].id;\n            }\n\n            return this._createOrUpdateConsignment(consignment, options)(store);\n        };\n    }\n\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions<CheckoutParams>\n    ): ThunkAction<CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CreateConsignmentsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.CreateConsignmentsRequested));\n\n            this._consignmentRequestSender.createConsignments(checkout.id, consignments, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.CreateConsignmentsSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.CreateConsignmentsFailed, response));\n                });\n        });\n    }\n\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions<CheckoutParams>\n    ): ThunkAction<UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n            const consignmentMeta = { id: consignmentId };\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.DeleteConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.deleteConsignment(checkout.id, consignmentId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.DeleteConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.DeleteConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    updateShippingOption(\n        consignment: ConsignmentShippingOptionRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateShippingOptionSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateShippingOptionFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    private _createOrUpdateConsignment(\n        consignment: ConsignmentCreateRequestBody | ConsignmentUpdateRequestBody,\n        options?: RequestOptions<CheckoutParams>\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (this._isUpdateConsignmentRequest(consignment)) {\n                return this.updateConsignment(consignment, options)(store);\n            }\n\n            return this.createConsignments([consignment], options)(store);\n        };\n    }\n\n    private _getUpdateAddressRequestBody(\n        shippingAddress: AddressRequestBody,\n        store: ReadableCheckoutStore\n    ): ConsignmentRequestBody {\n        const state = store.getState();\n        const cart = state.cart.getCart();\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n        const { physicalItems, customItems = [] } = cart.lineItems;\n\n        return {\n            shippingAddress,\n            lineItems: [ ...physicalItems, ...customItems ].map(item => ({\n                itemId: item.id,\n                quantity: item.quantity,\n            })),\n        };\n    }\n\n    private _removeLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return this._hydrateLineItems(consignment.lineItemIds, cart).map(existingItem => {\n            const sharedItem = find(lineItems, lineItem => lineItem.itemId === existingItem.itemId);\n\n            return {\n                ...existingItem,\n                quantity: sharedItem ? (existingItem.quantity - sharedItem.quantity) : existingItem.quantity,\n            };\n        }).filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _addLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment?: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!consignment) {\n            return lineItems;\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return lineItems\n            .concat(this._hydrateLineItems(consignment.lineItemIds, cart))\n            .filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _hydrateLineItems(lineItemIds: string[], cart: Cart): ConsignmentLineItem[] {\n        return lineItemIds.map(itemId => {\n            const item = find(cart.lineItems.physicalItems, lineItem => lineItem.id === itemId);\n\n            return {\n                itemId,\n                quantity: item ? item.quantity : 0,\n            };\n        });\n    }\n\n    private _isUpdateConsignmentRequest(\n        request: ConsignmentRequestBody\n    ): request is ConsignmentUpdateRequestBody {\n        const updateRequest = request as ConsignmentUpdateRequestBody;\n\n        return !!updateRequest.id;\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CheckoutParams } from '../checkout';\nimport { joinIncludes, joinOrMergeIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nimport { ConsignmentsRequestBody, ConsignmentUpdateRequestBody } from './consignment';\n\nconst DEFAULT_INCLUDES = [\n        'consignments.availableShippingOptions',\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ];\n\nexport default class ConsignmentRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createConsignments(\n        checkoutId: string,\n        consignments: ConsignmentsRequestBody,\n        { timeout, params: { include } = {} }: RequestOptions<CheckoutParams> = {}\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            body: consignments,\n            params: {\n                include: joinOrMergeIncludes(DEFAULT_INCLUDES, include),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    updateConsignment(\n        checkoutId: string,\n        consignment: ConsignmentUpdateRequestBody,\n        { timeout, params: { include } = {} }: RequestOptions<CheckoutParams> = {}\n    ): Promise<Response<Checkout>> {\n        const { id, ...body } = consignment;\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, {\n            body,\n            params: {\n                include: joinOrMergeIncludes(DEFAULT_INCLUDES, include),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    deleteConsignment(\n        checkoutId: string,\n        consignmentId: string,\n        { timeout }: RequestOptions = {}\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${consignmentId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n        const include = joinIncludes(DEFAULT_INCLUDES);\n\n        return this._requestSender.delete(url, { params: { include }, headers, timeout });\n    }\n}\n","export default function getCallbackUrl(origin: string): string {\n    return `${window.location.origin}/checkout.php?action=set_external_checkout&provider=masterpass&gateway=stripe&origin=${origin}`;\n}\n","export default function isPrivate(key: string): boolean {\n    return `${key}`.indexOf('$$') === 0 || `${key}`.indexOf('_') === 0;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * Throw this error if there is an unexpected error and it is not possible to\n * recover from unless the shopper creates a new checkout session.\n */\nexport default class UnrecoverableError extends RequestError {\n    constructor(response: Response, message?: string) {\n        super(response, {\n            message: message || 'An unexpected error has occurred. The checkout process cannot continue as a result.',\n        });\n\n        this.name = 'UnrecoverableError';\n        this.type = 'unrecoverable';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromInternalErrorResponse(\n    response: Response<InternalErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || body.detail || body.title || message,\n        errors: errors.length ?\n            errors.map(message => ({ code: body.type, message })) :\n            [{ code: body.type, message: body.detail || body.title }],\n    });\n}\n\nfunction joinErrors(errors: string[]): string | undefined {\n    return errors.reduce((result: string[], error) => {\n        if (error) {\n            return [...result, error];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\nimport { last } from 'lodash';\n\nimport ErrorResponseBody, { InternalErrorResponseBody, StorefrontErrorResponseBody } from './error-response-body';\nimport { mapFromInternalErrorResponse, mapFromPaymentErrorResponse, mapFromStorefrontErrorResponse, RequestError, TimeoutError } from './errors';\n\nexport default class RequestErrorFactory {\n    private _factoryMethods: { [key: string]: ErrorFactoryMethod } = {};\n\n    constructor() {\n        this.register('default', (response, message) => new RequestError(response, { message }));\n        this.register('internal', (response, message) => mapFromInternalErrorResponse(response, message));\n        this.register('storefront', (response, message) => mapFromStorefrontErrorResponse(response, message));\n        this.register('payment', (response, message) => mapFromPaymentErrorResponse(response, message));\n        this.register('timeout', response => new TimeoutError(response));\n    }\n\n    register(type: string, factoryMethod: ErrorFactoryMethod): void {\n        this._factoryMethods[type] = factoryMethod;\n    }\n\n    createError(response: Response, message?: string): RequestError {\n        const factoryMethod = this._factoryMethods[this._getType(response)] || this._factoryMethods.default;\n\n        return factoryMethod(response, message);\n    }\n\n    private _getType(response: Response<ErrorResponseBody>): string {\n        if (response.status === 0) {\n            return 'timeout';\n        }\n\n        if (this._isStorefrontErrorResponseBody(response.body)) {\n            return 'storefront';\n        }\n\n        if (this._isInternalErrorResponseBody(response.body)) {\n            const internalType = last(response.body.type.split('/'));\n\n            return internalType && this._factoryMethods[internalType] ?\n                internalType :\n                'internal';\n        }\n\n        const error = last(response.body && response.body.errors);\n\n        if (error && error.code && this._factoryMethods[error.code]) {\n            return error.code;\n        }\n\n        return 'payment';\n    }\n\n    private _isStorefrontErrorResponseBody(\n        errorResponse: ErrorResponseBody\n    ): errorResponse is StorefrontErrorResponseBody {\n        const storefrontErrorResponse = errorResponse as StorefrontErrorResponseBody;\n\n        return !this._isInternalErrorResponseBody(errorResponse) &&\n            typeof storefrontErrorResponse.title === 'string' &&\n            typeof storefrontErrorResponse.type === 'string' &&\n            typeof storefrontErrorResponse.status === 'number' &&\n            typeof storefrontErrorResponse.detail === 'string';\n    }\n\n    private _isInternalErrorResponseBody(\n        errorResponse: ErrorResponseBody\n    ): errorResponse is InternalErrorResponseBody {\n        const internalErrorResponse = errorResponse as InternalErrorResponseBody;\n\n        return typeof internalErrorResponse.errors === 'object' &&\n            typeof internalErrorResponse.title === 'string' &&\n            typeof internalErrorResponse.type === 'string' &&\n            typeof internalErrorResponse.status === 'number';\n    }\n}\n\nexport type ErrorFactoryMethod = (response: Response, message?: string) => RequestError;\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { StorefrontErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromStorefrontErrorResponse(\n    response: Response<StorefrontErrorResponseBody>,\n    message?: string\n): RequestError<StorefrontErrorResponseBody> {\n    const { body } = response;\n\n    return new RequestError(response, {\n        message: message || body.detail || body.title,\n        errors: [{\n            code: body.code || body.type,\n            message: body.detail || body.title,\n        }],\n    });\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { omitDeep } from '../utility';\n\nimport { ClearErrorAction, ErrorActionType } from './error-actions';\n\nexport default function clearErrorReducer<TState extends { [key: string]: any }, TAction extends Action>(\n    state: TState,\n    action: TAction\n): TState | undefined {\n    if (isClearErrorAction(action)) {\n        return omitDeep(state, value => value === action.payload);\n    }\n\n    return state;\n}\n\nfunction isClearErrorAction(action: Action): action is ClearErrorAction {\n    return action.type === ErrorActionType.ClearError;\n}\n","import isEqual from './is-equal';\n\n/**\n * Replace the current value with a new value if the former is different to the\n * latter.\n */\nexport default function replace<T>(currentValue: T, newValue?: T): T {\n    if (newValue === undefined || isEqual(currentValue, newValue)) {\n        return currentValue;\n    }\n\n    return newValue;\n}\n","import isEqual from './is-equal';\n\n/**\n * Set a new value to an object under a key if the new value is different to the\n * current value of the key.\n */\nexport default function objectSet<T extends { [key: string]: any }, K extends keyof T>(\n    object: T | undefined,\n    key: K,\n    value: T[K]\n): T {\n    if (object && object.hasOwnProperty(key) && isEqual(object[key], value)) {\n        return object;\n    }\n\n    return {\n        ...object as any,\n        [key]: value,\n    };\n}\n","import BillingAddress from './billing-address';\n\nexport default interface BillingAddressState {\n    data?: BillingAddress;\n    errors: BillingAddressErrorsState;\n    statuses: BillingAddressStatusesState;\n}\n\nexport interface BillingAddressErrorsState {\n    loadError?: Error;\n    updateError?: Error;\n    continueAsGuestError?: Error;\n}\n\nexport interface BillingAddressStatusesState {\n    isLoading?: boolean;\n    isUpdating?: boolean;\n    isContinuingAsGuest?: boolean;\n}\n\nexport const DEFAULT_STATE: BillingAddressState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { objectSet, replace } from '../common/utility';\nimport { CustomerActionType, UpdateCustomerAction } from '../customer';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport BillingAddress from './billing-address';\nimport { BillingAddressAction, BillingAddressActionType } from './billing-address-actions';\nimport BillingAddressState, { BillingAddressErrorsState, BillingAddressStatusesState, DEFAULT_STATE } from './billing-address-state';\n\nexport default function billingAddressReducer(\n    state: BillingAddressState = DEFAULT_STATE,\n    action: Action\n): BillingAddressState {\n    const reducer = combineReducers<BillingAddressState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: BillingAddress | undefined,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddress | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return replace(data, action.payload && action.payload.billingAddress);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: BillingAddressErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | BillingAddressAction | OrderAction | UpdateCustomerAction\n): BillingAddressErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return objectSet(errors, 'updateError', undefined);\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n        return objectSet(errors, 'updateError', action.payload);\n\n    case CustomerActionType.UpdateCustomerRequested:\n    case CustomerActionType.UpdateCustomerSucceeded:\n    case BillingAddressActionType.ContinueAsGuestRequested:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return objectSet(errors, 'continueAsGuestError', undefined);\n\n    case CustomerActionType.UpdateCustomerFailed:\n    case BillingAddressActionType.ContinueAsGuestFailed:\n        return objectSet(errors, 'continueAsGuestError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: BillingAddressStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | BillingAddressAction | OrderAction | UpdateCustomerAction\n): BillingAddressStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n        return objectSet(statuses, 'isUpdating', true);\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return objectSet(statuses, 'isUpdating', false);\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n    case CustomerActionType.UpdateCustomerRequested:\n        return objectSet(statuses, 'isContinuingAsGuest', true);\n\n    case CustomerActionType.UpdateCustomerSucceeded:\n    case CustomerActionType.UpdateCustomerFailed:\n    case BillingAddressActionType.ContinueAsGuestFailed:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return objectSet(statuses, 'isContinuingAsGuest', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { isArray } from 'lodash';\n\nimport isPlainObject from './is-plain-object';\nimport objectMerge from './object-merge';\nimport replace from './replace';\n\nexport interface ArrayReplaceOptions {\n    matchObject(objectA: any, objectB: any): boolean;\n}\n\nfunction arrayReplace<T>(currentArray: T[] | undefined, newArray: T[], options?: ArrayReplaceOptions): T[];\nfunction arrayReplace<T>(currentArray: T[], newArray?: T[], options?: ArrayReplaceOptions): undefined;\nfunction arrayReplace<T>(currentArray?: T[], newArray?: T[], options?: ArrayReplaceOptions): T[] | undefined;\nfunction arrayReplace<T>(currentArray?: T[], newArray?: T[], options?: ArrayReplaceOptions): T[] | undefined {\n    const { matchObject = (a: any, b: any) => a.id !== undefined && a.id === b.id } = options || {};\n\n    // Return the new array if the current array does not exist\n    if (!currentArray) {\n        return newArray;\n    }\n\n    // If the new array does not exist, or the current array is strictly equal\n    // to the new array, exit early and return the current array so that the\n    // object reference doesn't change\n    if (!newArray || currentArray === newArray) {\n        return currentArray;\n    }\n\n    // Otherwise, try to replace the items of the current array with the new\n    // array. If the item from the two arrays are the same, keep the current\n    // one. Do it recursively until all arrays are replaced.\n    let sameAsCurrentCount = 0;\n    let sameAsNewCount = 0;\n\n    const countSameAsReplaced = <T>(replacedValue: T, currentValue: T, newValue: T): T => {\n        sameAsCurrentCount += replacedValue === currentValue ? 1 : 0;\n        sameAsNewCount += replacedValue === newValue ? 1 : 0;\n\n        return replacedValue;\n    };\n\n    const result = newArray.map((newItem, index) => {\n        const currentItem = currentArray && currentArray[index];\n\n        if (isPlainObject(currentItem) && isPlainObject(newItem)) {\n            if (matchObject(currentItem, newItem)) {\n                return countSameAsReplaced(\n                    objectMerge(currentItem, newItem),\n                    currentItem,\n                    newItem\n                );\n            }\n\n            return countSameAsReplaced(\n                replace(currentItem, newItem),\n                currentItem,\n                newItem\n            );\n        }\n\n        if (isArray(currentItem) && isArray(newItem)) {\n            return countSameAsReplaced(\n                arrayReplace(currentItem, newItem),\n                currentItem,\n                newItem\n            );\n        }\n\n        return countSameAsReplaced(\n            replace(currentItem, newItem),\n            currentItem,\n            newItem\n        );\n    }) as T[];\n\n    // If all items in the result are identical to the current array, and the\n    // current array and the new array have the same size, simply return the\n    // current array instead of the result.\n    if (sameAsCurrentCount === newArray.length && (currentArray && currentArray.length === newArray.length)) {\n        return currentArray;\n    }\n\n    // If all items in the result are identical to the new array, simply return\n    // the new array.\n    if (sameAsNewCount === newArray.length) {\n        return newArray;\n    }\n\n    return result;\n}\n\nexport default arrayReplace;\n","import { isArray } from 'lodash';\n\nimport arrayReplace from './array-replace';\nimport isPlainObject from './is-plain-object';\nimport objectSet from './object-set';\n\nfunction objectMerge<T extends object>(currentObject: T, newObject?: Partial<T>): T;\nfunction objectMerge<T extends object>(currentObject: T | undefined, newObject: Partial<T>): Partial<T>;\nfunction objectMerge<T extends object>(currentObject?: T, newObject?: Partial<T>): T | undefined;\nfunction objectMerge<T extends object>(currentObject?: T, newObject?: Partial<T>): T | Partial<T> | undefined {\n    if (!currentObject) {\n        return newObject;\n    }\n\n    // If the new object does not exist but the current object does, or the new\n    // object is strictly equal to the current object, return the current object\n    if (!newObject || currentObject === newObject) {\n        return currentObject;\n    }\n\n    // If both objects exist, but some values might be different, perform a merge.\n    // Retain values that are equal and only replace them with the new values if\n    // they are different.\n    return (Object.keys(newObject) as Array<keyof T>)\n        .reduce((result, key) => {\n            const currentValue = result[key];\n            const newValue = newObject[key];\n\n            if (isPlainObject(currentValue) && isPlainObject(newValue)) {\n                return objectSet(result, key, objectMerge(currentValue, newValue));\n            }\n\n            if (isArray(currentValue) && isArray(newValue)) {\n                return objectSet(result, key, arrayReplace(currentValue, newValue) as any);\n            }\n\n            return objectSet(result, key, newValue as any);\n        }, currentObject);\n}\n\nexport default objectMerge;\n","import Cart from './cart';\n\nexport default interface CartState {\n    data?: Cart;\n    errors: CartErrorsState;\n    statuses: CartStatusesState;\n}\n\nexport interface CartErrorsState {\n    loadError?: Error;\n}\n\nexport interface CartStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: CartState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\nimport { CouponAction, CouponActionType, GiftCertificateAction, GiftCertificateActionType } from '../coupon';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport Cart from './cart';\nimport CartState, { CartErrorsState, CartStatusesState, DEFAULT_STATE } from './cart-state';\n\nexport default function cartReducer(\n    state: CartState = DEFAULT_STATE,\n    action: Action\n): CartState {\n    const reducer = combineReducers<CartState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Cart | undefined,\n    action: BillingAddressAction | CheckoutAction | ConsignmentAction | CouponAction | GiftCertificateAction\n): Cart | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return objectMerge(data, action.payload && action.payload.cart);\n\n    default:\n        return data;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CartStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction\n): CartStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n\nfunction errorsReducer(\n    errors: CartErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction\n): CartErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n","import { CheckoutButtonMethodType } from './strategies';\n\nexport default interface CheckoutButtonState {\n    data: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonDataState | undefined\n    };\n    errors: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonErrorsState | undefined\n    };\n    statuses: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonStatusesState | undefined\n    };\n}\n\nexport interface CheckoutButtonDataState {\n    initializedContainers: {\n        [key: string]: boolean;\n    };\n}\n\nexport interface CheckoutButtonErrorsState {\n    initializeError?: Error;\n    deinitializeError?: Error;\n}\n\nexport interface CheckoutButtonStatusesState {\n    isInitializing?: boolean;\n    isDeinitializing?: boolean;\n}\n\nexport const DEFAULT_STATE: CheckoutButtonState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { CheckoutButtonAction, CheckoutButtonActionType } from './checkout-button-actions';\nimport CheckoutButtonState, { CheckoutButtonDataState, CheckoutButtonErrorsState, CheckoutButtonStatusesState, DEFAULT_STATE } from './checkout-button-state';\n\nconst DEFAULT_DATA_STATE: CheckoutButtonDataState = { initializedContainers: {} };\nconst DEFAULT_ERROR_STATE: CheckoutButtonErrorsState = {};\nconst DEFAULT_STATUS_STATE: CheckoutButtonStatusesState = {};\n\nexport default function checkoutButtonReducer(\n    state: CheckoutButtonState = DEFAULT_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<CheckoutButtonState>({\n        data: combineReducers({\n            [action.meta.methodId]: dataReducer,\n        }),\n        errors: combineReducers({\n            [action.meta.methodId]: errorsReducer,\n        }),\n        statuses: combineReducers({\n            [action.meta.methodId]: statusesReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutButtonDataState = DEFAULT_DATA_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonDataState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        if (!action.meta || !action.meta.containerId) {\n            return data;\n        }\n\n        return objectMerge(data, {\n            initializedContainers: {\n                [action.meta.containerId]: true,\n            },\n        });\n\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return objectSet(data, 'initializedContainers', {});\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CheckoutButtonErrorsState = DEFAULT_ERROR_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonErrorsState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return objectSet(errors, 'initializeError', undefined);\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n        return objectSet(errors, 'initializeError', action.payload);\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return objectSet(errors, 'deinitializeError', undefined);\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n        return objectSet(errors, 'deinitializeError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutButtonStatusesState = DEFAULT_STATUS_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonStatusesState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n        return objectSet(statuses, 'isInitializing', true);\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return objectSet(statuses, 'isInitializing', false);\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n        return objectSet(statuses, 'isDeinitializing', true);\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return objectSet(statuses, 'isDeinitializing', false);\n\n    default:\n        return statuses;\n    }\n}\n","import Config from './config';\n\nexport default interface ConfigState {\n    data?: Config;\n    meta?: ConfigMetaState;\n    errors: ConfigErrorsState;\n    statuses: ConfigStatusesState;\n}\n\nexport interface ConfigMetaState {\n    externalSource?: string;\n}\n\nexport interface ConfigErrorsState {\n    loadError?: Error;\n}\n\nexport interface ConfigStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: ConfigState = {\n    meta: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport Config from './config';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\nimport ConfigState, { ConfigErrorsState, ConfigStatusesState, DEFAULT_STATE } from './config-state';\n\nexport default function configReducer(\n    state: ConfigState = DEFAULT_STATE,\n    action: Action\n): ConfigState {\n    const reducer = combineReducers<ConfigState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Config | undefined,\n    action: LoadConfigAction\n): Config | undefined {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return objectMerge(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConfigErrorsState = DEFAULT_STATE.errors,\n    action: LoadConfigAction\n): ConfigErrorsState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case ConfigActionType.LoadConfigFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConfigStatusesState = DEFAULT_STATE.statuses,\n    action: LoadConfigAction\n): ConfigStatusesState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case ConfigActionType.LoadConfigSucceeded:\n    case ConfigActionType.LoadConfigFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nimport Coupon from './coupon';\n\nexport default interface CouponState {\n    data?: Coupon[];\n    errors: CouponErrorsState;\n    statuses: CouponStatusesState;\n}\n\nexport interface CouponErrorsState {\n    applyCouponError?: RequestError<StorefrontErrorResponseBody>;\n    removeCouponError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface CouponStatusesState {\n    isApplyingCoupon?: boolean;\n    isRemovingCoupon?: boolean;\n}\n\nexport const DEFAULT_STATE: CouponState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { OrderAction, OrderActionType } from '../order';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport Coupon from './coupon';\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport CouponState, { CouponErrorsState, CouponStatusesState, DEFAULT_STATE } from './coupon-state';\n\nexport default function couponReducer(\n    state: CouponState = DEFAULT_STATE,\n    action: Action\n): CouponState {\n    const reducer = combineReducers<CouponState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Coupon[] | undefined,\n    action: CouponAction | CheckoutAction | OrderAction | ConsignmentAction\n): Coupon[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return arrayReplace(data, action.payload && action.payload.coupons);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CouponErrorsState = {},\n    action: CouponAction\n): CouponErrorsState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n    case CouponActionType.ApplyCouponSucceeded:\n        return objectSet(errors, 'applyCouponError', undefined);\n\n    case CouponActionType.ApplyCouponFailed:\n        return objectSet(errors, 'applyCouponError', action.payload);\n\n    case CouponActionType.RemoveCouponRequested:\n    case CouponActionType.RemoveCouponSucceeded:\n        return objectSet(errors, 'removeCouponError', undefined);\n\n    case CouponActionType.RemoveCouponFailed:\n        return objectSet(errors, 'removeCouponError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CouponStatusesState = {},\n    action: CouponAction\n): CouponStatusesState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n        return objectSet(statuses, 'isApplyingCoupon', true);\n\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.ApplyCouponFailed:\n        return objectSet(statuses, 'isApplyingCoupon', false);\n\n    case CouponActionType.RemoveCouponRequested:\n        return objectSet(statuses, 'isRemovingCoupon', true);\n\n    case CouponActionType.RemoveCouponSucceeded:\n    case CouponActionType.RemoveCouponFailed:\n        return objectSet(statuses, 'isRemovingCoupon', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nimport GiftCertificate from './gift-certificate';\n\nexport default interface GiftCertificateState {\n    data?: GiftCertificate[];\n    errors: GiftCertificateErrorsState;\n    statuses: GiftCertificateStatusesState;\n}\n\nexport interface GiftCertificateErrorsState {\n    applyGiftCertificateError?: RequestError<StorefrontErrorResponseBody>;\n    removeGiftCertificateError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface GiftCertificateStatusesState {\n    isApplyingGiftCertificate?: boolean;\n    isRemovingGiftCertificate?: boolean;\n}\n\nexport const DEFAULT_STATE: GiftCertificateState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport GiftCertificate from './gift-certificate';\nimport { GiftCertificateAction, GiftCertificateActionType } from './gift-certificate-actions';\nimport GiftCertificateState, { DEFAULT_STATE, GiftCertificateErrorsState, GiftCertificateStatusesState } from './gift-certificate-state';\n\nexport default function giftCertificateReducer(\n    state: GiftCertificateState = DEFAULT_STATE,\n    action: Action\n): GiftCertificateState {\n    const reducer = combineReducers<GiftCertificateState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: GiftCertificate[] | undefined,\n    action: CheckoutAction | GiftCertificateAction | ConsignmentAction | CouponAction\n): GiftCertificate[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return arrayReplace(data, action.payload && action.payload.giftCertificates);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: GiftCertificateErrorsState = DEFAULT_STATE.errors,\n    action: GiftCertificateAction\n): GiftCertificateErrorsState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        return objectSet(errors, 'applyGiftCertificateError', undefined);\n\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return objectSet(errors, 'applyGiftCertificateError', action.payload);\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return objectSet(errors, 'removeGiftCertificateError', undefined);\n\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return objectSet(errors, 'removeGiftCertificateError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: GiftCertificateStatusesState = DEFAULT_STATE.statuses,\n    action: GiftCertificateAction\n): GiftCertificateStatusesState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n        return objectSet(statuses, 'isApplyingGiftCertificate', true);\n\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return objectSet(statuses, 'isApplyingGiftCertificate', false);\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n        return objectSet(statuses, 'isRemovingGiftCertificate', true);\n\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return objectSet(statuses, 'isRemovingGiftCertificate', false);\n\n    default:\n        return statuses;\n    }\n}\n","import Customer from './customer';\n\nexport default interface CustomerState {\n    data?: Customer;\n}\n\nexport const DEFAULT_STATE: CustomerState = {};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { objectMerge } from '../common/utility';\n\nimport Customer from './customer';\nimport CustomerState, { DEFAULT_STATE } from './customer-state';\n\nexport default function customerReducer(\n    state: CustomerState = DEFAULT_STATE,\n    action: CheckoutAction\n): CustomerState {\n    const reducer = combineReducers<CustomerState, CheckoutAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Customer | undefined,\n    action: CheckoutAction\n): Customer | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectMerge(data, action.payload && action.payload.customer);\n\n    default:\n        return data;\n    }\n}\n","export default interface CustomerStrategyState {\n    data: CustomerStrategyDataState;\n    errors: CustomerStrategyErrorsState;\n    statuses: CustomerStrategyStatusesState;\n}\n\nexport interface CustomerStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface CustomerStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    signInError?: Error;\n    signInMethodId?: string;\n    signOutError?: Error;\n    signOutMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface CustomerStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isSigningIn?: boolean;\n    isSigningOut?: boolean;\n    signInMethodId?: string;\n    signOutMethodId?: string;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: CustomerStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { CustomerStrategyAction, CustomerStrategyActionType } from './customer-strategy-actions';\nimport CustomerStrategyState, { CustomerStrategyDataState, CustomerStrategyErrorsState, CustomerStrategyStatusesState, DEFAULT_STATE } from './customer-strategy-state';\n\nexport default function customerStrategyReducer(\n    state: CustomerStrategyState = DEFAULT_STATE,\n    action: Action\n): CustomerStrategyState {\n    const reducer = combineReducers<CustomerStrategyState, CustomerStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CustomerStrategyDataState = DEFAULT_STATE.data,\n    action: CustomerStrategyAction\n): CustomerStrategyDataState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        });\n\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CustomerStrategyErrorsState = DEFAULT_STATE.errors,\n    action: CustomerStrategyAction\n): CustomerStrategyErrorsState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return objectMerge(errors, {\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.InitializeFailed:\n        return objectMerge(errors, {\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(errors, {\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n        return objectMerge(errors, {\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignInRequested:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return objectMerge(errors, {\n            signInError: undefined,\n            signInMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignInFailed:\n        return objectMerge(errors, {\n            signInError: action.payload,\n            signInMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignOutRequested:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return objectMerge(errors, {\n            signOutError: undefined,\n            signOutMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignOutFailed:\n        return objectMerge(errors, {\n            signOutError: action.payload,\n            signOutMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n        return objectMerge(errors, {\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(errors, {\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CustomerStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: CustomerStrategyAction\n): CustomerStrategyStatusesState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n        return objectMerge(statuses, {\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.InitializeFailed:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return objectMerge(statuses, {\n            isInitializing: false,\n            initializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n        return objectMerge(statuses, {\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(statuses, {\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignInRequested:\n        return objectMerge(statuses, {\n            isSigningIn: true,\n            signInMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignInFailed:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return objectMerge(statuses, {\n            isSigningIn: false,\n            signInMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignOutRequested:\n        return objectMerge(statuses, {\n            isSigningOut: true,\n            signOutMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignOutFailed:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return objectMerge(statuses, {\n            isSigningOut: false,\n            signOutMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n        return objectMerge(statuses, {\n            isWidgetInteracting: true,\n            widgetInteractionMethodId: action.meta.methodId,\n         });\n\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(statuses, {\n            isWidgetInteracting: false,\n            widgetInteractionMethodId: undefined,\n         });\n\n    default:\n        return statuses;\n    }\n}\n","import Country from './country';\n\nexport default interface CountryState {\n    data?: Country[];\n    errors: CountryErrorsState;\n    statuses: CountryStatusesState;\n}\n\nexport interface CountryErrorsState {\n    loadError?: Error;\n}\n\nexport interface CountryStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: CountryState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\n\nimport Country from './country';\nimport { CountryActionType, LoadCountriesAction } from './country-actions';\nimport CountryState, { CountryErrorsState, CountryStatusesState, DEFAULT_STATE } from './country-state';\n\nexport default function countryReducer(\n    state: CountryState = DEFAULT_STATE,\n    action: Action\n): CountryState {\n    const reducer = combineReducers<CountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadCountriesAction\n): Country[] | undefined {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesSucceeded:\n        return arrayReplace(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadCountriesAction\n): CountryErrorsState {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesRequested:\n    case CountryActionType.LoadCountriesSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CountryActionType.LoadCountriesFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadCountriesAction\n): CountryStatusesState {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CountryActionType.LoadCountriesSucceeded:\n    case CountryActionType.LoadCountriesFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { Omit } from '../common/types';\n\nimport { InternalOrderMeta, InternalOrderPayment } from './internal-order';\nimport Order from './order';\n\nexport default interface OrderState {\n    data?: OrderDataState;\n    meta?: OrderMetaState;\n    errors: OrderErrorsState;\n    statuses: OrderStatusesState;\n}\n\nexport type OrderDataState = Omit<Order, 'billingAddress' | 'coupons'>;\n\nexport interface OrderMetaState extends InternalOrderMeta {\n    token?: string;\n    orderToken?: string;\n    callbackUrl?: string;\n    payment?: InternalOrderPayment;\n}\n\nexport interface OrderErrorsState {\n    loadError?: Error;\n    submitError?: Error;\n    finalizeError?: Error;\n}\n\nexport interface OrderStatusesState {\n    isLoading?: boolean;\n    isSubmitting?: boolean;\n    isFinalizing?: boolean;\n}\n\nexport const DEFAULT_STATE: OrderState = {\n    errors: {},\n    meta: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { OrderAction, OrderActionType } from './order-actions';\nimport OrderState, { DEFAULT_STATE, OrderDataState, OrderErrorsState, OrderMetaState, OrderStatusesState } from './order-state';\n\nexport default function orderReducer(\n    state: OrderState = DEFAULT_STATE,\n    action: Action\n): OrderState {\n    const reducer = combineReducers<OrderState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: OrderDataState | undefined,\n    action: OrderAction\n): OrderDataState | undefined {\n    switch (action.type) {\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n        return objectMerge(data, omit(action.payload, ['billingAddress', 'coupons'])) as OrderDataState;\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: OrderMetaState | undefined,\n    action: OrderAction\n): OrderMetaState | undefined {\n    switch (action.type) {\n    case OrderActionType.FinalizeOrderSucceeded:\n    case OrderActionType.SubmitOrderSucceeded:\n        return objectMerge(meta, {\n            ...action.meta,\n            callbackUrl: action.payload && action.payload.order.callbackUrl,\n            orderToken: action.payload && action.payload.order.token,\n            payment: action.payload && action.payload.order && action.payload.order.payment,\n        });\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: OrderErrorsState = DEFAULT_STATE.errors,\n    action: OrderAction\n): OrderErrorsState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return objectSet(errors, 'loadError', undefined);\n\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: OrderStatusesState = DEFAULT_STATE.statuses,\n    action: OrderAction\n): OrderStatusesState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { PaymentAction, PaymentActionType } from './payment-actions';\nimport PaymentResponseBody from './payment-response-body';\nimport PaymentState from './payment-state';\n\nexport default function paymentReducer(state: PaymentState = {}, action: PaymentAction): PaymentState {\n    const reducer = combineReducers<PaymentState, PaymentAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: PaymentResponseBody | undefined, action: PaymentAction): PaymentResponseBody | undefined {\n    switch (action.type) {\n    case PaymentActionType.SubmitPaymentSucceeded:\n        return action.payload;\n\n    default:\n        return data;\n    }\n}\n","import PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport default interface PaymentMethodState {\n    data?: PaymentMethod[];\n    meta?: PaymentMethodMeta;\n    errors: PaymentMethodErrorsState;\n    statuses: PaymentMethodStatusesState;\n}\n\nexport interface PaymentMethodErrorsState {\n    loadMethodId?: string;\n    loadError?: Error;\n    loadMethodError?: Error;\n}\n\nexport interface PaymentMethodStatusesState {\n    loadMethodId?: string;\n    isLoading?: boolean;\n    isLoadingMethod?: boolean;\n}\n\nexport const DEFAULT_STATE: PaymentMethodState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, mergeOrPush, objectMerge, objectSet } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport { PaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { DEFAULT_STATE, PaymentMethodErrorsState, PaymentMethodStatusesState } from './payment-method-state';\n\nexport default function paymentMethodReducer(\n    state: PaymentMethodState = DEFAULT_STATE,\n    action: Action\n): PaymentMethodState {\n    const reducer = combineReducers<PaymentMethodState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentMethod[] | undefined,\n    action: PaymentMethodAction\n): PaymentMethod[] | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return mergeOrPush(data || [], action.payload, action.payload && {\n            id: action.payload.id,\n            gateway: action.payload.gateway,\n        });\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return arrayReplace(data, action.payload, {\n            matchObject: (methodA, methodB) => (\n                methodA.id === methodB.id && methodA.gateway === methodB.gateway\n            ),\n        });\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: PaymentMethodMeta | undefined,\n    action: PaymentMethodAction\n): PaymentMethodMeta | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return objectMerge(meta, action.meta);\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: PaymentMethodErrorsState = DEFAULT_STATE.errors,\n    action: PaymentMethodAction\n): PaymentMethodErrorsState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return objectMerge(errors, {\n            loadMethodId: undefined,\n            loadMethodError: undefined,\n        });\n\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return objectMerge(errors, {\n            loadMethodId: action.meta.methodId,\n            loadMethodError: action.payload,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentMethodStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentMethodAction\n): PaymentMethodStatusesState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n        return objectMerge(statuses, {\n            isLoadingMethod: true,\n            loadMethodId: action.meta.methodId,\n        });\n\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return objectMerge(statuses, {\n            isLoadingMethod: false,\n            loadMethodId: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import { findIndex, pick, pickBy, ValueKeyIteratee } from 'lodash';\n\nimport isPlainObject from './is-plain-object';\nimport objectMerge from './object-merge';\n\n/**\n * Push an item to an array if it doesn't exist in the array. Otherwise, merge\n * with the existing item in the array. This function always returns a new array.\n */\nexport default function mergeOrPush<T>(\n    array: T[],\n    item?: T,\n    predicate?: ValueKeyIteratee<T>\n): T[] {\n    if (!item) {\n        return array;\n    }\n\n    const defaultPredicate = pick(item, 'id');\n    const index = findIndex(array, typeof predicate === 'object' ? pickBy(predicate) : (predicate || defaultPredicate));\n    const newArray = [...array];\n\n    if (index === -1) {\n        newArray.push(item);\n    } else {\n        const existingItem = array[index];\n\n        newArray[index] = isPlainObject(existingItem) && isPlainObject(item) ?\n            objectMerge(existingItem, item) :\n            item;\n    }\n\n    return newArray;\n}\n","export default interface PaymentStrategyState {\n    data: PaymentStrategyDataState;\n    errors: PaymentStrategyErrorsState;\n    statuses: PaymentStrategyStatusesState;\n}\n\nexport interface PaymentStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface PaymentStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    executeError?: Error;\n    executeMethodId?: string;\n    finalizeError?: Error;\n    finalizeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface PaymentStrategyStatusesState {\n    deinitializeMethodId?: string;\n    executeMethodId?: string;\n    finalizeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isExecuting?: boolean;\n    isFinalizing?: boolean;\n    isInitializing?: boolean;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: PaymentStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { PaymentStrategyAction, PaymentStrategyActionType } from './payment-strategy-actions';\nimport PaymentStrategyState, { DEFAULT_STATE, PaymentStrategyDataState, PaymentStrategyErrorsState, PaymentStrategyStatusesState } from './payment-strategy-state';\n\nexport default function paymentStrategyReducer(\n    state: PaymentStrategyState = DEFAULT_STATE,\n    action: Action\n): PaymentStrategyState {\n    const reducer = combineReducers<PaymentStrategyState, PaymentStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentStrategyDataState = DEFAULT_STATE.data,\n    action: PaymentStrategyAction\n): PaymentStrategyDataState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        });\n\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: PaymentStrategyErrorsState = DEFAULT_STATE.errors,\n    action: PaymentStrategyAction\n): PaymentStrategyErrorsState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return objectMerge(errors, {\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.InitializeFailed:\n        return objectMerge(errors, {\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(errors, {\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n        return objectMerge(errors, {\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.ExecuteRequested:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return objectMerge(errors, {\n            executeError: undefined,\n            executeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.ExecuteFailed:\n        return objectMerge(errors, {\n            executeError: action.payload,\n            executeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.FinalizeRequested:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return objectMerge(errors, {\n            finalizeError: undefined,\n            finalizeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.FinalizeFailed:\n        return objectMerge(errors, {\n            finalizeError: action.payload,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n        return objectMerge(errors, {\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(errors, {\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentStrategyAction\n): PaymentStrategyStatusesState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n        return objectMerge(statuses, {\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.InitializeFailed:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return objectMerge(statuses, {\n            isInitializing: false,\n            initializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n        return objectMerge(statuses, {\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(statuses, {\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.ExecuteRequested:\n        return objectMerge(statuses, {\n            isExecuting: true,\n            executeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.ExecuteFailed:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return objectMerge(statuses, {\n            isExecuting: false,\n            executeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.FinalizeRequested:\n        return objectMerge(statuses, {\n            isFinalizing: true,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.FinalizeFailed:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return objectMerge(statuses, {\n            isFinalizing: false,\n            finalizeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n        return objectMerge(statuses, {\n            isWidgetInteracting: true,\n            widgetInteractionMethodId: action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(statuses, {\n            isWidgetInteracting: false,\n            widgetInteractionMethodId: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import PaymentInstrument, { VaultAccessToken } from './instrument';\n\nexport default interface InstrumentState {\n    data?: PaymentInstrument[];\n    meta?: InstrumentMeta;\n    errors: InstrumentErrorState;\n    statuses: InstrumentStatusState;\n}\n\nexport interface InstrumentErrorState {\n    deleteError?: Error;\n    failedInstrument?: string;\n    loadError?: Error;\n    vaultError?: Error;\n}\n\nexport interface InstrumentStatusState {\n    isDeleting?: boolean;\n    isLoading?: boolean;\n    isVaulting?: boolean;\n    deletingInstrument?: string;\n}\n\nexport type InstrumentMeta = VaultAccessToken;\n\nexport const DEFAULT_STATE = {\n    data: [],\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../../common/error';\nimport { arrayReplace, objectMerge, objectSet } from '../../common/utility';\n\nimport PaymentInstrument from './instrument';\nimport { InstrumentAction, InstrumentActionType } from './instrument-actions';\nimport InstrumentState, { DEFAULT_STATE, InstrumentErrorState, InstrumentMeta, InstrumentStatusState } from './instrument-state';\n\nexport default function instrumentReducer(\n    state: InstrumentState = DEFAULT_STATE,\n    action: Action\n): InstrumentState {\n    const reducer = combineReducers<InstrumentState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentInstrument[] = DEFAULT_STATE.data,\n    action: InstrumentAction\n): PaymentInstrument[] {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n        return arrayReplace(data, action.payload && action.payload.vaultedInstruments || []);\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: InstrumentMeta | undefined,\n    action: InstrumentAction\n): InstrumentMeta | undefined {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return objectMerge(meta, action.meta);\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: InstrumentErrorState = DEFAULT_STATE.errors,\n    action: InstrumentAction\n): InstrumentErrorState {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsRequested:\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case InstrumentActionType.DeleteInstrumentRequested:\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return objectMerge(errors, {\n            deleteError: undefined,\n            failedInstrument: undefined,\n        });\n\n    case InstrumentActionType.LoadInstrumentsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case InstrumentActionType.DeleteInstrumentFailed:\n        return objectMerge(errors, {\n            deleteError: action.payload,\n            failedInstrument: action.meta.instrumentId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: InstrumentStatusState = DEFAULT_STATE.statuses,\n    action: InstrumentAction\n): InstrumentStatusState {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case InstrumentActionType.DeleteInstrumentRequested:\n        return objectMerge(statuses, {\n            isDeleting: true,\n            deletingInstrument: action.meta.instrumentId,\n        });\n\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n    case InstrumentActionType.LoadInstrumentsFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n    case InstrumentActionType.DeleteInstrumentFailed:\n        return objectMerge(statuses, {\n            isDeleting: false,\n            deletingInstrument: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import { AmazonPayRemoteCheckout } from './methods';\n\nexport default interface RemoteCheckoutState {\n    data: RemoteCheckoutStateData;\n}\n\nexport interface RemoteCheckoutStateData {\n    amazon?: AmazonPayRemoteCheckout;\n}\n\nexport const DEFAULT_STATE: RemoteCheckoutState = {\n    data: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport RemoteCheckout from './remote-checkout';\nimport { RemoteCheckoutAction, RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutState, { DEFAULT_STATE, RemoteCheckoutStateData } from './remote-checkout-state';\n\nexport default function remoteCheckoutReducer(\n    state: RemoteCheckoutState = DEFAULT_STATE,\n    action: RemoteCheckoutAction\n): RemoteCheckoutState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<RemoteCheckoutState>({\n        data: combineReducers<RemoteCheckoutStateData>({\n            [action.meta.methodId]: dataReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: RemoteCheckout,\n    action: RemoteCheckoutAction\n): RemoteCheckout {\n    switch (action.type) {\n    case RemoteCheckoutActionType.InitializeRemoteBillingSucceeded:\n        return objectSet(data, 'billing' as any, action.payload && action.payload.billing);\n\n    case RemoteCheckoutActionType.InitializeRemoteShippingSucceeded:\n        return objectSet(data, 'shipping' as any, action.payload && action.payload.shipping);\n\n    case RemoteCheckoutActionType.LoadRemoteSettingsSucceeded:\n        return objectSet(data, 'settings', action.payload);\n\n    case RemoteCheckoutActionType.UpdateRemoteCheckout:\n        return objectMerge(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n","import Consignment from './consignment';\n\nexport default interface ConsignmentState {\n    data?: Consignment[];\n    errors: ConsignmentErrorsState;\n    statuses: ConsignmentStatusesState;\n}\n\nexport interface ConsignmentErrorsState {\n    loadError?: Error;\n    loadShippingOptionsError?: Error;\n    createError?: Error;\n    updateError: { [key: string]: Error | undefined };\n    deleteError: { [key: string]: Error | undefined };\n    updateShippingOptionError: { [key: string]: Error | undefined };\n}\n\nexport interface ConsignmentStatusesState {\n    isLoading?: boolean;\n    isLoadingShippingOptions?: boolean;\n    isCreating?: boolean;\n    isUpdating: { [key: string]: boolean };\n    isDeleting: { [key: string]: boolean };\n    isUpdatingShippingOption: { [key: string]: boolean };\n}\n\nexport const DEFAULT_STATE: ConsignmentState = {\n    errors: {\n        updateShippingOptionError: {},\n        updateError: {},\n        deleteError: {},\n    },\n    statuses: {\n        isUpdating: {},\n        isUpdatingShippingOption: {},\n        isDeleting: {},\n    },\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectMerge, objectSet } from '../common/utility';\nimport { CouponAction, CouponActionType } from '../coupon';\nimport { CustomerAction, CustomerActionType } from '../customer';\n\nimport Consignment from './consignment';\nimport { ConsignmentAction, ConsignmentActionType } from './consignment-actions';\nimport ConsignmentState, { ConsignmentErrorsState, ConsignmentStatusesState, DEFAULT_STATE } from './consignment-state';\n\nexport default function consignmentReducer(\n    state: ConsignmentState = DEFAULT_STATE,\n    action: Action\n): ConsignmentState {\n    const reducer = combineReducers<ConsignmentState, ConsignmentAction | CheckoutAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Consignment[] | undefined,\n    action: ConsignmentAction | CheckoutAction | CouponAction | CustomerAction\n): Consignment[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n        return arrayReplace(data, action.payload && action.payload.consignments);\n\n    case CustomerActionType.SignOutCustomerSucceeded:\n        return arrayReplace(data, []);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConsignmentErrorsState = DEFAULT_STATE.errors,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n        return objectSet(errors, 'createError', undefined);\n\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return objectSet(errors, 'createError', action.payload);\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateError: {\n                    [action.meta.id]: undefined,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateError: {\n                    [action.meta.id]: action.payload,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(errors, {\n                deleteError: {\n                    [action.meta.id]: undefined,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(errors, {\n                deleteError: {\n                    [action.meta.id]: action.payload,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateShippingOptionError: {\n                    [action.meta.id]: undefined,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateShippingOptionError: {\n                    [action.meta.id]: action.payload,\n                },\n            });\n        }\n\n        return errors;\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConsignmentStatusesState = DEFAULT_STATE.statuses,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return objectSet(statuses, 'isLoadingShippingOptions', true);\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return objectSet(statuses, 'isLoadingShippingOptions', false);\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n        return objectSet(statuses, 'isCreating', true);\n\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return objectSet(statuses, 'isCreating', false);\n\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdating: {\n                    [action.meta.id]: true,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdating: {\n                    [action.meta.id]: false,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isDeleting: {\n                    [action.meta.id]: true,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isDeleting: {\n                    [action.meta.id]: false,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdatingShippingOption: {\n                    [action.meta.id]: true,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdatingShippingOption: {\n                    [action.meta.id]: false,\n                },\n            });\n        }\n\n        return statuses;\n\n    default:\n        return statuses;\n    }\n}\n","import { Country } from '../geography';\n\nexport default interface ShippingCountryState {\n    data?: Country[];\n    errors: ShippingCountryErrorsState;\n    statuses: ShippingCountryStatusesState;\n}\n\nexport interface ShippingCountryErrorsState {\n    loadError?: Error;\n}\n\nexport interface ShippingCountryStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: ShippingCountryState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { Country } from '../geography';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryState, { DEFAULT_STATE, ShippingCountryErrorsState, ShippingCountryStatusesState } from './shipping-country-state';\n\nexport default function shippingCountryReducer(\n    state: ShippingCountryState = DEFAULT_STATE,\n    action: Action\n): ShippingCountryState {\n    const reducer = combineReducers<ShippingCountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadShippingCountriesAction\n): Country[] | undefined {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return arrayReplace(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ShippingCountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadShippingCountriesAction\n): ShippingCountryErrorsState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingCountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadShippingCountriesAction\n): ShippingCountryStatusesState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","export default interface ShippingStrategyState {\n    data: ShippingStrategyDataState;\n    errors: ShippingStrategyErrorsState;\n    statuses: ShippingStrategyStatusesState;\n}\n\nexport interface ShippingStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface ShippingStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    updateAddressError?: Error;\n    updateAddressMethodId?: string;\n    selectOptionError?: Error;\n    selectOptionMethodId?: string;\n}\n\nexport interface ShippingStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isUpdatingAddress?: boolean;\n    isSelectingOption?: boolean;\n    updateAddressMethodId?: string;\n    selectOptionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: ShippingStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { ShippingStrategyAction, ShippingStrategyActionType } from './shipping-strategy-actions';\nimport ShippingStrategyState, { DEFAULT_STATE, ShippingStrategyDataState, ShippingStrategyErrorsState, ShippingStrategyStatusesState } from './shipping-strategy-state';\n\nexport default function shippingStrategyReducer(\n    state: ShippingStrategyState = DEFAULT_STATE,\n    action: Action\n): ShippingStrategyState {\n    const reducer = combineReducers<ShippingStrategyState, ShippingStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: ShippingStrategyDataState = DEFAULT_STATE.data,\n    action: ShippingStrategyAction\n): ShippingStrategyDataState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        });\n\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: ShippingStrategyErrorsState = DEFAULT_STATE.errors,\n    action: ShippingStrategyAction\n): ShippingStrategyErrorsState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return objectMerge(errors, {\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.InitializeFailed:\n        return objectMerge(errors, {\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(errors, {\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n        return objectMerge(errors, {\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return objectMerge(errors, {\n            updateAddressError: undefined,\n            updateAddressMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n        return objectMerge(errors, {\n            updateAddressError: action.payload,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return objectMerge(errors, {\n            selectOptionError: undefined,\n            selectOptionMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n        return objectMerge(errors, {\n            selectOptionError: action.payload,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: ShippingStrategyAction\n): ShippingStrategyStatusesState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n        return objectMerge(statuses, {\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.InitializeFailed:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return objectMerge(statuses, {\n            isInitializing: false,\n            initializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n        return objectMerge(statuses, {\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(statuses, {\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n        return objectMerge(statuses, {\n            isUpdatingAddress: true,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return objectMerge(statuses, {\n            isUpdatingAddress: false,\n            updateAddressMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n        return objectMerge(statuses, {\n            isSelectingOption: true,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return objectMerge(statuses, {\n            isSelectingOption: false,\n            selectOptionMethodId: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectSet } from '../common/utility';\n\nimport { StoreCreditAction, StoreCreditActionType } from './store-credit-actions';\nimport StoreCreditState, { StoreCreditErrorsState, StoreCreditStatusesState } from './store-credit-state';\n\nconst DEFAULT_STATE: StoreCreditState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function storeCreditReducer(\n    state: StoreCreditState = DEFAULT_STATE,\n    action: Action\n): StoreCreditState {\n    const reducer = combineReducers<StoreCreditState>({\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: StoreCreditErrorsState = DEFAULT_STATE.errors,\n    action: StoreCreditAction\n): StoreCreditErrorsState {\n    switch (action.type) {\n    case StoreCreditActionType.ApplyStoreCreditRequested:\n    case StoreCreditActionType.ApplyStoreCreditSucceeded:\n        return objectSet(errors, 'applyError', undefined);\n\n    case StoreCreditActionType.ApplyStoreCreditFailed:\n        return objectSet(errors, 'applyError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: StoreCreditStatusesState = DEFAULT_STATE.statuses,\n    action: StoreCreditAction\n): StoreCreditStatusesState {\n    switch (action.type) {\n    case StoreCreditActionType.ApplyStoreCreditRequested:\n        return objectSet(statuses, 'isApplying', true);\n\n    case StoreCreditActionType.ApplyStoreCreditSucceeded:\n    case StoreCreditActionType.ApplyStoreCreditFailed:\n        return objectSet(statuses, 'isApplying', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { Omit } from '../common/types';\n\nimport Checkout from './checkout';\n\nexport default interface CheckoutState {\n    data?: CheckoutDataState;\n    errors: CheckoutErrorsState;\n    statuses: CheckoutStatusesState;\n}\n\nexport type CheckoutDataState = Omit<Checkout, 'billingAddress' | 'cart' | 'consignments' | 'coupons' | 'giftCertificates'>;\n\nexport interface CheckoutErrorsState {\n    loadError?: Error;\n    updateError?: Error;\n}\n\nexport interface CheckoutStatusesState {\n    isExecutingSpamCheck?: boolean;\n    isLoading?: boolean;\n    isUpdating?: boolean;\n}\n\nexport const DEFAULT_STATE: CheckoutState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\nimport { CouponAction, CouponActionType, GiftCertificateAction, GiftCertificateActionType } from '../coupon';\nimport { OrderAction, OrderActionType } from '../order';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\nimport { SpamProtectionAction, SpamProtectionActionType } from '../spam-protection';\nimport { StoreCreditAction, StoreCreditActionType } from '../store-credit';\n\nimport { CheckoutAction, CheckoutActionType } from './checkout-actions';\nimport CheckoutState, { CheckoutDataState, CheckoutErrorsState, CheckoutStatusesState, DEFAULT_STATE } from './checkout-state';\n\nexport default function checkoutReducer(\n    state: CheckoutState = DEFAULT_STATE,\n    action: Action\n): CheckoutState {\n    const reducer = combineReducers<CheckoutState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutDataState | undefined,\n    action: CheckoutAction | BillingAddressAction | ConsignmentAction | CouponAction |\n        GiftCertificateAction | OrderAction | SpamProtectionAction | StoreCreditAction\n): CheckoutDataState | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n    case StoreCreditActionType.ApplyStoreCreditSucceeded:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n    case SpamProtectionActionType.ExecuteSucceeded:\n        return objectMerge(data, omit(action.payload, [\n            'billingAddress',\n            'cart',\n            'consignments',\n            'customer',\n            'coupons',\n            'giftCertificates',\n        ])) as CheckoutDataState;\n\n    case OrderActionType.SubmitOrderSucceeded:\n        return objectSet(data, 'orderId', action.payload && action.payload.order.orderId) ;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CheckoutErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | OrderAction\n): CheckoutErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return objectSet(errors, 'updateError', undefined);\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n        return objectSet(errors, 'updateError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | OrderAction | SpamProtectionAction\n): CheckoutStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(statuses, 'isLoading', false);\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n        return objectSet(statuses, 'isUpdating', true);\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return objectSet(statuses, 'isUpdating', false);\n\n    case SpamProtectionActionType.ExecuteRequested:\n        return objectSet(statuses, 'isExecutingSpamCheck', true);\n\n    case SpamProtectionActionType.ExecuteFailed:\n    case SpamProtectionActionType.ExecuteSucceeded:\n        return objectSet(statuses, 'isExecutingSpamCheck', false);\n\n    default:\n        return statuses;\n    }\n}\n","export default function guard<T>(value: T, errorFactory?: () => Error): NonNullable<T> {\n    if (value === undefined || value === null) {\n        throw errorFactory ? errorFactory() : new Error('An unexpected error has occurred.');\n    }\n\n    return value as NonNullable<T>;\n}\n","import { deepFreeze } from '@bigcommerce/data-store';\n\n// tslint:disable-next-line:ban-types\ntype FunctionProperties<T> = { [K in keyof T]: T[K] extends Function ? T[K] : never };\n\nexport default function createFreezeProxy<T extends object>(target: T): T {\n    return createProxy(target, (target, name) =>\n        (...args: any[]) => deepFreeze(target[name].call(target, ...args))\n    );\n}\n\nexport function createFreezeProxies<T extends object, TMap extends { [key: string]: T }>(map: TMap): TMap {\n    return Object.keys(map)\n        .reduce((result, key) => {\n            result[key] = createFreezeProxy(map[key]);\n\n            return result;\n        }, {} as { [key: string]: T }) as TMap;\n}\n\nfunction createProxy<T extends object>(target: T, trap: (target: FunctionProperties<T>, name: keyof FunctionProperties<T>, proxy: T) => any): T {\n    const proxy = Object.create(target);\n\n    traversePrototypeOf(target, prototype => {\n        Object.getOwnPropertyNames(prototype)\n            .forEach(name => {\n                if (name === 'constructor' || typeof proxy[name] !== 'function' || name.charAt(0) === '_') {\n                    return;\n                }\n\n                proxy[name] = trap(target as FunctionProperties<T>, name as keyof T, proxy);\n            });\n    });\n\n    return proxy;\n}\n\nfunction traversePrototypeOf(target: object, iteratee: (prototype: object) => void): void {\n    let prototype = Object.getPrototypeOf(target);\n\n    while (prototype) {\n        iteratee(prototype);\n\n        prototype = Object.getPrototypeOf(prototype);\n    }\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { createSelector } from '../common/selector';\nimport { ConfigState, DEFAULT_STATE } from '../config';\nimport { Country } from '../geography';\n\nimport FormField from './form-field';\n\nexport default interface FormSelector {\n    getShippingAddressFields(countries: Country[] | undefined, countryCode: string): FormField[];\n    getBillingAddressFields(countries: Country[] | undefined, countryCode: string): FormField[];\n}\n\nexport type FormSelectorFactory = (state: ConfigState) => FormSelector;\n\nexport function createFormSelectorFactory(): FormSelectorFactory {\n    const getShippingAddressFields = createSelector(\n        (state: ConfigState) => state.data,\n        config => (countries: Country[] = [], countryCode: string) => {\n            const selectedCountry = find(countries, { code: countryCode });\n            const fields = config ? config.storeConfig.formFields.shippingAddressFields : [];\n\n            return fields.map((field: any) => processField(field, countries, selectedCountry));\n        }\n    );\n\n    const getBillingAddressFields = createSelector(\n        (state: ConfigState) => state.data,\n        config => (countries: Country[] = [], countryCode: string) => {\n            const selectedCountry = find(countries, { code: countryCode });\n            const fields = config ? config.storeConfig.formFields.billingAddressFields : [];\n\n            return fields.map((field: any) => processField(field, countries, selectedCountry));\n        }\n    );\n\n    function processField(field: FormField, countries: Country[], selectedCountry?: Country): FormField {\n        if (field.name === 'countryCode') {\n            return processCountry(field, countries, selectedCountry);\n        }\n\n        if (field.name === 'stateOrProvince') {\n            return processProvince(field, selectedCountry);\n        }\n\n        if (field.name === 'postalCode') {\n            return processsPostCode(field, selectedCountry);\n        }\n\n        return field;\n    }\n\n    function processCountry(field: FormField, countries: Country[] = [], country?: Country): FormField {\n        if (!countries.length) {\n            return field;\n        }\n\n        const { code = '' } = country || {};\n        const items = countries.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            options: { items },\n            default: code,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    function processProvince(field: FormField, country?: Country): FormField {\n        const { subdivisions = [], requiresState } = country || {};\n\n        if (!subdivisions.length) {\n            return {\n                ...field,\n                required: requiresState == null ? false : requiresState,\n            };\n        }\n\n        const items = subdivisions.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            name: 'stateOrProvinceCode',\n            options: { items },\n            required: requiresState == null ? true : requiresState,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    function processsPostCode(field: FormField, country?: Country): FormField {\n        const { hasPostalCodes = [] } = country || {};\n\n        if (hasPostalCodes === undefined) {\n            return field;\n        }\n\n        return { ...field, required: Boolean(hasPostalCodes) };\n    }\n\n    return memoizeOne((\n        state: ConfigState = DEFAULT_STATE\n    ): FormSelector => {\n        return {\n            getShippingAddressFields: getShippingAddressFields(state),\n            getBillingAddressFields: getBillingAddressFields(state),\n        };\n    });\n}\n","import PaymentInstrument from './instrument';\n\ninterface SupportedInstruments {\n    [key: string]: Pick<PaymentInstrument, 'method' | 'provider'>;\n}\n\nconst supportedInstruments: SupportedInstruments = {\n    'adyenv2.scheme': {\n        provider: 'adyenv2',\n        method: 'scheme',\n    },\n    'adyenv2.bcmc': {\n        provider: 'adyenv2',\n        method: 'bcmc',\n    },\n    braintree: {\n        provider: 'braintree',\n        method: 'credit_card',\n    },\n    braintreepaypal: {\n        provider: 'braintree',\n        method: 'paypal',\n    },\n    authorizenet: {\n        provider: 'authorizenet',\n        method: 'credit_card',\n    },\n    stripe: {\n        provider: 'stripe',\n        method: 'credit_card',\n    },\n    stripev3: {\n        provider: 'stripev3',\n        method: 'credit_card',\n    },\n    cybersource: {\n        provider: 'cybersource',\n        method: 'credit_card',\n    },\n    converge: {\n        provider: 'converge',\n        method: 'credit_card',\n    },\n    bluesnapv2: {\n        provider: 'bluesnapv2',\n        method: 'credit_card',\n    },\n    paymetric: {\n        provider: 'paymetric',\n        method: 'credit_card',\n    },\n    'barclaycard.credit_card': {\n        provider: 'barclaycard',\n        method: 'credit_card',\n    },\n};\n\nexport default supportedInstruments;\n","import { identity, isEqual, pickBy } from 'lodash';\n\nimport Address from './address';\n\nexport default function isAddressEqual(addressA: Partial<Address>, addressB: Partial<Address>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<Address>): Partial<Address> {\n    return pickBy({\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.address1,\n        address2: address.address2,\n        city: address.city,\n        stateOrProvince: address.stateOrProvince,\n        countryCode: address.countryCode,\n        postalCode: address.postalCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    }, identity);\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { isAddressEqual, AddressRequestBody } from '../address';\nimport { CartSelector, PhysicalItem } from '../cart';\nimport { createSelector } from '../common/selector';\n\nimport Consignment from './consignment';\nimport ConsignmentState, { DEFAULT_STATE } from './consignment-state';\nimport ShippingOption from './shipping-option';\n\nexport default interface ConsignmentSelector {\n    getConsignments(): Consignment[] | undefined;\n    getConsignmentById(id: string): Consignment | undefined;\n    getConsignmentByAddress(address: AddressRequestBody): Consignment | undefined;\n    getShippingOption(): ShippingOption | undefined;\n    getLoadError(): Error | undefined;\n    getCreateError(): Error | undefined;\n    getLoadShippingOptionsError(): Error | undefined;\n    getUnassignedItems(): PhysicalItem[];\n    getUpdateError(consignmentId?: string): Error | undefined;\n    getDeleteError(consignmentId?: string): Error | undefined;\n    getItemAssignmentError(address: AddressRequestBody): Error | undefined;\n    getUpdateShippingOptionError(consignmentId?: string): Error | undefined;\n    isLoading(): boolean;\n    isLoadingShippingOptions(): boolean;\n    isCreating(): boolean;\n    isUpdating(consignmentId?: string): boolean;\n    isDeleting(consignmentId?: string): boolean;\n    isAssigningItems(address: AddressRequestBody): boolean;\n    isUpdatingShippingOption(consignmentId?: string): boolean;\n}\n\nexport type ConsignmentSelectorFactory = (\n    state: ConsignmentState,\n    cart: CartSelector\n) => ConsignmentSelector;\n\ninterface ConsignmentSelectorDependencies {\n    cart: CartSelector;\n}\n\nexport function createConsignmentSelectorFactory(): ConsignmentSelectorFactory {\n    const getConsignments = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => () => consignments\n    );\n\n    const getConsignmentById = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => (id: string) => {\n            if (!consignments || !consignments.length) {\n                return;\n            }\n\n            return find(consignments, { id });\n        }\n    );\n\n    const getConsignmentByAddress = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => (address: AddressRequestBody) => {\n            if (!consignments || !consignments.length) {\n                return;\n            }\n\n            return find(consignments, consignment =>\n                isAddressEqual(consignment.shippingAddress, address)\n            );\n        }\n    );\n\n    const getShippingOption = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => () => {\n            if (consignments && consignments.length) {\n                return consignments[0].selectedShippingOption;\n            }\n        }\n    );\n\n    const getLoadError = createSelector(\n        (state: ConsignmentState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const getCreateError = createSelector(\n        (state: ConsignmentState) => state.errors.createError,\n        error => () => error\n    );\n\n    const getLoadShippingOptionsError = createSelector(\n        (state: ConsignmentState) => state.errors.loadShippingOptionsError,\n        error => () => error\n    );\n\n    const getUnassignedItems = createSelector(\n        getConsignments,\n        (_: ConsignmentState, { cart }: ConsignmentSelectorDependencies) => cart.getCart,\n        (getConsignments, getCart) => () => {\n            const cart = getCart();\n\n            if (!cart) {\n                return [];\n            }\n\n            const assignedLineItemIds = (getConsignments() || []).reduce(\n                (itemIds, consignment) => itemIds.concat(consignment.lineItemIds),\n                [] as string[]\n            );\n\n            return (cart.lineItems.physicalItems || []).filter(\n                item => assignedLineItemIds.indexOf(item.id as string) < 0\n            );\n        }\n    );\n\n    const getUpdateError = createSelector(\n        (state: ConsignmentState) => state.errors.updateError,\n        updateError => (consignmentId?: string) => {\n            if (consignmentId) {\n                return updateError[consignmentId];\n            }\n\n            return find(updateError);\n        }\n    );\n\n    const getDeleteError = createSelector(\n        (state: ConsignmentState) => state.errors.deleteError,\n        deleteError => (consignmentId?: string) => {\n            if (consignmentId) {\n                return deleteError[consignmentId];\n            }\n\n            return find(deleteError);\n        }\n    );\n\n    const getItemAssignmentError = createSelector(\n        getConsignmentByAddress,\n        getUpdateError,\n        getCreateError,\n        (getConsignmentByAddress, getUpdateError, getCreateError) => (address: AddressRequestBody) => {\n            const consignment = getConsignmentByAddress(address);\n\n            return consignment ? getUpdateError(consignment.id) : getCreateError();\n        }\n    );\n\n    const getUpdateShippingOptionError = createSelector(\n        (state: ConsignmentState) => state.errors.updateShippingOptionError,\n        updateShippingOptionError => (consignmentId?: string) => {\n            if (consignmentId) {\n                return updateShippingOptionError[consignmentId];\n            }\n\n            return find(updateShippingOptionError);\n        }\n    );\n\n    const isLoading = createSelector(\n        (state: ConsignmentState) => state.statuses.isLoading,\n        isLoading => () => isLoading === true\n    );\n\n    const isLoadingShippingOptions = createSelector(\n        (state: ConsignmentState) => state.statuses.isLoadingShippingOptions,\n        isLoadingShippingOptions => () => isLoadingShippingOptions === true\n    );\n\n    const isCreating = createSelector(\n        (state: ConsignmentState) => state.statuses.isCreating,\n        isCreating => () => isCreating === true\n    );\n\n    const isUpdating = createSelector(\n        (state: ConsignmentState) => state.statuses.isUpdating,\n        isUpdating => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isUpdating[consignmentId] === true;\n            }\n\n            return find(isUpdating) === true;\n        }\n    );\n\n    const isDeleting = createSelector(\n        (state: ConsignmentState) => state.statuses.isDeleting,\n        isDeleting => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isDeleting[consignmentId] === true;\n            }\n\n            return find(isDeleting) === true;\n        }\n    );\n\n    const isAssigningItems = createSelector(\n        getConsignmentByAddress,\n        isUpdating,\n        isCreating,\n        (getConsignmentByAddress, isUpdating, isCreating) => (address: AddressRequestBody) => {\n            const consignment = getConsignmentByAddress(address);\n\n            return consignment ? isUpdating(consignment.id) : isCreating();\n        }\n    );\n\n    const isUpdatingShippingOption = createSelector(\n        (state: ConsignmentState) => state.statuses.isUpdatingShippingOption,\n        isUpdatingShippingOption => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isUpdatingShippingOption[consignmentId] === true;\n            }\n\n            return find(isUpdatingShippingOption) === true;\n        }\n    );\n\n    return memoizeOne((\n        state: ConsignmentState = DEFAULT_STATE,\n        cart: CartSelector\n    ): ConsignmentSelector => {\n        return {\n            getConsignments: getConsignments(state),\n            getConsignmentById: getConsignmentById(state),\n            getConsignmentByAddress: getConsignmentByAddress(state),\n            getShippingOption: getShippingOption(state),\n            getLoadError: getLoadError(state),\n            getCreateError: getCreateError(state),\n            getLoadShippingOptionsError: getLoadShippingOptionsError(state),\n            getUnassignedItems: getUnassignedItems(state, { cart }),\n            getUpdateError: getUpdateError(state),\n            getDeleteError: getDeleteError(state),\n            getItemAssignmentError: getItemAssignmentError(state),\n            getUpdateShippingOptionError: getUpdateShippingOptionError(state),\n            isLoading: isLoading(state),\n            isLoadingShippingOptions: isLoadingShippingOptions(state),\n            isCreating: isCreating(state),\n            isUpdating: isUpdating(state),\n            isDeleting: isDeleting(state),\n            isAssigningItems: isAssigningItems(state),\n            isUpdatingShippingOption: isUpdatingShippingOption(state),\n        };\n    });\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport default interface StoreCreditState {\n    errors: StoreCreditErrorsState;\n    statuses: StoreCreditStatusesState;\n}\n\nexport interface StoreCreditErrorsState {\n    applyError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface StoreCreditStatusesState {\n    isApplying?: boolean;\n}\n\nexport const DEFAULT_STATE: StoreCreditState = {\n    errors: {},\n    statuses: {},\n};\n","import { createBillingAddressSelectorFactory } from '../billing';\nimport { createCartSelectorFactory } from '../cart';\nimport { createCheckoutButtonSelectorFactory } from '../checkout-buttons';\nimport { createFreezeProxies } from '../common/utility';\nimport { createConfigSelectorFactory } from '../config';\nimport { createCouponSelectorFactory, createGiftCertificateSelectorFactory } from '../coupon';\nimport { createCustomerSelectorFactory, createCustomerStrategySelectorFactory } from '../customer';\nimport { createFormSelectorFactory } from '../form';\nimport { createCountrySelectorFactory } from '../geography';\nimport { createOrderSelectorFactory } from '../order';\nimport { createPaymentMethodSelectorFactory, createPaymentSelectorFactory, createPaymentStrategySelectorFactory } from '../payment';\nimport { createInstrumentSelectorFactory } from '../payment/instrument';\nimport { createRemoteCheckoutSelectorFactory } from '../remote-checkout';\nimport { createConsignmentSelectorFactory, createShippingAddressSelectorFactory, createShippingCountrySelectorFactory, createShippingStrategySelectorFactory } from '../shipping';\nimport { createStoreCreditSelectorFactory } from '../store-credit';\n\nimport { createCheckoutSelectorFactory } from './checkout-selector';\nimport { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport type InternalCheckoutSelectorsFactory = (\n    state: CheckoutStoreState,\n    options?: CheckoutStoreOptions\n) => InternalCheckoutSelectors;\n\nexport function createInternalCheckoutSelectorsFactory(): InternalCheckoutSelectorsFactory {\n    const createBillingAddressSelector = createBillingAddressSelectorFactory();\n    const createCartSelector = createCartSelectorFactory();\n    const createCheckoutButtonSelector = createCheckoutButtonSelectorFactory();\n    const createConfigSelector = createConfigSelectorFactory();\n    const createCountrySelector = createCountrySelectorFactory();\n    const createCouponSelector = createCouponSelectorFactory();\n    const createCustomerSelector = createCustomerSelectorFactory();\n    const createCustomerStrategySelector = createCustomerStrategySelectorFactory();\n    const createGiftCertificateSelector = createGiftCertificateSelectorFactory();\n    const createInstrumentSelector = createInstrumentSelectorFactory();\n    const createFormSelector = createFormSelectorFactory();\n    const createPaymentMethodSelector = createPaymentMethodSelectorFactory();\n    const createPaymentStrategySelector = createPaymentStrategySelectorFactory();\n    const createRemoteCheckoutSelector = createRemoteCheckoutSelectorFactory();\n    const createShippingAddressSelector = createShippingAddressSelectorFactory();\n    const createShippingCountrySelector = createShippingCountrySelectorFactory();\n    const createShippingStrategySelector = createShippingStrategySelectorFactory();\n    const createConsignmentSelector = createConsignmentSelectorFactory();\n    const createCheckoutSelector = createCheckoutSelectorFactory();\n    const createOrderSelector = createOrderSelectorFactory();\n    const createPaymentSelector = createPaymentSelectorFactory();\n    const createStoreCreditSelector = createStoreCreditSelectorFactory();\n\n    return (state, options = {}) => {\n        const billingAddress = createBillingAddressSelector(state.billingAddress);\n        const cart = createCartSelector(state.cart);\n        const checkoutButton = createCheckoutButtonSelector(state.checkoutButton);\n        const config = createConfigSelector(state.config);\n        const countries = createCountrySelector(state.countries);\n        const coupons = createCouponSelector(state.coupons);\n        const customer = createCustomerSelector(state.customer);\n        const customerStrategies = createCustomerStrategySelector(state.customerStrategies);\n        const form = createFormSelector(state.config);\n        const giftCertificates = createGiftCertificateSelector(state.giftCertificates);\n        const instruments = createInstrumentSelector(state.instruments);\n        const paymentMethods = createPaymentMethodSelector(state.paymentMethods);\n        const paymentStrategies = createPaymentStrategySelector(state.paymentStrategies);\n        const remoteCheckout = createRemoteCheckoutSelector(state.remoteCheckout);\n        const shippingAddress = createShippingAddressSelector(state.consignments);\n        const shippingCountries = createShippingCountrySelector(state.shippingCountries);\n        const shippingStrategies = createShippingStrategySelector(state.shippingStrategies);\n        const storeCredit = createStoreCreditSelector(state.storeCredit);\n\n        // Compose selectors\n        const consignments = createConsignmentSelector(state.consignments, cart);\n        const checkout = createCheckoutSelector(state.checkout, billingAddress, cart, consignments, coupons, customer, giftCertificates);\n        const order = createOrderSelector(state.order, billingAddress, coupons);\n        const payment = createPaymentSelector(checkout, order);\n\n        const selectors = {\n            billingAddress,\n            cart,\n            checkout,\n            checkoutButton,\n            config,\n            consignments,\n            countries,\n            coupons,\n            customer,\n            customerStrategies,\n            form,\n            giftCertificates,\n            instruments,\n            order,\n            payment,\n            paymentMethods,\n            paymentStrategies,\n            remoteCheckout,\n            shippingAddress,\n            shippingCountries,\n            shippingStrategies,\n            storeCredit,\n        };\n\n        return options.shouldWarnMutation ? createFreezeProxies(selectors) : selectors;\n    };\n}\n\nexport default function createInternalCheckoutSelectors(\n    state: CheckoutStoreState,\n    options?: CheckoutStoreOptions\n): InternalCheckoutSelectors {\n    return createInternalCheckoutSelectorsFactory()(state, options);\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport BillingAddress from './billing-address';\nimport BillingAddressState, { DEFAULT_STATE } from './billing-address-state';\n\nexport default interface BillingAddressSelector {\n    getBillingAddress(): BillingAddress | undefined;\n    getBillingAddressOrThrow(): BillingAddress;\n    getUpdateError(): Error | undefined;\n    getContinueAsGuestError(): Error | undefined;\n    getLoadError(): Error | undefined;\n    isUpdating(): boolean;\n    isContinuingAsGuest(): boolean;\n    isLoading(): boolean;\n}\n\nexport type BillingAddressSelectorFactory = (state: BillingAddressState) => BillingAddressSelector;\n\nexport function createBillingAddressSelectorFactory(): BillingAddressSelectorFactory {\n    const getBillingAddress = createSelector(\n        (state: BillingAddressState) => state.data,\n        data => () => data\n    );\n\n    const getBillingAddressOrThrow = createSelector(\n        getBillingAddress,\n        getBillingAddress => () => {\n            return guard(getBillingAddress(), () => new MissingDataError(MissingDataErrorType.MissingBillingAddress));\n        }\n    );\n\n    const getUpdateError = createSelector(\n        (state: BillingAddressState) => state.errors.updateError,\n        error => () => error\n    );\n\n    const getContinueAsGuestError = createSelector(\n        (state: BillingAddressState) => state.errors.continueAsGuestError,\n        error => () => error\n    );\n\n    const getLoadError = createSelector(\n        (state: BillingAddressState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isUpdating = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isUpdating,\n        status => () => status\n    );\n\n    const isContinuingAsGuest = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isContinuingAsGuest,\n        status => () => status\n    );\n\n    const isLoading = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: BillingAddressState = DEFAULT_STATE\n    ): BillingAddressSelector => {\n        return {\n            getBillingAddress: getBillingAddress(state),\n            getBillingAddressOrThrow: getBillingAddressOrThrow(state),\n            getUpdateError: getUpdateError(state),\n            getContinueAsGuestError: getContinueAsGuestError(state),\n            getLoadError: getLoadError(state),\n            isUpdating: isUpdating(state),\n            isContinuingAsGuest: isContinuingAsGuest(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoize, memoizeOne } from '@bigcommerce/memoize';\nimport { find, some, values } from 'lodash';\n\nimport { createSelector } from '../common/selector';\n\nimport CheckoutButtonState, { DEFAULT_STATE } from './checkout-button-state';\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport default interface CheckoutButtonSelector {\n    getState(): CheckoutButtonState;\n    isInitializing(methodId?: CheckoutButtonMethodType): boolean;\n    isInitialized(methodId: CheckoutButtonMethodType, containerId?: string): boolean;\n    isDeinitializing(methodId?: CheckoutButtonMethodType): boolean;\n    getInitializeError(methodId?: CheckoutButtonMethodType): Error | undefined;\n    getDeinitializeError(methodId?: CheckoutButtonMethodType): Error | undefined;\n}\n\nexport type CheckoutButtonSelectorFactory = (state: CheckoutButtonState) => CheckoutButtonSelector;\n\nexport function createCheckoutButtonSelectorFactory(): CheckoutButtonSelectorFactory {\n    const getState = createSelector(\n        (state: CheckoutButtonState) => state,\n        state => () => state\n    );\n\n    const isInitializing = createSelector(\n        (state: CheckoutButtonState) => state.statuses,\n        statuses => memoize((methodId?: CheckoutButtonMethodType) => {\n            if (methodId) {\n                const method = statuses[methodId];\n\n                return (method && method.isInitializing) === true;\n            }\n\n            return some(statuses, { isInitializing: true });\n        })\n    );\n\n    const isInitialized = createSelector(\n        (state: CheckoutButtonState) => state.data,\n        data => memoize((methodId: CheckoutButtonMethodType, containerId?: string) => {\n            const method = data[methodId];\n\n            if (!method) {\n                return false;\n            }\n\n            if (!containerId) {\n                return some(method.initializedContainers, isInitialized => isInitialized === true);\n            }\n\n            return method.initializedContainers[containerId] === true;\n        })\n    );\n\n    const isDeinitializing = createSelector(\n        (state: CheckoutButtonState) => state.statuses,\n        statuses => memoize((methodId?: CheckoutButtonMethodType) => {\n            if (methodId) {\n                const method = statuses[methodId];\n\n                return (method && method.isDeinitializing) === true;\n            }\n\n            return some(statuses, { isDeinitializing: true });\n        })\n    );\n\n    const getInitializeError = createSelector(\n        (state: CheckoutButtonState) => state.errors,\n        errors => memoize((methodId?: CheckoutButtonMethodType) => {\n            const method = methodId ?\n                errors[methodId] :\n                find(values(errors), method => !!(method && method.initializeError));\n\n            return method && method.initializeError;\n        })\n    );\n\n    const getDeinitializeError = createSelector(\n        (state: CheckoutButtonState) => state.errors,\n        errors => memoize((methodId?: CheckoutButtonMethodType) => {\n            const method = methodId ?\n                errors[methodId] :\n                find(values(errors), method => !!(method && method.deinitializeError));\n\n            return method && method.deinitializeError;\n        })\n    );\n\n    return memoizeOne((\n        state: CheckoutButtonState = DEFAULT_STATE\n    ): CheckoutButtonSelector => {\n        return {\n            getState: getState(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isDeinitializing: isDeinitializing(state),\n            getInitializeError: getInitializeError(state),\n            getDeinitializeError: getDeinitializeError(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\n\nimport Coupon from './coupon';\nimport CouponState, { DEFAULT_STATE } from './coupon-state';\n\nexport default interface CouponSelector {\n    getCoupons(): Coupon[] | undefined;\n    getRemoveError(): RequestError | undefined;\n    getApplyError(): RequestError | undefined;\n    isApplying(): boolean;\n    isRemoving(): boolean;\n}\n\nexport type CouponSelectorFactory = (state: CouponState) => CouponSelector;\n\nexport function createCouponSelectorFactory(): CouponSelectorFactory {\n    const getCoupons = createSelector(\n        (state: CouponState) => state.data,\n        data => () => data\n    );\n\n    const getRemoveError = createSelector(\n        (state: CouponState) => state.errors.removeCouponError,\n        error => () => error\n    );\n\n    const getApplyError = createSelector(\n        (state: CouponState) => state.errors.applyCouponError,\n        error => () => error\n    );\n\n    const isApplying = createSelector(\n        (state: CouponState) => !!state.statuses.isApplyingCoupon,\n        status => () => status\n    );\n\n    const isRemoving = createSelector(\n        (state: CouponState) => !!state.statuses.isRemovingCoupon,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: CouponState = DEFAULT_STATE\n    ): CouponSelector => {\n        return {\n            getCoupons: getCoupons(state),\n            getRemoveError: getRemoveError(state),\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n            isRemoving: isRemoving(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport Customer from './customer';\nimport CustomerState, { DEFAULT_STATE } from './customer-state';\n\nexport default interface CustomerSelector {\n    getCustomer(): Customer | undefined;\n}\n\nexport type CustomerSelectorFactory = (state: CustomerState) => CustomerSelector;\n\nexport function createCustomerSelectorFactory(): CustomerSelectorFactory {\n    const getCustomer = createSelector(\n        (state: CustomerState) => state.data,\n        customer => () => customer\n    );\n\n    return memoizeOne((\n        state: CustomerState = DEFAULT_STATE\n    ): CustomerSelector => {\n        return {\n            getCustomer: getCustomer(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport RemoteCheckoutState, { DEFAULT_STATE, RemoteCheckoutStateData } from './remote-checkout-state';\n\nexport default interface RemoteCheckoutSelector {\n    getCheckout<TMethodId extends keyof RemoteCheckoutStateData>(\n        methodId: TMethodId\n    ): RemoteCheckoutStateData[TMethodId] | undefined;\n}\n\nexport type RemoteCheckoutSelectorFactory = (state: RemoteCheckoutState) => RemoteCheckoutSelector;\n\nexport function createRemoteCheckoutSelectorFactory(): RemoteCheckoutSelectorFactory {\n    const getCheckout = createSelector(\n        (state: RemoteCheckoutState) => state.data,\n        data => <TMethodId extends keyof RemoteCheckoutStateData>(methodId: TMethodId) => {\n            return data[methodId];\n        }\n    );\n\n    return memoizeOne((\n        state: RemoteCheckoutState = DEFAULT_STATE\n    ): RemoteCheckoutSelector => {\n        return {\n            getCheckout: getCheckout(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { Address } from '../address';\nimport { createSelector } from '../common/selector';\n\nimport ConsignmentState, { DEFAULT_STATE } from './consignment-state';\n\nexport default interface ShippingAddressSelector {\n    getShippingAddress(): Address | undefined;\n}\n\nexport type ShippingAddressSelectorFactory = (state: ConsignmentState) => ShippingAddressSelector;\n\nexport function createShippingAddressSelectorFactory(): ShippingAddressSelectorFactory {\n    const getShippingAddress = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => () => {\n            if (!consignments || !consignments[0]) {\n                return;\n            }\n\n            return consignments[0].shippingAddress;\n        }\n    );\n\n    return memoizeOne((\n        state: ConsignmentState = DEFAULT_STATE\n    ): ShippingAddressSelector => {\n        return {\n            getShippingAddress: getShippingAddress(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { CheckoutSelector } from '../checkout';\nimport { createSelector } from '../common/selector';\nimport { GatewayOrderPayment, OrderSelector } from '../order';\n\nimport PaymentMethod from './payment-method';\nimport { HOSTED } from './payment-method-types';\nimport { ACKNOWLEDGE, FINALIZE } from './payment-status-types';\n\nexport default interface PaymentSelector {\n    getPaymentId(): { providerId: string; gatewayId?: string } | undefined;\n    getPaymentStatus(): string | undefined;\n    getPaymentToken(): string | undefined;\n    getPaymentRedirectUrl(): string | undefined;\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean;\n    isPaymentDataSubmitted(paymentMethod?: PaymentMethod): boolean;\n}\n\nexport type PaymentSelectorFactory = (\n    checkout: CheckoutSelector,\n    order: OrderSelector\n) => PaymentSelector;\n\ninterface PaymentSelectorDependencies {\n    checkout: CheckoutSelector;\n    order: OrderSelector;\n}\n\nexport function createPaymentSelectorFactory(): PaymentSelectorFactory {\n    const getInternalPayment = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrderMeta,\n        getOrderMeta => () => {\n            const meta = getOrderMeta();\n\n            return meta && meta.payment;\n        }\n    );\n\n    const getGatewayPayment = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrder,\n        getOrder => () => {\n            const order = getOrder();\n\n            return find(order && order.payments, ({ providerId }) =>\n                providerId !== 'giftcertificate' && providerId !== 'storecredit'\n            ) as GatewayOrderPayment;\n        }\n    );\n\n    const getHostedPayment = createSelector(\n        ({ checkout }: PaymentSelectorDependencies) => checkout.getCheckout,\n        getCheckout => () => {\n            const checkout = getCheckout();\n\n            return find(checkout && checkout.payments, ({ providerType }) =>\n                providerType === HOSTED\n            );\n        }\n    );\n\n    const getPaymentId = createSelector(\n        getInternalPayment,\n        getHostedPayment,\n        getGatewayPayment,\n        (getInternalPayment, getHostedPayment, getGatewayPayment) => () => {\n            const internalPayment = getInternalPayment();\n\n            if (internalPayment && internalPayment.id) {\n                return {\n                    providerId: internalPayment.id,\n                    gatewayId: internalPayment.gateway,\n                };\n            }\n\n            const payment = getHostedPayment() || getGatewayPayment();\n\n            if (payment && payment.providerId) {\n                return {\n                    providerId: payment.providerId,\n                    gatewayId: payment.gatewayId,\n                };\n            }\n        }\n    );\n\n    const getPaymentStatus = createSelector(\n        getInternalPayment,\n        getHostedPayment,\n        getGatewayPayment,\n        (getInternalPayment, getHostedPayment, getGatewayPayment) => () => {\n            const internalPayment = getInternalPayment();\n\n            if (internalPayment && internalPayment.status) {\n                return internalPayment.status.replace('PAYMENT_STATUS_', '');\n            }\n\n            const payment = getHostedPayment() || getGatewayPayment();\n\n            if (payment) {\n                return payment.detail.step;\n            }\n        }\n    );\n\n    const getPaymentToken = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrderMeta,\n        getOrderMeta => () => {\n            const meta = getOrderMeta();\n\n            return meta && meta.token;\n        }\n    );\n\n    const getPaymentRedirectUrl = createSelector(\n        getInternalPayment,\n        getInternalPayment => () => {\n            const payment = getInternalPayment();\n\n            return payment && payment.redirectUrl;\n        }\n    );\n\n    const isPaymentDataRequired = createSelector(\n        ({ checkout }: PaymentSelectorDependencies) => checkout.getOutstandingBalance,\n        getOutstandingBalance => (useStoreCredit: boolean = false) => {\n            const grandTotal = getOutstandingBalance(useStoreCredit);\n\n            return grandTotal ? grandTotal > 0 : false;\n        }\n    );\n\n    const isPaymentDataSubmitted = createSelector(\n        getPaymentStatus,\n        getPaymentStatus => (paymentMethod?: PaymentMethod) => {\n            if (paymentMethod && paymentMethod.nonce) {\n                return true;\n            }\n\n            return getPaymentStatus() === ACKNOWLEDGE || getPaymentStatus() === FINALIZE;\n        }\n    );\n\n    return memoizeOne((\n        checkout: CheckoutSelector,\n        order: OrderSelector\n    ): PaymentSelector => {\n        return {\n            getPaymentId: getPaymentId({ checkout, order }),\n            getPaymentStatus: getPaymentStatus({ checkout, order }),\n            getPaymentToken: getPaymentToken({ checkout, order }),\n            getPaymentRedirectUrl: getPaymentRedirectUrl({ checkout, order }),\n            isPaymentDataRequired: isPaymentDataRequired({ checkout, order }),\n            isPaymentDataSubmitted: isPaymentDataSubmitted({ checkout, order }),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport Cart from './cart';\nimport CartState, { DEFAULT_STATE } from './cart-state';\n\nexport default interface CartSelector {\n    getCart(): Cart | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type CartSelectorFactory = (state: CartState) => CartSelector;\n\nexport function createCartSelectorFactory() {\n    const getCart = createSelector(\n        (state: CartState) => state.data,\n        cart => () => cart\n    );\n\n    const getLoadError = createSelector(\n        (state: CartState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: CartState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: CartState = DEFAULT_STATE\n    ): CartSelector => {\n        return {\n            getCart: getCart(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport Config, { ContextConfig, StoreConfig } from './config';\nimport ConfigState, { DEFAULT_STATE } from './config-state';\n\nexport default interface ConfigSelector {\n    getConfig(): Config | undefined;\n    getStoreConfig(): StoreConfig | undefined;\n    getContextConfig(): ContextConfig | undefined;\n    getExternalSource(): string | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type ConfigSelectorFactory = (state: ConfigState) => ConfigSelector;\n\nexport function createConfigSelectorFactory(): ConfigSelectorFactory {\n\n    const getConfig = createSelector(\n        (state: ConfigState) => state.data,\n        data => () => data\n    );\n\n    const getStoreConfig = createSelector(\n        (state: ConfigState) => state.data && state.data.storeConfig,\n        data => () => data\n    );\n\n    const getContextConfig = createSelector(\n        (state: ConfigState) => state.data && state.data.context,\n        data => () => data\n    );\n\n    const getExternalSource = createSelector(\n        (state: ConfigState) => state.meta && state.meta.externalSource,\n        data => () => data\n    );\n\n    const getLoadError = createSelector(\n        (state: ConfigState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: ConfigState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: ConfigState = DEFAULT_STATE\n    ): ConfigSelector => {\n        return {\n            getConfig: getConfig(state),\n            getStoreConfig: getStoreConfig(state),\n            getContextConfig: getContextConfig(state),\n            getExternalSource: getExternalSource(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport Country from './country';\nimport CountryState, { DEFAULT_STATE } from './country-state';\n\nexport default interface CountrySelector {\n    getCountries(): Country[] | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type CountrySelectorFactory = (state: CountryState) => CountrySelector;\n\nexport function createCountrySelectorFactory(): CountrySelectorFactory {\n    const getCountries = createSelector(\n        (state: CountryState) => state.data,\n        countries => () => countries\n    );\n\n    const getLoadError = createSelector(\n        (state: CountryState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: CountryState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: CountryState = DEFAULT_STATE\n    ): CountrySelector => {\n        return {\n            getCountries: getCountries(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport CustomerStrategyState, { DEFAULT_STATE } from './customer-strategy-state';\n\nexport default interface CustomerStrategySelector {\n    getSignInError(methodId?: string): Error | undefined;\n    getSignOutError(methodId?: string): Error | undefined;\n    getInitializeError(methodId?: string): Error | undefined;\n    getWidgetInteractionError(methodId?: string): Error | undefined;\n    isSigningIn(methodId?: string): boolean;\n    isSigningOut(methodId?: string): boolean;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n    isWidgetInteracting(methodId?: string): boolean;\n}\n\nexport type CustomerStrategySelectorFactory = (state: CustomerStrategyState) => CustomerStrategySelector;\n\nexport function createCustomerStrategySelectorFactory(): CustomerStrategySelectorFactory {\n    const getSignInError = createSelector(\n        (state: CustomerStrategyState) => state.errors.signInMethodId,\n        (state: CustomerStrategyState) => state.errors.signInError,\n        (signInMethodId, signInError) => (methodId?: string) => {\n            if (methodId && signInMethodId !== methodId) {\n                return;\n            }\n\n            return signInError;\n        }\n    );\n\n    const getSignOutError = createSelector(\n        (state: CustomerStrategyState) => state.errors.signOutMethodId,\n        (state: CustomerStrategyState) => state.errors.signOutError,\n        (signOutMethodId, signOutError) => (methodId?: string) => {\n            if (methodId && signOutMethodId !== methodId) {\n                return;\n            }\n\n            return signOutError;\n        }\n    );\n\n    const getInitializeError = createSelector(\n        (state: CustomerStrategyState) => state.errors.initializeMethodId,\n        (state: CustomerStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        }\n    );\n\n    const getWidgetInteractionError = createSelector(\n        (state: CustomerStrategyState) => state.errors.widgetInteractionMethodId,\n        (state: CustomerStrategyState) => state.errors.widgetInteractionError,\n        (widgetInteractionMethodId, widgetInteractionError) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return;\n            }\n\n            return widgetInteractionError;\n        }\n    );\n\n    const isSigningIn = createSelector(\n        (state: CustomerStrategyState) => state.statuses.signInMethodId,\n        (state: CustomerStrategyState) => state.statuses.isSigningIn,\n        (signInMethodId, isSigningIn) => (methodId?: string) => {\n            if (methodId && signInMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSigningIn;\n        }\n    );\n\n    const isSigningOut = createSelector(\n        (state: CustomerStrategyState) => state.statuses.signOutMethodId,\n        (state: CustomerStrategyState) => state.statuses.isSigningOut,\n        (signOutMethodId, isSigningOut) => (methodId?: string) => {\n            if (methodId && signOutMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSigningOut;\n        }\n    );\n\n    const isInitializing = createSelector(\n        (state: CustomerStrategyState) => state.statuses.initializeMethodId,\n        (state: CustomerStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        }\n    );\n\n    const isInitialized = createSelector(\n        (state: CustomerStrategyState) => state.data,\n        data => (methodId: string) => {\n            return !!(\n                data[methodId] &&\n                data[methodId].isInitialized\n            );\n        }\n    );\n\n    const isWidgetInteracting = createSelector(\n        (state: CustomerStrategyState) => state.statuses.widgetInteractionMethodId,\n        (state: CustomerStrategyState) => state.statuses.isWidgetInteracting,\n        (widgetInteractionMethodId, isWidgetInteracting) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isWidgetInteracting;\n        }\n    );\n\n    return memoizeOne((\n        state: CustomerStrategyState = DEFAULT_STATE\n    ): CustomerStrategySelector => {\n        return {\n            getSignInError: getSignInError(state),\n            getSignOutError: getSignOutError(state),\n            getInitializeError: getInitializeError(state),\n            getWidgetInteractionError: getWidgetInteractionError(state),\n            isSigningIn: isSigningIn(state),\n            isSigningOut: isSigningOut(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isWidgetInteracting: isWidgetInteracting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\n\nimport GiftCertificate from './gift-certificate';\nimport GiftCertificateState, { DEFAULT_STATE } from './gift-certificate-state';\n\nexport default interface GiftCertificateSelector {\n    getGiftCertificates(): GiftCertificate[] | undefined;\n    getRemoveError(): RequestError<StorefrontErrorResponseBody> | undefined;\n    getApplyError(): RequestError<StorefrontErrorResponseBody> | undefined;\n    isApplying(): boolean;\n    isRemoving(): boolean;\n}\n\nexport type GiftCertificateSelectorFactory = (state: GiftCertificateState) => GiftCertificateSelector;\n\nexport function createGiftCertificateSelectorFactory(): GiftCertificateSelectorFactory {\n    const getGiftCertificates = createSelector(\n        (state: GiftCertificateState) => state.data,\n        data => () => data\n    );\n\n    const getRemoveError = createSelector(\n        (state: GiftCertificateState) => state.errors.removeGiftCertificateError,\n        error => () => error\n    );\n\n    const getApplyError = createSelector(\n        (state: GiftCertificateState) => state.errors.applyGiftCertificateError,\n        error => () => error\n    );\n\n    const isApplying = createSelector(\n        (state: GiftCertificateState) => !!state.statuses.isApplyingGiftCertificate,\n        status => () => status\n    );\n\n    const isRemoving = createSelector(\n        (state: GiftCertificateState) => !!state.statuses.isRemovingGiftCertificate,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: GiftCertificateState = DEFAULT_STATE\n    ): GiftCertificateSelector => {\n        return {\n            getGiftCertificates: getGiftCertificates(state),\n            getRemoveError: getRemoveError(state),\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n            isRemoving: isRemoving(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { filter, flatMap, isMatch, values } from 'lodash';\n\nimport { createSelector } from '../../common/selector';\nimport PaymentMethod from '../payment-method';\n\nimport PaymentInstrument, { CardInstrument } from './instrument';\nimport InstrumentState, { DEFAULT_STATE, InstrumentMeta } from './instrument-state';\nimport supportedInstruments from './supported-payment-instruments';\n\nexport default interface InstrumentSelector {\n    getCardInstrument(instrumentId: string): CardInstrument | undefined;\n    // TODO: Rename to `getCardInstruments`\n    getInstruments(): CardInstrument[] | undefined;\n    getInstrumentsByPaymentMethod(paymentMethod: PaymentMethod): PaymentInstrument[] | undefined;\n    getInstrumentsMeta(): InstrumentMeta | undefined;\n    getLoadError(): Error | undefined;\n    getDeleteError(instrumentId?: string): Error | undefined;\n    isLoading(): boolean ;\n    isDeleting(instrumentId?: string): boolean;\n}\n\nexport type InstrumentSelectorFactory = (state: InstrumentState) => InstrumentSelector;\n\nexport function createInstrumentSelectorFactory(): InstrumentSelectorFactory {\n    const getInstrumentsByPaymentMethod = createSelector(\n        (state: InstrumentState) => state.data,\n        instruments => (paymentMethod: PaymentMethod) => {\n            if (!instruments) {\n                return;\n            }\n\n            const paymentMethodKey = paymentMethod.gateway ? `${paymentMethod.gateway}.${paymentMethod.id}` : paymentMethod.id;\n\n            const currentMethod = supportedInstruments[paymentMethodKey];\n\n            if (!currentMethod) {\n                return [];\n            }\n\n            return filter<PaymentInstrument>(instruments, currentMethod);\n        }\n    );\n\n    const getCardInstrument = createSelector(\n        (state: InstrumentState) => state.data,\n        (instruments = []) => (instrumentId: string) => {\n            const cards = values(supportedInstruments);\n\n            return instruments.find((instrument): instrument is CardInstrument =>\n                instrument.bigpayToken === instrumentId &&\n                instrument.method === 'credit_card' &&\n                cards.some(card => isMatch(instrument, card))\n            );\n        }\n    );\n\n    const getInstruments = createSelector(\n        (state: InstrumentState) => state.data,\n        instruments => () => {\n            if (!instruments) {\n                return;\n            }\n\n            const cardInstruments = flatMap(supportedInstruments, card =>\n                filter(instruments, (instrument: PaymentInstrument): instrument is CardInstrument => {\n                    return card.method === 'credit_card' && isMatch(instrument, card);\n                })\n            );\n\n            return cardInstruments;\n        }\n    );\n\n    const getInstrumentsMeta = createSelector(\n        (state: InstrumentState) => state.meta,\n        meta => () => meta\n    );\n\n    const getLoadError = createSelector(\n        (state: InstrumentState) => state.errors.loadError,\n        loadError => () => loadError\n    );\n\n    const getDeleteError = createSelector(\n        (state: InstrumentState) => state.errors.failedInstrument,\n        (state: InstrumentState) => state.errors.deleteError,\n        (failedInstrument, deleteError) => (instrumentId?: string) => {\n            if (instrumentId && failedInstrument !== instrumentId) {\n                return;\n            }\n\n            return deleteError;\n        }\n    );\n\n    const isLoading = createSelector(\n        (state: InstrumentState) => state.statuses.isLoading,\n        isLoading => () => !!isLoading\n    );\n\n    const isDeleting = createSelector(\n        (state: InstrumentState) => state.statuses.deletingInstrument,\n        (state: InstrumentState) => state.statuses.isDeleting,\n        (deletingInstrument, isDeleting) => (instrumentId?: string) => {\n            if (instrumentId && deletingInstrument !== instrumentId) {\n                return false;\n            }\n\n            return !!isDeleting;\n        }\n    );\n\n    return memoizeOne((\n        state: InstrumentState = DEFAULT_STATE\n    ): InstrumentSelector => {\n        return {\n            getCardInstrument: getCardInstrument(state),\n            getInstruments: getInstruments(state),\n            getInstrumentsByPaymentMethod: getInstrumentsByPaymentMethod(state),\n            getInstrumentsMeta: getInstrumentsMeta(state),\n            getLoadError: getLoadError(state),\n            getDeleteError: getDeleteError(state),\n            isLoading: isLoading(state),\n            isDeleting: isDeleting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { DEFAULT_STATE } from './payment-method-state';\n\nexport default interface PaymentMethodSelector {\n    getPaymentMethods(): PaymentMethod[] | undefined;\n    getPaymentMethodsMeta(): PaymentMethodMeta | undefined;\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined;\n    getPaymentMethodOrThrow(methodId: string, gatewayId ?: string): PaymentMethod;\n    getLoadError(): Error | undefined;\n    getLoadMethodError(methodId?: string): Error | undefined;\n    isLoading(): boolean;\n    isLoadingMethod(methodId?: string): boolean;\n}\n\nexport type PaymentMethodSelectorFactory = (state: PaymentMethodState) => PaymentMethodSelector;\n\nexport function createPaymentMethodSelectorFactory(): PaymentMethodSelectorFactory {\n    const getPaymentMethods = createSelector(\n        (state: PaymentMethodState) => state.data,\n        paymentMethods => () => paymentMethods\n    );\n\n    const getPaymentMethodsMeta = createSelector(\n        (state: PaymentMethodState) => state.meta,\n        meta => () => meta\n    );\n\n    const getPaymentMethod = createSelector(\n        (state: PaymentMethodState) => state.data,\n        paymentMethods => (methodId: string, gatewayId?: string) => {\n            return gatewayId ?\n                find(paymentMethods, { id: methodId, gateway: gatewayId }) :\n                find(paymentMethods, { id: methodId });\n        }\n    );\n\n    const getPaymentMethodOrThrow = createSelector(\n        getPaymentMethod,\n        getPaymentMethod => (methodId: string, gatewayId?: string) => {\n            return guard(getPaymentMethod(methodId, gatewayId), () => new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n        }\n    );\n\n    const getLoadError = createSelector(\n        (state: PaymentMethodState) => state.errors.loadError,\n        loadError => () => loadError\n    );\n\n    const getLoadMethodError = createSelector(\n        (state: PaymentMethodState) => state.errors.loadMethodId,\n        (state: PaymentMethodState) => state.errors.loadMethodError,\n        (loadMethodId, loadMethodError) => (methodId?: string) => {\n            if (methodId && loadMethodId !== methodId) {\n                return;\n            }\n\n            return loadMethodError;\n        }\n    );\n\n    const isLoading = createSelector(\n        (state: PaymentMethodState) => state.statuses.isLoading,\n        isLoading => () => !!isLoading\n    );\n\n    const isLoadingMethod = createSelector(\n        (state: PaymentMethodState) => state.statuses.loadMethodId,\n        (state: PaymentMethodState) => state.statuses.isLoadingMethod,\n        (loadMethodId, isLoadingMethod) => (methodId?: string) => {\n            if (methodId && loadMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isLoadingMethod;\n        }\n    );\n\n    return memoizeOne((\n        state: PaymentMethodState = DEFAULT_STATE\n    ): PaymentMethodSelector => {\n        return {\n            getPaymentMethods: getPaymentMethods(state),\n            getPaymentMethodsMeta: getPaymentMethodsMeta(state),\n            getPaymentMethod: getPaymentMethod(state),\n            getPaymentMethodOrThrow: getPaymentMethodOrThrow(state),\n            getLoadError: getLoadError(state),\n            getLoadMethodError: getLoadMethodError(state),\n            isLoading: isLoading(state),\n            isLoadingMethod: isLoadingMethod(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport PaymentStrategyState, { DEFAULT_STATE } from './payment-strategy-state';\n\nexport default interface PaymentStrategySelector {\n    getInitializeError(methodId?: string): Error | undefined;\n    getExecuteError(methodId?: string): Error | undefined;\n    getFinalizeError(methodId?: string): Error | undefined;\n    getWidgetInteractingError(methodId?: string): Error | undefined;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n    isExecuting(methodId?: string): boolean;\n    isFinalizing(methodId?: string): boolean;\n    isWidgetInteracting(methodId?: string): boolean;\n}\n\nexport type PaymentStrategySelectorFactory = (state: PaymentStrategyState) => PaymentStrategySelector;\n\nexport function createPaymentStrategySelectorFactory(): PaymentStrategySelectorFactory {\n    const getInitializeError = createSelector(\n        (state: PaymentStrategyState) => state.errors.initializeMethodId,\n        (state: PaymentStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        }\n    );\n\n    const getExecuteError = createSelector(\n        (state: PaymentStrategyState) => state.errors.executeMethodId,\n        (state: PaymentStrategyState) => state.errors.executeError,\n        (executeMethodId, executeError) => (methodId?: string) => {\n            if (methodId && executeMethodId !== methodId) {\n                return;\n            }\n\n            return executeError;\n        }\n    );\n\n    const getFinalizeError = createSelector(\n        (state: PaymentStrategyState) => state.errors.finalizeMethodId,\n        (state: PaymentStrategyState) => state.errors.finalizeError,\n        (finalizeMethodId, finalizeError) => (methodId?: string) => {\n            if (methodId && finalizeMethodId !== methodId) {\n                return;\n            }\n\n            return finalizeError;\n        }\n    );\n\n    const getWidgetInteractingError = createSelector(\n        (state: PaymentStrategyState) => state.errors.widgetInteractionMethodId,\n        (state: PaymentStrategyState) => state.errors.widgetInteractionError,\n        (widgetInteractionMethodId, widgetInteractionError) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return;\n            }\n\n            return widgetInteractionError;\n        }\n    );\n\n    const isInitializing = createSelector(\n        (state: PaymentStrategyState) => state.statuses.initializeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        }\n    );\n\n    const isInitialized = createSelector(\n        (state: PaymentStrategyState) => state.data,\n        data => (methodId: string) => {\n            return !!(\n                data[methodId] &&\n                data[methodId].isInitialized\n            );\n        }\n    );\n\n    const isExecuting = createSelector(\n        (state: PaymentStrategyState) => state.statuses.executeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isExecuting,\n        (executeMethodId, isExecuting) => (methodId?: string) => {\n            if (methodId && executeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isExecuting;\n        }\n    );\n\n    const isFinalizing = createSelector(\n        (state: PaymentStrategyState) => state.statuses.finalizeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isFinalizing,\n        (finalizeMethodId, isFinalizing) => (methodId?: string) => {\n            if (methodId && finalizeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isFinalizing;\n        }\n    );\n\n    const isWidgetInteracting = createSelector(\n        (state: PaymentStrategyState) => state.statuses.widgetInteractionMethodId,\n        (state: PaymentStrategyState) => state.statuses.isWidgetInteracting,\n        (widgetInteractionMethodId, isWidgetInteracting) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isWidgetInteracting;\n        }\n    );\n\n    return memoizeOne((\n        state: PaymentStrategyState = DEFAULT_STATE\n    ): PaymentStrategySelector => {\n        return {\n            getInitializeError: getInitializeError(state),\n            getExecuteError: getExecuteError(state),\n            getFinalizeError: getFinalizeError(state),\n            getWidgetInteractingError: getWidgetInteractingError(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isExecuting: isExecuting(state),\n            isFinalizing: isFinalizing(state),\n            isWidgetInteracting: isWidgetInteracting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\nimport { Country } from '../geography';\n\nimport ShippingCountryState, { DEFAULT_STATE } from './shipping-country-state';\n\nexport default interface ShippingCountrySelector {\n    getShippingCountries(): Country[] | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type ShippingCountrySelectorFactory = (state: ShippingCountryState) => ShippingCountrySelector;\n\nexport function createShippingCountrySelectorFactory(): ShippingCountrySelectorFactory {\n    const getShippingCountries = createSelector(\n        (state: ShippingCountryState) => state.data,\n        data => () => data\n    );\n\n    const getLoadError = createSelector(\n        (state: ShippingCountryState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: ShippingCountryState) => state.statuses.isLoading,\n        status => () => !!status\n    );\n\n    return memoizeOne((\n        state: ShippingCountryState = DEFAULT_STATE\n    ): ShippingCountrySelector => {\n        return {\n            getShippingCountries: getShippingCountries(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport ShippingStrategyState, { DEFAULT_STATE } from './shipping-strategy-state';\n\nexport default interface ShippingStrategySelector {\n    getUpdateAddressError(methodId?: string): Error | undefined;\n    getSelectOptionError(methodId?: string): Error | undefined;\n    getInitializeError(methodId?: string): Error | undefined;\n    isUpdatingAddress(methodId?: string): boolean;\n    isSelectingOption(methodId?: string): boolean;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n}\n\nexport type ShippingStrategySelectorFactory = (state: ShippingStrategyState) => ShippingStrategySelector;\n\nexport function createShippingStrategySelectorFactory(): ShippingStrategySelectorFactory {\n    const getUpdateAddressError = createSelector(\n        (state: ShippingStrategyState) => state.errors.updateAddressMethodId,\n        (state: ShippingStrategyState) => state.errors.updateAddressError,\n        (updateAddressMethodId, updateAddressError) => (methodId?: string) => {\n            if (methodId && updateAddressMethodId !== methodId) {\n                return;\n            }\n\n            return updateAddressError;\n        }\n    );\n\n    const getSelectOptionError = createSelector(\n        (state: ShippingStrategyState) => state.errors.selectOptionMethodId,\n        (state: ShippingStrategyState) => state.errors.selectOptionError,\n        (selectOptionMethodId, selectOptionError) => (methodId?: string) => {\n            if (methodId && selectOptionMethodId !== methodId) {\n                return;\n            }\n\n            return selectOptionError;\n        }\n    );\n\n    const getInitializeError = createSelector(\n        (state: ShippingStrategyState) => state.errors.initializeMethodId,\n        (state: ShippingStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        }\n    );\n\n    const isUpdatingAddress = createSelector(\n        (state: ShippingStrategyState) => state.statuses.updateAddressMethodId,\n        (state: ShippingStrategyState) => state.statuses.isUpdatingAddress,\n        (updateAddressMethodId, isUpdatingAddress) => (methodId?: string) => {\n            if (methodId && updateAddressMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isUpdatingAddress;\n        }\n    );\n\n    const isSelectingOption = createSelector(\n        (state: ShippingStrategyState) => state.statuses.selectOptionMethodId,\n        (state: ShippingStrategyState) => state.statuses.isSelectingOption,\n        (selectOptionMethodId, isSelectingOption) => (methodId?: string) => {\n            if (methodId && selectOptionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSelectingOption;\n        }\n    );\n\n    const isInitializing = createSelector(\n        (state: ShippingStrategyState) => state.statuses.initializeMethodId,\n        (state: ShippingStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        }\n    );\n\n    const isInitialized = createSelector(\n        (state: ShippingStrategyState) => state.data,\n        data => (methodId: string) => {\n            return !!(\n                data[methodId] &&\n                data[methodId].isInitialized\n            );\n        }\n    );\n\n    return memoizeOne((\n        state: ShippingStrategyState = DEFAULT_STATE\n    ): ShippingStrategySelector => {\n        return {\n            getUpdateAddressError: getUpdateAddressError(state),\n            getSelectOptionError: getSelectOptionError(state),\n            getInitializeError: getInitializeError(state),\n            isUpdatingAddress: isUpdatingAddress(state),\n            isSelectingOption: isSelectingOption(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector } from '../customer';\nimport { ConsignmentSelector } from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutState, { DEFAULT_STATE } from './checkout-state';\n\nexport default interface CheckoutSelector {\n    getCheckout(): Checkout | undefined;\n    getCheckoutOrThrow(): Checkout;\n    getOutstandingBalance(useStoreCredit?: boolean): number | undefined;\n    getLoadError(): Error | undefined;\n    getUpdateError(): Error | undefined;\n    isExecutingSpamCheck(): boolean;\n    isLoading(): boolean;\n    isUpdating(): boolean;\n}\n\nexport type CheckoutSelectorFactory = (\n    state: CheckoutState,\n    billingAddress: BillingAddressSelector,\n    cart: CartSelector,\n    consignments: ConsignmentSelector,\n    coupons: CouponSelector,\n    customer: CustomerSelector,\n    giftCertificates: GiftCertificateSelector\n) => CheckoutSelector;\n\ninterface CheckoutSelectorDependencies {\n    billingAddress: BillingAddressSelector;\n    cart: CartSelector;\n    consignments: ConsignmentSelector;\n    coupons: CouponSelector;\n    customer: CustomerSelector;\n    giftCertificates: GiftCertificateSelector;\n}\n\nexport function createCheckoutSelectorFactory(): CheckoutSelectorFactory {\n    const getCheckout = createSelector(\n        (state: CheckoutState) => state.data,\n        (_: CheckoutState, { billingAddress }: CheckoutSelectorDependencies) => billingAddress.getBillingAddress,\n        (_: CheckoutState, { cart }: CheckoutSelectorDependencies) => cart.getCart,\n        (_: CheckoutState, { customer }: CheckoutSelectorDependencies) => customer.getCustomer,\n        (_: CheckoutState, { consignments }: CheckoutSelectorDependencies) => consignments.getConsignments,\n        (_: CheckoutState, { coupons }: CheckoutSelectorDependencies) => coupons.getCoupons,\n        (_: CheckoutState, { giftCertificates }: CheckoutSelectorDependencies) => giftCertificates.getGiftCertificates,\n        (data, getBillingAddress, getCart, getCustomer, getConsignments, getCoupons, getGiftCertificates) => () => {\n            const billingAddress = getBillingAddress();\n            const cart = getCart();\n            const customer = getCustomer();\n            const consignments = getConsignments() || [];\n            const coupons = getCoupons() || [];\n            const giftCertificates = getGiftCertificates() || [];\n\n            if (!data || !cart || !customer) {\n                return;\n            }\n\n            return {\n                ...data,\n                billingAddress,\n                cart,\n                customer,\n                consignments,\n                coupons,\n                giftCertificates,\n            };\n        }\n    );\n\n    const getCheckoutOrThrow = createSelector(\n        getCheckout,\n        getCheckout => () => {\n            return guard(getCheckout(), () => new MissingDataError(MissingDataErrorType.MissingCheckout));\n        }\n    );\n\n    const getOutstandingBalance = createSelector(\n        getCheckout,\n        getCheckout => (useStoreCredit?: boolean) => {\n            const checkout = getCheckout();\n\n            if (!checkout) {\n                return;\n            }\n\n            const grandTotal = checkout.grandTotal || 0;\n            const storeCredit = checkout.customer.storeCredit || 0;\n\n            return useStoreCredit ? Math.max(grandTotal - storeCredit, 0) : checkout.outstandingBalance;\n        }\n    );\n\n    const getLoadError = createSelector(\n        (state: CheckoutState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const getUpdateError = createSelector(\n        (state: CheckoutState) => state.errors.updateError,\n        error => () => error\n    );\n\n    const isExecutingSpamCheck = createSelector(\n        (state: CheckoutState) => state.statuses.isExecutingSpamCheck,\n        isExecutingSpamCheck => () => isExecutingSpamCheck === true\n    );\n\n    const isLoading = createSelector(\n        (state: CheckoutState) => state.statuses.isLoading,\n        isLoading => () => isLoading === true\n    );\n\n    const isUpdating = createSelector(\n        (state: CheckoutState) => state.statuses.isUpdating,\n        isUpdating => () => isUpdating === true\n    );\n\n    return memoizeOne((\n        state: CheckoutState = DEFAULT_STATE,\n        billingAddress: BillingAddressSelector,\n        cart: CartSelector,\n        consignments: ConsignmentSelector,\n        coupons: CouponSelector,\n        customer: CustomerSelector,\n        giftCertificates: GiftCertificateSelector\n    ): CheckoutSelector => {\n        return {\n            getCheckout: getCheckout(state, {\n                billingAddress,\n                cart,\n                consignments,\n                coupons,\n                customer,\n                giftCertificates,\n            }),\n            getCheckoutOrThrow: getCheckoutOrThrow(state, {\n                billingAddress,\n                cart,\n                consignments,\n                coupons,\n                customer,\n                giftCertificates,\n            }),\n            getOutstandingBalance: getOutstandingBalance(state, {\n                billingAddress,\n                cart,\n                consignments,\n                coupons,\n                customer,\n                giftCertificates,\n            }),\n            getLoadError: getLoadError(state),\n            getUpdateError: getUpdateError(state),\n            isExecutingSpamCheck: isExecutingSpamCheck(state),\n            isLoading: isLoading(state),\n            isUpdating: isUpdating(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { BillingAddressSelector } from '../billing';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\nimport { CouponSelector } from '../coupon';\n\nimport Order from './order';\nimport OrderState, { DEFAULT_STATE, OrderMetaState } from './order-state';\n\nexport default interface OrderSelector {\n    getOrder(): Order | undefined;\n    getOrderOrThrow(): Order;\n    getOrderMeta(): OrderMetaState | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type OrderSelectorFactory = (\n    state: OrderState,\n    billingAddress: BillingAddressSelector,\n    coupons: CouponSelector\n) => OrderSelector;\n\ninterface OrderSelectorDependencies {\n    billingAddress: BillingAddressSelector;\n    coupons: CouponSelector;\n}\n\nexport function createOrderSelectorFactory(): OrderSelectorFactory {\n    const getOrder = createSelector(\n        (state: OrderState) => state.data,\n        (_: OrderState, { billingAddress }: OrderSelectorDependencies) => billingAddress.getBillingAddress(),\n        (_: OrderState, { coupons }: OrderSelectorDependencies) => coupons.getCoupons(),\n        (data, billingAddress, coupons = []) => () => {\n            if (!data || !billingAddress) {\n                return;\n            }\n\n            return {\n                ...data,\n                billingAddress,\n                coupons,\n            };\n        }\n    );\n\n    const getOrderOrThrow = createSelector(\n        getOrder,\n        getOrder => () => {\n            return guard(getOrder(), () => new MissingDataError(MissingDataErrorType.MissingOrder));\n        }\n    );\n\n    const getOrderMeta = createSelector(\n        (state: OrderState) => state.meta,\n        meta => () => meta\n    );\n\n    const getLoadError = createSelector(\n        (state: OrderState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: OrderState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: OrderState = DEFAULT_STATE,\n        billingAddress: BillingAddressSelector,\n        coupons: CouponSelector\n    ): OrderSelector => {\n        return {\n            getOrder: getOrder(state, { billingAddress, coupons }),\n            getOrderOrThrow: getOrderOrThrow(state, { billingAddress, coupons }),\n            getOrderMeta: getOrderMeta(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\n\nimport StoreCreditState, { DEFAULT_STATE } from './store-credit-state';\n\nexport default interface StoreCreditSelector {\n    getApplyError(): RequestError | undefined;\n    isApplying(): boolean;\n}\n\nexport type StoreCreditSelectorFactory = (state: StoreCreditState) => StoreCreditSelector;\n\nexport function createStoreCreditSelectorFactory(): StoreCreditSelectorFactory {\n    const getApplyError = createSelector(\n        (state: StoreCreditState) => state.errors.applyError,\n        error => () => error\n    );\n\n    const isApplying = createSelector(\n        (state: StoreCreditState) => !!state.statuses.isApplying,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: StoreCreditState = DEFAULT_STATE\n    ): StoreCreditSelector => {\n        return {\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n        };\n    });\n}\n","import { createDataStore } from '@bigcommerce/data-store';\n\nimport { createRequestErrorFactory } from '../common/error';\n\nimport CheckoutStore, { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport createActionTransformer from './create-action-transformer';\nimport createCheckoutStoreReducer from './create-checkout-store-reducer';\nimport { createInternalCheckoutSelectorsFactory } from './create-internal-checkout-selectors';\n\nexport default function createCheckoutStore(\n    initialState: Partial<CheckoutStoreState> = {},\n    options?: CheckoutStoreOptions\n): CheckoutStore {\n    const actionTransformer = createActionTransformer(createRequestErrorFactory());\n    const createInternalCheckoutSelectors = createInternalCheckoutSelectorsFactory();\n    const stateTransformer = (state: CheckoutStoreState) => createInternalCheckoutSelectors(state);\n\n    return createDataStore(\n        createCheckoutStoreReducer(),\n        initialState,\n        { actionTransformer, stateTransformer, ...options }\n    );\n}\n","import { Action } from '@bigcommerce/data-store';\nimport { from, Observable, Subscribable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { RequestErrorFactory } from '../common/error';\n\nexport default function createActionTransformer(\n    requestErrorFactory: RequestErrorFactory\n): (action: Subscribable<Action>) => Observable<Action> {\n    return action$ => from(action$).pipe(catchError<Action, never>(action => {\n        if (action instanceof Error || action.payload instanceof Error) {\n            throw action;\n        }\n\n        if (isResponse(action.payload)) {\n            const message = action.payload.body && action.payload.body.detail;\n\n            throw { ...action, payload: requestErrorFactory.createError(action.payload, message) };\n        }\n\n        throw action;\n    }));\n}\n\nfunction isResponse(object: any) {\n    if (!object || typeof object !== 'object') {\n        return false;\n    }\n\n    return ['body', 'headers', 'status', 'statusText'].every(key =>\n        object.hasOwnProperty(key)\n    );\n}\n","import { PaymentMethodInvalidError } from '../../payment/errors';\n\nimport { UnrecoverableError } from './errors';\nimport RequestErrorFactory from './request-error-factory';\n\nexport default function createRequestErrorFactory(): RequestErrorFactory {\n    const factory = new RequestErrorFactory();\n\n    const unrecoverableErrorTypes = [\n        'catalog_only',\n        'empty_cart',\n        'invalid_order_id',\n        'invalid_order_token',\n        'missing_order_token',\n        'missing_provider_token',\n        'missing_shipping_method',\n        'order_completion_error',\n        'order_could_not_be_finalized_error',\n        'order_create_failed',\n        'provider_fatal_error',\n        'provider_setup_error',\n        'stock_too_low',\n    ];\n\n    unrecoverableErrorTypes.forEach(type => {\n        factory.register(type, (response, message) => new UnrecoverableError(response, message));\n    });\n\n    factory.register('invalid_payment_provider', response => new PaymentMethodInvalidError(response));\n    factory.register('payment_config_not_found', response => new PaymentMethodInvalidError(response));\n\n    return factory;\n}\n","import { combineReducers, Action, Reducer } from '@bigcommerce/data-store';\n\nimport { billingAddressReducer } from '../billing';\nimport { cartReducer } from '../cart';\nimport { checkoutButtonReducer } from '../checkout-buttons';\nimport { configReducer } from '../config';\nimport { couponReducer, giftCertificateReducer } from '../coupon';\nimport { customerReducer, customerStrategyReducer } from '../customer';\nimport { countryReducer } from '../geography';\nimport { orderReducer } from '../order';\nimport { paymentMethodReducer, paymentReducer, paymentStrategyReducer } from '../payment';\nimport { instrumentReducer } from '../payment/instrument';\nimport { remoteCheckoutReducer } from '../remote-checkout';\nimport { consignmentReducer, shippingCountryReducer, shippingStrategyReducer } from '../shipping';\nimport { storeCreditReducer } from '../store-credit';\n\nimport checkoutReducer from './checkout-reducer';\nimport CheckoutStoreState from './checkout-store-state';\n\nexport default function createCheckoutStoreReducer(): Reducer<CheckoutStoreState, Action> {\n    return combineReducers({\n        billingAddress: billingAddressReducer,\n        cart: cartReducer,\n        checkout: checkoutReducer,\n        checkoutButton: checkoutButtonReducer,\n        config: configReducer,\n        consignments: consignmentReducer,\n        countries: countryReducer,\n        coupons: couponReducer,\n        customer: customerReducer,\n        customerStrategies: customerStrategyReducer,\n        giftCertificates: giftCertificateReducer,\n        instruments: instrumentReducer,\n        order: orderReducer,\n        payment: paymentReducer,\n        paymentMethods: paymentMethodReducer,\n        paymentStrategies: paymentStrategyReducer,\n        remoteCheckout: remoteCheckoutReducer,\n        shippingCountries: shippingCountryReducer,\n        shippingStrategies: shippingStrategyReducer,\n        storeCredit: storeCreditReducer,\n    });\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../../common/error';\nimport { RequestError } from '../../common/error/errors';\n\n/**\n * Throw this error when we are unable to retrieve a checkout object from the\n * server using the provided ID. It could be because the shopper does not have\n * permission to view the object, or the ID itself is invalid.\n */\nexport default class CheckoutNotAvailableError extends RequestError {\n    constructor(response: Response<InternalErrorResponseBody>) {\n        super(response, { message: response.body.title });\n\n        this.name = 'CheckoutNotAvailableError';\n        this.type = 'checkout_not_available';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { joinOrMergeIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nimport Checkout, { CheckoutRequestBody } from './checkout';\nimport CHECKOUT_DEFAULT_INCLUDES from './checkout-default-includes';\nimport CheckoutParams from './checkout-params';\nimport { CheckoutNotAvailableError } from './errors';\n\nexport default class CheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadCheckout(id: string, { params: { include } = {}, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.get(url, {\n            params: {\n                include: joinOrMergeIncludes(CHECKOUT_DEFAULT_INCLUDES, include),\n            },\n            headers,\n            timeout,\n        }).catch(error => {\n            if (error.status >= 400 && error.status < 500) {\n                throw new CheckoutNotAvailableError(error);\n            }\n\n            throw error;\n        });\n    }\n\n    updateCheckout(id: string, body: CheckoutRequestBody, { params: { include } = {}, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, {\n            params: {\n                include: joinOrMergeIncludes(CHECKOUT_DEFAULT_INCLUDES, include),\n            },\n            body,\n            headers,\n            timeout,\n        });\n    }\n}\n","export enum CheckoutIncludes {\n    AvailableShippingOptions = 'consignments.availableShippingOptions',\n    PhysicalItemsCategoryNames = 'cart.lineItems.physicalItems.categoryNames',\n    DigitalItemsCategoryNames = 'cart.lineItems.digitalItems.categoryNames',\n}\n\nexport default interface CheckoutParams {\n    include?: CheckoutIncludes[] | CheckoutIncludeParam;\n}\n\nexport type CheckoutIncludeParam = {\n    [key in CheckoutIncludes]?: boolean;\n};\n","import { memoize } from '@bigcommerce/memoize';\n\nimport { bindDecorator, isEqual, isPrivate, CacheKeyResolver } from '../utility';\n\n/**\n * Decorates a class by patching all of its methods to cache their return values\n * and return them if they are called again with the same set of parameters. The\n * decorator also binds all the methods to the calling instance so it can be\n * destructed.\n */\nexport default function selectorDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                selectorMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\nfunction selectorMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let resolver = new CacheKeyResolver();\n    let method = descriptor.value;\n    let memoizedMethod = memoize(method);\n\n    return bindDecorator(target, key, {\n        get() {\n            const value = ((...args: any[]) => {\n                const cachedValue = memoizedMethod.call(this, ...args);\n\n                if (resolver.getUsedCount(...args) === 1) {\n                    return cachedValue;\n                }\n\n                const newValue = method.call(this, ...args);\n\n                if (isEqual(newValue, cachedValue, { keyFilter: key => !isPrivate(key) })) {\n                    return cachedValue;\n                }\n\n                memoizedMethod.cache.set(resolver.getKey(...args), newValue);\n\n                return newValue;\n            }) as T;\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n        set(value) {\n            resolver = new CacheKeyResolver();\n            method = value;\n            memoizedMethod = memoize(method);\n        },\n    });\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\ntype Method = (...args: any[]) => any;\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonErrorSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    getInitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getInitializeError(methodId);\n    }\n\n    getDeinitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getDeinitializeError(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonStatusSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    isInitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isInitializing(methodId);\n    }\n\n    isDeinitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isDeinitializing(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\n\nimport CheckoutButtonErrorSelector from './checkout-button-error-selector';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStatusSelector from './checkout-button-status-selector';\n\nexport default function createCheckoutButtonSelectors(selectors: InternalCheckoutSelectors): CheckoutButtonSelectors {\n    const errors = new CheckoutButtonErrorSelector(selectors);\n    const statuses = new CheckoutButtonStatusSelector(selectors);\n\n    return {\n        errors,\n        statuses,\n    };\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../checkout';\nimport { isElementId, setUniqueElementId } from '../common/dom';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonSelectors from './create-checkout-button-selectors';\n\n@bind\nexport default class CheckoutButtonInitializer {\n    private _state: CheckoutButtonSelectors;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _buttonStrategyActionCreator: CheckoutButtonStrategyActionCreator\n    ) {\n        this._state = createCheckoutButtonSelectors(this._store.getState());\n\n        this._store.subscribe(state => {\n            this._state = createCheckoutButtonSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * state. You can query the state by calling any of its getter methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.errors.getInitializeButtonError());\n     * console.log(state.statuses.isInitializingButton());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutButtonSelectors {\n        return this._state;\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the current state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.statuses.isInitializingButton());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.errors.getInitializeButtonError();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.errors.getInitializeButtonError())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutButtonSelectors) => void,\n        ...filters: Array<(state: CheckoutButtonSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            state => state.checkoutButton.getState(),\n            ...filters.map(filter => (state: InternalCheckoutSelectors) => filter(createCheckoutButtonSelectors(state)))\n        );\n    }\n\n    /**\n     * Initializes the checkout button of a payment method.\n     *\n     * When the checkout button is initialized, it will be inserted into the DOM,\n     * ready to be interacted with by the customer.\n     *\n     * ```js\n     * initializer.initializeButton({\n     *     methodId: 'braintreepaypal',\n     *     containerId: 'checkoutButton',\n     *     braintreepaypal: {\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeButton(options: CheckoutButtonInitializeOptions): Promise<CheckoutButtonSelectors> {\n        const containerIds = isElementId(options.containerId) ?\n            [options.containerId] :\n            setUniqueElementId(options.containerId, `${options.methodId}-container`);\n\n        return Promise.all(\n            containerIds.map(containerId => {\n                const action = this._buttonStrategyActionCreator.initialize({ ...options, containerId });\n                const queueId = `checkoutButtonStrategy:${options.methodId}:${containerId}`;\n\n                return this._store.dispatch(action, { queueId });\n            })\n        )\n            .then(() => this.getState());\n    }\n\n    /**\n     * De-initializes the checkout button by performing any necessary clean-ups.\n     *\n     * ```js\n     * await service.deinitializeButton({\n     *     methodId: 'braintreepaypal',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeButton(options: CheckoutButtonOptions): Promise<CheckoutButtonSelectors> {\n        const action = this._buttonStrategyActionCreator.deinitialize(options);\n        const queueId = `checkoutButtonStrategy:${options.methodId}`;\n\n        return this._store.dispatch(action, { queueId })\n            .then(() => this.getState());\n    }\n}\n","enum CheckoutButtonMethodType {\n    BRAINTREE_PAYPAL = 'braintreepaypal',\n    BRAINTREE_PAYPAL_CREDIT = 'braintreepaypalcredit',\n    GOOGLEPAY_AUTHORIZENET = 'googlepayauthorizenet',\n    GOOGLEPAY_BRAINTREE = 'googlepaybraintree',\n    GOOGLEPAY_STRIPE = 'googlepaystripe',\n    MASTERPASS = 'masterpass',\n    PAYPALEXPRESS = 'paypalexpress',\n}\n\nexport default CheckoutButtonMethodType;\n","export default function isElementId(id: string): boolean {\n    return /^\\w[\\w\\-\\:\\.]*$/.test(id);\n}\n","import { uniqueId } from 'lodash';\n\nimport { InvalidArgumentError } from '../error/errors';\n\nexport default function setUniqueElementId(selector: string, idPrefix: string): string[] {\n    const containers = document.querySelectorAll(selector);\n\n    if (!containers.length) {\n        throw new InvalidArgumentError(`Unable to find any element with the specified selector: ${selector}`);\n    }\n\n    return Array.prototype.slice.call(containers)\n        .map((container: HTMLElement) => {\n            if (!container.id) {\n                container.id = uniqueId(idPrefix);\n            }\n\n            return container.id;\n        });\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator } from '../payment';\n\nimport { CheckoutButtonActionType, DeinitializeButtonAction, InitializeButtonAction } from './checkout-button-actions';\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport { CheckoutButtonStrategy } from './strategies';\n\nexport default class CheckoutButtonStrategyActionCreator {\n    constructor(\n        private _registry: Registry<CheckoutButtonStrategy>,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): ThunkAction<InitializeButtonAction, InternalCheckoutSelectors> {\n        return store => {\n            const meta = { methodId: options.methodId, containerId: options.containerId };\n\n            if (store.getState().checkoutButton.isInitialized(options.methodId, options.containerId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(CheckoutButtonActionType.InitializeButtonRequested, undefined, meta)),\n                this._paymentMethodActionCreator.loadPaymentMethod(options.methodId, { timeout: options.timeout, useCache: true }),\n                defer(() => this._registry.get(options.methodId).initialize(options)\n                    .then(() => createAction(CheckoutButtonActionType.InitializeButtonSucceeded, undefined, meta)))\n            ).pipe(\n                catchError(error => throwErrorAction(CheckoutButtonActionType.InitializeButtonFailed, error, meta))\n            );\n        };\n    }\n\n    deinitialize(options: CheckoutButtonOptions): ThunkAction<DeinitializeButtonAction, InternalCheckoutSelectors> {\n        return store => {\n            const meta = { methodId: options.methodId };\n\n            if (!store.getState().checkoutButton.isInitialized(options.methodId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(CheckoutButtonActionType.DeinitializeButtonRequested, undefined, meta)),\n                defer(() => this._registry.get(options.methodId).deinitialize()\n                    .then(() => createAction(CheckoutButtonActionType.DeinitializeButtonSucceeded, undefined, meta)))\n            ).pipe(\n                catchError(error => throwErrorAction(CheckoutButtonActionType.DeinitializeButtonFailed, error, meta))\n            );\n        };\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { Address, LegacyAddress } from '../../../address';\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { PaymentMethod } from '../../../payment';\nimport { BraintreeError, BraintreePaypalCheckout, BraintreeShippingAddressOverride, BraintreeSDKCreator, BraintreeTokenizePayload } from '../../../payment/strategies/braintree';\nimport { PaypalAuthorizeData, PaypalScriptLoader } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class BraintreePaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paypalCheckout?: BraintreePaypalCheckout;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _offerCredit: boolean = false\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = (this._offerCredit ? options.braintreepaypalcredit : options.braintreepaypal) || {};\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paymentMethod || !paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return Promise.all([\n            this._braintreeSDKCreator.getPaypalCheckout(),\n            this._paypalScriptLoader.loadPaypal(),\n        ])\n            .then(([paypalCheckout, paypal]) => {\n                this._paypalCheckout = paypalCheckout;\n\n                const allowedSources = [];\n                const disallowedSources = [];\n\n                if (paypalOptions.allowCredit) {\n                    allowedSources.push(paypal.FUNDING.CREDIT);\n                } else {\n                    disallowedSources.push(paypal.FUNDING.CREDIT);\n                }\n\n                return paypal.Button.render({\n                    env: paymentMethod.config.testMode ? 'sandbox' : 'production',\n                    commit: paypalOptions.shouldProcessPayment ? true : false,\n                    funding: {\n                        allowed: allowedSources,\n                        disallowed: disallowedSources,\n                    },\n                    style: {\n                        shape: 'rect',\n                        label: this._offerCredit ? 'credit' : undefined,\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: () => this._setupPayment(paypalOptions.shippingAddress, paypalOptions.onPaymentError),\n                    onAuthorize: data => this._tokenizePayment(data, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, options.containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paypalCheckout = undefined;\n        this._paymentMethod = undefined;\n\n        this._braintreeSDKCreator.teardown();\n\n        return Promise.resolve();\n    }\n\n    private _setupPayment(\n        address?: Address | null,\n        onError?: (error: BraintreeError | StandardError) => void\n    ): Promise<string> {\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const checkout = state.checkout.getCheckout();\n                const config = state.config.getStoreConfig();\n                const customer = state.customer.getCustomer();\n                const shippingAddress = address === undefined ?\n                    customer && customer.addresses && customer.addresses[0] :\n                    address;\n\n                if (!this._paypalCheckout) {\n                    throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                return this._paypalCheckout.createPayment({\n                    flow: 'checkout',\n                    enableShippingAddress: true,\n                    shippingAddressEditable: false,\n                    shippingAddressOverride: shippingAddress ? this._mapToBraintreeAddress(shippingAddress) : undefined,\n                    amount: checkout.outstandingBalance,\n                    currency: config.currency.code,\n                    offerCredit: this._offerCredit,\n                });\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        shouldProcessPayment?: boolean,\n        onError?: (error: BraintreeError | StandardError) => void\n    ): Promise<BraintreeTokenizePayload> {\n        if (!this._paypalCheckout || !this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return Promise.all([\n            this._paypalCheckout.tokenizePayment(data),\n            this._braintreeSDKCreator.getDataCollector({ paypal: true }),\n        ])\n            .then(([payload, { deviceData }]) => {\n                this._formPoster.postForm('/checkout.php', {\n                    payment_type: 'paypal',\n                    provider: methodId,\n                    action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                    nonce: payload.nonce,\n                    device_data: deviceData,\n                    shipping_address: JSON.stringify(this._mapToLegacyShippingAddress(payload)),\n                    billing_address: JSON.stringify(this._mapToLegacyBillingAddress(payload)),\n                });\n\n                return payload;\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _mapToLegacyShippingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const shippingAddress = payload.details.shippingAddress;\n        const recipientName = shippingAddress && shippingAddress.recipientName || '';\n        const [firstName, lastName] = recipientName.split(' ');\n\n        return {\n            email: payload.details.email,\n            first_name: firstName,\n            last_name: lastName,\n            phone_number: payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToLegacyBillingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const billingAddress = payload.details.billingAddress;\n        const shippingAddress = payload.details.shippingAddress;\n\n        if (billingAddress) {\n            return {\n                email: payload.details.email,\n                first_name: payload.details.firstName,\n                last_name: payload.details.lastName,\n                phone_number: payload.details.phone,\n                address_line_1: billingAddress.line1,\n                address_line_2: billingAddress.line2,\n                city: billingAddress.city,\n                state: billingAddress.state,\n                country_code: billingAddress.countryCode,\n                postal_code: billingAddress.postalCode,\n            };\n        }\n\n        return {\n            email: payload.details.email,\n            first_name: payload.details.firstName,\n            last_name: payload.details.lastName,\n            phone_number: payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToBraintreeAddress(address: Address): BraintreeShippingAddressOverride {\n        return {\n            line1: address.address1,\n            line2: address.address2,\n            city: address.city,\n            state: address.stateOrProvinceCode,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phone,\n            recipientName: `${address.firstName} ${address.lastName}`,\n        };\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class GooglePayButtonStrategy implements CheckoutButtonStrategy {\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _formPoster: FormPoster,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        this._methodId = methodId;\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(() => this._googlePayPaymentProcessor.initialize(this._getMethodId()))\n            .then(() => {\n                this._walletButton = this._createSignInButton(containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.getElementById(containerId);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const googlePayButton = this._googlePayPaymentProcessor.createButton(this._handleWalletButtonClick);\n\n        container.appendChild(googlePayButton);\n\n        return googlePayButton;\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        return this._googlePayPaymentProcessor.displayWallet()\n            .then(paymentData => this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => {\n                if (paymentData.shippingAddress) {\n                    this._googlePayPaymentProcessor.updateShippingAddress(paymentData.shippingAddress);\n                }\n            }))\n            .then(() => this._onPaymentSelectComplete())\n            .catch(error => this._onError(error));\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n\n    private _onError(error?: Error): void {\n        if (error && error.message !== 'CANCELED') {\n            throw error;\n        }\n    }\n}\n","import { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { getCallbackUrl, Masterpass, MasterpassCheckoutOptions, MasterpassScriptLoader } from '../../../payment/strategies/masterpass';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class MasterpassButtonStrategy implements CheckoutButtonStrategy {\n    private _masterpassClient?: Masterpass;\n    private _methodId?: string;\n    private _signInButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        this._methodId = methodId;\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod || !paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._masterpassScriptLoader.load(paymentMethod.config.testMode);\n            })\n            .then(masterpass => {\n                this._masterpassClient = masterpass;\n                this._signInButton = this._createSignInButton(containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.removeEventListener('click', this._handleWalletButtonClick);\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return Promise.resolve();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const buttonContainer = document.getElementById(containerId);\n\n        if (!buttonContainer) {\n            throw new Error('Need a container to place the button');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        buttonContainer.appendChild(button);\n\n        button.addEventListener('click', this._handleWalletButtonClick);\n\n        return button;\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const paymentMethod = this._methodId ? state.paymentMethods.getPaymentMethod(this._methodId) : null;\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.cart.cartAmount.toString(),\n            currency: checkout.cart.currency.code,\n            cartId: checkout.cart.id,\n            suppressShippingAddress: false,\n            callbackUrl: getCallbackUrl('cart'),\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(): void {\n        if (!this._masterpassClient) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        this._masterpassClient.checkout(this._createMasterpassPayload());\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { INTERNAL_USE_ONLY } from '../../../common/http-request';\nimport { PaymentMethod } from '../../../payment';\nimport { PaypalActions, PaypalAuthorizeData, PaypalClientToken, PaypalScriptLoader } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class PaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _host: string = ''\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = options.paypal;\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paypalOptions) {\n            throw new InvalidArgumentError();\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._paypalScriptLoader.loadPaypal(paymentMethod.config.merchantId)\n            .then(paypal => {\n                if (!paymentMethod || !paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const merchantId = paymentMethod.config.merchantId;\n                const env = paymentMethod.config.testMode ? 'sandbox' : 'production';\n                const clientToken: PaypalClientToken = { [env]: paypalOptions.clientId };\n\n                const allowedSources = [];\n                const disallowedSources = [];\n\n                if (paypalOptions.allowCredit) {\n                    allowedSources.push(paypal.FUNDING.CREDIT);\n                } else {\n                    disallowedSources.push(paypal.FUNDING.CREDIT);\n                }\n\n                return paypal.Button.render({\n                    env,\n                    client: clientToken,\n                    commit: paypalOptions.shouldProcessPayment,\n                    funding: {\n                        allowed: allowedSources,\n                        disallowed: disallowedSources,\n                    },\n                    style: {\n                        shape: 'rect',\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: (_, actions) => this._setupPayment(merchantId, actions, paypalOptions.onPaymentError),\n                    onAuthorize: (data, actions) => this._tokenizePayment(data, actions, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, options.containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve();\n    }\n\n    private _setupPayment(merchantId: string, actions?: PaypalActions, onError?: (error: StandardError) => void): Promise<string> {\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const cart = state.cart.getCart();\n                const cartId = cart ? cart.id : '';\n\n                return actions.request.post(`${this._host}/api/storefront/payment/paypalexpress`, { merchantId, cartId }, {\n                    headers: {\n                        'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                    },\n                });\n            })\n            .then(res => res.id)\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        actions?: PaypalActions,\n        shouldProcessPayment?: boolean,\n        _onError?: (error: StandardError) => void // FIXME: This parameter seems to be unused\n    ): Promise<void> {\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!data.paymentID || !data.payerID) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return actions.payment.get(data.paymentID).then(payload => {\n            this._formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                paymentId: data.paymentID,\n                payerId: data.payerID,\n                payerInfo: JSON.stringify(payload.payer.payer_info),\n            });\n        });\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { createCheckoutStore } from '../checkout';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\n\nimport CheckoutButtonInitializer from './checkout-button-initializer';\nimport CheckoutButtonInitializerOptions from './checkout-button-initializer-options';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonRegistry from './create-checkout-button-registry';\n\n/**\n * Creates an instance of `CheckoutButtonInitializer`.\n *\n * @remarks\n * ```js\n * const initializer = createCheckoutButtonInitializer();\n *\n * initializer.initializeButton({\n *     methodId: 'braintreepaypal',\n *     braintreepaypal: {\n *         container: '#checkoutButton',\n *     },\n * });\n * ```\n *\n * @alpha\n * Please note that `CheckoutButtonInitializer` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutButtonInitializer`.\n */\nexport default function createCheckoutButtonInitializer(\n    options?: CheckoutButtonInitializerOptions\n): CheckoutButtonInitializer {\n    const host = options && options.host;\n    const store = createCheckoutStore();\n    const requestSender = createRequestSender({ host });\n    const formPoster = createFormPoster({ host });\n\n    return new CheckoutButtonInitializer(\n        store,\n        new CheckoutButtonStrategyActionCreator(\n            createCheckoutButtonRegistry(store, requestSender, formPoster, host),\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender))\n        )\n    );\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { BraintreeScriptLoader, BraintreeSDKCreator } from '../payment/strategies/braintree';\nimport { createGooglePayPaymentProcessor, GooglePayAuthorizeNetInitializer, GooglePayBraintreeInitializer, GooglePayStripeInitializer } from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { PaypalScriptLoader } from '../payment/strategies/paypal';\n\nimport { CheckoutButtonMethodType, CheckoutButtonStrategy } from './strategies';\nimport { BraintreePaypalButtonStrategy } from './strategies/braintree';\nimport { GooglePayButtonStrategy } from './strategies/googlepay';\nimport { MasterpassButtonStrategy } from './strategies/masterpass';\nimport { PaypalButtonStrategy } from './strategies/paypal';\n\nexport default function createCheckoutButtonRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender,\n    formPoster: FormPoster,\n    host?: string\n): Registry<CheckoutButtonStrategy, CheckoutButtonMethodType> {\n    const registry = new Registry<CheckoutButtonStrategy, CheckoutButtonMethodType>();\n    const scriptLoader = getScriptLoader();\n    const checkoutActionCreator = new CheckoutActionCreator(\n        new CheckoutRequestSender(requestSender),\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            formPoster\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL_CREDIT, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            formPoster,\n            true\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.MASTERPASS, () =>\n        new MasterpassButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        ));\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_AUTHORIZENET, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayAuthorizeNetInitializer()\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_BRAINTREE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_STRIPE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.PAYPALEXPRESS, () =>\n        new PaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new PaypalScriptLoader(scriptLoader),\n            formPoster,\n            host\n        )\n    );\n\n    return registry;\n}\n","export interface RootCacheKeyMap {\n    maps: ChildCacheKeyMap[];\n}\n\nexport interface IntermediateCacheKeyMap {\n    maps: ChildCacheKeyMap[];\n    parentMap: RootCacheKeyMap | IntermediateCacheKeyMap;\n    usedCount: number;\n    value: any;\n}\n\nexport interface TerminalCacheKeyMap extends IntermediateCacheKeyMap {\n    cacheKey: string;\n}\n\nexport type ChildCacheKeyMap = IntermediateCacheKeyMap | TerminalCacheKeyMap;\n\nexport function isTerminalCacheKeyMap(map: ChildCacheKeyMap): map is TerminalCacheKeyMap {\n    return map.hasOwnProperty('cacheKey');\n}\n\nexport function isRootCacheKeyMap(map: RootCacheKeyMap | ChildCacheKeyMap): map is RootCacheKeyMap {\n    return map.hasOwnProperty('parentMap');\n}\n","import { noop } from 'lodash';\nimport shallowEqual from 'shallowequal';\n\nimport { isRootCacheKeyMap, isTerminalCacheKeyMap, ChildCacheKeyMap, IntermediateCacheKeyMap, RootCacheKeyMap, TerminalCacheKeyMap } from './cache-key-maps';\n\nexport interface CacheKeyResolverOptions {\n    maxSize?: number;\n    onExpire?(key: string): void;\n    isEqual?(valueA: any, valueB: any): boolean;\n}\n\ninterface ResolveResult {\n    index: number;\n    parentMap: RootCacheKeyMap | IntermediateCacheKeyMap;\n    map?: TerminalCacheKeyMap;\n}\n\nexport default class CacheKeyResolver {\n    private _lastId = 0;\n    private _map: RootCacheKeyMap = { maps: [] };\n    private _usedMaps: TerminalCacheKeyMap[] = [];\n    private _options: Required<CacheKeyResolverOptions>;\n\n    constructor(options?: CacheKeyResolverOptions) {\n        this._options = {\n            maxSize: 0,\n            isEqual: shallowEqual,\n            onExpire: noop,\n            ...options,\n        };\n    }\n\n    getKey(...args: any[]): string {\n        const result = this._resolveMap(...args);\n        const { index, parentMap } = result;\n        let { map } = result;\n\n        if (map && map.cacheKey) {\n            map.usedCount++;\n        } else {\n            map = this._generateMap(parentMap, args.slice(index));\n        }\n\n        // Keep track of the least used map so we can remove it if the size of\n        // the stack exceeds the maximum size.\n        this._removeLeastUsedMap(map);\n\n        return map.cacheKey;\n    }\n\n    getUsedCount(...args: any[]): number {\n        const { map } = this._resolveMap(...args);\n\n        return map ? map.usedCount : 0;\n    }\n\n    private _resolveMap(...args: any[]): ResolveResult {\n        let index = 0;\n        let parentMap = this._map;\n\n        // Traverse the tree to find the linked list of maps that match the\n        // arguments of the call. Each intermediate or terminal map contains a\n        // value that could be used to match with the arguments. The last map in\n        // the list (the terminal) should contain a cache key. If it can does\n        // not exist, we will return a falsy value so that the caller could\n        // handle and generate a new cache key.\n        while (parentMap.maps.length) {\n            let isMatched = false;\n\n            for (let mapIndex = 0; mapIndex < parentMap.maps.length; mapIndex++) {\n                const map = parentMap.maps[mapIndex];\n\n                if (!this._options.isEqual(map.value, args[index])) {\n                    continue;\n                }\n\n                // Move the most recently used map to the top of the stack for\n                // quicker access\n                parentMap.maps.unshift(...parentMap.maps.splice(mapIndex, 1));\n\n                if ((args.length === 0 || index === args.length - 1) && isTerminalCacheKeyMap(map)) {\n                    return { index, map, parentMap };\n                }\n\n                isMatched = true;\n                parentMap = map;\n                index++;\n\n                break;\n            }\n\n            if (!isMatched) {\n                break;\n            }\n        }\n\n        return { index, parentMap };\n    }\n\n    private _generateMap(parent: RootCacheKeyMap | IntermediateCacheKeyMap, args: any[]): TerminalCacheKeyMap {\n        let index = 0;\n        let parentMap = parent;\n        let map: IntermediateCacheKeyMap;\n\n        do {\n            map = {\n                maps: [],\n                parentMap,\n                usedCount: 1,\n                value: args[index],\n            };\n\n            // Continue to build the tree of maps so that it could be resolved\n            // next time when the function is called with the same set of\n            // arguments.\n            parentMap.maps.unshift(map);\n\n            parentMap = map;\n            index++;\n        } while (index < args.length);\n\n        const terminalMap = map as TerminalCacheKeyMap;\n\n        terminalMap.cacheKey = `${++this._lastId}`;\n\n        return terminalMap;\n    }\n\n    private _removeLeastUsedMap(recentlyUsedMap: TerminalCacheKeyMap): void {\n        if (!this._options.maxSize) {\n            return;\n        }\n\n        const index = this._usedMaps.indexOf(recentlyUsedMap);\n\n        this._usedMaps.splice(\n            index === -1 ? 0 : index,\n            index === -1 ? 0 : 1,\n            recentlyUsedMap\n        );\n\n        if (this._usedMaps.length <= this._options.maxSize) {\n            return;\n        }\n\n        const map = this._usedMaps.pop();\n\n        if (!map) {\n            return;\n        }\n\n        this._removeMap(map);\n        this._options.onExpire(map.cacheKey);\n    }\n\n    private _removeMap(map: ChildCacheKeyMap): void {\n        if (!map.parentMap) {\n            return;\n        }\n\n        map.parentMap.maps.splice(map.parentMap.maps.indexOf(map), 1);\n\n        if (isRootCacheKeyMap(map.parentMap)) {\n            return;\n        }\n\n        this._removeMap(map.parentMap);\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { PaymentErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromPaymentErrorResponse(\n    response: Response<PaymentErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || message,\n        errors,\n    });\n}\n\nfunction joinErrors(errors: Array<{ code: string; message?: string }>): string | undefined {\n    if (!Array.isArray(errors)) {\n        return;\n    }\n\n    return errors.reduce((result: string[], error) => {\n        if (error && error.message) {\n            return [...result, error.message];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * Throw this error if a request fails to complete within its required timeframe\n * because of a network issue.\n */\nexport default class TimeoutError extends RequestError<{}> {\n    constructor(response?: Response) {\n        super(response, {\n            message: 'The request has timed out or aborted.',\n        });\n\n        this.name = 'TimeoutError';\n        this.type = 'timeout';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { RequestError } from '../../common/error/errors';\n\n/**\n * Throw this error if we are unable to successfully submit a server request\n * using a payment method because the method has invalid configuration or is in\n * an invalid state.\n */\nexport default class PaymentMethodInvalidError extends RequestError {\n    constructor(response?: Response) {\n        super(response, { message: 'There is a problem processing your payment. Please try again later.' });\n\n        this.name = 'PaymentMethodInvalidError';\n        this.type = 'payment_method_invalid';\n    }\n}\n","import { createSelector as defaultSelectorCreator } from 'reselect';\n\nimport withMemoizedCombiner from './with-memoized-combiner';\n\n/**\n * This is a decorated version of Reselect's default `createSelector` function.\n * If the return value of the combiner function is a function, it will create a\n * memorized version of that function and return it instead.\n */\nexport default withMemoizedCombiner(defaultSelectorCreator);\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { cachableAction, ActionOptions } from '../common/data-store';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ConfigRequestSender } from '.';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\n\nexport default class ConfigActionCreator {\n    constructor(\n        private _configRequestSender: ConfigRequestSender\n    ) {}\n\n    @cachableAction\n    loadConfig(options?: RequestOptions & ActionOptions): Observable<LoadConfigAction> {\n        return Observable.create((observer: Observer<LoadConfigAction>) => {\n            observer.next(createAction(ConfigActionType.LoadConfigRequested));\n\n            this._configRequestSender.loadConfig(options)\n                .then(response => {\n                    observer.next(createAction(ConfigActionType.LoadConfigSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConfigActionType.LoadConfigFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport Config from './config';\n\nexport default class ConfigRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadConfig({ timeout }: RequestOptions = {}): Promise<Response<Config>> {\n        const url = '/api/storefront/checkout-settings';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../address';\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { BillingAddressUpdateRequestBody } from './billing-address';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class BillingAddressRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createAddress(checkoutId: string, address: Partial<AddressRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: address, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateAddress(checkoutId: string, address: Partial<BillingAddressUpdateRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = address;\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nexport default class Registry<T, K extends string = string> {\n    private _factories: { [key: string]: Factory<T> };\n    private _instances: { [key: string]: T };\n    private _options: RegistryOptions;\n\n    constructor(options?: RegistryOptions) {\n        this._factories = {};\n        this._instances = {};\n        this._options = { defaultToken: 'default', ...options };\n    }\n\n    get(token?: K, cacheToken?: string): T {\n        try {\n            return this._getInstance(\n                token || this._options.defaultToken,\n                cacheToken || token || this._options.defaultToken\n            );\n        } catch (error) {\n            return this._getInstance(\n                this._options.defaultToken,\n                cacheToken || this._options.defaultToken\n            );\n        }\n    }\n\n    register(token: K, factory: Factory<T>): void {\n        if (this._hasFactory(token)) {\n            throw new InvalidArgumentError(`'${token}' is already registered.`);\n        }\n\n        this._factories[token] = factory;\n    }\n\n    protected _hasFactory(token: string): boolean {\n        return !!this._factories[token];\n    }\n\n    private _hasInstance(token: string): boolean {\n        return !!this._instances[token];\n    }\n\n    private _getInstance(token: string, cacheToken: string): T {\n        if (!this._hasInstance(cacheToken)) {\n            const factory = this._factories[token];\n\n            if (!factory) {\n                throw new InvalidArgumentError(`'${token}' is not registered.`);\n            }\n\n            this._instances[cacheToken] = factory();\n        }\n\n        return this._instances[cacheToken];\n    }\n}\n\nexport type Factory<T> = () => T;\n\nexport interface RegistryOptions {\n    defaultToken: string;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { Masterpass, MasterpassHostWindow } from './masterpass';\n\nexport default class MasterpassScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: MasterpassHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<Masterpass> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox.' : ''}masterpass.com/integration/merchant.js`)\n            .then(() => {\n                if (!this._window.masterpass) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.masterpass;\n            });\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if we are unable to synchronize the checkout details of a\n * shopper with a hosted / remote checkout provider (i.e.: Amazon).\n */\nexport default class RemoteCheckoutSynchronizationError extends StandardError {\n    constructor(\n        public error?: Error\n    ) {\n        super('Unable to synchronize your checkout details with a third party provider. Please try again later.');\n\n        this.name = 'RemoteCheckoutSynchronizationError';\n        this.type = 'remote_checkout_synchronization';\n    }\n}\n","import { round } from 'lodash';\n\nimport { PaymentMethod } from '../..';\nimport { Checkout } from '../../../checkout';\n\nimport { GooglePaymentData, GooglePayInitializer, GooglePayPaymentDataRequestV2, TokenizationSpecification, TokenizePayload } from './googlepay';\n\nconst baseRequest = {\n    apiVersion: 2,\n    apiVersionMinor: 0,\n};\n\nexport default class GooglePayAuthorizeNetInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(\n            this._getGooglePaymentDataRequest(checkout, paymentMethod, hasShippingAddress)\n        );\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload {\n        const {\n            paymentMethodData: {\n                type,\n                tokenizationData: { token },\n                info: {\n                    cardNetwork: cardType,\n                    cardDetails: lastFour,\n                },\n            },\n        } = paymentData;\n\n        return {\n            type,\n            nonce: btoa(token),\n            details: {\n                cardType,\n                lastFour,\n            },\n        };\n    }\n\n    private _getGooglePaymentDataRequest(checkout: Checkout, paymentMethod: PaymentMethod, hasShippingAddress: boolean): GooglePayPaymentDataRequestV2 {\n        const {\n            outstandingBalance,\n            cart: {\n                currency: { code: currencyCode },\n            },\n        } = checkout;\n\n        const {\n            initializationData: {\n                paymentGatewayId: gatewayMerchantId,\n                googleMerchantName: merchantName,\n                googleMerchantId: merchantId,\n                platformToken: authJwt,\n            },\n            // supportedCards, // [\"VISA\", \"AMEX\", \"MC\"]\n        } = paymentMethod;\n\n        const paymentGatewaySpecification = this._getPaymentGatewaySpecification(gatewayMerchantId);\n        const cardPaymentMethod = this._getCardPaymentMethod(paymentGatewaySpecification);\n\n        return {\n            ...baseRequest,\n            allowedPaymentMethods: [cardPaymentMethod],\n            transactionInfo: {\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(outstandingBalance, 2).toFixed(2),\n                currencyCode,\n            },\n            merchantInfo : {\n                merchantName,\n                merchantId,\n                authJwt,\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n\n    private _getPaymentGatewaySpecification(gatewayMerchantId: string) {\n        return {\n            type: 'PAYMENT_GATEWAY',\n            parameters: {\n                gateway: 'authorizenet',\n                gatewayMerchantId,\n            },\n        };\n    }\n\n    private _getCardPaymentMethod(tokenizationSpecification: TokenizationSpecification) {\n        return {\n            type: 'CARD',\n            parameters: {\n                allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                allowedCardNetworks: ['AMEX', 'DISCOVER', 'JCB', 'MASTERCARD', 'VISA'],\n                billingAddressRequired: true,\n                billingAddressParameters: {\n                    format: 'FULL',\n                    phoneNumberRequired: true,\n                },\n            },\n            tokenizationSpecification,\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeSDKCreator, GooglePayBraintreeSDK } from '../braintree';\n\nimport { GooglePaymentData, GooglePayInitializer, GooglePayPaymentDataRequestV2, TokenizePayload } from './googlepay';\nimport { GooglePayBraintreeDataRequest, GooglePayBraintreePaymentDataRequestV1 } from './googlepay-braintree';\n\nexport default class GooglePayBraintreeInitializer implements GooglePayInitializer {\n    private _googlePaymentInstance!: GooglePayBraintreeSDK;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator\n    ) {}\n\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        if (!paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return this._braintreeSDKCreator.getGooglePaymentComponent()\n            .then(googleBraintreePaymentInstance => {\n                this._googlePaymentInstance = googleBraintreePaymentInstance;\n\n                return this._createGooglePayPayload(\n                    checkout,\n                    paymentMethod.initializationData,\n                    hasShippingAddress\n                );\n            });\n    }\n\n    teardown(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload {\n        const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token).androidPayCards[0];\n\n        return {\n            nonce: payload.nonce,\n            type: payload.type,\n            description: payload.description,\n            details: {\n                cardType: payload.details.cardType,\n                lastFour: payload.details.lastFour,\n                lastTwo: payload.details.lastTwo,\n            },\n            binData: payload.binData,\n        };\n    }\n\n    private _createGooglePayPayload(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        if (!initializationData.platformToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const googlePayBraintreePaymentDataRequest: GooglePayBraintreeDataRequest = {\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantName: initializationData.googleMerchantName,\n                merchantId: initializationData.googleMerchantId,\n            },\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.outstandingBalance, 2).toFixed(2),\n            },\n            cardRequirements: {\n                billingAddressRequired: true,\n                billingAddressFormat: 'FULL',\n            },\n            shippingAddressRequired: !hasShippingAddress,\n            emailRequired: true,\n            phoneNumberRequired: true,\n        };\n\n        return this._mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(\n            this._googlePaymentInstance.createPaymentDataRequest(googlePayBraintreePaymentDataRequest)\n        );\n    }\n\n    private _mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(googlePayBraintreeDataRequestV1: GooglePayBraintreePaymentDataRequestV1): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: googlePayBraintreeDataRequestV1.merchantInfo.authJwt,\n                merchantId: googlePayBraintreeDataRequestV1.merchantInfo.merchantId,\n                merchantName: googlePayBraintreeDataRequestV1.merchantInfo.merchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: googlePayBraintreeDataRequestV1.cardRequirements.allowedCardNetworks,\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: 'FULL',\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'braintree',\n                        'braintree:apiVersion': 'v1',\n                        'braintree:authorizationFingerprint': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:authorizationFingerprint'],\n                        'braintree:merchantId': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:merchantId'],\n                        'braintree:sdkVersion': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:sdkVersion'],\n                    },\n                },\n            }],\n            transactionInfo: googlePayBraintreeDataRequestV1.transactionInfo,\n            emailRequired: true,\n            shippingAddressRequired: googlePayBraintreeDataRequestV1.shippingAddressRequired,\n            shippingAddressParameters: {\n                phoneNumberRequired: googlePayBraintreeDataRequestV1.phoneNumberRequired,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { InvalidArgumentError } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\n\nimport { GooglePaymentData, GooglePayInitializer, GooglePayPaymentDataRequestV2, TokenizePayload } from './googlepay';\n\nexport default class GooglePayStripeInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(this._mapGooglePayStripeDataRequestToGooglePayDataRequestV2(\n            checkout,\n            paymentMethod.initializationData,\n            hasShippingAddress\n        ));\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload {\n        try {\n            const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token);\n\n            return {\n                nonce: payload.id,\n                type: payload.type,\n                details: {\n                    cardType: payload.card.brand,\n                    lastFour: payload.card.last4,\n                },\n            };\n        } catch (err) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n    }\n\n    private _mapGooglePayStripeDataRequestToGooglePayDataRequestV2(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantId: initializationData.googleMerchantId,\n                merchantName: initializationData.googleMerchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: ['AMEX', 'DISCOVER', 'JCB', 'MASTERCARD', 'VISA'],\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: 'FULL',\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'stripe',\n                        'stripe:version': initializationData.stripeVersion,\n                        'stripe:publishableKey': initializationData.stripePublishableKey,\n                    },\n                },\n            }],\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.outstandingBalance, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { LoadScriptOptions, ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalScriptLoader {\n    private _window: PaypalHostWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    async loadPaypal(merchantId: string = ''): Promise<PaypalSDK> {\n        const scriptSrc = '//www.paypalobjects.com/api/checkout.min.js';\n        const options: LoadScriptOptions = { async: true, attributes: { 'data-merchant-id': merchantId } };\n\n        merchantId\n            ? await this._scriptLoader.loadScript(scriptSrc, options)\n            : await this._scriptLoader.loadScript(scriptSrc);\n\n        if (!this._window.paypal) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._window.paypal;\n    }\n}\n","export { createTimeout } from '@bigcommerce/request-sender';\n\nexport { createCheckoutButtonInitializer } from '../checkout-buttons';\n","import { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeModuleCreator, GooglePayBraintreeSDK } from '../braintree';\n\nexport type EnvironmentType = 'PRODUCTION' | 'TEST';\ntype TokenizeType = 'AndroidPayCard' | 'CreditCard';\n\nexport interface GooglePayInitializer {\n    initialize(checkout: Checkout, paymentMethod: PaymentMethod, hasShippingAddress: boolean, publishableKey?: string): Promise<GooglePayPaymentDataRequestV2>;\n    teardown(): Promise<void>;\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload;\n}\n\nexport interface GooglePayCreator extends BraintreeModuleCreator<GooglePayBraintreeSDK> {}\n\nexport interface GooglePayPaymentOptions {\n    environment: EnvironmentType;\n}\n\nexport interface GooglePayIsReadyToPayResponse {\n    result: boolean;\n    paymentMethodPresend?: boolean;\n}\n\nexport interface GooglePaySDK {\n    payments: {\n        api: {\n            PaymentsClient: new(options: GooglePayPaymentOptions) => GooglePayClient;\n        };\n    };\n}\n\nexport interface GooglePayClient {\n    isReadyToPay(options: object): Promise<GooglePayIsReadyToPayResponse>;\n    loadPaymentData(paymentDataRequest: GooglePayPaymentDataRequestV2): Promise<GooglePaymentData>;\n    createButton(options: { [key: string]: string | object }): HTMLElement;\n}\n\nexport interface GooglePayHostWindow extends Window {\n    google?: GooglePaySDK;\n}\n\nexport interface TokenizePayload {\n    nonce: string;\n    details: {\n        cardType: string;\n        lastFour: string;\n        lastTwo?: string;\n    };\n    description?: string;\n    type: TokenizeType | string;\n    binData?: {\n        commercial: string;\n        countryOfIssuance: string;\n        debit: string;\n        durbinRegulated: string;\n        healthcare: string;\n        issuingBank: string;\n        payroll: string;\n        prepaid: string;\n        productId: string;\n    };\n}\n\nexport interface GooglePaymentData {\n    apiVersion: number;\n    apiVersionMinor: number;\n    paymentMethodData: {\n        description: string;\n        info: {\n            cardDetails: string;\n            cardNetwork: string;\n            billingAddress: GooglePayAddress;\n        };\n        tokenizationData: {\n            token: string;\n            type: string;\n        };\n        type: string;\n    };\n    shippingAddress: GooglePayAddress;\n    email: string;\n}\n\nexport interface GooglePayAddress {\n    address1: string;\n    address2: string;\n    address3: string;\n    administrativeArea: string;\n    companyName: string;\n    countryCode: string;\n    locality: string;\n    name: string;\n    postalCode: string;\n    sortingCode: string;\n    phoneNumber: string;\n}\n\nexport interface GooglePaymentsError {\n    statusCode: string;\n    statusMessage?: string;\n}\n\nexport interface PaymentMethodData {\n    methodId: string;\n    paymentData: {\n        method: string;\n        nonce: string;\n        cardInformation: {\n            type: string;\n            number: string;\n        };\n    };\n}\n\nexport enum ButtonType {\n    Long = 'long',\n    Short = 'short',\n}\nexport enum ButtonColor {\n    Default = 'default',\n    Black = 'black',\n    White = 'white',\n}\n\nexport interface TokenizationSpecification {\n    type: string;\n    parameters: {\n        gateway: string;\n        gatewayMerchantId?: string;\n        'braintree:apiVersion'?: string;\n        'braintree:clientKey'?: string;\n        'braintree:merchantId'?: string;\n        'braintree:sdkVersion'?: string;\n        'braintree:authorizationFingerprint'?: string;\n        'stripe:version'?: string;\n        'stripe:publishableKey'?: string;\n    };\n}\n\nexport interface GooglePayPaymentDataRequestV2 {\n    apiVersion: number;\n    apiVersionMinor: number;\n    merchantInfo: {\n        authJwt?: string;\n        merchantId?: string;\n        merchantName?: string;\n    };\n    allowedPaymentMethods: [{\n        type: string;\n        parameters: {\n            allowedAuthMethods: string[];\n            allowedCardNetworks: string[];\n            allowPrepaidCards?: boolean;\n            billingAddressRequired?: boolean;\n            billingAddressParameters?: {\n                format?: string;\n                phoneNumberRequired?: boolean;\n            };\n        };\n        tokenizationSpecification?: TokenizationSpecification;\n    }];\n    transactionInfo: {\n        currencyCode: string;\n        totalPriceStatus: string;\n        totalPrice?: string;\n        checkoutOption?: string;\n    };\n    emailRequired?: boolean;\n    shippingAddressRequired?: boolean;\n    shippingAddressParameters?: {\n        allowedCountryCodes?: string[];\n        phoneNumberRequired?: boolean;\n    };\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../../../address';\nimport { BillingAddressActionCreator, BillingAddressUpdateRequestBody } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport { ConsignmentActionCreator } from '../../../shipping';\nimport { PaymentMethodInvalidError } from '../../errors';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\n\nimport { ButtonColor, ButtonType, EnvironmentType, GooglePaymentData, GooglePayAddress, GooglePayClient, GooglePayInitializer, GooglePayPaymentDataRequestV2, GooglePaySDK, TokenizePayload } from './googlepay';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default class GooglePayPaymentProcessor {\n    private _googlePayClient?: GooglePayClient;\n    private _methodId?: string;\n    private _paymentDataRequest?: GooglePayPaymentDataRequestV2;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _googlePayScriptLoader: GooglePayScriptLoader,\n        private _googlePayInitializer: GooglePayInitializer,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _consigmentActionCreator: ConsignmentActionCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(methodId: string): Promise<void> {\n        this._methodId = methodId;\n\n        return this._configureWallet();\n    }\n\n    deinitialize(): Promise<void> {\n        return this._googlePayInitializer.teardown();\n    }\n\n    createButton(\n        onClick: (event: Event) => Promise<void>,\n        buttonType: ButtonType = ButtonType.Short,\n        buttonColor: ButtonColor = ButtonColor.Default\n    ): HTMLElement {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.createButton({\n            buttonColor,\n            buttonType,\n            onClick,\n        });\n    }\n\n    displayWallet(): Promise<GooglePaymentData> {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.loadPaymentData(this._getPaymentDataRequest());\n    }\n\n    handleSuccess(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        return this._postForm(this._googlePayInitializer.parseResponse(paymentData))\n            .then(() => this._updateBillingAddress(paymentData));\n    }\n\n    updateShippingAddress(shippingAddress: GooglePayAddress): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consigmentActionCreator.updateAddress(this._mapGooglePayAddressToShippingAddress(shippingAddress))\n        );\n    }\n\n    private _configureWallet(): Promise<void> {\n        const methodId = this._getMethodId();\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                const checkout = state.checkout.getCheckout();\n                const hasShippingAddress = !!state.shippingAddress.getShippingAddress();\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const { testMode } = paymentMethod.config;\n\n                return Promise.all([\n                    this._googlePayScriptLoader.load(),\n                    this._googlePayInitializer.initialize(checkout, paymentMethod, hasShippingAddress),\n                ]).then(([googlePay, paymentDataRequest]) => {\n                    this._googlePayClient = this._getGooglePayClient(googlePay, testMode);\n                    this._paymentDataRequest = paymentDataRequest;\n\n                    return this._googlePayClient.isReadyToPay({\n                        allowedPaymentMethods: [\n                            {\n                                type: paymentDataRequest.allowedPaymentMethods[0].type,\n                                parameters: {\n                                    allowedAuthMethods: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedAuthMethods,\n                                    allowedCardNetworks: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedCardNetworks,\n                                },\n                            },\n                        ],\n                        apiVersion: paymentDataRequest.apiVersion,\n                        apiVersionMinor: paymentDataRequest.apiVersionMinor,\n                    }).then(response => {\n                        if (response.result) {\n                            return;\n                        }\n\n                        throw new PaymentMethodInvalidError();\n                    });\n                });\n            });\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string; lastFour: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastFour,\n        };\n    }\n\n    private _getPaymentDataRequest(): GooglePayPaymentDataRequestV2 {\n        if (!this._paymentDataRequest) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._paymentDataRequest;\n    }\n\n    private _getGooglePayClient(google: GooglePaySDK, testMode?: boolean): GooglePayClient {\n        if (testMode === undefined) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const environment: EnvironmentType = testMode ? 'TEST' : 'PRODUCTION';\n\n        return new google.payments.api.PaymentsClient({ environment });\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    private _mapGooglePayAddressToBillingAddress(paymentData: GooglePaymentData, id: string): BillingAddressUpdateRequestBody {\n        return {\n            id,\n            firstName: paymentData.paymentMethodData.info.billingAddress.name.split(' ').slice(0, -1).join(' '),\n            lastName: paymentData.paymentMethodData.info.billingAddress.name.split(' ').slice(-1).join(' '),\n            company: paymentData.paymentMethodData.info.billingAddress.companyName,\n            address1: paymentData.paymentMethodData.info.billingAddress.address1,\n            address2: paymentData.paymentMethodData.info.billingAddress.address2 + paymentData.paymentMethodData.info.billingAddress.address3,\n            city: paymentData.paymentMethodData.info.billingAddress.locality,\n            stateOrProvince: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            stateOrProvinceCode: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            postalCode: paymentData.paymentMethodData.info.billingAddress.postalCode,\n            countryCode: paymentData.paymentMethodData.info.billingAddress.countryCode,\n            phone: paymentData.paymentMethodData.info.billingAddress.phoneNumber,\n            customFields: [],\n            email: paymentData.email,\n        };\n    }\n\n    private _mapGooglePayAddressToShippingAddress(address: GooglePayAddress): AddressRequestBody {\n        return {\n            firstName: address.name.split(' ').slice(0, -1).join(' '),\n            lastName: address.name.split(' ').slice(-1).join(' '),\n            company: address.companyName,\n            address1: address.address1,\n            address2: address.address2 + address.address3,\n            city: address.locality,\n            stateOrProvince: address.administrativeArea,\n            stateOrProvinceCode: address.administrativeArea,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phoneNumber,\n            customFields: [],\n        };\n    }\n\n    private _postForm(postPaymentData: TokenizePayload): Promise<Response<void>> {\n        const cardInformation = postPaymentData.details;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: {\n                payment_type: postPaymentData.type,\n                nonce: postPaymentData.nonce,\n                provider: this._getMethodId(),\n                action: 'set_external_checkout',\n                card_information: this._getCardInformation(cardInformation),\n            },\n        });\n    }\n\n    private _updateBillingAddress(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        const remoteBillingAddress = this._store.getState().billingAddress.getBillingAddress();\n\n        if (!remoteBillingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const googlePayAddressMapped = this._mapGooglePayAddressToBillingAddress(paymentData, remoteBillingAddress.id);\n\n        return this._store.dispatch(\n            this._billingAddressActionCreator.updateAddress(googlePayAddressMapped)\n        );\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { GooglePayHostWindow, GooglePaySDK } from './googlepay';\n\nexport default class GooglePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GooglePayHostWindow = window\n    ) {}\n\n    load(): Promise<GooglePaySDK> {\n        return this._scriptLoader\n            .loadScript('https://pay.google.com/gp/p/js/pay.js')\n            .then(() => {\n                if (!this._window.google) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.google;\n            });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../../../billing';\nimport { CheckoutRequestSender, CheckoutStore } from '../../../checkout';\nimport { CustomerRequestSender } from '../../../customer';\nimport { ConsignmentActionCreator, ConsignmentRequestSender } from '../../../shipping';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport PaymentMethodRequestSender from '../../payment-method-request-sender';\n\nimport { GooglePayInitializer } from './googlepay';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default function createGooglePayPaymentProcessor(store: CheckoutStore, initializer: GooglePayInitializer): GooglePayPaymentProcessor {\n    const requestSender = createRequestSender();\n    const scriptLoader = getScriptLoader();\n\n    return new GooglePayPaymentProcessor(\n        store,\n        new PaymentMethodActionCreator(\n            new PaymentMethodRequestSender(requestSender)\n        ),\n        new GooglePayScriptLoader(scriptLoader),\n        initializer,\n        new BillingAddressActionCreator(\n            new BillingAddressRequestSender(requestSender),\n            new CustomerRequestSender(requestSender)\n        ),\n        new ConsignmentActionCreator(\n            new ConsignmentRequestSender(requestSender),\n            new CheckoutRequestSender(requestSender)\n        ),\n        requestSender\n    );\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when a shopper tries to sign in as a guest but\n * they are already signed in as a registered customer.\n */\nexport default class UnableToContinueAsGuestError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to continue as a guest because the customer is already signed in.');\n\n        this.name = 'UnableToContinueAsGuestError';\n        this.type = 'unable_to_continue_as_guest';\n    }\n}\n","import { RequestError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when the customer fails to be updated\n */\nexport default class UpdateCustomerError extends RequestError {\n    constructor(response?: Response) {\n        super(response);\n\n        this.name = 'UpdateCustomerError';\n        this.type = 'update_customer';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Response } from '@bigcommerce/request-sender';\nimport { concat, defer, empty, merge, of, Observable, Observer } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { Checkout, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { CustomerAction, CustomerActionType, CustomerRequestSender, GuestCredentials } from '../customer';\n\nimport { BillingAddressRequestSender } from '.';\nimport { BillingAddressUpdateRequestBody } from './billing-address';\nimport { BillingAddressActionType, ContinueAsGuestAction, UpdateBillingAddressAction } from './billing-address-actions';\nimport { UnableToContinueAsGuestError, UpdateCustomerError } from './errors';\n\nexport default class BillingAddressActionCreator {\n    constructor(\n        private _requestSender: BillingAddressRequestSender,\n        private _customerRequestSender: CustomerRequestSender\n    ) {}\n\n    continueAsGuest(\n        credentials: GuestCredentials,\n        options?: RequestOptions\n    ): ThunkAction<ContinueAsGuestAction | CustomerAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const customer = state.customer.getCustomer();\n\n            if (customer && !customer.isGuest) {\n                throw new UnableToContinueAsGuestError();\n            }\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            let billingAddressRequestBody: Partial<BillingAddressUpdateRequestBody>;\n\n            if (!billingAddress) {\n                billingAddressRequestBody = credentials;\n            } else {\n                const { country, ...existingBillingAddressRequestBody } = billingAddress;\n\n                billingAddressRequestBody = {\n                    ...existingBillingAddressRequestBody,\n                    ...credentials,\n                };\n            }\n\n            return merge(\n                concat(\n                    of(createAction(BillingAddressActionType.ContinueAsGuestRequested)),\n                    defer(async () => {\n                        const { body } = await this._createOrUpdateBillingAddress(\n                            checkout.id,\n                            billingAddressRequestBody,\n                            options\n                        );\n\n                        return createAction(BillingAddressActionType.ContinueAsGuestSucceeded, body);\n                    })\n                ).pipe(\n                    catchError(error => throwErrorAction(BillingAddressActionType.ContinueAsGuestFailed, error))\n                ),\n                this._updateCustomerConsent(credentials, options)\n            );\n        };\n    }\n\n    updateAddress(\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): ThunkAction<UpdateBillingAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateBillingAddressAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(BillingAddressActionType.UpdateBillingAddressRequested));\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            // If email is not present in the address provided by the client, then\n            // fall back to the stored email as it could have been set separately\n            // using a convenience method. We can't rely on billingAddress having\n            // an ID to consider that there's a preexisting email, as billingAddress\n            // object from Order doesn't have an ID.\n            const billingAddressRequestBody = {\n                ...address,\n                email: typeof address.email === 'undefined' && billingAddress ? billingAddress.email : address.email,\n            };\n\n            if (billingAddress && billingAddress.id) {\n                billingAddressRequestBody.id = billingAddress.id;\n            }\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.UpdateBillingAddressSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.UpdateBillingAddressFailed, response));\n                });\n        });\n    }\n\n    private _updateCustomerConsent(\n        {\n            email,\n            marketingEmailConsent,\n        }: GuestCredentials,\n        options?: RequestOptions\n    ): Observable<CustomerAction> {\n        if (marketingEmailConsent === undefined || marketingEmailConsent === null) {\n            return empty();\n        }\n\n        return concat(\n            of(createAction(CustomerActionType.UpdateCustomerRequested)),\n            defer(async () => {\n                const { body } = await this._customerRequestSender.updateCustomer({\n                    email,\n                    acceptsMarketing: marketingEmailConsent,\n                }, options);\n\n                return createAction(CustomerActionType.UpdateCustomerSucceeded, body);\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(\n                CustomerActionType.UpdateCustomerFailed,\n                new UpdateCustomerError(error)\n            ))\n        );\n    }\n\n    private _createOrUpdateBillingAddress(\n        checkoutId: string,\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): Promise<Response<Checkout>> {\n        if (!address.id) {\n            return this._requestSender.createAddress(checkoutId, address, options);\n        }\n\n        return this._requestSender.updateAddress(checkoutId, address, options);\n    }\n}\n"],"sourceRoot":""}