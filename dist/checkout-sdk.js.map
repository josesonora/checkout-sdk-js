{"version":3,"sources":["webpack://checkoutKit/webpack/bootstrap","webpack://checkoutKit/external \"tslib\"","webpack://checkoutKit/external \"@bigcommerce/data-store\"","webpack://checkoutKit/external \"lodash\"","webpack://checkoutKit/./src/shipping/consignment-actions.ts","webpack://checkoutKit/external \"rxjs/Observable\"","webpack://checkoutKit/./src/shipping/shipping-strategy-actions.ts","webpack://checkoutKit/./src/coupon/coupon-actions.ts","webpack://checkoutKit/./src/billing/billing-address-actions.ts","webpack://checkoutKit/./src/coupon/gift-certificate-actions.ts","webpack://checkoutKit/./src/payment/payment-method-actions.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-action-types.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-actions.ts","webpack://checkoutKit/external \"rxjs/operators\"","webpack://checkoutKit/external \"rxjs/observable/concat\"","webpack://checkoutKit/external \"rxjs/observable/of\"","webpack://checkoutKit/./src/geography/country-action-creator.ts","webpack://checkoutKit/./src/geography/country-request-sender.ts","webpack://checkoutKit/./src/order/errors/order-finalization-not-required-error.ts","webpack://checkoutKit/./src/payment/payment-strategy-action-creator.ts","webpack://checkoutKit/./src/cart/errors/cart-changed-error.ts","webpack://checkoutKit/./src/checkout/checkout-validator.ts","webpack://checkoutKit/./src/payment/payment-strategy-registry.ts","webpack://checkoutKit/./src/payment/is-vaulted-instrument.ts","webpack://checkoutKit/./src/payment/strategies/square/square-form.ts","webpack://checkoutKit/./src/payment/payment-action-creator.ts","webpack://checkoutKit/./src/payment/payment-request-sender.ts","webpack://checkoutKit/./src/payment/errors/payment-argument-invalid-error.ts","webpack://checkoutKit/./src/payment/strategies/payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/afterpay/afterpay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/amazon-pay/amazon-pay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/credit-card-payment-strategy.ts","webpack://checkoutKit/./src/payment/errors/payment-method-cancelled-error.ts","webpack://checkoutKit/./src/payment/strategies/klarna/klarna-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/legacy-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/offline-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/offsite-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-pro-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-express-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/sage-pay-payment-strategy.ts","webpack://checkoutKit/./src/common/error/errors/unsupported-browser-error.ts","webpack://checkoutKit/./src/payment/strategies/square/square-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/no-payment-data-required-strategy.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-credit-card-payment-strategy.ts","webpack://checkoutKit/./src/payment/is-credit-card-like.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-paypal-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-visacheckout-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/wepay/wepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/afterpay/afterpay-script-loader.ts","webpack://checkoutKit/./src/common/utility/cancellable-promise.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-stripe-initializer.ts","webpack://checkoutKit/./src/payment/strategies/klarna/klarna-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/masterpass-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/square/square-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/wepay/wepay-risk-client.ts","webpack://checkoutKit/./src/payment/create-payment-strategy-registry.ts","webpack://checkoutKit/./src/payment/strategies/braintree/create-braintree-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/create-googlepay-stripe-payment-processor.ts","webpack://checkoutKit/./src/payment/instrument/instrument-action-creator.ts","webpack://checkoutKit/./src/common/date-time/is-future.ts","webpack://checkoutKit/./src/common/date-time/add-minutes.ts","webpack://checkoutKit/./src/payment/instrument/instrument-response-transformer.ts","webpack://checkoutKit/./src/payment/instrument/instrument-request-sender.ts","webpack://checkoutKit/./src/checkout/checkout-store-selector.ts","webpack://checkoutKit/./src/checkout/checkout-store-error-selector.ts","webpack://checkoutKit/./src/checkout/checkout-store-status-selector.ts","webpack://checkoutKit/./src/checkout/create-checkout-selectors.ts","webpack://checkoutKit/./src/common/error/error-message-transformer.ts","webpack://checkoutKit/./src/common/utility/to-single-line.ts","webpack://checkoutKit/./src/checkout/checkout-service.ts","webpack://checkoutKit/./src/checkout/create-checkout-service-error-transformer.ts","webpack://checkoutKit/./src/checkout/create-checkout-service.ts","webpack://checkoutKit/./src/payment/create-payment-client.ts","webpack://checkoutKit/./src/config/config-actions.ts","webpack://checkoutKit/external \"rxjs/observable/defer\"","webpack://checkoutKit/./src/payment/payment-status-types.ts","webpack://checkoutKit/./src/common/error/errors/standard-error.ts","webpack://checkoutKit/./src/common/utility/set-prototype-of.ts","webpack://checkoutKit/external \"@bigcommerce/request-sender\"","webpack://checkoutKit/external \"@bigcommerce/script-loader\"","webpack://checkoutKit/external \"rxjs/observable/from\"","webpack://checkoutKit/./src/payment/payment-strategy-state.ts","webpack://checkoutKit/./src/checkout/checkout-default-includes.ts","webpack://checkoutKit/./src/order/order-actions.ts","webpack://checkoutKit/./src/payment/payment-method-types.ts","webpack://checkoutKit/./src/common/selector/cache-key-resolver.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-error-selector.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-status-selector.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-selectors.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-initializer.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-strategy-action-creator.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/checkout-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/braintree-paypal-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/googlepay/googlepay-braintree-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-initializer.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-registry.ts","webpack://checkoutKit/./src/checkout/checkout-actions.ts","webpack://checkoutKit/./src/checkout/create-action-transformer.ts","webpack://checkoutKit/./src/common/error/errors/request-error.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-selector.ts","webpack://checkoutKit/./src/checkout/checkout-selector.ts","webpack://checkoutKit/./src/checkout/checkout-reducer.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-reducer.ts","webpack://checkoutKit/./src/shipping/consignment-action-creator.ts","webpack://checkoutKit/./src/shipping/consignment-request-sender.ts","webpack://checkoutKit/./src/common/utility/is-equal.ts","webpack://checkoutKit/./src/common/selector/selector-decorator.ts","webpack://checkoutKit/./src/cart/map-to-internal-cart.ts","webpack://checkoutKit/./src/promotion/map-to-discount-notifications.ts","webpack://checkoutKit/./src/customer/customer-strategy-actions.ts","webpack://checkoutKit/./src/payment/payment-strategy-actions.ts","webpack://checkoutKit/./src/payment/instrument/instrument-action-types.ts","webpack://checkoutKit/./src/geography/country-action-types.ts","webpack://checkoutKit/./src/shipping/shipping-country-action-types.ts","webpack://checkoutKit/./src/customer/customer-actions.ts","webpack://checkoutKit/./src/payment/payment-actions.ts","webpack://checkoutKit/external \"@bigcommerce/form-poster\"","webpack://checkoutKit/./src/cart/map-to-internal-line-items.ts","webpack://checkoutKit/./src/cart/map-gift-certificate-to-internal-line-item.ts","webpack://checkoutKit/./src/cart/map-to-internal-line-item.ts","webpack://checkoutKit/./src/billing/billing-address-selector.ts","webpack://checkoutKit/./src/common/utility/create-freeze-proxy.ts","webpack://checkoutKit/./src/config/config-selector.ts","webpack://checkoutKit/./src/form/form-selector.ts","webpack://checkoutKit/./src/geography/country-selector.ts","webpack://checkoutKit/./src/payment/payment-selector.ts","webpack://checkoutKit/./src/payment/payment-method-selector.ts","webpack://checkoutKit/./src/payment/payment-strategy-selector.ts","webpack://checkoutKit/./src/payment/instrument/instrument-selector.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-selector.ts","webpack://checkoutKit/./src/checkout/create-internal-checkout-selectors.ts","webpack://checkoutKit/./src/checkout/checkout-request-sender.ts","webpack://checkoutKit/./src/checkout/checkout-action-creator.ts","webpack://checkoutKit/./src/shipping/map-to-internal-shipping-option.ts","webpack://checkoutKit/./src/common/error/errors/unrecoverable-error.ts","webpack://checkoutKit/./src/common/error/request-error-factory.ts","webpack://checkoutKit/./src/billing/billing-address-reducer.ts","webpack://checkoutKit/./src/config/config-reducer.ts","webpack://checkoutKit/./src/geography/country-reducer.ts","webpack://checkoutKit/./src/payment/payment-reducer.ts","webpack://checkoutKit/./src/payment/payment-method-reducer.ts","webpack://checkoutKit/./src/common/utility/merge-or-push.ts","webpack://checkoutKit/./src/payment/payment-strategy-reducer.ts","webpack://checkoutKit/./src/payment/instrument/instrument-reducer.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-reducer.ts","webpack://checkoutKit/./src/checkout/create-checkout-store.ts","webpack://checkoutKit/./src/common/error/create-request-error-factory.ts","webpack://checkoutKit/./src/checkout/create-checkout-store-reducer.ts","webpack://checkoutKit/./src/common/utility/is-private.ts","webpack://checkoutKit/./src/cart/cart-selector.ts","webpack://checkoutKit/./src/coupon/coupon-selector.ts","webpack://checkoutKit/./src/customer/customer-selector.ts","webpack://checkoutKit/./src/customer/customer-strategy-selector.ts","webpack://checkoutKit/./src/coupon/gift-certificate-selector.ts","webpack://checkoutKit/./src/shipping/shipping-address-selector.ts","webpack://checkoutKit/./src/shipping/shipping-country-selector.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-selector.ts","webpack://checkoutKit/./src/shipping/consignment-selector.ts","webpack://checkoutKit/./src/address/is-address-equal.ts","webpack://checkoutKit/./src/order/order-selector.ts","webpack://checkoutKit/./src/cart/cart-reducer.ts","webpack://checkoutKit/./src/shipping/consignment-reducer.ts","webpack://checkoutKit/./src/coupon/coupon-reducer.ts","webpack://checkoutKit/./src/customer/customer-reducer.ts","webpack://checkoutKit/./src/coupon/gift-certificate-reducer.ts","webpack://checkoutKit/./src/order/order-reducer.ts","webpack://checkoutKit/./src/shipping/shipping-country-reducer.ts","webpack://checkoutKit/external \"rxjs/observable/throw\"","webpack://checkoutKit/external \"rxjs/observable/merge\"","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-sdk-creator.ts","webpack://checkoutKit/./node_modules/@bigcommerce/request-sender/lib/timeout.js","webpack://checkoutKit/./src/shipping/shipping-strategy-action-creator.ts","webpack://checkoutKit/./src/address/map-from-internal-address.ts","webpack://checkoutKit/./src/customer/map-to-internal-customer.ts","webpack://checkoutKit/./src/cart/amount-transformer.ts","webpack://checkoutKit/./src/coupon/map-to-internal-coupon.ts","webpack://checkoutKit/./src/coupon/map-to-internal-gift-certificate.ts","webpack://checkoutKit/./src/order/map-to-internal-order.ts","webpack://checkoutKit/./src/shipping/strategies/shipping-strategy.ts","webpack://checkoutKit/./src/shipping/strategies/amazon-pay-shipping-strategy.ts","webpack://checkoutKit/./src/shipping/strategies/googlepay-braintree-shipping-strategy.ts","webpack://checkoutKit/./src/shipping/strategies/default-shipping-strategy.ts","webpack://checkoutKit/./src/shipping/create-shipping-strategy-registry.ts","webpack://checkoutKit/./src/common/utility/omit-private.ts","webpack://checkoutKit/./src/common/utility/omit-deep.ts","webpack://checkoutKit/./src/address/is-internal-address-equal.ts","webpack://checkoutKit/./src/customer/customer-strategy-state.ts","webpack://checkoutKit/./src/customer/customer-strategy-reducer.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-state.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-reducer.ts","webpack://checkoutKit/./src/address/map-to-internal-address.ts","webpack://checkoutKit/./src/billing/is-billing-address-like.ts","webpack://checkoutKit/./src/payment/errors/payment-method-invalid-error.ts","webpack://checkoutKit/./src/order/order-request-sender.ts","webpack://checkoutKit/./src/order/order-action-creator.ts","webpack://checkoutKit/./src/cart/cart-comparator.ts","webpack://checkoutKit/./src/coupon/coupon-action-creator.ts","webpack://checkoutKit/./src/coupon/coupon-request-sender.ts","webpack://checkoutKit/./src/customer/customer-strategy-action-creator.ts","webpack://checkoutKit/./node_modules/@bigcommerce/request-sender/lib/request-sender.js","webpack://checkoutKit/./src/customer/customer-action-creator.ts","webpack://checkoutKit/./src/customer/customer-request-sender.ts","webpack://checkoutKit/./src/coupon/gift-certificate-action-creator.ts","webpack://checkoutKit/./src/coupon/gift-certificate-request-sender.ts","webpack://checkoutKit/./src/shipping/shipping-country-action-creator.ts","webpack://checkoutKit/./src/shipping/shipping-country-request-sender.ts","webpack://checkoutKit/./src/common/error/errors/not-implemented-error.ts","webpack://checkoutKit/./src/customer/strategies/customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/amazon-pay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/braintree-visacheckout-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/chasepay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/square-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/masterpass-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/googlepay-braintree-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/default-customer-strategy.ts","webpack://checkoutKit/./src/customer/create-customer-strategy-registry.ts","webpack://checkoutKit/./src/common/error/errors/timeout-error.ts","webpack://checkoutKit/./src/common/utility/bind-decorator.ts","webpack://checkoutKit/./src/common/http-request/content-type.ts","webpack://checkoutKit/external \"@bigcommerce/bigpay-client\"","webpack://checkoutKit/./src/config/config-action-creator.ts","webpack://checkoutKit/./src/config/config-request-sender.ts","webpack://checkoutKit/./src/common/http-request/internal-api-headers.ts","webpack://checkoutKit/./src/common/error/errors/missing-data-error.ts","webpack://checkoutKit/./src/common/error/throw-error-action.ts","webpack://checkoutKit/./src/common/error/errors/not-initialized-error.ts","webpack://checkoutKit/./src/billing/billing-address-action-creator.ts","webpack://checkoutKit/./src/billing/billing-address-request-sender.ts","webpack://checkoutKit/./src/common/error/errors/invalid-argument-error.ts","webpack://checkoutKit/./src/common/registry/registry.ts","webpack://checkoutKit/./src/payment/payment-method-action-creator.ts","webpack://checkoutKit/./src/payment/payment-method-request-sender.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-request-sender.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-action-creator.ts","webpack://checkoutKit/./src/payment/strategies/amazon-pay/amazon-pay-script-loader.ts","webpack://checkoutKit/./src/common/http-request/to-form-url-encoded.ts","webpack://checkoutKit/./node_modules/@bigcommerce/request-sender/lib/index.js","webpack://checkoutKit/./node_modules/@bigcommerce/request-sender/lib/create-request-sender.js","webpack://checkoutKit/external \"js-cookie\"","webpack://checkoutKit/./node_modules/@bigcommerce/request-sender/lib/payload-transformer.js","webpack://checkoutKit/./node_modules/@bigcommerce/request-sender/lib/request-factory.js","webpack://checkoutKit/external \"query-string\"","webpack://checkoutKit/./node_modules/@bigcommerce/request-sender/lib/is-promise.js","webpack://checkoutKit/./node_modules/@bigcommerce/request-sender/lib/create-timeout.js","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-braintree-initializer.ts","webpack://checkoutKit/./src/remote-checkout/errors/remote-checkout-synchronization-error.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-script-loader.ts","webpack://checkoutKit/external \"rxjs/observable/empty\"","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-script-loader.ts","webpack://checkoutKit/external \"rxjs\"","webpack://checkoutKit/external \"messageformat\"","webpack://checkoutKit/./src/locale/language-service.ts","webpack://checkoutKit/./src/locale/create-language-service.ts","webpack://checkoutKit/./src/currency/currency-formatter.ts","webpack://checkoutKit/./src/currency/currency-service.ts","webpack://checkoutKit/./src/currency/create-currency-service.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-payment-processor.ts","webpack://checkoutKit/./src/common/utility/get-environment.ts","webpack://checkoutKit/./src/payment/strategies/braintree/visacheckout-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/masterpass-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/create-googlepay-braintree-payment-processor.ts","webpack://checkoutKit/./src/common/log/console-logger.ts","webpack://checkoutKit/./src/common/log/noop-logger.ts","webpack://checkoutKit/./src/common/log/get-default-logger.ts","webpack://checkoutKit/./src/common/log/create-logger.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-visacheckout-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/braintree/create-braintree-visacheckout-payment-processor.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","ConsignmentActionType","ShippingStrategyActionType","CouponActionType","BillingAddressActionType","GiftCertificateActionType","PaymentMethodActionType","INITIALIZE_REMOTE_BILLING_REQUESTED","INITIALIZE_REMOTE_BILLING_SUCCEEDED","INITIALIZE_REMOTE_BILLING_FAILED","INITIALIZE_REMOTE_SHIPPING_REQUESTED","INITIALIZE_REMOTE_SHIPPING_SUCCEEDED","INITIALIZE_REMOTE_SHIPPING_FAILED","INITIALIZE_REMOTE_PAYMENT_REQUESTED","INITIALIZE_REMOTE_PAYMENT_SUCCEEDED","INITIALIZE_REMOTE_PAYMENT_FAILED","LOAD_REMOTE_SETTINGS_REQUESTED","LOAD_REMOTE_SETTINGS_SUCCEEDED","LOAD_REMOTE_SETTINGS_FAILED","SIGN_OUT_REMOTE_CUSTOMER_REQUESTED","SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED","SIGN_OUT_REMOTE_CUSTOMER_FAILED","UPDATE_REMOTE_CHECKOUT","CheckoutButtonActionType","CountryActionCreator","_countryRequestSender","this","loadCountries","options","_this","Observable_","observer","next","data_store_","country_action_types","then","response","body","data","complete","catch","error","CountryRequestSender","_requestSender","_config","_a","timeout","headers","Accept-Language","locale","_super","OrderFinalizationNotRequiredError","type","external_tslib_","standard_error","PaymentStrategyActionCreator","_strategyRegistry","_orderActionCreator","execute","payload","store","strategy","state","getState","payment","useStoreCredit","meta","methodId","isPaymentDataRequired","method","paymentMethods","getPaymentMethod","gatewayId","missing_data_error","MissingPaymentMethod","getByMethod","payment_strategy_actions","ExecuteRequested","undefined","ExecuteSucceeded","ExecuteFailed","finalize","concat_","of_","FinalizeRequested","_loadOrderPaymentsIfNeeded","defer_","getPaymentId","order_finalization_not_required_error","providerId","id","gateway","FinalizeSucceeded","pipe","operators_","throw_error_action","FinalizeFailed","initialize","InitializeRequested","InitializeSucceeded","InitializeFailed","deinitialize","DeinitializeRequested","DeinitializeSucceeded","DeinitializeFailed","widgetInteraction","WidgetInteractionStarted","WidgetInteractionFinished","WidgetInteractionFailed","checkout","getCheckout","orderId","loadOrderPayments","empty_","CartChangedError","CheckoutValidator","_checkoutRequestSender","validate","MissingCheckout","loadCheckout","comparator","cart_comparator","grandTotal","_compareCoupons","coupons","_compareGiftCertificates","giftCertificates","isEqual","cart","cart_changed_error","couponsA","couponsB","external_lodash_","giftCertificatesA","giftCertificatesB","PaymentStrategyRegistry","_store","paymentMethod","token","_getToken","cacheToken","hasFactory","payment_method_types","_isLegacyMethod","config","getStoreConfig","MissingCheckoutConfig","clientSidePaymentProviders","paymentSettings","registry_registry","isVaultedInstrument","instrument","Boolean","instrumentId","CardBrand","DigitalWalletType","PaymentActionCreator","_paymentRequestSender","submitPayment","payment_actions","SubmitPaymentRequested","from_","_getPaymentRequestBody","loadCurrentOrder","SubmitPaymentSucceeded","SubmitPaymentFailed","initializeOffsitePayment","InitializeOffsitePaymentRequested","InitializeOffsitePaymentSucceeded","InitializeOffsitePaymentFailed","paymentData","invalid_argument_error","billingAddress","getBillingAddress","customer","getCustomer","order","getOrder","_getPaymentMethod","shippingAddress","getShippingAddress","consignments","getConsignments","shippingOption","getShippingOption","storeConfig","contextConfig","getContextConfig","instrumentMeta","instruments","getInstrumentsMeta","paymentMeta","getPaymentMethodsMeta","orderMeta","getOrderMeta","internalCustomer","map_to_internal_customer","authToken","getPaymentToken","vaultAccessToken","map_to_internal_address","map_to_internal_shipping_option","map_to_internal_cart","map_to_internal_order","quoteMeta","request","geoCountryCode","source","storeProfile","paymentMethodSelector","initializationData","PaymentRequestSender","_client","Promise","resolve","reject","_transformResponse","status","statusText","PaymentArgumentInvalidError","invalidFields","message","join","PaymentStrategy","_isInitialized","AfterpayPaymentStrategy","_checkoutValidator","_paymentActionCreator","_paymentMethodActionCreator","_remoteCheckoutActionCreator","_afterpayScriptLoader","storeCountryName","storeCountry","load","_mapCountryToISO2","afterpaySdk","_afterpaySdk","paymentId","payment_argument_invalid_error","dispatch","initializePayment","loadPaymentMethod","_displayModal","loadSettings","afterpay","remoteCheckout","settings","not_initialized_error","PaymentNotInitialized","orderPayload","paymentPayload","nonce","submitOrder","countryName","clientToken","countryCode","display","payment_strategy","AmazonPayPaymentStrategy","_billingAddressActionCreator","_scriptLoader","_window","window","amazonOptions","amazon","_walletOptions","_paymentMethod","loadWidget","_createWallet","referenceId","_getOrderReferenceId","_b","request_error","_getMerchantId","merchantId","container","onError","onPaymentSelect","_c","onReady","document","getElementById","OffAmazonPayments","walletOptions","amazonOrderReferenceId","design","designMode","scope","sellerId","orderReference","_synchronizeBillingAddress","_updateOrderReference","widget","Widgets","Wallet","remote_checkout_synchronization_error","initializeBilling","remoteAddress","billing","address","internalBillingAddress","is_internal_address_equal","updateAddress","map_from_internal_address","updateCheckout","getAmazonOrderReferenceId","CreditCardPaymentStrategy","PaymentMethodCancelledError","KlarnaPaymentStrategy","_klarnaScriptLoader","klarnaCredit","_klarnaCredit","_unsubscribe","subscribe","_loadWidget","_authorize","authorizationToken","authorization_token","klarna","onLoad","init","client_token","show_form","payment_method_invalid_error","authorize","res","approved","payment_method_cancelled_error","LegacyPaymentStrategy","OfflinePaymentStrategy","action","OffsitePaymentStrategy","_shouldSubmitFullPayload","getPaymentStatus","payment_status_types","finalizeOrder","PaypalProPaymentStrategy","_isPaymentAcknowledged","PaypalExpressPaymentStrategy","_isInContextEnabled","loadPaypal","paypal","_paypalSdk","setup","button","environment","testMode","closeFlow","_isAcknowledgedOrFinalized","redirectUrl","getPaymentRedirectUrl","location","assign","initXO","startFlow","SagePayPaymentStrategy","_formPoster","errors","code","postForm","three_ds_result","acs_url","PaReq","payer_auth_request","TermUrl","callback_url","MD","merchant_data","UnsupportedBrowserError","SquarePaymentStrategy","_checkoutActionCreator","_paymentStrategyActionCreator","_syncPaymentMethod","createSquareForm","_paymentForm","_getFormOptions","build","orderRequest","_getNonceInstrument","_getCountryCode","toUpperCase","_deferredRequestNonce","timeout_error","requestCardNonce","deferred","squareOptions","square","_squareOptions","callbacks","cardNonceResponseReceived","cardData","billingContact","shippingContact","digital_wallet_type","none","_handleWalletNonceResponse","_handleCardNonceResponse","createPaymentRequest","_paymentRequestPayload","methodsSupported","methods","masterpass","_showPaymentMethods","paymentFormLoaded","_setPostalCode","unsupportedBrowserDetected","unsupported_browser_error","_paymentInstrumentSelected","_setExternalCheckoutData","all","loadCurrentCheckout","queueId","requestShippingAddress","requestBillingInfo","currencyCode","currency","total","label","storeName","amount","String","subtotal","pending","post","Accept","Content-Type","to_form_url_encoded","provider","JSON","stringify","postalCode","setPostalCode","element","masterpassBtn","elementId","style","NoPaymentDataRequiredPaymentStrategy","BraintreeCreditCardPaymentStrategy","_braintreePaymentProcessor","braintree","_is3dsEnabled","is3dsEnabled","_handleError","_preparePaymentData","_isUsingVaulting","card","ccName","ccNumber","ccType","ccExpiry","month","year","isCreditCardLike","shouldSaveInstrument","tokenizedCard","verifyCard","tokenizeCard","appendSessionId","BraintreePaypalPaymentStrategy","_credit","braintreeOptions","preloadPaypal","storeLanguage","BraintreeVisaCheckoutPaymentStrategy","_braintreeVisaCheckoutPaymentProcessor","_visaCheckoutScriptLoader","visaCheckoutOptions","braintreevisacheckout","initOptions","collectShipping","visaCheckout","visaInitOptions","on","paymentSuccessPayload","Error","handleSuccess","GooglePayPaymentStrategy","_googlePayPaymentProcessor","_methodId","googlepay","_googlePayOptions","walletButton","_walletButton","addEventListener","_handleWalletButtonClick","removeEventListener","_getPayment","cardInformation","displayWallet","statusCode","MissingPayment","card_information","event","preventDefault","bind_decorator","WepayPaymentStrategy","orderActionCreator","paymentActionCreator","_wepayRiskClient","getRiskToken","payloadWithToken","deviceSessionId","credit_card_payment_strategy","SCRIPTS_DEFAULT","SCRIPTS_US","AfterpayScriptLoader","scriptURI","_getScriptURI","loadScript","AfterPay","promise","cancellable","cancel","race","BraintreePaymentProcessor","_braintreeSDKCreator","_threeDSecureOptions","threeDSecure","getPaypal","requestData","_mapToCreditCard","getClient","client","creditCards","offerCredit","tokenize","enableShippingAddress","flow","useraction","addFrame","removeFrame","get3DS","cancelVerifyCard","verification","cancellable_promise","iframe","processedPayment","getDataCollector","deviceData","teardown","creditCard","streetAddress","address1","address2","cardholderName","number","cvv","ccCvv","expirationDate","country","endpoint","ChasePayEventType","ChasePayPaymentStrategy","_chasePayScriptLoader","_walletEvent$","external_rxjs_","chasepay","_configureWallet","_chasePayClient","subtype","_displayWallet","_createOrder","ChasePay","logoContainer","insertBrandings","color","containers","configure","language","CancelCheckout","onCancel","CompleteCheckout","_setSessionToken","sessionToken","showLoadingAnimation","startCheckout","digitalSessionId","take","merchantRequestId","riskToken","paymentCryptogram","cryptogramId","eci","transactionId","btoa","reqTokenId","expDate","toString","substr","accountNum","accountMask","extraData","GooglePayStripeInitializer","hasShippingAddress","_mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2","parseResponse","parse","paymentMethodData","tokenizationData","details","cardType","brand","lastFour","last4","err","googlePayPaymentDataRequestV2","apiVersion","apiVersionMinor","merchantInfo","authJwt","platformToken","googleMerchantId","merchantName","googleMerchantName","allowedPaymentMethods","parameters","allowedAuthMethods","allowedCardNetworks","billingAddressRequired","billingAddressParameters","format","phoneNumberRequired","tokenizationSpecification","stripe:version","stripe:publishableKey","transactionInfo","totalPriceStatus","totalPrice","emailRequired","shippingAddressRequired","shippingAddressParameters","KlarnaScriptLoader","Klarna","Credit","MasterpassPaymentStrategy","_masterpassScriptLoader","_masterpassClient","_createMasterpassPayload","checkoutId","allowedCardTypes","toFixed","cartId","suppressShippingAddress","SquareScriptLoader","SqPaymentForm","WepayRiskClient","_riskClient","WePay","risk","generate_risk_token","get_risk_token","createPaymentStrategyRegistry","paymentClient","requestSender","registry","payment_strategy_registry","defaultToken","scriptLoader","script_loader_","billingAddressActionCreator","billing_address_action_creator","billing_address_request_sender","braintreePaymentProcessor","braintreeScriptLoader","braintree_script_loader","braintreeSDKCreator","braintree_sdk_creator","braintree_payment_processor","createBraintreePaymentProcessor","checkoutRequestSender","checkout_request_sender","checkoutValidator","checkout_validator","order_action_creator","order_request_sender","payment_action_creator","payment_request_sender","paymentMethodActionCreator","payment_method_action_creator","payment_method_request_sender","remoteCheckoutActionCreator","remote_checkout_action_creator","remote_checkout_request_sender","configRequestSender","config_request_sender","configActionCreator","config_action_creator","checkoutActionCreator","checkout_action_creator","paymentStrategyActionCreator","payment_strategy_action_creator","register","afterpay_payment_strategy","afterpay_script_loader","amazon_pay_payment_strategy","amazon_pay_script_loader","klarna_payment_strategy","klarna_script_loader","legacy_payment_strategy","offline_payment_strategy","offsite_payment_strategy","paypal_pro_payment_strategy","paypal_express_payment_strategy","paypal_script_loader","sage_pay_payment_strategy","form_poster_","square_payment_strategy","square_script_loader","no_payment_data_required_strategy","braintree_credit_card_payment_strategy","braintree_paypal_payment_strategy","braintree_visacheckout_payment_strategy","create_braintree_visacheckout_payment_processor","visacheckout_script_loader","chasepay_payment_strategy","chasepay_script_loader","wepay_risk_client","googlepay_payment_strategy","create_googlepay_braintree_payment_processor","request_sender_","googlepay_payment_processor","googlepay_script_loader","googlepay_stripe_initializer","createGooglePayStripePaymentProcessor","wepay_payment_strategy","masterpass_payment_strategy","masterpass_script_loader","InstrumentActionCreator","_instrumentRequestSender","loadInstruments","instrument_action_types","session","_getSessionContext","_getCurrentAccessToken","_getShippingAddress","_getValidAccessToken","currentToken","deleteInstrument","_isValidVaultAccessToken","date","valueOf","Date","now","isFuture","newDate","getTime","setMinutes","getMinutes","addMinutes","vaultAccessExpiry","getVaultAccessToken","expires_at","getCart","MissingCart","customerId","storeId","InstrumentResponseTransformer","transformResponse","vaulted_instruments","vaultedInstruments","_transformVaultedInstruments","transformErrorResponse","map","bigpayToken","bigpay_token","iin","last_4","expiryMonth","expiry_month","expiryYear","expiry_year","trustedShippingAddress","trusted_shipping_address","InstrumentRequestSender","_transformer","instrument_response_transformer","requestContext","_loadInstrumentsWithAddress","_loadInstruments","deleteShopperInstrument","loadInstrumentsWithAddress","CheckoutStoreSelector","selectors","_billingAddress","_cart","_checkout","_consignments","_countries","countries","_coupons","_customer","_form","form","_giftCertificates","_instruments","_order","_payment","_paymentMethods","_shippingAddress","_shippingCountries","shippingCountries","getConfig","context","firstName","lastName","company","city","stateOrProvince","stateOrProvinceCode","phone","customFields","getShippingOptions","length","availableShippingOptions","getSelectedShippingOption","selectedShippingOption","getShippingCountries","getBillingCountries","getCountries","getPaymentMethods","getSelectedPaymentMethod","getCoupons","getGiftCertificates","isPaymentDataSubmitted","getInstruments","getBillingAddressFields","getShippingAddressFields","selector_decorator","CheckoutStoreErrorSelector","_customerStrategies","customerStrategies","_paymentStrategies","paymentStrategies","_shippingStrategies","shippingStrategies","getError","getLoadCheckoutError","getSubmitOrderError","getFinalizeOrderError","getLoadOrderError","getLoadCartError","getLoadBillingCountriesError","getLoadShippingCountriesError","getLoadPaymentMethodsError","getLoadPaymentMethodError","getInitializePaymentError","getLoadShippingOptionsError","getSelectShippingOptionError","getSignInError","getSignOutError","getInitializeCustomerError","getUpdateShippingAddressError","getUpdateBillingAddressError","getContinueAsGuestError","getUpdateConsignmentError","getCreateConsignmentsError","getDeleteConsignmentError","getInitializeShippingError","getApplyCouponError","getRemoveCouponError","getApplyGiftCertificateError","getRemoveGiftCertificateError","getLoadInstrumentsError","getDeleteInstrumentError","getLoadConfigError","getLoadError","getUpdateCheckoutError","getUpdateError","getExecuteError","getFinalizeError","getLoadMethodError","getInitializeError","consignmentId","getSelectOptionError","getUpdateShippingOptionError","getUpdateAddressError","getDeleteError","getCreateError","getApplyError","getRemoveError","CheckoutStoreStatusSelector","isPending","isLoadingCheckout","isSubmittingOrder","isFinalizingOrder","isLoadingOrder","isLoadingCart","isLoadingBillingCountries","isLoadingShippingCountries","isLoadingPaymentMethods","isLoadingPaymentMethod","isInitializingPayment","isLoadingShippingOptions","isSelectingShippingOption","isSigningIn","isSigningOut","isInitializingCustomer","isUpdatingBillingAddress","isContinuingAsGuest","isUpdatingShippingAddress","isUpdatingConsignment","isCreatingConsignments","isDeletingConsignment","isInitializingShipping","isApplyingCoupon","isRemovingCoupon","isApplyingGiftCertificate","isRemovingGiftCertificate","isLoadingInstruments","isDeletingInstrument","isLoadingConfig","isCustomerStepPending","isPaymentStepPending","isLoading","isUpdatingCheckout","isUpdating","isExecuting","isFinalizing","isLoadingMethod","isInitializing","isSelectingOption","isUpdatingShippingOption","isUpdatingAddress","isDeleting","isCreating","isApplying","isRemoving","isWidgetInteracting","createCheckoutSelectors","checkout_store_selector","checkout_store_error_selector","statuses","checkout_store_status_selector","ErrorMessageTransformer","_messageCustomizer","transform","input","split","line","replace","trim","toSingleLine","CheckoutService","_configActionCreator","_consignmentActionCreator","_countryActionCreator","_couponActionCreator","_customerStrategyActionCreator","_giftCertificateActionCreator","_instrumentActionCreator","_shippingCountryActionCreator","_shippingStrategyActionCreator","_state","_errorTransformer","isDevelopment","get_environment","error_message_transformer","isCheckoutServiceError","MissingConsignments","MissingOrder","MissingOrderId","CustomerNotInitialized","ShippingNotInitialized","createCheckoutServiceErrorTransformer","notifyState","subscriber","filters","_i","arguments","apply","concat","filter","_dispatch","loadDefaultCheckout","loadOrder","loadCheckoutAction","loadConfigAction","loadConfig","finalizeOrderIfNeeded","loadPaymentMethods","deinitializePayment","loadBillingCountries","loadShippingCountries","loadBillingAddressFields","loadShippingAddressFields","initializeCustomer","deinitializeCustomer","continueAsGuest","credentials","signInCustomer","signIn","signOutCustomer","signOut","loadShippingOptions","initializeShipping","deinitializeShipping","selectShippingOption","shippingOptionId","selectOption","updateShippingAddress","createConsignments","deleteConsignment","updateConsignment","consignment","assignItemsToAddress","assignItemsByAddress","unassignItemsToAddress","unassignItemsByAddress","selectConsignmentShippingOption","updateShippingOption","updateBillingAddress","applyCoupon","removeCoupon","applyGiftCertificate","removeGiftCertificate","createCheckoutService","protocol","get_default_logger","warn","externalSource","shouldWarnMutation","host","create_checkout_store","bigpay_client_","setHost","bigpayBaseUrl","createPaymentClient","orderRequestSender","checkout_service","consignment_action_creator","consignment_request_sender","country_action_creator","country_request_sender","coupon_action_creator","coupon_request_sender","customer_strategy_action_creator","create_customer_strategy_registry","gift_certificate_action_creator","gift_certificate_request_sender","instrument_action_creator","instrument_request_sender","shipping_country_action_creator","shipping_country_request_sender","shipping_strategy_action_creator","create_shipping_strategy_registry","ConfigActionType","ACKNOWLEDGE","FINALIZE","standard_error_StandardError","StandardError","setPrototypeOf","__proto__","_newTarget","captureStackTrace","stack","DEFAULT_STATE","__webpack_exports__","OrderActionType","HOSTED","OFFLINE","CacheKeyResolver","_lastId","_maps","getKey","args","_resolveMap","index","parentMaps","cacheKey","usedCount","_generateKey","slice","getUsedCount","isMatched","parentMaps_1","maps","push","CheckoutButtonErrorSelector","_checkoutButton","checkoutButton","getInitializeButtonError","getDeinitializeButtonError","getDeinitializeError","CheckoutButtonStatusSelector","isInitializingButton","isDeinitializingButton","isDeinitializing","createCheckoutButtonSelectors","checkout_button_error_selector","checkout_button_status_selector","CheckoutButtonInitializer","_buttonStrategyActionCreator","initializeButton","deinitializeButton","CheckoutButtonStrategyActionCreator","_registry","checkout_button_actions","InitializeButtonRequested","InitializeButtonSucceeded","InitializeButtonFailed","DeinitializeButtonRequested","DeinitializeButtonSucceeded","DeinitializeButtonFailed","CheckoutButtonStrategy","BraintreePaypalButtonStrategy","_paypalScriptLoader","_offerCredit","paypalOptions","braintreepaypalcredit","braintreepaypal","getPaypalCheckout","paypalCheckout","_paypalCheckout","Button","render","env","commit","shouldProcessPayment","shape","_setupPayment","onPaymentError","onAuthorize","_tokenizePayment","onAuthorizeError","addresses","CheckoutButtonNotInitialized","createPayment","shippingAddressEditable","shippingAddressOverride","_mapToBraintreeAddress","tokenizePayment","payment_type","device_data","shipping_address","_mapToLegacyShippingAddress","billing_address","_mapToLegacyBillingAddress","recipientName","email","first_name","last_name","phone_number","address_line_1","line1","address_line_2","line2","country_code","postal_code","checkout_button_strategy","GooglePayBraintreeButtonStrategy","googlepaybraintree","stateCheckout","_createSignInButton","parentNode","removeChild","containerId","querySelector","googlePayButton","createButton","_onPaymentSelectComplete","appendChild","_updateAddressAndPayment","_onError","createCheckoutButtonInitializer","checkout_button_initializer","checkout_button_strategy_action_creator","formPoster","braintree_paypal_button_strategy","googlepay_braintree_button_strategy","googlepay_braintree_initializer","createCheckoutButtonRegistry","CheckoutActionType","createActionTransformer","requestErrorFactory","action$","rxjs_observable_from__WEBPACK_IMPORTED_MODULE_1__","rxjs_operators__WEBPACK_IMPORTED_MODULE_2__","every","isResponse","tslib__WEBPACK_IMPORTED_MODULE_0__","createError","DEFAULT_RESPONSE","RequestError","Array","isArray","reduce","result","joinErrors","detail","title","CheckoutButtonSelector","lodash__WEBPACK_IMPORTED_MODULE_1__","initializeError","deinitializeError","_common_selector__WEBPACK_IMPORTED_MODULE_2__","CheckoutSelector","loadError","updateError","_common_selector__WEBPACK_IMPORTED_MODULE_1__","checkoutReducer","_bigcommerce_data_store__WEBPACK_IMPORTED_MODULE_1__","dataReducer","errorsReducer","statusesReducer","reducer","_checkout_actions__WEBPACK_IMPORTED_MODULE_8__","LoadCheckoutSucceeded","UpdateCheckoutSucceeded","_billing__WEBPACK_IMPORTED_MODULE_3__","UpdateBillingAddressSucceeded","_coupon__WEBPACK_IMPORTED_MODULE_4__","ApplyCouponSucceeded","RemoveCouponSucceeded","_shipping__WEBPACK_IMPORTED_MODULE_7__","CreateConsignmentsSucceeded","UpdateConsignmentSucceeded","DeleteConsignmentSucceeded","UpdateShippingOptionSucceeded","_coupon__WEBPACK_IMPORTED_MODULE_5__","ApplyGiftCertificateSucceeded","RemoveGiftCertificateSucceeded","lodash__WEBPACK_IMPORTED_MODULE_2__","_order__WEBPACK_IMPORTED_MODULE_6__","SubmitOrderSucceeded","LoadCheckoutRequested","LoadCheckoutFailed","UpdateCheckoutRequested","UpdateCheckoutFailed","checkoutButtonReducer","_checkout_button_actions__WEBPACK_IMPORTED_MODULE_2__","ConsignmentActionCreator","_consignmentRequestSender","_common_error_errors__WEBPACK_IMPORTED_MODULE_3__","existingConsignment","getConsignmentByAddress","_common_error_errors__WEBPACK_IMPORTED_MODULE_4__","lineItems","_removeLineItems","_createOrUpdateConsignment","_addLineItems","rxjs_Observable__WEBPACK_IMPORTED_MODULE_2__","consignmentUpdateBody","consignmentMeta","_consignment_actions__WEBPACK_IMPORTED_MODULE_5__","UpdateShippingOptionRequested","UpdateShippingOptionFailed","LoadShippingOptionsRequested","params","include","LoadShippingOptionsSucceeded","LoadShippingOptionsFailed","_getConsignmentRequestBody","CreateConsignmentsRequested","CreateConsignmentsFailed","UpdateConsignmentRequested","UpdateConsignmentFailed","DeleteConsignmentRequested","DeleteConsignmentFailed","_isUpdateConsignmentRequest","physicalItems","item","itemId","quantity","_hydrateLineItems","lineItemIds","existingItem","sharedItem","find","lineItem","DEFAULT_PARAMS","ConsignmentRequestSender","url","_common_http_request__WEBPACK_IMPORTED_MODULE_1__","JsonV1","put","delete","objectA","objectB","length_1","isArrayEqual","isDateEqual","RegExp","isRegExpEqual","keyFilter","keysA","keys","keysB","length_2","isObjectEqual","selectorDecorator","target","decoratedTarget","class_1","getOwnPropertyNames","forEach","descriptor","getOwnPropertyDescriptor","resolver","cache_key_resolver","memoizedMethod","cachedValue","newValue","is_private","cache","set","selectorMethodDecorator","mapToInternalCart","decimalPlaces","amountTransformer","amount_transformer","items","map_to_internal_line_items","coupon","discountedAmount","sum","map_to_internal_coupon","discount","discountAmount","integerAmount","toInteger","discountNotifications","promotions","notifications","promotion","banners","banner","placeholders","discountType","messageHtml","text","mapToDiscountNotifications","giftCertificate","totalDiscountedAmount","certificate","used","appliedGiftCertificates","map_to_internal_gift_certificate","shipping","shippingCostTotal","amountBeforeDiscount","shippingCostBeforeDiscount","integerAmountBeforeDiscount","required","isShippingRequired","storeCredit","taxSubtotal","taxTotal","taxes","handling","handlingCostTotal","CustomerStrategyActionType","PaymentStrategyActionType","LOAD_INSTRUMENTS_REQUESTED","LOAD_INSTRUMENTS_SUCCEEDED","LOAD_INSTRUMENTS_FAILED","DELETE_INSTRUMENT_REQUESTED","DELETE_INSTRUMENT_SUCCEEDED","DELETE_INSTRUMENT_FAILED","LOAD_COUNTRIES_REQUESTED","LOAD_COUNTRIES_SUCCEEDED","LOAD_COUNTRIES_FAILED","LOAD_SHIPPING_COUNTRIES_REQUESTED","LOAD_SHIPPING_COUNTRIES_SUCCEEDED","LOAD_SHIPPING_COUNTRIES_FAILED","CustomerActionType","PaymentActionType","mapToInternalLineItems","itemMap","idKey","_map_gift_certificate_to_internal_line_item__WEBPACK_IMPORTED_MODULE_0__","_map_to_internal_line_item__WEBPACK_IMPORTED_MODULE_1__","mapToInternalLineItemType","mapGiftCertificateToInternalLineItem","___WEBPACK_IMPORTED_MODULE_0__","imageUrl","amountAfterDiscount","integerAmountAfterDiscount","integerDiscount","sender","recipient","attributes","variantId","mapToInternalLineItem","extendedListPrice","extendedSalePrice","downloadsPageUrl","downloadPageUrl","productId","option","addedByPromotion","BillingAddressSelector","continueAsGuestError","createFreezeProxy","trap","proxy","iteratee","getPrototypeOf","traversePrototypeOf","charAt","createProxy","ConfigSelector","getExternalSource","FormSelector","selectedCountry","formFields","shippingAddressFields","field","_processField","billingAddressFields","_processCountry","_processProvince","_processsPostCode","default","fieldType","itemtype","subdivisions","hasPostalCodes","CountrySelector","PaymentSelector","internalPayment","_getInternalPayment","_getHostedPayment","_getGatewayPayment","step","payments","providerType","PaymentMethodSelector","loadMethodId","loadMethodError","PaymentStrategySelector","payment_strategy_state","initializeMethodId","executeMethodId","executeError","finalizeMethodId","finalizeError","getWidgetInteractingError","widgetInteractionMethodId","widgetInteractionError","InstrumentSelector","failedInstrument","deleteError","deletingInstrument","RemoteCheckoutSelector","_remoteCheckout","createInternalCheckoutSelectors","billing_address_selector","cart_selector","checkout_button_selector","config_selector","country_selector","coupon_selector","customer_selector","customer_strategy_selector","form_selector","gift_certificate_selector","instrument_selector","payment_method_selector","payment_strategy_selector","shipping_address_selector","remote_checkout_selector","shipping_country_selector","shipping_strategy_selector","consignment_selector","checkout_selector","order_selector","payment_selector","createFreezeProxies","CheckoutRequestSender","_common_http_request__WEBPACK_IMPORTED_MODULE_0__","_checkout_default_includes__WEBPACK_IMPORTED_MODULE_1__","CheckoutActionCreator","rxjs_observable_concat__WEBPACK_IMPORTED_MODULE_1__","rxjs_observable_of__WEBPACK_IMPORTED_MODULE_4__","_bigcommerce_data_store__WEBPACK_IMPORTED_MODULE_0__","_checkout_actions__WEBPACK_IMPORTED_MODULE_10__","rxjs_observable_merge__WEBPACK_IMPORTED_MODULE_3__","rxjs_observable_defer__WEBPACK_IMPORTED_MODULE_2__","rxjs_operators__WEBPACK_IMPORTED_MODULE_5__","_common_error__WEBPACK_IMPORTED_MODULE_7__","_common_error_errors__WEBPACK_IMPORTED_MODULE_8__","rxjs_Observable__WEBPACK_IMPORTED_MODULE_6__","_common_error_errors__WEBPACK_IMPORTED_MODULE_9__","mapToInternalShippingOption","isSelected","description","price","cost","selected","isRecommended","transitTime","UnrecoverableError","RequestErrorFactory","_factoryMethods","factoryMethod","_getType","billingAddressReducer","billing_address_actions","ContinueAsGuestSucceeded","checkout_actions","order_actions","LoadOrderSucceeded","UpdateBillingAddressRequested","UpdateBillingAddressFailed","ContinueAsGuestRequested","ContinueAsGuestFailed","config_reducer_DEFAULT_STATE","configReducer","config_reducer_dataReducer","config_reducer_errorsReducer","config_reducer_statusesReducer","config_actions","LoadConfigSucceeded","LoadConfigFailed","LoadConfigRequested","country_reducer_DEFAULT_STATE","countryReducer","country_reducer_dataReducer","country_reducer_errorsReducer","country_reducer_statusesReducer","paymentReducer","payment_reducer_dataReducer","payment_method_reducer_DEFAULT_STATE","paymentMethodReducer","payment_method_reducer_dataReducer","payment_method_reducer_errorsReducer","metaReducer","payment_method_reducer_statusesReducer","payment_method_actions","LoadPaymentMethodSucceeded","array","predicate","newArray","mergeOrPush","LoadPaymentMethodsSucceeded","LoadPaymentMethodsRequested","LoadPaymentMethodsFailed","LoadPaymentMethodRequested","LoadPaymentMethodFailed","paymentStrategyReducer","payment_strategy_reducer_errorsReducer","payment_strategy_reducer_statusesReducer","deinitializeMethodId","instrument_reducer_DEFAULT_STATE","instrumentReducer","instrument_reducer_dataReducer","instrument_reducer_errorsReducer","instrument_reducer_metaReducer","instrument_reducer_statusesReducer","remote_checkout_reducer_DEFAULT_STATE","remoteCheckoutReducer","remote_checkout_reducer_dataReducer","remote_checkout_action_types","createCheckoutStore","initialState","actionTransformer","create_action_transformer","factory","request_error_factory","unrecoverable_error","createRequestErrorFactory","cart_reducer","checkout_reducer","checkout_button_reducer","consignment_reducer","coupon_reducer","customer_reducer","customer_strategy_reducer","gift_certificate_reducer","order_reducer","shipping_country_reducer","shipping_strategy_reducer","stateTransformer","create_internal_checkout_selectors","isPrivate","indexOf","CartSelector","CouponSelector","_coupon","removeCouponError","applyCouponError","CustomerSelector","CustomerStrategySelector","signInMethodId","signInError","signOutMethodId","signOutError","getWidgetInteractionError","GiftCertificateSelector","_giftCertificate","removeGiftCertificateError","applyGiftCertificateError","ShippingAddressSelector","ShippingCountrySelector","ShippingStrategySelector","updateAddressMethodId","updateAddressError","selectOptionMethodId","selectOptionError","ConsignmentSelector","getConsignmentById","_address__WEBPACK_IMPORTED_MODULE_2__","loadShippingOptionsError","getUnassignedItems","assignedLineItemIds","itemIds","getItemAssignmentError","updateShippingOptionError","isAssigningItems","_common_selector__WEBPACK_IMPORTED_MODULE_3__","isAddressEqual","addressA","addressB","lodash__WEBPACK_IMPORTED_MODULE_0__","normalize","OrderSelector","cartReducer","_billing_billing_address_actions__WEBPACK_IMPORTED_MODULE_2__","_checkout__WEBPACK_IMPORTED_MODULE_3__","_shipping_consignment_actions__WEBPACK_IMPORTED_MODULE_6__","_coupon_coupon_actions__WEBPACK_IMPORTED_MODULE_4__","_coupon_gift_certificate_actions__WEBPACK_IMPORTED_MODULE_5__","consignmentReducer","_checkout__WEBPACK_IMPORTED_MODULE_2__","_consignment_actions__WEBPACK_IMPORTED_MODULE_4__","_customer__WEBPACK_IMPORTED_MODULE_3__","SignOutCustomerSucceeded","couponReducer","_coupon_actions__WEBPACK_IMPORTED_MODULE_4__","_order__WEBPACK_IMPORTED_MODULE_3__","ApplyCouponRequested","ApplyCouponFailed","RemoveCouponRequested","RemoveCouponFailed","customerReducer","giftCertificateReducer","_shipping_consignment_actions__WEBPACK_IMPORTED_MODULE_3__","_gift_certificate_actions__WEBPACK_IMPORTED_MODULE_5__","ApplyGiftCertificateRequested","ApplyGiftCertificateFailed","RemoveGiftCertificateRequested","RemoveGiftCertificateFailed","orderReducer","_order_actions__WEBPACK_IMPORTED_MODULE_3__","LoadOrderPaymentsSucceeded","FinalizeOrderSucceeded","callbackUrl","orderToken","LoadOrderRequested","LoadOrderPaymentsRequested","LoadOrderFailed","LoadOrderPaymentsFailed","shippingCountryReducer","_shipping_country_action_types__WEBPACK_IMPORTED_MODULE_2__","BraintreeScriptLoader","loadClient","_common_error_errors__WEBPACK_IMPORTED_MODULE_0__","load3DS","loadDataCollector","dataCollector","loadPaypalCheckout","loadVisaCheckout","loadGooglePayment","googlePayment","BraintreeSDKCreator","_braintreeScriptLoader","_dataCollectors","_clientToken","_common_error_errors__WEBPACK_IMPORTED_MODULE_1__","authorization","_paypal","_3ds","cached","kount","getVisaCheckout","_visaCheckout","getGooglePaymentComponent","_googlePay","_teardown","mod","Timeout","_delay","_resolve","_promise","onComplete","callback","_timeoutToken","clearTimeout","start","setTimeout","ShippingStrategyActionCreator","_shipping_strategy_actions__WEBPACK_IMPORTED_MODULE_3__","UpdateAddressRequested","UpdateAddressSucceeded","UpdateAddressFailed","SelectOptionRequested","SelectOptionSucceeded","SelectOptionFailed","mergedOptions","mapFromInternalAddress","addressLine1","addressLine2","province","provinceCode","postCode","mapToInternalCustomer","_address__WEBPACK_IMPORTED_MODULE_0__","isGuest","fullName","AmountTransformer","_dp","Math","floor","pow","mapToInternalCoupon","couponTypes","displayName","couponType","mapToInternalGiftCertificate","remainingBalance","remaining","balance","purchaseDate","mapToInternalOrder","_cart__WEBPACK_IMPORTED_MODULE_1__","_cart__WEBPACK_IMPORTED_MODULE_2__","customerCanBeCreated","isDefaultOrderPayment","mapToInternalPaymentStatus","helpText","instructions","returnUrl","mapToInteralOrderPayment","baseAmount","_coupon__WEBPACK_IMPORTED_MODULE_3__","mapToGiftCertificates","socialData","socialDataObject","digitalItems","socialMedia","image","link","shareText","sharingLink","channelName","channel","channelCode","mapToInternalSocialData","mapToInternalSocialDataList","hasDigitalItems","isDownloadable","isComplete","mapToStoreCredit","orderAmount","orderAmountAsInteger","ShippingStrategy","AmazonPayShippingStrategy","_createAddressBook","optionId","onAddressSelect","AddressBook","_synchronizeShippingAddress","shipping_strategy_actions","shipping_strategy","GooglePayBraintreeShippingStrategy","DefaultShippingStrategy","createShippingStrategyRegistry","consignmentRequestSender","consignmentActionCreator","amazon_pay_shipping_strategy","googlepay_braintree_shipping_strategy","default_shipping_strategy","omitPrivate","omitDeep","isInternalAddressEqual","ignoredKeys","customerStrategyReducer","customer_strategy_actions","SignInRequested","SignInSucceeded","SignInFailed","SignOutRequested","SignOutSucceeded","SignOutFailed","shippingStrategyReducer","mapToInternalAddress","addressId","isBillingAddressLike","PaymentMethodInvalidError","OrderRequestSender","OrderActionCreator","_orderRequestSender","rxjs_Observable__WEBPACK_IMPORTED_MODULE_7__","_order_actions__WEBPACK_IMPORTED_MODULE_10__","rxjs_observable_defer__WEBPACK_IMPORTED_MODULE_3__","_getCurrentOrderId","rxjs_observable_concat__WEBPACK_IMPORTED_MODULE_2__","rxjs_observable_of__WEBPACK_IMPORTED_MODULE_5__","SubmitOrderRequested","rxjs_observable_from__WEBPACK_IMPORTED_MODULE_4__","_mapToOrderRequestBody","customerMessage","rxjs_operators__WEBPACK_IMPORTED_MODULE_6__","_common_error__WEBPACK_IMPORTED_MODULE_8__","SubmitOrderFailed","FinalizeOrderRequested","FinalizeOrderFailed","CartComparator","cartA","cartB","_normalize","cartAmount","giftWrapping","CouponActionCreator","_couponRequestSender","rxjs_Observable__WEBPACK_IMPORTED_MODULE_1__","_common_error_errors__WEBPACK_IMPORTED_MODULE_2__","_coupon_actions__WEBPACK_IMPORTED_MODULE_3__","CouponRequestSender","couponCode","_checkout__WEBPACK_IMPORTED_MODULE_0__","CustomerStrategyActionCreator","_customer_strategy_actions__WEBPACK_IMPORTED_MODULE_2__","tslib_1","lodash_1","is_promise_1","timeout_1","RequestSender","_requestFactory","_payloadTransformer","_cookie","_options","sendRequest","requestOptions","_mergeDefaultOptions","createRequest","_prependHost","requestHandler","toResponse","onload","onerror","onabort","ontimeout","abort","send","toRequestBody","__assign","patch","defaultOptions","csrfToken","merge","test","CustomerActionCreator","_customerRequestSender","rxjs_observable_of__WEBPACK_IMPORTED_MODULE_3__","_customer_actions__WEBPACK_IMPORTED_MODULE_6__","SignInCustomerRequested","rxjs_observable_from__WEBPACK_IMPORTED_MODULE_2__","rxjs_operators__WEBPACK_IMPORTED_MODULE_4__","SignInCustomerSucceeded","_common_error__WEBPACK_IMPORTED_MODULE_5__","SignInCustomerFailed","SignOutCustomerRequested","SignOutCustomerFailed","CustomerRequestSender","GiftCertificateActionCreator","_giftCertificateRequestSender","_gift_certificate_actions__WEBPACK_IMPORTED_MODULE_3__","GiftCertificateRequestSender","giftCertificateCode","ShippingCountryActionCreator","_shippingCountryRequestSender","ShippingCountryRequestSender","NotImplementedError","CustomerStrategy","AmazonPayCustomerStrategy","_remoteCheckoutRequestSender","not_implemented_error","size","useAmazonAddressBook","_handleAuthorization","generateToken","Login","popup","tokenPrefix","trackAuthorizationEvent","customer_strategy","BraintreeVisaCheckoutCustomerStrategy","_buttonClassName","signInButton","visibility","buttonClass","_insertVisaCheckoutButton","visaCheckoutButton","createElement","className","innerHTML","ChasePayCustomerStrategy","chasePayOptions","JPMC","isChasePayUp","insertButtons","EventType","START_CHECKOUT","sessionId","COMPLETE_CHECKOUT","requestId","_reloadPage","fromChasePay","SquareCustomerStrategy","MasterpassCustomerStrategy","masterpassOptions","Masterpass","_signInButton","src","GooglePayBraintreeCustomerStrategy","DefaultCustomerStrategy","_customerActionCreator","createCustomerStrategyRegistry","remoteCheckoutRequestSender","amazon_pay_customer_strategy","braintree_visacheckout_customer_strategy","chasepay_customer_strategy","square_customer_strategy","masterpass_customer_strategy","googlepay_braintree_customer_strategy","default_customer_strategy","customer_action_creator","customer_request_sender","TimeoutError","bindDecorator","bindMethodDecorator","bindClassDecorator","boundMethod","ContentType","ConfigActionCreator","_configRequestSender","_config_actions__WEBPACK_IMPORTED_MODULE_2__","ConfigRequestSender","X-API-INTERNAL","INTERNAL_USE_ONLY","MissingDataErrorType","MissingDataError","MissingOrderConfig","getErrorMessage","_standard_error__WEBPACK_IMPORTED_MODULE_1__","throwErrorAction","isErrorAction","rxjs_observable_of__WEBPACK_IMPORTED_MODULE_2__","rxjs_observable_throw__WEBPACK_IMPORTED_MODULE_3__","NotInitializedErrorType","NotInitializedError","BillingAddressActionCreator","billingAddressRequestBody","existingBillingAddressRequestBody","_billing_address_actions__WEBPACK_IMPORTED_MODULE_5__","_createOrUpdateBillingAddress","createAddress","BillingAddressRequestSender","InvalidArgumentError","Registry","_factories","_instances","_getInstance","_error_errors__WEBPACK_IMPORTED_MODULE_1__","hasInstance","PaymentMethodActionCreator","_payment_method_actions__WEBPACK_IMPORTED_MODULE_2__","sessionHash","PaymentMethodRequestSender","RemoteCheckoutRequestSender","methodName","RemoteCheckoutActionCreator","_remote_checkout_action_types__WEBPACK_IMPORTED_MODULE_2__","AmazonPayScriptLoader","onPaymentReady","region","toLowerCase","_configureWidget","onLoginReady","setClientId","clientId","setUseCookie","onAmazonLoginReady","onAmazonPaymentsReady","toFormUrlEncoded","encodeURIComponent","create_request_sender_1","createRequestSender","create_timeout_1","createTimeout","request_sender_1","cookie","payload_transformer_1","request_factory_1","JSON_CONTENT_TYPE_REGEXP","PayloadTransformer","contentType","_getHeader","xhr","_parseResponseHeaders","getAllResponseHeaders","_parseResponseBody","responseText","rawHeaders","parts","shift","queryString","RequestFactory","XMLHttpRequest","_configureRequest","open","_formatUrl","_configureRequestHeaders","withCredentials","setRequestHeader","delay","GooglePayBraintreeInitializer","googleBraintreePaymentInstance","_googlePaymentInstance","_createGooglePayPayload","_common_error_errors_standard_error__WEBPACK_IMPORTED_MODULE_1__","androidPayCards","lastTwo","binData","googlePayBraintreePaymentDataRequest","cardRequirements","billingAddressFormat","createPaymentDataRequest","googlePayBraintreeDataRequestV1","braintree:apiVersion","braintree:authorizationFingerprint","paymentMethodTokenizationParameters","braintree:merchantId","braintree:sdkVersion","RemoteCheckoutSynchronizationError","GooglePayScriptLoader","google","PaypalScriptLoader","LanguageService","_logger","_transformConfig","locales","translations","_locale","_locales","_translations","_formatters","mapKeys","translationKey","KEY_PREFIX","getLocale","_hasTranslations","translate","prefixedKey","messageFormat","external_messageformat_","compile","_transformData","output","defaultTranslations","_flattenObject","parentKey","resultKey","createLanguageService","language_service","CurrencyFormatter","currencySettings","symbolLocation","symbol","thousandsSeparator","decimalSeparator","_decimalPlaces","parseInt","_symbolLocation","_symbol","_thousandsSeparator","_decimalSeparator","formattedNumber","_formatNumber","formattedCurrency","_formatCurrency","abs","decimalAmount","parsedIntegerAmount","decimalPadding","CurrencyService","_storeConfig","_customerFormatter","currency_formatter","shopperCurrency","_storeFormatter","toCustomerCurrency","exchangeRate","parseFloat","toStoreCurrency","createCurrencyService","currency_service","ButtonType","ButtonColor","googlepay_payment_processor_GooglePayPaymentProcessor","GooglePayPaymentProcessor","_googlePayScriptLoader","_googlePayInitializer","_googlePaymentsClient","_googlePaymentDataRequest","onClick","buttonType","buttonColor","Short","Default","googlePaymentsClient","isReadyToPay","loadPaymentData","googlePaymentDataRequest","tokenizedPayload","_postForm","_updateBillingAddress","_mapGooglePayAddressToShippingAddress","googlePay","googlePayPaymentDataRequest","_getGooglePaymentsClient","_getCardInformation","api","PaymentsClient","_mapGooglePayAddressToBillingAddress","info","companyName","address3","locality","administrativeArea","phoneNumber","postPaymentData","remoteBillingAddress","googlePayAddressMapped","getEnvironment","process","NODE_ENV","e","VisaCheckoutScriptLoader","V","ChasePayScriptLoader","MasterpassScriptLoader","createGooglePayBraintreePaymentProcessor","_node_modules_bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_2__","___WEBPACK_IMPORTED_MODULE_1__","_billing__WEBPACK_IMPORTED_MODULE_4__","braintreeScitpLoader","_braintree__WEBPACK_IMPORTED_MODULE_5__","_braintree__WEBPACK_IMPORTED_MODULE_6__","googlePayBraintreeInitializer","___WEBPACK_IMPORTED_MODULE_7__","___WEBPACK_IMPORTED_MODULE_8__","___WEBPACK_IMPORTED_MODULE_9__","ConsoleLogger","_console","log","messages","_logToConsole","debug","NoopLogger","logger","isEnabled","console_logger","console","noop_logger","createLogger","getDefaultLogger","BraintreeVisaCheckoutPaymentProcessor","createInitOptions","paymentRequest","braintreeVisaCheckout","_toVisaCheckoutAddress","userData","userEmail","_getAddress","extendedAddress","createBraintreeVisaCheckoutPaymentProcessor","braintree_visacheckout_payment_processor"],"mappings":"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AAS,aAAc,WAC5B,WAAI7L,GACA1b,EACAob,EACAC,KAIR6J,EAASqC,SAAS,SAAU,WACxB,WAAIK,GACA5nB,EACAob,EACAqL,EACAG,EACA,IAAIiB,GAAmBxC,MAI/BH,EAASqC,SAAS,SAAU,WACxB,WAAIO,GACA9nB,EACAob,KAIR8J,EAASqC,SAAS,UAAW,WACzB,WAAIQ,GACA/nB,EACAob,KAIR8J,EAASqC,SAAS,UAAW,WACzB,WAAIS,GACAhoB,EACAob,EACAC,KAIR6J,EAASqC,SAAS,SAAU,WACxB,WAAIU,GACAjoB,EACAob,EACAC,KAIR6J,EAASqC,SAAS,gBAAiB,WAC/B,WAAIW,GACAloB,EACAob,EACA,IAAI+M,GAAA,EAAmB9C,MAI/BH,EAASqC,SAAS,sBAAuB,WACrC,WAAIW,GACAloB,EACAob,EACA,IAAI+M,GAAA,EAAmB9C,MAI/BH,EAASqC,SAAS,UAAW,WACzB,WAAIa,GACApoB,EACAob,EACAC,EACAvgB,OAAAutB,EAAA,iBAAAvtB,MAIRoqB,EAASqC,SAAS,WAAY,WAC1B,WAAIe,GACAtoB,EACAmnB,EACA/L,EACAC,EACAoL,EACAY,EACApC,EACA,IAAIsD,GAAmBlD,MAI/BH,EAASqC,SAAS,wBAAyB,WACvC,WAAIiB,GACAxoB,EACAob,KAIR8J,EAASqC,SAAS,YAAa,WAC3B,WAAIkB,GACAzoB,EACAob,EACAC,EACAoL,EACAf,KAIRR,EAASqC,SAAS,kBAAmB,WACjC,WAAImB,GACA1oB,EACAob,EACAC,EACAoL,EACAf,KAIRR,EAASqC,SAAS,wBAAyB,WACvC,WAAImB,GACA1oB,EACAob,EACAC,EACAoL,EACAf,GACA,KAIRR,EAASqC,SAAS,wBAAyB,WACvC,WAAIoB,GACA3oB,EACAmnB,EACAV,EACAY,EACAhM,EACAD,EACAtgB,OAAA8tB,GAAA,EAAA9tB,CAA4CuqB,EAAcJ,GAC1D,IAAI4D,GAAA,EAAyBxD,MAIrCH,EAASqC,SAAS,WAAY,WAC1B,WAAIuB,GACA9oB,EACAmnB,EACA/L,EACAC,EACAoL,EACAY,EACApC,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","file":"checkout-sdk.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 178);\n","module.exports = require(\"tslib\");","module.exports = require(\"@bigcommerce/data-store\");","module.exports = require(\"lodash\");","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nimport { ConsignmentMeta } from './consignment';\n\nexport enum ConsignmentActionType {\n    CreateConsignmentsRequested = 'CREATE_CONSIGNMENTS_REQUESTED',\n    CreateConsignmentsSucceeded = 'CREATE_CONSIGNMENTS_SUCCEEDED',\n    CreateConsignmentsFailed = 'CREATE_CONSIGNMENTS_FAILED',\n\n    UpdateConsignmentRequested = 'UPDATE_CONSIGNMENT_REQUESTED',\n    UpdateConsignmentSucceeded = 'UPDATE_CONSIGNMENT_SUCCEEDED',\n    UpdateConsignmentFailed = 'UPDATE_CONSIGNMENT_FAILED',\n\n    DeleteConsignmentRequested = 'DELETE_CONSIGNMENT_REQUESTED',\n    DeleteConsignmentSucceeded = 'DELETE_CONSIGNMENT_SUCCEEDED',\n    DeleteConsignmentFailed = 'DELETE_CONSIGNMENT_FAILED',\n\n    UpdateShippingOptionRequested = 'UPDATE_SHIPPING_OPTION_REQUESTED',\n    UpdateShippingOptionSucceeded = 'UPDATE_SHIPPING_OPTION_SUCCEEDED',\n    UpdateShippingOptionFailed = 'UPDATE_SHIPPING_OPTION_FAILED',\n\n    LoadShippingOptionsRequested = 'LOAD_SHIPPING_OPTIONS_REQUESTED',\n    LoadShippingOptionsSucceeded = 'LOAD_SHIPPING_OPTIONS_SUCCEEDED',\n    LoadShippingOptionsFailed = 'LOAD_SHIPPING_OPTIONS_FAILED',\n}\n\nexport type ConsignmentAction =\n    CreateConsignmentsAction |\n    UpdateConsignmentAction |\n    DeleteConsignmentAction |\n    UpdateShippingOptionAction |\n    LoadShippingOptionsAction;\n\nexport type CreateConsignmentsAction =\n    CreateConsignmentsRequestedAction |\n    CreateConsignmentsSucceededAction |\n    CreateConsignmentsFailedAction;\n\nexport type UpdateConsignmentAction =\n    UpdateConsignmentRequestedAction |\n    UpdateConsignmentSucceededAction |\n    UpdateConsignmentFailedAction;\n\nexport type DeleteConsignmentAction =\n    DeleteConsignmentRequestedAction |\n    DeleteConsignmentSucceededAction |\n    DeleteConsignmentFailedAction;\n\nexport type UpdateShippingOptionAction =\n    UpdateShippingOptionRequestedAction |\n    UpdateShippingOptionSucceededAction |\n    UpdateShippingOptionFailedAction;\n\nexport type LoadShippingOptionsAction =\n    LoadShippingOptionsRequestedAction |\n    LoadShippingOptionsSucceededAction |\n    LoadShippingOptionsFailedAction;\n\nexport interface CreateConsignmentsRequestedAction extends Action {\n    type: ConsignmentActionType.CreateConsignmentsRequested;\n}\n\nexport interface CreateConsignmentsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.CreateConsignmentsSucceeded;\n}\n\nexport interface CreateConsignmentsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.CreateConsignmentsFailed;\n}\n\nexport interface UpdateConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentRequested;\n}\n\nexport interface UpdateConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentSucceeded;\n}\n\nexport interface UpdateConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentFailed;\n}\n\nexport interface DeleteConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentRequested;\n}\n\nexport interface DeleteConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentSucceeded;\n}\n\nexport interface DeleteConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentFailed;\n}\n\nexport interface UpdateShippingOptionRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionRequested;\n}\n\nexport interface UpdateShippingOptionSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionSucceeded;\n}\n\nexport interface UpdateShippingOptionFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionFailed;\n}\n\nexport interface LoadShippingOptionsRequestedAction extends Action {\n    type: ConsignmentActionType.LoadShippingOptionsRequested;\n}\n\nexport interface LoadShippingOptionsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.LoadShippingOptionsSucceeded;\n}\n\nexport interface LoadShippingOptionsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.LoadShippingOptionsFailed;\n}\n","module.exports = require(\"rxjs/Observable\");","import { Action } from '@bigcommerce/data-store';\n\nexport enum ShippingStrategyActionType {\n    UpdateAddressFailed = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_FAILED',\n    UpdateAddressRequested = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_REQUESTED',\n    UpdateAddressSucceeded = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_SUCCEEDED',\n    SelectOptionFailed = 'SHIPPING_STRATEGY_SELECT_OPTION_FAILED',\n    SelectOptionRequested = 'SHIPPING_STRATEGY_SELECT_OPTION_REQUESTED',\n    SelectOptionSucceeded = 'SHIPPING_STRATEGY_SELECT_OPTION_SUCCEEDED',\n    InitializeFailed = 'SHIPPING_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'SHIPPING_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'SHIPPING_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'SHIPPING_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'SHIPPING_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'SHIPPING_STRATEGY_DEINITIALIZE_SUCCEEDED',\n}\n\nexport type ShippingStrategyAction =\n    ShippingStrategyUpdateAddressAction |\n    ShippingStrategySelectOptionAction |\n    ShippingStrategyInitializeAction |\n    ShippingStrategyDeinitializeAction;\n\nexport type ShippingStrategyUpdateAddressAction =\n    UpdateAddressRequestedAction |\n    UpdateAddressSucceededAction |\n    UpdateAddressFailedAction;\n\nexport type ShippingStrategySelectOptionAction =\n    SelectOptionRequestedAction |\n    SelectOptionSucceededAction |\n    SelectOptionFailedAction;\n\nexport type ShippingStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type ShippingStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport interface UpdateAddressRequestedAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressRequested;\n}\n\nexport interface UpdateAddressSucceededAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressSucceeded;\n}\n\nexport interface UpdateAddressFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.UpdateAddressFailed;\n}\n\nexport interface SelectOptionRequestedAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionRequested;\n}\n\nexport interface SelectOptionSucceededAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionSucceeded;\n}\n\nexport interface SelectOptionFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.SelectOptionFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.DeinitializeFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum CouponActionType {\n    ApplyCouponRequested = 'APPLY_COUPON_REQUESTED',\n    ApplyCouponSucceeded = 'APPLY_COUPON_SUCCEEDED',\n    ApplyCouponFailed = 'APPLY_COUPON_FAILED',\n\n    RemoveCouponRequested = 'REMOVE_COUPON_REQUESTED',\n    RemoveCouponSucceeded = 'REMOVE_COUPON_SUCCEEDED',\n    RemoveCouponFailed = 'REMOVE_COUPON_FAILED',\n}\n\nexport type CouponAction =\n    ApplyCouponAction |\n    RemoveCouponAction;\n\nexport type ApplyCouponAction =\n    ApplyCouponRequestedAction |\n    ApplyCouponSucceededAction |\n    ApplyCouponFailedAction;\n\nexport type RemoveCouponAction =\n    RemoveCouponRequestedAction |\n    RemoveCouponSucceededAction |\n    RemoveCouponFailedAction;\n\nexport interface ApplyCouponRequestedAction extends Action {\n    type: CouponActionType.ApplyCouponRequested;\n}\n\nexport interface ApplyCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.ApplyCouponSucceeded;\n}\n\nexport interface ApplyCouponFailedAction extends Action<Error> {\n    type: CouponActionType.ApplyCouponFailed;\n}\n\nexport interface RemoveCouponRequestedAction extends Action {\n    type: CouponActionType.RemoveCouponRequested;\n}\n\nexport interface RemoveCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.RemoveCouponSucceeded;\n}\n\nexport interface RemoveCouponFailedAction extends Action<Error> {\n    type: CouponActionType.RemoveCouponFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum BillingAddressActionType {\n    UpdateBillingAddressRequested = 'UPDATE_BILLING_ADDRESS_REQUESTED',\n    UpdateBillingAddressSucceeded = 'UPDATE_BILLING_ADDRESS_SUCCEEDED',\n    UpdateBillingAddressFailed = 'UPDATE_BILLING_ADDRESS_FAILED',\n\n    ContinueAsGuestRequested = 'CONTINUE_AS_GUEST_REQUESTED',\n    ContinueAsGuestSucceeded = 'CONTINUE_AS_GUEST_SUCCEEDED',\n    ContinueAsGuestFailed = 'CONTINUE_AS_GUEST_FAILED',\n}\n\nexport type BillingAddressAction =\n    ContinueAsGuestAction |\n    UpdateBillingAddressAction;\n\nexport type UpdateBillingAddressAction =\n    UpdateBillingAddressRequested |\n    UpdateBillingAddressSucceeded |\n    UpdateBillingAddressFailed;\n\nexport type ContinueAsGuestAction =\n    ContinueAsGuestRequested |\n    ContinueAsGuestSucceeded |\n    ContinueAsGuestFailed;\n\nexport interface UpdateBillingAddressRequested extends Action {\n    type: BillingAddressActionType.UpdateBillingAddressRequested;\n}\n\nexport interface UpdateBillingAddressSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.UpdateBillingAddressSucceeded;\n}\n\nexport interface UpdateBillingAddressFailed extends Action<Error> {\n    type: BillingAddressActionType.UpdateBillingAddressFailed;\n}\n\nexport interface ContinueAsGuestRequested extends Action {\n    type: BillingAddressActionType.ContinueAsGuestRequested;\n}\n\nexport interface ContinueAsGuestSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.ContinueAsGuestSucceeded;\n}\n\nexport interface ContinueAsGuestFailed extends Action<Error> {\n    type: BillingAddressActionType.ContinueAsGuestFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum GiftCertificateActionType {\n    ApplyGiftCertificateRequested = 'APPLY_GIFT_CERTIFICATE_REQUESTED',\n    ApplyGiftCertificateSucceeded = 'APPLY_GIFT_CERTIFICATE_SUCCEEDED',\n    ApplyGiftCertificateFailed = 'APPLY_GIFT_CERTIFICATE_FAILED',\n\n    RemoveGiftCertificateRequested = 'REMOVE_GIFT_CERTIFICATE_REQUESTED',\n    RemoveGiftCertificateSucceeded = 'REMOVE_GIFT_CERTIFICATE_SUCCEEDED',\n    RemoveGiftCertificateFailed = 'REMOVE_GIFT_CERTIFICATE_FAILED',\n}\n\nexport type GiftCertificateAction =\n    ApplyGiftCertificateAction |\n    RemoveGiftCertificateAction;\n\nexport type ApplyGiftCertificateAction =\n    ApplyGiftCertificateRequestedAction |\n    ApplyGiftCertificateSucceededAction |\n    ApplyGiftCertificateFailedAction;\n\nexport type RemoveGiftCertificateAction =\n    RemoveGiftCertificateRequestedAction |\n    RemoveGiftCertificateSucceededAction |\n    RemoveGiftCertificateFailedAction;\n\nexport interface ApplyGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.ApplyGiftCertificateRequested;\n}\n\nexport interface ApplyGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.ApplyGiftCertificateSucceeded;\n}\n\nexport interface ApplyGiftCertificateFailedAction extends Action<Error> {\n    type: GiftCertificateActionType.ApplyGiftCertificateFailed;\n}\n\nexport interface RemoveGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.RemoveGiftCertificateRequested;\n}\n\nexport interface RemoveGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.RemoveGiftCertificateSucceeded;\n}\n\nexport interface RemoveGiftCertificateFailedAction extends Action<Error> {\n    type: GiftCertificateActionType.RemoveGiftCertificateFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport enum PaymentMethodActionType {\n    LoadPaymentMethodRequested = 'LOAD_PAYMENT_METHOD_REQUESTED',\n    LoadPaymentMethodSucceeded = 'LOAD_PAYMENT_METHOD_SUCCEEDED',\n    LoadPaymentMethodFailed = 'LOAD_PAYMENT_METHOD_FAILED',\n\n    LoadPaymentMethodsRequested = 'LOAD_PAYMENT_METHODS_REQUESTED',\n    LoadPaymentMethodsSucceeded = 'LOAD_PAYMENT_METHODS_SUCCEEDED',\n    LoadPaymentMethodsFailed = 'LOAD_PAYMENT_METHODS_FAILED',\n}\n\nexport type PaymentMethodAction = LoadPaymentMethodAction | LoadPaymentMethodsAction;\n\nexport type LoadPaymentMethodAction =\n    LoadPaymentMethodRequestedAction |\n    LoadPaymentMethodSucceededAction |\n    LoadPaymentMethodFailedAction;\n\nexport type LoadPaymentMethodsAction =\n    LoadPaymentMethodsRequestedAction |\n    LoadPaymentMethodsSucceededAction |\n    LoadPaymentMethodsFailedAction;\n\nexport interface LoadPaymentMethodRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodRequested;\n}\n\nexport interface LoadPaymentMethodSucceededAction extends Action<PaymentMethod> {\n    type: PaymentMethodActionType.LoadPaymentMethodSucceeded;\n}\n\nexport interface LoadPaymentMethodFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodFailed;\n}\n\nexport interface LoadPaymentMethodsRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodsRequested;\n}\n\nexport interface LoadPaymentMethodsSucceededAction extends Action<PaymentMethod[], PaymentMethodMeta> {\n    type: PaymentMethodActionType.LoadPaymentMethodsSucceeded;\n}\n\nexport interface LoadPaymentMethodsFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodsFailed;\n}\n","export const INITIALIZE_REMOTE_BILLING_REQUESTED = 'INITIALIZE_REMOTE_BILLING_REQUESTED';\nexport const INITIALIZE_REMOTE_BILLING_SUCCEEDED = 'INITIALIZE_REMOTE_BILLING_SUCCEEDED';\nexport const INITIALIZE_REMOTE_BILLING_FAILED = 'INITIALIZE_REMOTE_BILLING_FAILED';\n\nexport const INITIALIZE_REMOTE_SHIPPING_REQUESTED = 'INITIALIZE_REMOTE_SHIPPING_REQUESTED';\nexport const INITIALIZE_REMOTE_SHIPPING_SUCCEEDED = 'INITIALIZE_REMOTE_SHIPPING_SUCCEEDED';\nexport const INITIALIZE_REMOTE_SHIPPING_FAILED = 'INITIALIZE_REMOTE_SHIPPING_FAILED';\n\nexport const INITIALIZE_REMOTE_PAYMENT_REQUESTED = 'INITIALIZE_REMOTE_PAYMENT_REQUESTED';\nexport const INITIALIZE_REMOTE_PAYMENT_SUCCEEDED = 'INITIALIZE_REMOTE_PAYMENT_SUCCEEDED';\nexport const INITIALIZE_REMOTE_PAYMENT_FAILED = 'INITIALIZE_REMOTE_PAYMENT_FAILED';\n\nexport const LOAD_REMOTE_SETTINGS_REQUESTED = 'LOAD_REMOTE_SETTINGS_REQUESTED';\nexport const LOAD_REMOTE_SETTINGS_SUCCEEDED = 'LOAD_REMOTE_SETTINGS_SUCCEEDED';\nexport const LOAD_REMOTE_SETTINGS_FAILED = 'LOAD_REMOTE_SETTINGS_FAILED';\n\nexport const SIGN_OUT_REMOTE_CUSTOMER_REQUESTED = 'SIGN_OUT_REMOTE_CUSTOMER_REQUESTED';\nexport const SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED = 'SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED';\nexport const SIGN_OUT_REMOTE_CUSTOMER_FAILED = 'SIGN_OUT_REMOTE_CUSTOMER_FAILED';\n\nexport const UPDATE_REMOTE_CHECKOUT = 'UPDATE_REMOTE_CHECKOUT';\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadPaymentMethodAction } from '../payment';\n\nexport enum CheckoutButtonActionType {\n    InitializeButtonFailed = 'INITIALIZE_BUTTON_FAILED',\n    InitializeButtonRequested = 'INITIALIZE_BUTTON_REQUESTED',\n    InitializeButtonSucceeded = 'INITIALIZE_BUTTON_SUCCEEDED',\n\n    DeinitializeButtonFailed = 'DEINITIALIZE_BUTTON_FAILED',\n    DeinitializeButtonRequested = 'DEINITIALIZE_BUTTON_REQUESTED',\n    DeinitializeButtonSucceeded = 'DEINITIALIZE_BUTTON_SUCCEEDED',\n}\n\nexport type CheckoutButtonAction = InitializeButtonAction | DeinitializeButtonAction;\n\nexport type InitializeButtonAction =\n    InitializeButtonRequestedAction |\n    InitializeButtonSucceededAction |\n    InitializeButtonFailedAction |\n    LoadPaymentMethodAction;\n\nexport type DeinitializeButtonAction =\n    DeinitializeButtonRequestedAction |\n    DeinitializeButtonSucceededAction |\n    DeinitializeButtonFailedAction;\n\nexport interface CheckoutButtonActionMeta {\n    methodId: string;\n}\n\nexport interface InitializeButtonRequestedAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonRequested;\n}\n\nexport interface InitializeButtonSucceededAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonSucceeded;\n}\n\nexport interface InitializeButtonFailedAction extends Action<Error, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonFailed;\n}\n\nexport interface DeinitializeButtonRequestedAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonRequested;\n}\n\nexport interface DeinitializeButtonSucceededAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonSucceeded;\n}\n\nexport interface DeinitializeButtonFailedAction extends Action<Error, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonFailed;\n}\n","module.exports = require(\"rxjs/operators\");","module.exports = require(\"rxjs/observable/concat\");","module.exports = require(\"rxjs/observable/of\");","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport Country from './country';\nimport * as actionTypes from './country-action-types';\nimport CountryRequestSender from './country-request-sender';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class CountryActionCreator {\n    constructor(\n        private _countryRequestSender: CountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<Action<Country[]>> {\n        return Observable.create((observer: Observer<Action<Country[]>>) => {\n            observer.next(createAction(actionTypes.LOAD_COUNTRIES_REQUESTED));\n\n            this._countryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(actionTypes.LOAD_COUNTRIES_SUCCEEDED, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.LOAD_COUNTRIES_FAILED, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { CountryResponseBody } from './country-responses';\n\nexport default class CountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/store/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.type = 'order_finalization_not_required';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { defer } from 'rxjs/observable/defer';\nimport { empty } from 'rxjs/observable/empty';\nimport { of } from 'rxjs/observable/of';\nimport { catchError } from 'rxjs/operators';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { LoadOrderPaymentsAction, OrderActionCreator, OrderRequestBody } from '../order';\nimport { OrderFinalizationNotRequiredError } from '../order/errors';\n\nimport Payment from './payment';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from './payment-request-options';\nimport {\n    PaymentStrategyActionType,\n    PaymentStrategyDeinitializeAction,\n    PaymentStrategyExecuteAction,\n    PaymentStrategyFinalizeAction,\n    PaymentStrategyInitializeAction,\n    PaymentStrategyWidgetAction,\n} from './payment-strategy-actions';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport { PaymentStrategy } from './strategies';\n\nexport default class PaymentStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: PaymentStrategyRegistry,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<PaymentStrategyExecuteAction, InternalCheckoutSelectors> {\n        return store => new Observable((observer: Observer<PaymentStrategyExecuteAction>) => {\n            const state = store.getState();\n            const { payment = {} as Payment, useStoreCredit } = payload;\n            const meta = { methodId: payment.methodId };\n\n            let strategy: PaymentStrategy;\n\n            if (state.payment.isPaymentDataRequired(useStoreCredit)) {\n                const method = state.paymentMethods.getPaymentMethod(payment.methodId, payment.gatewayId);\n\n                if (!method) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                strategy = this._strategyRegistry.getByMethod(method);\n            } else {\n                strategy = this._strategyRegistry.get('nopaymentdatarequired');\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.ExecuteRequested, undefined, meta));\n\n            strategy\n                .execute(payload, { ...options, methodId: payment.methodId, gatewayId: payment.gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.ExecuteSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.ExecuteFailed, error, meta));\n                });\n        });\n    }\n\n    finalize(options?: RequestOptions): ThunkAction<PaymentStrategyFinalizeAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentStrategyActionType.FinalizeRequested)),\n            this._loadOrderPaymentsIfNeeded(store, options),\n            defer(() => {\n                const state = store.getState();\n                const payment = state.payment.getPaymentId();\n\n                if (!payment) {\n                    throw new OrderFinalizationNotRequiredError();\n                }\n\n                const method = state.paymentMethods.getPaymentMethod(payment.providerId, payment.gatewayId);\n\n                if (!method) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._strategyRegistry.getByMethod(method)\n                    .finalize({ ...options, methodId: method.id, gatewayId: method.gateway })\n                    .then(() => createAction(PaymentStrategyActionType.FinalizeSucceeded, undefined, { methodId: payment.providerId }));\n            })\n        ).pipe(\n            catchError(error => {\n                const state = store.getState();\n                const payment = state.payment.getPaymentId();\n\n                return throwErrorAction(PaymentStrategyActionType.FinalizeFailed, error, { methodId: payment && payment.providerId });\n            })\n        );\n    }\n\n    initialize(options: PaymentInitializeOptions): ThunkAction<PaymentStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<PaymentStrategyInitializeAction>) => {\n            const state = store.getState();\n            const { methodId, gatewayId } = options;\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.getByMethod(method)\n                .initialize({ ...options, methodId, gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options: PaymentRequestOptions): ThunkAction<PaymentStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<PaymentStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const { methodId, gatewayId } = options;\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.getByMethod(method)\n                .deinitialize({ ...options, methodId, gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: PaymentRequestOptions): ThunkAction<PaymentStrategyWidgetAction> {\n        return store => Observable.create((observer: Observer<PaymentStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(PaymentStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(PaymentStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(PaymentStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n\n    private _loadOrderPaymentsIfNeeded(store: ReadableCheckoutStore, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        const state = store.getState();\n        const checkout = state.checkout.getCheckout();\n\n        if (checkout && checkout.orderId) {\n            return this._orderActionCreator.loadOrderPayments(checkout.orderId, options);\n        }\n\n        return empty();\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class CartChangedError extends StandardError {\n    constructor() {\n        super('An update to your shopping cart has been detected and your available shipping costs have been updated.');\n\n        this.type = 'cart_changed';\n    }\n}\n","import { isEqual, map } from 'lodash';\n\nimport { CartComparator } from '../cart';\nimport { CartChangedError } from '../cart/errors';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { Coupon, GiftCertificate } from '../coupon';\n\nimport Checkout from './checkout';\nimport CheckoutRequestSender from './checkout-request-sender';\n\nexport default class CheckoutValidator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    validate(checkout?: Checkout, options?: RequestOptions): Promise<void> {\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        return this._checkoutRequestSender.loadCheckout(checkout.id, options)\n            .then(response => {\n                const comparator = new CartComparator();\n\n                if (checkout.grandTotal === response.body.grandTotal\n                    && this._compareCoupons(checkout.coupons, response.body.coupons)\n                    && this._compareGiftCertificates(checkout.giftCertificates, response.body.giftCertificates)\n                    && comparator.isEqual(checkout.cart, response.body.cart)\n                ) {\n                    return;\n                }\n\n                throw new CartChangedError();\n            });\n    }\n\n    private _compareCoupons(couponsA: Coupon[], couponsB: Coupon[]): boolean {\n        return isEqual(map(couponsA, 'code'), map(couponsB, 'code'));\n    }\n\n    private _compareGiftCertificates(giftCertificatesA: GiftCertificate[], giftCertificatesB: GiftCertificate[]): boolean {\n        return isEqual(map(giftCertificatesA, 'code'), map(giftCertificatesB, 'code'));\n    }\n}\n","import { ReadableDataStore } from '@bigcommerce/data-store';\nimport { some } from 'lodash';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { Registry } from '../common/registry';\nimport { RegistryOptions } from '../common/registry/registry';\n\nimport PaymentMethod from './payment-method';\nimport * as paymentMethodTypes from './payment-method-types';\nimport PaymentStrategy from './strategies/payment-strategy';\n\nexport default class PaymentStrategyRegistry extends Registry<PaymentStrategy> {\n    constructor(\n        private _store: ReadableDataStore<InternalCheckoutSelectors>,\n        options?: PaymentStrategyRegistryOptions\n    ) {\n        super(options);\n    }\n\n    getByMethod(paymentMethod?: PaymentMethod): PaymentStrategy {\n        if (!paymentMethod) {\n            return this.get();\n        }\n\n        const token = this._getToken(paymentMethod);\n        const cacheToken = paymentMethod.gateway || paymentMethod.id;\n\n        return this.get(token, cacheToken);\n    }\n\n    private _getToken(paymentMethod: PaymentMethod): string {\n        const methodId = paymentMethod.gateway || paymentMethod.id;\n\n        if (this.hasFactory(methodId)) {\n            return methodId;\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.OFFLINE) {\n            return 'offline';\n        }\n\n        if (this._isLegacyMethod(paymentMethod)) {\n            return 'legacy';\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.HOSTED) {\n            return 'offsite';\n        }\n\n        return 'creditcard';\n    }\n\n    private _isLegacyMethod(paymentMethod: PaymentMethod): boolean {\n        const config = this._store.getState().config.getStoreConfig();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        const { clientSidePaymentProviders } = config.paymentSettings;\n\n        if (!clientSidePaymentProviders || paymentMethod.gateway === 'adyen') {\n            return false;\n        }\n\n        return !some(clientSidePaymentProviders, id =>\n            paymentMethod.id === id || paymentMethod.gateway === id\n        );\n    }\n}\n\nexport interface PaymentStrategyRegistryOptions extends RegistryOptions {\n    clientSidePaymentProviders?: string[];\n}\n","import { PaymentInstrument, VaultedInstrument } from './payment';\n\nexport default function isVaultedInstrument(instrument: PaymentInstrument): instrument is VaultedInstrument {\n    return Boolean((instrument as VaultedInstrument).instrumentId);\n}\n","export default interface SquarePaymentForm {\n    build(): void;\n    requestCardNonce(): void;\n    setPostalCode(postalCode: string): void;\n}\n\nexport interface SquarePaymentFormConstructor {\n    new(options: SquareFormOptions): SquarePaymentForm;\n}\n\nexport interface SquareFormOptions {\n    applicationId: string;\n    env: string;\n    locationId: string;\n    inputClass?: string;\n    inputStyles?: string[];\n    callbacks?: SquareFormCallbacks;\n    cardNumber: SquareFormElement;\n    cvv: SquareFormElement;\n    expirationDate: SquareFormElement;\n    postalCode: SquareFormElement;\n    masterpass: SquareFormElement;\n}\nexport interface LineItem {\n    label: string;\n    amount: string;\n    pending: boolean;\n}\n\nexport interface SquarePaymentRequest {\n    requestShippingAddress: boolean;\n    requestBillingInfo: boolean;\n    shippingContact?: Contact;\n    countryCode: string;\n    currencyCode: string;\n    lineItems?: LineItem[];\n    total: LineItem;\n}\n\nexport interface NonceGenerationError {\n    type: string;\n    message: string;\n    field: string;\n}\n\nexport interface CardData {\n    card_brand: CardBrand;\n    last_4: number;\n    exp_month: number;\n    exp_year: number;\n    billing_postal_code: string;\n    digital_wallet_type: DigitalWalletType;\n}\n\nexport interface Contact {\n    familyName: string;\n    givenName: string;\n    email: string;\n    country: string;\n    countryName: string;\n    region: string;\n    city: string;\n    addressLines: string[];\n    postalCode: string;\n    phone: string;\n}\n\nexport enum CardBrand {\n    americanExpress = 'AMERICAN_EXPRESS',\n    discover = 'DISCOVER',\n    discoverDiners = 'DISCOVER_DINERS',\n    JCB = 'JCB',\n    masterCard = 'MASTERCARD',\n    unionPay = 'CHINA_UNIONPAY',\n    unknown = 'OTHER_BRAND',\n    visa = 'VISA',\n    squareGift = 'SQUARE_GIFT_CARD',\n}\n\nexport enum DigitalWalletType {\n    applePay = 'APPLEPAY',\n    masterpass = 'MASTERPASS',\n    none = 'NONE',\n}\n\n/**\n * Configures any form element provided by Square payment.\n */\nexport interface SquareFormElement {\n    /**\n     * The ID of the container which the form element should insert into.\n     */\n    elementId: string;\n\n    /**\n     * The placeholder text to use for the form element, if provided.\n     */\n    placeholder?: string;\n}\n\nexport interface SquareFormCallbacks {\n    paymentFormLoaded?(form: SquarePaymentForm): void;\n    unsupportedBrowserDetected?(): void;\n    cardNonceResponseReceived?(\n        errors?: NonceGenerationError[],\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): void;\n    methodsSupported?(methods: { [key: string]: boolean }): void;\n    createPaymentRequest?(): void;\n}\n\nexport type SquareFormFactory = (options: SquareFormOptions) => SquarePaymentForm;\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { pick } from 'lodash';\nimport { concat } from 'rxjs/observable/concat';\nimport { from } from 'rxjs/observable/from';\nimport { of } from 'rxjs/observable/of';\nimport { catchError, switchMap } from 'rxjs/operators';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { mapToInternalAddress } from '../address';\nimport { mapToInternalCart } from '../cart';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { InvalidArgumentError, StandardError } from '../common/error/errors';\nimport { mapToInternalCustomer } from '../customer';\nimport { mapToInternalOrder, OrderActionCreator } from '../order';\nimport { mapToInternalShippingOption } from '../shipping';\n\nimport isVaultedInstrument from './is-vaulted-instrument';\nimport Payment from './payment';\nimport { InitializeOffsitePaymentAction, PaymentActionType, SubmitPaymentAction } from './payment-actions';\nimport PaymentMethod from './payment-method';\nimport PaymentMethodSelector from './payment-method-selector';\nimport PaymentRequestBody from './payment-request-body';\nimport PaymentRequestSender from './payment-request-sender';\n\nexport default class PaymentActionCreator {\n    constructor(\n        private _paymentRequestSender: PaymentRequestSender,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    submitPayment(payment: Payment): ThunkAction<SubmitPaymentAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentActionType.SubmitPaymentRequested)),\n            from(this._paymentRequestSender.submitPayment(\n                this._getPaymentRequestBody(payment, store.getState())\n            ))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._orderActionCreator.loadCurrentOrder()(store),\n                        of(createAction(PaymentActionType.SubmitPaymentSucceeded, body))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(PaymentActionType.SubmitPaymentFailed, error))\n        );\n    }\n\n    initializeOffsitePayment(payment: Payment): ThunkAction<InitializeOffsitePaymentAction, InternalCheckoutSelectors> {\n        return store =>\n            Observable.create((observer: Observer<InitializeOffsitePaymentAction>) => {\n                observer.next(createAction(PaymentActionType.InitializeOffsitePaymentRequested));\n\n                return this._paymentRequestSender.initializeOffsitePayment(\n                    this._getPaymentRequestBody(payment, store.getState())\n                )\n                    .then(() => {\n                        observer.next(createAction(PaymentActionType.InitializeOffsitePaymentSucceeded));\n                        observer.complete();\n                    })\n                    .catch(() => {\n                        observer.error(createErrorAction(PaymentActionType.InitializeOffsitePaymentFailed));\n                    });\n            });\n    }\n\n    private _getPaymentRequestBody(payment: Payment, state: InternalCheckoutSelectors): PaymentRequestBody {\n        if (!payment.paymentData) {\n            throw new InvalidArgumentError('Unable to construct payment request because `payment.paymentData` is not provided.');\n        }\n\n        const billingAddress = state.billingAddress.getBillingAddress();\n        const checkout = state.checkout.getCheckout();\n        const customer = state.customer.getCustomer();\n        const order = state.order.getOrder();\n        const paymentMethod = this._getPaymentMethod(payment, state.paymentMethods);\n        const shippingAddress = state.shippingAddress.getShippingAddress();\n        const consignments = state.consignments.getConsignments();\n        const shippingOption = state.consignments.getShippingOption();\n        const storeConfig = state.config.getStoreConfig();\n        const contextConfig = state.config.getContextConfig();\n        const instrumentMeta = state.instruments.getInstrumentsMeta();\n        const paymentMeta = state.paymentMethods.getPaymentMethodsMeta();\n        const orderMeta = state.order.getOrderMeta();\n        const internalCustomer = customer && billingAddress && mapToInternalCustomer(customer, billingAddress);\n\n        const authToken = instrumentMeta && isVaultedInstrument(payment.paymentData) ?\n            `${state.payment.getPaymentToken()}, ${instrumentMeta.vaultAccessToken}` :\n            state.payment.getPaymentToken();\n\n        if (!authToken) {\n            throw new StandardError();\n        }\n\n        return {\n            authToken,\n            paymentMethod,\n            customer: internalCustomer,\n            billingAddress: billingAddress && mapToInternalAddress(billingAddress),\n            shippingAddress: shippingAddress && mapToInternalAddress(shippingAddress, consignments),\n            shippingOption: shippingOption && mapToInternalShippingOption(shippingOption, true),\n            cart: checkout && mapToInternalCart(checkout),\n            order: order && mapToInternalOrder(order, orderMeta),\n            orderMeta,\n            payment: payment.paymentData,\n            quoteMeta: {\n                request: {\n                    ...paymentMeta,\n                    geoCountryCode: contextConfig && contextConfig.geoCountryCode,\n                },\n            },\n            source: 'bigcommerce-checkout-js-sdk',\n            store: pick(storeConfig && storeConfig.storeProfile, [\n                'storeHash',\n                'storeId',\n                'storeLanguage',\n                'storeName',\n            ]),\n        };\n    }\n\n    private _getPaymentMethod(payment: Payment, paymentMethodSelector: PaymentMethodSelector): PaymentMethod | undefined {\n        const paymentMethod = paymentMethodSelector.getPaymentMethod(payment.methodId, payment.gatewayId);\n\n        if (!paymentMethod) {\n            return;\n        }\n\n        if (paymentMethod.method === 'multi-option' && !paymentMethod.gateway) {\n            return { ...paymentMethod, gateway: paymentMethod.id };\n        }\n\n        if (paymentMethod.initializationData && paymentMethod.initializationData.gateway) {\n            return { ...paymentMethod, id: paymentMethod.initializationData.gateway };\n        }\n\n        return paymentMethod;\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentRequestBody from './payment-request-body';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class PaymentRequestSender {\n    /**\n     * @constructor\n     * @param {BigpayClient} client\n     */\n    constructor(\n        private _client: any\n    ) {}\n\n    submitPayment(payload: PaymentRequestBody): Promise<Response> {\n        return new Promise((resolve, reject) => {\n            this._client.submitPayment(payload, (error: any, response: any) => {\n                if (error) {\n                    reject(this._transformResponse(error));\n                } else {\n                    resolve(this._transformResponse(response));\n                }\n            });\n        });\n    }\n\n    initializeOffsitePayment(payload: PaymentRequestBody): Promise<void> {\n        return new Promise(() => {\n            this._client.initializeOffsitePayment(payload);\n        });\n    }\n\n    private _transformResponse(response: any): Response {\n        return {\n            headers: {},\n            body: response.data,\n            status: response.status,\n            statusText: response.statusText,\n        };\n    }\n}\n","import { InvalidArgumentError } from '../../common/error/errors';\n\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(', ')}.`;\n        }\n\n        super(message);\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderRequestBody } from '../../order';\nimport { OrderFinalizationNotRequiredError } from '../../order/errors';\n\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../payment-request-options';\n\nexport default abstract class PaymentStrategy {\n    protected _isInitialized = false;\n\n    constructor(\n        protected _store: CheckoutStore\n    ) {}\n\n    abstract execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors>;\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = true;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = false;\n\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, CheckoutValidator, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AfterpayScriptLoader from './afterpay-script-loader';\nimport AfterpaySdk from './afterpay-sdk';\n\nexport default class AfterpayPaymentStrategy extends PaymentStrategy {\n    private _afterpaySdk?: AfterpaySdk;\n\n    constructor(\n        store: CheckoutStore,\n        private _checkoutValidator: CheckoutValidator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _afterpayScriptLoader: AfterpayScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId, options.gatewayId);\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._afterpayScriptLoader.load(paymentMethod, this._mapCountryToISO2(storeCountryName))\n            .then(afterpaySdk => {\n                this._afterpaySdk = afterpaySdk;\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        if (this._afterpaySdk) {\n            this._afterpaySdk = undefined;\n        }\n\n        return super.deinitialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paymentId = payload.payment && payload.payment.gatewayId;\n\n        if (!paymentId) {\n            throw new PaymentArgumentInvalidError(['payment.gatewayId']);\n        }\n\n        const useStoreCredit = !!payload.useStoreCredit;\n        const state = this._store.getState();\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(paymentId, { useStoreCredit })\n        )\n            .then(state => this._checkoutValidator.validate(state.checkout.getCheckout(), options))\n            .then(() => this._store.dispatch(\n                this._paymentMethodActionCreator.loadPaymentMethod(paymentId, options)\n            ))\n            .then(state => this._displayModal(storeCountryName, state.paymentMethods.getPaymentMethod(paymentId)))\n            // Afterpay will handle the rest of the flow so return a promise that doesn't really resolve\n            .then(() => new Promise<never>(() => {}));\n    }\n\n    finalize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._remoteCheckoutActionCreator.loadSettings(options.methodId))\n            .then(state => {\n                const payment = state.payment.getPaymentId();\n                const config = state.config.getContextConfig();\n                const afterpay = state.remoteCheckout.getCheckout('afterpay');\n\n                if (!payment) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config || !config.payment.token) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!afterpay || !afterpay.settings) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const orderPayload = {\n                    useStoreCredit: afterpay.settings.useStoreCredit,\n                };\n\n                const paymentPayload = {\n                    methodId: payment.providerId,\n                    paymentData: { nonce: config.payment.token },\n                };\n\n                return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n                    .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload)));\n            });\n    }\n\n    private _displayModal(countryName: string, paymentMethod?: PaymentMethod): void {\n        if (!this._afterpaySdk || !paymentMethod || !paymentMethod.clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._afterpaySdk.initialize({ countryCode: this._mapCountryToISO2(countryName)});\n        this._afterpaySdk.display({ token: paymentMethod.clientToken });\n    }\n\n    private _mapCountryToISO2(countryName: string): string {\n        switch (countryName) {\n        case 'Australia':\n            return 'AU';\n\n        case 'New Zealand':\n            return 'NZ';\n\n        case 'United States':\n            return 'US';\n\n        default:\n            return 'AU';\n        }\n    }\n}\n","import { noop } from 'lodash';\n\nimport { isInternalAddressEqual, mapFromInternalAddress, mapToInternalAddress } from '../../../address';\nimport { BillingAddressActionCreator } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, RequestError, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AmazonPayOrderReference from './amazon-pay-order-reference';\nimport AmazonPayScriptLoader from './amazon-pay-script-loader';\nimport AmazonPayWallet, { AmazonPayWalletOptions } from './amazon-pay-wallet';\nimport AmazonPayWidgetError from './amazon-pay-widget-error';\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayPaymentStrategy extends PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _walletOptions?: AmazonPayPaymentInitializeOptions;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        super(store);\n\n        this._window = window;\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        const { amazon: amazonOptions, methodId } = options;\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!amazonOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.amazon\" argument is not provided.');\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._walletOptions = amazonOptions;\n        this._paymentMethod = paymentMethod;\n\n        return new Promise((resolve, reject) => {\n            const onReady = () => {\n                this._createWallet(amazonOptions)\n                    .then(resolve)\n                    .catch(reject);\n            };\n\n            this._scriptLoader.loadWidget(paymentMethod, onReady)\n                .catch(reject);\n        })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._walletOptions = undefined;\n\n        return super.deinitialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n\n        if (!referenceId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload }, useStoreCredit = false } = payload;\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { referenceId, useStoreCredit })\n        )\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                }, options)\n            ))\n            .catch(error => {\n                if (error instanceof RequestError && error.body.type === 'provider_widget_error' && this._walletOptions) {\n                    return this._createWallet(this._walletOptions)\n                        .then(() => Promise.reject(error));\n                }\n\n                return Promise.reject(error);\n            });\n    }\n\n    private _getMerchantId(): string | undefined {\n        return this._paymentMethod && this._paymentMethod.config.merchantId;\n    }\n\n    private _getOrderReferenceId(): string | undefined {\n        const state = this._store.getState();\n        const amazon = state.remoteCheckout.getCheckout('amazon');\n\n        return amazon ? amazon.referenceId : undefined;\n    }\n\n    private _createWallet(options: AmazonPayPaymentInitializeOptions): Promise<AmazonPayWallet> {\n        return new Promise((resolve, reject) => {\n            const { container, onError = noop, onPaymentSelect = noop, onReady = noop } = options;\n            const referenceId = this._getOrderReferenceId();\n            const merchantId = this._getMerchantId();\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay Wallet widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const walletOptions: AmazonPayWalletOptions = {\n                amazonOrderReferenceId: referenceId,\n                design: { designMode: 'responsive' },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onPaymentSelect: orderReference => {\n                    this._synchronizeBillingAddress()\n                        .then(() => onPaymentSelect(orderReference))\n                        .catch(onError);\n                },\n                onReady: orderReference => {\n                    resolve();\n                    onReady(orderReference);\n                },\n            };\n\n            if (!walletOptions.amazonOrderReferenceId) {\n                walletOptions.onReady = orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                };\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.Wallet(walletOptions);\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeBillingAddress(): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializeBilling(methodId, { referenceId })\n        )\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.billing && amazon.billing.address;\n                const billingAddress = state.billingAddress.getBillingAddress();\n                const internalBillingAddress = billingAddress && mapToInternalAddress(billingAddress);\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, internalBillingAddress || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._billingAddressActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            });\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n}\n\n/**\n * A set of options that are required to initialize the Amazon Pay payment\n * method.\n *\n * When AmazonPay is initialized, a widget will be inserted into the DOM. The\n * widget has a list of payment options for the customer to choose from.\n */\nexport interface AmazonPayPaymentInitializeOptions {\n    /**\n     * The ID of a container which the payment widget should insert into.\n     */\n    container: string;\n\n    /**\n     * A callback that gets called if unable to initialize the widget or select\n     * one of the payment options.\n     *\n     * @param error - The error object describing the failure.\n     */\n    onError?(error: AmazonPayWidgetError | StandardError): void;\n\n    /**\n     * A callback that gets called when the customer selects one of the payment\n     * options provided by the widget.\n     *\n     * @param reference - The order reference provided by Amazon.\n     */\n    onPaymentSelect?(reference: AmazonPayOrderReference): void;\n\n    /**\n     * A callback that gets called when the widget is loaded and ready to be\n     * interacted with.\n     *\n     * @param reference - The order reference provided by Amazon.\n     */\n    onReady?(reference: AmazonPayOrderReference): void;\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentArgumentInvalidError } from '../errors';\nimport PaymentActionCreator from '../payment-action-creator';\nimport { PaymentRequestOptions } from '../payment-request-options';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class CreditCardPaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            );\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class PaymentMethodCancelledError extends StandardError {\n    constructor() {\n        super('Payment process was cancelled.');\n\n        this.type = 'payment_cancelled';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport PaymentMethodInvalidError from '../../errors/payment-method-invalid-error';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport KlarnaCredit, { KlarnaLoadResponse } from './klarna-credit';\nimport KlarnaScriptLoader from './klarna-script-loader';\n\nexport default class KlarnaPaymentStrategy extends PaymentStrategy {\n    private _klarnaCredit?: KlarnaCredit;\n    private _unsubscribe?: (() => void);\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _klarnaScriptLoader: KlarnaScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        return this._klarnaScriptLoader.load()\n            .then(klarnaCredit => { this._klarnaCredit = klarnaCredit; })\n            .then(() => {\n                this._unsubscribe = this._store.subscribe(\n                    () => this._isInitialized && this._loadWidget(options),\n                    state => {\n                        const checkout = state.checkout.getCheckout();\n\n                        return checkout && checkout.grandTotal;\n                    }\n                );\n\n                return this._loadWidget(options);\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._unsubscribe) {\n            this._unsubscribe();\n        }\n\n        return super.deinitialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload } } = payload;\n\n        return this._authorize()\n            .then(({ authorization_token: authorizationToken }) => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { authorizationToken })\n            ))\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                    // Note: API currently doesn't support using Store Credit with Klarna.\n                    // To prevent deducting customer's store credit, set it as false.\n                    useStoreCredit: false,\n                }, options)\n            ));\n    }\n\n    private _loadWidget(options: PaymentInitializeOptions): Promise<KlarnaLoadResponse> {\n        if (!options.klarna) {\n            throw new InvalidArgumentError('Unable to load widget because \"options.klarna\" argument is not provided.');\n        }\n\n        const { methodId, klarna: { container, onLoad } } = options;\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise<KlarnaLoadResponse>((resolve, reject) => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!this._klarnaCredit || !paymentMethod.clientToken) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                this._klarnaCredit.init({ client_token: paymentMethod.clientToken });\n\n                this._klarnaCredit.load({ container }, response => {\n                    if (onLoad) {\n                        onLoad(response);\n                    }\n\n                    if (!response.show_form) {\n                        reject(new PaymentMethodInvalidError());\n                    } else {\n                        resolve(response);\n                    }\n                });\n            }));\n    }\n\n    private _authorize(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            if (!this._klarnaCredit) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            this._klarnaCredit.authorize({}, res => {\n                if (res.approved) {\n                    return resolve(res);\n                }\n\n                if (res.show_form) {\n                    return reject(new PaymentMethodCancelledError());\n                }\n\n                reject(new PaymentMethodInvalidError());\n            });\n        });\n    }\n}\n\n/**\n * A set of options that are required to initialize the Klarna payment method.\n *\n * When Klarna is initialized, a widget will be inserted into the DOM. The\n * widget has a list of payment options for the customer to choose from.\n */\nexport interface KlarnaPaymentInitializeOptions {\n    /**\n     * The ID of a container which the payment widget should insert into.\n     */\n    container: string;\n\n    /**\n     * A callback that gets called when the widget is loaded and ready to be\n     * interacted with.\n     *\n     * @param response - The result of the initialization. It indicates whether\n     * or not the widget is loaded successfully.\n     */\n    onLoad?(response: KlarnaLoadResponse): void;\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentRequestOptions } from '../payment-request-options';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class LegacyPaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentRequestOptions } from '../payment-request-options';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class OfflinePaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const action = this._orderActionCreator.submitOrder({\n            ...payload,\n            payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n        }, options);\n\n        return this._store.dispatch(action);\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../order';\nimport { PaymentArgumentInvalidError } from '../errors';\nimport PaymentActionCreator from '../payment-action-creator';\nimport { PaymentRequestOptions } from '../payment-request-options';\nimport * as paymentStatusTypes from '../payment-status-types';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class OffsitePaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n        const orderPayload = this._shouldSubmitFullPayload(payment) ? payload : order;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.initializeOffsitePayment({ ...payment, paymentData }))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n        const status = state.payment.getPaymentStatus();\n\n        if (order && (status === paymentStatusTypes.ACKNOWLEDGE || status === paymentStatusTypes.FINALIZE)) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return super.finalize();\n    }\n\n    private _shouldSubmitFullPayload(payment?: OrderPaymentRequestBody): boolean {\n        // FIXME: A temporary workaround to support offsite payment methods\n        // where their return URL needs to be provided by the core app.\n        if (!payment) {\n            return false;\n        }\n\n        return payment.gatewayId === 'adyen' || payment.methodId === 'ccavenuemars';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class PaypalProPaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isPaymentAcknowledged()) {\n            return this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n                }, options)\n            );\n        }\n\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            );\n    }\n\n    private _isPaymentAcknowledged(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nimport PaypalScriptLoader from './paypal-script-loader';\nimport { PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalExpressPaymentStrategy extends PaymentStrategy {\n    private _paypalSdk?: PaypalSDK;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _scriptLoader: PaypalScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!this._isInContextEnabled() || this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        return this._scriptLoader.loadPaypal()\n            .then(paypal => {\n                this._paypalSdk = paypal;\n\n                if (!this._paymentMethod || !this._paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._paypalSdk.checkout.setup(this._paymentMethod.config.merchantId, {\n                    button: 'paypal-button',\n                    environment: this._paymentMethod.config.testMode ? 'sandbox' : 'production',\n                });\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize();\n        }\n\n        if (this._isInContextEnabled() && this._paypalSdk) {\n            this._paypalSdk.checkout.closeFlow();\n            this._paypalSdk = undefined;\n        }\n\n        return super.deinitialize();\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paypal = this._paypalSdk;\n\n        if (this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n        }\n\n        if (!this._isInContextEnabled()) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n                .then(state => {\n                    const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                    if (redirectUrl) {\n                        window.location.assign(redirectUrl);\n                    }\n\n                    // We need to hold execution so the consumer does not redirect us somewhere else\n                    return new Promise<never>(() => {});\n                });\n        }\n\n        if (!paypal) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        paypal.checkout.initXO();\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n            .then(state => {\n                const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                if (redirectUrl) {\n                    paypal.checkout.startFlow(redirectUrl);\n                }\n\n                // We need to hold execution so the consumer does not redirect us somewhere else\n                return new Promise<never>(() => {});\n            })\n            .catch(error => {\n                paypal.checkout.closeFlow();\n\n                return Promise.reject(error);\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return super.finalize();\n    }\n\n    private _isAcknowledgedOrFinalized(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE\n            || state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE;\n    }\n\n    private _isInContextEnabled(): boolean {\n        return !!(this._paymentMethod && this._paymentMethod.config.merchantId);\n    }\n}\n","import { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { RequestError } from '../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentArgumentInvalidError } from '../errors';\nimport PaymentActionCreator from '../payment-action-creator';\nimport { PaymentRequestOptions } from '../payment-request-options';\nimport * as paymentStatusTypes from '../payment-status-types';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class SagePayPaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _formPoster: any\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            )\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                    return Promise.reject(error);\n                }\n\n                return new Promise(() => {\n                    this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                        PaReq: error.body.three_ds_result.payer_auth_request,\n                        TermUrl: error.body.three_ds_result.callback_url,\n                        MD: error.body.three_ds_result.merchant_data,\n                    });\n                });\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return super.finalize();\n    }\n}\n","import StandardError from './standard-error';\n\nexport default class UnsupportedBrowserError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unsupported browser error');\n\n        this.type = 'unsupported_browser';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\nimport { omit } from 'lodash';\n\nimport { PaymentStrategy } from '../';\nimport {\n    NonceInstrument,\n    PaymentActionCreator,\n    PaymentInitializeOptions,\n    PaymentMethodActionCreator,\n    PaymentRequestOptions,\n    PaymentStrategyActionCreator\n} from '../../';\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    StandardError,\n    TimeoutError,\n    UnsupportedBrowserError,\n} from '../../../common/error/errors';\nimport { toFormUrlEncoded } from '../../../common/http-request';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentMethod from '../../payment-method';\n\nimport { SquarePaymentForm, SquareScriptLoader } from '.';\nimport {\n    CardData,\n    Contact,\n    DigitalWalletType,\n    NonceGenerationError,\n    SquareFormElement,\n    SquareFormOptions,\n    SquarePaymentRequest\n} from './square-form';\nimport SquarePaymentInitializeOptions from './square-payment-initialize-options';\n\nexport default class SquarePaymentStrategy extends PaymentStrategy {\n    private _deferredRequestNonce?: DeferredPromise;\n    private _paymentForm?: SquarePaymentForm;\n    private _paymentMethod?: PaymentMethod;\n    private _squareOptions?: SquarePaymentInitializeOptions;\n\n    constructor(\n        store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _scriptLoader: SquareScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n        this._syncPaymentMethod(methodId);\n\n        return this._scriptLoader.load()\n            .then(createSquareForm =>\n                new Promise((resolve, reject) => {\n                    this._paymentForm = createSquareForm(\n                        this._getFormOptions(options, { resolve, reject })\n                    );\n                    this._paymentForm.build();\n                }))\n            .then(() => super.initialize(options));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment } = orderRequest;\n\n        if (!payment || !payment.methodId) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        this._syncPaymentMethod(payment.methodId);\n\n        return this._getNonceInstrument(payment.methodId)\n            .then(paymentData =>\n                this._store.dispatch(this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options))\n                .then(() =>\n                    this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n                ));\n    }\n\n    private _syncPaymentMethod(methodId: string): void {\n        const state = this._store.getState();\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n    }\n\n    private _getCountryCode(countryName: string) {\n        switch (countryName.toUpperCase()) {\n            case 'NEW ZELAND':\n                return 'NZ';\n            case 'AUSTRALIA':\n                return 'AU';\n            default:\n                return 'US';\n        }\n    }\n\n    private _getNonceInstrument(methodId: string): Promise<NonceInstrument> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (paymentMethod) {\n            const { initializationData } = paymentMethod;\n            if (initializationData && initializationData.paymentData.nonce) {\n                return Promise.resolve({ nonce: paymentMethod.initializationData.paymentData.nonce });\n            }\n        }\n\n        return new Promise<NonceInstrument>((resolve, reject) => {\n            if (!this._paymentForm) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            if (this._deferredRequestNonce) {\n                this._deferredRequestNonce.reject(new TimeoutError());\n            }\n\n            this._deferredRequestNonce = { resolve, reject };\n            this._paymentForm.requestCardNonce();\n        });\n    }\n\n    private _getFormOptions(options: PaymentInitializeOptions, deferred: DeferredPromise): SquareFormOptions {\n        const { square: squareOptions } = options;\n\n        if (!squareOptions || !this._paymentMethod) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.square\" argument is not provided.');\n        }\n\n        this._squareOptions = squareOptions;\n\n        return {\n            ...this._squareOptions,\n            ...this._paymentMethod.initializationData,\n            callbacks: {\n                cardNonceResponseReceived: (errors, nonce, cardData, billingContact, shippingContact) => {\n                    if (cardData && cardData.digital_wallet_type !== DigitalWalletType.none) {\n                        this._handleWalletNonceResponse(errors, nonce, cardData, billingContact, shippingContact);\n                    } else {\n                        this._handleCardNonceResponse(errors, nonce);\n                    }\n                },\n                createPaymentRequest: () => this._paymentRequestPayload(),\n                methodsSupported: methods => {\n                    const { masterpass } = squareOptions;\n\n                    if (masterpass) {\n                        this._showPaymentMethods(methods, masterpass);\n                    }\n                },\n                paymentFormLoaded: () => {\n                    deferred.resolve();\n                    this._setPostalCode();\n                },\n                unsupportedBrowserDetected: () => deferred.reject(new UnsupportedBrowserError()),\n            },\n        };\n    }\n\n    private _handleWalletNonceResponse(errors?: NonceGenerationError[], nonce?: string, cardData?: CardData, billingContact?: Contact, shippingContact?: Contact): void {\n        if (errors && this._squareOptions && this._squareOptions.onError) {\n            this._squareOptions.onError(errors);\n        } else if (nonce && this._paymentMethod) {\n            this._paymentInstrumentSelected(this._paymentMethod.id, nonce, cardData, billingContact, shippingContact)\n                .then(() => this._squareOptions && this._squareOptions.onPaymentSelect && this._squareOptions.onPaymentSelect())\n                .catch(error => this._squareOptions && this._squareOptions.onError && this._squareOptions.onError(error));\n        }\n    }\n\n    private _handleCardNonceResponse(errors?: NonceGenerationError[], nonce?: string): void {\n        if (!this._deferredRequestNonce) {\n            throw new StandardError();\n        }\n\n        if (errors && this._squareOptions && this._squareOptions.onError) {\n            this._squareOptions.onError(errors);\n            this._deferredRequestNonce.reject(errors);\n        } else if (nonce) {\n            this._deferredRequestNonce.resolve({ nonce });\n        }\n    }\n\n    private _paymentInstrumentSelected(\n        methodId: string,\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): Promise<InternalCheckoutSelectors> {\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._setExternalCheckoutData(nonce, cardData, billingContact, shippingContact)\n            .then(() =>\n                Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _paymentRequestPayload(): SquarePaymentRequest {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return {\n            requestShippingAddress: true,\n            requestBillingInfo: true,\n            currencyCode: storeConfig.currency.code,\n            countryCode: this._getCountryCode(storeConfig.storeProfile.storeCountry),\n            total: {\n                label: storeConfig.storeProfile.storeName,\n                amount: String(checkout.subtotal),\n                pending: false,\n            },\n        };\n    }\n\n    private _setExternalCheckoutData(nonce?: string, cardData?: CardData, billingContact?: Contact, shippingContact?: Contact): Promise<Response<any>> {\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: toFormUrlEncoded({\n                nonce,\n                provider: 'squarev2',\n                action: 'set_external_checkout',\n                cardData: JSON.stringify(cardData),\n                billingContact: JSON.stringify(billingContact),\n                shippingContact: JSON.stringify(shippingContact),\n            }),\n        });\n    }\n\n    private _setPostalCode(): void {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!this._paymentForm) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (billingAddress && billingAddress.postalCode) {\n            this._paymentForm.setPostalCode(billingAddress.postalCode);\n        }\n    }\n\n    private _showPaymentMethods(methods: { [key: string]: boolean }, element: SquareFormElement): void {\n        const masterpassBtn = document.getElementById(element.elementId);\n\n        if (masterpassBtn && methods.masterpass) {\n            masterpassBtn.style.display = 'inline-block';\n        }\n    }\n}\n\nexport interface DeferredPromise {\n    resolve(resolution?: NonceInstrument): void;\n    reject(reason?: any): void;\n}\n","import { omit } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentRequestOptions } from '../payment-request-options';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class NoPaymentDataRequiredPaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options)\n        );\n    }\n}\n","import { Payment, PaymentMethodActionCreator } from '../..';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport isCreditCardLike from '../../is-credit-card-like';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport { PaymentInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\n\nexport default class BraintreeCreditCardPaymentStrategy extends PaymentStrategy {\n    private _is3dsEnabled?: boolean;\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(options.methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n                if (!paymentMethod || !paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(paymentMethod.clientToken, options.braintree);\n                this._is3dsEnabled = paymentMethod.config.is3dsEnabled;\n\n                return super.initialize(options);\n            })\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(order, options)\n        )\n            .then(state =>\n                state.payment.isPaymentDataRequired(order.useStoreCredit) && payment ?\n                    this._preparePaymentData(payment) :\n                    Promise.resolve(payment as Payment)\n            )\n            .then(payment =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment(payment))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => super.deinitialize(options));\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n\n    private _isUsingVaulting(paymentData: PaymentInstrument): boolean {\n        if (isCreditCardLike(paymentData)) {\n            return Boolean(paymentData.shouldSaveInstrument);\n        }\n\n        return isVaultedInstrument(paymentData);\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody): Promise<Payment> {\n        const { paymentData } = payment;\n        const state = this._store.getState();\n\n        if (paymentData && this._isUsingVaulting(paymentData)) {\n            return Promise.resolve(payment as Payment);\n        }\n\n        const checkout = state.checkout.getCheckout();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!billingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        const tokenizedCard = this._is3dsEnabled ?\n            this._braintreePaymentProcessor.verifyCard(payment, billingAddress, checkout.grandTotal) :\n            this._braintreePaymentProcessor.tokenizeCard(payment, billingAddress);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData }));\n    }\n}\n","import isVaultedInstrument from './is-vaulted-instrument';\nimport { CreditCardInstrument, PaymentInstrument } from './payment';\n\nexport default function isCreditCardLike(instrument: PaymentInstrument): instrument is CreditCardInstrument {\n    const card = instrument as CreditCardInstrument;\n\n    return !isVaultedInstrument(card) &&\n        typeof card.ccName === 'string' &&\n        typeof card.ccNumber === 'string' &&\n        typeof card.ccType === 'string' &&\n        typeof card.ccExpiry === 'object' &&\n        typeof card.ccExpiry.month === 'string' &&\n        typeof card.ccExpiry.year === 'string';\n    }\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\n\nexport default class BraintreePaypalPaymentStrategy extends PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor,\n        private _credit: boolean = false\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintree: braintreeOptions, methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (this._paymentMethod && this._paymentMethod.nonce) {\n            return super.initialize(options);\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(this._paymentMethod.clientToken, braintreeOptions);\n\n                return this._braintreePaymentProcessor.preloadPaypal();\n            })\n            .then(() => super.initialize(options))\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return (payment ? this._preparePaymentData(payment) : Promise.resolve(payment))\n            .then(payment => Promise.all([payment, this._store.dispatch(this._orderActionCreator.submitOrder(order, options))]))\n            .then(([payment]) => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)))\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    deinitialize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => super.deinitialize(options));\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody): Promise<Payment> {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const config = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { currency, storeProfile: { storeLanguage } } = config;\n        const { method, nonce } = this._paymentMethod;\n\n        if (nonce) {\n            return Promise.resolve({ ...payment, paymentData: { nonce, method } });\n        }\n\n        const tokenizedCard = this._braintreePaymentProcessor\n            .paypal(checkout.grandTotal, storeLanguage, currency.code, this._credit);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData: { ...paymentData, method } }));\n    }\n}\n","import {\n    PaymentActionCreator,\n    PaymentInitializeOptions,\n    PaymentMethod,\n    PaymentMethodActionCreator,\n    PaymentRequestOptions,\n    PaymentStrategyActionCreator,\n} from '../..';\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { BraintreeVisaCheckoutPaymentProcessor, VisaCheckoutScriptLoader } from '.';\nimport { VisaCheckoutPaymentSuccessPayload } from './visacheckout';\n\nexport default class BraintreeVisaCheckoutPaymentStrategy extends PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    onError = () => {},\n                    onPaymentSelect = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: false,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, visaInitOptions]) => {\n                    visaCheckout.init(visaInitOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .then(() => onPaymentSelect())\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (payment, error) => onError(error));\n                });\n            })\n            .then(() => super.initialize(options));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData || !this._paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { nonce } = this._paymentMethod.initializationData;\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData: { nonce } }))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => super.deinitialize(options));\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                paymentSuccessPayload,\n                state.shippingAddress.getShippingAddress(),\n                state.billingAddress.getBillingAddress()\n            )\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n}\n\n/**\n * A set of options that are required to initialize the Visa Checkout payment\n * method provided by Braintree.\n *\n * If the customer chooses to pay with Visa Checkout, they will be asked to\n * enter their payment details via a modal. You can hook into events emitted by\n * the modal by providing the callbacks listed below.\n */\nexport interface BraintreeVisaCheckoutPaymentInitializeOptions {\n    /**\n     * A callback that gets called when Visa Checkout fails to initialize or\n     * selects a payment option.\n     *\n     * @param error - The error object describing the failure.\n     */\n    onError?(error: Error): void;\n\n    /**\n     * A callback that gets called when the customer selects a payment option.\n     */\n    onPaymentSelect?(): void;\n}\n","import { PaymentStrategy } from '../';\nimport {\n    PaymentActionCreator,\n    PaymentInitializeOptions,\n    PaymentMethodActionCreator,\n    PaymentRequestOptions,\n    PaymentStrategyActionCreator\n} from '../..';\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { NotInitializedError } from '../../../common/error/errors';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\n\nimport { GooglePayPaymentInitializeOptions, GooglePayPaymentProcessor } from './';\nimport {\n    GooglePaymentData,\n    PaymentMethodData,\n} from './googlepay';\n\nexport default class GooglePayPaymentStrategy extends PaymentStrategy {\n    private _googlePayOptions?: GooglePayPaymentInitializeOptions;\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        return this._googlePayPaymentProcessor.initialize(this._methodId)\n            .then(() => {\n                if (!options.googlepay) {\n                    throw new InvalidArgumentError('Unable to initialize payment because \"options.googlepay\" argument is not provided.');\n                }\n\n                this._googlePayOptions = options.googlepay;\n\n                const walletButton = options.googlepay.walletButton && document.getElementById(options.googlepay.walletButton);\n\n                if (walletButton) {\n                    this._walletButton = walletButton;\n                    this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                }\n\n                return super.initialize(options);\n            });\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n\n        return Promise.all([\n            this._googlePayPaymentProcessor.deinitialize(),\n        ]).then(() => super.deinitialize(options));\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._googlePayOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.googlepay\" argument is not provided.');\n        }\n\n        const {\n            onError = () => {},\n            onPaymentSelect = () => {},\n        } = this._googlePayOptions;\n\n        return Promise.resolve(this._getPayment())\n            .then(payment => {\n                if (!payment.paymentData.nonce || !payment.paymentData.cardInformation) {\n                    // TODO: Find a way to share the code with _handleWalletButtonClick method\n                    return this._googlePayPaymentProcessor.displayWallet()\n                        .then(paymentData => this._paymentInstrumentSelected(paymentData))\n                        .then(() => onPaymentSelect())\n                        .then(() => this._getPayment())\n                        .catch(error => {\n                            if (error.statusCode !== 'CANCELED') {\n                                onError(error);\n                            }\n                        });\n                }\n\n                return payment;\n            })\n            .then(payment =>\n                this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit: payload.useStoreCredit }, options))\n                    .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(this._getPayment())))\n            );\n    }\n\n    private _paymentInstrumentSelected(paymentData: GooglePaymentData) {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const methodId = this._methodId;\n\n        // TODO: Revisit how we deal with GooglePaymentData after receiving it from Google\n        return this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n    }\n\n    private _getPayment(): PaymentMethodData {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const paymentData = {\n            method: this._methodId,\n            nonce: paymentMethod.initializationData.nonce,\n            cardInformation: paymentMethod.initializationData.card_information,\n        };\n\n        return {\n            methodId: this._methodId,\n            paymentData,\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<InternalCheckoutSelectors> {\n        event.preventDefault();\n\n        if (!this._methodId || !this._googlePayOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const methodId = this._methodId;\n\n        const {\n            onError = () => {},\n            onPaymentSelect = () => {},\n        } = this._googlePayOptions;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._googlePayPaymentProcessor.displayWallet()\n                .then(paymentData => this._paymentInstrumentSelected(paymentData))\n                .then(() => onPaymentSelect())\n                .catch(error => {\n                    if (error.statusCode !== 'CANCELED') {\n                        onError(error);\n                    }\n                });\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n}\n","import { merge } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport CreditCardPaymentStrategy from '../credit-card-payment-strategy';\n\nimport WepayRiskClient from './wepay-risk-client';\n\nexport default class WepayPaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        orderActionCreator: OrderActionCreator,\n        paymentActionCreator: PaymentActionCreator,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        super(store, orderActionCreator, paymentActionCreator);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._wepayRiskClient.initialize();\n\n        return super.initialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const token = this._wepayRiskClient.getRiskToken();\n        const payloadWithToken = merge({}, payload, {\n            payment: {\n                paymentData: {\n                    deviceSessionId: token,\n                },\n            },\n        });\n\n        return super.execute(payloadWithToken, options);\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AfterpaySdk from './afterpay-sdk';\nimport AfterpayWindow from './afterpay-window';\n\ninterface AfterpayScripts {\n    PROD: string;\n    SANDBOX: string;\n}\n\nconst SCRIPTS_DEFAULT: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal-sandbox.afterpay.com/afterpay-async.js',\n};\n\nconst SCRIPTS_US: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal.us-sandbox.afterpay.com/afterpay-async.js',\n};\n\n/** Class responsible for loading the Afterpay SDK */\nexport default class AfterpayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    /**\n     * Loads the appropriate Afterpay SDK depending on the payment method data.\n     * @param method the payment method data\n     */\n    load(method: PaymentMethod, countryCode: string): Promise<AfterpaySdk> {\n        const testMode = method.config.testMode || false;\n        const scriptURI = this._getScriptURI(countryCode, testMode);\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (window as AfterpayWindow).AfterPay);\n    }\n\n    private _getScriptURI(countryCode: string, testMode: boolean): string {\n        if (countryCode === 'US') {\n            return testMode ? SCRIPTS_US.SANDBOX : SCRIPTS_US.PROD;\n        }\n\n        return testMode ? SCRIPTS_DEFAULT.SANDBOX : SCRIPTS_DEFAULT.PROD;\n    }\n\n}\n","export default class CancellablePromise<T> {\n    promise: Promise<T>;\n    cancel!: (reason?: any) => void;\n\n    constructor(promise: Promise<T>) {\n        const cancellable = new Promise<T>((resolve, reject) => {\n            this.cancel = reject;\n        });\n\n        this.promise = Promise.race([promise, cancellable]);\n    }\n}\n","import { Address } from '../../../address';\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { CancellablePromise } from '../../../common/utility';\nimport { OrderPaymentRequestBody } from '../../../order';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport { CreditCardInstrument, NonceInstrument } from '../../payment';\n\nimport { BraintreePaypal, BraintreeRequestData } from './braintree';\nimport { BraintreePaymentInitializeOptions, BraintreeThreeDSecureOptions } from './braintree-payment-options';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default class BraintreePaymentProcessor {\n    private _threeDSecureOptions?: BraintreeThreeDSecureOptions;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator\n    ) {}\n\n    initialize(clientToken: string, options?: BraintreePaymentInitializeOptions): void {\n        this._braintreeSDKCreator.initialize(clientToken);\n        this._threeDSecureOptions = options && options.threeDSecure;\n    }\n\n    preloadPaypal(): Promise<BraintreePaypal> {\n        return this._braintreeSDKCreator.getPaypal();\n    }\n\n    tokenizeCard(payment: OrderPaymentRequestBody, billingAddress: Address): Promise<NonceInstrument> {\n        const { paymentData } = payment;\n        const requestData = this._mapToCreditCard(paymentData as CreditCardInstrument, billingAddress);\n\n        return this._braintreeSDKCreator.getClient()\n            .then(client => client.request(requestData))\n            .then(({ creditCards }) => ({\n                nonce: creditCards[0].nonce,\n            }));\n    }\n\n    paypal(amount: number, storeLanguage: string, currency: string, offerCredit: boolean): Promise<NonceInstrument> {\n        return this._braintreeSDKCreator.getPaypal()\n            .then(paypal => paypal.tokenize({\n                amount,\n                currency,\n                enableShippingAddress: true,\n                flow: 'checkout',\n                locale: storeLanguage,\n                offerCredit,\n                useraction: 'commit',\n            }));\n    }\n\n    verifyCard(payment: OrderPaymentRequestBody, billingAddress: Address, amount: number): Promise<NonceInstrument> {\n        if (!this._threeDSecureOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { addFrame, removeFrame } = this._threeDSecureOptions;\n\n        return Promise.all([\n            this.tokenizeCard(payment, billingAddress),\n            this._braintreeSDKCreator.get3DS(),\n        ]).then(([paymentData, threeDSecure]) => {\n            const { nonce } = paymentData;\n            const cancelVerifyCard = () => threeDSecure.cancelVerifyCard()\n                .then(response => {\n                    verification.cancel(new PaymentMethodCancelledError());\n\n                    return response;\n                });\n\n            const verification = new CancellablePromise(\n                threeDSecure.verifyCard({\n                    addFrame: (error, iframe) => {\n                        addFrame(error, iframe, cancelVerifyCard);\n                    },\n                    amount,\n                    nonce,\n                    removeFrame,\n                })\n            );\n\n            return verification.promise;\n        });\n    }\n\n    appendSessionId(processedPayment: Promise<NonceInstrument>): Promise<NonceInstrument> {\n        return processedPayment\n            .then(paymentData => Promise.all([paymentData, this._braintreeSDKCreator.getDataCollector()]))\n            .then(([paymentData, { deviceData }]) => ({ ...paymentData, deviceSessionId: deviceData }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    private _mapToCreditCard(creditCard: CreditCardInstrument, billingAddress: Address): BraintreeRequestData {\n        let streetAddress = billingAddress.address1;\n\n        if (billingAddress.address2) {\n            streetAddress = ` ${billingAddress.address2}`;\n        }\n\n        return {\n            data: {\n                creditCard: {\n                    cardholderName: creditCard.ccName,\n                    number: creditCard.ccNumber,\n                    cvv: creditCard.ccCvv,\n                    expirationDate: `${creditCard.ccExpiry.month}/${creditCard.ccExpiry.year}`,\n                    options: {\n                        validate: false,\n                    },\n                    billingAddress: {\n                        countryName: billingAddress.country,\n                        postalCode: billingAddress.postalCode,\n                        streetAddress,\n                    },\n                },\n            },\n            endpoint: 'payment_methods/credit_cards',\n            method: 'post',\n        };\n    }\n}\n","export enum ChasePayEventType {\n    StartCheckout = 'startCheckout',\n    CompleteCheckout = 'completeCheckout',\n    CancelCheckout = 'cancelCheckout',\n}\n\nexport interface ChasePayEventMap {\n    [ChasePayEventType.StartCheckout](digitalSessionId: string): void;\n    [ChasePayEventType.CompleteCheckout](payload: ChasePaySuccessPayload): void;\n    [ChasePayEventType.CancelCheckout](): void;\n}\n\nexport interface ChasePayHostWindow extends Window {\n    JPMC?: JPMC;\n}\n\nexport interface JPMC {\n    ChasePay: ChasePay;\n}\n\nexport interface ChasePaySuccessPayload {\n    sessionToken: string;\n}\n\nexport interface ChasePayInsertOptions {\n    color?: string;\n    containers?: string[];\n    height?: number;\n    width?: number;\n}\n\nexport interface ChasePayConfigureOptions {\n    language?: string;\n    zindex?: number;\n    sessionWarningTime?: number;\n    sessionTimeoutTime?: number;\n}\n\nexport interface ChasePay {\n    EventType: {\n        START_CHECKOUT: ChasePayEventType.StartCheckout;\n        COMPLETE_CHECKOUT: ChasePayEventType.CompleteCheckout;\n        CANCEL_CHECKOUT: ChasePayEventType.CancelCheckout;\n    };\n    isChasePayUp(): boolean;\n    insertButtons(options: ChasePayInsertOptions): void;\n    insertBrandings(options: ChasePayInsertOptions): void;\n    startCheckout(digitalSessionId?: string): void;\n    showLoadingAnimation(): void;\n    configure(options: ChasePayConfigureOptions): void;\n    on<ChasePayEventType extends keyof ChasePayEventMap>(eventType: ChasePayEventType, callback: ChasePayEventMap[ChasePayEventType]): {};\n}\n\nexport interface ChasePayInitializeOptions {\n    /**\n     * This container is used to host the chasepay branding logo.\n     * It should be an HTML element.\n     */\n    logoContainer: string;\n\n    /**\n     * This walletButton is used to set an event listener, provide an element ID if you want\n     * users to be able to launch the ChasePay wallet modal by clicking on a button.\n     * It should be an HTML element.\n     */\n    walletButton?: string;\n\n    /**\n     * A callback that gets called when the customer selects a payment option.\n     */\n    onPaymentSelect?(): void;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { Subject } from 'rxjs';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { toFormUrlEncoded } from '../../../common/http-request';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\nimport { WepayRiskClient } from '../wepay';\n\nimport { ChasePay, ChasePayEventType, ChasePaySuccessPayload } from './chasepay';\nimport ChasePayInitializeOptions from './chasepay-initialize-options';\nimport ChasePayScriptLoader from './chasepay-script-loader';\n\nexport default class ChasePayPaymentStrategy extends PaymentStrategy {\n    private _chasePayClient?: ChasePay;\n    private _methodId!: string;\n    private _walletButton?: HTMLElement;\n    private _walletEvent$: Subject<{ type: ChasePayEventType }>;\n\n    constructor(\n        store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        super(store);\n\n        this._walletEvent$ = new Subject();\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        if (!options.chasepay) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.chasepay\" argument is not provided.');\n        }\n\n        const walletButton = options.chasepay.walletButton && document.getElementById(options.chasepay.walletButton);\n\n        if (walletButton) {\n            this._walletButton = walletButton;\n            this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n        }\n\n        return this._configureWallet(options.chasepay)\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._chasePayClient = undefined;\n\n        return super.deinitialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._getPayment()\n            .catch(error => {\n                if (error.subtype === MissingDataErrorType.MissingPayment) {\n                    return this._displayWallet()\n                        .then(() => this._getPayment());\n                }\n\n                throw error;\n            })\n            .then(payment =>\n                this._createOrder(payment, payload.useStoreCredit, options)\n            );\n    }\n\n    private _configureWallet(options: ChasePayInitializeOptions): Promise<void> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return this._chasePayScriptLoader.load(paymentMethod.config.testMode)\n            .then(({ ChasePay }) => {\n                this._chasePayClient = ChasePay;\n\n                if (options.logoContainer && document.getElementById(options.logoContainer)) {\n                    this._chasePayClient.insertBrandings({\n                        color: 'white',\n                        containers: [options.logoContainer],\n                    });\n                }\n\n                this._chasePayClient.configure({\n                    language: storeConfig.storeProfile.storeLanguage,\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CancelCheckout, () => {\n                    this._walletEvent$.next({ type: ChasePayEventType.CancelCheckout });\n\n                    if (options.onCancel) {\n                        options.onCancel();\n                    }\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CompleteCheckout, (payload: ChasePaySuccessPayload) => {\n                    this._setSessionToken(payload.sessionToken)\n                        .then(() => {\n                            this._walletEvent$.next({ type: ChasePayEventType.CompleteCheckout });\n\n                            if (options.onPaymentSelect) {\n                                options.onPaymentSelect();\n                            }\n                        });\n                });\n            });\n    }\n\n    private _displayWallet(): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n                .then(state => {\n                    const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                    if (!this._chasePayClient) {\n                        throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                    }\n\n                    if (!paymentMethod) {\n                        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                    }\n\n                    this._chasePayClient.showLoadingAnimation();\n                    this._chasePayClient.startCheckout(paymentMethod.initializationData.digitalSessionId);\n                });\n\n            // Wait for payment selection\n            return new Promise((resolve, reject) => {\n                this._walletEvent$.take(1)\n                    .subscribe((event: { type: ChasePayEventType }) => {\n                        if (event.type === ChasePayEventType.CancelCheckout) {\n                            reject(new PaymentMethodCancelledError());\n                        } else if (event.type === ChasePayEventType.CompleteCheckout) {\n                            resolve();\n                        }\n                    });\n            });\n        }, { methodId: this._methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _setSessionToken(sessionToken: string): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const merchantRequestId = paymentMethod && paymentMethod.initializationData.merchantRequestId;\n\n        return this._requestSender.post('checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: toFormUrlEncoded({\n                action: 'set_external_checkout',\n                provider: this._methodId,\n                sessionToken,\n                merchantRequestId,\n            }),\n        })\n            // Re-hydrate checkout data\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId)),\n            ]))\n            .then(() => this._store.getState());\n    }\n\n    private _getPayment(): Promise<Payment> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n            .then(() => {\n                if (this._methodId === 'wepay') {\n                    return this._wepayRiskClient.initialize()\n                        .then(client => client.getRiskToken());\n                }\n\n                return '';\n            })\n            .then(riskToken => {\n                const state = this._store.getState();\n                const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!paymentMethod.initializationData.paymentCryptogram) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPayment);\n                }\n\n                const paymentData = {\n                    method: this._methodId,\n                    cryptogramId: paymentMethod.initializationData.paymentCryptogram,\n                    eci: paymentMethod.initializationData.eci,\n                    transactionId: btoa(paymentMethod.initializationData.reqTokenId),\n                    ccExpiry: {\n                        month: paymentMethod.initializationData.expDate.toString().substr(0, 2),\n                        year: paymentMethod.initializationData.expDate.toString().substr(2, 2),\n                    },\n                    ccNumber: paymentMethod.initializationData.accountNum,\n                    accountMask: paymentMethod.initializationData.accountMask,\n                    extraData: riskToken ? { riskToken } : undefined,\n                };\n\n                return {\n                    methodId: this._methodId,\n                    paymentData,\n                };\n            });\n    }\n\n    private _createOrder(payment: Payment, useStoreCredit?: boolean, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit }, options))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)));\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): void {\n        event.preventDefault();\n\n        this._displayWallet();\n    }\n}\n","import { Checkout } from '../../../checkout';\nimport {\n    MissingDataError,\n    MissingDataErrorType\n} from '../../../common/error/errors';\nimport StandardError from '../../../common/error/errors/standard-error';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeSDKCreator, GooglePayBraintreeSDK } from '../braintree';\n\nimport {\n    GooglePaymentData,\n    GooglePayBraintreeDataRequest,\n    GooglePayBraintreePaymentDataRequestV1,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload\n} from './googlepay';\n\nexport default class GooglePayStripeInitializer implements GooglePayInitializer {\n    constructor() {}\n\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return this._mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(\n            checkout,\n            paymentMethod.initializationData,\n            hasShippingAddress);\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        try {\n            const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token);\n\n            return Promise.resolve({\n                nonce: payload.id,\n                type: payload.type,\n                details: {\n                    cardType: payload.card.brand,\n                    lastFour: payload.card.last4,\n                },\n            });\n        } catch (err) {\n            return Promise.reject(err);\n        }\n    }\n\n    private _mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        const googlePayPaymentDataRequestV2: GooglePayPaymentDataRequestV2 = {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantId: initializationData.googleMerchantId,\n                merchantName: initializationData.googleMerchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: ['AMEX', 'DISCOVER', 'JCB', 'MASTERCARD', 'VISA'],\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: 'FULL',\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'stripe',\n                        'stripe:version': '2017-02-14',\n                        'stripe:publishableKey': 'pk_test_4MVAAQNxf8R4xfG5geJWltLV',\n                        // 'stripe:version': initializationData.stripeVersion,\n                        // 'stripe.publishableKey': initializationData.stripePublishableKey,\n                    },\n                },\n            }],\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: checkout.grandTotal.toString(),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n\n        return Promise.resolve(googlePayPaymentDataRequestV2);\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport KlarnaCredit from './klarna-credit';\nimport KlarnaWindow from './klarna-window';\n\nconst SDK_URL = '//credit.klarnacdn.net/lib/v1/api.js';\n\nexport default class KlarnaScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<KlarnaCredit> {\n        return this._scriptLoader.loadScript(SDK_URL)\n            .then(() => (window as KlarnaWindow).Klarna.Credit);\n    }\n}\n","import { PaymentStrategy } from '../';\nimport {\n    PaymentActionCreator,\n    PaymentInitializeOptions,\n    PaymentMethodActionCreator,\n    PaymentRequestOptions\n} from '../../';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType\n} from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentMethod from '../../payment-method';\n\nimport { Masterpass, MasterpassCheckoutOptions } from './masterpass';\nimport MasterpassScriptLoader from './masterpass-script-loader';\n\nexport default class MasterpassPaymentStrategy extends PaymentStrategy {\n    private _masterpassClient?: Masterpass;\n    private _paymentMethod?: PaymentMethod;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._masterpassScriptLoader.load(this._paymentMethod.config.testMode)\n            .then(masterpass => {\n                this._masterpassClient = masterpass;\n\n                if (!options.masterpass) {\n                    throw new InvalidArgumentError('Unable to initialize payment because \"options.masterpass\" argument is not provided.');\n                }\n\n                const walletButton  = options.masterpass.walletButton && document.getElementById(options.masterpass.walletButton);\n\n                if (walletButton) {\n                    this._walletButton = walletButton;\n                    this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                }\n\n                return super.initialize(options);\n            });\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._masterpassClient = undefined;\n\n        return super.deinitialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const order = { useStoreCredit: payload.useStoreCredit };\n\n        if (!this._paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const gateway = this._paymentMethod.initializationData.gateway;\n\n        // TODO: Refactor the API endpoint to return nonce in the right place.\n        const paymentData = this._paymentMethod.initializationData.paymentData;\n\n        if (!gateway) {\n            throw new InvalidArgumentError('Unable to proceed because \"paymentMethod.initializationData.gateway\" argument is not provided.');\n        }\n\n        // TODO: Redirect to Masterpass if nonce has not been generated yet. And then finalise the order when the shopper is redirected back to the checkout page.\n        if (!paymentData) {\n            throw new InvalidArgumentError('Unable to proceed because \"paymentMethod.initializationData.paymentData\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(gateway)))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment({ methodId: gateway, paymentData })));\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: this._paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.subtotal.toFixed(2),\n            currency: storeConfig.currency.code,\n            cartId: checkout.cart.id,\n            suppressShippingAddress: true,\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event) {\n        event.preventDefault();\n\n        if (!this._masterpassClient) {\n            return;\n        }\n\n        const payload = this._createMasterpassPayload();\n        this._masterpassClient.checkout(payload);\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { SquareFormFactory, SquareFormOptions } from './square-form';\nimport SquareWindow from './square-window';\n\nexport default class SquareScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<SquareFormFactory> {\n        const scriptURI = '//js.squareup.com/v2/paymentform';\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (options: SquareFormOptions) =>\n                new (window as SquareWindow).SqPaymentForm(options)\n            );\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport WepayRisk from './wepay-risk';\nimport WepayWindow from './wepay-window';\n\nconst SCRIPT_SRC = '//static.wepay.com/min/js/risk.1.latest.js';\n\nexport default class WepayRiskClient {\n    private _riskClient?: WepayRisk;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    initialize(): Promise<WepayRiskClient> {\n        return this._scriptLoader\n            .loadScript(SCRIPT_SRC)\n            .then(() => this._riskClient = (window as WepayWindow).WePay.risk)\n            .then(() => this);\n    }\n\n    getRiskToken(): string {\n        if (!this._riskClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._riskClient.generate_risk_token();\n\n        return this._riskClient.get_risk_token();\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore, CheckoutValidator } from '../checkout';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport {\n    PaymentActionCreator,\n    PaymentMethodActionCreator,\n    PaymentMethodRequestSender,\n    PaymentRequestSender,\n    PaymentStrategyActionCreator,\n    PaymentStrategyRegistry\n\n } from './';\nimport {\n    AfterpayPaymentStrategy,\n    AmazonPayPaymentStrategy,\n    BraintreeCreditCardPaymentStrategy,\n    BraintreePaypalPaymentStrategy,\n    BraintreeVisaCheckoutPaymentStrategy,\n    CreditCardPaymentStrategy,\n    GooglePayPaymentStrategy,\n    KlarnaPaymentStrategy,\n    LegacyPaymentStrategy,\n    NoPaymentDataRequiredPaymentStrategy,\n    OfflinePaymentStrategy,\n    OffsitePaymentStrategy,\n    PaypalExpressPaymentStrategy,\n    PaypalProPaymentStrategy,\n    SagePayPaymentStrategy,\n    SquarePaymentStrategy,\n    WepayPaymentStrategy,\n} from './strategies';\nimport { AfterpayScriptLoader } from './strategies/afterpay';\nimport { AmazonPayScriptLoader } from './strategies/amazon-pay';\nimport { createBraintreePaymentProcessor, createBraintreeVisaCheckoutPaymentProcessor, VisaCheckoutScriptLoader } from './strategies/braintree';\nimport { ChasePayPaymentStrategy, ChasePayScriptLoader } from './strategies/chasepay';\nimport { createGooglePayBraintreePaymentProcessor, createGooglePayStripePaymentProcessor } from './strategies/googlepay';\nimport { KlarnaScriptLoader } from './strategies/klarna';\nimport { MasterpassPaymentStrategy, MasterpassScriptLoader } from './strategies/masterpass';\nimport { PaypalScriptLoader } from './strategies/paypal';\nimport { SquareScriptLoader } from './strategies/square';\nimport { WepayRiskClient } from './strategies/wepay';\n\nexport default function createPaymentStrategyRegistry(\n    store: CheckoutStore,\n    paymentClient: any,\n    requestSender: RequestSender\n) {\n    const registry = new PaymentStrategyRegistry(store, { defaultToken: 'creditcard' });\n    const scriptLoader = getScriptLoader();\n    const billingAddressActionCreator = new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender));\n    const braintreePaymentProcessor = createBraintreePaymentProcessor(scriptLoader);\n\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutValidator = new CheckoutValidator(checkoutRequestSender);\n    const orderActionCreator = new OrderActionCreator(\n        new OrderRequestSender(requestSender),\n        checkoutValidator\n    );\n    const paymentActionCreator = new PaymentActionCreator(\n        new PaymentRequestSender(paymentClient),\n        orderActionCreator\n    );\n\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(\n        new RemoteCheckoutRequestSender(requestSender)\n    );\n    const configRequestSender = new ConfigRequestSender(requestSender);\n    const configActionCreator = new ConfigActionCreator(configRequestSender);\n    const checkoutActionCreator = new CheckoutActionCreator(checkoutRequestSender, configActionCreator);\n    const paymentStrategyActionCreator = new PaymentStrategyActionCreator(registry, orderActionCreator);\n\n    registry.register('afterpay', () =>\n        new AfterpayPaymentStrategy(\n            store,\n            checkoutValidator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new AfterpayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('amazon', () =>\n        new AmazonPayPaymentStrategy(\n            store,\n            orderActionCreator,\n            billingAddressActionCreator,\n            remoteCheckoutActionCreator,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('creditcard', () =>\n        new CreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register('klarna', () =>\n        new KlarnaPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new KlarnaScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('legacy', () =>\n        new LegacyPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register('offline', () =>\n        new OfflinePaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register('offsite', () =>\n        new OffsitePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register('paypal', () =>\n        new PaypalProPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register('paypalexpress', () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('paypalexpresscredit', () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('sagepay', () =>\n        new SagePayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            createFormPoster()\n        )\n    );\n\n    registry.register('squarev2', () =>\n        new SquarePaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new SquareScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('nopaymentdatarequired', () =>\n        new NoPaymentDataRequiredPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register('braintree', () =>\n        new BraintreeCreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register('braintreepaypal', () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register('braintreepaypalcredit', () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor,\n            true\n        )\n    );\n\n    registry.register('braintreevisacheckout', () =>\n        new BraintreeVisaCheckoutPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('chasepay', () =>\n        new ChasePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new ChasePayScriptLoader(scriptLoader),\n            new WepayRiskClient(scriptLoader))\n    );\n\n    registry.register('googlepaybraintree', () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createGooglePayBraintreePaymentProcessor(store, scriptLoader)\n        )\n    );\n\n    registry.register('googlepaystripe', () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createGooglePayStripePaymentProcessor(store, scriptLoader)\n        )\n    );\n\n    registry.register('wepay', () =>\n        new WepayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    registry.register('masterpass', () =>\n        new MasterpassPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    return registry;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default function createBraintreePaymentProcessor(scriptLoader: ScriptLoader) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n\n    return new BraintreePaymentProcessor(braintreeSDKCreator);\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../..';\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../../../billing';\nimport { CheckoutStore } from '../../../checkout';\n\nimport { GooglePayPaymentProcessor, GooglePayScriptLoader, GooglePayStripeInitializer } from '.';\n\nexport default function createGooglePayStripePaymentProcessor(\n    store: CheckoutStore,\n    scriptLoader: ScriptLoader): GooglePayPaymentProcessor {\n\n    const requestSender = createRequestSender();\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const billingAddressActionCreator = new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender));\n\n    return new GooglePayPaymentProcessor(\n        store,\n        paymentMethodActionCreator,\n        new GooglePayScriptLoader(scriptLoader),\n        new GooglePayStripeInitializer(),\n        billingAddressActionCreator,\n        requestSender\n    );\n}\n","import { createAction, createErrorAction, Action, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { Address } from '../../address';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../../checkout';\nimport { addMinutes, isFuture } from '../../common/date-time';\nimport { MissingDataError, MissingDataErrorType } from '../../common/error/errors';\n\nimport { SessionContext, VaultAccessToken } from './instrument';\nimport * as actionTypes from './instrument-action-types';\nimport InstrumentRequestSender from './instrument-request-sender';\n\nexport default class InstrumentActionCreator {\n    constructor(\n        private _instrumentRequestSender: InstrumentRequestSender\n    ) {}\n\n    loadInstruments(): ThunkAction<Action, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.LOAD_INSTRUMENTS_REQUESTED));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n            const shippingAddress = this._getShippingAddress(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.loadInstruments({\n                            ...session,\n                            authToken: currentToken.vaultAccessToken,\n                        },\n                        shippingAddress\n                    )\n                        .then(({ body }) => {\n                            observer.next(createAction(actionTypes.LOAD_INSTRUMENTS_SUCCEEDED, body, currentToken));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.LOAD_INSTRUMENTS_FAILED, response));\n                });\n        });\n    }\n\n    deleteInstrument(instrumentId: string): ThunkAction<Action, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.DELETE_INSTRUMENT_REQUESTED, undefined, { instrumentId }));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.deleteInstrument({ ...session, authToken: currentToken.vaultAccessToken }, instrumentId)\n                        .then(() => {\n                            observer.next(createAction(actionTypes.DELETE_INSTRUMENT_SUCCEEDED, undefined, {\n                                instrumentId,\n                                ...currentToken,\n                            }));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.DELETE_INSTRUMENT_FAILED, response, { instrumentId }));\n                });\n        });\n    }\n\n    private _isValidVaultAccessToken(token: VaultAccessToken): boolean {\n        if (!token || !token.vaultAccessToken) {\n            return false;\n        }\n\n        const expiryBuffer = 2;\n        const expiry = addMinutes(new Date(token.vaultAccessExpiry), expiryBuffer);\n\n        return isFuture(expiry);\n    }\n\n    private _getCurrentAccessToken(store: ReadableCheckoutStore): VaultAccessToken | undefined {\n        const { instruments } = store.getState();\n        const meta = instruments.getInstrumentsMeta();\n\n        if (!meta) {\n            return;\n        }\n\n        return {\n            vaultAccessToken: meta.vaultAccessToken,\n            vaultAccessExpiry: meta.vaultAccessExpiry,\n        };\n    }\n\n    private _getValidAccessToken(token?: VaultAccessToken): Promise<VaultAccessToken> {\n        return token && this._isValidVaultAccessToken(token)\n            ? Promise.resolve(token)\n            : this._instrumentRequestSender.getVaultAccessToken()\n                .then(({ body = {} }: any) => ({\n                    vaultAccessToken: body.data.token,\n                    vaultAccessExpiry: body.data.expires_at,\n                }));\n    }\n\n    private _getShippingAddress(store: ReadableCheckoutStore): Address | undefined {\n        const state = store.getState();\n\n        return state.shippingAddress.getShippingAddress();\n    }\n\n    private _getSessionContext(store: ReadableCheckoutStore): SessionContext {\n        const state = store.getState();\n        const config = state.config.getStoreConfig();\n        const cart = state.cart.getCart();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        const { customerId } = cart;\n        const { storeId } = config.storeProfile;\n\n        return {\n            customerId,\n            storeId,\n        };\n    }\n}\n","export default function isFuture(date: Date): boolean {\n    return date.valueOf() > Date.now();\n}\n","export default function addMinutes(date: Date, amount: number): Date {\n    const newDate = new Date(date.getTime());\n\n    newDate.setMinutes(date.getMinutes() + amount);\n\n    return newDate;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport Instrument from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InstrumentErrorResponseBody,\n    RawInstrumentsResponseBody,\n    RawInstrumentErrorResponseBody,\n    RawInstrumentResponseBody,\n} from './instrument-response-body';\n\nexport default class InstrumentResponseTransformer {\n    transformResponse(response: Response<RawInstrumentsResponseBody>): Response<InstrumentsResponseBody> {\n        const payload = this._transformResponse(response);\n        const { vaulted_instruments } = payload.body;\n\n        payload.body = {\n            vaultedInstruments: this._transformVaultedInstruments(vaulted_instruments),\n        };\n\n        return payload;\n    }\n\n    transformErrorResponse(response: Response<RawInstrumentErrorResponseBody>): Response<InstrumentErrorResponseBody> {\n        return this._transformResponse(response);\n    }\n\n    private _transformVaultedInstruments(vaultedInstruments: RawInstrumentResponseBody[] = []): Instrument[] {\n        return vaultedInstruments.map(instrument => ({\n            bigpayToken: instrument.bigpay_token,\n            provider: instrument.provider,\n            iin: instrument.iin,\n            last4: instrument.last_4,\n            expiryMonth: instrument.expiry_month,\n            expiryYear: instrument.expiry_year,\n            brand: instrument.brand,\n            trustedShippingAddress: instrument.trusted_shipping_address,\n        }));\n    }\n\n    private _transformResponse({ data: body, status, statusText }: any): Response {\n        return {\n            headers: {},\n            body,\n            status,\n            statusText,\n        };\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { mapToInternalAddress, Address } from '../../address';\nimport { RequestOptions } from '../../common/http-request';\n\nimport { InstrumentRequestContext } from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InstrumentErrorResponseBody,\n    RawInstrumentsResponseBody,\n    RawInstrumentErrorResponseBody,\n    VaultAccessTokenResponseBody,\n} from './instrument-response-body';\nimport InstrumentResponseTransformer from './instrument-response-transformer';\n\nexport default class InstrumentRequestSender {\n    private _transformer: InstrumentResponseTransformer;\n\n    constructor(\n        private _client: any,\n        private _requestSender: RequestSender\n    ) {\n        this._transformer = new InstrumentResponseTransformer();\n    }\n\n    getVaultAccessToken({ timeout }: RequestOptions = {}): Promise<Response<VaultAccessTokenResponseBody>> {\n        const url = '/internalapi/v1/checkout/payments/vault-access-token';\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    loadInstruments(requestContext: InstrumentRequestContext, shippingAddress?: Address): Promise<Response<InstrumentsResponseBody | InstrumentErrorResponseBody>> {\n        return (shippingAddress) ?\n            this._loadInstrumentsWithAddress(requestContext, shippingAddress) :\n            this._loadInstruments(requestContext);\n    }\n\n    deleteInstrument(requestContext: InstrumentRequestContext, instrumentId: string): Promise<Response<InstrumentsResponseBody | InstrumentErrorResponseBody>> {\n        const payload = {\n            ...requestContext,\n            instrumentId,\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.deleteShopperInstrument(payload, (error: Response<RawInstrumentErrorResponseBody>, response: Response<RawInstrumentsResponseBody>) => {\n                if (error) {\n                    reject(this._transformer.transformErrorResponse(error));\n                } else {\n                    resolve(this._transformer.transformResponse(response));\n                }\n            });\n        });\n    }\n\n    private _loadInstruments(requestContext: InstrumentRequestContext): Promise<Response<InstrumentsResponseBody | InstrumentErrorResponseBody>> {\n        return new Promise((resolve, reject) => {\n            this._client.loadInstruments(requestContext, (error: Response<RawInstrumentErrorResponseBody>, response: Response<RawInstrumentsResponseBody>) => {\n                if (error) {\n                    reject(this._transformer.transformErrorResponse(error));\n                } else {\n                    resolve(this._transformer.transformResponse(response));\n                }\n            });\n        });\n    }\n\n    private _loadInstrumentsWithAddress(requestContext: InstrumentRequestContext, shippingAddress: Address): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            shippingAddress: mapToInternalAddress(shippingAddress),\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.loadInstrumentsWithAddress(payload, (error: Response<RawInstrumentErrorResponseBody>, response: Response<RawInstrumentsResponseBody>) => {\n                if (error) {\n                    reject(this._transformer.transformErrorResponse(error));\n                } else {\n                    resolve(this._transformer.transformResponse(response));\n                }\n            });\n        });\n    }\n}\n","import { Address } from '../address';\nimport { BillingAddressSelector } from '../billing';\nimport { Cart, CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { StoreConfig } from '../config/config';\nimport { Coupon, CouponSelector, GiftCertificate, GiftCertificateSelector } from '../coupon';\nimport { Customer, CustomerSelector } from '../customer';\nimport { FormField, FormSelector } from '../form';\nimport { Country, CountrySelector } from '../geography';\nimport { Order, OrderSelector } from '../order';\nimport { PaymentMethod, PaymentMethodSelector, PaymentSelector } from '../payment';\nimport { Instrument, InstrumentSelector } from '../payment/instrument';\nimport {\n    Consignment,\n    ConsignmentSelector,\n    ShippingAddressSelector,\n    ShippingCountrySelector,\n    ShippingOption,\n} from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the state of the current checkout.\n *\n * This object has a set of methods that allow you to get a specific piece of\n * checkout information, such as shipping and billing details.\n */\n@selector\nexport default class CheckoutStoreSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customer: CustomerSelector;\n    private _form: FormSelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _payment: PaymentSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _shippingAddress: ShippingAddressSelector;\n    private _shippingCountries: ShippingCountrySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customer = selectors.customer;\n        this._form = selectors.form;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._payment = selectors.payment;\n        this._paymentMethods = selectors.paymentMethods;\n        this._shippingAddress = selectors.shippingAddress;\n        this._shippingCountries = selectors.shippingCountries;\n    }\n\n    /**\n     * Gets the current checkout.\n     *\n     * @returns The current checkout if it is loaded, otherwise undefined.\n     */\n    getCheckout(): Checkout | undefined {\n        return this._checkout.getCheckout();\n    }\n\n    /**\n     * Gets the current order.\n     *\n     * @returns The current order if it is loaded, otherwise undefined.\n     */\n    getOrder(): Order | undefined {\n        return this._order.getOrder();\n    }\n\n    /**\n     * Gets the checkout configuration of a store.\n     *\n     * @returns The configuration object if it is loaded, otherwise undefined.\n     */\n    getConfig(): StoreConfig | undefined {\n        return this._config.getStoreConfig();\n    }\n\n    /**\n     * Gets the shipping address of the current checkout.\n     *\n     * If the address is partially complete, it may not have shipping options\n     * associated with it.\n     *\n     * @returns The shipping address object if it is loaded, otherwise\n     * undefined.\n     */\n    getShippingAddress(): Address | undefined {\n        const shippingAddress = this._shippingAddress.getShippingAddress();\n        const context = this._config.getContextConfig();\n\n        if (!shippingAddress) {\n            if (!context || !context.geoCountryCode) {\n                return;\n            }\n\n            return {\n                firstName: '',\n                lastName: '',\n                company: '',\n                address1: '',\n                address2: '',\n                city: '',\n                stateOrProvince: '',\n                stateOrProvinceCode: '',\n                postalCode: '',\n                country: '',\n                phone: '',\n                customFields: [],\n                countryCode: context.geoCountryCode,\n            };\n        }\n\n        return shippingAddress;\n    }\n\n    /**\n     * Gets a list of shipping options available for the shipping address.\n     *\n     * If there is no shipping address assigned to the current checkout, the\n     * list of shipping options will be empty.\n     *\n     * @returns The list of shipping options if any, otherwise undefined.\n     */\n    getShippingOptions(): ShippingOption[] | undefined {\n        const consignments = this._consignments.getConsignments();\n\n        if (consignments && consignments.length) {\n            return consignments[0].availableShippingOptions;\n        }\n\n        return;\n    }\n\n    /**\n     * Gets a list of consignments.\n     *\n     * If there are no consignments created for to the current checkout, the\n     * list will be empty.\n     *\n     * @returns The list of consignments if any, otherwise undefined.\n     */\n    getConsignments(): Consignment[] | undefined {\n        return this._consignments.getConsignments();\n    }\n\n    /**\n     * Gets the selected shipping option for the current checkout.\n     *\n     * @returns The shipping option object if there is a selected option,\n     * otherwise undefined.\n     */\n    getSelectedShippingOption(): ShippingOption | undefined {\n        const consignments = this._consignments.getConsignments();\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return consignments[0].selectedShippingOption;\n    }\n\n    /**\n     * Gets a list of countries available for shipping.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getShippingCountries(): Country[] | undefined {\n        return this._shippingCountries.getShippingCountries();\n    }\n\n    /**\n     * Gets the billing address of an order.\n     *\n     * @returns The billing address object if it is loaded, otherwise undefined.\n     */\n    getBillingAddress(): Address | undefined {\n        return this._billingAddress.getBillingAddress();\n    }\n\n    /**\n     * Gets a list of countries available for billing.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getBillingCountries(): Country[] | undefined {\n        return this._countries.getCountries();\n    }\n\n    /**\n     * Gets a list of payment methods available for checkout.\n     *\n     * @returns The list of payment methods if it is loaded, otherwise undefined.\n     */\n    getPaymentMethods(): PaymentMethod[] | undefined {\n        return this._paymentMethods.getPaymentMethods();\n    }\n\n    /**\n     * Gets a payment method by an id.\n     *\n     * The method returns undefined if unable to find a payment method with the\n     * specified id, either because it is not available for the customer, or it\n     * is not loaded.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns The payment method object if loaded and available, otherwise,\n     * undefined.\n     */\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined {\n        return this._paymentMethods.getPaymentMethod(methodId, gatewayId);\n    }\n\n    /**\n     * Gets the payment method that is selected for checkout.\n     *\n     * @returns The payment method object if there is a selected method;\n     * undefined if otherwise.\n     */\n    getSelectedPaymentMethod(): PaymentMethod | undefined {\n        const payment = this._payment.getPaymentId();\n\n        return payment && this._paymentMethods.getPaymentMethod(payment.providerId, payment.gatewayId);\n    }\n\n    /**\n     * Gets the current cart.\n     *\n     * @returns The current cart object if it is loaded, otherwise undefined.\n     */\n    getCart(): Cart | undefined {\n        return this._cart.getCart();\n    }\n\n    /**\n     * Gets a list of coupons that are applied to the current checkout.\n     *\n     * @returns The list of applied coupons if there is any, otherwise undefined.\n     */\n    getCoupons(): Coupon[] | undefined {\n        return this._coupons.getCoupons();\n    }\n\n    /**\n     * Gets a list of gift certificates that are applied to the current checkout.\n     *\n     * @returns The list of applied gift certificates if there is any, otherwise undefined.\n     */\n    getGiftCertificates(): GiftCertificate[] | undefined {\n        return this._giftCertificates.getGiftCertificates();\n    }\n\n    /**\n     * Gets the current customer.\n     *\n     * @returns The current customer object if it is loaded, otherwise\n     * undefined.\n     */\n    getCustomer(): Customer | undefined {\n        return this._customer.getCustomer();\n    }\n\n    /**\n     * Checks if payment data is required or not.\n     *\n     * If payment data is required, customers should be prompted to enter their\n     * payment details.\n     *\n     * ```js\n     * if (state.checkout.isPaymentDataRequired()) {\n     *     // Render payment form\n     * } else {\n     *     // Render \"Payment is not required for this order\" message\n     * }\n     * ```\n     *\n     * @param useStoreCredit - If true, check whether payment data is required\n     * with store credit applied; otherwise, check without store credit.\n     * @returns True if payment data is required, otherwise false.\n     */\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean {\n        return this._payment.isPaymentDataRequired(useStoreCredit);\n    }\n\n    /**\n     * Checks if payment data is submitted or not.\n     *\n     * If payment data is already submitted using a payment method, customers\n     * should not be prompted to enter their payment details again.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns True if payment data is submitted, otherwise false.\n     */\n    isPaymentDataSubmitted(methodId: string, gatewayId?: string): boolean {\n        return this._payment.isPaymentDataSubmitted(this.getPaymentMethod(methodId, gatewayId));\n    }\n\n    /**\n     * Gets a list of payment instruments associated with the current customer.\n     *\n     * @returns The list of payment instruments if it is loaded, otherwise undefined.\n     */\n    getInstruments(): Instrument[] | undefined {\n        return this._instruments.getInstruments();\n    }\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their billing address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of billing address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getBillingAddressFields(countryCode: string): FormField[] {\n        return this._form.getBillingAddressFields(this.getBillingCountries(), countryCode);\n    }\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their shipping address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of shipping address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getShippingAddressFields(countryCode: string): FormField[] {\n        return this._form.getShippingAddressFields(this.getShippingCountries(), countryCode);\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerStrategySelector } from '../customer';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { ConsignmentSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the error of any asynchronous checkout action, if\n * there is any.\n *\n * This object has a set of getters that would return an error if an action is\n * not executed successfully. For example, if you are unable to submit an order,\n * you can use this object to retrieve the reason for the failure.\n */\n@selector\nexport default class CheckoutStoreErrorSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customerStrategies: CustomerStrategySelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _paymentStrategies: PaymentStrategySelector;\n    private _shippingCountries: ShippingCountrySelector;\n    private _shippingStrategies: ShippingStrategySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customerStrategies = selectors.customerStrategies;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._paymentMethods = selectors.paymentMethods;\n        this._paymentStrategies = selectors.paymentStrategies;\n        this._shippingCountries = selectors.shippingCountries;\n        this._shippingStrategies = selectors.shippingStrategies;\n    }\n\n    /**\n     * Gets the error of any checkout action that has failed.\n     *\n     * @returns The error object if unable to perform any checkout action,\n     * otherwise undefined.\n     */\n    getError(): Error | undefined {\n        return this.getLoadCheckoutError() ||\n            this.getSubmitOrderError() ||\n            this.getFinalizeOrderError() ||\n            this.getLoadOrderError() ||\n            this.getLoadCartError() ||\n            this.getLoadBillingCountriesError() ||\n            this.getLoadShippingCountriesError() ||\n            this.getLoadPaymentMethodsError() ||\n            this.getLoadPaymentMethodError() ||\n            this.getInitializePaymentError() ||\n            this.getLoadShippingOptionsError() ||\n            this.getSelectShippingOptionError() ||\n            this.getSignInError() ||\n            this.getSignOutError() ||\n            this.getInitializeCustomerError() ||\n            this.getUpdateShippingAddressError() ||\n            this.getUpdateBillingAddressError() ||\n            this.getContinueAsGuestError() ||\n            this.getUpdateConsignmentError() ||\n            this.getCreateConsignmentsError() ||\n            this.getDeleteConsignmentError() ||\n            this.getInitializeShippingError() ||\n            this.getApplyCouponError() ||\n            this.getRemoveCouponError() ||\n            this.getApplyGiftCertificateError() ||\n            this.getRemoveGiftCertificateError() ||\n            this.getLoadInstrumentsError() ||\n            this.getDeleteInstrumentError() ||\n            this.getLoadConfigError();\n    }\n\n    /**\n     * Returns an error if unable to load the current checkout.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCheckoutError(): Error | undefined {\n        return this._checkout.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to update the current checkout.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateCheckoutError(): Error | undefined {\n        return this._checkout.getUpdateError();\n    }\n\n    /**\n     * Returns an error if unable to submit the current order.\n     *\n     * @returns The error object if unable to submit, otherwise undefined.\n     */\n    getSubmitOrderError(): Error | undefined {\n        return this._paymentStrategies.getExecuteError();\n    }\n\n    /**\n     * Returns an error if unable to finalize the current order.\n     *\n     * @returns The error object if unable to finalize, otherwise undefined.\n     */\n    getFinalizeOrderError(): Error | undefined {\n        return this._paymentStrategies.getFinalizeError();\n    }\n\n    /**\n     * Returns an error if unable to load the current order.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadOrderError(): Error | undefined {\n        return this._order.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load the current cart.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCartError(): Error | undefined {\n        return this._cart.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load billing countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadBillingCountriesError(): Error | undefined {\n        return this._countries.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load shipping countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingCountriesError(): Error | undefined {\n        return this._shippingCountries.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load payment methods.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodsError(): Error | undefined {\n        return this._paymentMethods.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to load.\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodError(methodId?: string): Error | undefined {\n        return this._paymentMethods.getLoadMethodError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to initialize a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to initialize.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializePaymentError(methodId?: string): Error | undefined {\n        return this._paymentStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to sign in.\n     *\n     * @returns The error object if unable to sign in, otherwise undefined.\n     */\n    getSignInError(): Error | undefined {\n        return this._customerStrategies.getSignInError();\n    }\n\n    /**\n     * Returns an error if unable to sign out.\n     *\n     * @returns The error object if unable to sign out, otherwise undefined.\n     */\n    getSignOutError(): Error | undefined {\n        return this._customerStrategies.getSignOutError();\n    }\n\n    /**\n     * Returns an error if unable to initialize the customer step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeCustomerError(methodId?: string): Error | undefined {\n        return this._customerStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to load shipping options.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingOptionsError(): Error | undefined {\n        return this._consignments.getLoadShippingOptionsError();\n    }\n\n    /**\n     * Returns an error if unable to select a shipping option.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to select, otherwise undefined.\n     */\n    getSelectShippingOptionError(consignmentId?: string): Error | undefined {\n        return this._shippingStrategies.getSelectOptionError() ||\n            this._consignments.getUpdateShippingOptionError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to continue as guest.\n     *\n     * @returns The error object if unable to continue, otherwise undefined.\n     */\n    getContinueAsGuestError(): Error | undefined {\n        return this._billingAddress.getContinueAsGuestError();\n    }\n\n    /**\n     * Returns an error if unable to update billing address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateBillingAddressError(): Error | undefined {\n        return this._billingAddress.getUpdateError();\n    }\n\n    /**\n     * Returns an error if unable to update shipping address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateShippingAddressError(): Error | undefined {\n        return this._shippingStrategies.getUpdateAddressError();\n    }\n\n    /**\n     * Returns an error if unable to delete a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteConsignmentError(consignmentId?: string): Error | undefined {\n        return this._consignments.getDeleteError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to update a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateConsignmentError(consignmentId?: string): Error | undefined {\n        return this._consignments.getUpdateError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to create consignments.\n     *\n     * @returns The error object if unable to create, otherwise undefined.\n     */\n    getCreateConsignmentsError(): Error | undefined {\n        return this._consignments.getCreateError();\n    }\n\n    /**\n     * Returns an error if unable to initialize the shipping step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeShippingError(methodId?: string): Error | undefined {\n        return this._shippingStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to apply a coupon code.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyCouponError(): Error | undefined {\n        return this._coupons.getApplyError();\n    }\n\n    /**\n     * Returns an error if unable to remove a coupon code.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveCouponError(): Error | undefined {\n        return this._coupons.getRemoveError();\n    }\n\n    /**\n     * Returns an error if unable to apply a gift certificate.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyGiftCertificateError(): Error | undefined {\n        return this._giftCertificates.getApplyError();\n    }\n\n    /**\n     * Returns an error if unable to remove a gift certificate.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveGiftCertificateError(): Error | undefined {\n        return this._giftCertificates.getRemoveError();\n    }\n\n    /**\n     * Returns an error if unable to load payment instruments.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadInstrumentsError(): Error | undefined {\n        return this._instruments.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to delete a payment instrument.\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteInstrumentError(instrumentId?: string): Error | undefined {\n        return this._instruments.getDeleteError(instrumentId);\n    }\n\n    /**\n     * Returns an error if unable to load the checkout configuration of a store.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadConfigError(): Error | undefined {\n        return this._config.getLoadError();\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerStrategySelector } from '../customer';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { ConsignmentSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for checking the statuses of various asynchronous actions related\n * to checkout.\n *\n * This object has a set of getters that return true if an action is in\n * progress. For example, you can check whether a customer is submitting an\n * order and waiting for the request to complete.\n */\n@selector\nexport default class CheckoutStoreStatusSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customerStrategies: CustomerStrategySelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _paymentStrategies: PaymentStrategySelector;\n    private _shippingCountries: ShippingCountrySelector;\n    private _shippingStrategies: ShippingStrategySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customerStrategies = selectors.customerStrategies;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._paymentMethods = selectors.paymentMethods;\n        this._paymentStrategies = selectors.paymentStrategies;\n        this._shippingCountries = selectors.shippingCountries;\n        this._shippingStrategies = selectors.shippingStrategies;\n    }\n\n    /**\n     * Checks whether any checkout action is pending.\n     *\n     * @returns True if there is a pending action, otherwise false.\n     */\n    isPending(): boolean {\n        return this.isLoadingCheckout() ||\n            this.isSubmittingOrder() ||\n            this.isFinalizingOrder() ||\n            this.isLoadingOrder() ||\n            this.isLoadingCart() ||\n            this.isLoadingBillingCountries() ||\n            this.isLoadingShippingCountries() ||\n            this.isLoadingPaymentMethods() ||\n            this.isLoadingPaymentMethod() ||\n            this.isInitializingPayment() ||\n            this.isLoadingShippingOptions() ||\n            this.isSelectingShippingOption() ||\n            this.isSigningIn() ||\n            this.isSigningOut() ||\n            this.isInitializingCustomer() ||\n            this.isUpdatingBillingAddress() ||\n            this.isContinuingAsGuest() ||\n            this.isUpdatingShippingAddress() ||\n            this.isUpdatingConsignment() ||\n            this.isCreatingConsignments() ||\n            this.isDeletingConsignment() ||\n            this.isInitializingShipping() ||\n            this.isApplyingCoupon() ||\n            this.isRemovingCoupon() ||\n            this.isApplyingGiftCertificate() ||\n            this.isRemovingGiftCertificate() ||\n            this.isLoadingInstruments() ||\n            this.isDeletingInstrument() ||\n            this.isLoadingConfig() ||\n            this.isCustomerStepPending() ||\n            this.isPaymentStepPending();\n    }\n\n    /**\n     * Checks whether the current checkout is loading.\n     *\n     * @returns True if the current checkout is loading, otherwise false.\n     */\n    isLoadingCheckout(): boolean {\n        return this._checkout.isLoading();\n    }\n\n    /**\n     * Checks whether the current checkout is being updated.\n     *\n     * @returns True if the current checkout is being updated, otherwise false.\n     */\n    isUpdatingCheckout(): boolean {\n        return this._checkout.isUpdating();\n    }\n\n    /**\n     * Checks whether the current order is submitting.\n     *\n     * @returns True if the current order is submitting, otherwise false.\n     */\n    isSubmittingOrder(): boolean {\n        return this._paymentStrategies.isExecuting();\n    }\n\n    /**\n     * Checks whether the current order is finalizing.\n     *\n     * @returns True if the current order is finalizing, otherwise false.\n     */\n    isFinalizingOrder(): boolean {\n        return this._paymentStrategies.isFinalizing();\n    }\n\n    /**\n     * Checks whether the current order is loading.\n     *\n     * @returns True if the current order is loading, otherwise false.\n     */\n    isLoadingOrder(): boolean {\n        return this._order.isLoading();\n    }\n\n    /**\n     * Checks whether the current cart is loading.\n     *\n     * @returns True if the current cart is loading, otherwise false.\n     */\n    isLoadingCart(): boolean {\n        return this._cart.isLoading();\n    }\n\n    /**\n     * Checks whether billing countries are loading.\n     *\n     * @returns True if billing countries are loading, otherwise false.\n     */\n    isLoadingBillingCountries(): boolean {\n        return this._countries.isLoading();\n    }\n\n    /**\n     * Checks whether shipping countries are loading.\n     *\n     * @returns True if shipping countries are loading, otherwise false.\n     */\n    isLoadingShippingCountries(): boolean {\n        return this._shippingCountries.isLoading();\n    }\n\n    /**\n     * Checks whether payment methods are loading.\n     *\n     * @returns True if payment methods are loading, otherwise false.\n     */\n    isLoadingPaymentMethods(): boolean {\n        return this._paymentMethods.isLoading();\n    }\n\n    /**\n     * Checks whether a specific or any payment method is loading.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is loading.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is loading, otherwise false.\n     */\n    isLoadingPaymentMethod(methodId?: string): boolean {\n        return this._paymentMethods.isLoadingMethod(methodId);\n    }\n\n    /**\n     * Checks whether a specific or any payment method is initializing.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is initializing.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is initializing, otherwise false.\n     */\n    isInitializingPayment(methodId?: string): boolean {\n        return this._paymentStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is signing in.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing in using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing in the\n     * current customer.\n     * @returns True if the customer is signing in, otherwise false.\n     */\n    isSigningIn(methodId?: string): boolean {\n        return this._customerStrategies.isSigningIn(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is signing out.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing out using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing out the\n     * current customer.\n     * @returns True if the customer is signing out, otherwise false.\n     */\n    isSigningOut(methodId?: string): boolean {\n        return this._customerStrategies.isSigningOut(methodId);\n    }\n\n    /**\n     * Checks whether the customer step is initializing.\n     *\n     * If an ID is provided, the method also checks whether the customer step is\n     * initializing using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for initializing the\n     * customer step of checkout.\n     * @returns True if the customer step is initializing, otherwise false.\n     */\n    isInitializingCustomer(methodId?: string): boolean {\n        return this._customerStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether shipping options are loading.\n     *\n     * @returns True if shipping options are loading, otherwise false.\n     */\n    isLoadingShippingOptions(): boolean {\n        return this._consignments.isLoadingShippingOptions();\n    }\n\n    /**\n     * Checks whether a shipping option is being selected.\n     *\n     * A consignment ID should be provided when checking if a shipping option\n     * is being selected for a specific consignment, otherwise it will check\n     * for all consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if selecting a shipping option, otherwise false.\n     */\n    isSelectingShippingOption(consignmentId?: string): boolean {\n        return this._shippingStrategies.isSelectingOption() ||\n            this._consignments.isUpdatingShippingOption(consignmentId);\n    }\n\n    /**\n     * Checks whether the billing address is being updated.\n     *\n     * @returns True if updating their billing address, otherwise false.\n     */\n    isUpdatingBillingAddress(): boolean {\n        return this._billingAddress.isUpdating();\n    }\n\n    /**\n     * Checks whether the shopper is continuing out as a guest.\n     *\n     * @returns True if continuing as guest, otherwise false.\n     */\n    isContinuingAsGuest(): boolean {\n        return this._billingAddress.isContinuingAsGuest();\n    }\n\n    /**\n     * Checks the shipping address is being updated.\n     *\n     * @returns True if updating their shipping address, otherwise false.\n     */\n    isUpdatingShippingAddress(): boolean {\n        return this._shippingStrategies.isUpdatingAddress();\n    }\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if updating consignment(s), otherwise false.\n     */\n    isUpdatingConsignment(consignmentId?: string): boolean {\n        return this._consignments.isUpdating(consignmentId);\n    }\n\n    /**\n     * Checks whether a given/any consignment is being deleted.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if deleting consignment(s), otherwise false.\n     */\n    isDeletingConsignment(consignmentId?: string): boolean {\n        return this._consignments.isDeleting(consignmentId);\n    }\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @returns True if creating consignments, otherwise false.\n     */\n    isCreatingConsignments(): boolean {\n        return this._consignments.isCreating();\n    }\n\n    /**\n     * Checks whether the shipping step of a checkout process is initializing.\n     *\n     * If an identifier is provided, the method also checks whether the shipping\n     * step is initializing using a specific shipping method with the same\n     * identifier.\n     *\n     * @param methodId - The identifer of the initialization method to check.\n     * @returns True if the shipping step is initializing, otherwise false.\n     */\n    isInitializingShipping(methodId?: string) {\n        return this._shippingStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is applying a coupon code.\n     *\n     * @returns True if applying a coupon code, otherwise false.\n     */\n    isApplyingCoupon(): boolean {\n        return this._coupons.isApplying();\n    }\n\n    /**\n     * Checks whether the current customer is removing a coupon code.\n     *\n     * @returns True if removing a coupon code, otherwise false.\n     */\n    isRemovingCoupon(): boolean {\n        return this._coupons.isRemoving();\n    }\n\n    /**\n     * Checks whether the current customer is applying a gift certificate.\n     *\n     * @returns True if applying a gift certificate, otherwise false.\n     */\n    isApplyingGiftCertificate(): boolean {\n        return this._giftCertificates.isApplying();\n    }\n\n    /**\n     * Checks whether the current customer is removing a gift certificate.\n     *\n     * @returns True if removing a gift certificate, otherwise false.\n     */\n    isRemovingGiftCertificate(): boolean {\n        return this._giftCertificates.isRemoving();\n    }\n\n    /**\n     * Checks whether the current customer's payment instruments are loading.\n     *\n     * @returns True if payment instruments are loading, otherwise false.\n     */\n    isLoadingInstruments(): boolean {\n        return this._instruments.isLoading();\n    }\n\n    /**\n     * Checks whether the current customer is deleting a payment instrument.\n     *\n     * @returns True if deleting a payment instrument, otherwise false.\n     */\n    isDeletingInstrument(instrumentId?: string): boolean {\n        return this._instruments.isDeleting(instrumentId);\n    }\n\n    /**\n     * Checks whether the checkout configuration of a store is loading.\n     *\n     * @returns True if the configuration is loading, otherwise false.\n     */\n    isLoadingConfig(): boolean {\n        return this._config.isLoading();\n    }\n\n    /**\n     * Checks whether the customer step of a checkout is in a pending state.\n     *\n     * The customer step is considered to be pending if it is in the process of\n     * initializing, signing in, signing out, and/or interacting with a customer\n     * widget.\n     *\n     * @returns True if the customer step is pending, otherwise false.\n     */\n    isCustomerStepPending(): boolean {\n        return this._customerStrategies.isInitializing() ||\n            this._customerStrategies.isSigningIn() ||\n            this._customerStrategies.isSigningOut() ||\n            this._customerStrategies.isWidgetInteracting();\n    }\n\n    /**\n     * Checks whether the payment step of a checkout is in a pending state.\n     *\n     * The payment step is considered to be pending if it is in the process of\n     * initializing, submitting an order, finalizing an order, and/or\n     * interacting with a payment widget.\n     *\n     * @returns True if the payment step is pending, otherwise false.\n     */\n    isPaymentStepPending(): boolean {\n        return this._paymentStrategies.isInitializing() ||\n            this._paymentStrategies.isExecuting() ||\n            this._paymentStrategies.isFinalizing() ||\n            this._paymentStrategies.isWidgetInteracting();\n    }\n}\n","import {\n    CheckoutSelectors,\n    CheckoutStoreErrorSelector,\n    CheckoutStoreSelector,\n    CheckoutStoreStatusSelector,\n    InternalCheckoutSelectors,\n} from '../checkout';\n\nexport default function createCheckoutSelectors(selectors: InternalCheckoutSelectors): CheckoutSelectors {\n    const data = new CheckoutStoreSelector(selectors);\n    const errors = new CheckoutStoreErrorSelector(selectors);\n    const statuses = new CheckoutStoreStatusSelector(selectors);\n\n    return {\n        data,\n        errors,\n        statuses,\n    };\n}\n","import { toSingleLine } from '../utility';\n\nexport default class ErrorMessageTransformer<TError extends Error = Error> {\n    constructor(\n        private _messageCustomizer: (type: TError) => string\n    ) {}\n\n    transform(error: TError): TError {\n        error.message = toSingleLine(this._messageCustomizer(error));\n\n        return error;\n    }\n}\n","export default function toSingleLine(input?: string) {\n    if (!input) {\n        return '';\n    }\n\n    return input.split(/(?:\\r\\n|\\n|\\r)/)\n        .map(line => line.replace(/^\\s+/gm, ''))\n        .join(' ')\n        .trim();\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\n\nimport { AddressRequestBody } from '../address';\nimport { BillingAddressActionCreator, BillingAddressRequestBody } from '../billing';\nimport { ErrorMessageTransformer } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\nimport { CouponActionCreator, GiftCertificateActionCreator } from '../coupon';\nimport { CustomerCredentials, CustomerInitializeOptions, CustomerRequestOptions, CustomerStrategyActionCreator, GuestCredentials } from '../customer';\nimport { CountryActionCreator } from '../geography';\nimport { OrderActionCreator, OrderRequestBody } from '../order';\nimport { PaymentInitializeOptions, PaymentMethodActionCreator, PaymentRequestOptions, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator } from '../payment/instrument';\nimport { ConsignmentsRequestBody, ConsignmentActionCreator, ShippingCountryActionCreator, ShippingInitializeOptions, ShippingRequestOptions, ShippingStrategyActionCreator } from '../shipping';\nimport { ConsignmentAssignmentRequestBody, ConsignmentUpdateRequestBody } from '../shipping/consignment';\n\nimport { CheckoutRequestBody } from './checkout';\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutSelectors from './checkout-selectors';\nimport CheckoutStore from './checkout-store';\nimport createCheckoutSelectors from './create-checkout-selectors';\nimport createCheckoutServiceErrorTransformer from './create-checkout-service-error-transformer';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for completing the checkout process for the current customer.\n *\n * This object can be used to collect all information that is required for\n * checkout, such as shipping and billing information. It can also be used to\n * retrieve the current checkout state and subscribe to its changes.\n */\nexport default class CheckoutService {\n    private _state: CheckoutSelectors;\n    private _errorTransformer: ErrorMessageTransformer;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _configActionCreator: ConfigActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _countryActionCreator: CountryActionCreator,\n        private _couponActionCreator: CouponActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _giftCertificateActionCreator: GiftCertificateActionCreator,\n        private _instrumentActionCreator: InstrumentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _shippingCountryActionCreator: ShippingCountryActionCreator,\n        private _shippingStrategyActionCreator: ShippingStrategyActionCreator\n    ) {\n        this._state = createCheckoutSelectors(this._store.getState());\n        this._errorTransformer = createCheckoutServiceErrorTransformer();\n\n        this._store.subscribe(state => {\n            this._state = createCheckoutSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current checkout state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * checkout state. You can query the state by calling any of its getter\n     * methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.data.getOrder());\n     * console.log(state.errors.getSubmitOrderError());\n     * console.log(state.statuses.isSubmittingOrder());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutSelectors {\n        return this._state;\n    }\n\n    /**\n     * Notifies all subscribers with the current state.\n     *\n     * When this method gets called, the subscribers get called regardless if\n     * they have any filters applied.\n     */\n    notifyState(): void {\n        this._store.notifyState();\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the checkout state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.data.getCart();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutSelectors) => void,\n        ...filters: Array<(state: CheckoutSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            ...filters.map(filter => (state: InternalCheckoutSelectors) => filter(createCheckoutSelectors(state)))\n        );\n    }\n\n    /**\n     * Loads the current checkout.\n     *\n     * This method can only be called if there is an active checkout. Also, it\n     * can only retrieve data that belongs to the current customer. When it is\n     * successfully executed, you can retrieve the data by calling\n     * `CheckoutStoreSelector#getCheckout`.\n     *\n     * ```js\n     * const state = await service.loadCheckout('0cfd6c06-57c3-4e29-8d7a-de55cc8a9052');\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param id - The identifier of the checkout to load, or the default checkout if not provided.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    loadCheckout(id?: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this._dispatch(id ?\n            this._checkoutActionCreator.loadCheckout(id, options) :\n            this._checkoutActionCreator.loadDefaultCheckout(options)\n        );\n    }\n\n    /**\n     * Updates specific properties of the current checkout.\n     *\n     * ```js\n     * const state = await service.updateCheckout(checkout);\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param payload - The checkout properties to be updated.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    updateCheckout(payload: CheckoutRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._checkoutActionCreator.updateCheckout(payload, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads an order by an id.\n     *\n     * The method can only retrieve an order if the order belongs to the current\n     * customer. If it is successfully executed, the data can be retrieved by\n     * calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.loadOrder(123);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param orderId - The identifier of the order to load.\n     * @param options - Options for loading the order.\n     * @returns A promise that resolves to the current state.\n     */\n    loadOrder(orderId: number, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const loadCheckoutAction = this._orderActionCreator.loadOrder(orderId, options);\n        const loadConfigAction = this._configActionCreator.loadConfig(options);\n\n        return Promise.all([\n            this._dispatch(loadCheckoutAction),\n            this._dispatch(loadConfigAction, { queueId: 'config' }),\n        ])\n            .then(() => this.getState());\n    }\n\n    /**\n     * Submits an order, thereby completing a checkout process.\n     *\n     * Before you can submit an order, you must initialize the payment method\n     * chosen by the customer by calling `CheckoutService#initializePayment`.\n     *\n     * ```js\n     * await service.initializePayment({ methodId: 'braintree' });\n     * await service.submitOrder({\n     *     methodId: 'braintree',\n     *     payment: {\n     *         paymentData: {\n     *             ccExpiry: { month: 10, year: 20 },\n     *             ccName: 'BigCommerce',\n     *             ccNumber: '4111111111111111',\n     *             ccType: 'visa',\n     *             ccCvv: 123,\n     *         },\n     *     },\n     * });\n     * ```\n     *\n     * You are not required to include `paymentData` if the order does not\n     * require additional payment details. For example, the customer has already\n     * entered their payment details on the cart page using one of the hosted\n     * payment methods, such as PayPal. Or the customer has applied a gift\n     * certificate that exceeds the grand total amount.\n     *\n     * If the order is submitted successfully, you can retrieve the newly\n     * created order by calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.submitOrder(payload);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param payload - The request payload to submit for the current order.\n     * @param options - Options for submitting the current order.\n     * @returns A promise that resolves to the current state.\n     */\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.execute(payload, options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Finalizes the submission process for an order.\n     *\n     * This method is only required for certain hosted payment methods that\n     * require a customer to enter their credit card details on their website.\n     * You need to call this method once the customer has redirected back to\n     * checkout in order to complete the checkout process.\n     *\n     * If the method is called before order finalization is required or for a\n     * payment method that does not require order finalization, an error will be\n     * thrown. Conversely, if the method is called successfully, you should\n     * immediately redirect the customer to the order confirmation page.\n     *\n     * ```js\n     * try {\n     *     await service.finalizeOrderIfNeeded();\n     *\n     *     window.location.assign('/order-confirmation');\n     * } catch (error) {\n     *     if (error.type !== 'order_finalization_not_required') {\n     *         throw error;\n     *     }\n     * }\n     * ```\n     *\n     * @param options - Options for finalizing the current order.\n     * @returns A promise that resolves to the current state.\n     * @throws `OrderFinalizationNotRequiredError` error if order finalization\n     * is not required for the current order at the time of execution.\n     */\n    finalizeOrderIfNeeded(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.finalize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of payment methods available for checkout.\n     *\n     * If a customer enters their payment details before navigating to the\n     * checkout page (i.e.: using PayPal checkout button on the cart page), only\n     * one payment method will be available for the customer - the selected\n     * payment method. Otherwise, by default, all payment methods configured by\n     * the merchant will be available for the customer.\n     *\n     * Once the method is executed successfully, you can call\n     * `CheckoutStoreSelector#getPaymentMethods` to retrieve the list of payment\n     * methods.\n     *\n     * ```js\n     * const state = service.loadPaymentMethods();\n     *\n     * console.log(state.data.getPaymentMethods());\n     * ```\n     *\n     * @param options - Options for loading the payment methods that are\n     * available to the current customer.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethods(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethods(options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Loads a payment method by an id.\n     *\n     * This method does not work with multi-option payment providers. Due to its\n     * limitation, it is deprecated and will be removed in the future.\n     *\n     * @deprecated\n     * @internal\n     * @param methodId - The identifier for the payment method to load.\n     * @param options - Options for loading the payment method.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethod(methodId: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethod(methodId, options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Initializes the payment step of a checkout process.\n     *\n     * Before a payment method can accept payment details, it must first be\n     * initialized. Some payment methods require you to provide additional\n     * initialization options. For example, Amazon requires a container ID in\n     * order to initialize their payment widget.\n     *\n     * ```js\n     * await service.initializePayment({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'walletWidget',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * De-initializes the payment step of a checkout process.\n     *\n     * The method should be called once you no longer require a payment method\n     * to be initialized. It can perform any necessary clean-up behind the\n     * scene, i.e.: remove DOM nodes or event handlers that are attached as a\n     * result of payment initialization.\n     *\n     * ```js\n     * await service.deinitializePayment({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of countries available for billing.\n     *\n     * Once you make a successful request, you will be able to retrieve the list\n     * of countries by calling `CheckoutStoreSelector#getBillingCountries`.\n     *\n     * ```js\n     * const state = await service.loadBillingCountries();\n     *\n     * console.log(state.data.getBillingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available billing countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._countryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'billingCountries' });\n    }\n\n    /**\n     * Loads a list of countries available for shipping.\n     *\n     * The list is determined based on the shipping zones configured by a\n     * merchant. Once you make a successful call, you will be able to retrieve\n     * the list of available shipping countries by calling\n     * `CheckoutStoreSelector#getShippingCountries`.\n     *\n     * ```js\n     * const state = await service.loadShippingCountries();\n     *\n     * console.log(state.data.getShippingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available shipping countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingCountryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'shippingCountries' });\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their billing address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getBillingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadBillingAddressFields();\n     *\n     * console.log(state.data.getBillingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the billing address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadBillingCountries(options);\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their shipping address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getShippingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadShippingAddressFields();\n     *\n     * console.log(state.data.getShippingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the shipping address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadShippingCountries(options);\n    }\n\n    /**\n     * Initializes the sign-in step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, have their own sign-in flow. In\n     * order to support them, this method must be called.\n     *\n     * ```js\n     * await service.initializeCustomer({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'signInButton',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeCustomer(options?: CustomerInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * De-initializes the sign-in step of a checkout process.\n     *\n     * It should be called once you no longer want to prompt customers to sign\n     * in. It can perform any necessary clean-up behind the scene, i.e.: remove\n     * DOM nodes or event handlers that are attached as a result of customer\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeCustomer({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Continues to check out as a guest.\n     *\n     * The customer is required to provide their email address in order to\n     * continue. Once they provide their email address, it will be stored as a\n     * part of their billing address.\n     *\n     * @param credentials - The guest credentials to use.\n     * @param options - Options for continuing as a guest.\n     * @returns A promise that resolves to the current state.\n     */\n    continueAsGuest(credentials: GuestCredentials, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.continueAsGuest(credentials, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Signs into a customer's registered account.\n     *\n     * Once the customer is signed in successfully, the checkout state will be\n     * populated with information associated with the customer, such as their\n     * saved addresses. You can call `CheckoutStoreSelector#getCustomer` to\n     * retrieve the data.\n     *\n     * ```js\n     * const state = await service.signInCustomer({\n     *     email: 'foo@bar.com',\n     *     password: 'password123',\n     * });\n     *\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param credentials - The credentials to be used for signing in the customer.\n     * @param options - Options for signing in the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signInCustomer(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signIn(credentials, options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Signs out the current customer if they are previously signed in.\n     *\n     * Once the customer is successfully signed out, the checkout state will be\n     * reset automatically.\n     *\n     * ```js\n     * const state = await service.signOutCustomer();\n     *\n     * // The returned object should not contain information about the previously signed-in customer.\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param options - Options for signing out the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signOutCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signOut(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Loads a list of shipping options available for checkout.\n     *\n     * Available shipping options can only be determined once a customer\n     * provides their shipping address. If the method is executed successfully,\n     * `CheckoutStoreSelector#getShippingOptions` can be called to retrieve the\n     * list of shipping options.\n     *\n     * ```js\n     * const state = await service.loadShippingOptions();\n     *\n     * console.log(state.data.getShippingOptions());\n     * ```\n     *\n     * @param options - Options for loading the available shipping options.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingOptions(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.loadShippingOptions(options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Initializes the shipping step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, can provide shipping information to\n     * be used for checkout. In order to support them, this method must be\n     * called.\n     *\n     * ```js\n     * await service.initializeShipping({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'addressBook',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeShipping(options?: ShippingInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * De-initializes the shipping step of a checkout process.\n     *\n     * It should be called once you no longer need to collect shipping details.\n     * It can perform any necessary clean-up behind the scene, i.e.: remove DOM\n     * nodes or event handlers that are attached as a result of shipping\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeShipping({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeShipping(options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for the current address.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectShippingOption('address-id', 'shipping-option-id');\n     *\n     * console.log(state.data.getSelectedShippingOption());\n     * ```\n     *\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectShippingOption(shippingOptionId: string, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.selectOption(shippingOptionId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the shipping address for the current checkout.\n     *\n     * When a customer updates their shipping address for an order, they will\n     * see an updated list of shipping options and the cost for each option,\n     * unless no options are available. If the update is successful, you can\n     * call `CheckoutStoreSelector#getShippingAddress` to retrieve the address.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateShippingAddress(address);\n     *\n     * console.log(state.data.getShippingAddress());\n     * ```\n     *\n     * @param address - The address to be used for shipping.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateShippingAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Creates consignments given a list.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddress`.\n     *\n     * When consignments are created, an updated list of shipping options will\n     * become available for each consignment, unless no options are available.\n     * If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve the updated list of\n     * consignments.'\n     *\n     * Beware that if a consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.createConsignments(consignments);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignments - The list of consignments to be created.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.createConsignments(consignments, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Deletes a consignment\n     *\n     * ```js\n     * const state = await service.deleteConsignment('55c96cda6f04c');\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The ID of the consignment to be deleted\n     * @param options - Options for the consignment delete request\n     * @returns A promise that resolves to the current state.\n     */\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.deleteConsignment(consignmentId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates a specific consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#selectShippingOption`.\n     *\n     * When a shipping address for a consignment is updated, an updated list of\n     * shipping options will become available for the consignment, unless no\n     * options are available. If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve updated list of\n     * consignments.\n     *\n     * Beware that if the updated consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateConsignment(consignment);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateConsignment(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that assigns items to be shipped to a specific address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and assigns the provided items. If no consignment matches the address, a new one\n     * will be created.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    assignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.assignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that unassigns items from a specific shipping address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and unassigns the specified items. If the consignment ends up with no line items\n     * after the unassignment, it will be deleted.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    unassignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.unassignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for a given consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddres`.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectConsignmentShippingOption(consignmentId, optionId);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The identified of the consignment to be updated.\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectConsignmentShippingOption(\n        consignmentId: string,\n        shippingOptionId: string,\n        options?: ShippingRequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateShippingOption({\n            id: consignmentId,\n            shippingOptionId,\n        }, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the billing address for the current checkout.\n     *\n     * A customer must provide their billing address before they can proceed to\n     * pay for their order.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateBillingAddress(address);\n     *\n     * console.log(state.data.getBillingAddress());\n     * ```\n     *\n     * @param address - The address to be used for billing.\n     * @param options - Options for updating the billing address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateBillingAddress(address: BillingAddressRequestBody, options: RequestOptions = {}): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a coupon code to the current checkout.\n     *\n     * Once the coupon code gets applied, the quote for the current checkout will\n     * be adjusted accordingly. The same coupon code cannot be applied more than\n     * once.\n     *\n     * ```js\n     * await service.applyCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to apply to the current checkout.\n     * @param options - Options for applying the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    applyCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.applyCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a coupon code from the current checkout.\n     *\n     * Once the coupon code gets removed, the quote for the current checkout will\n     * be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to remove from the current checkout.\n     * @param options - Options for removing the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    removeCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.removeCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a gift certificate to the current checkout.\n     *\n     * Once the gift certificate gets applied, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.applyGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to apply to the current checkout.\n     * @param options - Options for applying the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    applyGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.applyGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a gift certificate from an order.\n     *\n     * Once the gift certificate gets removed, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to remove from the current checkout.\n     * @param options - Options for removing the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    removeGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.removeGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads a list of payment instruments associated with a customer.\n     *\n     * Once the method has been called successfully, you can retrieve the list\n     * of payment instruments by calling `CheckoutStoreSelector#getInstruments`.\n     * If the customer does not have any payment instruments on record, i.e.:\n     * credit card, you will get an empty list instead.\n     *\n     * ```js\n     * const state = service.loadInstruments();\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @returns A promise that resolves to the current state.\n     */\n    loadInstruments(): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.loadInstruments();\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Deletes a payment instrument by an id.\n     *\n     * Once an instrument gets removed, it can no longer be retrieved using\n     * `CheckoutStoreSelector#getInstruments`.\n     *\n     * ```js\n     * const state = service.deleteInstrument('123');\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns A promise that resolves to the current state.\n     */\n    deleteInstrument(instrumentId: string): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.deleteInstrument(instrumentId);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Dispatches an action through the data store and returns the current state\n     * once the action is dispatched.\n     *\n     * @param action - The action to dispatch.\n     * @returns A promise that resolves to the current state.\n     */\n    private _dispatch(action: Observable<Action> | ThunkAction<Action>, options?: { queueId?: string }): Promise<CheckoutSelectors> {\n        return this._store.dispatch(action, options)\n            .then(() => this.getState())\n            .catch(error => {\n                throw this._errorTransformer.transform(error);\n            });\n    }\n}\n","import { ErrorMessageTransformer } from '../common/error';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../common/error/errors';\nimport { getEnvironment } from '../common/utility';\n\nexport type CheckoutServiceErrorType = MissingDataError | NotInitializedError;\nexport type CheckoutServiceErrorTransformer = ErrorMessageTransformer<CheckoutServiceErrorType | Error>;\n\nexport default function createCheckoutServiceErrorTransformer(\n    isDevelopment: boolean = getEnvironment() === 'development'\n): CheckoutServiceErrorTransformer {\n    return new ErrorMessageTransformer(error => {\n        if (!isDevelopment || !isCheckoutServiceError(error)) {\n            return error.message;\n        }\n\n        switch (error.subtype || error.type) {\n        case MissingDataErrorType.MissingConsignments:\n            return `\n                ${error.message}\n                The data could be unavailable because no shipping address has been provided.\n                To fix this, create a consignment or update the shipping address before performing\n                the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCart:\n        case MissingDataErrorType.MissingCheckout:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadCheckout\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you need to make sure \\`CheckoutService\\` is initialized\n                properly by calling \\`CheckoutService#loadCheckout\\` before performing any\n                other actions.\n            `;\n\n        case MissingDataErrorType.MissingOrder:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadOrder\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingOrderId:\n            return `\n                ${error.message}\n                The data could be unavailable because no order has been created yet. You have\n                to first create the order before you can perform the action.\n            `;\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server, or\n                configured by the merchant yet. To fix the former issue, you can try calling\n                \\`CheckoutService#loadPaymentMethods\\` before performing the same action again.\n            `;\n\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return `\n                In order to initialize the customer step of checkout, you need to call\n                \\`CheckoutService#initializeCustomer\\`. Afterwards, you should be able to\n                submit customer details.\n            `;\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the payment step of checkout, you need to call\n                \\`CheckoutService#initializePayment\\`. Afterwards, you should be able to\n                submit payment details.\n            `;\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the shipping step of checkout, you need to call\n                \\`CheckoutService#initializeShipping\\`. Afterwards, you should be able to\n                submit shipping details.\n            `;\n\n        default:\n            return error.message;\n        }\n    });\n}\n\nfunction isCheckoutServiceError(error: any): error is CheckoutServiceErrorType {\n    return !!(error.subtype || error.type);\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { getDefaultLogger } from '../common/log';\nimport { getEnvironment } from '../common/utility';\nimport { ConfigActionCreator, ConfigRequestSender, ConfigState } from '../config';\nimport { CouponActionCreator, CouponRequestSender, GiftCertificateActionCreator, GiftCertificateRequestSender } from '../coupon';\nimport { createCustomerStrategyRegistry, CustomerStrategyActionCreator } from '../customer';\nimport { CountryActionCreator, CountryRequestSender } from '../geography';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { createPaymentClient, createPaymentStrategyRegistry, PaymentMethodActionCreator, PaymentMethodRequestSender, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator, InstrumentRequestSender } from '../payment/instrument';\nimport { createShippingStrategyRegistry, ConsignmentActionCreator, ConsignmentRequestSender, ShippingCountryActionCreator, ShippingCountryRequestSender, ShippingStrategyActionCreator } from '../shipping';\n\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport CheckoutService from './checkout-service';\nimport CheckoutValidator from './checkout-validator';\nimport createCheckoutStore from './create-checkout-store';\n\n/**\n * Creates an instance of `CheckoutService`.\n *\n * ```js\n * const service = createCheckoutService();\n *\n * service.subscribe(state => {\n *     console.log(state);\n * });\n *\n * service.loadCheckout();\n * ```\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutService`.\n */\nexport default function createCheckoutService(options?: CheckoutServiceOptions): CheckoutService {\n    if (document.location.protocol !== 'https:') {\n        getDefaultLogger().warn('The BigCommerce Checkout SDK should not be used on a non-HTTPS page');\n    }\n\n    if (getEnvironment() !== 'production') {\n        getDefaultLogger().warn('Note that the development build is not optimized. To create a production build, set process.env.NODE_ENV to `production`.');\n    }\n\n    const config: ConfigState = {\n        meta: {\n            externalSource: options && options.externalSource,\n        },\n        errors: {},\n        statuses: {},\n    };\n    const { locale = '', shouldWarnMutation = true } = options || {};\n    const requestSender = createRequestSender({ host: options && options.host });\n    const store = createCheckoutStore({ config }, { shouldWarnMutation });\n    const paymentClient = createPaymentClient(store);\n    const orderRequestSender = new OrderRequestSender(requestSender);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const configActionCreator = new ConfigActionCreator(new ConfigRequestSender(requestSender));\n    const orderActionCreator = new OrderActionCreator(orderRequestSender, new CheckoutValidator(checkoutRequestSender));\n\n    return new CheckoutService(\n        store,\n        new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender)),\n        new CheckoutActionCreator(checkoutRequestSender, configActionCreator),\n        configActionCreator,\n        new ConsignmentActionCreator(new ConsignmentRequestSender(requestSender), checkoutRequestSender),\n        new CountryActionCreator(new CountryRequestSender(requestSender, { locale })),\n        new CouponActionCreator(new CouponRequestSender(requestSender)),\n        new CustomerStrategyActionCreator(createCustomerStrategyRegistry(store, requestSender)),\n        new GiftCertificateActionCreator(new GiftCertificateRequestSender(requestSender)),\n        new InstrumentActionCreator(new InstrumentRequestSender(paymentClient, requestSender)),\n        orderActionCreator,\n        new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n        new PaymentStrategyActionCreator(\n            createPaymentStrategyRegistry(store, paymentClient, requestSender),\n            orderActionCreator\n        ),\n        new ShippingCountryActionCreator(new ShippingCountryRequestSender(requestSender, { locale })),\n        new ShippingStrategyActionCreator(createShippingStrategyRegistry(store, requestSender))\n    );\n}\n\nexport interface CheckoutServiceOptions {\n    locale?: string;\n    host?: string;\n    shouldWarnMutation?: boolean;\n    externalSource?: string;\n}\n","/// <reference path=\"../payment/bigpay-client.d.ts\" />\nimport { createClient as createBigpayClient } from '@bigcommerce/bigpay-client';\n\nimport { CheckoutStore } from '../checkout';\n\nexport default function createPaymentClient(store: CheckoutStore) {\n    const paymentClient = createBigpayClient();\n\n    store.subscribe(\n        state => {\n            const config = state.config.getStoreConfig();\n\n            if (config) {\n                paymentClient.setHost(config.paymentSettings.bigpayBaseUrl);\n            }\n        },\n        state => state.config.getStoreConfig()\n    );\n\n    return paymentClient;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport Config from './config';\n\nexport enum ConfigActionType {\n    LoadConfigRequested = 'LOAD_CONFIG_REQUESTED',\n    LoadConfigSucceeded = 'LOAD_CONFIG_SUCCEEDED',\n    LoadConfigFailed = 'LOAD_CONFIG_FAILED',\n}\n\nexport type LoadConfigAction =\n    LoadConfigRequestedAction |\n    LoadConfigSucceededAction |\n    LoadConfigFailedAction;\n\nexport interface LoadConfigRequestedAction extends Action {\n    type: ConfigActionType.LoadConfigRequested;\n}\n\nexport interface LoadConfigSucceededAction extends Action<Config> {\n    type: ConfigActionType.LoadConfigSucceeded;\n}\n\nexport interface LoadConfigFailedAction extends Action<Error> {\n    type: ConfigActionType.LoadConfigFailed;\n}\n","module.exports = require(\"rxjs/observable/defer\");","export const ACKNOWLEDGE = 'ACKNOWLEDGE';\nexport const FINALIZE = 'FINALIZE';\nexport const INITIALIZE = 'INITIALIZE';\n","import { setPrototypeOf } from '../../utility';\n\nexport default class StandardError extends Error {\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = (new Error(this.message)).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","module.exports = require(\"@bigcommerce/request-sender\");","module.exports = require(\"@bigcommerce/script-loader\");","module.exports = require(\"rxjs/observable/from\");","export default interface PaymentStrategyState {\n    errors: PaymentStrategyErrorsState;\n    statuses: PaymentStrategyStatusesState;\n}\n\nexport interface PaymentStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    executeError?: Error;\n    executeMethodId?: string;\n    finalizeError?: Error;\n    finalizeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface PaymentStrategyStatusesState {\n    deinitializeMethodId?: string;\n    executeMethodId?: string;\n    finalizeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isExecuting?: boolean;\n    isFinalizing?: boolean;\n    isInitializing?: boolean;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: PaymentStrategyState = {\n    errors: {},\n    statuses: {},\n};\n","const DEFAULT_INCLUDES = [\n    'cart.lineItems.physicalItems.options',\n    'cart.lineItems.digitalItems.options',\n    'customer',\n    'payments',\n    'promotions.banners',\n];\n\nexport default DEFAULT_INCLUDES;\n","import { Action } from '@bigcommerce/data-store';\n\nimport { InternalOrderResponseData } from './internal-order-responses';\nimport Order from './order';\n\nexport enum OrderActionType {\n    LoadOrderRequested = 'LOAD_ORDER_REQUESTED',\n    LoadOrderSucceeded = 'LOAD_ORDER_SUCCEEDED',\n    LoadOrderFailed = 'LOAD_ORDER_FAILED',\n\n    LoadOrderPaymentsRequested = 'LOAD_ORDER_PAYMENTS_REQUESTED',\n    LoadOrderPaymentsSucceeded = 'LOAD_ORDER_PAYMENTS_SUCCEEDED',\n    LoadOrderPaymentsFailed = 'LOAD_ORDER_PAYMENTS_FAILED',\n\n    SubmitOrderRequested = 'SUBMIT_ORDER_REQUESTED',\n    SubmitOrderSucceeded = 'SUBMIT_ORDER_SUCCEEDED',\n    SubmitOrderFailed = 'SUBMIT_ORDER_FAILED',\n\n    FinalizeOrderRequested = 'FINALIZE_ORDER_REQUESTED',\n    FinalizeOrderSucceeded = 'FINALIZE_ORDER_SUCCEEDED',\n    FinalizeOrderFailed = 'FINALIZE_ORDER_FAILED',\n}\n\nexport type OrderAction = LoadOrderAction |\n    LoadOrderPaymentsAction |\n    SubmitOrderAction |\n    FinalizeOrderAction;\n\nexport type LoadOrderPaymentsAction = LoadOrderPaymentsRequestedAction |\n    LoadOrderPaymentsSucceededAction |\n    LoadOrderPaymentsFailedAction;\n\nexport type LoadOrderAction =\n    LoadOrderRequestedAction |\n    LoadOrderSucceededAction |\n    LoadOrderFailedAction;\n\nexport type SubmitOrderAction =\n    SubmitOrderRequestedAction |\n    SubmitOrderSucceededAction |\n    SubmitOrderFailedAction |\n    LoadOrderAction;\n\nexport type FinalizeOrderAction =\n    FinalizeOrderRequestedAction |\n    FinalizeOrderSucceededAction |\n    FinalizeOrderFailedAction |\n    LoadOrderAction;\n\nexport interface LoadOrderRequestedAction extends Action {\n    type: OrderActionType.LoadOrderRequested;\n}\n\nexport interface LoadOrderSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderSucceeded;\n}\n\nexport interface LoadOrderFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderFailed;\n}\n\nexport interface LoadOrderPaymentsRequestedAction extends Action {\n    type: OrderActionType.LoadOrderPaymentsRequested;\n}\n\nexport interface LoadOrderPaymentsSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderPaymentsSucceeded;\n}\n\nexport interface LoadOrderPaymentsFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderPaymentsFailed;\n}\n\nexport interface SubmitOrderRequestedAction extends Action {\n    type: OrderActionType.SubmitOrderRequested;\n}\n\nexport interface SubmitOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.SubmitOrderSucceeded;\n}\n\nexport interface SubmitOrderFailedAction extends Action<Error> {\n    type: OrderActionType.SubmitOrderFailed;\n}\n\nexport interface FinalizeOrderRequestedAction extends Action {\n    type: OrderActionType.FinalizeOrderRequested;\n}\n\nexport interface FinalizeOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.FinalizeOrderSucceeded;\n}\n\nexport interface FinalizeOrderFailedAction extends Action<Error> {\n    type: OrderActionType.FinalizeOrderFailed;\n}\n","export const HOSTED = 'PAYMENT_TYPE_HOSTED';\nexport const OFFLINE = 'PAYMENT_TYPE_OFFLINE';\n","export default class CacheKeyResolver {\n    private _lastId = 0;\n    private _maps: CacheKeyMap[] = [];\n\n    getKey(...args: any[]): string {\n        const { index, map, parentMaps } = this._resolveMap(...args);\n\n        if (map && map.cacheKey) {\n            map.usedCount++;\n\n            return map.cacheKey;\n        }\n\n        return this._generateKey(parentMaps, args.slice(index));\n    }\n\n    getUsedCount(...args: any[]): number {\n        const { map } = this._resolveMap(...args);\n\n        return map ? map.usedCount : 0;\n    }\n\n    private _resolveMap(...args: any[]): ResolveResult {\n        let index = 0;\n        let parentMaps = this._maps;\n\n        while (parentMaps.length) {\n            let isMatched = false;\n\n            for (const map of parentMaps) {\n                if (map.value !== args[index]) {\n                    continue;\n                }\n\n                if ((args.length === 0 || index === args.length - 1) && map.cacheKey) {\n                    return { index, map, parentMaps };\n                }\n\n                isMatched = true;\n                parentMaps = map.maps;\n                index++;\n\n                break;\n            }\n\n            if (!isMatched) {\n                break;\n            }\n        }\n\n        return { index, parentMaps };\n    }\n\n    private _generateKey(maps: CacheKeyMap[], args: any[]): string {\n        let index = 0;\n        let parentMaps = maps;\n        let map!: CacheKeyMap;\n\n        do {\n            map = {\n                usedCount: 1,\n                value: args[index],\n                maps: [],\n            };\n\n            parentMaps.push(map);\n\n            parentMaps = map.maps;\n            index++;\n        } while (index < args.length);\n\n        map.cacheKey = `${++this._lastId}`;\n\n        return map.cacheKey;\n    }\n}\n\ninterface CacheKeyMap {\n    maps: CacheKeyMap[];\n    value: any;\n    usedCount: number;\n    cacheKey?: string;\n}\n\ninterface ResolveResult {\n    index: number;\n    parentMaps: CacheKeyMap[];\n    map?: CacheKeyMap;\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\n\n@selector\nexport default class CheckoutButtonErrorSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    getInitializeButtonError(methodId?: string): Error | undefined {\n        return this._checkoutButton.getInitializeError(methodId);\n    }\n\n    getDeinitializeButtonError(methodId?: string): Error | undefined {\n        return this._checkoutButton.getDeinitializeError(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\n\n@selector\nexport default class CheckoutButtonStatusSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    isInitializingButton(methodId?: string): boolean {\n        return this._checkoutButton.isInitializing(methodId);\n    }\n\n    isDeinitializingButton(methodId?: string): boolean {\n        return this._checkoutButton.isDeinitializing(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\n\nimport CheckoutButtonErrorSelector from './checkout-button-error-selector';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStatusSelector from './checkout-button-status-selector';\n\nexport default function createCheckoutButtonSelectors(selectors: InternalCheckoutSelectors): CheckoutButtonSelectors {\n    const errors = new CheckoutButtonErrorSelector(selectors);\n    const statuses = new CheckoutButtonStatusSelector(selectors);\n\n    return {\n        errors,\n        statuses,\n    };\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../checkout';\n\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonSelectors from './create-checkout-button-selectors';\n\nexport default class CheckoutButtonInitializer {\n    private _state: CheckoutButtonSelectors;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _buttonStrategyActionCreator: CheckoutButtonStrategyActionCreator\n    ) {\n        this._state = createCheckoutButtonSelectors(this._store.getState());\n\n        this._store.subscribe(state => {\n            this._state = createCheckoutButtonSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * state. You can query the state by calling any of its getter methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.errors.getInitializeButtonError());\n     * console.log(state.statuses.isInitializingButton());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutButtonSelectors {\n        return this._state;\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the current state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.statuses.isInitializingButton());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.errors.getInitializeButtonError();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.errors.getInitializeButtonError())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutButtonSelectors) => void,\n        ...filters: Array<(state: CheckoutButtonSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            state => state.checkoutButton.getState(),\n            ...filters.map(filter => (state: InternalCheckoutSelectors) => filter(createCheckoutButtonSelectors(state)))\n        );\n    }\n\n    /**\n     * Initializes the checkout button of a payment method.\n     *\n     * When the checkout button is initialized, it will be inserted into the DOM,\n     * ready to be interacted with by the customer.\n     *\n     * ```js\n     * initializer.initializeButton({\n     *     methodId: 'braintreepaypal',\n     *     braintreepaypal: {\n     *         container: '#checkoutButton',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeButton(options: CheckoutButtonInitializeOptions): Promise<CheckoutButtonSelectors> {\n        const action = this._buttonStrategyActionCreator.initialize(options);\n\n        return this._store.dispatch(action, { queueId: `${options.methodId}ButtonStrategy` })\n            .then(() => this.getState());\n    }\n\n    /**\n     * De-initializes the checkout button by performing any necessary clean-ups.\n     *\n     * ```js\n     * await service.deinitializeButton({\n     *     methodId: 'braintreepaypal',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeButton(options: CheckoutButtonOptions): Promise<CheckoutButtonSelectors> {\n        const action = this._buttonStrategyActionCreator.deinitialize(options);\n\n        return this._store.dispatch(action, { queueId: `${options.methodId}ButtonStrategy` })\n            .then(() => this.getState());\n    }\n}\n","import { createAction } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { defer } from 'rxjs/observable/defer';\nimport { of } from 'rxjs/observable/of';\nimport { catchError } from 'rxjs/operators';\nimport { Observable } from 'rxjs/Observable';\n\nimport { throwErrorAction } from '../common/error';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator } from '../payment';\n\nimport { CheckoutButtonActionType, DeinitializeButtonAction, InitializeButtonAction } from './checkout-button-actions';\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport { CheckoutButtonStrategy } from './strategies';\n\nexport default class CheckoutButtonStrategyActionCreator {\n    constructor(\n        private _registry: Registry<CheckoutButtonStrategy>,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Observable<InitializeButtonAction> {\n        const meta = { methodId: options.methodId };\n\n        return concat(\n            of(createAction(CheckoutButtonActionType.InitializeButtonRequested, undefined, meta)),\n            this._paymentMethodActionCreator.loadPaymentMethod(options.methodId, options),\n            defer(() => this._registry.get(options.methodId).initialize(options)\n                .then(() => createAction(CheckoutButtonActionType.InitializeButtonSucceeded, undefined, meta)))\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutButtonActionType.InitializeButtonFailed, error, meta))\n        );\n    }\n\n    deinitialize(options: CheckoutButtonOptions): Observable<DeinitializeButtonAction> {\n        const meta = { methodId: options.methodId };\n\n        return concat(\n            of(createAction(CheckoutButtonActionType.DeinitializeButtonRequested, undefined, meta)),\n            defer(() => this._registry.get(options.methodId).deinitialize(options)\n                .then(() => createAction(CheckoutButtonActionType.DeinitializeButtonSucceeded, undefined, meta)))\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutButtonActionType.DeinitializeButtonFailed, error, meta))\n        );\n    }\n}\n","import { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from '../checkout-button-options';\n\nexport default abstract class CheckoutButtonStrategy {\n    protected _isInitialized = false;\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        this._isInitialized = true;\n\n        return Promise.resolve();\n    }\n\n    deinitialize(options: CheckoutButtonOptions): Promise<void> {\n        this._isInitialized = false;\n\n        return Promise.resolve();\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { Address, LegacyAddress } from '../../address';\nimport { CheckoutActionCreator, CheckoutStore } from '../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../common/error/errors';\nimport { PaymentMethod } from '../../payment';\nimport { BraintreeAddress, BraintreeError, BraintreePaypalCheckout, BraintreeSDKCreator, BraintreeTokenizePayload } from '../../payment/strategies/braintree';\nimport { PaypalAuthorizeData, PaypalScriptLoader } from '../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from '../checkout-button-options';\n\nimport CheckoutButtonStrategy from './checkout-button-strategy';\n\nexport default class BraintreePaypalButtonStrategy extends CheckoutButtonStrategy {\n    private _paypalCheckout?: BraintreePaypalCheckout;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _offerCredit: boolean = false\n    ) {\n        super();\n    }\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        const paypalOptions = this._offerCredit ? options.braintreepaypalcredit : options.braintreepaypal;\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paypalOptions) {\n            throw new InvalidArgumentError();\n        }\n\n        if (!paymentMethod || !paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return Promise.all([\n            this._braintreeSDKCreator.getPaypalCheckout(),\n            this._paypalScriptLoader.loadPaypal(),\n        ])\n            .then(([paypalCheckout, paypal]) => {\n                this._paypalCheckout = paypalCheckout;\n\n                return paypal.Button.render({\n                    env: paymentMethod.config.testMode ? 'sandbox' : 'production',\n                    commit: paypalOptions.shouldProcessPayment ? true : false,\n                    style: {\n                        shape: 'rect',\n                        label: this._offerCredit ? 'credit' : undefined,\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: () => this._setupPayment(paypalOptions.onPaymentError),\n                    onAuthorize: data => this._tokenizePayment(data, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, paypalOptions.container);\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options: CheckoutButtonOptions): Promise<void> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._paypalCheckout = undefined;\n        this._paymentMethod = undefined;\n\n        this._braintreeSDKCreator.teardown();\n\n        return super.deinitialize(options);\n    }\n\n    private _setupPayment(onError?: (error: BraintreeError | StandardError) => void): Promise<string> {\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const checkout = state.checkout.getCheckout();\n                const config = state.config.getStoreConfig();\n                const customer = state.customer.getCustomer();\n                const address = customer && customer.addresses && customer.addresses[0];\n\n                if (!this._paypalCheckout) {\n                    throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                return this._paypalCheckout.createPayment({\n                    flow: 'checkout',\n                    enableShippingAddress: true,\n                    shippingAddressEditable: false,\n                    shippingAddressOverride: address ? this._mapToBraintreeAddress(address) : undefined,\n                    amount: checkout.grandTotal,\n                    currency: config.currency.code,\n                    offerCredit: this._offerCredit,\n                });\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        shouldProcessPayment?: boolean,\n        onError?: (error: BraintreeError | StandardError) => void\n    ): Promise<BraintreeTokenizePayload> {\n        if (!this._paypalCheckout || !this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return Promise.all([\n            this._paypalCheckout.tokenizePayment(data),\n            this._braintreeSDKCreator.getDataCollector({ paypal: true }),\n        ])\n            .then(([payload, { deviceData }]) => {\n                this._formPoster.postForm('/checkout.php', {\n                    payment_type: 'paypal',\n                    provider: methodId,\n                    action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                    nonce: payload.nonce,\n                    device_data: deviceData,\n                    shipping_address: JSON.stringify(this._mapToLegacyShippingAddress(payload)),\n                    billing_address: JSON.stringify(this._mapToLegacyBillingAddress(payload)),\n                });\n\n                return payload;\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _mapToLegacyShippingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const shippingAddress = payload.details.shippingAddress;\n        const recipientName = shippingAddress && shippingAddress.recipientName || '';\n        const [firstName, lastName] = recipientName.split(' ');\n\n        return {\n            email: payload.details.email,\n            first_name: firstName,\n            last_name: lastName,\n            phone_number: shippingAddress && shippingAddress.phone || payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToLegacyBillingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const billingAddress = payload.details.billingAddress;\n        const shippingAddress = payload.details.shippingAddress;\n\n        if (billingAddress) {\n            return {\n                email: payload.details.email,\n                first_name: billingAddress.firstName || payload.details.firstName,\n                last_name: billingAddress.lastName || payload.details.lastName,\n                phone_number: billingAddress.phone || payload.details.phone,\n                address_line_1: billingAddress.line1,\n                address_line_2: billingAddress.line2,\n                city: billingAddress.city,\n                state: billingAddress.state,\n                country_code: billingAddress.countryCode,\n                postal_code: billingAddress.postalCode,\n            };\n        }\n\n        return {\n            email: payload.details.email,\n            first_name: payload.details.firstName,\n            last_name: payload.details.lastName,\n            phone_number: payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToBraintreeAddress(address: Address): BraintreeAddress {\n        return {\n            line1: address.address1,\n            line2: address.address2,\n            city: address.city,\n            state: address.stateOrProvinceCode,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phone,\n            recipientName: `${address.firstName} ${address.lastName}`,\n        };\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { Checkout, CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { PaymentMethodActionCreator } from '../../../payment';\nimport { GooglePayAddress, GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class GooglePayBraintreeButtonStrategy extends CheckoutButtonStrategy {\n    private _methodId?: string;\n    private _checkout?: Checkout;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _formPoster: FormPoster,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {\n        super();\n    }\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        const { googlepaybraintree, methodId } = options;\n\n        this.methodId = methodId;\n\n        if (!googlepaybraintree) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(stateCheckout => {\n                this._checkout = stateCheckout.checkout.getCheckout();\n                if (!this._checkout || !this._checkout.cart.id) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                return this._googlePayPaymentProcessor.initialize(this.methodId)\n                    .then(() => {\n                        this._walletButton = this._createSignInButton(googlepaybraintree.container);\n\n                        if (this._walletButton) {\n                            this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                        }\n                    });\n            }).then(() => super.initialize(options));\n    }\n\n    deinitialize(options: CheckoutButtonOptions): Promise<void> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize()\n            .then(() => super.deinitialize(options));\n    }\n\n    private get methodId(): string {\n        if (!this._methodId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._methodId;\n    }\n\n    private set methodId(value: string) {\n        if (!value) {\n            throw new InvalidArgumentError();\n        }\n\n        this._methodId = value;\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const googlePayButton = this._googlePayPaymentProcessor.createButton(() => this._onPaymentSelectComplete);\n\n        container.appendChild(googlePayButton);\n\n        return googlePayButton;\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        let shippingAddress: GooglePayAddress;\n\n        return this._googlePayPaymentProcessor.displayWallet()\n            .then(paymentData => {\n                shippingAddress = paymentData.shippingAddress;\n                return this._googlePayPaymentProcessor.handleSuccess(paymentData);\n            })\n            .then(() => this._updateAddressAndPayment(shippingAddress))\n            .catch(error => this._onError(error));\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n\n    private _onError(error?: Error): void {\n        if (error && error.message !== 'CANCELED') {\n            throw new Error(error.message);\n        }\n    }\n\n    private _updateAddressAndPayment(shippingAddress: GooglePayAddress): Promise<void> {\n        return Promise.all([\n            this._googlePayPaymentProcessor.updateShippingAddress(shippingAddress),\n            this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this.methodId)),\n        ]).then(() => this._onPaymentSelectComplete());\n    }\n\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { createCheckoutStore } from '../checkout';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\n\nimport CheckoutButtonInitializer from './checkout-button-initializer';\nimport CheckoutButtonInitializerOptions from './checkout-button-initializer-options';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonRegistry from './create-checkout-button-registry';\n\n/**\n * Creates an instance of `CheckoutButtonInitializer`.\n *\n * ```js\n * const initializer = createCheckoutButtonInitializer();\n *\n * initializer.initializeButton({\n *     methodId: 'braintreepaypal',\n *     braintreepaypal: {\n *         container: '#checkoutButton',\n *     },\n * });\n * ```\n *\n * Please note that `CheckoutButtonInitializer` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @alpha\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutButtonInitializer`.\n */\nexport default function createCheckoutButtonInitializer(\n    options?: CheckoutButtonInitializerOptions\n): CheckoutButtonInitializer {\n    const store = createCheckoutStore();\n    const requestSender = createRequestSender({ host: options && options.host });\n\n    return new CheckoutButtonInitializer(\n        store,\n        new CheckoutButtonStrategyActionCreator(\n            createCheckoutButtonRegistry(store, requestSender),\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender))\n        )\n    );\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { BraintreeScriptLoader, BraintreeSDKCreator } from '../payment/strategies/braintree';\nimport { GooglePayBraintreeInitializer, GooglePayPaymentProcessor, GooglePayScriptLoader } from '../payment/strategies/googlepay';\nimport { PaypalScriptLoader } from '../payment/strategies/paypal';\n\nimport { BraintreePaypalButtonStrategy, CheckoutButtonStrategy, GooglePayBraintreeButtonStrategy } from './strategies';\n\nexport default function createCheckoutButtonRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<CheckoutButtonStrategy> {\n    const registry = new Registry<CheckoutButtonStrategy>();\n    const scriptLoader = getScriptLoader();\n    const checkoutActionCreator = new CheckoutActionCreator(\n        new CheckoutRequestSender(requestSender),\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const formPoster = createFormPoster();\n\n    registry.register('braintreepaypal', () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            formPoster\n        )\n    );\n\n    registry.register('braintreepaypalcredit', () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            formPoster,\n            true\n        )\n    );\n\n    registry.register('googlepaybraintree', () =>\n        new GooglePayBraintreeButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            new GooglePayPaymentProcessor(\n                store,\n                paymentMethodActionCreator,\n                new GooglePayScriptLoader(scriptLoader),\n                new GooglePayBraintreeInitializer(braintreeSDKCreator),\n                new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender)),\n                requestSender\n            )\n        )\n    );\n\n    return registry;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadConfigAction } from '../config/config-actions';\n\nimport Checkout from './checkout';\n\nexport enum CheckoutActionType {\n    LoadCheckoutRequested = 'LOAD_CHECKOUT_REQUESTED',\n    LoadCheckoutSucceeded = 'LOAD_CHECKOUT_SUCCEEDED',\n    LoadCheckoutFailed = 'LOAD_CHECKOUT_FAILED',\n\n    UpdateCheckoutRequested = 'UPDATE_CHECKOUT_REQUESTED',\n    UpdateCheckoutSucceeded = 'UPDATE_CHECKOUT_SUCCEEDED',\n    UpdateCheckoutFailed = 'UPDATE_CHECKOUT_FAILED',\n}\n\nexport type CheckoutAction = LoadCheckoutAction | UpdateCheckoutAction;\n\nexport type LoadCheckoutAction =\n    LoadCheckoutRequestedAction |\n    LoadCheckoutSucceededAction |\n    LoadCheckoutFailedAction |\n    LoadConfigAction;\n\nexport type UpdateCheckoutAction =\n    UpdateCheckoutRequestedAction |\n    UpdateCheckoutSucceededAction |\n    UpdateCheckoutFailedAction;\n\nexport interface LoadCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.LoadCheckoutRequested;\n}\n\nexport interface LoadCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.LoadCheckoutSucceeded;\n}\n\nexport interface LoadCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.LoadCheckoutFailed;\n}\n\nexport interface UpdateCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.UpdateCheckoutRequested;\n}\n\nexport interface UpdateCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.UpdateCheckoutSucceeded;\n}\n\nexport interface UpdateCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.UpdateCheckoutFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\nimport { from } from 'rxjs/observable/from';\nimport { catchError } from 'rxjs/operators';\nimport { Observable, Subscribable } from 'rxjs/Observable';\n\nimport { RequestErrorFactory } from '../common/error';\n\nexport default function createActionTransformer(\n    requestErrorFactory: RequestErrorFactory\n): (action: Subscribable<Action>) => Observable<Action> {\n    return action$ => from(action$).pipe(catchError<Action, never>(action => {\n        if (action instanceof Error || action.payload instanceof Error) {\n            throw action;\n        }\n\n        if (isResponse(action.payload)) {\n            throw { ...action, payload: requestErrorFactory.createError(action.payload) };\n        }\n\n        throw action;\n    }));\n}\n\nfunction isResponse(object: any) {\n    if (!object || typeof object !== 'object') {\n        return false;\n    }\n\n    return ['body', 'headers', 'status', 'statusText'].every(key =>\n        object.hasOwnProperty(key)\n    );\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n    statusText: '',\n};\n\nexport default class RequestError extends StandardError {\n    body: any;\n    headers: { [key: string]: any; };\n    status: number;\n    statusText: string;\n\n    constructor({ body = {}, headers, status, statusText }: Response = DEFAULT_RESPONSE, message?: string) {\n        super(joinErrors(body.errors) || body.detail || body.title || message || 'An unexpected error has occurred.');\n\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.statusText = statusText;\n    }\n}\n\nfunction joinErrors(errors: Array<string | { code: string, message: string }>): string | undefined {\n    if (!Array.isArray(errors)) {\n        return;\n    }\n\n    return errors.reduce((result: string[], error) => {\n        if (typeof error === 'string') {\n            return [...result, error];\n        }\n\n        if (error && error.message) {\n            return [...result, error.message];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { find, some, values } from 'lodash';\n\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonState from './checkout-button-state';\n\n@selector\nexport default class CheckoutButtonSelector {\n    constructor(\n        private _checkoutButton: CheckoutButtonState\n    ) {}\n\n    getState(): CheckoutButtonState {\n        return this._checkoutButton;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId) {\n            const method = this._checkoutButton.statuses[methodId];\n\n            return (method && method.isInitializing) === true;\n        }\n\n        return some(this._checkoutButton.statuses, { isInitializing: true });\n    }\n\n    isDeinitializing(methodId?: string): boolean {\n        if (methodId) {\n            const method = this._checkoutButton.statuses[methodId];\n\n            return (method && method.isDeinitializing) === true;\n        }\n\n        return some(this._checkoutButton.statuses, { isDeinitializing: true });\n    }\n\n    getInitializeError(methodId?: string): Error | undefined {\n        const method = methodId ?\n            this._checkoutButton.errors[methodId] :\n            find(values(this._checkoutButton.errors), method => !!(method && method.initializeError));\n\n        return method && method.initializeError;\n    }\n\n    getDeinitializeError(methodId?: string): Error | undefined {\n        const method = methodId ?\n            this._checkoutButton.errors[methodId] :\n            find(values(this._checkoutButton.errors), method => !!(method && method.deinitializeError));\n\n        return method && method.deinitializeError;\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector } from '../customer';\nimport { ConsignmentSelector } from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutState from './checkout-state';\n\n@selector\nexport default class CheckoutSelector {\n    constructor(\n        private _checkout: CheckoutState,\n        private _billingAddress: BillingAddressSelector,\n        private _cart: CartSelector,\n        private _consignments: ConsignmentSelector,\n        private _coupons: CouponSelector,\n        private _customer: CustomerSelector,\n        private _giftCertificates: GiftCertificateSelector\n    ) {}\n\n    getCheckout(): Checkout | undefined {\n        const { data } = this._checkout;\n        const billingAddress = this._billingAddress.getBillingAddress();\n        const cart = this._cart.getCart();\n        const customer = this._customer.getCustomer();\n        const consignments = this._consignments.getConsignments() || [];\n        const coupons = this._coupons.getCoupons() || [];\n        const giftCertificates = this._giftCertificates.getGiftCertificates() || [];\n\n        if (!data || !cart || !customer) {\n            return;\n        }\n\n        return {\n            ...data,\n            billingAddress,\n            cart,\n            customer,\n            consignments,\n            coupons,\n            giftCertificates,\n        };\n    }\n\n    getLoadError(): Error | undefined {\n        return this._checkout.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return this._checkout.statuses.isLoading === true;\n    }\n\n    getUpdateError(): Error | undefined {\n        return this._checkout.errors.updateError;\n    }\n\n    isUpdating(): boolean {\n        return this._checkout.statuses.isUpdating === true;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport { CouponAction, CouponActionType, GiftCertificateAction, GiftCertificateActionType } from '../coupon';\nimport { OrderAction, OrderActionType } from '../order';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport { CheckoutAction, CheckoutActionType } from './checkout-actions';\nimport CheckoutState, { CheckoutDataState, CheckoutErrorsState, CheckoutStatusesState } from './checkout-state';\n\nconst DEFAULT_STATE: CheckoutState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function checkoutReducer(\n    state: CheckoutState = DEFAULT_STATE,\n    action: Action\n): CheckoutState {\n    const reducer = combineReducers<CheckoutState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutDataState | undefined,\n    action: CheckoutAction | BillingAddressAction | ConsignmentAction | CouponAction | GiftCertificateAction | OrderAction\n): CheckoutDataState | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload\n            ? omit({ ...data, ...action.payload }, ['billingAddress', 'cart', 'consignments', 'customer', 'coupons', 'giftCertifcates'])\n            : data;\n\n    case OrderActionType.SubmitOrderSucceeded:\n        return action.payload && data\n            ? { ...data, orderId: action.payload.order.orderId }\n            : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CheckoutErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | OrderAction\n): CheckoutErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return {\n            ...errors,\n            loadError: undefined,\n        };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return {\n            ...errors,\n            loadError: action.payload,\n        };\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return {\n            ...errors,\n            updateError: undefined,\n        };\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n        return {\n            ...errors,\n            updateError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | OrderAction\n): CheckoutStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return {\n            ...statuses,\n            isLoading: true,\n        };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return {\n            ...statuses,\n            isLoading: false,\n        };\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n        return {\n            ...statuses,\n            isUpdating: true,\n        };\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return {\n            ...statuses,\n            isUpdating: false,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutButtonAction, CheckoutButtonActionType } from './checkout-button-actions';\nimport CheckoutButtonState, { CheckoutButtonErrorsState, CheckoutButtonStatusesState } from './checkout-button-state';\n\nconst DEFAULT_STATE: CheckoutButtonState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function checkoutButtonReducer(\n    state: CheckoutButtonState = DEFAULT_STATE,\n    action: Action\n): CheckoutButtonState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<CheckoutButtonState>({\n        errors: combineReducers({\n            [action.meta.methodId]: errorsReducer,\n        }),\n        statuses: combineReducers({\n            [action.meta.methodId]: statusesReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: CheckoutButtonErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutButtonAction\n): CheckoutButtonErrorsState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n        };\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutButtonStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutButtonAction\n): CheckoutButtonStatusesState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n        };\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { AddressRequestBody } from '../address';\nimport { Cart } from '../cart';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport CheckoutRequestSender from '../checkout/checkout-request-sender';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport Consignment, {\n    ConsignmentsRequestBody,\n    ConsignmentAssignmentRequestBody,\n    ConsignmentCreateRequestBody,\n    ConsignmentLineItem,\n    ConsignmentRequestBody,\n    ConsignmentShippingOptionRequestBody,\n    ConsignmentUpdateRequestBody\n} from './consignment';\nimport {\n    ConsignmentActionType,\n    CreateConsignmentsAction,\n    DeleteConsignmentAction,\n    LoadShippingOptionsAction,\n    UpdateConsignmentAction,\n    UpdateShippingOptionAction,\n} from './consignment-actions';\nimport ConsignmentRequestSender from './consignment-request-sender';\n\nexport default class ConsignmentActionCreator {\n    constructor(\n        private _consignmentRequestSender: ConsignmentRequestSender,\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    unassignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            if (!existingConsignment) {\n                throw new InvalidArgumentError('No consignment found for the specified address');\n            }\n\n            const lineItems = this._removeLineItems(\n                consignment.lineItems,\n                existingConsignment,\n                state.cart.getCart()\n            );\n\n            if (!lineItems.length) {\n                return this.deleteConsignment(existingConsignment.id, options)(store);\n            }\n\n            return this.updateConsignment({\n                id: existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems,\n            }, options)(store);\n        };\n    }\n\n    assignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            return this._createOrUpdateConsignment({\n                id: existingConsignment && existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems: this._addLineItems(\n                    consignment.lineItems,\n                    existingConsignment,\n                    state.cart.getCart()\n                ),\n            }, options)(store);\n        };\n    }\n\n    selectShippingOption(\n        id: string,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n            const consignments = state.consignments.getConsignments();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (!consignments || !consignments.length) {\n                throw new MissingDataError(MissingDataErrorType.MissingConsignments);\n            }\n\n            const consignmentUpdateBody = {\n                id: consignments[0].id,\n                shippingOptionId: id,\n            };\n\n            const consignmentMeta = {\n                id: consignments[0].id,\n            };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignmentUpdateBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(\n                        ConsignmentActionType.UpdateShippingOptionSucceeded,\n                        body,\n                        consignmentMeta\n                    ));\n\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(\n                        ConsignmentActionType.UpdateShippingOptionFailed,\n                        response,\n                        consignmentMeta\n                    ));\n                });\n        });\n    }\n\n    loadShippingOptions(options?: RequestOptions): ThunkAction<LoadShippingOptionsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadShippingOptionsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.LoadShippingOptionsRequested));\n\n            this._checkoutRequestSender.loadCheckout(checkout.id, {\n                ...options,\n                params: {\n                    include: ['consignments.availableShippingOptions'],\n                },\n            })\n            .then(({ body }) => {\n                observer.next(createAction(ConsignmentActionType.LoadShippingOptionsSucceeded, body));\n                observer.complete();\n            })\n            .catch(response => {\n                observer.error(createErrorAction(ConsignmentActionType.LoadShippingOptionsFailed, response));\n            });\n        });\n    }\n\n    updateAddress(\n        address: AddressRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const consignment = this._getConsignmentRequestBody(address, store);\n            const consignments = store.getState().consignments.getConsignments();\n\n            if (consignments && consignments.length) {\n                (consignment as ConsignmentUpdateRequestBody).id = consignments[0].id;\n            }\n\n            return this._createOrUpdateConsignment(consignment, options)(store);\n        };\n    }\n\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CreateConsignmentsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.CreateConsignmentsRequested));\n\n            this._consignmentRequestSender.createConsignments(checkout.id, consignments, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.CreateConsignmentsSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.CreateConsignmentsFailed, response));\n                });\n        });\n    }\n\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n            const consignmentMeta = { id: consignmentId };\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.DeleteConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.deleteConsignment(checkout.id, consignmentId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.DeleteConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.DeleteConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    updateShippingOption(\n        consignment: ConsignmentShippingOptionRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateShippingOptionSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateShippingOptionFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    private _createOrUpdateConsignment(\n        consignment: ConsignmentCreateRequestBody | ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (this._isUpdateConsignmentRequest(consignment)) {\n                return this.updateConsignment(consignment, options)(store);\n            }\n\n            return this.createConsignments([consignment], options)(store);\n        };\n    }\n\n    private _getConsignmentRequestBody(\n        shippingAddress: AddressRequestBody,\n        store: ReadableCheckoutStore\n    ): ConsignmentRequestBody {\n        const state = store.getState();\n        const cart = state.cart.getCart();\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return {\n            shippingAddress,\n            lineItems: (cart.lineItems && cart.lineItems.physicalItems || [])\n                .map(item => ({\n                    itemId: item.id,\n                    quantity: item.quantity,\n                })\n            ),\n        };\n    }\n\n    private _removeLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return this._hydrateLineItems(consignment.lineItemIds, cart).map(existingItem => {\n            const sharedItem = lineItems.find(lineItem => lineItem.itemId === existingItem.itemId);\n\n            return {\n                ...existingItem,\n                quantity: sharedItem ? (existingItem.quantity - sharedItem.quantity) : existingItem.quantity,\n            };\n        }).filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _addLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment?: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!consignment) {\n            return lineItems;\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return lineItems\n            .concat(this._hydrateLineItems(consignment.lineItemIds, cart))\n            .filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _hydrateLineItems(lineItemIds: string[], cart: Cart): ConsignmentLineItem[] {\n        return lineItemIds.map(itemId => {\n            const item = cart.lineItems.physicalItems.find(lineItem => lineItem.id === itemId );\n\n            return {\n                itemId,\n                quantity: item ? item.quantity : 0,\n            };\n        });\n    }\n\n    private _isUpdateConsignmentRequest(\n        request: ConsignmentRequestBody\n    ): request is ConsignmentUpdateRequestBody {\n        const updateRequest = request as ConsignmentUpdateRequestBody;\n\n        return !!updateRequest.id;\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { ConsignmentsRequestBody, ConsignmentUpdateRequestBody } from './consignment';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'consignments.availableShippingOptions',\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class ConsignmentRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createConsignments(checkoutId: string, consignments: ConsignmentsRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: consignments, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateConsignment(checkoutId: string, consignment: ConsignmentUpdateRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = consignment;\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n\n    deleteConsignment(checkoutId: string, consignmentId: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${consignmentId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, { params: DEFAULT_PARAMS, headers, timeout });\n    }\n}\n","export interface CompareOptions {\n    keyFilter?(key: string): boolean;\n}\n\nexport default function isEqual(objectA: any, objectB: any, options?: CompareOptions): boolean {\n    if (objectA === objectB) {\n        return true;\n    }\n\n    if (objectA && objectB && typeof objectA === 'object' && typeof objectB === 'object') {\n        if (Array.isArray(objectA) && Array.isArray(objectB)) {\n            return isArrayEqual(objectA, objectB, options);\n        }\n\n        if (Array.isArray(objectA) || Array.isArray(objectB)) {\n            return false;\n        }\n\n        if ((objectA instanceof Date) && (objectB instanceof Date)) {\n            return isDateEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof Date) || (objectB instanceof Date)) {\n            return false;\n        }\n\n        if ((objectA instanceof RegExp) && (objectB instanceof RegExp)) {\n            return isRegExpEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof RegExp) || (objectB instanceof RegExp)) {\n            return false;\n        }\n\n        return isObjectEqual(objectA, objectB, options);\n    }\n\n    return objectA === objectB;\n}\n\nfunction isRegExpEqual(objectA: RegExp, objectB: RegExp): boolean {\n    return objectA.toString() === objectB.toString();\n}\n\nfunction isDateEqual(objectA: Date, objectB: Date): boolean {\n    return objectA.getTime() === objectB.getTime();\n}\n\nfunction isArrayEqual(objectA: any[], objectB: any[], options?: CompareOptions): boolean {\n    if (objectA.length !== objectB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = objectA.length; index < length; index++) {\n        if (!isEqual(objectA[index], objectB[index], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction isObjectEqual(\n    objectA: { [key: string]: any },\n    objectB: { [key: string]: any },\n    options?: CompareOptions\n): boolean {\n    const filter = options && options.keyFilter;\n    const keysA = filter ? Object.keys(objectA).filter(filter) : Object.keys(objectA);\n    const keysB = filter ? Object.keys(objectB).filter(filter) : Object.keys(objectB);\n\n    if (keysA.length !== keysB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = keysA.length; index < length; index++) {\n        const key = keysA[index];\n\n        if (!objectB.hasOwnProperty(key)) {\n            return false;\n        }\n\n        if (!isEqual(objectA[key], objectB[key], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n","import { memoize } from 'lodash';\n\nimport { bindDecorator, isEqual, isPrivate } from '../utility';\n\nimport CacheKeyResolver from './cache-key-resolver';\n\n/**\n * Decorates a class by patching all of its methods to cache their return values\n * and return them if they are called again with the same set of parameters. The\n * decorator also binds all the methods to the calling instance so it can be\n * destructed.\n */\nexport default function selectorDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                selectorMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\nfunction selectorMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let resolver = new CacheKeyResolver();\n    let method = descriptor.value;\n    let memoizedMethod = memoize(method, (...args) => resolver.getKey(...args));\n\n    return bindDecorator(target, key, {\n        get() {\n            const value = ((...args: any[]) => {\n                const cachedValue = memoizedMethod.call(this, ...args);\n\n                if (resolver.getUsedCount(...args) === 1) {\n                    return cachedValue;\n                }\n\n                const newValue = method.call(this, ...args);\n\n                if (isEqual(newValue, cachedValue, { keyFilter: key => !isPrivate(key) })) {\n                    return cachedValue;\n                }\n\n                memoizedMethod.cache.set(resolver.getKey(...args), newValue);\n\n                return newValue;\n            }) as T;\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n        set(value) {\n            resolver = new CacheKeyResolver();\n            method = value;\n            memoizedMethod = memoize(method, (...args) => resolver.getKey(...args));\n        },\n    });\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\ntype Method = (...args: any[]) => any;\n","import { keyBy, reduce, some } from 'lodash';\n\nimport { Checkout } from '../checkout';\nimport { mapToInternalCoupon, mapToInternalGiftCertificate } from '../coupon';\nimport { mapToDiscountNotifications } from '../promotion';\n\nimport { AmountTransformer } from '.';\nimport InternalCart from './internal-cart';\nimport mapToInternalLineItems from './map-to-internal-line-items';\n\nexport default function mapToInternalCart(checkout: Checkout): InternalCart {\n    const decimalPlaces = checkout.cart.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: checkout.cart.id,\n        items: mapToInternalLineItems(checkout.cart.lineItems, decimalPlaces),\n        currency: checkout.cart.currency.code,\n        coupon: {\n            discountedAmount: reduce(checkout.cart.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: checkout.cart.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: checkout.cart.discountAmount,\n            integerAmount: amountTransformer.toInteger(checkout.cart.discountAmount),\n        },\n        discountNotifications: mapToDiscountNotifications(checkout.promotions),\n        giftCertificate: {\n            totalDiscountedAmount: reduce(checkout.giftCertificates, (sum, certificate) => {\n                return sum + certificate.used;\n            }, 0),\n            appliedGiftCertificates: keyBy(checkout.giftCertificates.map(mapToInternalGiftCertificate), 'code'),\n        },\n        shipping: {\n            amount: checkout.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.shippingCostTotal),\n            amountBeforeDiscount: checkout.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(checkout.shippingCostBeforeDiscount),\n            required: some(checkout.cart.lineItems.physicalItems, lineItem => lineItem.isShippingRequired),\n        },\n        subtotal: {\n            amount: checkout.subtotal,\n            integerAmount: amountTransformer.toInteger(checkout.subtotal),\n        },\n        storeCredit: {\n            amount: checkout.customer ? checkout.customer.storeCredit : 0,\n        },\n        taxSubtotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        taxes: checkout.taxes,\n        taxTotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        handling: {\n            amount: checkout.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: checkout.grandTotal,\n            integerAmount: amountTransformer.toInteger(checkout.grandTotal),\n        },\n    };\n}\n","import { DiscountNotification } from '../discount';\n\nimport { Promotion } from '.';\n\nexport default function mapToDiscountNotifications(promotions?: Promotion[]): DiscountNotification[] {\n    const notifications: DiscountNotification[] = [];\n\n    (promotions || []).forEach(promotion => {\n        (promotion.banners || []).forEach(banner => {\n            notifications.push({\n                placeholders: [],\n                discountType: null,\n                message: '',\n                messageHtml: banner.text,\n            });\n        });\n    });\n\n    return notifications;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum CustomerStrategyActionType {\n    SignInFailed = 'CUSTOMER_STRATEGY_SIGN_IN_FAILED',\n    SignInRequested = 'CUSTOMER_STRATEGY_SIGN_IN_REQUESTED',\n    SignInSucceeded = 'CUSTOMER_STRATEGY_SIGN_IN_SUCCEEDED',\n    SignOutFailed = 'CUSTOMER_STRATEGY_SIGN_OUT_FAILED',\n    SignOutRequested = 'CUSTOMER_STRATEGY_SIGN_OUT_REQUESTED',\n    SignOutSucceeded = 'CUSTOMER_STRATEGY_SIGN_OUT_SUCCEEDED',\n    InitializeFailed = 'CUSTOMER_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'CUSTOMER_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'CUSTOMER_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'CUSTOMER_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'CUSTOMER_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'CUSTOMER_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type CustomerStrategyAction =\n    CustomerStrategySignInAction |\n    CustomerStrategySignOutAction |\n    CustomerStrategyInitializeAction |\n    CustomerStrategyDeinitializeAction |\n    CustomerStrategyWidgetAction;\n\nexport type CustomerStrategySignInAction =\n    SignInRequestedAction |\n    SignInSucceededAction |\n    SignInFailedAction;\n\nexport type CustomerStrategySignOutAction =\n    SignOutRequestedAction |\n    SignOutSucceededAction |\n    SignOutFailedAction;\n\nexport type CustomerStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type CustomerStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type CustomerStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface SignInRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignInRequested;\n}\n\nexport interface SignInSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignInSucceeded;\n}\n\nexport interface SignInFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignInFailed;\n}\n\nexport interface SignOutRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignOutRequested;\n}\n\nexport interface SignOutSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignOutSucceeded;\n}\n\nexport interface SignOutFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignOutFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderPaymentsAction } from '../order';\n\nexport enum PaymentStrategyActionType {\n    ExecuteFailed = 'PAYMENT_STRATEGY_EXECUTE_FAILED',\n    ExecuteRequested = 'PAYMENT_STRATEGY_EXECUTE_REQUESTED',\n    ExecuteSucceeded = 'PAYMENT_STRATEGY_EXECUTE_SUCCEEDED',\n    FinalizeFailed = 'PAYMENT_STRATEGY_FINALIZE_FAILED',\n    FinalizeRequested = 'PAYMENT_STRATEGY_FINALIZE_REQUESTED',\n    FinalizeSucceeded = 'PAYMENT_STRATEGY_FINALIZE_SUCCEEDED',\n    InitializeFailed = 'PAYMENT_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'PAYMENT_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'PAYMENT_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'PAYMENT_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'PAYMENT_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'PAYMENT_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type PaymentStrategyAction =\n    PaymentStrategyExecuteAction |\n    PaymentStrategyFinalizeAction |\n    PaymentStrategyInitializeAction |\n    PaymentStrategyDeinitializeAction |\n    PaymentStrategyWidgetAction;\n\nexport type PaymentStrategyExecuteAction =\n    ExecuteRequestedAction |\n    ExecuteSucceededAction |\n    ExecuteFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyFinalizeAction =\n    FinalizeRequestedAction |\n    FinalizeSucceededAction |\n    FinalizeFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type PaymentStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type PaymentStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface ExecuteRequestedAction extends Action {\n    type: PaymentStrategyActionType.ExecuteRequested;\n}\n\nexport interface ExecuteSucceededAction extends Action {\n    type: PaymentStrategyActionType.ExecuteSucceeded;\n}\n\nexport interface ExecuteFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.ExecuteFailed;\n}\n\nexport interface FinalizeRequestedAction extends Action {\n    type: PaymentStrategyActionType.FinalizeRequested;\n}\n\nexport interface FinalizeSucceededAction extends Action {\n    type: PaymentStrategyActionType.FinalizeSucceeded;\n}\n\nexport interface FinalizeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.FinalizeFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.WidgetInteractionFailed;\n}\n","export const LOAD_INSTRUMENTS_REQUESTED = 'LOAD_INSTRUMENTS_REQUESTED';\nexport const LOAD_INSTRUMENTS_SUCCEEDED = 'LOAD_INSTRUMENTS_SUCCEEDED';\nexport const LOAD_INSTRUMENTS_FAILED = 'LOAD_INSTRUMENTS_FAILED';\n\nexport const DELETE_INSTRUMENT_REQUESTED = 'DELETE_INSTRUMENT_REQUESTED';\nexport const DELETE_INSTRUMENT_SUCCEEDED = 'DELETE_INSTRUMENT_SUCCEEDED';\nexport const DELETE_INSTRUMENT_FAILED = 'DELETE_INSTRUMENT_FAILED';\n","export const LOAD_COUNTRIES_REQUESTED = 'LOAD_COUNTRIES_REQUESTED';\nexport const LOAD_COUNTRIES_SUCCEEDED = 'LOAD_COUNTRIES_SUCCEEDED';\nexport const LOAD_COUNTRIES_FAILED = 'LOAD_COUNTRIES_FAILED';\n","export const LOAD_SHIPPING_COUNTRIES_REQUESTED = 'LOAD_SHIPPING_COUNTRIES_REQUESTED';\nexport const LOAD_SHIPPING_COUNTRIES_SUCCEEDED = 'LOAD_SHIPPING_COUNTRIES_SUCCEEDED';\nexport const LOAD_SHIPPING_COUNTRIES_FAILED = 'LOAD_SHIPPING_COUNTRIES_FAILED';\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadCheckoutAction } from '../checkout';\n\nimport { InternalCustomerResponseData } from './internal-customer-responses';\n\nexport enum CustomerActionType {\n    SignInCustomerRequested = 'SIGN_IN_CUSTOMER_REQUESTED',\n    SignInCustomerSucceeded = 'SIGN_IN_CUSTOMER_SUCCEEDED',\n    SignInCustomerFailed = 'SIGN_IN_CUSTOMER_FAILED',\n\n    SignOutCustomerRequested = 'SIGN_OUT_CUSTOMER_REQUESTED',\n    SignOutCustomerSucceeded = 'SIGN_OUT_CUSTOMER_SUCCEEDED',\n    SignOutCustomerFailed = 'SIGN_OUT_CUSTOMER_FAILED',\n}\n\nexport type CustomerAction =\n    SignInCustomerAction |\n    SignOutCustomerAction;\n\nexport type SignInCustomerAction =\n    SignInCustomerRequestedAction |\n    SignInCustomerSucceededAction |\n    SignInCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport type SignOutCustomerAction =\n    SignOutCustomerRequestedAction |\n    SignOutCustomerSucceededAction |\n    SignOutCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport interface SignInCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignInCustomerRequested;\n}\n\nexport interface SignInCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignInCustomerSucceeded;\n}\n\nexport interface SignInCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignInCustomerFailed;\n}\n\nexport interface SignOutCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignOutCustomerRequested;\n}\n\nexport interface SignOutCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignOutCustomerSucceeded;\n}\n\nexport interface SignOutCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignOutCustomerFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderAction } from '../order';\n\nimport PaymentResponseBody from './payment-response-body';\n\nexport enum PaymentActionType {\n    SubmitPaymentRequested = 'SUBMIT_PAYMENT_REQUESTED',\n    SubmitPaymentSucceeded = 'SUBMIT_PAYMENT_SUCCEEDED',\n    SubmitPaymentFailed = 'SUBMIT_PAYMENT_FAILED',\n\n    InitializeOffsitePaymentRequested = 'INITIALIZE_OFFSITE_PAYMENT_REQUESTED',\n    InitializeOffsitePaymentSucceeded = 'INITIALIZE_OFFSITE_PAYMENT_SUCCEEDED',\n    InitializeOffsitePaymentFailed = 'INITIALIZE_OFFSITE_PAYMENT_FAILED',\n}\n\nexport type PaymentAction = SubmitPaymentAction |\n    InitializeOffsitePaymentAction;\n\nexport type SubmitPaymentAction =\n    SubmitPaymentRequestedAction |\n    SubmitPaymentSucceededAction |\n    SubmitPaymentFailedAction |\n    LoadOrderAction;\n\nexport type InitializeOffsitePaymentAction =\n    InitializeOffsitePaymentRequestedAction |\n    InitializeOffsitePaymentSucceededAction |\n    InitializeOffsitePaymentFailedAction;\n\nexport interface SubmitPaymentRequestedAction extends Action {\n    type: PaymentActionType.SubmitPaymentRequested;\n}\n\nexport interface SubmitPaymentSucceededAction extends Action<PaymentResponseBody> {\n    type: PaymentActionType.SubmitPaymentSucceeded;\n}\n\nexport interface SubmitPaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.SubmitPaymentFailed;\n}\n\nexport interface InitializeOffsitePaymentRequestedAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentRequested;\n}\n\nexport interface InitializeOffsitePaymentSucceededAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentSucceeded;\n}\n\nexport interface InitializeOffsitePaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.InitializeOffsitePaymentFailed;\n}\n","module.exports = require(\"@bigcommerce/form-poster\");","import InternalLineItem from './internal-line-item';\nimport { LineItem } from './line-item';\nimport LineItemMap from './line-item-map';\nimport mapGiftCertificateToInternalLineItem from './map-gift-certificate-to-internal-line-item';\nimport mapToInternalLineItem from './map-to-internal-line-item';\n\nexport default function mapToInternalLineItems(\n    itemMap: LineItemMap,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem[] {\n    return (Object.keys(itemMap) as Array<keyof LineItemMap>)\n        .reduce((result, key) => [\n            ...result,\n            ...(itemMap[key] as LineItem[]).map((item: any) => {\n                if (key === 'giftCertificates') {\n                    return mapGiftCertificateToInternalLineItem(item, decimalPlaces);\n                }\n\n                return mapToInternalLineItem(\n                    item,\n                    mapToInternalLineItemType(key),\n                    decimalPlaces,\n                    idKey\n                );\n            }),\n        ], [] as InternalLineItem[]);\n}\n\nfunction mapToInternalLineItemType(type: string): string {\n    switch (type) {\n        case 'physicalItems':\n            return 'ItemPhysicalEntity';\n\n        case 'digitalItems':\n            return 'ItemDigitalEntity';\n\n        case 'giftCertificates':\n            return 'ItemGiftCertificateEntity';\n\n        default:\n            return '';\n    }\n}\n","import InternalLineItem from './internal-line-item';\nimport { GiftCertificateItem } from './line-item';\n\nimport { AmountTransformer } from '.';\n\nexport default function mapGiftCertificateToInternalLineItem(\n    item: GiftCertificateItem,\n    decimalPlaces: number\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: item.id,\n        imageUrl: '',\n        name: item.name,\n        amount: item.amount,\n        amountAfterDiscount: item.amount,\n        discount: 0,\n        integerAmount: amountTransformer.toInteger(item.amount),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.amount),\n        integerDiscount: 0,\n        quantity: 1,\n        sender: item.sender,\n        recipient: item.recipient,\n        type: 'ItemGiftCertificateEntity',\n        attributes: [],\n        variantId: null,\n    };\n}\n","import InternalLineItem from './internal-line-item';\nimport { DigitalItem, LineItem } from './line-item';\n\nimport { AmountTransformer } from '.';\n\nexport default function mapToInternalLineItem(\n    item: LineItem,\n    type: string,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: (item[idKey] as string | number),\n        imageUrl: item.imageUrl,\n        amount: item.extendedListPrice,\n        amountAfterDiscount: item.extendedSalePrice,\n        discount: item.discountAmount,\n        integerAmount: amountTransformer.toInteger(item.extendedListPrice),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.extendedSalePrice),\n        integerDiscount: amountTransformer.toInteger(item.discountAmount),\n        downloadsPageUrl: (item as DigitalItem).downloadPageUrl,\n        name: item.name,\n        quantity: item.quantity,\n        brand: item.brand,\n        variantId: item.variantId,\n        productId: item.productId,\n        attributes: (item.options || []).map(option => ({\n            name: option.name,\n            value: option.value,\n        })),\n        addedByPromotion: item.addedByPromotion,\n        type,\n    };\n}\n","import { selector } from '../common/selector';\n\nimport BillingAddress from './billing-address';\nimport BillingAddressState from './billing-address-state';\n\n@selector\nexport default class BillingAddressSelector {\n    constructor(\n        private _billingAddress: BillingAddressState\n    ) {}\n\n    getBillingAddress(): BillingAddress | undefined {\n        return this._billingAddress.data;\n    }\n\n    getUpdateError(): Error | undefined {\n        return this._billingAddress.errors.updateError;\n    }\n\n    getContinueAsGuestError(): Error | undefined {\n        return this._billingAddress.errors.continueAsGuestError;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._billingAddress.errors.loadError;\n    }\n\n    isUpdating(): boolean {\n        return !!this._billingAddress.statuses.isUpdating;\n    }\n\n    isContinuingAsGuest(): boolean {\n        return !!this._billingAddress.statuses.isContinuingAsGuest;\n    }\n\n    isLoading(): boolean {\n        return !!this._billingAddress.statuses.isLoading;\n    }\n}\n","import { deepFreeze } from '@bigcommerce/data-store';\n\n// tslint:disable-next-line:ban-types\ntype FunctionProperties<T> = { [K in keyof T]: T[K] extends Function ? T[K] : never };\n\nexport default function createFreezeProxy<T extends object>(target: T): T {\n    return createProxy(target, (target, name) =>\n        (...args: any[]) => deepFreeze(target[name].call(target, ...args))\n    );\n}\n\nexport function createFreezeProxies<T extends { [key: string]: object }>(map: T): T {\n    return Object.keys(map)\n        .reduce((result, key) => {\n            result[key] = createFreezeProxy(map[key]);\n\n            return result;\n        }, {} as T);\n}\n\nfunction createProxy<T extends object>(target: T, trap: (target: FunctionProperties<T>, name: keyof FunctionProperties<T>, proxy: T) => any): T {\n    const proxy = Object.create(target);\n\n    traversePrototypeOf(target, prototype => {\n        Object.getOwnPropertyNames(prototype)\n            .forEach(name => {\n                if (name === 'constructor' || typeof proxy[name] !== 'function' || name.charAt(0) === '_') {\n                    return;\n                }\n\n                proxy[name] = trap(target as FunctionProperties<T>, name as keyof T, proxy);\n            });\n    });\n\n    return proxy;\n}\n\nfunction traversePrototypeOf(target: object, iteratee: (prototype: object) => void): void {\n    let prototype = Object.getPrototypeOf(target);\n\n    while (prototype) {\n        iteratee(prototype);\n\n        prototype = Object.getPrototypeOf(prototype);\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Config, { ContextConfig, StoreConfig } from './config';\nimport ConfigState from './config-state';\n\n@selector\nexport default class ConfigSelector {\n    constructor(\n        private _config: ConfigState\n    ) {}\n\n    getConfig(): Config | undefined {\n        return this._config.data;\n    }\n\n    getStoreConfig(): StoreConfig | undefined {\n        return this._config.data && this._config.data.storeConfig;\n    }\n\n    getContextConfig(): ContextConfig | undefined {\n        return this._config.data && this._config.data.context;\n    }\n\n    getExternalSource(): string | undefined {\n        return this._config.meta && this._config.meta.externalSource;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._config.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._config.statuses.isLoading;\n    }\n}\n","import { find } from 'lodash';\n\nimport { selector } from '../common/selector';\nimport { ConfigState } from '../config';\nimport { Country } from '../geography';\n\nimport FormField from './form-field';\n\n@selector\nexport default class FormSelector {\n    constructor(\n        private _config: ConfigState\n    ) {}\n\n    getShippingAddressFields(countries: Country[] = [], countryCode: string): FormField[] {\n        const selectedCountry = find(countries, { code: countryCode });\n        const fields = this._config.data ? this._config.data.storeConfig.formFields.shippingAddressFields : [];\n\n        return fields.map((field: any) => this._processField(field, countries, selectedCountry));\n    }\n\n    getBillingAddressFields(countries: Country[] = [], countryCode: string): FormField[] {\n        const selectedCountry = find(countries, { code: countryCode });\n        const fields = this._config.data ? this._config.data.storeConfig.formFields.billingAddressFields : [];\n\n        return fields.map((field: any) => this._processField(field, countries, selectedCountry));\n    }\n\n    private _processField(field: FormField, countries: Country[], selectedCountry?: Country): FormField {\n        if (field.name === 'countryCode') {\n            return this._processCountry(field, countries, selectedCountry);\n        }\n\n        if (field.name === 'stateOrProvince') {\n            return this._processProvince(field, selectedCountry);\n        }\n\n        if (field.name === 'postalCode') {\n            return this._processsPostCode(field, selectedCountry);\n        }\n\n        return field;\n    }\n\n    private _processCountry(field: FormField, countries: Country[] = [], country?: Country): FormField {\n        if (!countries.length) {\n            return field;\n        }\n\n        const { code = '' } = country || {};\n        const items = countries.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            options: { items },\n            default: code,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    private _processProvince(field: FormField, country?: Country): FormField {\n        const { subdivisions = [] } = country || {};\n\n        if (!subdivisions.length) {\n            return {\n                ...field,\n                required: false,\n            };\n        }\n\n        const items = subdivisions.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            name: 'stateOrProvinceCode',\n            options: { items },\n            required: true,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    private _processsPostCode(field: FormField, country?: Country): FormField {\n        const { hasPostalCodes = [] } = country || {};\n\n        if (hasPostalCodes === undefined) {\n            return field;\n        }\n\n        return { ...field, required: Boolean(hasPostalCodes) };\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Country from './country';\nimport CountryState from './country-state';\n\n@selector\nexport default class CountrySelector {\n    constructor(\n        private _countries: CountryState\n    ) {}\n\n    getCountries(): Country[] | undefined {\n        return this._countries.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._countries.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._countries.statuses.isLoading;\n    }\n}\n","import { find } from 'lodash';\n\nimport { CheckoutPayment, CheckoutSelector } from '../checkout';\nimport { selector } from '../common/selector';\nimport { GatewayOrderPayment, InternalOrderPayment, OrderSelector } from '../order';\n\nimport PaymentMethod from './payment-method';\nimport { HOSTED } from './payment-method-types';\nimport { ACKNOWLEDGE, FINALIZE } from './payment-status-types';\n\n@selector\nexport default class PaymentSelector {\n    constructor(\n        private _checkout: CheckoutSelector,\n        private _order: OrderSelector\n    ) {}\n\n    getPaymentId(): { providerId: string, gatewayId?: string } | undefined {\n        const internalPayment = this._getInternalPayment();\n\n        if (internalPayment && internalPayment.id) {\n            return {\n                providerId: internalPayment.id,\n                gatewayId: internalPayment.gateway,\n            };\n        }\n\n        const payment = this._getHostedPayment() || this._getGatewayPayment();\n\n        if (payment && payment.providerId) {\n            return {\n                providerId: payment.providerId,\n                gatewayId: payment.gatewayId,\n            };\n        }\n    }\n\n    getPaymentStatus(): string | undefined {\n        const internalPayment = this._getInternalPayment();\n\n        if (internalPayment && internalPayment.status) {\n            return internalPayment.status.replace('PAYMENT_STATUS_', '');\n        }\n\n        const payment = this._getHostedPayment() || this._getGatewayPayment();\n\n        if (payment) {\n            return payment.detail.step;\n        }\n    }\n\n    getPaymentToken(): string | undefined {\n        const meta = this._order.getOrderMeta();\n\n        return meta && meta.token;\n    }\n\n    getPaymentRedirectUrl(): string | undefined {\n        const payment = this._getInternalPayment();\n\n        return payment && payment.redirectUrl;\n    }\n\n    isPaymentDataRequired(useStoreCredit: boolean = false): boolean {\n        const checkout = this._checkout.getCheckout();\n\n        if (!checkout) {\n            return false;\n        }\n\n        const grandTotal = checkout.grandTotal || 0;\n        const storeCredit = checkout.customer.storeCredit || 0;\n\n        return (useStoreCredit ? grandTotal - storeCredit : grandTotal) > 0;\n    }\n\n    isPaymentDataSubmitted(paymentMethod?: PaymentMethod): boolean {\n        if (paymentMethod && paymentMethod.nonce) {\n            return true;\n        }\n\n        return this.getPaymentStatus() === ACKNOWLEDGE || this.getPaymentStatus() === FINALIZE;\n    }\n\n    private _getInternalPayment(): InternalOrderPayment | undefined {\n        const meta = this._order.getOrderMeta();\n\n        return meta && meta.payment;\n    }\n\n    private _getGatewayPayment(): GatewayOrderPayment | undefined {\n        const order = this._order.getOrder();\n\n        return find(order && order.payments, ({ providerId }) =>\n            providerId !== 'giftcertificate' && providerId !== 'storecredit'\n        ) as GatewayOrderPayment;\n    }\n\n    private _getHostedPayment(): CheckoutPayment | undefined {\n        const checkout = this._checkout.getCheckout();\n\n        return find(checkout && checkout.payments, ({ providerType }) =>\n            providerType === HOSTED\n        );\n    }\n}\n","import { find } from 'lodash';\n\nimport { selector } from '../common/selector';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState from './payment-method-state';\n\n@selector\nexport default class PaymentMethodSelector {\n    constructor(\n        private _paymentMethods: PaymentMethodState\n    ) {}\n\n    getPaymentMethods(): PaymentMethod[] | undefined {\n        return this._paymentMethods.data;\n    }\n\n    getPaymentMethodsMeta(): PaymentMethodMeta | undefined {\n        return this._paymentMethods.meta;\n    }\n\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined {\n        return gatewayId ?\n            find(this._paymentMethods.data, { id: methodId, gateway: gatewayId }) :\n            find(this._paymentMethods.data, { id: methodId });\n    }\n\n    getLoadError(): Error | undefined {\n        return this._paymentMethods.errors && this._paymentMethods.errors.loadError;\n    }\n\n    getLoadMethodError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentMethods.errors.loadMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentMethods.errors.loadMethodError;\n    }\n\n    isLoading(): boolean {\n        return !!this._paymentMethods.statuses.isLoading;\n    }\n\n    isLoadingMethod(methodId?: string): boolean {\n        if (methodId && this._paymentMethods.statuses.loadMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentMethods.statuses.isLoadingMethod;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport PaymentStrategyState, { DEFAULT_STATE } from './payment-strategy-state';\n\n@selector\nexport default class PaymentStrategySelector {\n    constructor(\n        private _paymentStrategies: PaymentStrategyState = DEFAULT_STATE\n    ) {}\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.initializeError;\n    }\n\n    getExecuteError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.executeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.executeError;\n    }\n\n    getFinalizeError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.finalizeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.finalizeError;\n    }\n\n    getWidgetInteractingError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.widgetInteractionMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.widgetInteractionError;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isInitializing;\n    }\n\n    isExecuting(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.executeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isExecuting;\n    }\n\n    isFinalizing(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.finalizeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isFinalizing;\n    }\n\n    isWidgetInteracting(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.widgetInteractionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isWidgetInteracting;\n    }\n}\n","import Instrument from './instrument';\nimport InstrumentState, { InstrumentMeta } from './instrument-state';\n\nexport default class InstrumentSelector {\n    constructor(\n        private _instruments: InstrumentState\n    ) {}\n\n    getInstruments(): Instrument[] | undefined {\n        return this._instruments.data;\n    }\n\n    getInstrumentsMeta(): InstrumentMeta | undefined {\n        return this._instruments.meta;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._instruments.errors && this._instruments.errors.loadError;\n    }\n\n    getDeleteError(instrumentId?: string): Error | undefined {\n        if (!this._instruments.errors || (instrumentId && this._instruments.errors.failedInstrument !== instrumentId)) {\n            return;\n        }\n\n        return this._instruments.errors.deleteError;\n    }\n\n    isLoading(): boolean {\n        return !!(this._instruments.statuses && this._instruments.statuses.isLoading);\n    }\n\n    isDeleting(instrumentId?: string): boolean {\n        if (!this._instruments.statuses || (instrumentId && this._instruments.statuses.deletingInstrument !== instrumentId)) {\n            return false;\n        }\n\n        return !!this._instruments.statuses.isDeleting;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport RemoteCheckoutState, { RemoteCheckoutStateData } from './remote-checkout-state';\n\n@selector\nexport default class RemoteCheckoutSelector {\n    constructor(\n        private _remoteCheckout: RemoteCheckoutState\n    ) {}\n\n    getCheckout<TMethodId extends keyof RemoteCheckoutStateData>(\n        methodId: TMethodId\n    ): RemoteCheckoutStateData[TMethodId] | undefined {\n        return this._remoteCheckout.data[methodId];\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { CheckoutButtonSelector } from '../checkout-buttons';\nimport { createFreezeProxies } from '../common/utility';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector, CustomerStrategySelector } from '../customer';\nimport { FormSelector } from '../form';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentSelector } from '../payment';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { RemoteCheckoutSelector } from '../remote-checkout';\nimport { ConsignmentSelector, ShippingAddressSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default function createInternalCheckoutSelectors(state: CheckoutStoreState, options: CheckoutStoreOptions = {}): InternalCheckoutSelectors {\n    const billingAddress = new BillingAddressSelector(state.billingAddress);\n    const cart = new CartSelector(state.cart);\n    const checkoutButton = new CheckoutButtonSelector(state.checkoutButton);\n    const config = new ConfigSelector(state.config);\n    const countries = new CountrySelector(state.countries);\n    const coupons = new CouponSelector(state.coupons);\n    const customer = new CustomerSelector(state.customer);\n    const customerStrategies = new CustomerStrategySelector(state.customerStrategies);\n    const form = new FormSelector(state.config);\n    const giftCertificates = new GiftCertificateSelector(state.giftCertificates);\n    const instruments = new InstrumentSelector(state.instruments);\n    const paymentMethods = new PaymentMethodSelector(state.paymentMethods);\n    const paymentStrategies = new PaymentStrategySelector(state.paymentStrategies);\n    const shippingAddress = new ShippingAddressSelector(state.consignments);\n    const remoteCheckout = new RemoteCheckoutSelector(state.remoteCheckout);\n    const shippingCountries = new ShippingCountrySelector(state.shippingCountries);\n    const shippingStrategies = new ShippingStrategySelector(state.shippingStrategies);\n\n    // Compose selectors\n    const consignments = new ConsignmentSelector(state.consignments, cart);\n    const checkout = new CheckoutSelector(state.checkout, billingAddress, cart, consignments, coupons, customer, giftCertificates);\n    const order = new OrderSelector(state.order, billingAddress, coupons);\n    const payment = new PaymentSelector(checkout, order);\n\n    const selectors = {\n        billingAddress,\n        cart,\n        checkout,\n        checkoutButton,\n        config,\n        consignments,\n        countries,\n        coupons,\n        customer,\n        customerStrategies,\n        form,\n        giftCertificates,\n        instruments,\n        order,\n        payment,\n        paymentMethods,\n        paymentStrategies,\n        remoteCheckout,\n        shippingAddress,\n        shippingCountries,\n        shippingStrategies,\n    };\n\n    return options.shouldWarnMutation ? createFreezeProxies(selectors) : selectors;\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport Checkout, { CheckoutRequestBody } from './checkout';\nimport CheckoutDefaultIncludes from './checkout-default-includes';\nimport CheckoutParams from './checkout-params';\n\nexport default class CheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadCheckout(id: string, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.get(url, {\n            params: {\n                include: CheckoutDefaultIncludes.concat(params && params.include || []).join(','),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    updateCheckout(id: string, body: CheckoutRequestBody, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, {\n            params: {\n                include: CheckoutDefaultIncludes.concat(params && params.include || []).join(','),\n            },\n            body,\n            headers,\n            timeout,\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { defer } from 'rxjs/observable/defer';\nimport { merge } from 'rxjs/observable/merge';\nimport { of } from 'rxjs/observable/of';\nimport { catchError } from 'rxjs/operators';\nimport { Observable } from 'rxjs/Observable';\n\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\n\nimport { CheckoutRequestBody } from './checkout';\nimport { CheckoutActionType, LoadCheckoutAction, UpdateCheckoutAction } from './checkout-actions';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default class CheckoutActionCreator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender,\n        private _configActionCreator: ConfigActionCreator\n    ) {}\n\n    loadCheckout(\n        id: string,\n        options?: RequestOptions\n    ): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            merge(\n                this._configActionCreator.loadConfig()(store),\n                defer(() => this._checkoutRequestSender.loadCheckout(id, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body)))\n            )\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    loadDefaultCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            this._configActionCreator.loadConfig()(store),\n            defer(() => {\n                const state = store.getState();\n                const context = state.config.getContextConfig();\n\n                if (!context || !context.checkoutId) {\n                    throw new StandardError('Unable to load checkout: no cart is available');\n                }\n\n                return this._checkoutRequestSender.loadCheckout(context.checkoutId, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body));\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    updateCheckout(\n        body: CheckoutRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateCheckoutAction, InternalCheckoutSelectors> {\n        return store => new Observable(observer => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CheckoutActionType.UpdateCheckoutRequested));\n\n            this._checkoutRequestSender.updateCheckout(checkout.id, body, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CheckoutActionType.UpdateCheckoutSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CheckoutActionType.UpdateCheckoutFailed, response));\n                });\n        });\n    }\n\n    loadCurrentCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            return this.loadCheckout(checkout.id, options)(store);\n        };\n    }\n}\n","import InternalShippingOption from './internal-shipping-option';\nimport ShippingOption from './shipping-option';\n\nexport default function mapToInternalShippingOption(option: ShippingOption, isSelected: boolean): InternalShippingOption {\n    return {\n        description: option.description,\n        module: option.type,\n        price: option.cost,\n        id: option.id,\n        selected: isSelected,\n        isRecommended: option.isRecommended,\n        imageUrl: option.imageUrl,\n        transitTime: option.transitTime,\n    };\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\nexport default class UnrecoverableError extends RequestError {\n    constructor(response: Response, message?: string) {\n        super(response, message || 'An unexpected error has occurred. The checkout process cannot continue as a result.');\n\n        this.type = 'unrecoverable';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\nimport { last } from 'lodash';\n\nimport ErrorResponseBody from './error-response-body';\nimport { RequestError, TimeoutError } from './errors';\n\nexport default class RequestErrorFactory {\n    private _factoryMethods: { [key: string]: ErrorFactoryMethod } = {};\n\n    constructor() {\n        this.register('default', (response, message) => new RequestError(response, message));\n        this.register('timeout', response => new TimeoutError(response));\n    }\n\n    register(type: string, factoryMethod: ErrorFactoryMethod): void {\n        this._factoryMethods[type] = factoryMethod;\n    }\n\n    createError(response: Response, message?: string): Error {\n        const factoryMethod = this._factoryMethods[this._getType(response)] || this._factoryMethods.default;\n\n        return factoryMethod(response, message);\n    }\n\n    private _getType(response: Response<ErrorResponseBody>): string {\n        if (response.status === 0) {\n            return 'timeout';\n        }\n\n        if (response.body && typeof response.body.type === 'string') {\n            return last(response.body.type.split('/')) || 'default';\n        }\n\n        const error = last(response.body && response.body.errors);\n\n        return error && error.code ? error.code : 'default';\n    }\n}\n\nexport type ErrorFactoryMethod = (response: Response, message?: string) => Error;\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport BillingAddress from './billing-address';\nimport { BillingAddressAction, BillingAddressActionType } from './billing-address-actions';\nimport BillingAddressState, { BillingAddressErrorsState, BillingAddressStatusesState } from './billing-address-state';\n\nconst DEFAULT_STATE: BillingAddressState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function billingAddressReducer(\n    state: BillingAddressState = DEFAULT_STATE,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressState {\n    const reducer = combineReducers<BillingAddressState, CheckoutAction | BillingAddressAction | OrderAction>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: BillingAddress | undefined,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddress | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return action.payload ? action.payload.billingAddress : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: BillingAddressErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...errors, loadError: action.payload };\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return { ...errors, updateError: undefined };\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n        return { ...errors, updateError: action.payload };\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return { ...errors, continueAsGuestError: undefined };\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n        return { ...errors, continueAsGuestError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: BillingAddressStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...statuses, isLoading: false };\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n        return { ...statuses, isUpdating: true };\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return { ...statuses, isUpdating: false };\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n        return { ...statuses, isContinuingAsGuest: true };\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return { ...statuses, isContinuingAsGuest: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport Config from './config';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\nimport ConfigState, { ConfigErrorsState, ConfigStatusesState } from './config-state';\n\nconst DEFAULT_STATE: ConfigState = {\n    meta: {},\n    errors: {},\n    statuses: {},\n};\n\nexport default function configReducer(\n    state: ConfigState = DEFAULT_STATE,\n    action: LoadConfigAction\n): ConfigState {\n    const reducer = combineReducers<ConfigState, LoadConfigAction>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Config | undefined,\n    action: LoadConfigAction\n): Config | undefined {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return action.payload ? action.payload : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConfigErrorsState = DEFAULT_STATE.errors,\n    action: LoadConfigAction\n): ConfigErrorsState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case ConfigActionType.LoadConfigFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConfigStatusesState = DEFAULT_STATE.statuses,\n    action: LoadConfigAction\n): ConfigStatusesState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigRequested:\n        return { ...statuses, isLoading: true };\n\n    case ConfigActionType.LoadConfigSucceeded:\n    case ConfigActionType.LoadConfigFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport Country from './country';\nimport * as actionTypes from './country-action-types';\nimport CountryState, { CountryErrorsState, CountryStatusesState } from './country-state';\n\nconst DEFAULT_STATE: CountryState = {\n    errors: {},\n    statuses: {},\n};\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action\n */\nexport default function countryReducer(state: CountryState = DEFAULT_STATE, action: Action): CountryState {\n    const reducer = combineReducers<CountryState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: Country[] | undefined, action: Action): Country[] | undefined {\n    switch (action.type) {\n    case actionTypes.LOAD_COUNTRIES_SUCCEEDED:\n        return action.payload || [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(errors: CountryErrorsState = DEFAULT_STATE.errors, action: Action): CountryErrorsState {\n    switch (action.type) {\n    case actionTypes.LOAD_COUNTRIES_REQUESTED:\n    case actionTypes.LOAD_COUNTRIES_SUCCEEDED:\n        return { ...errors, loadError: undefined };\n\n    case actionTypes.LOAD_COUNTRIES_FAILED:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(statuses: CountryStatusesState = DEFAULT_STATE.statuses, action: Action): CountryStatusesState {\n    switch (action.type) {\n    case actionTypes.LOAD_COUNTRIES_REQUESTED:\n        return { ...statuses, isLoading: true };\n\n    case actionTypes.LOAD_COUNTRIES_SUCCEEDED:\n    case actionTypes.LOAD_COUNTRIES_FAILED:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { PaymentAction, PaymentActionType } from './payment-actions';\nimport PaymentResponseBody from './payment-response-body';\nimport PaymentState from './payment-state';\n\nexport default function paymentReducer(state: PaymentState = {}, action: PaymentAction): PaymentState {\n    const reducer = combineReducers<PaymentState, PaymentAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: PaymentResponseBody | undefined, action: PaymentAction): PaymentResponseBody | undefined {\n    switch (action.type) {\n    case PaymentActionType.SubmitPaymentSucceeded:\n        return action.payload;\n\n    default:\n        return data;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport { mergeOrPush } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport { PaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { PaymentMethodErrorsState, PaymentMethodStatusesState } from './payment-method-state';\n\nconst DEFAULT_STATE: PaymentMethodState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function paymentMethodReducer(\n    state: PaymentMethodState = DEFAULT_STATE,\n    action: Action\n): PaymentMethodState {\n    const reducer = combineReducers<PaymentMethodState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentMethod[] | undefined,\n    action: PaymentMethodAction\n): PaymentMethod[] | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return action.payload ?\n            mergeOrPush(data || [], action.payload, {\n                id: action.payload.id,\n                gateway: action.payload.gateway,\n            }) :\n            data;\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return action.payload ? action.payload : [];\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: PaymentMethodMeta | undefined,\n    action: PaymentMethodAction\n): PaymentMethodMeta | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return action.meta ? { ...meta, ...action.meta } : meta;\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: PaymentMethodErrorsState = DEFAULT_STATE.errors,\n    action: PaymentMethodAction\n): PaymentMethodErrorsState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return { ...errors, loadError: action.payload };\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return {\n            ...errors,\n            loadMethodId: undefined,\n            loadMethodError: undefined,\n        };\n\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return {\n            ...errors,\n            loadMethodId: action.meta.methodId,\n            loadMethodError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentMethodStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentMethodAction\n): PaymentMethodStatusesState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n        return { ...statuses, isLoading: true };\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return { ...statuses, isLoading: false };\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n        return {\n            ...statuses,\n            isLoadingMethod: true,\n            loadMethodId: action.meta.methodId,\n        };\n\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return {\n            ...statuses,\n            isLoadingMethod: false,\n            loadMethodId: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { assign, findIndex, isPlainObject, pickBy } from 'lodash';\n\nimport { PartialDeep } from '../types';\n\n/**\n * Push an item to an array if it doesn't exist in the array. Otherwise, merge\n * with the existing item in the array. This function always returns a new array.\n */\nexport default function mergeOrPush<T extends object>(\n    array: T[],\n    item: T,\n    predicate: ((item: T) => boolean) | PartialDeep<T>\n): T[] {\n    const index = findIndex(array, typeof predicate === 'object' ? pickBy(predicate) : predicate);\n    const newArray = [...array];\n\n    if (index === -1) {\n        newArray.push(item);\n    } else {\n        newArray[index] = isPlainObject(item) ? assign({}, array[index], item) : item;\n    }\n\n    return newArray;\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { PaymentStrategyAction, PaymentStrategyActionType } from './payment-strategy-actions';\nimport PaymentStrategyState, { DEFAULT_STATE, PaymentStrategyErrorsState, PaymentStrategyStatusesState } from './payment-strategy-state';\n\nexport default function paymentStrategyReducer(\n    state: PaymentStrategyState = DEFAULT_STATE,\n    action: PaymentStrategyAction\n): PaymentStrategyState {\n    const reducer = combineReducers<PaymentStrategyState, PaymentStrategyAction>({\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: PaymentStrategyErrorsState = DEFAULT_STATE.errors,\n    action: PaymentStrategyAction\n): PaymentStrategyErrorsState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.ExecuteRequested:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return {\n            ...errors,\n            executeError: undefined,\n            executeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.ExecuteFailed:\n        return {\n            ...errors,\n            executeError: action.payload,\n            executeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.FinalizeRequested:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return {\n            ...errors,\n            finalizeError: undefined,\n            finalizeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.FinalizeFailed:\n        return {\n            ...errors,\n            finalizeError: action.payload,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n        return {\n            ...errors,\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n        return {\n            ...errors,\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentStrategyAction\n): PaymentStrategyStatusesState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.InitializeFailed:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.ExecuteRequested:\n        return {\n            ...statuses,\n            isExecuting: true,\n            executeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.ExecuteFailed:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return {\n            ...statuses,\n            isExecuting: false,\n            executeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.FinalizeRequested:\n        return {\n            ...statuses,\n            isFinalizing: true,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.FinalizeFailed:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return {\n            ...statuses,\n            isFinalizing: false,\n            finalizeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    return {\n        ...statuses,\n        isWidgetInteracting: true,\n        widgetInteractionMethodId: action.meta.methodId,\n     };\n\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n     return {\n        ...statuses,\n        isWidgetInteracting: false,\n        widgetInteractionMethodId: undefined,\n     };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport * as actionTypes from './instrument-action-types';\n\nimport Instrument from './instrument';\nimport InstrumentState, { InstrumentErrorState, InstrumentMeta, InstrumentStatusState } from './instrument-state';\n\nconst DEFAULT_STATE = {\n    data: [],\n    errors: {},\n    statuses: {},\n};\n\nexport default function instrumentReducer(state: InstrumentState = DEFAULT_STATE, action: Action): InstrumentState {\n    const reducer = combineReducers<InstrumentState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: Instrument[] = DEFAULT_STATE.data, action: Action): Instrument[] {\n    switch (action.type) {\n    case actionTypes.LOAD_INSTRUMENTS_SUCCEEDED:\n        return action.payload.vaultedInstruments || [];\n\n    case actionTypes.DELETE_INSTRUMENT_SUCCEEDED:\n        return data.filter(instrument =>\n            instrument.bigpayToken !== action.meta.instrumentId\n        );\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(meta: InstrumentMeta | undefined, action: Action): InstrumentMeta | undefined {\n    switch (action.type) {\n    case actionTypes.LOAD_INSTRUMENTS_SUCCEEDED:\n    case actionTypes.DELETE_INSTRUMENT_SUCCEEDED:\n        return { ...meta, ...action.meta };\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(errors: InstrumentErrorState = DEFAULT_STATE.errors, action: Action): InstrumentErrorState {\n    switch (action.type) {\n    case actionTypes.LOAD_INSTRUMENTS_REQUESTED:\n    case actionTypes.LOAD_INSTRUMENTS_SUCCEEDED:\n        return { ...errors, loadError: undefined };\n\n    case actionTypes.DELETE_INSTRUMENT_REQUESTED:\n    case actionTypes.DELETE_INSTRUMENT_SUCCEEDED:\n        return {\n            ...errors,\n            deleteError: undefined,\n            failedInstrument: undefined,\n        };\n\n    case actionTypes.LOAD_INSTRUMENTS_FAILED:\n        return { ...errors, loadError: action.payload };\n\n    case actionTypes.DELETE_INSTRUMENT_FAILED:\n        return {\n            ...errors,\n            deleteError: action.payload,\n            failedInstrument: action.meta.instrumentId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(statuses: InstrumentStatusState = DEFAULT_STATE.statuses, action: Action): InstrumentStatusState {\n    switch (action.type) {\n    case actionTypes.LOAD_INSTRUMENTS_REQUESTED:\n        return { ...statuses, isLoading: true };\n\n    case actionTypes.DELETE_INSTRUMENT_REQUESTED:\n        return {\n            ...statuses,\n            isDeleting: true,\n            deletingInstrument: action.meta.instrumentId,\n        };\n\n    case actionTypes.LOAD_INSTRUMENTS_SUCCEEDED:\n    case actionTypes.LOAD_INSTRUMENTS_FAILED:\n        return { ...statuses, isLoading: false };\n\n    case actionTypes.DELETE_INSTRUMENT_SUCCEEDED:\n    case actionTypes.DELETE_INSTRUMENT_FAILED:\n        return {\n            ...statuses,\n            isDeleting: false,\n            deletingInstrument: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport { AfterpayRemoteCheckout, AmazonPayRemoteCheckout } from './methods';\n\nimport * as actionTypes from './remote-checkout-action-types';\nimport RemoteCheckoutState, { RemoteCheckoutStateData } from './remote-checkout-state';\n\nconst DEFAULT_STATE: RemoteCheckoutState = {\n    data: {},\n};\n\ntype RemoteCheckout = AfterpayRemoteCheckout | AmazonPayRemoteCheckout;\n\nexport default function remoteCheckoutReducer(\n    state: RemoteCheckoutState = DEFAULT_STATE,\n    action: Action\n): RemoteCheckoutState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<RemoteCheckoutState>({\n        data: combineReducers<RemoteCheckoutStateData>({\n            [action.meta.methodId]: dataReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: RemoteCheckout = {},\n    action: Action\n): RemoteCheckout {\n    switch (action.type) {\n    case actionTypes.INITIALIZE_REMOTE_BILLING_SUCCEEDED:\n        return { ...data, billing: action.payload.billing };\n\n    case actionTypes.INITIALIZE_REMOTE_SHIPPING_SUCCEEDED:\n        return { ...data, shipping: action.payload.shipping };\n\n    case actionTypes.LOAD_REMOTE_SETTINGS_SUCCEEDED:\n        return { ...data, settings: action.payload };\n\n    case actionTypes.UPDATE_REMOTE_CHECKOUT:\n        return { ...data, ...action.payload };\n\n    default:\n        return data;\n    }\n}\n","import { createDataStore } from '@bigcommerce/data-store';\n\nimport { createRequestErrorFactory } from '../common/error';\n\nimport CheckoutStore, { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport createActionTransformer from './create-action-transformer';\nimport createCheckoutStoreReducer from './create-checkout-store-reducer';\nimport createInternalCheckoutSelectors from './create-internal-checkout-selectors';\n\nexport default function createCheckoutStore(\n    initialState: Partial<CheckoutStoreState> = {},\n    options?: CheckoutStoreOptions\n): CheckoutStore {\n    const actionTransformer = createActionTransformer(createRequestErrorFactory());\n    const stateTransformer = (state: CheckoutStoreState) => createInternalCheckoutSelectors(state);\n\n    return createDataStore(\n        createCheckoutStoreReducer(),\n        initialState,\n        { actionTransformer, stateTransformer, ...options }\n    );\n}\n","import { PaymentMethodInvalidError } from '../../payment/errors';\n\nimport { UnrecoverableError } from './errors';\nimport RequestErrorFactory from './request-error-factory';\n\nexport default function createRequestErrorFactory(): RequestErrorFactory {\n    const factory = new RequestErrorFactory();\n\n    const unrecoverableErrorTypes = [\n        'catalog_only',\n        'empty_cart',\n        'invalid_order_id',\n        'invalid_order_token',\n        'missing_order_token',\n        'missing_provider_token',\n        'missing_shipping_method',\n        'order_completion_error',\n        'order_could_not_be_finalized_error',\n        'order_create_failed',\n        'provider_fatal_error',\n        'provider_setup_error',\n        'stock_too_low',\n    ];\n\n    unrecoverableErrorTypes.forEach(type => {\n        factory.register(type, (response, message) => new UnrecoverableError(response, message));\n    });\n\n    factory.register('invalid_payment_provider', response => new PaymentMethodInvalidError(response));\n    factory.register('payment_config_not_found', response => new PaymentMethodInvalidError(response));\n\n    return factory;\n}\n","import { combineReducers, Action, Reducer } from '@bigcommerce/data-store';\n\nimport { billingAddressReducer } from '../billing';\nimport { cartReducer } from '../cart';\nimport { checkoutButtonReducer } from '../checkout-buttons';\nimport { configReducer } from '../config';\nimport { couponReducer, giftCertificateReducer } from '../coupon';\nimport { customerReducer, customerStrategyReducer } from '../customer';\nimport { countryReducer } from '../geography';\nimport { orderReducer } from '../order';\nimport { paymentMethodReducer, paymentReducer, paymentStrategyReducer } from '../payment';\nimport { instrumentReducer } from '../payment/instrument';\nimport { remoteCheckoutReducer } from '../remote-checkout';\nimport { consignmentReducer, shippingCountryReducer, shippingStrategyReducer } from '../shipping';\n\nimport checkoutReducer from './checkout-reducer';\nimport CheckoutStoreState from './checkout-store-state';\n\nexport default function createCheckoutStoreReducer(): Reducer<CheckoutStoreState, Action> {\n    return combineReducers({\n        billingAddress: billingAddressReducer,\n        cart: cartReducer,\n        checkout: checkoutReducer,\n        checkoutButton: checkoutButtonReducer,\n        config: configReducer,\n        consignments: consignmentReducer,\n        countries: countryReducer,\n        coupons: couponReducer,\n        customer: customerReducer,\n        customerStrategies: customerStrategyReducer,\n        giftCertificates: giftCertificateReducer,\n        instruments: instrumentReducer,\n        order: orderReducer,\n        payment: paymentReducer,\n        paymentMethods: paymentMethodReducer,\n        paymentStrategies: paymentStrategyReducer,\n        remoteCheckout: remoteCheckoutReducer,\n        shippingCountries: shippingCountryReducer,\n        shippingStrategies: shippingStrategyReducer,\n    });\n}\n","export default function isPrivate(key: string): boolean {\n    return `${key}`.indexOf('$$') === 0 || `${key}`.indexOf('_') === 0;\n}\n","import { selector } from '../common/selector';\n\nimport Cart from './cart';\nimport CartState from './cart-state';\n\n@selector\nexport default class CartSelector {\n    constructor(\n        private _cart: CartState\n    ) {}\n\n    getCart(): Cart | undefined {\n        return this._cart.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._cart.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._cart.statuses.isLoading;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Coupon from './coupon';\nimport CouponState from './coupon-state';\n\n@selector\nexport default class CouponSelector {\n    constructor(\n        private _coupon: CouponState\n    ) {}\n\n    getCoupons(): Coupon[] | undefined {\n        return this._coupon.data;\n    }\n\n    getRemoveError(): Error | undefined {\n        return this._coupon.errors.removeCouponError;\n    }\n\n    getApplyError(): Error | undefined {\n        return this._coupon.errors.applyCouponError;\n    }\n\n    isApplying(): boolean {\n        return !!this._coupon.statuses.isApplyingCoupon;\n    }\n\n    isRemoving(): boolean {\n        return !!this._coupon.statuses.isRemovingCoupon;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Customer from './customer';\nimport CustomerState from './customer-state';\n\n@selector\nexport default class CustomerSelector {\n    constructor(\n        private _customer: CustomerState\n    ) {}\n\n    getCustomer(): Customer | undefined {\n        return this._customer.data;\n    }\n}\n","import CustomerStrategyState from './customer-strategy-state';\n\nexport default class CustomerStrategySelector {\n    constructor(\n        private _customerStrategies: CustomerStrategyState\n    ) {}\n\n    getSignInError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.signInMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.signInError;\n    }\n\n    getSignOutError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.signOutMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.signOutError;\n    }\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.initializeError;\n    }\n\n    getWidgetInteractionError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.widgetInteractionMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.widgetInteractionError;\n    }\n\n    isSigningIn(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.signInMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isSigningIn;\n    }\n\n    isSigningOut(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.signOutMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isSigningOut;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isInitializing;\n    }\n\n    isWidgetInteracting(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.widgetInteractionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isWidgetInteracting;\n    }}\n","import { selector } from '../common/selector';\n\nimport GiftCertificate from './gift-certificate';\nimport GiftCertificateState from './gift-certificate-state';\n\n@selector\nexport default class GiftCertificateSelector {\n    constructor(\n        private _giftCertificate: GiftCertificateState\n    ) {}\n\n    getGiftCertificates(): GiftCertificate[] | undefined {\n        return this._giftCertificate.data;\n    }\n\n    getRemoveError(): Error | undefined {\n        return this._giftCertificate.errors.removeGiftCertificateError;\n    }\n\n    getApplyError(): Error | undefined {\n        return this._giftCertificate.errors.applyGiftCertificateError;\n    }\n\n    isApplying(): boolean {\n        return !!this._giftCertificate.statuses.isApplyingGiftCertificate;\n    }\n\n    isRemoving(): boolean {\n        return !!this._giftCertificate.statuses.isRemovingGiftCertificate;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport { Address } from '../address';\n\nimport ConsignmentState from './consignment-state';\n\n@selector\nexport default class ShippingAddressSelector {\n    constructor(\n        private _consignments: ConsignmentState\n    ) {}\n\n    getShippingAddress(): Address | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments[0]) {\n            return;\n        }\n\n        return consignments[0].shippingAddress;\n    }\n}\n","import { selector } from '../common/selector';\nimport { Country } from '../geography';\n\nimport ShippingCountryState from './shipping-country-state';\n\n@selector\nexport default class ShippingCountrySelector {\n    constructor(\n        private _shippingCountries: ShippingCountryState\n    ) {}\n\n    getShippingCountries(): Country[] | undefined {\n        return this._shippingCountries.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._shippingCountries.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._shippingCountries.statuses.isLoading;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport ShippingStrategyState from './shipping-strategy-state';\n\n@selector\nexport default class ShippingStrategySelector {\n    constructor(\n        private _shippingStrategies: ShippingStrategyState\n    ) {}\n\n    getUpdateAddressError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.updateAddressMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.updateAddressError;\n    }\n\n    getSelectOptionError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.selectOptionMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.selectOptionError;\n    }\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.initializeError;\n    }\n\n    isUpdatingAddress(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.updateAddressMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isUpdatingAddress;\n    }\n\n    isSelectingOption(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.selectOptionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isSelectingOption;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isInitializing;\n    }\n}\n","import { find } from 'lodash';\n\nimport { isAddressEqual, AddressRequestBody } from '../address';\nimport { CartSelector, PhysicalItem } from '../cart';\nimport { selector } from '../common/selector';\n\nimport Consignment from './consignment';\nimport ConsignmentState from './consignment-state';\nimport ShippingOption from './shipping-option';\n\n@selector\nexport default class ConsignmentSelector {\n    constructor(\n        private _consignments: ConsignmentState,\n        private _cart: CartSelector\n    ) {}\n\n    getConsignments(): Consignment[] | undefined {\n        return this._consignments.data;\n    }\n\n    getConsignmentById(id: string): Consignment | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return find(consignments, { id });\n    }\n\n    getConsignmentByAddress(address: AddressRequestBody): Consignment | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return find(consignments, consignment =>\n            isAddressEqual(consignment.shippingAddress, address)\n        );\n    }\n\n    getShippingOption(): ShippingOption | undefined {\n        const consignments = this._consignments.data;\n\n        if (consignments && consignments.length) {\n            return consignments[0].selectedShippingOption;\n        }\n    }\n\n    getLoadError(): Error | undefined {\n        return this._consignments.errors.loadError;\n    }\n\n    getCreateError(): Error | undefined {\n        return this._consignments.errors.createError;\n    }\n\n    getLoadShippingOptionsError(): Error | undefined {\n        return this._consignments.errors.loadShippingOptionsError;\n    }\n\n    getUnassignedItems(): PhysicalItem[] {\n        const cart = this._cart.getCart();\n\n        if (!cart) {\n            return [];\n        }\n\n        const assignedLineItemIds = (this.getConsignments() || []).reduce(\n            (itemIds, consignment) => itemIds.concat(consignment.lineItemIds),\n            [] as string[]\n        );\n\n        return (cart.lineItems.physicalItems || []).filter(\n            item => assignedLineItemIds.indexOf(item.id as string) < 0\n        );\n    }\n\n    getUpdateError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.updateError[consignmentId];\n        }\n\n        return find(this._consignments.errors.updateError);\n    }\n\n    getDeleteError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.deleteError[consignmentId];\n        }\n\n        return find(this._consignments.errors.deleteError);\n    }\n\n    getItemAssignmentError(address: AddressRequestBody): Error | undefined {\n        const consignment = this.getConsignmentByAddress(address);\n\n        return consignment ? this.getUpdateError(consignment.id) : this.getCreateError();\n    }\n\n    getUpdateShippingOptionError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.updateShippingOptionError[consignmentId];\n        }\n\n        return find(this._consignments.errors.updateShippingOptionError);\n    }\n\n    isLoading(): boolean {\n        return this._consignments.statuses.isLoading === true;\n    }\n\n    isLoadingShippingOptions(): boolean {\n        return this._consignments.statuses.isLoadingShippingOptions === true;\n    }\n\n    isCreating(): boolean {\n        return this._consignments.statuses.isCreating === true;\n    }\n\n    isUpdating(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isUpdating[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isUpdating) === true;\n    }\n\n    isDeleting(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isDeleting[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isDeleting) === true;\n    }\n\n    isAssigningItems(address: AddressRequestBody): boolean {\n        const consignment = this.getConsignmentByAddress(address);\n\n        return consignment ? this.isUpdating(consignment.id) : this.isCreating();\n    }\n\n    isUpdatingShippingOption(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isUpdatingShippingOption[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isUpdatingShippingOption) === true;\n    }\n}\n","import { identity, isEqual, pickBy } from 'lodash';\n\nimport Address from './address';\n\nexport default function isAddressEqual(addressA: Partial<Address>, addressB: Partial<Address>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<Address>): Partial<Address> {\n    return pickBy({\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.address1,\n        address2: address.address2,\n        city: address.city,\n        stateOrProvince: address.stateOrProvince,\n        countryCode: address.countryCode,\n        postalCode: address.postalCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    }, identity);\n}\n","import { BillingAddressSelector } from '../billing';\nimport { selector } from '../common/selector';\nimport { CouponSelector } from '../coupon';\n\nimport Order from './order';\nimport OrderState, { OrderMetaState } from './order-state';\n\n@selector\nexport default class OrderSelector {\n    constructor(\n        private _order: OrderState,\n        private _billingAddress: BillingAddressSelector,\n        private _coupons: CouponSelector\n    ) {}\n\n    getOrder(): Order | undefined {\n        const { data } = this._order;\n        const billingAddress = this._billingAddress.getBillingAddress();\n        const coupons = this._coupons.getCoupons() || [];\n\n        if (!data || !billingAddress) {\n            return;\n        }\n\n        return {\n            ...data,\n            billingAddress,\n            coupons,\n        };\n    }\n\n    getOrderMeta(): OrderMetaState | undefined {\n        return this._order.meta;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._order.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._order.statuses.isLoading;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing/billing-address-actions';\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { CouponAction, CouponActionType } from '../coupon/coupon-actions';\nimport { GiftCertificateAction, GiftCertificateActionType } from '../coupon/gift-certificate-actions';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport Cart from './cart';\nimport CartState, { CartErrorsState, CartStatusesState } from './cart-state';\n\nconst DEFAULT_STATE: CartState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function cartReducer(\n    state: CartState = DEFAULT_STATE,\n    action: Action\n): CartState {\n    const reducer = combineReducers<CartState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Cart | undefined,\n    action: BillingAddressAction | CheckoutAction | ConsignmentAction | CouponAction | GiftCertificateAction\n): Cart | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload ? { ...data, ...action.payload.cart } : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CartStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction\n): CartStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n\nfunction errorsReducer(\n    errors: CartErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction\n): CartErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { CustomerAction, CustomerActionType } from '../customer';\n\nimport Consignment from './consignment';\nimport { ConsignmentAction, ConsignmentActionType } from './consignment-actions';\nimport ConsignmentState, { ConsignmentErrorsState, ConsignmentStatusesState } from './consignment-state';\n\nconst DEFAULT_STATE: ConsignmentState = {\n    errors: {\n        updateShippingOptionError: {},\n        updateError: {},\n        deleteError: {},\n    },\n    statuses: {\n        isUpdating: {},\n        isUpdatingShippingOption: {},\n        isDeleting: {},\n    },\n};\n\nexport default function consignmentReducer(\n    state: ConsignmentState = DEFAULT_STATE,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentState {\n    const reducer = combineReducers<ConsignmentState, ConsignmentAction | CheckoutAction>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Consignment[] | undefined,\n    action: ConsignmentAction | CheckoutAction | CustomerAction\n): Consignment[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        return action.payload ? action.payload.consignments : data;\n\n    case CustomerActionType.SignOutCustomerSucceeded:\n        return [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConsignmentErrorsState = DEFAULT_STATE.errors,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return { ...errors, loadError: action.payload };\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n        return { ...errors, createError: undefined };\n\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return { ...errors, createError: action.payload };\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            errors.updateError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            errors.updateError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            errors.deleteError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            errors.deleteError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        if (action.meta) {\n            errors.updateShippingOptionError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            errors.updateShippingOptionError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConsignmentStatusesState = DEFAULT_STATE.statuses,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return { ...statuses, isLoadingShippingOptions: true };\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...statuses, isLoading: false };\n\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return { ...statuses, isLoadingShippingOptions: false };\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n        return { ...statuses, isCreating: true };\n\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return { ...statuses, isCreating: false };\n\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            statuses.isUpdating[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            statuses.isUpdating[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            statuses.isDeleting[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            statuses.isDeleting[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n        if (action.meta) {\n            statuses.isUpdatingShippingOption[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            statuses.isUpdatingShippingOption[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport Coupon from './coupon';\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport CouponState, { CouponErrorsState, CouponStatusesState } from './coupon-state';\n\nconst DEFAULT_STATE: CouponState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function couponReducer(\n    state: CouponState = DEFAULT_STATE,\n    action: CouponAction | CheckoutAction | OrderAction\n): CouponState {\n    const reducer = combineReducers<CouponState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Coupon[] | undefined,\n    action: CouponAction | CheckoutAction | OrderAction\n): Coupon[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return action.payload ? action.payload.coupons : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CouponErrorsState = {},\n    action: CouponAction\n): CouponErrorsState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n    case CouponActionType.ApplyCouponSucceeded:\n        return { ...errors, applyCouponError: undefined };\n\n    case CouponActionType.ApplyCouponFailed:\n        return { ...errors, applyCouponError: action.payload };\n\n    case CouponActionType.RemoveCouponRequested:\n    case CouponActionType.RemoveCouponSucceeded:\n        return { ...errors, removeCouponError: undefined };\n\n    case CouponActionType.RemoveCouponFailed:\n        return { ...errors, removeCouponError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CouponStatusesState = {},\n    action: CouponAction\n): CouponStatusesState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n        return { ...statuses, isApplyingCoupon: true };\n\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.ApplyCouponFailed:\n        return { ...statuses, isApplyingCoupon: false };\n\n    case CouponActionType.RemoveCouponRequested:\n        return { ...statuses, isRemovingCoupon: true };\n\n    case CouponActionType.RemoveCouponSucceeded:\n    case CouponActionType.RemoveCouponFailed:\n        return { ...statuses, isRemovingCoupon: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\n\nimport Customer from './customer';\nimport CustomerState from './customer-state';\n\nconst DEFAULT_STATE: CustomerState = {};\n\nexport default function customerReducer(\n    state: CustomerState = DEFAULT_STATE,\n    action: CheckoutAction\n): CustomerState {\n    const reducer = combineReducers<CustomerState, CheckoutAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Customer | undefined,\n    action: CheckoutAction\n): Customer | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return action.payload ? { ...data, ...action.payload.customer } : data;\n\n    default:\n        return data;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport GiftCertificate from './gift-certificate';\nimport { GiftCertificateAction, GiftCertificateActionType } from './gift-certificate-actions';\nimport GiftCertificateState, { GiftCertificateErrorsState, GiftCertificateStatusesState } from './gift-certificate-state';\n\nconst DEFAULT_STATE: GiftCertificateState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function giftCertificateReducer(\n    state: GiftCertificateState = DEFAULT_STATE,\n    action: CheckoutAction | GiftCertificateAction | ConsignmentAction | CouponAction\n): GiftCertificateState {\n    const reducer = combineReducers<GiftCertificateState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: GiftCertificate[] | undefined,\n    action: CheckoutAction | GiftCertificateAction | ConsignmentAction | CouponAction\n): GiftCertificate[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload ? action.payload.giftCertificates : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: GiftCertificateErrorsState = DEFAULT_STATE.errors,\n    action: GiftCertificateAction\n): GiftCertificateErrorsState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        return { ...errors, applyGiftCertificateError: undefined };\n\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return { ...errors, applyGiftCertificateError: action.payload };\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return { ...errors, removeGiftCertificateError: undefined };\n\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return { ...errors, removeGiftCertificateError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: GiftCertificateStatusesState = DEFAULT_STATE.statuses,\n    action: GiftCertificateAction\n): GiftCertificateStatusesState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n        return { ...statuses, isApplyingGiftCertificate: true };\n\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return { ...statuses, isApplyingGiftCertificate: false };\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n        return { ...statuses, isRemovingGiftCertificate: true };\n\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return { ...statuses, isRemovingGiftCertificate: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { OrderAction, OrderActionType } from './order-actions';\nimport OrderState, { OrderDataState, OrderErrorsState, OrderMetaState, OrderStatusesState } from './order-state';\n\nconst DEFAULT_STATE: OrderState = {\n    errors: {},\n    meta: {},\n    statuses: {},\n};\n\nexport default function orderReducer(\n    state: OrderState = DEFAULT_STATE,\n    action: OrderAction\n): OrderState {\n    const reducer = combineReducers<OrderState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: OrderDataState | undefined,\n    action: OrderAction\n): OrderDataState | undefined {\n    switch (action.type) {\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n        return action.payload\n            ? omit({ ...data, ...action.payload }, ['billingAddress', 'coupons'])\n            : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: OrderMetaState | undefined,\n    action: OrderAction\n): OrderMetaState | undefined {\n    switch (action.type) {\n    case OrderActionType.FinalizeOrderSucceeded:\n    case OrderActionType.SubmitOrderSucceeded:\n        return action.payload ? {\n            ...meta,\n            ...action.meta,\n            callbackUrl: action.payload.order.callbackUrl,\n            orderToken: action.payload.order.token,\n            payment: action.payload.order && action.payload.order.payment,\n        } : meta;\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: OrderErrorsState = DEFAULT_STATE.errors,\n    action: OrderAction\n): OrderErrorsState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return { ...errors, loadError: undefined };\n\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: OrderStatusesState = DEFAULT_STATE.statuses,\n    action: OrderAction\n): OrderStatusesState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return { ...statuses, isLoading: true };\n\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport { Country } from '../geography';\n\nimport * as actionTypes from './shipping-country-action-types';\nimport ShippingCountryState, { ShippingCountryErrorsState, ShippingCountryStatusesState } from './shipping-country-state';\n\nconst DEFAULT_STATE: ShippingCountryState = {\n    errors: {},\n    statuses: {},\n};\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action\n */\nexport default function shippingCountryReducer(state: ShippingCountryState = DEFAULT_STATE, action: Action): ShippingCountryState {\n    const reducer = combineReducers<ShippingCountryState>({\n        errors: errorsReducer,\n        data: dataReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: Country[] | undefined, action: Action): Country[] | undefined {\n    switch (action.type) {\n    case actionTypes.LOAD_SHIPPING_COUNTRIES_SUCCEEDED:\n        return action.payload || [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(errors: ShippingCountryErrorsState = DEFAULT_STATE.errors, action: Action): ShippingCountryErrorsState {\n    switch (action.type) {\n    case actionTypes.LOAD_SHIPPING_COUNTRIES_REQUESTED:\n    case actionTypes.LOAD_SHIPPING_COUNTRIES_SUCCEEDED:\n        return { ...errors, loadError: undefined };\n\n    case actionTypes.LOAD_SHIPPING_COUNTRIES_FAILED:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(statuses: ShippingCountryStatusesState = DEFAULT_STATE.statuses, action: Action): ShippingCountryStatusesState {\n    switch (action.type) {\n    case actionTypes.LOAD_SHIPPING_COUNTRIES_REQUESTED:\n        return { ...statuses, isLoading: true };\n\n    case actionTypes.LOAD_SHIPPING_COUNTRIES_SUCCEEDED:\n    case actionTypes.LOAD_SHIPPING_COUNTRIES_FAILED:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","module.exports = require(\"rxjs/observable/throw\");","module.exports = require(\"rxjs/observable/merge\");","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { GooglePayCreator } from '../googlepay';\n\nimport {\n    BraintreeClientCreator,\n    BraintreeDataCollectorCreator,\n    BraintreeHostWindow,\n    BraintreePaypalCheckoutCreator,\n    BraintreePaypalCreator,\n    BraintreeThreeDSecureCreator,\n    BraintreeVisaCheckoutCreator,\n} from './braintree';\n\nexport default class BraintreeScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: BraintreeHostWindow = window\n    ) {}\n\n    loadClient(): Promise<BraintreeClientCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/client.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.client) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.client;\n            });\n    }\n\n    load3DS(): Promise<BraintreeThreeDSecureCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/three-d-secure.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.threeDSecure) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.threeDSecure;\n            });\n    }\n\n    loadDataCollector(): Promise<BraintreeDataCollectorCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/data-collector.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.dataCollector) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.dataCollector;\n            });\n    }\n\n    loadPaypal(): Promise<BraintreePaypalCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/paypal.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypal) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.paypal;\n            });\n    }\n\n    loadPaypalCheckout(): Promise<BraintreePaypalCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/paypal-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypalCheckout) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.paypalCheckout;\n            });\n    }\n\n    loadVisaCheckout(): Promise<BraintreeVisaCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/visa-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.visaCheckout) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.visaCheckout;\n            });\n    }\n\n    loadGooglePayment(): Promise<GooglePayCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/google-payment.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.googlePayment) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.googlePayment;\n            });\n    }\n}\n","import { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport {\n    BraintreeClient,\n    BraintreeDataCollector,\n    BraintreeModule,\n    BraintreePaypal,\n    BraintreePaypalCheckout,\n    BraintreeThreeDSecure,\n    BraintreeVisaCheckout,\n    GooglePayBraintreeSDK,\n} from './braintree';\nimport BraintreeScriptLoader from './braintree-script-loader';\n\nexport default class BraintreeSDKCreator {\n    private _client?: Promise<BraintreeClient>;\n    private _3ds?: Promise<BraintreeThreeDSecure>;\n    private _paypal?: Promise<BraintreePaypal>;\n    private _paypalCheckout?: Promise<BraintreePaypalCheckout>;\n    private _clientToken?: string;\n    private _visaCheckout?: Promise<BraintreeVisaCheckout>;\n    private _dataCollectors: {\n        default?: Promise<BraintreeDataCollector>,\n        paypal?: Promise<BraintreeDataCollector>,\n    } = {};\n    private _googlePay?: Promise<GooglePayBraintreeSDK>;\n\n    constructor(\n        private _braintreeScriptLoader: BraintreeScriptLoader\n    ) {}\n\n    initialize(clientToken: string) {\n        this._clientToken = clientToken;\n    }\n\n    getClient(): Promise<BraintreeClient> {\n        if (!this._clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!this._client) {\n            this._client = this._braintreeScriptLoader.loadClient()\n                .then(client => client.create({ authorization: this._clientToken }));\n        }\n\n        return this._client;\n    }\n\n    getPaypal(): Promise<BraintreePaypal> {\n        if (!this._paypal) {\n            this._paypal = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypal(),\n            ])\n            .then(([client, paypal]) => paypal.create({ client }));\n        }\n\n        return this._paypal;\n    }\n\n    getPaypalCheckout(): Promise<BraintreePaypalCheckout> {\n        if (!this._paypalCheckout) {\n            this._paypalCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypalCheckout(),\n            ])\n                .then(([client, paypalCheckout]) => paypalCheckout.create({ client }));\n        }\n\n        return this._paypalCheckout;\n    }\n\n    get3DS(): Promise<BraintreeThreeDSecure> {\n        if (!this._3ds) {\n            this._3ds = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.load3DS(),\n            ])\n            .then(([client, threeDSecure]) => threeDSecure.create({ client }));\n        }\n\n        return this._3ds;\n    }\n\n    getDataCollector(options?: { paypal: boolean }): Promise<BraintreeDataCollector> {\n        const cacheKey = options && options.paypal ? 'paypal' : 'default';\n        let cached = this._dataCollectors[cacheKey];\n\n        if (!cached) {\n            cached = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadDataCollector(),\n            ])\n            .then(([client, dataCollector]) => dataCollector.create({ client, kount: true, ...options }))\n            .catch(error => {\n                if (error && error.code === 'DATA_COLLECTOR_KOUNT_NOT_ENABLED') {\n                    return { deviceData: undefined, teardown: () => Promise.resolve() };\n                }\n\n                throw error;\n            });\n\n            this._dataCollectors[cacheKey] = cached;\n        }\n\n        return cached;\n    }\n\n    getVisaCheckout(): Promise<BraintreeVisaCheckout> {\n        if (!this._visaCheckout) {\n            this._visaCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadVisaCheckout(),\n            ])\n            .then(([client, visaCheckout]) => visaCheckout.create({ client }));\n        }\n\n        return this._visaCheckout;\n    }\n\n    getGooglePaymentComponent(): Promise<GooglePayBraintreeSDK> {\n        if (!this._googlePay) {\n            this._googlePay = Promise.all ([\n                this.getClient(),\n                this._braintreeScriptLoader.loadGooglePayment(),\n            ])\n                .then(([client, googlePay]) => googlePay.create({ client }));\n        }\n\n        return this._googlePay;\n    }\n\n    teardown(): Promise<void> {\n        return Promise.all([\n            this._teardown(this._3ds),\n            this._teardown(this._dataCollectors.default),\n            this._teardown(this._dataCollectors.paypal),\n            this._teardown(this._visaCheckout),\n            this._teardown(this._googlePay),\n        ]).then(() => {\n            this._3ds = undefined;\n            this._visaCheckout = undefined;\n            this._dataCollectors = {};\n            this._googlePay = undefined;\n        });\n    }\n\n    private _teardown(module?: Promise<BraintreeModule>) {\n        return module ?\n            module.then(mod => mod.teardown()) :\n            Promise.resolve();\n    }\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Timeout = (function () {\n    function Timeout(_delay) {\n        var _this = this;\n        this._delay = _delay;\n        this._resolve = function () { };\n        this._promise = new Promise(function (resolve) {\n            _this._resolve = resolve;\n        });\n    }\n    Timeout.prototype.onComplete = function (callback) {\n        this._promise.then(callback);\n    };\n    Timeout.prototype.complete = function () {\n        this._resolve();\n        if (this._timeoutToken) {\n            window.clearTimeout(this._timeoutToken);\n        }\n    };\n    Timeout.prototype.start = function () {\n        var _this = this;\n        if (this._delay) {\n            this._timeoutToken = window.setTimeout(function () { return _this.complete(); }, this._delay);\n        }\n    };\n    return Timeout;\n}());\nexports.default = Timeout;\n//# sourceMappingURL=timeout.js.map","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { AddressRequestBody } from '../address';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { Registry } from '../common/registry';\n\nimport { ShippingInitializeOptions, ShippingRequestOptions } from './shipping-request-options';\nimport {\n    ShippingStrategyActionType,\n    ShippingStrategyDeinitializeAction,\n    ShippingStrategyInitializeAction,\n    ShippingStrategySelectOptionAction,\n    ShippingStrategyUpdateAddressAction,\n} from './shipping-strategy-actions';\nimport { ShippingStrategy } from './strategies';\n\nexport default class ShippingStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<ShippingStrategy>\n    ) {}\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): ThunkAction<ShippingStrategyUpdateAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyUpdateAddressAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .updateAddress(address, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId }));\n                });\n        });\n    }\n\n    selectOption(shippingOptionId: string, options?: ShippingRequestOptions): ThunkAction<ShippingStrategySelectOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategySelectOptionAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.SelectOptionRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .selectOption(shippingOptionId, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.SelectOptionSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.SelectOptionFailed, error, { methodId }));\n                });\n        });\n    }\n\n    initialize(options?: ShippingInitializeOptions): ThunkAction<ShippingStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyInitializeAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n            const mergedOptions = { ...options, methodId };\n\n            observer.next(createAction(ShippingStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(mergedOptions)\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options?: ShippingRequestOptions): ThunkAction<ShippingStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyDeinitializeAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize({ ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n}\n","import { BillingAddress } from '../billing';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\nexport default function mapFromInternalAddress(address: InternalAddress): Address | BillingAddress {\n    return {\n        id: address.id,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.addressLine1,\n        address2: address.addressLine2,\n        city: address.city,\n        stateOrProvince: address.province,\n        stateOrProvinceCode: address.provinceCode,\n        postalCode: address.postCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import { mapToInternalAddress } from '../address';\nimport { BillingAddress } from '../billing';\n\nimport { Customer } from '.';\nimport InternalCustomer from './internal-customer';\n\nexport default function mapToInternalCustomer(customer: Customer, billingAddress: BillingAddress): InternalCustomer {\n    const firstName = customer.firstName || billingAddress.firstName || '';\n    const lastName = customer.lastName || billingAddress.lastName || '';\n\n    return {\n        addresses: (customer.addresses || []).map(address => mapToInternalAddress(address)),\n        customerId: customer.id,\n        isGuest: customer.isGuest,\n        storeCredit: customer.storeCredit,\n        email: customer.email || billingAddress.email || '',\n        firstName,\n        lastName,\n        name: customer.fullName || [firstName, lastName].join(' '),\n    };\n}\n","export default class AmountTransformer {\n    constructor(private _dp: number) {}\n\n    toInteger(amount: number): number {\n        return Math.floor(amount * Math.pow(10, this._dp));\n    }\n}\n","import Coupon from './coupon';\nimport InternalCoupon from './internal-coupon';\n\nconst couponTypes = [\n    'per_item_discount',\n    'percentage_discount',\n    'per_total_discount',\n    'shipping_discount',\n    'free_shipping',\n];\n\nexport default function mapToInternalCoupon(coupon: Coupon): InternalCoupon {\n    return {\n        code: coupon.code,\n        discount: coupon.displayName,\n        discountType: couponTypes.indexOf(coupon.couponType),\n    };\n}\n","import GiftCertificate from './gift-certificate';\nimport InternalGiftCertificate from './internal-gift-certificate';\n\nexport default function mapToInternalGiftCertificate(giftCertificate: GiftCertificate): InternalGiftCertificate {\n    return {\n        code: giftCertificate.code,\n        discountedAmount: giftCertificate.used,\n        remainingBalance: giftCertificate.remaining,\n        giftCertificate: {\n            balance: giftCertificate.balance,\n            code: giftCertificate.code,\n            purchaseDate: giftCertificate.purchaseDate,\n        },\n    };\n}\n","import { filter, find, keyBy, reduce } from 'lodash';\n\nimport { AmountTransformer, LineItem } from '../cart';\nimport { mapToInternalLineItems } from '../cart';\nimport { Checkout } from '../checkout';\nimport { mapToInternalCoupon } from '../coupon';\nimport { HOSTED } from '../payment';\n\nimport InternalOrder, { InternalGiftCertificateList, InternalIncompleteOrder, InternalOrderPayment, InternalSocialDataList } from './internal-order';\nimport Order, { GatewayOrderPayment, GiftCertificateOrderPayment, OrderPayment, OrderPayments } from './order';\nimport { OrderMetaState } from './order-state';\n\nexport default function mapToInternalOrder(order: Order, orderMeta: OrderMetaState = {}): InternalOrder {\n    const decimalPlaces = order.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: order.orderId,\n        items: mapToInternalLineItems(order.lineItems, order.currency.decimalPlaces, 'productId'),\n        orderId: order.orderId,\n        currency: order.currency.code,\n        customerCanBeCreated: order.customerCanBeCreated,\n        payment: mapToInteralOrderPayment(order.payments, orderMeta.payment),\n        subtotal: {\n            amount: order.baseAmount,\n            integerAmount: amountTransformer.toInteger(order.baseAmount),\n        },\n        coupon: {\n            discountedAmount: reduce(order.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: order.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: order.discountAmount,\n            integerAmount: amountTransformer.toInteger(order.discountAmount),\n        },\n        token: orderMeta.orderToken,\n        callbackUrl: orderMeta.callbackUrl,\n        discountNotifications: [],\n        giftCertificate: mapToGiftCertificates(order.payments),\n        socialData: mapToInternalSocialDataList(order),\n        status: order.status,\n        hasDigitalItems: order.hasDigitalItems,\n        isDownloadable: order.isDownloadable,\n        isComplete: order.isComplete,\n        shipping: {\n            amount: order.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.shippingCostTotal),\n            amountBeforeDiscount: order.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(order.shippingCostBeforeDiscount),\n        },\n        storeCredit: {\n            amount: mapToStoreCredit(order.payments),\n        },\n        taxes: order.taxes,\n        handling: {\n            amount: order.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: order.orderAmount,\n            integerAmount: order.orderAmountAsInteger,\n        },\n    };\n}\n\nexport function mapToInternalIncompleteOrder(checkout: Checkout): InternalIncompleteOrder {\n    const payment = find(checkout.payments, { providerType: HOSTED });\n\n    return {\n        orderId: null,\n        isComplete: false,\n        payment: !payment ? {} : {\n            id: payment.providerId,\n            gateway: payment.gatewayId,\n            status: mapToInternalPaymentStatus(payment.detail.step),\n        },\n    };\n}\n\nfunction mapToInternalPaymentStatus(status: string): string {\n    return `PAYMENT_STATUS_${status}`;\n}\n\nfunction mapToStoreCredit(payments?: OrderPayments): number {\n    const item = find(payments, { providerId: 'storecredit' });\n\n    return item ? item.amount : 0;\n}\n\nfunction mapToGiftCertificates(payments?: OrderPayments): InternalGiftCertificateList {\n    const items = filter(payments, { providerId: 'giftcertificate' }) as GiftCertificateOrderPayment[];\n\n    return {\n        totalDiscountedAmount: reduce(items, (sum, item) => item.amount + sum, 0),\n        appliedGiftCertificates: keyBy(items.map(item => ({\n            code: item.detail.code,\n            discountedAmount: item.amount,\n            remainingBalance: item.detail.remaining,\n            giftCertificate: {\n                balance: item.amount + item.detail.remaining,\n                code: item.detail.code,\n                purchaseDate: '',\n            },\n        })), 'code'),\n    };\n}\n\nfunction mapToInteralOrderPayment(payments?: OrderPayments, payment: InternalOrderPayment = {}): InternalOrderPayment {\n    const item = find(payments, isDefaultOrderPayment) as GatewayOrderPayment;\n\n    if (!item) {\n        return {};\n    }\n\n    return {\n        id: item.providerId,\n        status: mapToInternalPaymentStatus(item.detail.step),\n        helpText: item.detail.instructions,\n        returnUrl: payment.returnUrl,\n    };\n}\n\nfunction isDefaultOrderPayment(payment: OrderPayment): payment is GatewayOrderPayment {\n    return payment.providerId !== 'giftcertificate' && payment.providerId !== 'storecredit';\n}\n\nfunction mapToInternalSocialDataList(order: Order): { [itemId: string]: InternalSocialDataList } | undefined {\n    const socialDataObject: { [itemId: string]: InternalSocialDataList } = {};\n    const items = [\n        ...order.lineItems.physicalItems,\n        ...order.lineItems.digitalItems,\n    ];\n\n    items.forEach(item => {\n        socialDataObject[item.id] = mapToInternalSocialData(item);\n    });\n\n    return socialDataObject;\n}\n\nfunction mapToInternalSocialData(lineItem: LineItem): InternalSocialDataList {\n    const codes = ['fb', 'tw', 'gp'];\n\n    return codes.reduce((socialData, code) => {\n        const item = lineItem.socialMedia && lineItem.socialMedia.find(item => item.code === code);\n\n        if (!item) {\n            return socialData;\n        }\n\n        socialData[code] = {\n            name: lineItem.name,\n            description: lineItem.name,\n            image: lineItem.imageUrl,\n            url: item.link,\n            shareText: item.text,\n            sharingLink: item.link,\n            channelName: item.channel,\n            channelCode: item.code,\n        };\n\n        return socialData;\n    }, {} as InternalSocialDataList);\n}\n","import { AddressRequestBody } from '../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\n\nimport { ShippingRequestOptions } from '../shipping-request-options';\n\nexport default abstract class ShippingStrategy {\n    protected _isInitialized = false;\n\n    constructor(\n        protected _store: CheckoutStore\n    ) {}\n\n    abstract updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors>;\n\n    abstract selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors>;\n\n    initialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = true;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = false;\n\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\n\nimport { isInternalAddressEqual, mapFromInternalAddress, AddressRequestBody } from '../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../payment';\nimport { AmazonPayAddressBook, AmazonPayOrderReference, AmazonPayScriptLoader, AmazonPayWidgetError, AmazonPayWindow } from '../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator } from '../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../remote-checkout/errors';\nimport ConsignmentActionCreator from '../consignment-action-creator';\nimport { ShippingInitializeOptions, ShippingRequestOptions } from '../shipping-request-options';\nimport { ShippingStrategyActionType } from '../shipping-strategy-actions';\n\nimport ShippingStrategy from './shipping-strategy';\n\nexport default class AmazonPayShippingStrategy extends ShippingStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        super(store);\n\n        this._window = window;\n    }\n\n    initialize(options: ShippingInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const onReady = () => {\n                    this._createAddressBook(amazonOptions)\n                        .then(resolve)\n                        .catch(reject);\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._paymentMethod = undefined;\n\n        return super.deinitialize(options);\n    }\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    selectOption(optionId: string, options?: any): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n\n    private _createAddressBook(options: AmazonPayShippingInitializeOptions): Promise<AmazonPayAddressBook> {\n        return new Promise((resolve, reject) => {\n            const { container, onAddressSelect = () => {}, onError = () => {}, onReady = () => {} } = options;\n            const merchantId = this._paymentMethod && this._paymentMethod.config.merchantId;\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay AddressBook widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.AddressBook({\n                design: {\n                    designMode: 'responsive',\n                },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onAddressSelect: orderReference => {\n                    this._synchronizeShippingAddress()\n                        .then(() => onAddressSelect(orderReference))\n                        .catch(onError);\n                },\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onReady: orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                },\n            });\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeShippingAddress(): Promise<InternalCheckoutSelectors> {\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n        const amazon = this._store.getState().remoteCheckout.getCheckout('amazon');\n        const referenceId = amazon ? amazon.referenceId : undefined;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId })\n        )\n            .then(() => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializeShipping(methodId, { referenceId })\n            ))\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.shipping && amazon.shipping.address;\n                const address = state.shippingAddress.getShippingAddress();\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, address || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._consignmentActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            })\n            .then(() => this._store.dispatch(\n                createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId })\n            ))\n            .catch(error => this._store.dispatch(\n                createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId })\n            ));\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n}\n\n/**\n * A set of options that are required to initialize the shipping step of\n * checkout in order to support Amazon Pay.\n *\n * When Amazon Pay is initialized, a widget will be inserted into the DOM. The\n * widget has a list of shipping addresses for the customer to choose from.\n */\nexport interface AmazonPayShippingInitializeOptions {\n    /**\n     * The ID of a container which the address widget should insert into.\n     */\n    container: string;\n\n    /**\n     * A callback that gets called when the customer selects an address option.\n     *\n     * @param reference - The order reference provided by Amazon.\n     */\n    onAddressSelect?(reference: AmazonPayOrderReference): void;\n\n    /**\n     * A callback that gets called if unable to initialize the widget or select\n     * one of the address options provided by the widget.\n     *\n     * @param error - The error object describing the failure of the initialization.\n     */\n    onError?(error: AmazonPayWidgetError | StandardError): void;\n\n    /**\n     * A callback that gets called when the widget is loaded and ready to be\n     * interacted with.\n     *\n     * @param reference - The order reference provided by Amazon.\n     */\n    onReady?(reference: AmazonPayOrderReference): void;\n}\n","import { ConsignmentActionCreator, ShippingRequestOptions } from '../';\nimport { AddressRequestBody } from '../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\n\nimport { ShippingStrategy } from './';\n\nexport default class GooglePayBraintreeShippingStrategy extends ShippingStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator\n    ) {\n        super(store);\n    }\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.updateAddress(address, options)\n        );\n    }\n\n    selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n}\n","import { AddressRequestBody } from '../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport ConsignmentActionCreator from '../consignment-action-creator';\nimport { ShippingRequestOptions } from '../shipping-request-options';\n\nimport ShippingStrategy from './shipping-strategy';\n\nexport default class DefaultShippingStrategy extends ShippingStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator\n    ) {\n        super(store);\n    }\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.updateAddress(address, options)\n        );\n    }\n\n    selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport ConsignmentActionCreator from './consignment-action-creator';\nimport ConsignmentRequestSender from './consignment-request-sender';\nimport { AmazonPayShippingStrategy, DefaultShippingStrategy, GooglePayBraintreeShippingStrategy, ShippingStrategy } from './strategies';\n\nexport default function createShippingStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<ShippingStrategy> {\n    const registry = new Registry<ShippingStrategy>();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const consignmentRequestSender = new ConsignmentRequestSender(requestSender);\n    const consignmentActionCreator = new ConsignmentActionCreator(consignmentRequestSender, checkoutRequestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayShippingStrategy(\n            store,\n            consignmentActionCreator,\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n            new RemoteCheckoutActionCreator(new RemoteCheckoutRequestSender(requestSender)),\n            new AmazonPayScriptLoader(getScriptLoader())\n        )\n    );\n\n    registry.register('googlepaybraintree', () =>\n        new GooglePayBraintreeShippingStrategy(\n            store,\n            consignmentActionCreator\n        )\n    );\n\n    registry.register('default', () =>\n        new DefaultShippingStrategy(\n            store,\n            consignmentActionCreator\n        )\n    );\n\n    return registry;\n}\n","import isPrivate from './is-private';\nimport omitDeep from './omit-deep';\n\nexport default function omitPrivate(object: any): any {\n    return omitDeep(object, (value: any, key: string) => isPrivate(key));\n}\n","import { omitBy, transform } from 'lodash';\n\nexport default function omitDeep(object: any, predicate: (value: any, key: string) => boolean): any {\n    if (Array.isArray(object)) {\n        return object.map(value => omitDeep(value, predicate));\n    }\n\n    if (typeof object === 'object') {\n        return transform(omitBy(object, predicate), (result, value, key) => {\n            result[key] = omitDeep(value, predicate);\n        }, {});\n    }\n\n    return object;\n}\n","import { isEqual } from 'lodash';\n\nimport { omitPrivate } from '../common/utility';\n\nimport InternalAddress from './internal-address';\n\nexport default function isInternalAddressEqual(addressA: Partial<InternalAddress>, addressB: Partial<InternalAddress>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<InternalAddress>): Partial<InternalAddress> {\n    const ignoredKeys = ['id', 'provinceCode'];\n\n    return (Object.keys(omitPrivate(address) || {}) as Array<keyof InternalAddress>)\n        .reduce(\n            (result, key) => ignoredKeys.indexOf(key) === -1 && address[key] ?\n                { ...result, [key]: address[key] } :\n                result,\n            {}\n        );\n}\n","export default interface CustomerStrategyState {\n    errors: CustomerStrategyErrorsState;\n    statuses: CustomerStrategyStatusesState;\n}\n\nexport interface CustomerStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    signInError?: Error;\n    signInMethodId?: string;\n    signOutError?: Error;\n    signOutMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface CustomerStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isSigningIn?: boolean;\n    isSigningOut?: boolean;\n    signInMethodId?: string;\n    signOutMethodId?: string;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: CustomerStrategyState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CustomerStrategyAction, CustomerStrategyActionType } from './customer-strategy-actions';\nimport CustomerStrategyState, { CustomerStrategyErrorsState, CustomerStrategyStatusesState, DEFAULT_STATE } from './customer-strategy-state';\n\nexport default function customerStrategyReducer(\n    state: CustomerStrategyState = DEFAULT_STATE,\n    action: CustomerStrategyAction\n): CustomerStrategyState {\n    const reducer = combineReducers<CustomerStrategyState, CustomerStrategyAction>({\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: CustomerStrategyErrorsState = DEFAULT_STATE.errors,\n    action: CustomerStrategyAction\n): CustomerStrategyErrorsState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignInRequested:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return {\n            ...errors,\n            signInError: undefined,\n            signInMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignInFailed:\n        return {\n            ...errors,\n            signInError: action.payload,\n            signInMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignOutRequested:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return {\n            ...errors,\n            signOutError: undefined,\n            signOutMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignOutFailed:\n        return {\n            ...errors,\n            signOutError: action.payload,\n            signOutMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n        return {\n            ...errors,\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n        return {\n            ...errors,\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CustomerStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: CustomerStrategyAction\n): CustomerStrategyStatusesState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.InitializeFailed:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignInRequested:\n        return {\n            ...statuses,\n            isSigningIn: true,\n            signInMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignInFailed:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return {\n            ...statuses,\n            isSigningIn: false,\n            signInMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignOutRequested:\n        return {\n            ...statuses,\n            isSigningOut: true,\n            signOutMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignOutFailed:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return {\n            ...statuses,\n            isSigningOut: false,\n            signOutMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n        return {\n            ...statuses,\n            isWidgetInteracting: true,\n            widgetInteractionMethodId: action.meta.methodId,\n         };\n\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n         return {\n            ...statuses,\n            isWidgetInteracting: false,\n            widgetInteractionMethodId: undefined,\n         };\n\n    default:\n        return statuses;\n    }\n}\n","export default interface ShippingStrategyState {\n    errors: ShippingStrategyErrorsState;\n    statuses: ShippingStrategyStatusesState;\n}\n\nexport interface ShippingStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    updateAddressError?: Error;\n    updateAddressMethodId?: string;\n    selectOptionError?: Error;\n    selectOptionMethodId?: string;\n}\n\nexport interface ShippingStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isUpdatingAddress?: boolean;\n    isSelectingOption?: boolean;\n    updateAddressMethodId?: string;\n    selectOptionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: ShippingStrategyState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { ShippingStrategyAction, ShippingStrategyActionType } from './shipping-strategy-actions';\nimport ShippingStrategyState, { DEFAULT_STATE, ShippingStrategyErrorsState, ShippingStrategyStatusesState } from './shipping-strategy-state';\n\nexport default function shippingStrategyReducer(\n    state: ShippingStrategyState = DEFAULT_STATE,\n    action: ShippingStrategyAction\n): ShippingStrategyState {\n    const reducer = combineReducers<ShippingStrategyState, ShippingStrategyAction>({\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: ShippingStrategyErrorsState = DEFAULT_STATE.errors,\n    action: ShippingStrategyAction\n): ShippingStrategyErrorsState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return {\n            ...errors,\n            updateAddressError: undefined,\n            updateAddressMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n        return {\n            ...errors,\n            updateAddressError: action.payload,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return {\n            ...errors,\n            selectOptionError: undefined,\n            selectOptionMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n        return {\n            ...errors,\n            selectOptionError: action.payload,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: ShippingStrategyAction\n): ShippingStrategyStatusesState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.InitializeFailed:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n        return {\n            ...statuses,\n            isUpdatingAddress: true,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return {\n            ...statuses,\n            isUpdatingAddress: false,\n            updateAddressMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n        return {\n            ...statuses,\n            isSelectingOption: true,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return {\n            ...statuses,\n            isSelectingOption: false,\n            selectOptionMethodId: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { isBillingAddressLike } from '../billing';\nimport BillingAddress from '../billing/billing-address';\nimport { Consignment } from '../shipping';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\nexport default function mapToInternalAddress(address: Address | BillingAddress, consignments?: Consignment[]): InternalAddress {\n    let addressId;\n\n    if (isBillingAddressLike(address)) {\n        addressId = address.id;\n    } else if (consignments && consignments.length) {\n        addressId = consignments[0].id;\n    }\n\n    return {\n        id: addressId,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        addressLine1: address.address1,\n        addressLine2: address.address2,\n        city: address.city,\n        province: address.stateOrProvince,\n        provinceCode: address.stateOrProvinceCode,\n        postCode: address.postalCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import Address from '../address/address';\n\nimport BillingAddress from './billing-address';\n\nexport default function isBillingAddressLike(address: Address): address is BillingAddress {\n    const billingAddress = address as BillingAddress;\n\n    return typeof billingAddress.id !== 'undefined';\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { RequestError } from '../../common/error/errors';\n\nexport default class PaymentMethodInvalidError extends RequestError {\n    constructor(response?: Response) {\n        super(response, 'There is a problem processing your payment. Please try again later.');\n\n        this.type = 'payment_method_invalid';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { InternalOrderResponseBody } from './internal-order-responses';\nimport Order from './order';\n\nexport default class OrderRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadOrder(orderId: number, { timeout }: RequestOptions = {}): Promise<Response<Order>> {\n        const url = `/api/storefront/orders/${orderId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n        const params = {\n            include: [\n                'payments',\n                'lineItems.physicalItems.socialMedia',\n                'lineItems.physicalItems.options',\n                'lineItems.digitalItems.socialMedia',\n                'lineItems.digitalItems.options',\n            ].join(','),\n        };\n\n        return this._requestSender.get(url, {\n            params,\n            headers,\n            timeout,\n        });\n    }\n\n    submitOrder(body: InternalOrderRequestBody, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = '/internalapi/v1/checkout/order';\n\n        return this._requestSender.post(url, { body, timeout });\n    }\n\n    finalizeOrder(orderId: number, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = `/internalapi/v1/checkout/order/${orderId}`;\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { defer } from 'rxjs/observable/defer';\nimport { from } from 'rxjs/observable/from';\nimport { of } from 'rxjs/observable/of';\nimport { catchError, switchMap } from 'rxjs/operators';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { CheckoutValidator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { FinalizeOrderAction, LoadOrderAction, LoadOrderPaymentsAction, OrderActionType, SubmitOrderAction } from './order-actions';\nimport OrderRequestBody from './order-request-body';\nimport OrderRequestSender from './order-request-sender';\n\nexport default class OrderActionCreator {\n    constructor(\n        private _orderRequestSender: OrderRequestSender,\n        private _checkoutValidator: CheckoutValidator\n    ) {}\n\n    loadOrder(orderId: number, options?: RequestOptions): Observable<LoadOrderAction> {\n        return new Observable((observer: Observer<LoadOrderAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderFailed, response));\n                });\n        });\n    }\n\n    // TODO: Remove when checkout does not contain unrelated order data.\n    loadOrderPayments(orderId: number, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        return new Observable((observer: Observer<LoadOrderPaymentsAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderPaymentsRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderPaymentsSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderPaymentsFailed, response));\n                });\n        });\n    }\n\n    loadCurrentOrder(options?: RequestOptions): ThunkAction<LoadOrderAction, InternalCheckoutSelectors> {\n        return store => defer(() => {\n            const orderId = this._getCurrentOrderId(store.getState());\n\n            if (!orderId) {\n                throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n            }\n\n            return this.loadOrder(orderId, options);\n        });\n    }\n\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<SubmitOrderAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(OrderActionType.SubmitOrderRequested)),\n            defer(() => {\n                const state = store.getState();\n                const externalSource = state.config.getExternalSource();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                return from(\n                    this._checkoutValidator.validate(checkout, options)\n                        .then(() => this._orderRequestSender.submitOrder(this._mapToOrderRequestBody(payload, checkout.customerMessage, externalSource), options))\n                ).pipe(\n                    switchMap(response => concat(\n                        // TODO: Remove once we can submit orders using storefront API\n                        this.loadOrder(response.body.data.order.orderId, options),\n                        of(createAction(OrderActionType.SubmitOrderSucceeded, response.body.data, { ...response.body.meta, token: response.headers.token }))\n                    ))\n                );\n            }).pipe(\n                catchError(error => throwErrorAction(OrderActionType.SubmitOrderFailed, error))\n            )\n        );\n    }\n\n    finalizeOrder(orderId: number, options?: RequestOptions): Observable<FinalizeOrderAction | LoadOrderAction> {\n        return concat(\n            of(createAction(OrderActionType.FinalizeOrderRequested)),\n            from(this._orderRequestSender.finalizeOrder(orderId, options))\n                .pipe(\n                    switchMap(response => concat(\n                        this.loadOrder(orderId, options),\n                        of(createAction(OrderActionType.FinalizeOrderSucceeded, response.body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(OrderActionType.FinalizeOrderFailed, error))\n        );\n    }\n\n    private _getCurrentOrderId(state: InternalCheckoutSelectors): number | undefined {\n        const order = state.order.getOrder();\n        const checkout = state.checkout.getCheckout();\n\n        return (order && order.orderId) || (checkout && checkout.orderId);\n    }\n\n    private _mapToOrderRequestBody(payload: OrderRequestBody, customerMessage: string, externalSource?: string): InternalOrderRequestBody {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            return {\n                ...order,\n                customerMessage,\n                externalSource,\n            };\n        }\n\n        return {\n            ...order,\n            customerMessage,\n            externalSource,\n            payment: {\n                paymentData: payment.paymentData,\n                name: payment.methodId,\n                gateway: payment.gatewayId,\n            },\n        };\n    }\n}\n","import { isEqual } from 'lodash';\n\nimport { PartialDeep } from '../common/types';\n\nimport Cart from './cart';\n\nexport default class CartComparator {\n    isEqual(cartA: Cart, cartB: Cart): boolean {\n        return isEqual(\n            this._normalize(cartA),\n            this._normalize(cartB)\n        );\n    }\n\n    private _normalize(cart: Cart): PartialDeep<Cart> {\n        return {\n            cartAmount: cart.cartAmount,\n            currency: cart.currency,\n            id: cart.id,\n            lineItems: {\n                digitalItems: cart.lineItems.digitalItems.map(item => ({\n                    extendedSalePrice: item.extendedSalePrice,\n                    productId: item.productId,\n                    quantity: item.quantity,\n                    variantId: item.variantId,\n                })),\n                giftCertificates: cart.lineItems.giftCertificates.map(item => ({\n                    amount: item.amount,\n                    recipient: item.recipient,\n                })),\n                physicalItems: cart.lineItems.physicalItems.map(item => ({\n                    extendedSalePrice: item.extendedSalePrice,\n                    productId: item.productId,\n                    quantity: item.quantity,\n                    variantId: item.variantId,\n                    giftWrapping: item.giftWrapping,\n                })),\n            },\n        };\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ApplyCouponAction, CouponAction, CouponActionType, RemoveCouponAction } from './coupon-actions';\nimport CouponRequestSender from './coupon-request-sender';\n\nexport default class CouponActionCreator {\n    constructor(\n        private _couponRequestSender: CouponRequestSender\n    ) {}\n\n    applyCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.ApplyCouponRequested));\n\n            this._couponRequestSender.applyCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.ApplyCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.ApplyCouponFailed, response));\n                });\n        });\n    }\n\n    removeCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.RemoveCouponRequested));\n\n            this._couponRequestSender.removeCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.RemoveCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.RemoveCouponFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CheckoutDefaultIncludes } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nexport default class CouponRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: CheckoutDefaultIncludes.join(','),\n            },\n            body: { couponCode },\n        });\n    }\n\n    removeCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons/${couponCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: CheckoutDefaultIncludes.join(','),\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { Registry } from '../common/registry';\n\nimport CustomerCredentials from './customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from './customer-request-options';\nimport {\n    CustomerStrategyActionType,\n    CustomerStrategyDeinitializeAction,\n    CustomerStrategyInitializeAction,\n    CustomerStrategySignInAction,\n    CustomerStrategySignOutAction,\n    CustomerStrategyWidgetAction,\n} from './customer-strategy-actions';\nimport { CustomerStrategy } from './strategies';\n\nexport default class CustomerStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<CustomerStrategy>\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Observable<CustomerStrategySignInAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignInAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignInRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signIn(credentials, options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignInSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignInFailed, error, meta));\n                });\n        });\n    }\n\n    signOut(options?: CustomerRequestOptions): Observable<CustomerStrategySignOutAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignOutAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignOutRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signOut(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignOutSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignOutFailed, error, meta));\n                });\n        });\n    }\n\n    initialize(options?: CustomerInitializeOptions): Observable<CustomerStrategyInitializeAction> {\n        return Observable.create((observer: Observer<CustomerStrategyInitializeAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.InitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.InitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.InitializeFailed, error, meta));\n                });\n        });\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Observable<CustomerStrategyDeinitializeAction> {\n        return Observable.create((observer: Observer<CustomerStrategyDeinitializeAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.DeinitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.DeinitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.DeinitializeFailed, error, meta));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: CustomerRequestOptions): Observable<CustomerStrategyWidgetAction> {\n        return Observable.create((observer: Observer<CustomerStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(CustomerStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(CustomerStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar lodash_1 = require(\"lodash\");\nvar is_promise_1 = require(\"./is-promise\");\nvar timeout_1 = require(\"./timeout\");\nvar RequestSender = (function () {\n    function RequestSender(_requestFactory, _payloadTransformer, _cookie, _options) {\n        this._requestFactory = _requestFactory;\n        this._payloadTransformer = _payloadTransformer;\n        this._cookie = _cookie;\n        this._options = _options;\n    }\n    RequestSender.prototype.sendRequest = function (url, options) {\n        var _this = this;\n        var requestOptions = this._mergeDefaultOptions(options);\n        var request = this._requestFactory.createRequest(this._prependHost(url), requestOptions);\n        return new Promise(function (resolve, reject) {\n            var requestHandler = function () {\n                var response = _this._payloadTransformer.toResponse(request);\n                if (response.status >= 200 && response.status < 300) {\n                    resolve(response);\n                }\n                else {\n                    reject(response);\n                }\n            };\n            request.onload = requestHandler;\n            request.onerror = requestHandler;\n            request.onabort = requestHandler;\n            request.ontimeout = requestHandler;\n            if (requestOptions.timeout instanceof timeout_1.default) {\n                requestOptions.timeout.onComplete(function () { return request.abort(); });\n                requestOptions.timeout.start();\n            }\n            if (is_promise_1.default(requestOptions.timeout)) {\n                requestOptions.timeout.then(function () { return request.abort(); });\n            }\n            request.send(_this._payloadTransformer.toRequestBody(requestOptions));\n        });\n    };\n    RequestSender.prototype.get = function (url, options) {\n        return this.sendRequest(url, tslib_1.__assign({}, options, { method: 'GET' }));\n    };\n    RequestSender.prototype.post = function (url, options) {\n        return this.sendRequest(url, tslib_1.__assign({}, options, { method: 'POST' }));\n    };\n    RequestSender.prototype.put = function (url, options) {\n        return this.sendRequest(url, tslib_1.__assign({}, options, { method: 'PUT' }));\n    };\n    RequestSender.prototype.patch = function (url, options) {\n        return this.sendRequest(url, tslib_1.__assign({}, options, { method: 'PATCH' }));\n    };\n    RequestSender.prototype.delete = function (url, options) {\n        return this.sendRequest(url, tslib_1.__assign({}, options, { method: 'DELETE' }));\n    };\n    RequestSender.prototype._mergeDefaultOptions = function (options) {\n        var defaultOptions = {\n            credentials: true,\n            headers: {\n                Accept: 'application/json, text/plain, */*',\n                'Content-Type': 'application/json',\n            },\n            method: 'GET',\n        };\n        var csrfToken = this._cookie.get('XSRF-TOKEN');\n        if (csrfToken && defaultOptions.headers) {\n            defaultOptions.headers['X-XSRF-TOKEN'] = csrfToken;\n        }\n        return lodash_1.merge({}, defaultOptions, options);\n    };\n    RequestSender.prototype._prependHost = function (url) {\n        if (!this._options || !this._options.host || /^https?:\\/\\//.test(url)) {\n            return url;\n        }\n        return this._options.host.replace(/\\/$/, '') + \"/\" + url.replace(/^\\//, '');\n    };\n    return RequestSender;\n}());\nexports.default = RequestSender;\n//# sourceMappingURL=request-sender.js.map","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { from } from 'rxjs/observable/from';\nimport { of } from 'rxjs/observable/of';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\n\nimport { CustomerActionType, SignInCustomerAction, SignOutCustomerAction } from './customer-actions';\nimport CustomerCredentials from './customer-credentials';\nimport CustomerRequestSender from './customer-request-sender';\n\nexport default class CustomerActionCreator {\n    constructor(\n        private _customerRequestSender: CustomerRequestSender,\n        private _checkoutActionCreator: CheckoutActionCreator\n    ) {}\n\n    signInCustomer(\n        credentials: CustomerCredentials,\n        options?: RequestOptions\n    ): ThunkAction<SignInCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignInCustomerRequested)),\n            from(this._customerRequestSender.signInCustomer(credentials, options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignInCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignInCustomerFailed, error))\n        );\n    }\n\n    signOutCustomer(\n        options?: RequestOptions\n    ): ThunkAction<SignOutCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignOutCustomerRequested)),\n            from(this._customerRequestSender.signOutCustomer(options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignOutCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignOutCustomerFailed, error))\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport CustomerCredentials from './customer-credentials';\nimport { InternalCustomerResponseBody } from './internal-customer-responses';\n\nexport default class CustomerRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    signInCustomer(credentials: CustomerCredentials, { timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.post(url, { timeout, body: credentials });\n    }\n\n    signOutCustomer({ timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.delete(url, { timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { GiftCertificateRequestSender } from '.';\nimport { ApplyGiftCertificateAction, GiftCertificateActionType, RemoveGiftCertificateAction } from './gift-certificate-actions';\n\nexport default class GiftCertificateActionCreator {\n    constructor(\n        private _giftCertificateRequestSender: GiftCertificateRequestSender\n    ) {}\n\n    applyGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<ApplyGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.applyGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.ApplyGiftCertificateFailed, response));\n                });\n        });\n    }\n\n    removeGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<RemoveGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.removeGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.RemoveGiftCertificateFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CheckoutDefaultIncludes } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nexport default class GiftCertificateRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: CheckoutDefaultIncludes.join(','),\n            },\n            body: { giftCertificateCode },\n        });\n    }\n\n    removeGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates/${giftCertificateCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: CheckoutDefaultIncludes.join(','),\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport * as actionTypes from './shipping-country-action-types';\nimport ShippingCountryRequestSender from './shipping-country-request-sender';\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action<T>\n */\nexport default class ShippingCountryActionCreator {\n    constructor(\n        private _shippingCountryRequestSender: ShippingCountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.LOAD_SHIPPING_COUNTRIES_REQUESTED));\n\n            this._shippingCountryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(actionTypes.LOAD_SHIPPING_COUNTRIES_SUCCEEDED, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.LOAD_SHIPPING_COUNTRIES_FAILED, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\nimport { CountryResponseBody } from '../geography';\n\nexport default class ShippingCountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/shipping/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import StandardError from './standard-error';\n\nexport default class NotImplementedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Not implemented.');\n\n        this.type = 'not_implemented';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport CustomerCredentials from '../customer-credentials';\n\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../customer-request-options';\n\nexport default abstract class CustomerStrategy {\n    protected _isInitialized = false;\n\n    constructor(\n        protected _store: CheckoutStore\n    ) {}\n\n    abstract signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors>;\n\n    abstract signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors>;\n\n    initialize(options?: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = true;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = false;\n\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors} from '../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType, StandardError } from '../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../payment';\nimport { AmazonPayLoginButton, AmazonPayScriptLoader, AmazonPayWidgetError, AmazonPayWindow } from '../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../../remote-checkout';\nimport CustomerCredentials from '../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class AmazonPayCustomerStrategy extends CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        super(store);\n\n        this._window = window;\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const { onError = () => {} } = amazonOptions;\n                const onReady = () => {\n                    this._createSignInButton({\n                        ...amazonOptions,\n                        onError: error => {\n                            reject(error);\n                            onError(error);\n                        },\n                    });\n\n                    resolve();\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._paymentMethod = undefined;\n\n        return super.deinitialize(options);\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via AmazonPay, the shopper must click on \"Login with Amazon\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(options: AmazonPayCustomerInitializeOptions): AmazonPayLoginButton {\n        if (!this._paymentMethod || !this._window.OffAmazonPayments) {\n            throw new NotInitializedError(NotInitializedErrorType.CustomerNotInitialized);\n        }\n\n        if (!this._paymentMethod.config.merchantId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { initializationData } = this._paymentMethod;\n\n        return new this._window.OffAmazonPayments.Button(options.container, this._paymentMethod.config.merchantId, {\n            color: options.color || 'Gold',\n            size: options.size || 'small',\n            type: 'PwA',\n            useAmazonAddressBook: true,\n            onError: options.onError,\n            authorization: () => {\n                this._handleAuthorization(initializationData);\n            },\n        });\n    }\n\n    private _handleAuthorization(options: AuthorizationOptions): void {\n        this._remoteCheckoutRequestSender.generateToken()\n            .then(({ body }) => {\n                if (!this._window.amazon) {\n                    throw new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized);\n                }\n\n                this._window.amazon.Login.authorize({\n                    popup: false,\n                    scope: 'payments:shipping_address payments:billing_address payments:widget profile',\n                    state: `${options.tokenPrefix}${body.token}`,\n                }, options.redirectUrl);\n\n                this._remoteCheckoutRequestSender.trackAuthorizationEvent();\n            });\n    }\n}\n\n/**\n * A set of options that are required to initialize the customer step of\n * checkout to support Amazon Pay.\n *\n * When AmazonPay is initialized, a sign-in button will be inserted into the\n * DOM. When the customer clicks on it, they will be redirected to Amazon to\n * sign in.\n */\nexport interface AmazonPayCustomerInitializeOptions {\n    /**\n     * The ID of a container which the sign-in button should insert into.\n     */\n    container: string;\n\n    /**\n     * The colour of the sign-in button.\n     */\n    color?: 'Gold' | 'LightGray' | 'DarkGray';\n\n    /**\n     * The size of the sign-in button.\n     */\n    size?: 'small' | 'medium' | 'large' | 'x-large';\n\n    /**\n     * A callback that gets called if unable to initialize the widget or select\n     * one of the address options provided by the widget.\n     *\n     * @param error - The error object describing the failure.\n     */\n    onError?(error: AmazonPayWidgetError | StandardError): void;\n}\n\ninterface AuthorizationOptions {\n    redirectUrl: string;\n    tokenPrefix: string;\n}\n","import { CustomerStrategyActionCreator } from '..';\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../payment';\nimport { BraintreeVisaCheckoutPaymentProcessor } from '../../payment/strategies/braintree';\nimport { VisaCheckoutPaymentSuccessPayload } from '../../payment/strategies/braintree/visacheckout';\nimport VisaCheckoutScriptLoader from '../../payment/strategies/braintree/visacheckout-script-loader';\nimport { RemoteCheckoutActionCreator } from '../../remote-checkout';\nimport CustomerCredentials from '../customer-credentials';\nimport { CustomerInitializeOptions } from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class BraintreeVisaCheckoutCustomerStrategy extends CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _buttonClassName: string = 'visa-checkout-wrapper';\n\n    constructor(\n        store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    container,\n                    onError = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: true,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, initOptions]) => {\n                    const signInButton = this._createSignInButton(container, this._buttonClassName);\n\n                    visaCheckout.init(initOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (payment, error) => onError(error));\n\n                    return signInButton;\n                })\n                .then(signInButton => { signInButton.style.visibility = 'visible'; });\n            })\n            .then(() => super.initialize(options));\n    }\n\n    signIn(credentials: CustomerCredentials, options?: any): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via VisaCheckout, the shopper must click on \"Visa Checkout\" button.'\n        );\n    }\n\n    signOut(options?: any): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut('braintreevisacheckout', options)\n        );\n    }\n\n    deinitialize(options?: any): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._paymentMethod = undefined;\n\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => super.deinitialize(options));\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(\n            this._customerStrategyActionCreator.widgetInteraction(() => {\n                return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                    paymentSuccessPayload,\n                    state.shippingAddress.getShippingAddress(),\n                    state.billingAddress.getBillingAddress()\n                )\n                .then(() => this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _createSignInButton(containerId: string, buttonClass: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new Error('Need a container to place the button');\n        }\n\n        return (container.querySelector('.' + buttonClass) as HTMLElement) ||\n            this._insertVisaCheckoutButton(container, buttonClass);\n    }\n\n    private _insertVisaCheckoutButton(container: Element, buttonClass: string): HTMLElement {\n        const buttonSource = 'https://secure.checkout.visa.com/wallet-services-web/xo/button.png?acceptCanadianVisaDebit=false&cobrand=true&size=154';\n        const buttonTemplate = `\n            <img\n                alt=\"Visa Checkout\"\n                class=\"v-button\"\n                role=\"button\"\n                src=\"${buttonSource}\"\n                />\n            <a class=\"v-learn v-learn-default\" style=\"text-align: right; display: block; font-size: 10px; color: #003366;\" href=\"#\" data-locale=\"en_US\">Tell Me More</a>`;\n\n        const visaCheckoutButton = document.createElement('div');\n        visaCheckoutButton.style.visibility = 'hidden';\n        visaCheckoutButton.className = buttonClass;\n        visaCheckoutButton.innerHTML = buttonTemplate;\n\n        container.appendChild(visaCheckoutButton);\n        return visaCheckoutButton;\n    }\n}\n\nexport interface BraintreeVisaCheckoutCustomerInitializeOptions {\n    container: string;\n    onError?(error: Error): void;\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../common/error/errors';\nimport { toFormUrlEncoded } from '../../common/http-request';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../payment';\nimport { ChasePayScriptLoader } from '../../payment/strategies/chasepay';\nimport { ChasePaySuccessPayload } from '../../payment/strategies/chasepay/chasepay';\nimport { RemoteCheckoutActionCreator } from '../../remote-checkout';\nimport CustomerCredentials from '../customer-credentials';\nimport {CustomerInitializeOptions, CustomerRequestOptions} from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class ChasePayCustomerStrategy extends CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _requestSender: RequestSender,\n        private _formPoster: FormPoster\n    ) {\n        super(store);\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { chasepay: chasePayOptions, methodId } = options;\n\n        if (!chasePayOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.chasepay\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const cart = state.cart.getCart();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.digitalSessionId) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const { container } = chasePayOptions;\n\n                return this._chasePayScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(JPMC => {\n                        const ChasePay = JPMC.ChasePay;\n\n                        ChasePay.configure({\n                            language: storeConfig.storeProfile.storeLanguage,\n                        });\n\n                        if (ChasePay.isChasePayUp) {\n                            ChasePay.insertButtons({\n                                containers: [container],\n                            });\n                        }\n\n                        ChasePay.on(ChasePay.EventType.START_CHECKOUT, () => {\n                            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n                                .then(() => {\n                                    const state = this._store.getState();\n                                    const method = state.paymentMethods.getPaymentMethod(methodId);\n                                    const sessionId = method && method.initializationData && method.initializationData.digitalSessionId;\n\n                                    if (sessionId) {\n                                        ChasePay.startCheckout(sessionId);\n                                    }\n                                });\n                        });\n\n                        ChasePay.on(ChasePay.EventType.COMPLETE_CHECKOUT, (payload: ChasePaySuccessPayload) => {\n                            const state = this._store.getState();\n                            const method = state.paymentMethods.getPaymentMethod(methodId);\n                            const requestId = method && method.initializationData && method.initializationData.merchantRequestId;\n\n                            if (requestId) {\n                                this._setExternalCheckoutData(payload, requestId)\n                                    .then(() => {\n                                        this._reloadPage();\n                                });\n                            }\n                        });\n                    });\n            })\n            .then(() => super.initialize(options));\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Chase Pay®, the shopper must click on \"Chase Pay®\" button.'\n        );\n    }\n\n    signOut(options?: any): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _setExternalCheckoutData(payload: ChasePaySuccessPayload, requestId: string): Promise<Response> {\n        const url = `checkout.php?provider=chasepay&action=set_external_checkout`;\n        const options = {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: toFormUrlEncoded({\n                sessionToken: payload.sessionToken,\n                merchantRequestId: requestId,\n            }),\n            method: 'post',\n        };\n\n        return this._requestSender.sendRequest(url, options);\n    }\n\n    private _reloadPage() {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            params: {\n                fromChasePay: true,\n            },\n        });\n    }\n}\n\nexport interface ChasePayCustomerInitializeOptions {\n    container: string;\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { NotImplementedError} from '../../common/error/errors';\nimport { RemoteCheckoutActionCreator } from '../../remote-checkout';\nimport CustomerCredentials from '../customer-credentials';\nimport { CustomerRequestOptions } from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class SquareCustomerStrategy extends CustomerStrategy {\n\n    constructor(\n        store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator\n    ) {\n        super(store);\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: any): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotImplementedError\n} from '../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../payment';\nimport { MasterpassScriptLoader } from '../../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator } from '../../remote-checkout';\nimport CustomerCredentials from '../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class MasterpassCustomerStrategy extends CustomerStrategy {\n    private _signInButton?: HTMLElement;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { masterpass: masterpassOptions, methodId } = options;\n\n        if (!masterpassOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.masterpass\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const cart = state.cart.getCart();\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                const { container } = masterpassOptions;\n\n                const payload = {\n                    checkoutId: this._paymentMethod.initializationData.checkoutId,\n                    allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n                    amount: cart.cartAmount.toString(),\n                    currency: cart.currency.code,\n                    cartId: cart.id,\n                };\n\n                return this._masterpassScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(Masterpass => {\n                        this._signInButton = this._createSignInButton(container);\n\n                        this._signInButton.addEventListener('click', () => {\n                            Masterpass.checkout(payload);\n                        });\n                    });\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._paymentMethod = undefined;\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return super.deinitialize(options);\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        container.appendChild(button);\n\n        return button;\n    }\n}\n","import { CustomerCredentials, CustomerInitializeOptions, CustomerRequestOptions } from '../';\nimport { FormPoster } from '../../../node_modules/@bigcommerce/form-poster/lib';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../common/error/errors';\nimport { bindDecorator as bind } from '../../common/utility';\nimport { GooglePayAddress, GooglePayPaymentProcessor } from '../../payment/strategies/googlepay';\nimport { RemoteCheckoutActionCreator } from '../../remote-checkout';\n\nimport { CustomerStrategy } from './';\n\nexport default class GooglePayBraintreeCustomerStrategy extends CustomerStrategy {\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor,\n        private _formPoster: FormPoster\n    ) {\n        super(store);\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        const { googlepaybraintree, methodId }  = options;\n\n        if (!googlepaybraintree || !methodId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._googlePayPaymentProcessor.initialize(methodId)\n            .then(() => {\n                const walletButton = this._createSignInButton(googlepaybraintree.container);\n\n                if (walletButton) {\n                    this._walletButton = walletButton;\n                    this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                }\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize()\n            .then(() => super.deinitialize(options));\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Google Pay, the shopper must click on \"Google Pay\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const button = this._googlePayPaymentProcessor.createButton(() => this._handleWalletButtonClick);\n\n        container.appendChild(button);\n\n        return button;\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n\n    private _onError(error?: Error): void {\n        if (error && error.message !== 'CANCELED') {\n            throw new Error(error.message);\n        }\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        let shippingAddress: GooglePayAddress;\n\n        return this._googlePayPaymentProcessor.displayWallet()\n            .then(paymentData => {\n                shippingAddress = paymentData.shippingAddress;\n                this._googlePayPaymentProcessor.handleSuccess(paymentData);\n            })\n            .then(() =>  this._googlePayPaymentProcessor.updateShippingAddress(shippingAddress)\n            .then(() => this._onPaymentSelectComplete())\n            .catch(error => this._onError(error))\n        );\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport CustomerActionCreator from '../customer-action-creator';\nimport CustomerCredentials from '../customer-credentials';\nimport { CustomerRequestOptions } from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class DefaultCustomerStrategy extends CustomerStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _customerActionCreator: CustomerActionCreator\n    ) {\n        super(store);\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signInCustomer(credentials, options)\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signOutCustomer(options)\n        );\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport { createBraintreeVisaCheckoutPaymentProcessor, VisaCheckoutScriptLoader } from '../payment/strategies/braintree';\nimport { ChasePayScriptLoader } from '../payment/strategies/chasepay';\nimport { createGooglePayBraintreePaymentProcessor } from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport { CustomerActionCreator, CustomerRequestSender, CustomerStrategyActionCreator } from './';\nimport {\n    AmazonPayCustomerStrategy,\n    BraintreeVisaCheckoutCustomerStrategy,\n    ChasePayCustomerStrategy,\n    CustomerStrategy,\n    DefaultCustomerStrategy,\n    GooglePayBraintreeCustomerStrategy,\n    MasterpassCustomerStrategy,\n    SquareCustomerStrategy\n} from './strategies';\n\nexport default function createCustomerStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<CustomerStrategy> {\n    const registry = new Registry<CustomerStrategy>();\n    const scriptLoader = getScriptLoader();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutActionCreator = new CheckoutActionCreator(\n        checkoutRequestSender,\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n    const formPoster = createFormPoster();\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutRequestSender = new RemoteCheckoutRequestSender(requestSender);\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(remoteCheckoutRequestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            remoteCheckoutRequestSender,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('braintreevisacheckout', () =>\n        new BraintreeVisaCheckoutCustomerStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            new CustomerStrategyActionCreator(registry),\n            remoteCheckoutActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('chasepay', () =>\n        new ChasePayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new ChasePayScriptLoader(scriptLoader),\n            requestSender,\n            formPoster\n        )\n    );\n\n    registry.register('squarev2', () =>\n        new SquareCustomerStrategy(\n            store,\n            new RemoteCheckoutActionCreator(remoteCheckoutRequestSender)\n        )\n    );\n\n    registry.register('masterpass', () =>\n        new MasterpassCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('googlepaybraintree', () =>\n        new GooglePayBraintreeCustomerStrategy(\n            store,\n            remoteCheckoutActionCreator,\n            createGooglePayBraintreePaymentProcessor(store, scriptLoader),\n            formPoster\n        )\n    );\n\n    registry.register('default', () =>\n        new DefaultCustomerStrategy(\n            store,\n            new CustomerActionCreator(\n                new CustomerRequestSender(requestSender),\n                checkoutActionCreator\n            )\n        )\n    );\n\n    return registry;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class TimeoutError extends RequestError {\n    constructor(response?: Response) {\n        super(response, 'The request has timed out or aborted.');\n\n        this.type = 'timeout';\n    }\n}\n","/**\n * Decorates a class or a method by binding all its prototype methods or itself\n * to the calling instance respectively.\n */\nexport default function bindDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T>;\nexport default function bindDecorator<T extends Constructor<object>>(target: T): T;\nexport default function bindDecorator(target: any, key?: any, descriptor?: any): any {\n    if (!key || !descriptor) {\n        return bindClassDecorator(target);\n    }\n\n    return bindMethodDecorator(target, key, descriptor);\n}\n\n/**\n * Decorates a class by binding all its prototype methods to the calling\n * instance.\n */\nexport function bindClassDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                bindMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\n/**\n * Decorates a method by binding it to the calling instance.\n */\nexport function bindMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let method: T = descriptor.value;\n\n    return {\n        get() {\n            const boundMethod = method.bind(this);\n\n            Object.defineProperty(this, key, {\n                ...descriptor,\n                value: boundMethod,\n            });\n\n            return boundMethod;\n        },\n        set(value) {\n            method = value;\n        },\n    };\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\nexport type Method = (...args: any[]) => any;\n","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","module.exports = require(\"@bigcommerce/bigpay-client\");","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { ConfigRequestSender } from '.';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\n\nexport default class ConfigActionCreator {\n    constructor(\n        private _configRequestSender: ConfigRequestSender\n    ) {}\n\n    loadConfig(options?: RequestOptions): ThunkAction<LoadConfigAction> {\n        return store => Observable.create((observer: Observer<LoadConfigAction>) => {\n            const state = store.getState();\n            const config = state.config.getConfig();\n\n            if (config) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(ConfigActionType.LoadConfigRequested));\n\n            this._configRequestSender.loadConfig(options)\n                .then(response => {\n                    observer.next(createAction(ConfigActionType.LoadConfigSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConfigActionType.LoadConfigFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport Config from './config';\n\nexport default class ConfigRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadConfig({ timeout }: RequestOptions = {}): Promise<Response<Config>> {\n        const url = '/api/storefront/checkout-settings';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","export const INTERNAL_USE_ONLY = 'This API endpoint is for internal use only and may change in the future';\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentMethod,\n}\n\nexport default class MissingDataError extends StandardError {\n    constructor(\n        public subtype: MissingDataErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n    case MissingDataErrorType.MissingCart:\n        return 'Unable to proceed because cart data is unavailable.';\n\n    case MissingDataErrorType.MissingConsignments:\n        return 'Unable to proceed because consignments data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckout:\n        return 'Unable to proceed because checkout data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckoutConfig:\n    case MissingDataErrorType.MissingOrderConfig:\n        return 'Unable to proceed because configuration data is unavailable.';\n\n    case MissingDataErrorType.MissingOrder:\n        return 'Unable to proceed because order data is unavailable.';\n\n    case MissingDataErrorType.MissingOrderId:\n        return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n    case MissingDataErrorType.MissingPayment:\n        return 'Unable to proceed because payment data is unavailable.';\n\n    case MissingDataErrorType.MissingPaymentMethod:\n        return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n    default:\n        return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import { createErrorAction, Action } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { of } from 'rxjs/observable/of';\nimport { _throw } from 'rxjs/observable/throw';\nimport { Observable } from 'rxjs/Observable';\n\nexport default function throwErrorAction<TPayload, TMeta, TType extends string>(\n    type: TType,\n    error?: TPayload,\n    meta?: TMeta\n): Observable<Action<TPayload, TMeta, TType>> {\n    if (isErrorAction(error)) {\n        return concat(of(error), _throw(createErrorAction(type, error.payload, meta)));\n    }\n\n    return _throw(createErrorAction(type, error, meta));\n}\n\nfunction isErrorAction(action: any): action is Action {\n    return action && action.type && action.error;\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n}\n\nexport default class NotInitializedError extends StandardError {\n    constructor(\n        public subtype: NotInitializedErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n    case NotInitializedErrorType.CustomerNotInitialized:\n        return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.PaymentNotInitialized:\n        return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.ShippingNotInitialized:\n        return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n    default:\n        return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Response } from '@bigcommerce/request-sender';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { Checkout, InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { GuestCredentials } from '../customer';\n\nimport { BillingAddressRequestSender } from '.';\nimport { BillingAddressUpdateRequestBody } from './billing-address';\nimport { BillingAddressActionType, ContinueAsGuestAction, UpdateBillingAddressAction } from './billing-address-actions';\n\nexport default class BillingAddressActionCreator {\n    constructor(\n        private _requestSender: BillingAddressRequestSender\n    ) {}\n\n    continueAsGuest(\n        credentials: GuestCredentials,\n        options?: RequestOptions\n    ): ThunkAction<ContinueAsGuestAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ContinueAsGuestAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const customer = state.customer.getCustomer();\n\n            if (customer && !customer.isGuest) {\n                throw new StandardError('Cannot continue as guest: customer is logged in.');\n            }\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            let billingAddressRequestBody;\n\n            if (!billingAddress) {\n                billingAddressRequestBody = credentials;\n            } else {\n                const { country, ...existingBillingAddressRequestBody } = billingAddress;\n\n                billingAddressRequestBody = {\n                    ...existingBillingAddressRequestBody,\n                    ...credentials,\n                };\n            }\n\n            observer.next(createAction(BillingAddressActionType.ContinueAsGuestRequested));\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.ContinueAsGuestSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.ContinueAsGuestFailed, response));\n                });\n        });\n    }\n\n    updateAddress(\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): ThunkAction<UpdateBillingAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateBillingAddressAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(BillingAddressActionType.UpdateBillingAddressRequested));\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            // If email is not present in the address provided by the client, then\n            // fall back to the stored email as it could have been set separately\n            // using a convenience method. We can't rely on billingAddress having\n            // an ID to consider that there's a preexisting email, as billingAddress\n            // object from Order doesn't have an ID.\n            const billingAddressRequestBody = {\n                ...address,\n                email: typeof address.email === 'undefined' && billingAddress ? billingAddress.email : address.email,\n            };\n\n            if (billingAddress && billingAddress.id) {\n                billingAddressRequestBody.id = billingAddress.id;\n            }\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.UpdateBillingAddressSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.UpdateBillingAddressFailed, response));\n                });\n        });\n    }\n\n    private _createOrUpdateBillingAddress(\n        checkoutId: string,\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): Promise<Response<Checkout>> {\n        if (!address.id) {\n            return this._requestSender.createAddress(checkoutId, address, options);\n        }\n\n        return this._requestSender.updateAddress(checkoutId, address, options);\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../address';\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { BillingAddressUpdateRequestBody } from './billing-address';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class BillingAddressRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createAddress(checkoutId: string, address: Partial<AddressRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: address, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateAddress(checkoutId: string, address: Partial<BillingAddressUpdateRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = address;\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n}\n","import StandardError from './standard-error';\n\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.type = 'invalid_argument';\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nexport default class Registry<T> {\n    private _factories: { [key: string]: Factory<T> };\n    private _instances: { [key: string]: T };\n    private _options: RegistryOptions;\n\n    constructor(options?: RegistryOptions) {\n        this._factories = {};\n        this._instances = {};\n        this._options = { defaultToken: 'default', ...options };\n    }\n\n    get(token: string = this._options.defaultToken, cacheToken: string = token): T {\n        try {\n            return this._getInstance(token, cacheToken);\n        } catch (error) {\n            return this._getInstance(this._options.defaultToken, cacheToken);\n        }\n    }\n\n    register(token: string, factory: Factory<T>): void {\n        if (this.hasFactory(token)) {\n            throw new InvalidArgumentError(`'${token}' is already registered.`);\n        }\n\n        this._factories[token] = factory;\n    }\n\n    hasFactory(token: string): boolean {\n        return !!this._factories[token];\n    }\n\n    hasInstance(token: string): boolean {\n        return !!this._instances[token];\n    }\n\n    private _getInstance(token: string, cacheToken: string): T {\n        if (!this.hasInstance(cacheToken)) {\n            const factory = this._factories[token];\n\n            if (!factory) {\n                throw new InvalidArgumentError(`'${token}' is not registered.`);\n            }\n\n            this._instances[cacheToken] = factory();\n        }\n\n        return this._instances[cacheToken];\n    }\n}\n\nexport type Factory<T> = () => T;\n\nexport interface RegistryOptions {\n    defaultToken: string;\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadPaymentMethodsAction, LoadPaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\n\nexport default class PaymentMethodActionCreator {\n    constructor(\n        private _requestSender: PaymentMethodRequestSender\n    ) {}\n\n    loadPaymentMethods(options?: RequestOptions): Observable<LoadPaymentMethodsAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodsAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsRequested));\n\n            this._requestSender.loadPaymentMethods(options)\n                .then(response => {\n                    const meta = {\n                        deviceSessionId: response.headers['x-device-session-id'],\n                        sessionHash: response.headers['x-session-hash'],\n                    };\n\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsSucceeded, response.body, meta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodsFailed, response));\n                });\n        });\n    }\n\n    loadPaymentMethod(methodId: string, options?: RequestOptions): Observable<LoadPaymentMethodAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodRequested, undefined, { methodId }));\n\n            this._requestSender.loadPaymentMethod(methodId, options)\n                .then(response => {\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodSucceeded, response.body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodFailed, response, { methodId }));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport PaymentMethod from './payment-method';\n\nexport default class PaymentMethodRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadPaymentMethods({ timeout }: RequestOptions = {}): Promise<Response<PaymentMethod[]>> {\n        const url = '/api/storefront/payments';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n\n    loadPaymentMethod(methodId: string, { timeout }: RequestOptions = {}): Promise<Response<PaymentMethod>> {\n        const url = `/api/storefront/payments/${methodId}`;\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class RemoteCheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    initializeBilling(methodName: string, params: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/billing`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializeShipping(methodName: string, params: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/shipping`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializePayment(methodName: string, params: InitializePaymentOptions, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/payment`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    loadSettings(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/settings`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    signOut(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/signout`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    generateToken({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout-token';\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    trackAuthorizationEvent({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout/events/shopper-checkout-service-provider-authorization-requested';\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n\nexport interface InitializePaymentOptions {\n    authorizationToken?: string;\n    customerMessage?: string;\n    referenceId?: string;\n    useStoreCredit?: boolean;\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport * as actionTypes from './remote-checkout-action-types';\nimport RemoteCheckoutRequestSender, { InitializePaymentOptions } from './remote-checkout-request-sender';\nimport { RemoteCheckoutStateData } from './remote-checkout-state';\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action<T>\n */\nexport default class RemoteCheckoutActionCreator {\n    constructor(\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender\n    ) {}\n\n    initializeBilling(methodId: string, params: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.INITIALIZE_REMOTE_BILLING_REQUESTED, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeBilling(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(actionTypes.INITIALIZE_REMOTE_BILLING_SUCCEEDED, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.INITIALIZE_REMOTE_BILLING_FAILED, response, { methodId }));\n                });\n        });\n    }\n\n    initializeShipping(methodId: string, params: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.INITIALIZE_REMOTE_SHIPPING_REQUESTED, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeShipping(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(actionTypes.INITIALIZE_REMOTE_SHIPPING_SUCCEEDED, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.INITIALIZE_REMOTE_SHIPPING_FAILED, response, { methodId }));\n                });\n        });\n    }\n\n    initializePayment(methodId: string, params: InitializePaymentOptions, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.INITIALIZE_REMOTE_PAYMENT_REQUESTED, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializePayment(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(actionTypes.INITIALIZE_REMOTE_PAYMENT_SUCCEEDED, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.INITIALIZE_REMOTE_PAYMENT_FAILED, response, { methodId }));\n                });\n        });\n    }\n\n    loadSettings(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.LOAD_REMOTE_SETTINGS_REQUESTED, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.loadSettings(methodId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(actionTypes.LOAD_REMOTE_SETTINGS_SUCCEEDED, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.LOAD_REMOTE_SETTINGS_FAILED, response, { methodId }));\n                });\n        });\n    }\n\n    signOut(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.SIGN_OUT_REMOTE_CUSTOMER_REQUESTED, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.signOut(methodId, options)\n                .then(() => {\n                    observer.next(createAction(actionTypes.SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.SIGN_OUT_REMOTE_CUSTOMER_FAILED, response, { methodId }));\n                });\n        });\n    }\n\n    updateCheckout<K extends keyof RemoteCheckoutStateData>(methodId: K, data: Partial<RemoteCheckoutStateData[K]>): Action {\n        return createAction(actionTypes.UPDATE_REMOTE_CHECKOUT, data, { methodId });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayScriptLoader {\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadWidget(method: PaymentMethod, onPaymentReady?: () => void): Promise<Event> {\n        const {\n            config: { merchantId, testMode },\n            initializationData: { region = 'us' } = {},\n        } = method;\n\n        const url = 'https://' +\n            (region.toLowerCase() !== 'us' ? 'static-eu.' : 'static-na.') +\n            'payments-amazon.com/OffAmazonPayments/' +\n            `${region.toLowerCase()}/` +\n            (testMode ? 'sandbox/' : '') +\n            (region.toLowerCase() !== 'us' ? 'lpa/' : '') +\n            `js/Widgets.js?sellerId=${merchantId}`;\n\n        this._configureWidget(method, onPaymentReady);\n\n        return this._scriptLoader.loadScript(url);\n    }\n\n    private _configureWidget(method: PaymentMethod, onPaymentReady?: () => void): void {\n        const onLoginReady = () => {\n            if (!this._window.amazon) {\n                return;\n            }\n\n            this._window.amazon.Login.setClientId(method.initializationData.clientId);\n            this._window.amazon.Login.setUseCookie(true);\n        };\n\n        if (this._window.amazon && this._window.amazon.Login) {\n            onLoginReady();\n        } else {\n            this._window.onAmazonLoginReady = onLoginReady;\n        }\n\n        if (this._window.OffAmazonPayments && onPaymentReady) {\n            onPaymentReady();\n        } else {\n            this._window.onAmazonPaymentsReady = onPaymentReady;\n        }\n    }\n}\n","export default function toFormUrlEncoded(data: { [key: string]: object | string | undefined }): string {\n    return Object.keys(data)\n        .filter(key => data[key] !== undefined)\n        .map(key => {\n            const value = data[key];\n\n            if (typeof value === 'string') {\n                return `${key}=${encodeURIComponent(value)}`;\n            }\n\n            return `${key}=${encodeURIComponent(JSON.stringify(value) || '')}`;\n        })\n        .join('&');\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar create_request_sender_1 = require(\"./create-request-sender\");\nexports.createRequestSender = create_request_sender_1.default;\nvar create_timeout_1 = require(\"./create-timeout\");\nexports.createTimeout = create_timeout_1.default;\nvar request_sender_1 = require(\"./request-sender\");\nexports.RequestSender = request_sender_1.default;\nvar timeout_1 = require(\"./timeout\");\nexports.Timeout = timeout_1.default;\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar cookie = require(\"js-cookie\");\nvar payload_transformer_1 = require(\"./payload-transformer\");\nvar request_factory_1 = require(\"./request-factory\");\nvar request_sender_1 = require(\"./request-sender\");\nfunction createRequestSender(options) {\n    return new request_sender_1.default(new request_factory_1.default(), new payload_transformer_1.default(), cookie, options);\n}\nexports.default = createRequestSender;\n//# sourceMappingURL=create-request-sender.js.map","module.exports = require(\"js-cookie\");","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar JSON_CONTENT_TYPE_REGEXP = /application\\/(\\w+\\+)?json/;\nvar PayloadTransformer = (function () {\n    function PayloadTransformer() {\n    }\n    PayloadTransformer.prototype.toRequestBody = function (options) {\n        var contentType = options.headers ? this._getHeader(options.headers, 'Content-Type') : '';\n        if (options.body && JSON_CONTENT_TYPE_REGEXP.test(contentType)) {\n            return JSON.stringify(options.body);\n        }\n        return options.body;\n    };\n    PayloadTransformer.prototype.toResponse = function (xhr) {\n        var headers = this._parseResponseHeaders(xhr.getAllResponseHeaders());\n        var body = this._parseResponseBody('response' in xhr ? xhr.response : xhr.responseText, headers);\n        return {\n            body: body,\n            headers: headers,\n            status: xhr.status,\n            statusText: xhr.statusText,\n        };\n    };\n    PayloadTransformer.prototype._parseResponseBody = function (body, headers) {\n        var contentType = this._getHeader(headers, 'Content-Type');\n        if (body && JSON_CONTENT_TYPE_REGEXP.test(contentType)) {\n            return JSON.parse(body);\n        }\n        return body;\n    };\n    PayloadTransformer.prototype._parseResponseHeaders = function (rawHeaders) {\n        var lines = rawHeaders ? rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ').split(/\\r?\\n/) : [];\n        return lines.reduce(function (headers, line) {\n            var _a;\n            var parts = line.split(':');\n            var key = (parts.shift() || '').trim();\n            if (!key) {\n                return headers;\n            }\n            return tslib_1.__assign({}, headers, (_a = {}, _a[key.toLowerCase()] = parts.join(':').trim(), _a));\n        }, {});\n    };\n    PayloadTransformer.prototype._getHeader = function (headers, key) {\n        if (!headers || !key) {\n            return '';\n        }\n        return headers[key] || headers[key.toLowerCase()] || '';\n    };\n    return PayloadTransformer;\n}());\nexports.default = PayloadTransformer;\n//# sourceMappingURL=payload-transformer.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar queryString = require(\"query-string\");\nvar RequestFactory = (function () {\n    function RequestFactory() {\n    }\n    RequestFactory.prototype.createRequest = function (url, options) {\n        var xhr = new XMLHttpRequest();\n        this._configureRequest(xhr, url, options);\n        return xhr;\n    };\n    RequestFactory.prototype._configureRequest = function (xhr, url, options) {\n        if (options === void 0) { options = {}; }\n        xhr.open(options.method || 'GET', this._formatUrl(url, options.params), true);\n        if (options.headers) {\n            this._configureRequestHeaders(xhr, options.headers);\n        }\n        if (typeof options.credentials === 'boolean') {\n            xhr.withCredentials = options.credentials;\n        }\n        if (typeof options.timeout === 'number') {\n            xhr.timeout = options.timeout;\n        }\n    };\n    RequestFactory.prototype._configureRequestHeaders = function (xhr, headers) {\n        Object.keys(headers).forEach(function (key) {\n            xhr.setRequestHeader(key, headers[key]);\n        });\n    };\n    RequestFactory.prototype._formatUrl = function (url, params) {\n        if (!params || Object.keys(params).length === 0) {\n            return url;\n        }\n        return url + \"?\" + queryString.stringify(params);\n    };\n    return RequestFactory;\n}());\nexports.default = RequestFactory;\n//# sourceMappingURL=request-factory.js.map","module.exports = require(\"query-string\");","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction isPromise(promise) {\n    return !!promise &&\n        (typeof promise === 'object' || typeof promise === 'function') &&\n        typeof promise.then === 'function';\n}\nexports.default = isPromise;\n//# sourceMappingURL=is-promise.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar timeout_1 = require(\"./timeout\");\nfunction createTimeout(delay) {\n    return new timeout_1.default(delay);\n}\nexports.default = createTimeout;\n//# sourceMappingURL=create-timeout.js.map","import { Checkout } from '../../../checkout';\nimport {\n    MissingDataError,\n    MissingDataErrorType\n} from '../../../common/error/errors';\nimport StandardError from '../../../common/error/errors/standard-error';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeSDKCreator, GooglePayBraintreeSDK } from '../braintree';\n\nimport {\n    GooglePaymentData,\n    GooglePayBraintreeDataRequest,\n    GooglePayBraintreePaymentDataRequestV1,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload\n} from './googlepay';\n\nexport default class GooglePayBraintreeInitializer implements GooglePayInitializer {\n    private _googlePaymentInstance!: GooglePayBraintreeSDK;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator\n    ) {}\n\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        if (!paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return this._braintreeSDKCreator.getGooglePaymentComponent()\n            .then(googleBraintreePaymentInstance => {\n                this._googlePaymentInstance = googleBraintreePaymentInstance;\n\n                return this._createGooglePayPayload(\n                    checkout,\n                    paymentMethod.initializationData,\n                    hasShippingAddress);\n            }).catch((error: Error) => {\n                throw new StandardError(error.message);\n            });\n    }\n\n    teardown(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        try {\n            const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token).androidPayCards[0];\n\n            return Promise.resolve({\n                nonce: payload.nonce,\n                type: payload.type,\n                description: payload.description,\n                details: {\n                    cardType: payload.details.cardType,\n                    lastFour: payload.details.lastFour,\n                    lastTwo: payload.details.lastTwo,\n                },\n                binData: payload.binData,\n            });\n        } catch (err) {\n            return Promise.reject(err);\n        }\n    }\n\n    private _createGooglePayPayload(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        if (!initializationData.platformToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const googlePayBraintreePaymentDataRequest: GooglePayBraintreeDataRequest = {\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantName: initializationData.merchantName,\n                merchantId: initializationData.merchantId,\n            },\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: checkout.grandTotal.toString(),\n            },\n            cardRequirements: {\n                billingAddressRequired: true,\n                billingAddressFormat: 'FULL',\n            },\n            shippingAddressRequired: !hasShippingAddress,\n            emailRequired: true,\n            phoneNumberRequired: true,\n        };\n\n        return this._mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(\n            this._googlePaymentInstance.createPaymentDataRequest(googlePayBraintreePaymentDataRequest)\n        );\n    }\n\n    private _mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(googlePayBraintreeDataRequestV1: GooglePayBraintreePaymentDataRequestV1): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: googlePayBraintreeDataRequestV1.merchantInfo.authJwt,\n                merchantId: googlePayBraintreeDataRequestV1.merchantInfo.googleMerchantId,\n                merchantName: googlePayBraintreeDataRequestV1.merchantInfo.googleMerchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: googlePayBraintreeDataRequestV1.cardRequirements.allowedCardNetworks,\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: 'FULL',\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'braintree',\n                        'braintree:apiVersion': 'v1',\n                        'braintree:authorizationFingerprint': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:authorizationFingerprint'],\n                        'braintree:merchantId': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:merchantId'],\n                        'braintree:sdkVersion': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:sdkVersion'],\n                    },\n                },\n            }],\n            transactionInfo: googlePayBraintreeDataRequestV1.transactionInfo,\n            emailRequired: true,\n            shippingAddressRequired: googlePayBraintreeDataRequestV1.shippingAddressRequired,\n            shippingAddressParameters: {\n                phoneNumberRequired: googlePayBraintreeDataRequestV1.phoneNumberRequired,\n            },\n        };\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class RemoteCheckoutSynchronizationError extends StandardError {\n    constructor(\n        public error?: Error\n    ) {\n        super('Unable to synchronize your checkout details with a third party provider. Please try again later.');\n\n        this.type = 'remote_checkout_synchronization';\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { GooglePayHostWindow, GooglePaySDK } from './googlepay';\n\nexport default class GooglePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GooglePayHostWindow = window\n    ) {}\n\n    load(): Promise<GooglePaySDK> {\n        return this._scriptLoader\n            .loadScript('https://pay.google.com/gp/p/js/pay.js')\n            .then(() => {\n                if (!this._window.google) {\n                    throw new StandardError();\n                }\n\n                return this._window.google;\n            });\n    }\n}\n","module.exports = require(\"rxjs/observable/empty\");","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalScriptLoader {\n    private _window: PaypalHostWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadPaypal(): Promise<PaypalSDK> {\n        return this._scriptLoader\n            .loadScript('//www.paypalobjects.com/api/checkout.min.js')\n            .then(() => {\n                if (!this._window.paypal) {\n                    throw new StandardError();\n                }\n\n                return this._window.paypal;\n            });\n    }\n}\n","module.exports = require(\"rxjs\");","module.exports = require(\"messageformat\");","/// <reference path=\"./messageformat.d.ts\" />\nimport { isObject, union } from 'lodash';\nimport * as MessageFormat from 'messageformat';\n\nimport Logger from '../common/log/logger';\n\nimport LanguageConfig, { Locales, Translations } from './language-config';\n\nconst DEFAULT_LOCALE = 'en';\nconst KEY_PREFIX = 'optimized_checkout';\n\n/**\n * Responsible for getting language strings.\n *\n * This object can be used to retrieve language strings that are most\n * appropriate for a given locale.\n *\n * The language strings provided to the object should follow [ICU\n * MessageFormat](http://userguide.icu-project.org/formatparse/messages) syntax.\n */\nexport default class LanguageService {\n    private _locale: string;\n    private _locales: Locales;\n    private _translations: Translations;\n    private _formatters: { [key: string]: any };\n\n    /**\n     * @internal\n     */\n    constructor(\n        config: Partial<LanguageConfig>,\n        private _logger: Logger\n    ) {\n        const { locale, locales, translations } = this._transformConfig(config);\n\n        this._locale = locale;\n        this._locales = locales;\n        this._translations = translations;\n        this._formatters = {};\n    }\n\n    /**\n     * Remaps a set of language strings with a different set of keys.\n     *\n     * ```js\n     * service.mapKeys({\n     *     'new_key': 'existing_key',\n     * });\n     *\n     * console.log(service.translate('new_key'));\n     * ```\n     *\n     * @param maps - The set of language strings.\n     */\n    mapKeys(maps: { [key: string]: string }): void {\n        Object.keys(maps).forEach(key => {\n            const translationKey = `${KEY_PREFIX}.${maps[key]}`;\n\n            this._translations[`${KEY_PREFIX}.${key}`] = this._translations[translationKey];\n        });\n    }\n\n    /**\n     * Gets the preferred locale of the current customer.\n     *\n     * @returns The preferred locale code.\n     */\n    getLocale(): string {\n        return this._hasTranslations() ? this._locale : DEFAULT_LOCALE;\n    }\n\n    /**\n     * Gets a language string by a key.\n     *\n     * ```js\n     * service.translate('language_key');\n     * ```\n     *\n     * If the language string contains a placeholder, you can replace it by\n     * providing a second argument.\n     *\n     * ```js\n     * service.translate('language_key', { placeholder: 'Hello' });\n     * ```\n     *\n     * @param key - The language key.\n     * @param data - Data for replacing placeholders in the language string.\n     * @returns The translated language string.\n     */\n    translate(key: string, data: TranslationData = {}): string {\n        const prefixedKey = `${KEY_PREFIX}.${key}`;\n\n        if (typeof this._translations[prefixedKey] !== 'string') {\n            this._logger.warn(`Translation key \"${prefixedKey}\" is missing`);\n\n            return prefixedKey;\n        }\n\n        if (!this._formatters[prefixedKey]) {\n            const messageFormat = new MessageFormat(this._locales[prefixedKey]);\n\n            this._formatters[prefixedKey] = messageFormat.compile(this._translations[prefixedKey] || '');\n        }\n\n        return this._formatters[prefixedKey](this._transformData(data));\n    }\n\n    private _transformConfig(config: Partial<LanguageConfig> = {}): LanguageConfig {\n        const output: LanguageConfig = {\n            defaultTranslations: {},\n            translations: {},\n            locales: {},\n            locale: config.locale || DEFAULT_LOCALE,\n        };\n\n        const locales = config.locales || {};\n        const translations = this._flattenObject(config.translations || {});\n        const defaultTranslations = this._flattenObject(config.defaultTranslations || {});\n        const translationKeys = union(Object.keys(defaultTranslations), Object.keys(translations));\n\n        translationKeys.forEach(key => {\n            if (translations && translations[key]) {\n                output.translations[key] = translations[key];\n                output.locales[key] = locales[key] || output.locale;\n            } else {\n                output.translations[key] = defaultTranslations[key];\n                output.locales[key] = DEFAULT_LOCALE;\n            }\n        });\n\n        return output;\n    }\n\n    private _flattenObject(object: Translations, result: Translations = {}, parentKey: string = ''): Translations {\n        try {\n            Object.keys(object).forEach(key => {\n                const value = object[key];\n                const resultKey = parentKey ? `${parentKey}.${key}` : key;\n\n                if (isObject(value)) {\n                    return this._flattenObject(value as Translations, result, resultKey);\n                }\n\n                result[resultKey] = value;\n            });\n        } catch (err) {\n            this._logger.warn(`Unable to parse object: ${err}`);\n        }\n\n        return result;\n    }\n\n    private _transformData(data: TranslationData): TranslationData {\n        return Object.keys(data).reduce((result, key) => {\n            const value = data[key];\n\n            result[key] = value === null || value === undefined ? '' : value;\n\n            return result;\n        }, {} as TranslationData);\n    }\n\n    private _hasTranslations(): boolean {\n        return Object.keys(this._locales).map(key => this._locales[key])\n            .filter(code => code.split('-')[0] === this._locale.split('-')[0])\n            .length > 0;\n    }\n}\n\nexport interface TranslationData {\n    [key: string]: string | number;\n}\n","import { getDefaultLogger } from '../common/log';\n\nimport LanguageConfig from './language-config';\nimport LanguageService from './language-service';\n\n/**\n * Creates an instance of `LanguageService`.\n *\n * ```js\n * const language = {{{langJson 'optimized_checkout'}}}; // `langJson` is a Handlebars helper provided by BigCommerce's Stencil template engine.\n * const service = createLanguageService(language);\n *\n * console.log(service.translate('address.city_label'));\n * ```\n *\n * @param config - A configuration object.\n * @returns An instance of `LanguageService`.\n */\nexport default function createLanguageService(config: Partial<LanguageConfig> = {}): LanguageService {\n    return new LanguageService(\n        config,\n        getDefaultLogger()\n    );\n}\n","import { InvalidArgumentError } from '../common/error/errors';\n\nimport { CurrencyConfig } from './currency';\n\nexport default class CurrencyFormatter {\n    private _decimalPlaces: number;\n    private _symbolLocation: string;\n    private _symbol: string;\n    private _thousandsSeparator: string;\n    private _decimalSeparator: string;\n\n    constructor(\n        currencySettings: CurrencyConfig\n    ) {\n        if (!currencySettings) {\n            throw new Error('Currency settings missing');\n        }\n\n        const {\n            decimalPlaces,\n            symbolLocation,\n            symbol,\n            thousandsSeparator,\n            decimalSeparator,\n        } = currencySettings;\n\n        if (\n            typeof symbolLocation !== 'string' ||\n            typeof symbol !== 'string' ||\n            typeof thousandsSeparator !== 'string' ||\n            typeof decimalSeparator !== 'string' ||\n            typeof decimalPlaces !== 'string'\n        ) {\n            throw new InvalidArgumentError('Invalid currency settings provided');\n        }\n\n        this._decimalPlaces = parseInt(decimalPlaces, 10);\n        this._symbolLocation = symbolLocation;\n        this._symbol = symbol;\n        this._thousandsSeparator = thousandsSeparator;\n        this._decimalSeparator = decimalSeparator;\n    }\n\n    format(amount?: number): string {\n        if (typeof amount !== 'number') {\n            throw new InvalidArgumentError('Invalid amount provided');\n        }\n\n        const formattedNumber = this._formatNumber(amount);\n\n        const formattedCurrency = this._formatCurrency(formattedNumber);\n\n        return amount < 0 ?\n            `-${formattedCurrency}` :\n            formattedCurrency;\n    }\n\n    private _formatNumber(amount: number): string {\n        const positiveAmount = Math.abs(amount);\n        const [ integerAmount, decimalAmount = '' ] = positiveAmount.toString().split('.');\n        const parsedIntegerAmount = integerAmount.replace(/\\B(?=(\\d{3})+(?!\\d))/g, this._thousandsSeparator);\n\n        if (this._decimalPlaces < 1) {\n            return parsedIntegerAmount;\n        }\n\n        let decimalPadding = '';\n\n        for (let i = 0; i < this._decimalPlaces; i += 1) {\n            decimalPadding += '0';\n        }\n\n        return [\n            parsedIntegerAmount,\n            `${decimalAmount}${decimalPadding}`.slice(0, this._decimalPlaces),\n        ].join(this._decimalSeparator);\n    }\n\n    private _formatCurrency(formattedNumber: string): string {\n        return (this._symbolLocation.toLowerCase() === 'left') ?\n            `${this._symbol}${formattedNumber}` :\n            `${formattedNumber}${this._symbol}`;\n    }\n}\n","import { StoreConfig } from '../config';\n\nimport CurrencyFormatter from './currency-formatter';\n\n/**\n * Responsible for formatting and converting currencies.\n */\nexport default class CurrencyService {\n    private _customerFormatter: CurrencyFormatter;\n    private _storeFormatter: CurrencyFormatter;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _storeConfig: StoreConfig\n    ) {\n        this._customerFormatter = new CurrencyFormatter(this._storeConfig.shopperCurrency);\n        this._storeFormatter = new CurrencyFormatter(this._storeConfig.currency);\n    }\n\n    toCustomerCurrency(amount: number): string {\n        const exchangeRate = parseFloat(this._storeConfig.shopperCurrency.exchangeRate);\n        return this._customerFormatter.format(amount * exchangeRate);\n    }\n\n    toStoreCurrency(amount: number): string {\n        return this._storeFormatter.format(amount);\n    }\n}\n","import { StoreConfig } from '../config';\n\nimport CurrencyService from './currency-service';\n\n/**\n * Creates an instance of `CurrencyService`.\n *\n * ```js\n * const { data } = checkoutService.getState();\n * const config = data.getConfig();\n * const checkout = data.getCheckout();\n * const currencyService = createCurrencyService(config);\n *\n * currencyService.toStoreCurrency(checkout.grandTotal);\n * currencyService.toCustomerCurrency(checkout.grandTotal);\n * ```\n *\n * Please note that `CurrencyService` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @alpha\n * @param config - The config object containing the currency configuration\n * @returns an instance of `CurrencyService`.\n */\nexport default function createCurrencyService(\n    config: StoreConfig\n): CurrencyService {\n    return new CurrencyService(config);\n}\n","import { PaymentMethod } from '../..';\nimport { Checkout } from '../../../checkout';\nimport { BraintreeModuleCreator, GooglePayBraintreeSDK } from '../braintree';\n\nexport type EnvironmentType = 'PRODUCTION' | 'TEST';\ntype AddressFormat = 'FULL' | 'MIN';\ntype TotalPriceStatus = 'ESTIMATED' | 'FINAL' | 'NOT_CURRENTLY_KNOWN';\ntype TokenizeType = 'AndroidPayCard' | 'CreditCard';\n\nexport interface GooglePayInitializer {\n    initialize(checkout: Checkout, paymentMethod: PaymentMethod, hasShippingAddress: boolean, publishableKey?: string): Promise<GooglePayPaymentDataRequestV2>;\n    teardown(): Promise<void>;\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload>;\n}\n\nexport interface GooglePayCreator extends BraintreeModuleCreator<GooglePayBraintreeSDK> {}\n\nexport interface GooglePayPaymentOptions {\n    environment: EnvironmentType;\n}\n\nexport interface GooglePayBraintreeDataRequest {\n    merchantInfo: {\n        authJwt?: string,\n        merchantId?: string,\n        merchantName?: string,\n    };\n    transactionInfo: {\n        currencyCode: string,\n        totalPriceStatus: TotalPriceStatus,\n        totalPrice: string,\n    };\n    cardRequirements: {\n        billingAddressRequired: boolean,\n        billingAddressFormat: AddressFormat,\n    };\n    emailRequired: boolean;\n    phoneNumberRequired: boolean;\n    shippingAddressRequired: boolean;\n}\n\nexport interface GooglePayBraintreePaymentDataRequestV1 {\n    allowedPaymentMethods: string[];\n    apiVersion: number;\n    cardRequirements: {\n        allowedCardNetworks: string[];\n        billingAddressFormat: string;\n        billingAddressRequired: boolean;\n    };\n    enviroment: string;\n    i: {\n        googleTransactionId: string;\n        startTimeMs: number;\n    };\n    merchantInfo: {\n        googleMerchantId: string;\n        googleMerchantName: string;\n        authJwt?: string;\n    };\n    paymentMethodTokenizationParameters: {\n        parameters: {\n            'braintree:apiVersion': string;\n            'braintree:authorizationFingerprint': string;\n            'braintree:merchantId': string;\n            'braintree:metadata': string;\n            'braintree:sdkVersion': string;\n            gateway: string;\n        };\n        tokenizationType: string;\n    };\n    shippingAddressRequired: boolean;\n    phoneNumberRequired: boolean;\n    transactionInfo: {\n        currencyCode: string;\n        totalPrice: string;\n        totalPriceStatus: string;\n    };\n}\n\nexport interface GooglePayIsReadyToPayResponse {\n    result: boolean;\n    paymentMethodPresend?: boolean;\n}\n\nexport interface GooglePaySDK {\n    payments: {\n        api: {\n            PaymentsClient: {\n                new(options: GooglePayPaymentOptions): GooglePayClient;\n            },\n        },\n    };\n}\n\nexport interface GooglePayClient {\n    isReadyToPay(options: object): Promise<GooglePayIsReadyToPayResponse>;\n    loadPaymentData(paymentDataRequest: GooglePayPaymentDataRequestV2): Promise<GooglePaymentData>;\n    createButton(options: { [key: string]: string | object }): HTMLElement;\n}\n\nexport interface GooglePayHostWindow extends Window {\n    google?: GooglePaySDK;\n}\n\nexport interface TokenizePayload {\n    nonce: string;\n    details: {\n        cardType: string;\n        lastFour: string;\n        lastTwo?: string;\n    };\n    description?: string;\n    type: TokenizeType;\n    binData?: {\n        commercial: string;\n        countryOfIssuance: string;\n        debit: string;\n        durbinRegulated: string;\n        healthcare: string;\n        issuingBank: string;\n        payroll: string;\n        prepaid: string;\n        productId: string;\n    };\n}\n\nexport interface GooglePaymentData {\n    apiVersion: number;\n    apiVersionMinor: number;\n    paymentMethodData: {\n        description: string;\n        info: {\n            cardDetails: string;\n            cardNetwork: string;\n            billingAddress: GooglePayAddress;\n        };\n        tokenizationData: {\n            token: string;\n            type: string;\n        }\n        type: string;\n    };\n    shippingAddress: GooglePayAddress;\n    email: string;\n}\n\nexport interface GooglePayAddress {\n    address1: string;\n    address2: string;\n    address3: string;\n    administrativeArea: string;\n    companyName: string;\n    countryCode: string;\n    locality: string;\n    name: string;\n    postalCode: string;\n    sortingCode: string;\n    phoneNumber: string;\n}\n\nexport interface GooglePaymentsError {\n    statusCode: string;\n    statusMessage?: string;\n}\n\nexport interface PaymentMethodData {\n    methodId: string;\n    paymentData: {\n        method: string,\n        nonce: string,\n        cardInformation: {\n            type: string,\n            number: string,\n        },\n    };\n}\n\nexport enum ButtonType {\n    Long = 'long',\n    Short = 'short',\n}\nexport enum ButtonColor {\n    Default = 'default',\n    Black = 'black',\n    White = 'white',\n}\n\nexport interface GooglePayPaymentDataRequestV2 {\n    apiVersion: number;\n    apiVersionMinor: number;\n    merchantInfo: {\n        authJwt?: string;\n        merchantId?: string;\n        merchantName?: string;\n    };\n    allowedPaymentMethods: [{\n        type: string;\n        parameters: {\n            allowedAuthMethods: string[];\n            allowedCardNetworks: string[];\n            allowPrepaidCards?: boolean;\n            billingAddressRequired?: boolean;\n            billingAddressParameters?: {\n                format?: string;\n                phoneNumberRequired?: boolean;\n            };\n        },\n        tokenizationSpecification?: {\n            type: string;\n            parameters: {\n                gateway: string;\n                gatewayMerchantId?: string;\n                'braintree:apiVersion'?: string;\n                'braintree:clientKey'?: string;\n                'braintree:merchantId'?: string;\n                'braintree:sdkVersion'?: string;\n                'braintree:authorizationFingerprint'?: string;\n                'stripe:version'?: string;\n                'stripe:publishableKey'?: string;\n            };\n        };\n    }];\n    transactionInfo: {\n        currencyCode: string;\n        totalPriceStatus: string;\n        totalPrice?: string;\n        checkoutOption?: string;\n    };\n    emailRequired?: boolean;\n    shippingAddressRequired?: boolean;\n    shippingAddressParameters?: {\n        allowedCountryCodes?: string[];\n        phoneNumberRequired?: boolean;\n    };\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { PaymentMethodActionCreator } from '../..';\nimport { AddressRequestBody } from '../../../address';\nimport { BillingAddressActionCreator, BillingAddressUpdateRequestBody } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { toFormUrlEncoded } from '../../../common/http-request/';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport { createShippingStrategyRegistry, ShippingStrategyActionCreator } from '../../../shipping';\n\nimport {\n    ButtonColor,\n    ButtonType,\n    EnvironmentType,\n    GooglePaymentData,\n    GooglePayAddress,\n    GooglePayClient,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    GooglePayScriptLoader,\n    GooglePaySDK,\n    TokenizePayload,\n} from './';\n\nexport default class GooglePayPaymentProcessor {\n    private _googlePaymentsClient!: GooglePayClient;\n    private _methodId!: string;\n    private _googlePaymentDataRequest!: GooglePayPaymentDataRequestV2;\n    private _shippingStrategyActionCreator: ShippingStrategyActionCreator;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _googlePayScriptLoader: GooglePayScriptLoader,\n        private _googlePayInitializer: GooglePayInitializer,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _requestSender: RequestSender\n    ) {\n        this._shippingStrategyActionCreator = new ShippingStrategyActionCreator(createShippingStrategyRegistry(this._store, this._requestSender));\n    }\n\n    private get googlePaymentsClient(): GooglePayClient {\n        if (!this._googlePaymentsClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePaymentsClient;\n    }\n\n    private get methodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    private set methodId(value: string) {\n        if (!value) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        this._methodId = value;\n    }\n\n    private get googlePaymentDataRequest(): GooglePayPaymentDataRequestV2 {\n        if (!this._googlePaymentDataRequest) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._googlePaymentDataRequest;\n    }\n\n    initialize(methodId: string): Promise<void> {\n        this.methodId = methodId;\n\n        return this._configureWallet();\n    }\n\n    deinitialize(): Promise<void> {\n        return this._googlePayInitializer.teardown();\n    }\n\n    createButton(\n        onClick: () => {},\n        buttonType: ButtonType = ButtonType.Short,\n        buttonColor: ButtonColor = ButtonColor.Default\n    ): HTMLElement {\n        return this.googlePaymentsClient.createButton({\n            buttonColor,\n            buttonType,\n            onClick,\n        });\n    }\n\n    displayWallet(): Promise<GooglePaymentData> {\n        return this.googlePaymentsClient.isReadyToPay({\n            allowedPaymentMethods: [\n                {\n                    type: this._googlePaymentDataRequest.allowedPaymentMethods[0].type,\n                    parameters: {\n                        allowedAuthMethods: this._googlePaymentDataRequest.allowedPaymentMethods[0].parameters.allowedAuthMethods,\n                        allowedCardNetworks: this._googlePaymentDataRequest.allowedPaymentMethods[0].parameters.allowedCardNetworks,\n                    },\n                },\n            ],\n            apiVersion: this._googlePaymentDataRequest.apiVersion,\n            apiVersionMinor: this._googlePaymentDataRequest.apiVersionMinor,\n        }).then(response => {\n            if (response.result) {\n                return this.googlePaymentsClient.loadPaymentData(this.googlePaymentDataRequest);\n            }\n\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        });\n    }\n\n    handleSuccess(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        return this._googlePayInitializer.parseResponse(paymentData)\n            .then(tokenizedPayload => this._postForm(tokenizedPayload))\n            .then(() => this._updateBillingAddress(paymentData));\n    }\n\n    updateShippingAddress(shippingAddress: GooglePayAddress): Promise<InternalCheckoutSelectors | void> {\n        if (!shippingAddress) {\n            return Promise.resolve();\n        }\n\n        return this._store.dispatch(\n            this._shippingStrategyActionCreator.updateAddress(this._mapGooglePayAddressToShippingAddress(shippingAddress),\n                { methodId: this._methodId }), { queueId: 'shippingStrategy' });\n    }\n\n    private _configureWallet(): Promise<void> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this.methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(this.methodId);\n                const checkout = state.checkout.getCheckout();\n                const hasShippingAddress = !!state.shippingAddress.getShippingAddress();\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const { testMode } = paymentMethod.config;\n\n                return Promise.all([\n                    this._googlePayScriptLoader.load(),\n                    this._googlePayInitializer.initialize(checkout, paymentMethod, hasShippingAddress),\n                ]).then(([googlePay, googlePayPaymentDataRequest]) => {\n                        this._googlePaymentsClient = this._getGooglePaymentsClient(googlePay, testMode);\n                        this._googlePaymentDataRequest = googlePayPaymentDataRequest;\n                })\n                .catch((error: Error) => {\n                    throw error;\n                });\n            });\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string, lastFour: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastFour,\n        };\n    }\n\n    private _getGooglePaymentsClient(google: GooglePaySDK, testMode?: boolean): GooglePayClient {\n        if (testMode === undefined) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const environment: EnvironmentType = testMode ? 'TEST' : 'PRODUCTION';\n\n        return new google.payments.api.PaymentsClient({ environment });\n    }\n\n    private _mapGooglePayAddressToBillingAddress(paymentData: GooglePaymentData, id: string): BillingAddressUpdateRequestBody {\n        return {\n            id,\n            firstName: paymentData.paymentMethodData.info.billingAddress.name.split(' ').slice(0, -1).join(' '),\n            lastName: paymentData.paymentMethodData.info.billingAddress.name.split(' ').slice(-1).join(' '),\n            company: paymentData.paymentMethodData.info.billingAddress.companyName,\n            address1: paymentData.paymentMethodData.info.billingAddress.address1,\n            address2: paymentData.paymentMethodData.info.billingAddress.address2 + paymentData.paymentMethodData.info.billingAddress.address3,\n            city: paymentData.paymentMethodData.info.billingAddress.locality,\n            stateOrProvince: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            stateOrProvinceCode: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            postalCode: paymentData.paymentMethodData.info.billingAddress.postalCode,\n            countryCode: paymentData.paymentMethodData.info.billingAddress.countryCode,\n            phone: paymentData.paymentMethodData.info.billingAddress.phoneNumber,\n            customFields: [],\n            email: paymentData.email,\n        };\n    }\n\n    private _mapGooglePayAddressToShippingAddress(address: GooglePayAddress): AddressRequestBody {\n        return {\n            firstName: address.name.split(' ').slice(0, -1).join(' '),\n            lastName: address.name.split(' ').slice(-1).join(' '),\n            company: address.companyName,\n            address1: address.address1,\n            address2: address.address2 + address.address3,\n            city: address.locality,\n            stateOrProvince: address.administrativeArea,\n            stateOrProvinceCode: address.administrativeArea,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phoneNumber,\n            customFields: [],\n        };\n    }\n\n    private _postForm(postPaymentData: TokenizePayload): Promise<Response<any>> {\n        const cardInformation = postPaymentData.details;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: toFormUrlEncoded({\n                payment_type: postPaymentData.type,\n                nonce: postPaymentData.nonce,\n                provider: this.methodId,\n                action: 'set_external_checkout',\n                card_information: this._getCardInformation(cardInformation),\n            }),\n        });\n    }\n\n    private _updateBillingAddress(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        const remoteBillingAddress = this._store.getState().billingAddress.getBillingAddress();\n\n        if (!remoteBillingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const googlePayAddressMapped = this._mapGooglePayAddressToBillingAddress(paymentData, remoteBillingAddress.id);\n\n        return this._store.dispatch(\n            this._billingAddressActionCreator.updateAddress(googlePayAddressMapped)\n        );\n    }\n}\n","export default function getEnvironment(): string {\n    try {\n        return process.env.NODE_ENV || 'development';\n    } catch (e) {\n        return 'development';\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { VisaCheckoutHostWindow, VisaCheckoutSDK } from './visacheckout';\n\nexport default class VisaCheckoutScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: VisaCheckoutHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<VisaCheckoutSDK> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox-' : ''}assets.secure.checkout.visa.com/checkout-widget/resources/js/integration/v1/sdk.js`)\n            .then(() => {\n                if (!this._window.V) {\n                    throw new StandardError();\n                }\n\n                return this._window.V;\n            });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { ChasePayHostWindow, JPMC } from '../chasepay/chasepay';\n\nexport default class ChasePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: ChasePayHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<JPMC> {\n        return this._scriptLoader\n            .loadScript(`//pwc${testMode ? 'psb' : ''}.chase.com/pwc/checkout/js/v20170521/list.action?type=raw&applId=PWC&channelId=CWC&version=1`)\n            .then(() => {\n                if (!this._window.JPMC) {\n                    throw new StandardError();\n                }\n\n                return this._window.JPMC;\n            });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { Masterpass, MasterpassHostWindow } from './masterpass';\n\nexport default class MasterpassScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: MasterpassHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<Masterpass> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox.' : ''}masterpass.com/integration/merchant.js`)\n            .then(() => {\n                if (!this._window.masterpass) {\n                    throw new StandardError();\n                }\n\n                return this._window.masterpass;\n            });\n    }\n}\n","import { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../..';\nimport { createRequestSender } from '../../../../node_modules/@bigcommerce/request-sender';\nimport { ScriptLoader } from '../../../../node_modules/@bigcommerce/script-loader/lib';\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../../../billing';\nimport { CheckoutStore } from '../../../checkout';\nimport { BraintreeScriptLoader, BraintreeSDKCreator } from '../braintree';\n\nimport { GooglePayBraintreeInitializer,  GooglePayPaymentProcessor, GooglePayScriptLoader } from '.';\n\nexport default function createGooglePayBraintreePaymentProcessor(\n    store: CheckoutStore,\n    scriptLoader: ScriptLoader): GooglePayPaymentProcessor {\n\n    const requestSender = createRequestSender();\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const billingAddressActionCreator = new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender));\n    const braintreeScitpLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScitpLoader);\n    const googlePayBraintreeInitializer = new GooglePayBraintreeInitializer(braintreeSDKCreator);\n\n    return new GooglePayPaymentProcessor(\n        store,\n        paymentMethodActionCreator,\n        new GooglePayScriptLoader(scriptLoader),\n        googlePayBraintreeInitializer,\n        billingAddressActionCreator,\n        requestSender\n    );\n}\n","import Logger from './logger';\n\nexport default class ConsoleLogger implements Logger {\n    constructor(\n        private _console: Console\n    ) {}\n\n    log(...messages: any[]): void {\n        this._logToConsole('log', ...messages);\n    }\n\n    info(...messages: any[]): void {\n        this._logToConsole('info', ...messages);\n    }\n\n    warn(...messages: any[]): void {\n        this._logToConsole('warn', ...messages);\n    }\n\n    error(...messages: any[]): void {\n        this._logToConsole('error', ...messages);\n    }\n\n    debug(...messages: any[]): void {\n        this._logToConsole('debug', ...messages);\n    }\n\n    private _logToConsole(type: keyof Console, ...messages: any[]): void {\n        if (!this._console || !this._console[type]) {\n            return;\n        }\n\n        this._console[type].call(this._console, ...messages);\n    }\n}\n","import Logger from './logger';\n\nexport default class NoopLogger implements Logger {\n    log(): void {}\n\n    info(): void {}\n\n    warn(): void {}\n\n    error(): void {}\n\n    debug(): void {}\n}\n","import { getEnvironment } from '../utility';\n\nimport createLogger from './create-logger';\nimport Logger from './logger';\n\nconst logger = createLogger(getEnvironment() !== 'test');\n\nexport default function getDefaultLogger(): Logger {\n    return logger;\n}\n","import ConsoleLogger from './console-logger';\nimport Logger from './logger';\nimport NoopLogger from './noop-logger';\n\nexport default function createLogger(isEnabled = true): Logger {\n    if (!isEnabled) {\n        return new NoopLogger();\n    }\n\n    return new ConsoleLogger(console);\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { Address, LegacyAddress } from '../../../address';\nimport { toFormUrlEncoded } from '../../../common/http-request';\n\nimport { BraintreeDataCollector } from './braintree';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport {\n    VisaCheckoutAddress,\n    VisaCheckoutInitOptions,\n    VisaCheckoutPaymentSuccessPayload,\n    VisaCheckoutTokenizedPayload,\n} from './visacheckout';\n\nexport default class BraintreeVisaCheckoutPaymentProcessor {\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(clientToken: string, options: VisaCheckoutInitializeOptions): Promise<VisaCheckoutInitOptions> {\n        this._braintreeSDKCreator.initialize(clientToken);\n\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(visaCheckout => visaCheckout.createInitOptions({\n                settings: {\n                    locale: options.locale,\n                    shipping: {\n                        collectShipping: options.collectShipping,\n                    },\n                },\n                paymentRequest: {\n                    currencyCode: options.currencyCode,\n                    subtotal: String(options.subtotal),\n                },\n            }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    handleSuccess(payment: VisaCheckoutPaymentSuccessPayload, shipping?: Address, billing?: Address): Promise<any> {\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(braintreeVisaCheckout => Promise.all([\n                braintreeVisaCheckout.tokenize(payment),\n                this._braintreeSDKCreator.getDataCollector(),\n            ])\n            .then(([tokenizedPayload, dataCollector]) => {\n                const {\n                    shippingAddress = this._toVisaCheckoutAddress(shipping),\n                    billingAddress = this._toVisaCheckoutAddress(billing),\n                } = tokenizedPayload;\n\n                return this._postForm({\n                    ...tokenizedPayload,\n                    shippingAddress,\n                    billingAddress,\n                }, dataCollector);\n            }));\n    }\n\n    private _postForm(paymentData: VisaCheckoutTokenizedPayload, dataCollector: BraintreeDataCollector) {\n        const {\n            userData,\n            billingAddress,\n            shippingAddress,\n            details: cardInformation,\n        } = paymentData;\n        const { userEmail } = userData;\n        const { deviceData } = dataCollector;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: toFormUrlEncoded({\n                payment_type: paymentData.type,\n                nonce: paymentData.nonce,\n                provider: 'braintreevisacheckout',\n                action: 'set_external_checkout',\n                device_data: deviceData,\n                card_information: this._getCardInformation(cardInformation),\n                billing_address: this._getAddress(userEmail, billingAddress),\n                shipping_address: this._getAddress(userEmail, shippingAddress),\n            }),\n        });\n    }\n\n    private _toVisaCheckoutAddress(address?: Address): VisaCheckoutAddress {\n        if (!address) {\n            return {};\n        }\n\n        return {\n            firstName: address.firstName,\n            lastName: address.lastName,\n            phoneNumber: address.phone,\n            streetAddress: address.address1,\n            extendedAddress: address.address2,\n            locality: address.city,\n            region: address.stateOrProvinceCode,\n            countryCode: address.countryCode,\n            postalCode: address.postalCode,\n        };\n    }\n\n    private _getAddress(email: string, address: VisaCheckoutAddress = {}): Partial<LegacyAddress> {\n        return {\n            email,\n            first_name: address.firstName,\n            last_name: address.lastName,\n            phone_number: address.phoneNumber,\n            address_line_1: address.streetAddress,\n            address_line_2: address.extendedAddress,\n            city: address.locality,\n            state: address.region,\n            country_code: address.countryCode,\n            postal_code: address.postalCode,\n        };\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string, lastTwo: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastTwo,\n        };\n    }\n}\n\nexport interface VisaCheckoutInitializeOptions {\n    locale?: string;\n    collectShipping?: boolean;\n    subtotal?: number;\n    currencyCode?: string;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport BraintreeVisaCheckoutPaymentProcessor from './braintree-visacheckout-payment-processor';\n\nexport default function createBraintreeVisaCheckoutPaymentProcessor(\n    scriptLoader: ScriptLoader,\n    requestSender: RequestSender\n) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n\n    return new BraintreeVisaCheckoutPaymentProcessor(braintreeSDKCreator, requestSender);\n}\n"],"sourceRoot":""}