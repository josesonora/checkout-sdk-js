{"version":3,"sources":["webpack://checkoutKit/webpack/bootstrap","webpack://checkoutKit/external \"@bigcommerce/data-store\"","webpack://checkoutKit/external \"tslib\"","webpack://checkoutKit/external \"lodash\"","webpack://checkoutKit/external \"rxjs\"","webpack://checkoutKit/./src/shipping/consignment-actions.ts","webpack://checkoutKit/./src/customer/customer-strategy-actions.ts","webpack://checkoutKit/./src/payment/payment-strategy-actions.ts","webpack://checkoutKit/./src/common/error/errors/missing-data-error.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-actions.ts","webpack://checkoutKit/./src/checkout/checkout-actions.ts","webpack://checkoutKit/./src/common/error/errors/standard-error.ts","webpack://checkoutKit/./src/common/utility/set-prototype-of.ts","webpack://checkoutKit/./src/coupon/coupon-actions.ts","webpack://checkoutKit/./src/billing/billing-address-actions.ts","webpack://checkoutKit/./src/order/order-actions.ts","webpack://checkoutKit/./src/payment/payment-method-actions.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-actions.ts","webpack://checkoutKit/external \"rxjs/operators\"","webpack://checkoutKit/./src/coupon/gift-certificate-actions.ts","webpack://checkoutKit/./src/payment/instrument/instrument-actions.ts","webpack://checkoutKit/./src/embedded-checkout/embedded-checkout-events.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-actions.ts","webpack://checkoutKit/./src/common/error/errors/request-error.ts","webpack://checkoutKit/./src/config/config-actions.ts","webpack://checkoutKit/./src/common/utility/is-plain-object.ts","webpack://checkoutKit/./src/geography/country-actions.ts","webpack://checkoutKit/./src/shipping/shipping-country-actions.ts","webpack://checkoutKit/external \"@bigcommerce/request-sender\"","webpack://checkoutKit/./src/payment/payment-status-types.ts","webpack://checkoutKit/external \"@bigcommerce/script-loader\"","webpack://checkoutKit/./src/common/http-request/content-type.ts","webpack://checkoutKit/external \"shallowequal\"","webpack://checkoutKit/./src/payment/payment-actions.ts","webpack://checkoutKit/./src/common/error/errors/invalid-argument-error.ts","webpack://checkoutKit/./src/payment/payment-method-types.ts","webpack://checkoutKit/./src/embedded-checkout/is-iframe-event.ts","webpack://checkoutKit/./src/common/utility/is-equal.ts","webpack://checkoutKit/external \"@bigcommerce/form-poster\"","webpack://checkoutKit/external \"local-storage-fallback\"","webpack://checkoutKit/external \"reselect\"","webpack://checkoutKit/./src/embedded-checkout/iframe-event-poster.ts","webpack://checkoutKit/./src/customer/customer-actions.ts","webpack://checkoutKit/./src/order/spam-protection/spam-protection-actions.ts","webpack://checkoutKit/./src/payment/errors/payment-method-invalid-error.ts","webpack://checkoutKit/./src/common/selector/with-memoized-combiner.ts","webpack://checkoutKit/./src/common/error/error-actions.ts","webpack://checkoutKit/./src/payment/payment-method-action-creator.ts","webpack://checkoutKit/./src/payment/payment-method-request-sender.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/embedded-content-events.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-event-listener.ts","webpack://checkoutKit/./src/checkout/checkout-default-includes.ts","webpack://checkoutKit/./src/cart/map-to-internal-line-items.ts","webpack://checkoutKit/./src/cart/map-gift-certificate-to-internal-line-item.ts","webpack://checkoutKit/./src/common/http-request/internal-api-headers.ts","webpack://checkoutKit/./src/common/utility/cache-key-maps.ts","webpack://checkoutKit/./src/common/utility/cache-key-resolver.ts","webpack://checkoutKit/./src/common/utility/memoize.ts","webpack://checkoutKit/./src/checkout/checkout-params.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-sdk-creator.ts","webpack://checkoutKit/./src/cart/map-to-internal-line-item.ts","webpack://checkoutKit/./src/common/error/errors/not-initialized-error.ts","webpack://checkoutKit/./src/common/error/throw-error-action.ts","webpack://checkoutKit/./src/common/utility/amount-transformer.ts","webpack://checkoutKit/./src/common/url/parse-url.ts","webpack://checkoutKit/./src/common/data-store/cachable-action-decorator.ts","webpack://checkoutKit/./src/common/data-store/is-action-options.ts","webpack://checkoutKit/./src/common/data-store/cache-action.ts","webpack://checkoutKit/./src/common/utility/bind-decorator.ts","webpack://checkoutKit/external \"iframe-resizer\"","webpack://checkoutKit/./src/common/utility/omit-deep.ts","webpack://checkoutKit/./src/checkout/checkout-action-creator.ts","webpack://checkoutKit/./src/shipping/consignment-action-creator.ts","webpack://checkoutKit/./src/shipping/consignment-request-sender.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/get-callback-url.ts","webpack://checkoutKit/./src/shipping/map-to-internal-shipping-option.ts","webpack://checkoutKit/./src/common/utility/is-private.ts","webpack://checkoutKit/./src/common/error/errors/unrecoverable-error.ts","webpack://checkoutKit/./src/common/error/errors/map-from-internal-error-response.ts","webpack://checkoutKit/./src/common/error/errors/map-from-payment-error-response.ts","webpack://checkoutKit/./src/common/error/request-error-factory.ts","webpack://checkoutKit/./src/common/error/errors/map-from-storefront-error-response.ts","webpack://checkoutKit/./src/common/error/clear-error-reducer.ts","webpack://checkoutKit/./src/common/utility/replace.ts","webpack://checkoutKit/./src/common/utility/object-set.ts","webpack://checkoutKit/./src/billing/billing-address-state.ts","webpack://checkoutKit/./src/billing/billing-address-reducer.ts","webpack://checkoutKit/./src/common/utility/array-replace.ts","webpack://checkoutKit/./src/common/utility/object-merge.ts","webpack://checkoutKit/./src/cart/cart-state.ts","webpack://checkoutKit/./src/cart/cart-reducer.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-state.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-reducer.ts","webpack://checkoutKit/./src/config/config-state.ts","webpack://checkoutKit/./src/config/config-reducer.ts","webpack://checkoutKit/./src/coupon/coupon-state.ts","webpack://checkoutKit/./src/coupon/coupon-reducer.ts","webpack://checkoutKit/./src/coupon/gift-certificate-state.ts","webpack://checkoutKit/./src/coupon/gift-certificate-reducer.ts","webpack://checkoutKit/./src/customer/customer-state.ts","webpack://checkoutKit/./src/customer/customer-reducer.ts","webpack://checkoutKit/./src/customer/customer-strategy-state.ts","webpack://checkoutKit/./src/customer/customer-strategy-reducer.ts","webpack://checkoutKit/./src/geography/country-state.ts","webpack://checkoutKit/./src/geography/country-reducer.ts","webpack://checkoutKit/./src/order/order-state.ts","webpack://checkoutKit/./src/order/order-reducer.ts","webpack://checkoutKit/./src/payment/payment-reducer.ts","webpack://checkoutKit/./src/payment/payment-method-state.ts","webpack://checkoutKit/./src/payment/payment-method-reducer.ts","webpack://checkoutKit/./src/common/utility/merge-or-push.ts","webpack://checkoutKit/./src/payment/payment-strategy-state.ts","webpack://checkoutKit/./src/payment/payment-strategy-reducer.ts","webpack://checkoutKit/./src/payment/instrument/instrument-state.ts","webpack://checkoutKit/./src/payment/instrument/instrument-reducer.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-state.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-reducer.ts","webpack://checkoutKit/./src/shipping/consignment-state.ts","webpack://checkoutKit/./src/shipping/consignment-reducer.ts","webpack://checkoutKit/./src/shipping/shipping-country-state.ts","webpack://checkoutKit/./src/shipping/shipping-country-reducer.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-state.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-reducer.ts","webpack://checkoutKit/./src/checkout/checkout-state.ts","webpack://checkoutKit/./src/checkout/checkout-reducer.ts","webpack://checkoutKit/./src/common/utility/create-freeze-proxy.ts","webpack://checkoutKit/./src/form/form-selector.ts","webpack://checkoutKit/./src/address/is-address-equal.ts","webpack://checkoutKit/./src/shipping/consignment-selector.ts","webpack://checkoutKit/./src/checkout/create-internal-checkout-selectors.ts","webpack://checkoutKit/./src/billing/billing-address-selector.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-selector.ts","webpack://checkoutKit/./src/coupon/coupon-selector.ts","webpack://checkoutKit/./src/customer/customer-selector.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-selector.ts","webpack://checkoutKit/./src/shipping/shipping-address-selector.ts","webpack://checkoutKit/./src/payment/payment-selector.ts","webpack://checkoutKit/./src/cart/cart-selector.ts","webpack://checkoutKit/./src/config/config-selector.ts","webpack://checkoutKit/./src/geography/country-selector.ts","webpack://checkoutKit/./src/customer/customer-strategy-selector.ts","webpack://checkoutKit/./src/coupon/gift-certificate-selector.ts","webpack://checkoutKit/./src/payment/instrument/instrument-selector.ts","webpack://checkoutKit/./src/payment/payment-method-selector.ts","webpack://checkoutKit/./src/payment/payment-strategy-selector.ts","webpack://checkoutKit/./src/shipping/shipping-country-selector.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-selector.ts","webpack://checkoutKit/./src/checkout/checkout-selector.ts","webpack://checkoutKit/./src/order/order-selector.ts","webpack://checkoutKit/./src/checkout/create-checkout-store.ts","webpack://checkoutKit/./src/checkout/create-action-transformer.ts","webpack://checkoutKit/./src/common/error/create-request-error-factory.ts","webpack://checkoutKit/./src/checkout/create-checkout-store-reducer.ts","webpack://checkoutKit/./src/checkout/errors/checkout-not-available-error.ts","webpack://checkoutKit/./src/checkout/checkout-request-sender.ts","webpack://checkoutKit/./src/coupon/map-to-internal-coupon.ts","webpack://checkoutKit/./src/address/map-to-internal-address.ts","webpack://checkoutKit/./src/billing/is-billing-address-like.ts","webpack://checkoutKit/./src/common/selector/selector-decorator.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-error-selector.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-status-selector.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-selectors.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-initializer.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/checkout-button-method-type.ts","webpack://checkoutKit/./src/common/dom/is-element-id.ts","webpack://checkoutKit/./src/common/dom/set-unique-element-id.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-strategy-action-creator.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/braintree/braintree-paypal-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/googlepay/googlepay-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/masterpass/masterpass-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/paypal/paypal-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-initializer.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-registry.ts","webpack://checkoutKit/./src/embedded-checkout/errors/not-embeddable-error.ts","webpack://checkoutKit/./src/common/storage/browser-storage.ts","webpack://checkoutKit/./src/embedded-checkout/errors/invalid-login-token-error.ts","webpack://checkoutKit/./src/embedded-checkout/embedded-checkout.ts","webpack://checkoutKit/./src/embedded-checkout/loading-indicator.ts","webpack://checkoutKit/./src/embedded-checkout/resizable-iframe-creator.ts","webpack://checkoutKit/./src/common/iframe/iframe-resizer.ts","webpack://checkoutKit/./src/embedded-checkout/embed-checkout.ts","webpack://checkoutKit/external \"@bigcommerce/bigpay-client\"","webpack://checkoutKit/external \"messageformat\"","webpack://checkoutKit/./src/common/error/errors/timeout-error.ts","webpack://checkoutKit/./src/common/selector/create-selector.ts","webpack://checkoutKit/./src/common/http-request/join-includes.ts","webpack://checkoutKit/./src/config/config-action-creator.ts","webpack://checkoutKit/./src/config/config-request-sender.ts","webpack://checkoutKit/./src/billing/billing-address-action-creator.ts","webpack://checkoutKit/./src/billing/billing-address-request-sender.ts","webpack://checkoutKit/./src/common/registry/registry.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/masterpass-script-loader.ts","webpack://checkoutKit/./src/remote-checkout/errors/remote-checkout-synchronization-error.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-braintree-initializer.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-stripe-initializer.ts","webpack://checkoutKit/./src/customer/map-to-internal-customer.ts","webpack://checkoutKit/./src/coupon/map-to-internal-gift-certificate.ts","webpack://checkoutKit/./src/order/map-to-internal-order.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-script-loader.ts","webpack://checkoutKit/./src/common/error/error-action-creator.ts","webpack://checkoutKit/./src/common/utility/get-environment.ts","webpack://checkoutKit/./src/common/log/console-logger.ts","webpack://checkoutKit/./src/common/log/noop-logger.ts","webpack://checkoutKit/./src/common/log/get-default-logger.ts","webpack://checkoutKit/./src/common/log/create-logger.ts","webpack://checkoutKit/./src/coupon/coupon-action-creator.ts","webpack://checkoutKit/./src/coupon/coupon-request-sender.ts","webpack://checkoutKit/./src/coupon/gift-certificate-action-creator.ts","webpack://checkoutKit/./src/coupon/gift-certificate-request-sender.ts","webpack://checkoutKit/./src/customer/customer-strategy-action-creator.ts","webpack://checkoutKit/./src/payment/strategies/amazon-pay/amazon-pay-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-visacheckout-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/braintree/create-braintree-visacheckout-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/braintree/visacheckout-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay-script-loader.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-request-sender.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-action-creator.ts","webpack://checkoutKit/./src/customer/customer-action-creator.ts","webpack://checkoutKit/./src/customer/customer-request-sender.ts","webpack://checkoutKit/./src/common/error/errors/not-implemented-error.ts","webpack://checkoutKit/./src/customer/strategies/amazon/amazon-pay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/braintree/braintree-visacheckout-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/chasepay/chasepay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/default/default-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/googlepay/googlepay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/masterpass/masterpass-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/square/square-customer-strategy.ts","webpack://checkoutKit/./src/geography/country-action-creator.ts","webpack://checkoutKit/./src/geography/country-request-sender.ts","webpack://checkoutKit/./src/order/order-request-sender.ts","webpack://checkoutKit/./src/order/order-action-creator.ts","webpack://checkoutKit/./src/common/dom/mutation-observer.ts","webpack://checkoutKit/./src/order/spam-protection/errors/spam-protection-failed-error.ts","webpack://checkoutKit/./src/order/spam-protection/errors/spam-protection-not-completed-error.ts","webpack://checkoutKit/./src/order/spam-protection/google-recaptcha.ts","webpack://checkoutKit/./src/order/spam-protection/google-recaptcha-script-loader.ts","webpack://checkoutKit/./src/order/spam-protection/spam-protection-action-creator.ts","webpack://checkoutKit/./src/order/errors/order-finalization-not-required-error.ts","webpack://checkoutKit/./src/payment/payment-strategy-type.ts","webpack://checkoutKit/./src/payment/payment-strategy-action-creator.ts","webpack://checkoutKit/./src/cart/cart-comparator.ts","webpack://checkoutKit/./src/cart/errors/cart-changed-error.ts","webpack://checkoutKit/./src/checkout/checkout-validator.ts","webpack://checkoutKit/./src/payment/payment-action-creator.ts","webpack://checkoutKit/./src/payment/payment-request-sender.ts","webpack://checkoutKit/./src/payment/is-vaulted-instrument.ts","webpack://checkoutKit/./src/payment/payment-request-transformer.ts","webpack://checkoutKit/./src/order/order-params.ts","webpack://checkoutKit/./src/payment/payment-strategy-registry.ts","webpack://checkoutKit/./src/payment/errors/payment-argument-invalid-error.ts","webpack://checkoutKit/./src/payment/errors/payment-method-cancelled-error.ts","webpack://checkoutKit/./src/payment/strategies/affirm/affirm-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/affirm/affirmJs.ts","webpack://checkoutKit/./src/payment/strategies/affirm/affirm-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/afterpay/afterpay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/afterpay/afterpay-script-loader.ts","webpack://checkoutKit/./src/address/is-internal-address-equal.ts","webpack://checkoutKit/./src/common/utility/omit-private.ts","webpack://checkoutKit/./src/address/map-from-internal-address.ts","webpack://checkoutKit/./src/payment/strategies/amazon-pay/amazon-pay-payment-strategy.ts","webpack://checkoutKit/./src/common/overlay/overlay.ts","webpack://checkoutKit/./src/common/utility/cancellable-promise.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-payment-processor.ts","webpack://checkoutKit/./src/payment/is-credit-card-like.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-credit-card-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-paypal-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/cardinal/cardinal.ts","webpack://checkoutKit/./src/payment/strategies/braintree/is-braintree-error.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-visacheckout-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/cardinal/cardinal-three-d-secure-flow.ts","webpack://checkoutKit/./src/payment/strategies/cardinal/cardinal-client.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay.ts","webpack://checkoutKit/./src/payment/strategies/cardinal/cardinal-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/square/square-form.ts","webpack://checkoutKit/./src/payment/strategies/converge/converge-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/credit-card/credit-card-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/cybersource/cybersource-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/klarna/klarna-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/klarna/klarna-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/legacy/legacy-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/masterpass-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/no-payment/no-payment-data-required-strategy.ts","webpack://checkoutKit/./src/payment/strategies/offline/offline-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/offsite/offsite-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-pro-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-express-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/sage-pay/sage-pay-payment-strategy.ts","webpack://checkoutKit/./src/common/error/errors/unsupported-browser-error.ts","webpack://checkoutKit/./src/payment/strategies/square/square-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/square/square-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/stripev3/stripev3-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/stripev3/stripev3-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/wepay/wepay-risk-client.ts","webpack://checkoutKit/./src/payment/strategies/wepay/wepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/errors/payment-method-declined-error.ts","webpack://checkoutKit/./src/payment/strategies/zip/zip-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/zip/zip-script-loader.ts","webpack://checkoutKit/./src/payment/create-payment-strategy-registry.ts","webpack://checkoutKit/./src/payment/strategies/braintree/create-braintree-payment-processor.ts","webpack://checkoutKit/./src/common/data-store/create-data-store-projection.ts","webpack://checkoutKit/./src/payment/instrument/instrument-action-creator.ts","webpack://checkoutKit/./src/common/date-time/add-minutes.ts","webpack://checkoutKit/./src/common/date-time/is-future.ts","webpack://checkoutKit/./src/payment/instrument/instrument-response-transformer.ts","webpack://checkoutKit/./src/payment/instrument/instrument-request-sender.ts","webpack://checkoutKit/./src/shipping/shipping-country-action-creator.ts","webpack://checkoutKit/./src/shipping/shipping-country-request-sender.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-action-creator.ts","webpack://checkoutKit/./src/shipping/strategies/amazon/amazon-pay-shipping-strategy.ts","webpack://checkoutKit/./src/shipping/strategies/default/default-shipping-strategy.ts","webpack://checkoutKit/./src/common/utility/clone-result.ts","webpack://checkoutKit/./src/common/selector/create-shallow-equal-selector.ts","webpack://checkoutKit/./src/checkout/create-checkout-selectors.ts","webpack://checkoutKit/./src/checkout/checkout-store-selector.ts","webpack://checkoutKit/./src/checkout/checkout-store-error-selector.ts","webpack://checkoutKit/./src/checkout/checkout-store-status-selector.ts","webpack://checkoutKit/./src/common/error/error-message-transformer.ts","webpack://checkoutKit/./src/common/utility/to-single-line.ts","webpack://checkoutKit/./src/checkout/checkout-service.ts","webpack://checkoutKit/./src/checkout/create-checkout-service-error-transformer.ts","webpack://checkoutKit/./src/checkout/create-checkout-service.ts","webpack://checkoutKit/./src/order/spam-protection/create-spam-protection.ts","webpack://checkoutKit/./src/payment/create-payment-client.ts","webpack://checkoutKit/./src/customer/create-customer-strategy-registry.ts","webpack://checkoutKit/./src/shipping/create-shipping-strategy-registry.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/handle-frame-loaded-event.ts","webpack://checkoutKit/./src/common/error/errors/custom-error.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/iframe-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/noop-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/create-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/locale/language-service.ts","webpack://checkoutKit/./src/locale/create-language-service.ts","webpack://checkoutKit/./src/currency/currency-formatter.ts","webpack://checkoutKit/./src/currency/currency-service.ts","webpack://checkoutKit/./src/currency/create-currency-service.ts","webpack://checkoutKit/./src/index.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/create-googlepay-payment-processor.ts","webpack://checkoutKit/./src/cart/map-to-internal-cart.ts","webpack://checkoutKit/./src/promotion/map-to-discount-notifications.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","ConsignmentActionType","__webpack_exports__","CustomerStrategyActionType","PaymentStrategyActionType","MissingDataErrorType","MissingDataError","_super","subtype","_this","this","type","MissingBillingAddress","MissingCart","MissingConsignments","MissingCheckout","MissingCheckoutConfig","MissingOrderConfig","MissingOrder","MissingOrderId","MissingPayment","MissingPaymentMethod","MissingShippingAddress","MissingSpamProtectionToken","getErrorMessage","tslib__WEBPACK_IMPORTED_MODULE_0__","_standard_error__WEBPACK_IMPORTED_MODULE_1__","ShippingStrategyActionType","CheckoutActionType","standard_error_StandardError","StandardError","message","_newTarget","setPrototypeOf","__proto__","Error","captureStackTrace","stack","external_tslib_","CouponActionType","BillingAddressActionType","OrderActionType","PaymentMethodActionType","CheckoutButtonActionType","GiftCertificateActionType","InstrumentActionType","EmbeddedCheckoutEventType","RemoteCheckoutActionType","DEFAULT_RESPONSE","body","headers","status","RequestError","response","_a","_b","errors","_c","ConfigActionType","isPlainObject","lodash__WEBPACK_IMPORTED_MODULE_0__","CountryActionType","ShippingCountryActionType","ACKNOWLEDGE","FINALIZE","ContentType","PaymentActionType","InvalidArgumentError","HOSTED","OFFLINE","isIframeEvent","isEqual","objectA","objectB","options","Array","isArray","length","index","length_1","isArrayEqual","Date","getTime","isDateEqual","RegExp","toString","isRegExpEqual","filter","keyFilter","keysA","keys","keysB","length_2","isObjectEqual","_common_url__WEBPACK_IMPORTED_MODULE_0__","IframeEventPoster","targetOrigin","_targetWindow","_targetOrigin","origin","post","event","window","postMessage","setTarget","CustomerActionType","SpamProtectionActionType","PaymentMethodInvalidError","withMemoizedCombiner","_utility_memoize__WEBPACK_IMPORTED_MODULE_0__","creator","args","_i","arguments","combiner","pop","apply","concat","combinerArgs","result","ErrorActionType","PaymentMethodActionCreator","_requestSender","loadPaymentMethods","rxjs__WEBPACK_IMPORTED_MODULE_2__","observer","next","_bigcommerce_data_store__WEBPACK_IMPORTED_MODULE_1__","_payment_method_actions__WEBPACK_IMPORTED_MODULE_4__","LoadPaymentMethodsRequested","then","meta","deviceSessionId","sessionHash","LoadPaymentMethodsSucceeded","complete","catch","error","LoadPaymentMethodsFailed","loadPaymentMethod","methodId","LoadPaymentMethodRequested","undefined","LoadPaymentMethodSucceeded","LoadPaymentMethodFailed","_common_data_store__WEBPACK_IMPORTED_MODULE_3__","_common_http_request__WEBPACK_IMPORTED_MODULE_0__","_common_http_request__WEBPACK_IMPORTED_MODULE_1__","PaymentMethodRequestSender","timeout","Accept","JsonV1","X-API-INTERNAL","url","EmbeddedContentEventType","IframeEventListener","sourceOrigin","_sourceOrigin","_common_url__WEBPACK_IMPORTED_MODULE_1__","_isListening","_listeners","listen","addEventListener","_handleMessage","stopListen","removeEventListener","addListener","listener","listeners","push","removeListener","indexOf","splice","trigger","forEach","_is_iframe_event__WEBPACK_IMPORTED_MODULE_3__","data","_common_utility__WEBPACK_IMPORTED_MODULE_2__","mapToInternalLineItems","itemMap","decimalPlaces","idKey","reduce","map","item","amountTransformer","amount_transformer","id","imageUrl","amount","amountAfterDiscount","discount","integerAmount","toInteger","integerAmountAfterDiscount","integerDiscount","quantity","sender","recipient","attributes","variantId","mapGiftCertificateToInternalLineItem","map_to_internal_line_item","mapToInternalLineItemType","INTERNAL_USE_ONLY","isTerminalCacheKeyMap","cache_key_resolver_CacheKeyResolver","CacheKeyResolver","_lastId","_map","maps","_usedMaps","_options","maxSize","external_shallowequal_","onExpire","external_lodash_","getKey","_resolveMap","parentMap","cacheKey","usedCount","_generateMap","slice","_removeLeastUsedMap","getUsedCount","isMatched","mapIndex","unshift","parent","terminalMap","recentlyUsedMap","_removeMap","isRootCacheKeyMap","memoize","fn","shallowequal__WEBPACK_IMPORTED_MODULE_2__","cache","Map","resolver","_cache_key_resolver__WEBPACK_IMPORTED_MODULE_3__","delete","memoized","lodash__WEBPACK_IMPORTED_MODULE_1__","memoizeOne","CheckoutIncludes","_common_error_errors__WEBPACK_IMPORTED_MODULE_0__","BraintreeScriptLoader","_scriptLoader","_window","loadClient","loadScript","braintree","client","load3DS","threeDSecure","loadDataCollector","dataCollector","loadPaypal","paypal","loadPaypalCheckout","paypalCheckout","loadVisaCheckout","visaCheckout","loadGooglePayment","googlePayment","BraintreeSDKCreator","_braintreeScriptLoader","_dataCollectors","initialize","clientToken","_clientToken","getClient","_common_error_errors__WEBPACK_IMPORTED_MODULE_1__","PaymentNotInitialized","_client","authorization","getPaypal","_paypal","Promise","all","getPaypalCheckout","_paypalCheckout","get3DS","_3ds","getDataCollector","cached","kount","code","deviceData","teardown","resolve","getVisaCheckout","_visaCheckout","getGooglePaymentComponent","_googlePay","_teardown","default","mod","mapToInternalLineItem","_common_utility__WEBPACK_IMPORTED_MODULE_0__","extendedListPrice","extendedSalePrice","discountAmount","downloadsPageUrl","downloadPageUrl","brand","categoryNames","productId","option","addedByPromotion","NotInitializedErrorType","NotInitializedError","CustomerNotInitialized","ShippingNotInitialized","SpamProtectionNotInitialized","throwErrorAction","_bigcommerce_data_store__WEBPACK_IMPORTED_MODULE_0__","rxjs__WEBPACK_IMPORTED_MODULE_1__","action","payload","AmountTransformer","_decimalPlaces","Math","round","pow","parseUrl","_error_errors__WEBPACK_IMPORTED_MODULE_0__","test","anchor","document","createElement","href","hash","hostname","pathname","port","protocol","search","cachableActionDecorator","_","descriptor","memoizedMethods","WeakMap","decorateMethod","method","param","lastArg","useCache","instanceMethods","set","cache_key_resolver","external_rxjs_","pipe","operators_","store","bindDecorator","target","bindMethodDecorator","decoratedTarget","class_1","getOwnPropertyNames","getOwnPropertyDescriptor","bindClassDecorator","boundMethod","omitDeep","predicate","CheckoutActionCreator","_checkoutRequestSender","_configActionCreator","loadCheckout","_checkout_actions__WEBPACK_IMPORTED_MODULE_7__","LoadCheckoutRequested","loadConfig","LoadCheckoutSucceeded","rxjs_operators__WEBPACK_IMPORTED_MODULE_3__","_common_error__WEBPACK_IMPORTED_MODULE_4__","LoadCheckoutFailed","loadDefaultCheckout","context","getState","config","getContextConfig","checkoutId","_common_error_errors__WEBPACK_IMPORTED_MODULE_5__","updateCheckout","checkout","getCheckout","_common_error_errors__WEBPACK_IMPORTED_MODULE_6__","UpdateCheckoutRequested","UpdateCheckoutSucceeded","UpdateCheckoutFailed","loadCurrentCheckout","ConsignmentActionCreator","_consignmentRequestSender","unassignItemsByAddress","consignment","state","_common_error_errors__WEBPACK_IMPORTED_MODULE_4__","existingConsignment","consignments","getConsignmentByAddress","shippingAddress","lineItems","_removeLineItems","cart","getCart","updateConsignment","deleteConsignment","assignItemsByAddress","_createOrUpdateConsignment","_addLineItems","selectShippingOption","getConsignments","consignmentUpdateBody","shippingOptionId","consignmentMeta","_consignment_actions__WEBPACK_IMPORTED_MODULE_6__","UpdateShippingOptionRequested","UpdateShippingOptionSucceeded","UpdateShippingOptionFailed","loadShippingOptions","LoadShippingOptionsRequested","params","include","_checkout_checkout_params__WEBPACK_IMPORTED_MODULE_3__","AvailableShippingOptions","LoadShippingOptionsSucceeded","LoadShippingOptionsFailed","updateAddress","address","_getConsignmentRequestBody","createConsignments","CreateConsignmentsRequested","CreateConsignmentsSucceeded","CreateConsignmentsFailed","UpdateConsignmentRequested","UpdateConsignmentSucceeded","UpdateConsignmentFailed","consignmentId","DeleteConsignmentRequested","DeleteConsignmentSucceeded","DeleteConsignmentFailed","updateShippingOption","_isUpdateConsignmentRequest","physicalItems","itemId","_hydrateLineItems","lineItemIds","existingItem","sharedItem","find","lineItem","request","DEFAULT_PARAMS","join","ConsignmentRequestSender","put","getCallbackUrl","location","mapToInternalShippingOption","isSelected","description","price","cost","selected","isRecommended","transitTime","isPrivate","UnrecoverableError","request_error","joinErrors","map_from_payment_error_response_joinErrors","RequestErrorFactory","_factoryMethods","register","detail","title","mapFromInternalErrorResponse","mapFromStorefrontErrorResponse","mapFromPaymentErrorResponse","timeout_error","factoryMethod","createError","_getType","_isStorefrontErrorResponseBody","_isInternalErrorResponseBody","internalType","split","errorResponse","storefrontErrorResponse","internalErrorResponse","clearErrorReducer","error_actions","ClearError","isClearErrorAction","omit_deep","replace","currentValue","newValue","is_equal","objectSet","DEFAULT_STATE","statuses","billingAddressReducer","data_store_","dataReducer","errorsReducer","statusesReducer","reducer","billing_address_actions","UpdateBillingAddressSucceeded","ContinueAsGuestSucceeded","checkout_actions","order_actions","LoadOrderSucceeded","billingAddress","UpdateBillingAddressRequested","UpdateBillingAddressFailed","ContinueAsGuestRequested","ContinueAsGuestFailed","arrayReplace","currentArray","newArray","matchObject","a","b","sameAsCurrentCount","sameAsNewCount","countSameAsReplaced","replacedValue","newItem","currentItem","is_plain_object","objectMerge","currentObject","newObject","cart_state_DEFAULT_STATE","cartReducer","cart_reducer_dataReducer","cart_reducer_errorsReducer","cart_reducer_statusesReducer","consignment_actions","coupon_actions","ApplyCouponSucceeded","RemoveCouponSucceeded","gift_certificate_actions","ApplyGiftCertificateSucceeded","RemoveGiftCertificateSucceeded","checkout_button_state_DEFAULT_STATE","DEFAULT_DATA_STATE","initializedContainers","DEFAULT_ERROR_STATE","DEFAULT_STATUS_STATE","checkoutButtonReducer","checkout_button_reducer_dataReducer","checkout_button_reducer_errorsReducer","checkout_button_reducer_statusesReducer","checkout_button_actions","InitializeButtonSucceeded","containerId","DeinitializeButtonSucceeded","InitializeButtonRequested","InitializeButtonFailed","DeinitializeButtonRequested","DeinitializeButtonFailed","config_state_DEFAULT_STATE","configReducer","config_reducer_dataReducer","config_reducer_errorsReducer","config_reducer_statusesReducer","config_actions","LoadConfigSucceeded","LoadConfigFailed","LoadConfigRequested","coupon_state_DEFAULT_STATE","couponReducer","coupon_reducer_dataReducer","coupon_reducer_errorsReducer","coupon_reducer_statusesReducer","coupons","ApplyCouponRequested","ApplyCouponFailed","RemoveCouponRequested","RemoveCouponFailed","gift_certificate_state_DEFAULT_STATE","giftCertificateReducer","gift_certificate_reducer_dataReducer","gift_certificate_reducer_errorsReducer","gift_certificate_reducer_statusesReducer","giftCertificates","ApplyGiftCertificateRequested","ApplyGiftCertificateFailed","RemoveGiftCertificateRequested","RemoveGiftCertificateFailed","customer_state_DEFAULT_STATE","customerReducer","customer_reducer_dataReducer","customer","customer_strategy_state_DEFAULT_STATE","customerStrategyReducer","customer_strategy_reducer_dataReducer","customer_strategy_reducer_errorsReducer","customer_strategy_reducer_statusesReducer","customer_strategy_actions","InitializeSucceeded","isInitialized","DeinitializeSucceeded","InitializeRequested","initializeError","initializeMethodId","InitializeFailed","DeinitializeRequested","deinitializeError","deinitializeMethodId","DeinitializeFailed","SignInRequested","SignInSucceeded","signInError","signInMethodId","SignInFailed","SignOutRequested","SignOutSucceeded","signOutError","signOutMethodId","SignOutFailed","WidgetInteractionStarted","WidgetInteractionFinished","widgetInteractionError","widgetInteractionMethodId","WidgetInteractionFailed","isInitializing","isDeinitializing","isSigningIn","isSigningOut","isWidgetInteracting","country_state_DEFAULT_STATE","countryReducer","country_reducer_dataReducer","country_reducer_errorsReducer","country_reducer_statusesReducer","country_actions","LoadCountriesSucceeded","LoadCountriesRequested","LoadCountriesFailed","order_state_DEFAULT_STATE","orderReducer","order_reducer_dataReducer","order_reducer_errorsReducer","metaReducer","order_reducer_statusesReducer","LoadOrderPaymentsSucceeded","FinalizeOrderSucceeded","SubmitOrderSucceeded","callbackUrl","order","orderToken","token","payment","spam_protection_actions","Completed","LoadOrderRequested","LoadOrderPaymentsRequested","LoadOrderFailed","LoadOrderPaymentsFailed","paymentReducer","payment_reducer_dataReducer","payment_actions","SubmitPaymentSucceeded","payment_method_state_DEFAULT_STATE","paymentMethodReducer","payment_method_reducer_dataReducer","payment_method_reducer_errorsReducer","payment_method_reducer_metaReducer","payment_method_reducer_statusesReducer","payment_method_actions","array","defaultPredicate","mergeOrPush","gateway","methodA","methodB","loadMethodId","loadMethodError","isLoadingMethod","payment_strategy_state_DEFAULT_STATE","paymentStrategyReducer","payment_strategy_reducer_dataReducer","payment_strategy_reducer_errorsReducer","payment_strategy_reducer_statusesReducer","payment_strategy_actions","ExecuteRequested","ExecuteSucceeded","executeError","executeMethodId","ExecuteFailed","FinalizeRequested","FinalizeSucceeded","finalizeError","finalizeMethodId","FinalizeFailed","isExecuting","isFinalizing","instrument_state_DEFAULT_STATE","instrumentReducer","instrument_reducer_dataReducer","instrument_reducer_errorsReducer","instrument_reducer_metaReducer","instrument_reducer_statusesReducer","instrument_actions","LoadInstrumentsSucceeded","vaultedInstruments","DeleteInstrumentSucceeded","instrument","bigpayToken","instrumentId","LoadInstrumentsRequested","DeleteInstrumentRequested","deleteError","failedInstrument","LoadInstrumentsFailed","DeleteInstrumentFailed","isDeleting","deletingInstrument","remote_checkout_state_DEFAULT_STATE","remoteCheckoutReducer","remote_checkout_reducer_dataReducer","remote_checkout_actions","InitializeRemoteBillingSucceeded","billing","InitializeRemoteShippingSucceeded","shipping","LoadRemoteSettingsSucceeded","UpdateRemoteCheckout","consignment_state_DEFAULT_STATE","updateShippingOptionError","updateError","isUpdating","isUpdatingShippingOption","consignmentReducer","consignment_reducer_dataReducer","consignment_reducer_errorsReducer","consignment_reducer_statusesReducer","customer_actions","SignOutCustomerSucceeded","_d","_e","_f","shipping_country_state_DEFAULT_STATE","shippingCountryReducer","shipping_country_reducer_dataReducer","shipping_country_reducer_errorsReducer","shipping_country_reducer_statusesReducer","shipping_country_actions","LoadShippingCountriesSucceeded","LoadShippingCountriesRequested","LoadShippingCountriesFailed","shipping_strategy_state_DEFAULT_STATE","shippingStrategyReducer","shipping_strategy_reducer_dataReducer","shipping_strategy_reducer_errorsReducer","shipping_strategy_reducer_statusesReducer","shipping_strategy_actions","UpdateAddressRequested","UpdateAddressSucceeded","updateAddressError","updateAddressMethodId","UpdateAddressFailed","SelectOptionRequested","SelectOptionSucceeded","selectOptionError","selectOptionMethodId","SelectOptionFailed","isUpdatingAddress","isSelectingOption","checkout_state_DEFAULT_STATE","checkoutReducer","checkout_reducer_dataReducer","checkout_reducer_errorsReducer","checkout_reducer_statusesReducer","orderId","createFreezeProxy","trap","proxy","iteratee","getPrototypeOf","traversePrototypeOf","charAt","createProxy","createFormSelectorFactory","getShippingAddressFields","create_selector","countries","countryCode","selectedCountry","storeConfig","formFields","shippingAddressFields","field","processField","getBillingAddressFields","billingAddressFields","country","items","label","fieldType","itemtype","processCountry","subdivisions","required","processProvince","hasPostalCodes","Boolean","processsPostCode","normalize","firstName","lastName","company","address1","address2","city","stateOrProvince","postalCode","phone","customFields","createConsignmentSelectorFactory","getConsignmentById","addressA","addressB","getShippingOption","selectedShippingOption","getLoadError","loadError","getCreateError","getLoadShippingOptionsError","loadShippingOptionsError","getUnassignedItems","assignedLineItemIds","itemIds","getUpdateError","getDeleteError","getItemAssignmentError","getUpdateShippingOptionError","isLoading","isLoadingShippingOptions","isCreating","isAssigningItems","createInternalCheckoutSelectorsFactory","getBillingAddress","getContinueAsGuestError","isContinuingAsGuest","getInitializeError","getDeinitializeError","getCoupons","getRemoveError","getApplyError","isApplying","isRemoving","getCustomer","getShippingAddress","getInternalPayment","getGatewayPayment","getHostedPayment","getPaymentId","getPaymentStatus","getPaymentToken","getPaymentRedirectUrl","isPaymentDataRequired","isPaymentDataSubmitted","createBillingAddressSelector","continueAsGuestError","createCartSelector","createCartSelectorFactory","createCheckoutButtonSelector","createConfigSelector","getConfig","getStoreConfig","getExternalSource","externalSource","createConfigSelectorFactory","createCountrySelector","getCountries","createCountrySelectorFactory","createCouponSelector","removeCouponError","applyCouponError","isApplyingCoupon","isRemovingCoupon","createCustomerSelector","createCustomerStrategySelector","getSignInError","getSignOutError","getWidgetInteractionError","createCustomerStrategySelectorFactory","createGiftCertificateSelector","getGiftCertificates","removeGiftCertificateError","applyGiftCertificateError","isApplyingGiftCertificate","isRemovingGiftCertificate","createGiftCertificateSelectorFactory","createInstrumentSelector","getInstruments","instruments","getInstrumentsMeta","createInstrumentSelectorFactory","createFormSelector","createPaymentMethodSelector","getPaymentMethods","paymentMethods","getPaymentMethodsMeta","getPaymentMethod","gatewayId","getLoadMethodError","createPaymentMethodSelectorFactory","createPaymentStrategySelector","getExecuteError","getFinalizeError","getWidgetInteractingError","createPaymentStrategySelectorFactory","createRemoteCheckoutSelector","createShippingAddressSelector","createShippingCountrySelector","getShippingCountries","createShippingCountrySelectorFactory","createShippingStrategySelector","getUpdateAddressError","getSelectOptionError","createShippingStrategySelectorFactory","createConsignmentSelector","createCheckoutSelector","getGrandTotal","useStoreCredit","grandTotal","storeCredit","max","createCheckoutSelectorFactory","createOrderSelector","getOrder","getOrderMeta","createOrderSelectorFactory","createPaymentSelector","payments","providerId","providerType","payment_method_types","internalPayment","step","redirectUrl","paymentMethod","nonce","payment_status_types","checkoutButton","customerStrategies","form","paymentStrategies","remoteCheckout","shippingCountries","shippingStrategies","selectors","shouldWarnMutation","createCheckoutStore","initialState","requestErrorFactory","factory","actionTransformer","request_error_factory","unrecoverable_error","payment_method_invalid_error","action$","every","createInternalCheckoutSelectors","stateTransformer","CheckoutNotAvailableError","checkout_request_sender_CheckoutRequestSender","CheckoutRequestSender","content_type","join_includes","checkout_default_includes","checkout_not_available_error","mapToInternalCoupon","couponTypes","coupon","displayName","discountType","couponType","mapToInternalAddress","addressId","isBillingAddressLike","addressLine1","addressLine2","province","provinceCode","stateOrProvinceCode","postCode","selectorDecorator","memoizedMethod","bind_decorator","cachedValue","is_private","selectorMethodDecorator","checkout_button_error_selector","CheckoutButtonErrorSelector","_checkoutButton","getInitializeButtonError","getDeinitializeButtonError","checkout_button_status_selector","CheckoutButtonStatusSelector","isInitializingButton","isDeinitializingButton","createCheckoutButtonSelectors","CheckoutButtonMethodType","checkout_button_initializer","CheckoutButtonInitializer","_store","_buttonStrategyActionCreator","_state","subscribe","subscriber","filters","initializeButton","containerIds","selector","idPrefix","containers","querySelectorAll","invalid_argument_error","container","setUniqueElementId","queueId","dispatch","deinitializeButton","deinitialize","CheckoutButtonStrategyActionCreator","_registry","_paymentMethodActionCreator","throw_error_action","checkout_button_method_type","BraintreePaypalButtonStrategy","_checkoutActionCreator","_braintreeSDKCreator","_paypalScriptLoader","_formPoster","_offerCredit","paypalOptions","braintreepaypalcredit","braintreepaypal","_paymentMethod","missing_data_error","allowedSources","disallowedSources","allowCredit","FUNDING","CREDIT","Button","render","env","testMode","commit","shouldProcessPayment","funding","allowed","disallowed","style","shape","_setupPayment","onPaymentError","onAuthorize","_tokenizePayment","onAuthorizeError","onError","addresses","not_initialized_error","CheckoutButtonNotInitialized","createPayment","flow","enableShippingAddress","shippingAddressEditable","shippingAddressOverride","_mapToBraintreeAddress","currency","offerCredit","tokenizePayment","postForm","payment_type","provider","device_data","shipping_address","JSON","stringify","_mapToLegacyShippingAddress","billing_address","_mapToLegacyBillingAddress","details","recipientName","email","first_name","last_name","phone_number","address_line_1","line1","address_line_2","line2","country_code","postal_code","googlepay_button_strategy","GooglePayButtonStrategy","_googlePayPaymentProcessor","_methodId","_getMethodId","_walletButton","_createSignInButton","parentNode","removeChild","getElementById","googlePayButton","createButton","_handleWalletButtonClick","appendChild","preventDefault","displayWallet","paymentData","handleSuccess","updateShippingAddress","_onPaymentSelectComplete","_onError","Content-Type","masterpass_button_strategy","MasterpassButtonStrategy","_masterpassScriptLoader","initializationData","load","masterpass","_masterpassClient","_signInButton","buttonContainer","button","src","_createMasterpassPayload","allowedCardTypes","cartAmount","cartId","suppressShippingAddress","get_callback_url","PaypalButtonStrategy","_host","merchantId","clientId","actions","internal_api_headers","res","paymentID","payerID","paymentId","payerId","payerInfo","payer","payer_info","createCheckoutButtonInitializer","host","create_checkout_store","requestSender","request_sender_","formPoster","form_poster_","checkout_button_strategy_action_creator","registry","registry_registry","scriptLoader","script_loader_","checkoutActionCreator","checkout_action_creator","checkout_request_sender","config_action_creator","config_request_sender","BRAINTREE_PAYPAL","braintree_paypal_button_strategy","braintree_sdk_creator","braintree_script_loader","paypal_script_loader","BRAINTREE_PAYPAL_CREDIT","MASTERPASS","masterpass_script_loader","GOOGLEPAY_BRAINTREE","create_googlepay_payment_processor","googlepay_braintree_initializer","GOOGLEPAY_STRIPE","googlepay_stripe_initializer","PAYPALEXPRESS","paypal_button_strategy","createCheckoutButtonRegistry","payment_method_action_creator","payment_method_request_sender","NotEmbeddableErrorType","BrowserStorage","_namespace","getItem","rawValue","external_local_storage_fallback_default","withNamespace","parse","removeItem","getItemOnce","setItem","InvalidLoginTokenError","NotEmbeddableError","UnknownError","standard_error","embedded_checkout","EmbeddedCheckout","_iframeCreator","_messageListener","_messagePoster","_loadingIndicator","_storage","_location","_isAttached","onComplete","embedded_checkout_events","CheckoutComplete","CheckoutError","onLoad","CheckoutLoaded","onFrameLoad","FrameLoaded","onSignOut","SignedOut","_configureStyles","attach","show","_allowCookie","_attemptLogin","createFrame","iframe","_iframe","hide","_retryAllowCookie","FrameError","detach","iFrameResizer","close","contentWindow","styles","embedded_content_events","StyleConfigured","parse_url","reject","invalid_login_token_error","encodeURIComponent","visibility","not_embeddable_error","MissingContent","DEFAULT_STYLES","size","color","backgroundColor","ROTATION_ANIMATION","LoadingIndicator","_styles","_defineAnimation","_container","_buildContainer","_indicator","_buildIndicator","parentId","parent_1","opacity","handleTransitionEnd","display","bottom","left","height","width","position","right","top","transition","indicator","borderRadius","border","borderColor","margin","transform","transformStyle","animation","head","sheet","CSSStyleSheet","insertRule","ResizableIframeCreator","MissingContainer","allowPaymentRequest","_toResizableFrame","timeoutInterval","setTimeout","handleMessage","is_iframe_event","contentId","iframes","scrolling","sizeWidth","heightCalculationMethod","originalIframeResizer","iframeResizer","clearTimeout","embedCheckout","STORAGE_PREFIX","resizable_iframe_creator","iframe_event_listener","iframe_event_poster","loading_indicator","loadingIndicator","browser_storage","TimeoutError","reselect__WEBPACK_IMPORTED_MODULE_0__","_with_memoized_combiner__WEBPACK_IMPORTED_MODULE_1__","joinIncludes","includes","ConfigActionCreator","_configRequestSender","_config_actions__WEBPACK_IMPORTED_MODULE_4__","ConfigRequestSender","BillingAddressActionCreator","continueAsGuest","credentials","_common_error_errors__WEBPACK_IMPORTED_MODULE_3__","isGuest","billingAddressRequestBody","existingBillingAddressRequestBody","_billing_address_actions__WEBPACK_IMPORTED_MODULE_5__","_createOrUpdateBillingAddress","createAddress","BillingAddressRequestSender","Registry","_factories","_instances","defaultToken","cacheToken","_getInstance","_hasFactory","_error_errors__WEBPACK_IMPORTED_MODULE_1__","_hasInstance","MasterpassScriptLoader","RemoteCheckoutSynchronizationError","GooglePayBraintreeInitializer","hasShippingAddress","googleBraintreePaymentInstance","_googlePaymentInstance","_createGooglePayPayload","parseResponse","paymentMethodData","tokenizationData","androidPayCards","cardType","lastFour","lastTwo","binData","platformToken","googlePayBraintreePaymentDataRequest","merchantInfo","authJwt","merchantName","googleMerchantName","googleMerchantId","transactionInfo","currencyCode","totalPriceStatus","totalPrice","toFixed","cardRequirements","billingAddressRequired","billingAddressFormat","shippingAddressRequired","emailRequired","phoneNumberRequired","_mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2","createPaymentDataRequest","googlePayBraintreeDataRequestV1","apiVersion","apiVersionMinor","allowedPaymentMethods","parameters","allowedAuthMethods","allowedCardNetworks","billingAddressParameters","format","tokenizationSpecification","braintree:apiVersion","braintree:authorizationFingerprint","paymentMethodTokenizationParameters","braintree:merchantId","braintree:sdkVersion","shippingAddressParameters","GooglePayStripeInitializer","_mapGooglePayStripeDataRequestToGooglePayDataRequestV2","card","last4","err","stripe:version","stripeVersion","stripe:publishableKey","stripePublishableKey","mapToInternalCustomer","_address__WEBPACK_IMPORTED_MODULE_0__","customerId","fullName","mapToInternalGiftCertificate","giftCertificate","discountedAmount","used","remainingBalance","remaining","balance","purchaseDate","mapToInternalOrder","_cart__WEBPACK_IMPORTED_MODULE_1__","_coupon__WEBPACK_IMPORTED_MODULE_3__","orderMeta","customerCanBeCreated","mapToInternalOrderPayment","subtotal","baseAmount","sum","discountNotifications","totalDiscountedAmount","appliedGiftCertificates","socialData","mapToInternalSocialDataList","hasDigitalItems","isDownloadable","isComplete","shippingCostTotal","amountBeforeDiscount","shippingCostBeforeDiscount","integerAmountBeforeDiscount","mapToStoreCredit","taxes","taxTotal","handling","handlingCostTotal","orderAmount","orderAmountAsInteger","mapToInternalPaymentStatus","isDefaultOrderPayment","helpText","instructions","returnUrl","socialDataObject","digitalItems","socialMedia","image","link","shareText","text","sharingLink","channelName","channel","channelCode","PaypalScriptLoader","ErrorActionCreator","clearError","getEnvironment","process","NODE_ENV","e","ConsoleLogger","_console","log","messages","_logToConsole","info","warn","debug","NoopLogger","isEnabled","logger","console_logger","console","noop_logger","getDefaultLogger","CouponActionCreator","_couponRequestSender","applyCoupon","removeCoupon","CouponRequestSender","couponCode","checkout_params","GiftCertificateActionCreator","_giftCertificateRequestSender","applyGiftCertificate","removeGiftCertificate","GiftCertificateRequestSender","giftCertificateCode","CustomerStrategyActionCreator","_strategyRegistry","signIn","signOut","widgetInteraction","AmazonPayScriptLoader","loadWidget","onPaymentReady","region","toLowerCase","_configureWidget","onLoginReady","amazon","Login","setClientId","setUseCookie","onAmazonLoginReady","OffAmazonPayments","onAmazonPaymentsReady","BraintreeVisaCheckoutPaymentProcessor","createInitOptions","settings","locale","collectShipping","paymentRequest","String","braintreeVisaCheckout","tokenize","tokenizedPayload","_toVisaCheckoutAddress","_postForm","userData","cardInformation","userEmail","card_information","_getCardInformation","_getAddress","phoneNumber","streetAddress","extendedAddress","locality","number","createBraintreeVisaCheckoutPaymentProcessor","braintreeScriptLoader","braintreeSDKCreator","braintree_visacheckout_payment_processor","VisaCheckoutScriptLoader","V","ChasePayScriptLoader","JPMC","RemoteCheckoutRequestSender","initializeBilling","methodName","initializeShipping","initializePayment","loadSettings","generateToken","trackAuthorizationEvent","RemoteCheckoutActionCreator","_remoteCheckoutRequestSender","InitializeRemoteBillingRequested","InitializeRemoteBillingFailed","InitializeRemoteShippingRequested","InitializeRemoteShippingFailed","InitializeRemotePaymentRequested","InitializeRemotePaymentSucceeded","InitializeRemotePaymentFailed","LoadRemoteSettingsRequested","LoadRemoteSettingsFailed","SignOutRemoteCustomerRequested","SignOutRemoteCustomerSucceeded","SignOutRemoteCustomerFailed","CustomerActionCreator","_customerRequestSender","signInCustomer","SignInCustomerRequested","SignInCustomerSucceeded","SignInCustomerFailed","signOutCustomer","SignOutCustomerRequested","SignOutCustomerFailed","CustomerRequestSender","NotImplementedError","AmazonPayCustomerStrategy","_remoteCheckoutActionCreator","amazonOptions","not_implemented_error","useAmazonAddressBook","_handleAuthorization","authorize","popup","scope","tokenPrefix","BraintreeVisaCheckoutCustomerStrategy","_customerStrategyActionCreator","_braintreeVisaCheckoutPaymentProcessor","_visaCheckoutScriptLoader","_buttonClassName","visaCheckoutOptions","braintreevisacheckout","initOptions","storeProfile","storeLanguage","signInButton","init","on","paymentSuccessPayload","_paymentInstrumentSelected","buttonClass","querySelector","_insertVisaCheckoutButton","visaCheckoutButton","className","innerHTML","ChasePayCustomerStrategy","_chasePayScriptLoader","chasePayOptions","chasepay","digitalSessionId","ChasePay","configure","language","isChasePayUp","insertButtons","EventType","START_CHECKOUT","sessionId","startCheckout","COMPLETE_CHECKOUT","requestId","merchantRequestId","_setExternalCheckoutData","_reloadPage","sessionToken","sendRequest","fromChasePay","DefaultCustomerStrategy","_customerActionCreator","googlepay_customer_strategy","GooglePayCustomerStrategy","googlePayOptions","_getGooglePayOptions","googlepaybraintree","googlepaystripe","MasterpassCustomerStrategy","masterpassOptions","Masterpass","SquareCustomerStrategy","CountryActionCreator","_countryRequestSender","loadCountries","CountryRequestSender","_config","Accept-Language","OrderRequestSender","loadOrder","submitOrder","finalizeOrder","OrderActionCreator","_orderRequestSender","_checkoutValidator","_spamProtectionActionCreator","loadOrderPayments","loadCurrentOrder","_getCurrentOrderId","SubmitOrderRequested","spamProtectionToken","checkoutSettings","isSpamProtectionEnabled","validate","_mapToOrderRequestBody","customerMessage","SubmitOrderFailed","FinalizeOrderRequested","FinalizeOrderFailed","executeSpamProtection","execute","MutationObserverFactory","callback","MutationObserver","SpamProtectionFailedError","SpamProtectionNotCompletedError","GoogleRecaptcha","googleRecaptchaScriptLoader","mutationObserverFactory","sitekey","event$","_event$","recaptcha","getResponse","error-callback","spam_protection_failed_error","_recaptcha","_watchRecaptchaChallengeWindow","iframeElement","iframeContainer","parentElement","spam_protection_not_completed_error","observe","attributeFilter","GoogleRecaptchaScriptLoader","_loadPromise","_loadScript","grecaptcha","SpamProtectionActionCreator","_googleRecaptcha","recaptchaSitekey","googleRecaptchaSitekey","SubmitFailed","PaymentStrategyType","OrderFinalizationNotRequiredError","payment_strategy_type","PaymentStrategyActionCreator","_orderActionCreator","strategy","getByMethod","NO_PAYMENT_DATA_REQUIRED","finalize","_loadOrderPaymentsIfNeeded","order_finalization_not_required_error","CartComparator","cartA","cartB","_normalize","sort","itemA","itemB","localeCompare","giftWrapping","CartChangedError","CheckoutValidator","comparator","cart_comparator","_compareCoupons","_compareGiftCertificates","cart_changed_error","couponsA","couponsB","giftCertificatesA","giftCertificatesB","PaymentActionCreator","_paymentRequestSender","_paymentRequestTransformer","submitPayment","SubmitPaymentRequested","SubmitPaymentFailed","initializeOffsitePayment","InitializeOffsitePaymentRequested","InitializeOffsitePaymentSucceeded","InitializeOffsitePaymentFailed","PaymentRequestSender","_transformResponse","statusText","isVaultedInstrument","OrderIncludes","PaymentRequestTransformer","checkoutState","_getPaymentMethod","shippingOption","contextConfig","instrumentMeta","paymentMeta","internalCustomer","map_to_internal_customer","authToken","vaultAccessToken","map_to_internal_address","map_to_internal_shipping_option","map_to_internal_cart","map_to_internal_order","quoteMeta","geoCountryCode","source","paymentMethodSelector","PaymentStrategyRegistry","_getToken","_hasFactoryForMethod","_isLegacyMethod","LEGACY","OFFSITE","CREDIT_CARD","clientSidePaymentProviders","paymentSettings","PaymentArgumentInvalidError","invalidFields","PaymentMethodCancelledError","AffirmPaymentStrategy","_paymentActionCreator","_affirmScriptLoader","publicKey","affirm","_affirm","payment_argument_invalid_error","requestOptions","PhysicalItemsCategories","DigitalItemsCategories","_getCheckoutInformation","open","onFail","failObject","reason","payment_method_cancelled_error","onSuccess","successObject","ui","paymentPayload","checkout_token","_getBillingAddress","merchant","user_confirmation_url","links","checkoutLink","user_cancel_url","user_confirmation_url_action","_getShippingAddress","_getItems","metadata","shipping_type","_getShippingType","platform_type","platform_version","platform_affirm","discounts","_getDiscounts","order_id","shipping_amount","tax_amount","total","first","last","full","zipcode","display_name","sku","unit_price","salePrice","qty","item_image_url","item_url","categories","_getCategories","customItems","_g","listPrice","line","discount_amount","discount_display_name","DISCOUNTED_AMOUNT","categoryTree","category","affirmJs","Function","AffirmScriptLoader","apikey","scriptURI","_getScriptURI","AfterpayPaymentStrategy","_afterpayScriptLoader","storeCountryName","storeCountry","_mapCountryToISO2","afterpaySdk","_afterpaySdk","_redirectToAfterpay","afterpay","orderPayload","countryName","redirect","SCRIPTS_DEFAULT","SCRIPTS_US","AfterpayScriptLoader","AfterPay","isInternalAddressEqual","ignoredKeys","mapFromInternalAddress","AmazonPayPaymentStrategy","_billingAddressActionCreator","_walletOptions","_createWallet","referenceId","_getOrderReferenceId","sellerId","_getMerchantId","is3dsEnabled","_processPaymentWith3ds","onPaymentSelect","onReady","walletOptions","amazonOrderReferenceId","design","designMode","orderReference","_synchronizeBillingAddress","_updateOrderReference","widget","Widgets","Wallet","remote_checkout_synchronization_error","remoteAddress","internalBillingAddress","getAmazonOrderReferenceId","initConfirmationFlow","confirmationFlow","success","Overlay","_element","_createElement","_registerClick","remove","_unregisterClick","_removeAfterTransition","element","background","transitionDuration","zIndex","onClick","onClick_1","handeTransition","propertyName","promise","cancellable","cancel","race","BraintreePaymentProcessor","_overlay","_threeDSecureOptions","preloadPaypal","tokenizeCard","requestData","_mapToCreditCard","creditCards","focusWindow","useraction","verifyCard","addFrame","removeFrame","cancelVerifyCard","verification","cancellable_promise","appendSessionId","processedPayment","creditCard","cardholderName","ccName","ccNumber","cvv","ccCvv","expirationDate","ccExpiry","month","year","endpoint","isCreditCardLike","BraintreeCreditCardPaymentStrategy","_braintreePaymentProcessor","_is3dsEnabled","_handleError","orderRequest","_preparePaymentData","_isUsingVaulting","shouldSaveInstrument","tokenizedCard","CardinalInitializationType","CardinalEventType","CardinalValidatedAction","CardinalPaymentType","CardinalTriggerEvents","CardinalPaymentBrand","CardinalSignatureVerification","BraintreePaypalPaymentStrategy","_credit","braintreeOptions","isBraintreeError","BraintreeVisaCheckoutPaymentStrategy","_paymentStrategyActionCreator","visaInitOptions","CardinalThreeDSecureFlow","_cardinalClient","prepare","start","runBinProcess","_getBinNumber","getThreeDSecureData","three_ds_result","_getOrderData","entry","iin","CardinalSignatureValidationErrors","ChasePayEventType","CardinalClient","_sdk","_getClientSDK","SetupCompleted","off","Validated","ActionCode","ErrorNumber","ErrorDescription","setup","Init","jwt","binNumber","BinProcess","Status","threeDSecureData","orderData","Success","NoAction","Payment","ExtendedData","SignatureVerification","Yes","Failure","continueObject","AcsUrl","acs_url","Payload","merchant_data","partialOrder","_mapToPartialOrder","payer_auth_request","continue","CCA","transactionId","consumer","BillingAddress","_mapToCardinalAddress","Account","_mapToCardinalAccount","Email1","ShippingAddress","Consumer","OrderDetails","OrderNumber","Amount","CurrencyCode","OrderChannel","TransactionId","AccountNumber","Number","ExpirationMonth","ExpirationYear","NameOnAccount","CardCode","cardinalAddress","FirstName","LastName","Address1","City","State","PostalCode","CountryCode","Address2","Phone1","CardinalScriptLoader","Cardinal","CardBrand","DigitalWalletType","chasepay_payment_strategy","ChasePayPaymentStrategy","_wepayRiskClient","_walletEvent$","walletButton","_configureWallet","_chasePayClient","_getPayment","_displayWallet","_createOrder","logoContainer","insertBrandings","CancelCheckout","onCancel","CompleteCheckout","_setSessionToken","showLoadingAnimation","getRiskToken","riskToken","paymentCryptogram","cryptogramId","eci","btoa","reqTokenId","expDate","substr","accountNum","accountMask","extraData","ConvergePaymentStrategy","PaReq","TermUrl","callback_url","MD","CreditCardPaymentStrategy","CyberSourcePaymentStrategy","_threeDSecureFlow","googlepay_payment_strategy","GooglePayPaymentStrategy","_googlePayOptions","statusCode","KlarnaPaymentStrategy","_klarnaScriptLoader","_supportedEUCountries","klarnaCredit","_klarnaCredit","_unsubscribe","_loadWidget","_authorize","authorizationToken","authorization_token","klarna","client_token","_getUpdateSessionData","_mapToKlarnaAddress","klarnaAddress","street_address","given_name","family_name","street_address2","updateSessionData","approved","show_form","KlarnaScriptLoader","Klarna","Credit","LegacyPaymentStrategy","masterpass_payment_strategy","MasterpassPaymentStrategy","NoPaymentDataRequiredPaymentStrategy","OfflinePaymentStrategy","OffsitePaymentStrategy","_shouldSubmitFullPayload","PaypalProPaymentStrategy","_isPaymentAcknowledged","PaypalExpressPaymentStrategy","_useRedirectFlow","paypalexpress","useRedirectFlow","_isInContextEnabled","_paypalSdk","environment","closeFlow","_isAcknowledgedOrFinalized","initXO","startFlow","SagePayPaymentStrategy","UnsupportedBrowserError","SquarePaymentStrategy","_syncPaymentMethod","createSquareForm","_paymentForm","_getFormOptions","build","_getNonceInstrument","_getCountryCode","toUpperCase","_deferredRequestNonce","requestCardNonce","deferred","squareOptions","square","_squareOptions","callbacks","cardNonceResponseReceived","cardData","billingContact","shippingContact","digital_wallet_type","none","_handleWalletNonceResponse","_handleCardNonceResponse","createPaymentRequest","_paymentRequestPayload","methodsSupported","methods","_showPaymentMethods","paymentFormLoaded","_setPostalCode","unsupportedBrowserDetected","unsupported_browser_error","requestShippingAddress","requestBillingInfo","storeName","pending","setPostalCode","masterpassBtn","elementId","SquareScriptLoader","SqPaymentForm","StripeV3PaymentStrategy","_stripeScriptLoader","stripeOptions","stripev3","stripeJs","_stripeV3Client","cardElement","elements","mount","_cardElement","_getStripeJs","handleCardPayment","stripeResponse","paymentIntent","createPaymentMethod","_mapStripePaymentMethodOptions","stripePaymentMethod","stripeCardPaymentOptions","_mapStripeCardPaymentOptions","payment_method","unmount","_mapStripeBillingAddress","_mapStripeShippingAddress","_mapStripeBillingDetails","stripeBillingDetails","_mapStripeShippingDetails","stripeShippingDetails","_getCustomer","shippingDetails","receipt_email","save_payment_method","billing_details","StripeV3ScriptLoader","publishableKey","Stripe","betas","WepayRiskClient","_riskClient","WePay","risk","generate_risk_token","get_risk_token","WepayPaymentStrategy","orderActionCreator","paymentActionCreator","payloadWithToken","credit_card_payment_strategy","PaymentMethodDeclinedError","ZipPaymentStrategy","_zipScriptLoader","zip","_zipClient","zipClient","Checkout","_prepareForReferredRegistration","payment_method_declined_error","onCheckout","openModal","externalId","ZipScriptLoader","Zip","createPaymentStrategyRegistry","paymentClient","spamProtection","payment_strategy_registry","paymentRequestTransformer","payment_request_transformer","paymentRequestSender","payment_request_sender","billingAddressActionCreator","billing_address_action_creator","billing_address_request_sender","braintreePaymentProcessor","overlay","overlay_overlay","braintree_payment_processor","createBraintreePaymentProcessor","checkoutRequestSender","checkoutValidator","checkout_validator","spamProtectionActionCreator","spam_protection_action_creator","order_action_creator","order_request_sender","payment_action_creator","paymentMethodActionCreator","remoteCheckoutActionCreator","remote_checkout_action_creator","remote_checkout_request_sender","configActionCreator","paymentStrategyActionCreator","payment_strategy_action_creator","AFFIRM","affirm_payment_strategy","affirm_script_loader","AFTERPAY","afterpay_payment_strategy","afterpay_script_loader","AMAZON","amazon_pay_payment_strategy","amazon_pay_script_loader","CYBERSOURCE","cybersource_payment_strategy","cardinal_three_d_secure_flow","cardinal_client","cardinal_script_loader","KLARNA","klarna_payment_strategy","klarna_script_loader","legacy_payment_strategy","offline_payment_strategy","offsite_payment_strategy","PAYPAL","paypal_pro_payment_strategy","PAYPAL_EXPRESS","paypal_express_payment_strategy","PAYPAL_EXPRESS_CREDIT","SAGE_PAY","sage_pay_payment_strategy","SQUARE","square_payment_strategy","square_script_loader","no_payment_data_required_strategy","BRAINTREE","braintree_credit_card_payment_strategy","braintree_paypal_payment_strategy","BRAINTREE_VISA_CHECKOUT","braintree_visacheckout_payment_strategy","visacheckout_script_loader","CHASE_PAY","chasepay_script_loader","wepay_risk_client","BRAINTREE_GOOGLE_PAY","WE_PAY","wepay_payment_strategy","STRIPE_GOOGLE_PAY","ZIP","zip_payment_strategy","zip_script_loader","CONVERGE","converge_payment_strategy","STRIPEV3","stripev3_payment_strategy","stripev3_script_loader","ProjectionActionType","InstrumentActionCreator","_instrumentRequestSender","loadInstruments","session","_getSessionContext","_getCurrentAccessToken","_getValidAccessToken","currentToken","deleteInstrument","_isValidVaultAccessToken","date","newDate","valueOf","now","isFuture","vaultAccessExpiry","setMinutes","getMinutes","getVaultAccessToken","storeId","shopperCurrency","isTransactional","InstrumentResponseTransformer","transformResponse","_transformVaultedInstruments","vaulted_instruments","transformErrorResponse","transformVaultAccessResponse","expires_at","bigpay_token","defaultInstrument","default_instrument","last_4","expiryMonth","expiry_month","expiryYear","expiry_year","trustedShippingAddress","trusted_shipping_address","InstrumentRequestSender","_transformer","instrument_response_transformer","requestContext","_loadInstrumentsWithAddress","_loadInstruments","deleteShopperInstrument","loadInstrumentsWithAddress","ShippingCountryActionCreator","_shippingCountryRequestSender","ShippingCountryRequestSender","ShippingStrategyActionCreator","selectOption","mergedOptions","AmazonPayShippingStrategy","_consignmentActionCreator","_createAddressBook","optionId","onAddressSelect","AddressBook","_synchronizeShippingAddress","DefaultShippingStrategy","cloneDeep","input","cloneDeepSafe","cloneResult","createShallowEqualSelector","external_reselect_","create_shallow_equal_selector","with_memoized_combiner","createCheckoutSelectorsFactory","getShippingOptions","getSelectedShippingOption","getBillingCountries","getSelectedPaymentMethod","getError","getSelectShippingOptionError","isPending","isSelectingShippingOption","isCustomerStepPending","isPaymentStepPending","createCheckoutStoreSelector","availableShippingOptions","createCheckoutStoreErrorSelector","getLoadCheckoutError","getUpdateCheckoutError","getSubmitOrderError","getFinalizeOrderError","getLoadOrderError","getLoadCartError","getLoadBillingCountriesError","getLoadShippingCountriesError","getLoadPaymentMethodsError","getLoadPaymentMethodError","getInitializePaymentError","getInitializeCustomerError","getUpdateBillingAddressError","getUpdateShippingAddressError","getDeleteConsignmentError","getUpdateConsignmentError","getCreateConsignmentsError","getInitializeShippingError","getApplyCouponError","getRemoveCouponError","getApplyGiftCertificateError","getRemoveGiftCertificateError","getLoadInstrumentsError","getDeleteInstrumentError","getLoadConfigError","createCheckoutStoreStatusSelector","some","isLoadingCheckout","isUpdatingCheckout","isSubmittingOrder","isFinalizingOrder","isLoadingOrder","isLoadingCart","isLoadingBillingCountries","isLoadingShippingCountries","isLoadingPaymentMethods","isLoadingPaymentMethod","isInitializingPayment","isInitializingCustomer","isUpdatingBillingAddress","isUpdatingShippingAddress","isUpdatingConsignment","isDeletingConsignment","isCreatingConsignments","isInitializingShipping","isLoadingInstruments","isDeletingInstrument","isLoadingConfig","ErrorMessageTransformer","_messageCustomizer","trim","checkout_service","CheckoutService","_countryActionCreator","_couponActionCreator","_errorActionCreator","_giftCertificateActionCreator","_instrumentActionCreator","_shippingCountryActionCreator","_shippingStrategyActionCreator","isDevelopment","projection","_errorTransformer","error_message_transformer","isCheckoutServiceError","_selectorsFactory","_storeProjection","Synchronize","initial","notifyState","_dispatch","loadCheckoutAction","loadConfigAction","finalizeOrderIfNeeded","deinitializePayment","loadBillingCountries","loadShippingCountries","loadBillingAddressFields","loadShippingAddressFields","initializeCustomer","deinitializeCustomer","deinitializeShipping","assignItemsToAddress","unassignItemsToAddress","selectConsignmentShippingOption","updateBillingAddress","initializeSpamProtection","createCheckoutService","bigpay_client_","setHost","bigpayBaseUrl","createPaymentClient","orderRequestSender","google_recaptcha","google_recaptcha_script_loader","consignment_action_creator","consignment_request_sender","country_action_creator","country_request_sender","coupon_action_creator","coupon_request_sender","customer_strategy_action_creator","remoteCheckoutRequestSender","amazon_pay_customer_strategy","braintree_visacheckout_customer_strategy","chasepay_customer_strategy","square_customer_strategy","masterpass_customer_strategy","default_customer_strategy","customer_action_creator","customer_request_sender","createCustomerStrategyRegistry","error_action_creator","gift_certificate_action_creator","gift_certificate_request_sender","instrument_action_creator","instrument_request_sender","shipping_country_action_creator","shipping_country_request_sender","shipping_strategy_action_creator","consignmentRequestSender","consignmentActionCreator","amazon_pay_shipping_strategy","default_shipping_strategy","createShippingStrategyRegistry","handleFrameLoadedEvent","hasAttribute","setAttribute","isCustomError","iframe_embedded_checkout_messenger","IframeEmbeddedCheckoutMessenger","_untargetedMessagePoster","_messageHandlers","postComplete","_postMessage","postError","_transformError","postFrameError","untargeted","postFrameLoaded","postLoaded","postSignedOut","receiveStyles","handler","_notifyMessageHandlers","noop_embedded_checkout_messenger","NoopEmbeddedCheckoutMessenger","createEmbeddedCheckoutMessenger","parentWindow","parentOrigin","language_service","LanguageService","_logger","_transformConfig","locales","translations","_locale","_locales","_translations","_formatters","mapKeys","translationKey","KEY_PREFIX","getLocale","_hasTranslations","translate","prefixedKey","messageFormat","external_messageformat_","compile","_transformData","output","defaultTranslations","_flattenObject","parentKey","resultKey","createLanguageService","CurrencyFormatter","currencySettings","symbolLocation","symbol","thousandsSeparator","decimalSeparator","parseInt","_symbolLocation","_symbol","_thousandsSeparator","_decimalSeparator","formattedNumber","_formatNumber","formattedCurrency","_formatCurrency","positiveAmount","abs","_toFixed","decimalAmount","parsedIntegerAmount","precision","currency_service","CurrencyService","_storeConfig","_customerFormatter","currency_formatter","_storeFormatter","toCustomerCurrency","exchangeRate","toStoreCurrency","createCurrencyService","create_checkout_button_initializer","embed_checkout","ButtonType","ButtonColor","GooglePayPaymentProcessor","_googlePayScriptLoader","_googlePayInitializer","_consigmentActionCreator","buttonType","buttonColor","Short","Default","_googlePayClient","loadPaymentData","_getPaymentDataRequest","_updateBillingAddress","_mapGooglePayAddressToShippingAddress","googlePay","paymentDataRequest","_getGooglePayClient","_paymentDataRequest","isReadyToPay","google","api","PaymentsClient","_mapGooglePayAddressToBillingAddress","companyName","address3","administrativeArea","postPaymentData","remoteBillingAddress","googlePayAddressMapped","GooglePayScriptLoader","createGooglePayPaymentProcessor","initializer","googlepay_payment_processor","googlepay_script_loader","mapToInternalCart","promotions","notifications","map_to_internal_line_items","map_to_internal_coupon","promotion","banners","banner","placeholders","messageHtml","certificate","map_to_internal_gift_certificate","isShippingRequired","taxSubtotal"],"mappings":"2BACA,IAAAA,EAAA,GAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAC,QAGA,IAAAC,EAAAJ,EAAAE,GAAA,CACAG,EAAAH,EACAI,GAAA,EACAH,QAAA,IAUA,OANAI,EAAAL,GAAAM,KAAAJ,EAAAD,QAAAC,IAAAD,QAAAF,GAGAG,EAAAE,GAAA,EAGAF,EAAAD,QA0DA,OArDAF,EAAAQ,EAAAF,EAGAN,EAAAS,EAAAV,EAGAC,EAAAU,EAAA,SAAAR,EAAAS,EAAAC,GACAZ,EAAAa,EAAAX,EAAAS,IACAG,OAAAC,eAAAb,EAAAS,EAAA,CAA0CK,YAAA,EAAAC,IAAAL,KAK1CZ,EAAAkB,EAAA,SAAAhB,GACA,oBAAAiB,eAAAC,aACAN,OAAAC,eAAAb,EAAAiB,OAAAC,YAAA,CAAwDC,MAAA,WAExDP,OAAAC,eAAAb,EAAA,cAAiDmB,OAAA,KAQjDrB,EAAAsB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAArB,EAAAqB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFA1B,EAAAkB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAArB,EAAAU,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAzB,EAAA6B,EAAA,SAAA1B,GACA,IAAAS,EAAAT,KAAAqB,WACA,WAA2B,OAAArB,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAH,EAAAU,EAAAE,EAAA,IAAAA,GACAA,GAIAZ,EAAAa,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD/B,EAAAkC,EAAA,GAIAlC,IAAAmC,EAAA,qBClFAhC,EAAAD,QAAAkC,QAAA,0CCAAjC,EAAAD,QAAAkC,QAAA,wBCAAjC,EAAAD,QAAAkC,QAAA,yBCAAjC,EAAAD,QAAAkC,QAAA,sCCMA,IAAYC,EAAZrC,EAAAU,EAAA4B,EAAA,sBAAAD,IAAA,SAAYA,GACRA,EAAA,4DACAA,EAAA,4DACAA,EAAA,sDAEAA,EAAA,0DACAA,EAAA,0DACAA,EAAA,oDAEAA,EAAA,0DACAA,EAAA,0DACAA,EAAA,oDAEAA,EAAA,iEACAA,EAAA,iEACAA,EAAA,2DAEAA,EAAA,+DACAA,EAAA,+DACAA,EAAA,yDAnBJ,CAAYA,MAAqB,qCCJjC,IAAYE,EAAZvC,EAAAU,EAAA4B,EAAA,sBAAAC,IAAA,SAAYA,GACRA,EAAA,gDACAA,EAAA,sDACAA,EAAA,sDACAA,EAAA,kDACAA,EAAA,wDACAA,EAAA,wDACAA,EAAA,uDACAA,EAAA,6DACAA,EAAA,6DACAA,EAAA,2DACAA,EAAA,iEACAA,EAAA,iEACAA,EAAA,wEACAA,EAAA,0EACAA,EAAA,sEAfJ,CAAYA,MAA0B,mCCEtC,IAAYC,EAAZxC,EAAAU,EAAA4B,EAAA,sBAAAE,IAAA,SAAYA,GACRA,EAAA,gDACAA,EAAA,sDACAA,EAAA,sDACAA,EAAA,kDACAA,EAAA,wDACAA,EAAA,wDACAA,EAAA,sDACAA,EAAA,4DACAA,EAAA,4DACAA,EAAA,0DACAA,EAAA,gEACAA,EAAA,gEACAA,EAAA,uEACAA,EAAA,yEACAA,EAAA,qEAfJ,CAAYA,MAAyB,uECFzBC,kBAAZ,SAAYA,GACRA,IAAA,iDACAA,IAAA,6BACAA,IAAA,qCACAA,IAAA,6CACAA,IAAA,iDACAA,IAAA,+BACAA,IAAA,2CACAA,IAAA,mCACAA,IAAA,mCACAA,IAAA,+CACAA,IAAA,oDACAA,IAAA,4DAZJ,CAAYA,MAAoB,KAehC,IAAAC,EAAA,SAAAC,GACI,SAAAD,EACWE,GADX,IAAAC,EAGIF,EAAApC,KAAAuC,KAOR,SAAyBC,GACrB,OAAQA,GACR,KAAKN,EAAqBO,sBACtB,MAAO,iEAEX,KAAKP,EAAqBQ,YACtB,MAAO,sDAEX,KAAKR,EAAqBS,oBACtB,MAAO,8DAEX,KAAKT,EAAqBU,gBACtB,MAAO,0DAEX,KAAKV,EAAqBW,sBAC1B,KAAKX,EAAqBY,mBACtB,MAAO,+DAEX,KAAKZ,EAAqBa,aACtB,MAAO,uDAEX,KAAKb,EAAqBc,eACtB,MAAO,0EAEX,KAAKd,EAAqBe,eACtB,MAAO,yDAEX,KAAKf,EAAqBgB,qBACtB,MAAO,2FAEX,KAAKhB,EAAqBiB,uBACtB,MAAO,kEAEX,KAAKjB,EAAqBkB,2BACtB,MAAO,mEAEX,QACI,MAAO,+DA5CDC,CAAgBhB,KAASE,YAFxBD,EAAAD,UAIPC,EAAKlC,KAAO,mBACZkC,EAAKE,KAAO,iBAEpB,OAT8Cc,EAAA,UAAAnB,EAAAC,GAS9CD,EATA,CAA8CoB,EAAA,uCCf9C,IAAYC,EAAZ/D,EAAAU,EAAA4B,EAAA,sBAAAyB,IAAA,SAAYA,GACRA,EAAA,8DACAA,EAAA,oEACAA,EAAA,oEACAA,EAAA,4DACAA,EAAA,kEACAA,EAAA,kEACAA,EAAA,uDACAA,EAAA,6DACAA,EAAA,6DACAA,EAAA,2DACAA,EAAA,iEACAA,EAAA,iEAZJ,CAAYA,MAA0B,mCCItC,IAAYC,EAAZhE,EAAAU,EAAA4B,EAAA,sBAAA0B,IAAA,SAAYA,GACRA,EAAA,gDACAA,EAAA,gDACAA,EAAA,0CAEAA,EAAA,oDACAA,EAAA,oDACAA,EAAA,8CAPJ,CAAYA,MAAkB,8CCF9B,IAAAC,EAAA,SAAAtB,GAGI,SAAAuB,EAAYC,OCPuBrC,EAAaE,qBDOhDa,EACIF,EAAApC,KAAAuC,KAAMqB,GAAW,sCAAoCrB,YAHzDD,EAAAE,KAAO,WCL4BjB,EDUhBe,ECV6Bb,EDUvBoC,EAAWpC,UCThClB,OAAOuD,eACPvD,OAAOuD,eAAevC,EAAQE,GAE9BF,EAAOwC,UAAYtC,EDQoB,mBAA5BuC,MAAMC,kBACbD,MAAMC,kBAAkB3B,EAAIuB,GAE5BvB,EAAK4B,MAAQ,IAAKF,MAAM1B,EAAKsB,SAAUM,QAGnD,OAd2CC,EAAA,UAAAR,EAAAvB,GAc3CuB,EAdA,CAA2CK,2CEE3C,IAAYI,EAAZ3E,EAAAU,EAAA4B,EAAA,sBAAAqC,IAAA,SAAYA,GACRA,EAAA,8CACAA,EAAA,8CACAA,EAAA,wCAEAA,EAAA,gDACAA,EAAA,gDACAA,EAAA,0CAPJ,CAAYA,MAAgB,mCCF5B,IAAYC,EAAZ5E,EAAAU,EAAA4B,EAAA,sBAAAsC,IAAA,SAAYA,GACRA,EAAA,iEACAA,EAAA,iEACAA,EAAA,2DAEAA,EAAA,uDACAA,EAAA,uDACAA,EAAA,iDAPJ,CAAYA,MAAwB,oCCCpC,IAAYC,EAAZ7E,EAAAU,EAAA4B,EAAA,sBAAAuC,IAAA,SAAYA,GACRA,EAAA,0CACAA,EAAA,0CACAA,EAAA,oCAEAA,EAAA,2DACAA,EAAA,2DACAA,EAAA,qDAEAA,EAAA,8CACAA,EAAA,8CACAA,EAAA,wCAEAA,EAAA,kDACAA,EAAA,kDACAA,EAAA,4CAfJ,CAAYA,MAAe,mCCA3B,IAAYC,EAAZ9E,EAAAU,EAAA4B,EAAA,sBAAAwC,IAAA,SAAYA,GACRA,EAAA,2DACAA,EAAA,2DACAA,EAAA,qDAEAA,EAAA,6DACAA,EAAA,6DACAA,EAAA,uDAPJ,CAAYA,MAAuB,mCCCnC,IAAYC,EAAZ/E,EAAAU,EAAA4B,EAAA,sBAAAyC,IAAA,SAAYA,GACRA,EAAA,kDACAA,EAAA,wDACAA,EAAA,wDAEAA,EAAA,sDACAA,EAAA,4DACAA,EAAA,4DAPJ,CAAYA,MAAwB,oBCNpC5E,EAAAD,QAAAkC,QAAA,gDCMA,IAAY4C,EAAZhF,EAAAU,EAAA4B,EAAA,sBAAA0C,IAAA,SAAYA,GACRA,EAAA,iEACAA,EAAA,iEACAA,EAAA,2DAEAA,EAAA,mEACAA,EAAA,mEACAA,EAAA,6DAPJ,CAAYA,MAAyB,mCCDrC,IAAYC,EAAZjF,EAAAU,EAAA4B,EAAA,sBAAA2C,IAAA,SAAYA,GACRA,EAAA,sDACAA,EAAA,sDACAA,EAAA,gDAEAA,EAAA,wDACAA,EAAA,wDACAA,EAAA,kDAPJ,CAAYA,MAAoB,oCCFhC,IAAYC,EAAZlF,EAAAU,EAAA4B,EAAA,sBAAA4C,IAAA,SAAYA,GACRA,EAAA,qCACAA,EAAA,+BACAA,EAAA,iCACAA,EAAA,yBACAA,EAAA,2BACAA,EAAA,uBANJ,CAAYA,MAAyB,mCCCrC,IAAYC,EAAZnF,EAAAU,EAAA4B,EAAA,sBAAA6C,IAAA,SAAYA,GACRA,EAAA,uEACAA,EAAA,uEACAA,EAAA,iEAEAA,EAAA,yEACAA,EAAA,yEACAA,EAAA,mEAEAA,EAAA,uEACAA,EAAA,uEACAA,EAAA,iEAEAA,EAAA,6DACAA,EAAA,6DACAA,EAAA,uDAEAA,EAAA,oEACAA,EAAA,oEACAA,EAAA,8DAEAA,EAAA,8CArBJ,CAAYA,MAAwB,uDCA9BC,EAAmB,CACrBC,KAAM,GACNC,QAAS,GACTC,OAAQ,GAGZC,EAAA,SAAA7C,GAMI,SAAA6C,EACIC,EACAC,OAAAC,OAAA,IAAAD,EAAA,GAAAA,EAAEvB,EAAAwB,EAAAxB,QAASyB,EAAAD,EAAAC,OAFf/C,EAAAC,KAOU+C,EAAAJ,GAAAL,EAAEC,EAAAQ,EAAAR,KAAMC,EAAAO,EAAAP,QAASC,EAAAM,EAAAN,cAEvB1C,EAAAF,EAAApC,KAAAuC,KAAMqB,GAAW,sCAAoCrB,MAEhDnC,KAAO,eACZkC,EAAKE,KAAO,UACZF,EAAKwC,KAAOA,EACZxC,EAAKyC,QAAUA,EACfzC,EAAK0C,OAASA,EACd1C,EAAK+C,OAASA,GAAU,KAEhC,OAxBuD/B,EAAA,UAAA2B,EAAA7C,GAwBvD6C,EAxBA,CAAuD1B,EAAA,uCCNvD,IAAYgC,EAAZ9F,EAAAU,EAAA4B,EAAA,sBAAAwD,IAAA,SAAYA,GACRA,EAAA,4CACAA,EAAA,4CACAA,EAAA,sCAHJ,CAAYA,MAAgB,oCCJ5B9F,EAAAU,EAAA4B,EAAA,sBAAAyD,IAAA,IAAAC,EAAAhG,EAAA,GAGe,SAAA+F,EAAuB1E,GAClC,OAAOP,OAAAkF,EAAA,cAAAlF,CAAoBO,kCCA/B,IAAY4E,EAAZjG,EAAAU,EAAA4B,EAAA,sBAAA2D,IAAA,SAAYA,GACRA,EAAA,kDACAA,EAAA,kDACAA,EAAA,4CAHJ,CAAYA,MAAiB,mCCA7B,IAAYC,EAAZlG,EAAAU,EAAA4B,EAAA,sBAAA4D,IAAA,SAAYA,GACRA,EAAA,mEACAA,EAAA,mEACAA,EAAA,6DAHJ,CAAYA,MAAyB,oBCJrC/F,EAAAD,QAAAkC,QAAA,6DCAApC,EAAAU,EAAA4B,EAAA,sBAAA6D,IAAAnG,EAAAU,EAAA4B,EAAA,sBAAA8D,IAAO,IAAMD,EAAc,cACdC,EAAW,0BCDxBjG,EAAAD,QAAAkC,QAAA,4DCAA,IAAKiE,GAAL,SAAKA,GACDA,EAAA,wBACAA,EAAA,oCAFJ,CAAKA,MAAW,KAKD/D,EAAA,qBCLfnC,EAAAD,QAAAkC,QAAA,gDCMA,IAAYkE,EAAZtG,EAAAU,EAAA4B,EAAA,sBAAAgE,IAAA,SAAYA,GACRA,EAAA,kDACAA,EAAA,kDACAA,EAAA,4CAEAA,EAAA,yEACAA,EAAA,yEACAA,EAAA,mEAPJ,CAAYA,MAAiB,8CCJ7BC,EAAA,SAAA5D,GACI,SAAA4D,EAAYpC,GAAZ,IAAAtB,EACIF,EAAApC,KAAAuC,KAAMqB,GAAW,0CAAwCrB,YAEzDD,EAAKlC,KAAO,uBACZkC,EAAKE,KAAO,qBAEpB,OAPkDc,EAAA,UAAA0C,EAAA5D,GAOlD4D,EAPA,OAAkD,wCCFlDvG,EAAAU,EAAA4B,EAAA,sBAAAkE,IAAAxG,EAAAU,EAAA4B,EAAA,sBAAAmE,IAAO,IAAMD,EAAS,sBACTC,EAAU,qDCCR,SAAAC,EACX5E,EACAiB,GAEA,OAAOjB,EAAOiB,OAASA,EAJ3B/C,EAAAU,EAAA4B,EAAA,sBAAAoE,sCCEe,SAAAC,EAAiBC,EAAcC,EAAcC,GACxD,OAAIF,IAAYC,IAIZD,GAAWC,GAA8B,iBAAZD,GAA2C,iBAAZC,EACxDE,MAAMC,QAAQJ,IAAYG,MAAMC,QAAQH,GAsCpD,SAAsBD,EAAgBC,EAAgBC,GAClD,GAAIF,EAAQK,SAAWJ,EAAQI,OAC3B,OAAO,EAGX,IAAK,IAAIC,EAAQ,EAAGC,EAASP,EAAQK,OAAQC,EAAQC,EAAQD,IACzD,IAAKP,EAAQC,EAAQM,GAAQL,EAAQK,GAAQJ,GACzC,OAAO,EAIf,OAAO,EAhDQM,CAAaR,EAASC,EAASC,IAGtCC,MAAMC,QAAQJ,KAAYG,MAAMC,QAAQH,KAIvCD,aAAmBS,MAAUR,aAAmBQ,KA0B7D,SAAqBT,EAAeC,GAChC,OAAOD,EAAQU,YAAcT,EAAQS,UA1BtBC,CAAYX,EAASC,KAG3BD,aAAmBS,MAAUR,aAAmBQ,QAIhDT,aAAmBY,QAAYX,aAAmBW,OAc/D,SAAuBZ,EAAiBC,GACpC,OAAOD,EAAQa,aAAeZ,EAAQY,WAdvBC,CAAcd,EAASC,KAG7BD,aAAmBY,QAAYX,aAAmBW,SAgC/D,SACIZ,EACAC,EACAC,GAEA,IAAMa,EAASb,GAAWA,EAAQc,UAC5BC,EAAQF,EAAS7G,OAAOgH,KAAKlB,GAASe,OAAOA,GAAU7G,OAAOgH,KAAKlB,GACnEmB,EAAQJ,EAAS7G,OAAOgH,KAAKjB,GAASc,OAAOA,GAAU7G,OAAOgH,KAAKjB,GAEzE,GAAIgB,EAAMZ,SAAWc,EAAMd,OACvB,OAAO,EAGX,IAAK,IAAIC,EAAQ,EAAGc,EAASH,EAAMZ,OAAQC,EAAQc,EAAQd,IAAS,CAChE,IAAMvF,EAAMkG,EAAMX,GAElB,IAAKL,EAAQ5E,eAAeN,GACxB,OAAO,EAGX,IAAKgF,EAAQC,EAAQjF,GAAMkF,EAAQlF,GAAMmF,GACrC,OAAO,EAIf,OAAO,EArDImB,CAAcrB,EAASC,EAASC,KAGpCF,IAAYC,GAjCvB7G,EAAAU,EAAA4B,EAAA,sBAAAqE,mBCJAxG,EAAAD,QAAAkC,QAAA,2CCAAjC,EAAAD,QAAAkC,QAAA,2CCAAjC,EAAAD,QAAAkC,QAAA,0CCAA,IAAA8F,EAAAlI,EAAA,IAEAmI,EAAA,WAGI,SAAAA,EACIC,EACQC,GAAAvF,KAAAuF,gBAERvF,KAAKwF,cAAiC,MAAjBF,EAAuB,IAAMtH,OAAAoH,EAAA,EAAApH,CAASsH,GAAcG,OAkBjF,OAfIJ,EAAAnG,UAAAwG,KAAA,SAAKC,GACD,GAAIC,SAAW5F,KAAKuF,cAApB,CAIA,IAAKvF,KAAKuF,cACN,MAAM,IAAI9D,MAAM,6DAGpBzB,KAAKuF,cAAcM,YAAYF,EAAO3F,KAAKwF,iBAG/CH,EAAAnG,UAAA4G,UAAA,SAAUF,GACN5F,KAAKuF,cAAgBK,GAE7BP,EAzBA,uCCIA,IAAYU,EAAZ7I,EAAAU,EAAA4B,EAAA,sBAAAuG,IAAA,SAAYA,GACRA,EAAA,qDACAA,EAAA,qDACAA,EAAA,+CAEAA,EAAA,uDACAA,EAAA,uDACAA,EAAA,iDAPJ,CAAYA,MAAkB,mCCJ9B,IAAYC,EAAZ9I,EAAAU,EAAA4B,EAAA,sBAAAwG,IAAA,SAAYA,GACRA,EAAA,qDACAA,EAAA,2DACAA,EAAA,2DACAA,EAAA,qDACAA,EAAA,sCACAA,EAAA,6CANJ,CAAYA,MAAwB,+CCEpCC,EAAA,SAAApG,GACI,SAAAoG,EAAYtD,GAAZ,IAAA5C,EACIF,EAAApC,KAAAuC,KAAM2C,EAAU,CAAEtB,QAAS,yEAAwErB,YAEnGD,EAAKlC,KAAO,4BACZkC,EAAKE,KAAO,2BAEpB,OAPuDc,EAAA,UAAAkF,EAAApG,GAOvDoG,EAPA,OAAuD,uCCFvD/I,EAAAU,EAAA4B,EAAA,sBAAA0G,IAAA,IAAAC,EAAAjJ,EAAA,IAOe,SAAAgJ,EACXE,GAEA,OAAO,eAAE,IAAAC,EAAA,GAAAC,EAAA,EAAAA,EAAAC,UAAApC,OAAAmC,IAAAD,EAAAC,GAAAC,UAAAD,GACL,IAAME,EAAWH,EAAKI,MAItB,OAAQL,EAAeM,WAAA,EAAIL,EAAIM,OAAA,CAAE,eAAC,IAAAC,EAAA,GAAAN,EAAA,EAAAA,EAAAC,UAAApC,OAAAmC,IAAAM,EAAAN,GAAAC,UAAAD,GAG9B,IAAMO,EAASL,EAAQE,WAAA,EAAIE,GAE3B,MAAsB,mBAAXC,EACA7I,OAAAmI,EAAA,EAAAnI,CAAQ6I,GAGZA,sCCxBnB,IAAYC,EAAZ5J,EAAAU,EAAA4B,EAAA,sBAAAsH,IAAA,SAAYA,GACRA,EAAA,yBADJ,CAAYA,MAAe,4ECO3BC,EAAA,WACI,SAAAA,EACYC,GAAAhH,KAAAgH,iBAsChB,OAnCID,EAAA7H,UAAA+H,mBAAA,SAAmBjD,GAAnB,IAAAjE,EAAAC,KACI,OAAOkH,EAAA,WAAWtI,OAAO,SAACuI,GACtBA,EAASC,KAAKpJ,OAAAqJ,EAAA,aAAArJ,CAAasJ,EAAA,EAAwBC,8BAEnDxH,EAAKiH,eAAeC,mBAAmBjD,GAClCwD,KAAK,SAAA7E,GACF,IAAM8E,EAAO,CACTC,gBAAiB/E,EAASH,QAAQ,uBAClCmF,YAAahF,EAASH,QAAQ,mBAGlC2E,EAASC,KAAKpJ,OAAAqJ,EAAA,aAAArJ,CAAasJ,EAAA,EAAwBM,4BAA6BjF,EAASJ,KAAMkF,IAC/FN,EAASU,aAEZC,MAAM,SAAAnF,GACHwE,EAASY,MAAM/J,OAAAqJ,EAAA,kBAAArJ,CAAkBsJ,EAAA,EAAwBU,yBAA0BrF,SAMnGoE,EAAA7H,UAAA+I,kBAAA,SAAkBC,EAAkBlE,GADpC,IAAAjE,EAAAC,KAEI,OAAOkH,EAAA,WAAWtI,OAAO,SAACuI,GACtBA,EAASC,KAAKpJ,OAAAqJ,EAAA,aAAArJ,CAAasJ,EAAA,EAAwBa,gCAA4BC,EAAW,CAAEF,SAAQA,KAEpGnI,EAAKiH,eAAeiB,kBAAkBC,EAAUlE,GAC3CwD,KAAK,SAAA7E,GACFwE,EAASC,KAAKpJ,OAAAqJ,EAAA,aAAArJ,CAAasJ,EAAA,EAAwBe,2BAA4B1F,EAASJ,KAAM,CAAE2F,SAAQA,KACxGf,EAASU,aAEZC,MAAM,SAAAnF,GACHwE,EAASY,MAAM/J,OAAAqJ,EAAA,kBAAArJ,CAAkBsJ,EAAA,EAAwBgB,wBAAyB3F,EAAU,CAAEuF,SAAQA,UAVtHnH,EAAA,YADCwH,EAAA,yCAeLxB,EAxCA,GAAqBvH,EAAA,kCCPrB,IAAAgJ,EAAAtL,EAAA,IAAAuL,EAAAvL,EAAA,IAIAwL,EAAA,WACI,SAAAA,EACY1B,GAAAhH,KAAAgH,iBA0BhB,OAvBI0B,EAAAxJ,UAAA+H,mBAAA,SAAmBrE,OAAE+F,QAAA,IAAA/F,EAAA,GAAAA,GAAA+F,QAGjB,OAAO3I,KAAKgH,eAAe7I,IAFf,2BAEwB,CAChCwK,QAAOA,EACPnG,QAAS,CACLoG,OAAQJ,EAAA,EAAYK,OACpBC,iBAAkBL,EAAA,MAK9BC,EAAAxJ,UAAA+I,kBAAA,SAAkBC,EAAkBtF,OAAE+F,QAAA,IAAA/F,EAAA,GAAAA,GAAA+F,QAC5BI,EAAM,4BAA4Bb,EAExC,OAAOlI,KAAKgH,eAAe7I,IAAI4K,EAAK,CAChCJ,QAAOA,EACPnG,QAAS,CACLoG,OAAQJ,EAAA,EAAYK,OACpBC,iBAAkBL,EAAA,MAIlCC,EA5BA,uCCJA,IAAYM,EAAZ9L,EAAAU,EAAA4B,EAAA,sBAAAwJ,IAAA,SAAYA,GACRA,EAAA,mCADJ,CAAYA,MAAwB,sECIpCC,EAAA,WAKI,SAAAA,EACIC,GAEAlJ,KAAKmJ,cAAgBnL,OAAAoL,EAAA,EAAApL,CAASkL,GAAczD,OAC5CzF,KAAKqJ,cAAe,EACpBrJ,KAAKsJ,WAAa,GAiE1B,OA9DIL,EAAA/J,UAAAqK,OAAA,WACQvJ,KAAKqJ,eAITrJ,KAAKqJ,cAAe,EAEpBzD,OAAO4D,iBAAiB,UAAWxJ,KAAKyJ,kBAG5CR,EAAA/J,UAAAwK,WAAA,WACS1J,KAAKqJ,eAIVrJ,KAAKqJ,cAAe,EAEpBzD,OAAO+D,oBAAoB,UAAW3J,KAAKyJ,kBAG/CR,EAAA/J,UAAA0K,YAAA,SAA2C3J,EAAa4J,GACpD,IAAIC,EAAY9J,KAAKsJ,WAAWrJ,GAE3B6J,IACD9J,KAAKsJ,WAAWrJ,GAAQ6J,EAAY,IAGxCA,EAAUC,KAAKF,IAGnBZ,EAAA/J,UAAA8K,eAAA,SAA8C/J,EAAa4J,GACvD,IAAMC,EAAY9J,KAAKsJ,WAAWrJ,GAElC,GAAK6J,EAAL,CAIA,IAAM1F,EAAQ0F,EAAUG,QAAQJ,GAE5BzF,GAAS,GACT0F,EAAUI,OAAO9F,EAAO,KAIhC6E,EAAA/J,UAAAiL,QAAA,SAAuCxE,GACnC,IAAMmE,EAAY9J,KAAKsJ,WAAW3D,EAAM1F,MAEnC6J,GAILA,EAAUM,QAAQ,SAAAP,GAAY,OAAAA,EAASlE,MAInCsD,EAAA/J,UAAAuK,eAAR,SAAuB9D,GACdA,EAAMF,SAAWzF,KAAKmJ,eAAmBnL,OAAAqM,EAAA,EAAArM,CAAc2H,EAAM2E,KAAM3E,EAAM2E,KAAKrK,OAInFD,KAAKmK,QAAQxE,EAAM2E,OALvBvJ,EAAA,YADCwJ,EAAA,sCAQLtB,EA3EA,GAAqBzJ,EAAA,kCCENA,EAAA,EARmB,CAC9B,uCACA,sCACA,WACA,WACA,4ECMW,SAAAgL,EACXC,EACAC,EACAC,GAEA,YAFA,IAAAA,MAAA,MAEQ3M,OAAOgH,KAAKyF,GACfG,OAAO,SAAC/D,EAAQhI,GAAQ,OAClBgI,EAAMF,OACL8D,EAAQ5L,GAAoBgM,IAAI,SAACC,GACjC,MAAY,qBAARjM,ECfL,SACXiM,EACAJ,GAEA,IAAMK,EAAoB,IAAIC,EAAA,EAAkBN,GAEhD,MAAO,CACHO,GAAIH,EAAKG,GACTC,SAAU,GACVrN,KAAMiN,EAAKjN,KACXsN,OAAQL,EAAKK,OACbC,oBAAqBN,EAAKK,OAC1BE,SAAU,EACVC,cAAeP,EAAkBQ,UAAUT,EAAKK,QAChDK,2BAA4BT,EAAkBQ,UAAUT,EAAKK,QAC7DM,gBAAiB,EACjBC,SAAU,EACVC,OAAQb,EAAKa,OACbC,UAAWd,EAAKc,UAChB3L,KAAM,4BACN4L,WAAY,GACZC,UAAW,MDLQC,CAAqCjB,EAAMJ,GAG/C1M,OAAAgO,EAAA,EAAAhO,CACH8M,EASpB,SAAmC7K,GAC/B,OAAQA,GACJ,IAAK,gBACD,MAAO,qBAEX,IAAK,eACD,MAAO,oBAEX,IAAK,mBACD,MAAO,4BAEX,QACI,MAAO,IApBCgM,CAA0BpN,GAC1B6L,EACAC,OAGT,IA5BXzN,EAAAU,EAAA4B,EAAA,sBAAAgL,kCEHAtN,EAAAU,EAAA4B,EAAA,sBAAA0M,IAAO,IAAMA,EAAoB,oICiB1B,SAAAC,EAA+BtB,GAClC,OAAOA,EAAI1L,eAAe,YCD9B,IAAAiN,EAAA,WAMI,SAAAC,EAAYrI,GALJhE,KAAAsM,QAAU,EACVtM,KAAAuM,KAAwB,CAAEC,KAAM,IAChCxM,KAAAyM,UAAmC,GAIvCzM,KAAK0M,SAAW9K,EAAA,UACZ+K,QAAS,EACT9I,QAAS+I,EACTC,SAAUC,EAAA,MACP9I,GA4If,OAxIIqI,EAAAnN,UAAA6N,OAAA,eAAO,IAAA1G,EAAA,GAAAC,EAAA,EAAAA,EAAAC,UAAApC,OAAAmC,IAAAD,EAAAC,GAAAC,UAAAD,GACH,IAAMO,EAAS7G,KAAKgN,YAAWtG,MAAhB1G,KAAoBqG,GAC3BjC,EAAAyC,EAAAzC,MAAO6I,EAAApG,EAAAoG,UACTpC,EAAAhE,EAAAgE,IAYN,OAVIA,GAAOA,EAAIqC,SACXrC,EAAIsC,YAEJtC,EAAM7K,KAAKoN,aAAaH,EAAW5G,EAAKgH,MAAMjJ,IAKlDpE,KAAKsN,oBAAoBzC,GAElBA,EAAIqC,UAGfb,EAAAnN,UAAAqO,aAAA,eAAa,IAAAlH,EAAA,GAAAC,EAAA,EAAAA,EAAAC,UAAApC,OAAAmC,IAAAD,EAAAC,GAAAC,UAAAD,GACD,IAAAuE,EAAA7K,KAAAgN,YAAAtG,MAAA1G,KAAAqG,GAAAwE,IAER,OAAOA,EAAMA,EAAIsC,UAAY,GAGzBd,EAAAnN,UAAA8N,YAAR,eAAoB,MAAA3G,EAAA,GAAAC,EAAA,EAAAA,EAAAC,UAAApC,OAAAmC,IAAAD,EAAAC,GAAAC,UAAAD,GAUhB,IATA,IAAIlC,EAAQ,EACR6I,EAAYjN,KAAKuM,KAQdU,EAAUT,KAAKrI,QAAQ,CAG1B,IAFA,IAAIqJ,GAAY,EAEPC,EAAW,EAAGA,EAAWR,EAAUT,KAAKrI,OAAQsJ,IAAY,CACjE,IAAM5C,EAAMoC,EAAUT,KAAKiB,GAE3B,GAAKzN,KAAK0M,SAAS7I,QAAQgH,EAAItM,MAAO8H,EAAKjC,IAA3C,CAQA,IAFAxB,EAAAqK,EAAUT,MAAKkB,QAAOhH,MAAA9D,EAAIqK,EAAUT,KAAKtC,OAAOuD,EAAU,KAErC,IAAhBpH,EAAKlC,QAAgBC,IAAUiC,EAAKlC,OAAS,IAAMgI,EAAsBtB,GAC1E,MAAO,CAAEzG,MAAKA,EAAEyG,IAAGA,EAAEoC,UAASA,GAGlCO,GAAY,EACZP,EAAYpC,EACZzG,IAEA,OAGJ,IAAKoJ,EACD,MAIR,MAAO,CAAEpJ,MAAKA,EAAE6I,UAASA,IAGrBZ,EAAAnN,UAAAkO,aAAR,SAAqBO,EAAmDtH,GACpE,IAEIwE,EAFAzG,EAAQ,EACR6I,EAAYU,EAGhB,GACI9C,EAAM,CACF2B,KAAM,GACNS,UAASA,EACTE,UAAW,EACX5O,MAAO8H,EAAKjC,IAMhB6I,EAAUT,KAAKkB,QAAQ7C,GAEvBoC,EAAYpC,EACZzG,UACKA,EAAQiC,EAAKlC,QAEtB,IAAMyJ,EAAc/C,EAIpB,OAFA+C,EAAYV,SAAW,MAAKlN,KAAKsM,QAE1BsB,GAGHvB,EAAAnN,UAAAoO,oBAAR,SAA4BO,GACxB,GAAK7N,KAAK0M,SAASC,QAAnB,CAIA,IAAMvI,EAAQpE,KAAKyM,UAAUxC,QAAQ4D,GAQrC,GANA7N,KAAKyM,UAAUvC,QACA,IAAX9F,EAAe,EAAIA,GACR,IAAXA,EAAe,EAAI,EACnByJ,KAGA7N,KAAKyM,UAAUtI,QAAUnE,KAAK0M,SAASC,SAA3C,CAIA,IAAM9B,EAAM7K,KAAKyM,UAAUhG,MAEtBoE,IAIL7K,KAAK8N,WAAWjD,GAChB7K,KAAK0M,SAASG,SAAShC,EAAIqC,cAGvBb,EAAAnN,UAAA4O,WAAR,SAAmBjD,GACVA,EAAIoC,YAITpC,EAAIoC,UAAUT,KAAKtC,OAAOW,EAAIoC,UAAUT,KAAKvC,QAAQY,GAAM,GD3I5D,SAA2BA,GAC9B,OAAOA,EAAI1L,eAAe,aC4IlB4O,CAAkBlD,EAAIoC,YAI1BjN,KAAK8N,WAAWjD,EAAIoC,aAE5BZ,EAvJA,0ICLe,SAAA2B,EACXC,EACAjK,GAEM,IAAApB,EAAA7B,EAAA,UAAA4L,QAAA,EAAA9I,QAAAqK,GAAAlK,GAAE2I,EAAA/J,EAAA+J,QAAS9I,EAAAjB,EAAAiB,QACXsK,EAAQ,IAAIC,IACZC,EAAW,IAAIC,EAAA,EAAiB,CAClC3B,QAAOA,EACP9I,QAAOA,EACPgJ,SAAU,SAAAhO,GAAO,OAAAsP,EAAMI,OAAO1P,MAE5B2P,EAAWxQ,OAAAyQ,EAAA,QAAAzQ,CAAciQ,EAAI,eAAC,IAAA5H,EAAA,GAAAC,EAAA,EAAAA,EAAAC,UAAApC,OAAAmC,IAAAD,EAAAC,GAAAC,UAAAD,GAAY,OAAA+H,EAAStB,OAAMrG,MAAf2H,EAAmBhI,KAInE,OAFAmI,EAASL,MAAQA,EAEVK,EAGJ,SAAAE,EACHT,EACAjK,GAEA,OAAOgK,EAAQC,EAAIlN,EAAA,YAAKiD,EAAO,CAAE2I,QAAS,oCClC9C,IAAYgC,EAAZzR,EAAAU,EAAA4B,EAAA,sBAAAmP,IAAA,SAAYA,GACRA,EAAA,iEACAA,EAAA,wEACAA,EAAA,sEAHJ,CAAYA,MAAgB,mCCE5B,IAAAC,EAAA1R,EAAA,IAaA2R,EAAA,WACI,SAAAA,EACYC,EACAC,QAAA,IAAAA,MAAAnJ,QADA5F,KAAA8O,gBACA9O,KAAA+O,UAsFhB,OAnFIF,EAAA3P,UAAA8P,WAAA,eAAAjP,EAAAC,KACI,OAAOA,KAAK8O,cACPG,WAAW,yDACXzH,KAAK,WACF,IAAKzH,EAAKgP,QAAQG,YAAcnP,EAAKgP,QAAQG,UAAUC,OACnD,MAAM,IAAIP,EAAA,EAGd,OAAO7O,EAAKgP,QAAQG,UAAUC,UAI1CN,EAAA3P,UAAAkQ,QAAA,eAAArP,EAAAC,KACI,OAAOA,KAAK8O,cACPG,WAAW,iEACXzH,KAAK,WACF,IAAKzH,EAAKgP,QAAQG,YAAcnP,EAAKgP,QAAQG,UAAUG,aACnD,MAAM,IAAIT,EAAA,EAGd,OAAO7O,EAAKgP,QAAQG,UAAUG,gBAI1CR,EAAA3P,UAAAoQ,kBAAA,eAAAvP,EAAAC,KACI,OAAOA,KAAK8O,cACPG,WAAW,iEACXzH,KAAK,WACF,IAAKzH,EAAKgP,QAAQG,YAAcnP,EAAKgP,QAAQG,UAAUK,cACnD,MAAM,IAAIX,EAAA,EAGd,OAAO7O,EAAKgP,QAAQG,UAAUK,iBAI1CV,EAAA3P,UAAAsQ,WAAA,eAAAzP,EAAAC,KACI,OAAOA,KAAK8O,cACPG,WAAW,yDACXzH,KAAK,WACF,IAAKzH,EAAKgP,QAAQG,YAAcnP,EAAKgP,QAAQG,UAAUO,OACnD,MAAM,IAAIb,EAAA,EAGd,OAAO7O,EAAKgP,QAAQG,UAAUO,UAI1CZ,EAAA3P,UAAAwQ,mBAAA,eAAA3P,EAAAC,KACI,OAAOA,KAAK8O,cACPG,WAAW,kEACXzH,KAAK,WACF,IAAKzH,EAAKgP,QAAQG,YAAcnP,EAAKgP,QAAQG,UAAUS,eACnD,MAAM,IAAIf,EAAA,EAGd,OAAO7O,EAAKgP,QAAQG,UAAUS,kBAI1Cd,EAAA3P,UAAA0Q,iBAAA,eAAA7P,EAAAC,KACI,OAAOA,KAAK8O,cACPG,WAAW,gEACXzH,KAAK,WACF,IAAKzH,EAAKgP,QAAQG,YAAcnP,EAAKgP,QAAQG,UAAUW,aACnD,MAAM,IAAIjB,EAAA,EAGd,OAAO7O,EAAKgP,QAAQG,UAAUW,gBAI1ChB,EAAA3P,UAAA4Q,kBAAA,eAAA/P,EAAAC,KACI,OAAOA,KAAK8O,cACPG,WAAW,iEACXzH,KAAK,WACF,IAAKzH,EAAKgP,QAAQG,YAAcnP,EAAKgP,QAAQG,UAAUa,cACnD,MAAM,IAAInB,EAAA,EAGd,OAAO7O,EAAKgP,QAAQG,UAAUa,iBAG9ClB,EAzFA,0DCDAmB,EAAA,WAaI,SAAAA,EACYC,GAAAjQ,KAAAiQ,yBAPJjQ,KAAAkQ,gBAGJ,GAgIR,OAzHIF,EAAA9Q,UAAAiR,WAAA,SAAWC,GACPpQ,KAAKqQ,aAAeD,GAGxBJ,EAAA9Q,UAAAoR,UAAA,eAAAvQ,EAAAC,KACI,IAAKA,KAAKqQ,aACN,MAAM,IAAIE,EAAA,EAAoBA,EAAA,EAAwBC,uBAQ1D,OALKxQ,KAAKyQ,UACNzQ,KAAKyQ,QAAUzQ,KAAKiQ,uBAAuBjB,aACtCxH,KAAK,SAAA2H,GAAU,OAAAA,EAAOvQ,OAAO,CAAE8R,cAAe3Q,EAAKsQ,kBAGrDrQ,KAAKyQ,SAGhBT,EAAA9Q,UAAAyR,UAAA,WASI,OARK3Q,KAAK4Q,UACN5Q,KAAK4Q,QAAUC,QAAQC,IAAI,CACvB9Q,KAAKsQ,YACLtQ,KAAKiQ,uBAAuBT,eAE/BhI,KAAK,SAAC5E,OAACuM,EAAAvM,EAAA,GAAoB,OAAZA,EAAA,GAAmBhE,OAAO,CAAEuQ,OAAMA,OAG/CnP,KAAK4Q,SAGhBZ,EAAA9Q,UAAA6R,kBAAA,WASI,OARK/Q,KAAKgR,kBACNhR,KAAKgR,gBAAkBH,QAAQC,IAAI,CAC/B9Q,KAAKsQ,YACLtQ,KAAKiQ,uBAAuBP,uBAE3BlI,KAAK,SAAC5E,OAACuM,EAAAvM,EAAA,GAA4B,OAApBA,EAAA,GAAmChE,OAAO,CAAEuQ,OAAMA,OAGnEnP,KAAKgR,iBAGhBhB,EAAA9Q,UAAA+R,OAAA,WASI,OARKjR,KAAKkR,OACNlR,KAAKkR,KAAOL,QAAQC,IAAI,CACpB9Q,KAAKsQ,YACLtQ,KAAKiQ,uBAAuBb,YAE/B5H,KAAK,SAAC5E,OAACuM,EAAAvM,EAAA,GAA0B,OAAlBA,EAAA,GAA+BhE,OAAO,CAAEuQ,OAAMA,OAG3DnP,KAAKkR,MAGhBlB,EAAA9Q,UAAAiS,iBAAA,SAAiBnN,GACb,IAAMkJ,EAAWlJ,GAAWA,EAAQyL,OAAS,SAAW,UACpD2B,EAASpR,KAAKkQ,gBAAgBhD,GAmBlC,OAjBKkE,IACDA,EAASP,QAAQC,IAAI,CACjB9Q,KAAKsQ,YACLtQ,KAAKiQ,uBAAuBX,sBAE/B9H,KAAK,SAAC5E,OAACuM,EAAAvM,EAAA,GAA2B,OAAnBA,EAAA,GAAiChE,OAAOmC,EAAA,UAAEoO,OAAMA,EAAEkC,OAAO,GAASrN,MACjF8D,MAAM,SAAAC,GACH,GAAIA,GAAwB,qCAAfA,EAAMuJ,KACf,MAAO,CAAEC,gBAAYnJ,EAAWoJ,SAAU,WAAM,OAAAX,QAAQY,YAG5D,MAAM1J,IAGV/H,KAAKkQ,gBAAgBhD,GAAYkE,GAG9BA,GAGXpB,EAAA9Q,UAAAwS,gBAAA,WASI,OARK1R,KAAK2R,gBACN3R,KAAK2R,cAAgBd,QAAQC,IAAI,CAC7B9Q,KAAKsQ,YACLtQ,KAAKiQ,uBAAuBL,qBAE/BpI,KAAK,SAAC5E,OAACuM,EAAAvM,EAAA,GAA0B,OAAlBA,EAAA,GAA+BhE,OAAO,CAAEuQ,OAAMA,OAG3DnP,KAAK2R,eAGhB3B,EAAA9Q,UAAA0S,0BAAA,WASI,OARK5R,KAAK6R,aACN7R,KAAK6R,WAAahB,QAAQC,IAAK,CAC3B9Q,KAAKsQ,YACLtQ,KAAKiQ,uBAAuBH,sBAE3BtI,KAAK,SAAC5E,OAACuM,EAAAvM,EAAA,GAAuB,OAAfA,EAAA,GAAyBhE,OAAO,CAAEuQ,OAAMA,OAGzDnP,KAAK6R,YAGhB7B,EAAA9Q,UAAAsS,SAAA,eAAAzR,EAAAC,KACI,OAAO6Q,QAAQC,IAAI,CACf9Q,KAAK8R,UAAU9R,KAAKkR,MACpBlR,KAAK8R,UAAU9R,KAAKkQ,gBAAgB6B,SACpC/R,KAAK8R,UAAU9R,KAAKkQ,gBAAgBT,QACpCzP,KAAK8R,UAAU9R,KAAK2R,eACpB3R,KAAK8R,UAAU9R,KAAK6R,cACrBrK,KAAK,WACJzH,EAAKmR,UAAO9I,EACZrI,EAAK4R,mBAAgBvJ,EACrBrI,EAAKmQ,gBAAkB,GACvBnQ,EAAK8R,gBAAazJ,KAIlB4H,EAAA9Q,UAAA4S,UAAR,SAAkBzU,GACd,OAAOA,EACHA,EAAOmK,KAAK,SAAAwK,GAAO,OAAAA,EAAIR,aACvBX,QAAQY,WAEpBzB,EA1IA,uCCdA9S,EAAAU,EAAA4B,EAAA,sBAAAyS,IAAA,IAAAC,EAAAhV,EAAA,IAUe,SAAA+U,EACXnH,EACA7K,EACAyK,EACAC,QAAA,IAAAA,MAAA,MAEA,IAAMI,EAAoB,IAAImH,EAAA,EAAkBxH,GAEhD,MAAO,CACHO,GAAKH,EAAKH,GACVO,SAAUJ,EAAKI,SACfC,OAAQL,EAAKqH,kBACb/G,oBAAqBN,EAAKsH,kBAC1B/G,SAAUP,EAAKuH,eACf/G,cAAeP,EAAkBQ,UAAUT,EAAKqH,mBAChD3G,2BAA4BT,EAAkBQ,UAAUT,EAAKsH,mBAC7D3G,gBAAiBV,EAAkBQ,UAAUT,EAAKuH,gBAClDC,iBAAmBxH,EAAqByH,gBACxC1U,KAAMiN,EAAKjN,KACX6N,SAAUZ,EAAKY,SACf8G,MAAO1H,EAAK0H,MACZC,cAAe3H,EAAK2H,cACpB3G,UAAWhB,EAAKgB,UAChB4G,UAAW5H,EAAK4H,UAChB7G,YAAaf,EAAK9G,SAAW,IAAI6G,IAAI,SAAA8H,GAAU,OAC3C9U,KAAM8U,EAAO9U,KACbU,MAAOoU,EAAOpU,SAElBqU,iBAAkB9H,EAAK8H,iBACvB3S,KAAIA,sECrCA4S,kBAAZ,SAAYA,GACRA,IAAA,+DACAA,IAAA,mDACAA,IAAA,iDACAA,IAAA,mDACAA,IAAA,+DALJ,CAAYA,MAAuB,KAQnC,IAAAC,EAAA,SAAAjT,GACI,SAAAiT,EACWhT,GADX,IAAAC,EAGIF,EAAApC,KAAAuC,KAOR,SAAyBC,GACrB,OAAQA,GACR,KAAK4S,EAAwBE,uBACzB,MAAO,oFAEX,KAAKF,EAAwBrC,sBACzB,MAAO,mFAEX,KAAKqC,EAAwBG,uBACzB,MAAO,oFAEX,KAAKH,EAAwBI,6BACzB,MAAO,mFAEX,QACI,MAAO,8EAtBDnS,CAAgBhB,KAASE,YAFxBD,EAAAD,UAIPC,EAAKlC,KAAO,sBACZkC,EAAKE,KAAO,oBAEpB,OATiDc,EAAA,UAAA+R,EAAAjT,GASjDiT,EATA,CAAiD9R,EAAA,uCCVjD9D,EAAAU,EAAA4B,EAAA,sBAAA0T,IAAA,IAAAC,EAAAjW,EAAA,GAAAkW,EAAAlW,EAAA,GAGe,SAAAgW,EACXjT,EACA8H,EACAN,GAEA,OAOmB4L,EAPDtL,IAQDsL,EAAOpT,MAAQoT,EAAOtL,MAP5B/J,OAAAoV,EAAA,OAAApV,CAAOA,OAAAoV,EAAA,GAAApV,CAAG+J,GAAQ/J,OAAAoV,EAAA,WAAApV,CAAWA,OAAAmV,EAAA,kBAAAnV,CAAkBiC,EAAM8H,EAAMuL,QAAS7L,KAGxEzJ,OAAAoV,EAAA,WAAApV,CAAWA,OAAAmV,EAAA,kBAAAnV,CAAkBiC,EAAM8H,EAAON,IAGrD,IAAuB4L,iCCfvB,IAAAE,EAAA,WACI,SAAAA,EAAoBC,GAAAxT,KAAAwT,iBAKxB,OAHID,EAAArU,UAAAqM,UAAA,SAAUJ,GACN,OAAOsI,KAAKC,MAAMvI,EAASsI,KAAKE,IAAI,GAAI3T,KAAKwT,kBAErDD,EANA,uCCAArW,EAAAU,EAAA4B,EAAA,sBAAAoU,IAAA,IAAAC,EAAA3W,EAAA,IAIe,SAAA0W,EAAkB7K,GAC7B,IAAK,kBAAkB+K,KAAK/K,GACxB,MAAM,IAAI8K,EAAA,EAAqB,sCAInC,IAAME,EAASC,SAASC,cAAc,KAItC,OAFAF,EAAOG,KAAOnL,EAEP,CACHoL,KAAMJ,EAAOI,KACbC,SAAUL,EAAOK,SACjBF,KAAMH,EAAOG,KACbzO,OAAQsO,EAAOtO,OACf4O,SAAUN,EAAOM,SACjBC,KAAMP,EAAOO,KACbC,SAAUR,EAAOQ,SACjBC,OAAQT,EAAOS,gFCnBR,SAAAC,EACXC,EACA7V,EACA8V,GAEA,IAAMC,EAAkB,IAAIC,QAE5B,SAAAC,EAAsCC,GAAtC,IAAAhV,EAAAC,KACI,OAAO,eAAE,MAAAqG,EAAA,GAAAC,EAAA,EAAAA,EAAAC,UAAApC,OAAAmC,IAAAD,EAAAC,GAAAC,UAAAD,GACL,ICV4B0O,EDUtBC,EAAU5O,EAAKA,EAAKlC,OAAS,GAGnC,KCb4B6Q,EDWpBC,ECVTD,GAAmC,kBAAnBA,EAAME,SDUbD,EAAA,CAAAC,UAAA,IAAAA,SAGJ,OAAOH,EAAOtX,KAAIiJ,MAAXqO,EAAM,CAAMhV,GAAI4G,OAAKN,IAGhC,IEXR4H,EAEMI,EFSQ8G,EAAkBP,EAAgBzW,IAAI4B,IAAS,GAUrD,OARK6U,EAAgBzW,IAAI4B,IACrB6U,EAAgBQ,IAAIrV,EAAMoV,GAGzBA,EAAgBtW,KACjBsW,EAAgBtW,IElB5BoP,EFkB+C8G,EEhBzC1G,EAAW,IAAIgH,EAAA,EAgBdrX,OAAA8O,EAAA,QAAA9O,CAdP,eAAgC,IAAAqI,EAAA,GAAAC,EAAA,EAAAA,EAAAC,UAAApC,OAAAmC,IAAAD,EAAAC,GAAAC,UAAAD,GAC5B,IAAM+M,EAASpF,EAAGxQ,KAAIiJ,MAAPuH,EAAE,CAAMjO,MAAI2G,OAAKN,IAEhC,OAAIgN,aAAkBiC,EAAA,WACXtX,OAAAsX,EAAA,KAAAtX,CAAKqV,GAAQkC,KAAKvX,OAAAwX,EAAA,YAAAxX,IAGP,mBAAXqV,EACArV,OAAA8O,EAAA,QAAA9O,CAAQ,SAAAyX,GAAS,OAAAzX,OAAAsX,EAAA,KAAAtX,CAAKqV,EAAOoC,IAAQF,KAAKvX,OAAAwX,EAAA,YAAAxX,MAG9CqV,GAKP,eAAC,IAAAhN,EAAA,GAAAC,EAAA,EAAAA,EAAAC,UAAApC,OAAAmC,IAAAD,EAAAC,GAAAC,UAAAD,GAAY,OAAA+H,EAAStB,OAAMrG,MAAf2H,EAAmBhI,QFCrBzD,EAAAuS,EAAgBtW,IAAKpB,KAAIiJ,MAAA9D,EAAA,CAAC7C,GAAI4G,OAAKN,KAIlD,MAAO,CACHlI,IAAG,WACC,GAAgC,mBAArBwW,EAAWpW,MAClB,OAAOoW,EAAWpW,MAGtB,IAAMA,EAAQuW,EAAerX,KAAKuC,KAAM2U,EAAWpW,OAInD,OAFAP,OAAOC,eAAe+B,KAAMnB,EAAK+C,EAAA,YAAK+S,EAAU,CAAEpW,MAAKA,KAEhDA,iHGrCJ,SAAAmX,EAAuBC,EAAa9W,EAAW8V,GAC1D,OAAK9V,GAAQ8V,EAINiB,EAAoBD,EAAQ9W,EAAK8V,GAOrC,SAA2DgB,GAC9D,IAAME,EAAe,SAAAhW,GAAG,SAAAiW,mDAAsB,OAAR/U,EAAA,UAAA+U,EAAAjW,GAAQiW,EAAzB,CAAiBH,GAiBtC,OAfA3X,OAAO+X,oBAAoBJ,EAAOzW,WAC7BkL,QAAQ,SAAAvL,GACL,IAAM8V,EAAa3W,OAAOgY,yBAAyBL,EAAOzW,UAAWL,GAEhE8V,GAAsB,gBAAR9V,GAInBb,OAAOC,eACH4X,EAAgB3W,UAChBL,EACA+W,EAAoBD,EAAOzW,UAAWL,EAAK8V,MAIhDkB,EA5BII,CAAmBN,GAkC3B,SAAAC,EAA+ClB,EAAW7V,EAAa8V,GAC1E,GAAgC,mBAArBA,EAAWpW,MAClB,OAAOoW,EAGX,IAAII,EAAYJ,EAAWpW,MAE3B,MAAO,CACHJ,IAAG,WACC,IAAM+X,EAAcnB,EAAOjW,KAAKkB,MAOhC,OALAhC,OAAOC,eAAe+B,KAAMnB,EAAKkC,EAAA,YAC1B4T,EAAU,CACbpW,MAAO2X,KAGJA,GAEXd,IAAG,SAAC7W,GACAwW,EAASxW,yBC7DrBlB,EAAAD,QAAAkC,QAAA,gDCAApC,EAAAU,EAAA4B,EAAA,sBAAA2W,IAAA,IAAAjT,EAAAhG,EAAA,GAEe,SAAAiZ,EAAkBnX,EAAaoX,GAC1C,OAAInS,MAAMC,QAAQlF,GACPA,EAAO6L,IAAI,SAAAtM,GAAS,OAAA4X,EAAS5X,EAAO6X,KAG3CpY,OAAAkF,EAAA,cAAAlF,CAAcgB,GACPhB,OAAAkF,EAAA,UAAAlF,CAAUA,OAAAkF,EAAA,OAAAlF,CAAOgB,EAAQoX,GAAY,SAACvP,EAAQtI,EAAOM,GACxDgI,EAAOhI,GAAOsX,EAAS5X,EAAO6X,IAC/B,IAGApX,iGCCXqX,EAAA,WACI,SAAAA,EACYC,EACAC,GADAvW,KAAAsW,yBACAtW,KAAAuW,uBAyEhB,OAtEIF,EAAAnX,UAAAsX,aAAA,SAAavL,EAAYjH,GAAzB,IAAAjE,EAAAC,KACI,OAAOhC,OAAAkJ,EAAA,OAAAlJ,CACHA,OAAAkJ,EAAA,GAAAlJ,CAAGA,OAAAqJ,EAAA,aAAArJ,CAAayY,EAAA,EAAmBC,wBACnC1Y,OAAAkJ,EAAA,MAAAlJ,CACIgC,KAAKuW,qBAAqBI,WAAW5V,EAAA,YAAKiD,EAAO,CAAEkR,UAAU,KAC7DlX,OAAAkJ,EAAA,MAAAlJ,CAAM,WAAM,OAAA+B,EAAKuW,uBAAuBE,aAAavL,EAAIjH,GACpDwD,KAAK,SAAC5E,OAAEL,EAAAK,EAAAL,KAAW,OAAAvE,OAAAqJ,EAAA,aAAArJ,CAAayY,EAAA,EAAmBG,sBAAuBrU,SAErFgT,KACEvX,OAAA6Y,EAAA,WAAA7Y,CAAW,SAAA+J,GAAS,OAAA/J,OAAA8Y,EAAA,EAAA9Y,CAAiByY,EAAA,EAAmBM,mBAAoBhP,OAIpFsO,EAAAnX,UAAA8X,oBAAA,SAAoBhT,GAApB,IAAAjE,EAAAC,KACI,OAAO,SAAAyV,GAAS,OAAAzX,OAAAkJ,EAAA,OAAAlJ,CACZA,OAAAkJ,EAAA,GAAAlJ,CAAGA,OAAAqJ,EAAA,aAAArJ,CAAayY,EAAA,EAAmBC,wBACnC3W,EAAKwW,qBAAqBI,aAC1B3Y,OAAAkJ,EAAA,MAAAlJ,CAAM,WACF,IACMiZ,EADQxB,EAAMyB,WACEC,OAAOC,mBAE7B,IAAKH,IAAYA,EAAQI,WACrB,MAAM,IAAIC,EAAA,EAAc,iDAG5B,OAAOvX,EAAKuW,uBAAuBE,aAAaS,EAAQI,WAAYrT,GAC/DwD,KAAK,SAAC5E,OAAEL,EAAAK,EAAAL,KAAW,OAAAvE,OAAAqJ,EAAA,aAAArJ,CAAayY,EAAA,EAAmBG,sBAAuBrU,QAErFgT,KACEvX,OAAA6Y,EAAA,WAAA7Y,CAAW,SAAA+J,GAAS,OAAA/J,OAAA8Y,EAAA,EAAA9Y,CAAiByY,EAAA,EAAmBM,mBAAoBhP,QAIpFsO,EAAAnX,UAAAqY,eAAA,SACIhV,EACAyB,GAFJ,IAAAjE,EAAAC,KAII,OAAO,SAAAyV,GAAS,WAAIvO,EAAA,WAAW,SAAAC,GAC3B,IACMqQ,EADQ/B,EAAMyB,WACGM,SAASC,cAEhC,IAAKD,EACD,MAAM,IAAIE,EAAA,EAAiBA,EAAA,EAAqBrX,iBAGpD8G,EAASC,KAAKpJ,OAAAqJ,EAAA,aAAArJ,CAAayY,EAAA,EAAmBkB,0BAE9C5X,EAAKuW,uBAAuBiB,eAAeC,EAASvM,GAAI1I,EAAMyB,GACzDwD,KAAK,SAAC5E,OAAEL,EAAAK,EAAAL,KACL4E,EAASC,KAAKpJ,OAAAqJ,EAAA,aAAArJ,CAAayY,EAAA,EAAmBmB,wBAAyBrV,IACvE4E,EAASU,aAEZC,MAAM,SAAAnF,GACHwE,EAASY,MAAM/J,OAAAqJ,EAAA,kBAAArJ,CAAkByY,EAAA,EAAmBoB,qBAAsBlV,UAK1F0T,EAAAnX,UAAA4Y,oBAAA,SAAoB9T,GAApB,IAAAjE,EAAAC,KACI,OAAO,SAAAyV,GACH,IACM+B,EADQ/B,EAAMyB,WACGM,SAASC,cAEhC,IAAKD,EACD,MAAM,IAAIE,EAAA,EAAiBA,EAAA,EAAqBrX,iBAGpD,OAAON,EAAKyW,aAAagB,EAASvM,GAAIjH,KAGlDqS,EA5EA,8FCgBA0B,EAAA,WACI,SAAAA,EACYC,EACA1B,GADAtW,KAAAgY,4BACAhY,KAAAsW,yBA0VhB,OAvVIyB,EAAA7Y,UAAA+Y,uBAAA,SACIC,EACAlU,GAFJ,IAAAjE,EAAAC,KAII,OAAO,SAAAyV,GACH,IAAM0C,EAAQ1C,EAAMyB,WAGpB,IAFiBiB,EAAMX,SAASC,cAG5B,MAAM,IAAIW,EAAA,EAAiBA,EAAA,EAAqB/X,iBAGpD,IAAMgY,EAAsBF,EAAMG,aAAaC,wBAAwBL,EAAYM,iBAEnF,IAAKH,EACD,MAAM,IAAIf,EAAA,EAAqB,kDAGnC,IAAMmB,EAAY1Y,EAAK2Y,iBACnBR,EAAYO,UACZJ,EACAF,EAAMQ,KAAKC,WAGf,OAAKH,EAAUtU,OAIRpE,EAAK8Y,kBAAkB,CAC1B5N,GAAIoN,EAAoBpN,GACxBuN,gBAAiBN,EAAYM,gBAC7BC,UAASA,GACVzU,EAJIjE,CAIK0V,GAPD1V,EAAK+Y,kBAAkBT,EAAoBpN,GAAIjH,EAA/CjE,CAAwD0V,KAW3EsC,EAAA7Y,UAAA6Z,qBAAA,SACIb,EACAlU,GAFJ,IAAAjE,EAAAC,KAII,OAAO,SAAAyV,GACH,IAAM0C,EAAQ1C,EAAMyB,WACdmB,EAAsBF,EAAMG,aAAaC,wBAAwBL,EAAYM,iBAEnF,OAAOzY,EAAKiZ,2BAA2B,CACnC/N,GAAIoN,GAAuBA,EAAoBpN,GAC/CuN,gBAAiBN,EAAYM,gBAC7BC,UAAW1Y,EAAKkZ,cACZf,EAAYO,UACZJ,EACAF,EAAMQ,KAAKC,YAEhB5U,EARIjE,CAQK0V,KAIpBsC,EAAA7Y,UAAAga,qBAAA,SACIjO,EACAjH,GAFJ,IAAAjE,EAAAC,KAII,OAAO,SAAAyV,GAAS,OAAAvO,EAAA,WAAWtI,OAAO,SAACuI,GAC/B,IAAMgR,EAAQ1C,EAAMyB,WACdM,EAAWW,EAAMX,SAASC,cAC1Ba,EAAeH,EAAMG,aAAaa,kBAExC,IAAK3B,EACD,MAAM,IAAIY,EAAA,EAAiBA,EAAA,EAAqB/X,iBAGpD,IAAKiY,IAAiBA,EAAanU,OAC/B,MAAM,IAAIiU,EAAA,EAAiBA,EAAA,EAAqBhY,qBAGpD,IAAMgZ,EAAwB,CAC1BnO,GAAIqN,EAAa,GAAGrN,GACpBoO,iBAAkBpO,GAGhBqO,EAAkB,CACpBrO,GAAIqN,EAAa,GAAGrN,IAGxB9D,EAASC,KAAKpJ,OAAAqJ,EAAA,aAAArJ,CAAaub,EAAA,EAAsBC,mCAA+BpR,EAAWkR,IAE3FvZ,EAAKiY,0BAA0Ba,kBAAkBrB,EAASvM,GAAImO,EAAuBpV,GAChFwD,KAAK,SAAC5E,OAAEL,EAAAK,EAAAL,KACL4E,EAASC,KAAKpJ,OAAAqJ,EAAA,aAAArJ,CACVub,EAAA,EAAsBE,8BACtBlX,EACA+W,IAGJnS,EAASU,aAEZC,MAAM,SAAAnF,GACHwE,EAASY,MAAM/J,OAAAqJ,EAAA,kBAAArJ,CACXub,EAAA,EAAsBG,2BACtB/W,EACA2W,UAMpBvB,EAAA7Y,UAAAya,oBAAA,SAAoB3V,GAApB,IAAAjE,EAAAC,KACI,OAAO,SAAAyV,GAAS,OAAAvO,EAAA,WAAWtI,OAAO,SAACuI,GAC/B,IAAMqQ,EAAW/B,EAAMyB,WAAWM,SAASC,cAE3C,IAAKD,EACD,MAAM,IAAIY,EAAA,EAAiBA,EAAA,EAAqB/X,iBAGpD8G,EAASC,KAAKpJ,OAAAqJ,EAAA,aAAArJ,CAAaub,EAAA,EAAsBK,+BAEjD7Z,EAAKuW,uBAAuBE,aAAagB,EAASvM,GAAIlK,EAAA,YAC/CiD,EAAO,CACV6V,OAAQ,CACJC,QAAS,CAACC,EAAA,EAAiBC,8BAGlCxS,KAAK,SAAC5E,OAAEL,EAAAK,EAAAL,KACL4E,EAASC,KAAKpJ,OAAAqJ,EAAA,aAAArJ,CAAaub,EAAA,EAAsBU,6BAA8B1X,IAC/E4E,EAASU,aAEZC,MAAM,SAAAnF,GACHwE,EAASY,MAAM/J,OAAAqJ,EAAA,kBAAArJ,CAAkBub,EAAA,EAAsBW,0BAA2BvX,UAK9FoV,EAAA7Y,UAAAib,cAAA,SACIC,EACApW,GAFJ,IAAAjE,EAAAC,KAII,OAAO,SAAAyV,GACH,IAAMyC,EAAcnY,EAAKsa,2BAA2BD,EAAS3E,GACvD6C,EAAe7C,EAAMyB,WAAWoB,aAAaa,kBAMnD,OAJIb,GAAgBA,EAAanU,SAC5B+T,EAA6CjN,GAAKqN,EAAa,GAAGrN,IAGhElL,EAAKiZ,2BAA2Bd,EAAalU,EAA7CjE,CAAsD0V,KAIrEsC,EAAA7Y,UAAAob,mBAAA,SACIhC,EACAtU,GAFJ,IAAAjE,EAAAC,KAII,OAAO,SAAAyV,GAAS,OAAAvO,EAAA,WAAWtI,OAAO,SAACuI,GAC/B,IAAMqQ,EAAW/B,EAAMyB,WAAWM,SAASC,cAE3C,IAAKD,IAAaA,EAASvM,GACvB,MAAM,IAAImN,EAAA,EAAiBA,EAAA,EAAqB/X,iBAGpD8G,EAASC,KAAKpJ,OAAAqJ,EAAA,aAAArJ,CAAaub,EAAA,EAAsBgB,8BAEjDxa,EAAKiY,0BAA0BsC,mBAAmB9C,EAASvM,GAAIqN,EAActU,GACxEwD,KAAK,SAAC5E,OAAEL,EAAAK,EAAAL,KACL4E,EAASC,KAAKpJ,OAAAqJ,EAAA,aAAArJ,CAAaub,EAAA,EAAsBiB,4BAA6BjY,IAC9E4E,EAASU,aAEZC,MAAM,SAAAnF,GACHwE,EAASY,MAAM/J,OAAAqJ,EAAA,kBAAArJ,CAAkBub,EAAA,EAAsBkB,yBAA0B9X,UAKjGoV,EAAA7Y,UAAA2Z,kBAAA,SACIX,EACAlU,GAFJ,IAAAjE,EAAAC,KAII,OAAO,SAAAyV,GAAS,OAAAvO,EAAA,WAAWtI,OAAO,SAACuI,GAC/B,IAAMqQ,EAAW/B,EAAMyB,WAAWM,SAASC,cAE3C,IAAKD,IAAaA,EAASvM,GACvB,MAAM,IAAImN,EAAA,EAAiBA,EAAA,EAAqB/X,iBAGpD,IAAMiZ,EAAkB,CAAErO,GAAIiN,EAAYjN,IAE1C9D,EAASC,KAAKpJ,OAAAqJ,EAAA,aAAArJ,CAAaub,EAAA,EAAsBmB,gCAA4BtS,EAAWkR,IAExFvZ,EAAKiY,0BAA0Ba,kBAAkBrB,EAASvM,GAAIiN,EAAalU,GACtEwD,KAAK,SAAC5E,OAAEL,EAAAK,EAAAL,KACL4E,EAASC,KAAKpJ,OAAAqJ,EAAA,aAAArJ,CAAaub,EAAA,EAAsBoB,2BAA4BpY,EAAM+W,IACnFnS,EAASU,aAEZC,MAAM,SAAAnF,GACHwE,EAASY,MAAM/J,OAAAqJ,EAAA,kBAAArJ,CAAkBub,EAAA,EAAsBqB,wBAAyBjY,EAAU2W,UAK1GvB,EAAA7Y,UAAA4Z,kBAAA,SACI+B,EACA7W,GAFJ,IAAAjE,EAAAC,KAII,OAAO,SAAAyV,GAAS,OAAAvO,EAAA,WAAWtI,OAAO,SAACuI,GAC/B,IAAMqQ,EAAW/B,EAAMyB,WAAWM,SAASC,cACrC6B,EAAkB,CAAErO,GAAI4P,GAE9B,IAAKrD,IAAaA,EAASvM,GACvB,MAAM,IAAImN,EAAA,EAAiBA,EAAA,EAAqB/X,iBAGpD8G,EAASC,KAAKpJ,OAAAqJ,EAAA,aAAArJ,CAAaub,EAAA,EAAsBuB,gCAA4B1S,EAAWkR,IAExFvZ,EAAKiY,0BAA0Bc,kBAAkBtB,EAASvM,GAAI4P,EAAe7W,GACxEwD,KAAK,SAAC5E,OAAEL,EAAAK,EAAAL,KACL4E,EAASC,KAAKpJ,OAAAqJ,EAAA,aAAArJ,CAAaub,EAAA,EAAsBwB,2BAA4BxY,EAAM+W,IACnFnS,EAASU,aAEZC,MAAM,SAAAnF,GACHwE,EAASY,MAAM/J,OAAAqJ,EAAA,kBAAArJ,CAAkBub,EAAA,EAAsByB,wBAAyBrY,EAAU2W,UAK1GvB,EAAA7Y,UAAA+b,qBAAA,SACI/C,EACAlU,GAFJ,IAAAjE,EAAAC,KAII,OAAO,SAAAyV,GAAS,OAAAvO,EAAA,WAAWtI,OAAO,SAACuI,GAC/B,IAAMqQ,EAAW/B,EAAMyB,WAAWM,SAASC,cAE3C,IAAKD,IAAaA,EAASvM,GACvB,MAAM,IAAImN,EAAA,EAAiBA,EAAA,EAAqB/X,iBAGpD,IAAMiZ,EAAkB,CAAErO,GAAIiN,EAAYjN,IAE1C9D,EAASC,KAAKpJ,OAAAqJ,EAAA,aAAArJ,CAAaub,EAAA,EAAsBC,mCAA+BpR,EAAWkR,IAE3FvZ,EAAKiY,0BAA0Ba,kBAAkBrB,EAASvM,GAAIiN,EAAalU,GACtEwD,KAAK,SAAC5E,OAAEL,EAAAK,EAAAL,KACL4E,EAASC,KAAKpJ,OAAAqJ,EAAA,aAAArJ,CAAaub,EAAA,EAAsBE,8BAA+BlX,EAAM+W,IACtFnS,EAASU,aAEZC,MAAM,SAAAnF,GACHwE,EAASY,MAAM/J,OAAAqJ,EAAA,kBAAArJ,CAAkBub,EAAA,EAAsBG,2BAA4B/W,EAAU2W,UAKrGvB,EAAA7Y,UAAA8Z,2BAAR,SACId,EACAlU,GAFJ,IAAAjE,EAAAC,KAII,OAAO,SAAAyV,GACH,IAAM+B,EAAW/B,EAAMyB,WAAWM,SAASC,cAE3C,IAAKD,IAAaA,EAASvM,GACvB,MAAM,IAAImN,EAAA,EAAiBA,EAAA,EAAqB/X,iBAGpD,OAAIN,EAAKmb,4BAA4BhD,GAC1BnY,EAAK8Y,kBAAkBX,EAAalU,EAApCjE,CAA6C0V,GAGjD1V,EAAKua,mBAAmB,CAACpC,GAAclU,EAAvCjE,CAAgD0V,KAIvDsC,EAAA7Y,UAAAmb,2BAAR,SACI7B,EACA/C,GAEA,IACMkD,EADQlD,EAAMyB,WACDyB,KAAKC,UAExB,IAAKD,EACD,MAAM,IAAIP,EAAA,EAAiBA,EAAA,EAAqBjY,aAGpD,MAAO,CACHqY,gBAAeA,EACfC,WAAYE,EAAKF,WAAaE,EAAKF,UAAU0C,eAAiB,IACzDtQ,IAAI,SAAAC,GAAQ,OACTsQ,OAAQtQ,EAAKG,GACbS,SAAUZ,EAAKY,cAMvBqM,EAAA7Y,UAAAwZ,iBAAR,SACID,EACAP,EACAS,GAEA,IAAKA,EACD,MAAM,IAAIP,EAAA,EAAiBA,EAAA,EAAqBjY,aAGpD,OAAOH,KAAKqb,kBAAkBnD,EAAYoD,YAAa3C,GAAM9N,IAAI,SAAA0Q,GAC7D,IAAMC,EAAa/C,EAAUgD,KAAK,SAAAC,GAAY,OAAAA,EAASN,SAAWG,EAAaH,SAE/E,OAAOra,EAAA,YACAwa,EAAY,CACf7P,SAAU8P,EAAcD,EAAa7P,SAAW8P,EAAW9P,SAAY6P,EAAa7P,aAEzF7G,OAAO,SAAA6W,GAAY,OAAAA,EAAShQ,SAAW,KAGtCqM,EAAA7Y,UAAA+Z,cAAR,SACIR,EACAP,EACAS,GAEA,IAAKT,EACD,OAAOO,EAGX,IAAKE,EACD,MAAM,IAAIP,EAAA,EAAiBA,EAAA,EAAqBjY,aAGpD,OAAOsY,EACF9R,OAAO3G,KAAKqb,kBAAkBnD,EAAYoD,YAAa3C,IACvD9T,OAAO,SAAA6W,GAAY,OAAAA,EAAShQ,SAAW,KAGxCqM,EAAA7Y,UAAAmc,kBAAR,SAA0BC,EAAuB3C,GAC7C,OAAO2C,EAAYzQ,IAAI,SAAAuQ,GACnB,IAAMtQ,EAAO6N,EAAKF,UAAU0C,cAAcM,KAAK,SAAAC,GAAY,OAAAA,EAASzQ,KAAOmQ,IAE3E,MAAO,CACHA,OAAMA,EACN1P,SAAUZ,EAAOA,EAAKY,SAAW,MAKrCqM,EAAA7Y,UAAAgc,4BAAR,SACIS,GAIA,QAFsBA,EAEC1Q,IAE/B8M,EA7VA,0DCvBM6D,EAAiB,CACnB9B,QAAS,CACL,wCACA,uCACA,sCACA,WACA,sBACF+B,KAAK,MAGXC,EAAA,WACI,SAAAA,EACY9U,GAAAhH,KAAAgH,iBAwBhB,OArBI8U,EAAA5c,UAAAob,mBAAA,SAAmBjD,EAAoBiB,EAAuC1V,OAAE+F,QAAA,IAAA/F,EAAA,GAAAA,GAAA+F,QACtEI,EAAM,6BAA6BsO,EAAU,gBAC7C7U,EAAU,CAAEoG,OAAQH,EAAA,EAAYI,QAEtC,OAAO7I,KAAKgH,eAAetB,KAAKqD,EAAK,CAAExG,KAAM+V,EAAcuB,OAAQ+B,EAAgBpZ,QAAOA,EAAEmG,QAAOA,KAGvGmT,EAAA5c,UAAA2Z,kBAAA,SAAkBxB,EAAoBa,EAA2CtV,OAAE+F,QAAA,IAAA/F,EAAA,GAAAA,GAAA+F,QACvEsC,EAAAiN,EAAAjN,GAAI1I,EAAAxB,EAAA,OAAAmX,EAAA,QACNnP,EAAM,6BAA6BsO,EAAU,iBAAiBpM,EAC9DzI,EAAU,CAAEoG,OAAQH,EAAA,EAAYI,QAEtC,OAAO7I,KAAKgH,eAAe+U,IAAIhT,EAAK,CAAE8Q,OAAQ+B,EAAgBrZ,KAAIA,EAAEC,QAAOA,EAAEmG,QAAOA,KAGxFmT,EAAA5c,UAAA4Z,kBAAA,SAAkBzB,EAAoBwD,EAAuBjY,OAAE+F,QAAA,IAAA/F,EAAA,GAAAA,GAAA+F,QACrDI,EAAM,6BAA6BsO,EAAU,iBAAiBwD,EAC9DrY,EAAU,CAAEoG,OAAQH,EAAA,EAAYI,QAEtC,OAAO7I,KAAKgH,eAAeuH,OAAOxF,EAAK,CAAE8Q,OAAQ+B,EAAgBpZ,QAAOA,EAAEmG,QAAOA,KAEzFmT,EA1BA,uCCjBe,SAAAE,EAAwBvW,GACnC,OAAUG,OAAOqW,SAASxW,OAAM,wFAAwFA,EAD5HvI,EAAAU,EAAA4B,EAAA,sBAAAwc,kCCQe,SAAAE,EAAqCvJ,EAAwBwJ,GACxE,MAAO,CACHC,YAAazJ,EAAOyJ,YACpB/e,OAAQsV,EAAO1S,KACfoc,MAAO1J,EAAO2J,KACdrR,GAAI0H,EAAO1H,GACXsR,SAAUJ,EACVK,cAAe7J,EAAO6J,cACtBtR,SAAUyH,EAAOzH,SACjBuR,YAAa9J,EAAO8J,aAd5Bvf,EAAAU,EAAA4B,EAAA,sBAAA0c,kCCHe,SAAAQ,EAAmB7d,GAC9B,OAAkC,KAA3B,GAAGA,GAAMoL,QAAQ,OAAyC,KAA1B,GAAGpL,GAAMoL,QAAQ,KAD5D/M,EAAAU,EAAA4B,EAAA,sBAAAkd,sECIA,SAAA7c,GACI,SAAA8c,EAAYha,EAAoBtB,GAAhC,IAAAtB,EACIF,EAAApC,KAAAuC,KAAM2C,EAAU,CACZtB,QAASA,GAAW,yFACtBrB,YAEFD,EAAKlC,KAAO,qBACZkC,EAAKE,KAAO,kBAEpB,OATgD2B,EAAA,UAAA+a,EAAA9c,GAShD8c,EATA,CAAgDC,EAAA,mBCiBhD,SAAAC,EAAoB/Z,GAChB,OAAOA,EAAO8H,OAAO,SAAC/D,EAAkBkB,GACpC,OAAIA,EACWlB,EAAMF,OAAA,CAAEoB,IAGhBlB,GACR,IAAIgV,KAAK,KCThB,SAASiB,EAAWha,GAChB,GAAKmB,MAAMC,QAAQpB,GAInB,OAAOA,EAAO8H,OAAO,SAAC/D,EAAkBkB,GACpC,OAAIA,GAASA,EAAM1G,QACJwF,EAAMF,OAAA,CAAEoB,EAAM1G,UAGtBwF,GACR,IAAIgV,KAAK,KClBhB,iBAGI,SAAAkB,IAFQ/c,KAAAgd,gBAAyD,GAG7Dhd,KAAKid,SAAS,UAAW,SAACta,EAAUtB,GAAY,WAAIub,EAAA,EAAaja,EAAU,CAAEtB,QAAOA,MACpFrB,KAAKid,SAAS,WAAY,SAACta,EAAUtB,GAAY,OFX1C,SACXsB,EACAtB,GAEQ,IAAAkB,EAAAI,EAAAJ,KACAK,EAAAL,EAAAO,cAAA,IAAAF,EAAA,GAAAA,EAER,OAAO,IAAIga,EAAA,EAAaja,EAAU,CAC9BtB,QAASwb,EAAW/Z,IAAWP,EAAK2a,QAAU3a,EAAK4a,OAAS9b,EAC5DyB,OAAQA,EAAOqB,OACXrB,EAAO+H,IAAI,SAAAxJ,GAAW,OAAGiQ,KAAM/O,EAAKtC,KAAMoB,QAAOA,KACjD,CAAC,CAAEiQ,KAAM/O,EAAKtC,KAAMoB,QAASkB,EAAK2a,QAAU3a,EAAK4a,UEAJC,CAA6Bza,EAAUtB,KACxFrB,KAAKid,SAAS,aAAc,SAACta,EAAUtB,GAAY,OCZ5C,SACXsB,EACAtB,GAEQ,IAAAkB,EAAAI,EAAAJ,KAER,OAAO,IAAIqa,EAAA,EAAaja,EAAU,CAC9BtB,QAASA,GAAWkB,EAAK2a,QAAU3a,EAAK4a,MACxCra,OAAQ,CAAC,CACLwO,KAAM/O,EAAK+O,MAAQ/O,EAAKtC,KACxBoB,QAASkB,EAAK2a,QAAU3a,EAAK4a,UDEkBE,CAA+B1a,EAAUtB,KAC5FrB,KAAKid,SAAS,UAAW,SAACta,EAAUtB,GAAY,ODbzC,SACXsB,EACAtB,GAEQ,IACAuB,EADAD,EAAAJ,KACAO,cAAA,IAAAF,EAAA,GAAAA,EAER,OAAO,IAAIga,EAAA,EAAaja,EAAU,CAC9BtB,QAASyb,EAAWha,IAAWzB,EAC/ByB,OAAMA,ICI0Cwa,CAA4B3a,EAAUtB,KACtFrB,KAAKid,SAAS,UAAW,SAAAta,GAAY,WAAI4a,EAAA,EAAa5a,KA6D9D,OA1DIoa,EAAA7d,UAAA+d,SAAA,SAAShd,EAAcud,GACnBxd,KAAKgd,gBAAgB/c,GAAQud,GAGjCT,EAAA7d,UAAAue,YAAA,SAAY9a,EAAoBtB,GAG5B,OAFsBrB,KAAKgd,gBAAgBhd,KAAK0d,SAAS/a,KAAc3C,KAAKgd,gBAAgBjL,SAEvEpP,EAAUtB,IAG3B0b,EAAA7d,UAAAwe,SAAR,SAAiB/a,GACb,GAAwB,IAApBA,EAASF,OACT,MAAO,UAGX,GAAIzC,KAAK2d,+BAA+Bhb,EAASJ,MAC7C,MAAO,aAGX,GAAIvC,KAAK4d,6BAA6Bjb,EAASJ,MAAO,CAClD,IAAMsb,EAAe7f,OAAA8O,EAAA,KAAA9O,CAAK2E,EAASJ,KAAKtC,KAAK6d,MAAM,MAEnD,OAAOD,GAAgB7d,KAAKgd,gBAAgBa,GACxCA,EACA,WAGR,IAAM9V,EAAQ/J,OAAA8O,EAAA,KAAA9O,CAAK2E,EAASJ,MAAQI,EAASJ,KAAKO,QAElD,OAAIiF,GAASA,EAAMuJ,MAAQtR,KAAKgd,gBAAgBjV,EAAMuJ,MAC3CvJ,EAAMuJ,KAGV,WAGHyL,EAAA7d,UAAAye,+BAAR,SACII,GAEA,IAAMC,EAA0BD,EAEhC,OAAQ/d,KAAK4d,6BAA6BG,IACG,iBAAlCC,EAAwBb,OACS,iBAAjCa,EAAwB/d,MACW,iBAAnC+d,EAAwBvb,QACW,iBAAnCub,EAAwBd,QAG/BH,EAAA7d,UAAA0e,6BAAR,SACIG,GAEA,IAAME,EAAwBF,EAE9B,MAA+C,iBAAjCE,EAAsBnb,QACO,iBAAhCmb,EAAsBd,OACS,iBAA/Bc,EAAsBhe,MACW,iBAAjCge,EAAsBxb,QAEzCsa,EArEA,kDENe,SAAAmB,EACX/F,EACA9E,GAEA,OAOJ,SAA4BA,GACxB,OAAOA,EAAOpT,OAASke,EAAA,EAAgBC,WARnCC,CAAmBhL,GACZrV,OAAAsgB,EAAA,EAAAtgB,CAASma,EAAO,SAAA5Z,GAAS,OAAAA,IAAU8U,EAAOC,UAG9C6E,cCRI,SAAAoG,EAAoBC,EAAiBC,GAChD,YAAiBrW,IAAbqW,GAA0BzgB,OAAA0gB,EAAA,EAAA1gB,CAAQwgB,EAAcC,GACzCD,EAGJC,ECLI,SAAAE,EACX3f,EACAH,EACAN,SAEA,OAAIS,GAAUA,EAAOG,eAAeN,IAAQb,OAAA0gB,EAAA,EAAA1gB,CAAQgB,EAAOH,GAAMN,GACtDS,EAGJ4C,EAAA,YACA5C,IAAa4D,EAAA,IACf/D,GAAMN,EAAKqE,wBCGPgc,EAAqC,CAC9C9b,OAAQ,GACR+b,SAAU,ICXC,SAAAC,EACX3G,EACA9E,GAQA,YATA,IAAA8E,MAAAyG,GAGgB5gB,OAAA+gB,EAAA,gBAAA/gB,CAAqC,CACjDsM,KAAM0U,EACNlc,OAAQ9E,OAAA+gB,EAAA,gBAAA/gB,CAAgBihB,EAAef,GACvCW,SAAUK,GAGPC,CAAQhH,EAAO9E,GAG1B,SAAA2L,EACI1U,EACA+I,GAEA,OAAQA,EAAOpT,MACf,KAAKmf,EAAA,EAAyBC,8BAC9B,KAAKD,EAAA,EAAyBE,yBAC9B,KAAKC,EAAA,EAAmB3I,sBACxB,KAAK4I,EAAA,EAAgBC,mBACjB,OAAOlB,EAAQjU,EAAM+I,EAAOC,SAAWD,EAAOC,QAAQoM,gBAE1D,QACI,OAAOpV,GAIf,SAAA2U,EACInc,EACAuQ,GAEA,YAHA,IAAAvQ,MAAoC8b,EAAc9b,QAG1CuQ,EAAOpT,MACf,KAAKsf,EAAA,EAAmB7I,sBACxB,KAAK6I,EAAA,EAAmB3I,sBACpB,OAAO+H,EAAU7b,EAAQ,iBAAasF,GAE1C,KAAKmX,EAAA,EAAmBxI,mBACpB,OAAO4H,EAAU7b,EAAQ,YAAauQ,EAAOC,SAEjD,KAAK8L,EAAA,EAAyBO,8BAC9B,KAAKP,EAAA,EAAyBC,8BAC1B,OAAOV,EAAU7b,EAAQ,mBAAesF,GAE5C,KAAKgX,EAAA,EAAyBQ,2BAC1B,OAAOjB,EAAU7b,EAAQ,cAAeuQ,EAAOC,SAEnD,KAAK8L,EAAA,EAAyBS,yBAC9B,KAAKT,EAAA,EAAyBE,yBAC1B,OAAOX,EAAU7b,EAAQ,4BAAwBsF,GAErD,KAAKgX,EAAA,EAAyBU,sBAC1B,OAAOnB,EAAU7b,EAAQ,uBAAwBuQ,EAAOC,SAE5D,QACI,OAAOxQ,GAIf,SAAAoc,EACIL,EACAxL,GAEA,YAHA,IAAAwL,MAAwCD,EAAcC,UAG9CxL,EAAOpT,MACf,KAAKsf,EAAA,EAAmB7I,sBACpB,OAAOiI,EAAUE,EAAU,aAAa,GAE5C,KAAKU,EAAA,EAAmB3I,sBACxB,KAAK2I,EAAA,EAAmBxI,mBACpB,OAAO4H,EAAUE,EAAU,aAAa,GAE5C,KAAKO,EAAA,EAAyBO,8BAC1B,OAAOhB,EAAUE,EAAU,cAAc,GAE7C,KAAKO,EAAA,EAAyBQ,2BAC9B,KAAKR,EAAA,EAAyBC,8BAC1B,OAAOV,EAAUE,EAAU,cAAc,GAE7C,KAAKO,EAAA,EAAyBS,yBAC1B,OAAOlB,EAAUE,EAAU,uBAAuB,GAEtD,KAAKO,EAAA,EAAyBU,sBAC9B,KAAKV,EAAA,EAAyBE,yBAC1B,OAAOX,EAAUE,EAAU,uBAAuB,GAEtD,QACI,OAAOA,eCrFA,SAAAkB,EAAyBC,EAAoBC,EAAgBjc,GAChE,IAAApB,GAAAoB,GAAA,IAAAkc,mBAAA,IAAAtd,EAAA,SAAAud,EAAAC,GAAA,OAAAD,EAAAlV,KAAAmV,EAAAnV,IAAArI,EAGR,IAAKod,EACD,OAAOC,EAMX,IAAKA,GAAYD,IAAiBC,EAC9B,OAAOD,EAMX,IAAIK,EAAqB,EACrBC,EAAiB,EAEfC,EAAsB,SAAIC,EAAkBhC,EAAiBC,GAI/D,OAHA4B,GAAsBG,IAAkBhC,EAAe,EAAI,EAC3D8B,GAAkBE,IAAkB/B,EAAW,EAAI,EAE5C+B,GAGL3Z,EAASoZ,EAASpV,IAAI,SAAC4V,EAASrc,GAClC,IAAMsc,EAAcV,GAAgBA,EAAa5b,GAEjD,OAAIpG,OAAA2iB,EAAA,EAAA3iB,CAAc0iB,IAAgB1iB,OAAA2iB,EAAA,EAAA3iB,CAAcyiB,GACxCP,EAAYQ,EAAaD,GAClBF,EACHK,EAAYF,EAAaD,GACzBC,EACAD,GAIDF,EACHhC,EAAQmC,EAAaD,GACrBC,EACAD,GAIJziB,OAAA8O,EAAA,QAAA9O,CAAQ0iB,IAAgB1iB,OAAA8O,EAAA,QAAA9O,CAAQyiB,GACzBF,EACHR,EAAaW,EAAaD,GAC1BC,EACAD,GAIDF,EACHhC,EAAQmC,EAAaD,GACrBC,EACAD,KAOR,OAAIJ,IAAuBJ,EAAS9b,QAAW6b,GAAgBA,EAAa7b,SAAW8b,EAAS9b,OACrF6b,EAKPM,IAAmBL,EAAS9b,OACrB8b,EAGJpZ,EC/EI,SAAA+Z,EAAuCC,EAAmBC,GACrE,OAAKD,EAMAC,GAAaD,IAAkBC,EAO5B9iB,OAAOgH,KAAK8b,GACflW,OAAO,SAAC/D,EAAQhI,GACb,IAAM2f,EAAe3X,EAAOhI,GACtB4f,EAAWqC,EAAUjiB,GAE3B,OAAIb,OAAA2iB,EAAA,EAAA3iB,CAAcwgB,IAAiBxgB,OAAA2iB,EAAA,EAAA3iB,CAAcygB,GACtCE,EAAU9X,EAAQhI,EAAK+hB,EAAYpC,EAAcC,IAGxDzgB,OAAA8O,EAAA,QAAA9O,CAAQwgB,IAAiBxgB,OAAA8O,EAAA,QAAA9O,CAAQygB,GAC1BE,EAAU9X,EAAQhI,EAAKkhB,EAAavB,EAAcC,IAGtDE,EAAU9X,EAAQhI,EAAK4f,IAC/BoC,GApBIA,EANAC,6BCKFC,EAA2B,CACpCje,OAAQ,GACR+b,SAAU,ICLC,SAAAmC,EACX7I,EACA9E,GAQA,YATA,IAAA8E,MAAA4I,GAGgB/iB,OAAA+gB,EAAA,gBAAA/gB,CAA2B,CACvCsM,KAAM2W,EACNne,OAAQ9E,OAAA+gB,EAAA,gBAAA/gB,CAAgBkjB,EAAehD,GACvCW,SAAUsC,GAGPhC,CAAQhH,EAAO9E,GAG1B,SAAS4N,EACL3W,EACA+I,GAEA,OAAQA,EAAOpT,MACf,KAAKmf,EAAA,EAAyBC,8BAC9B,KAAKE,EAAA,EAAmB3I,sBACxB,KAAKwK,EAAA,EAAsB5G,4BAC3B,KAAK4G,EAAA,EAAsBrG,2BAC3B,KAAKqG,EAAA,EAAsBzG,2BAC3B,KAAKyG,EAAA,EAAsB3H,8BAC3B,KAAK4H,EAAA,EAAiBC,qBACtB,KAAKD,EAAA,EAAiBE,sBACtB,KAAKC,EAAA,EAA0BC,8BAC/B,KAAKD,EAAA,EAA0BE,+BAC3B,OAAOd,EAAYtW,EAAM+I,EAAOC,SAAWD,EAAOC,QAAQqF,MAE9D,QACI,OAAOrO,GAIf,SAAS6W,EACLtC,EACAxL,GAEA,YAHA,IAAAwL,MAA8BkC,EAAclC,UAGpCxL,EAAOpT,MACf,KAAKsf,EAAA,EAAmB7I,sBACpB,OAAOiI,EAAUE,EAAU,aAAa,GAE5C,KAAKU,EAAA,EAAmBxI,mBACxB,KAAKwI,EAAA,EAAmB3I,sBACpB,OAAO+H,EAAUE,EAAU,aAAa,GAE5C,QACI,OAAOA,GAIf,SAASqC,EACLpe,EACAuQ,GAEA,YAHA,IAAAvQ,MAA0Bie,EAAcje,QAGhCuQ,EAAOpT,MACf,KAAKsf,EAAA,EAAmB7I,sBACxB,KAAK6I,EAAA,EAAmB3I,sBACpB,OAAO+H,EAAU7b,EAAQ,iBAAasF,GAE1C,KAAKmX,EAAA,EAAmBxI,mBACpB,OAAO4H,EAAU7b,EAAQ,YAAauQ,EAAOC,SAEjD,QACI,OAAOxQ,eChDF6e,EAAqC,CAC9CrX,KAAM,GACNxH,OAAQ,GACR+b,SAAU,IC1BR+C,EAA8C,CAAEC,sBAAuB,IACvEC,EAAiD,GACjDC,EAAoD,GAE3C,SAAAC,EACX7J,EACA9E,aAEA,YAHA,IAAA8E,MAAAwJ,GAGKtO,EAAO5L,MAAS4L,EAAO5L,KAAKS,SAIjBlK,OAAA+gB,EAAA,gBAAA/gB,CAAqC,CACjDsM,KAAMtM,OAAA+gB,EAAA,gBAAA/gB,EAAe4E,EAAA,GACjBA,EAACyQ,EAAO5L,KAAKS,UAAW+Z,MAE5Bnf,OAAQ9E,OAAA+gB,EAAA,gBAAA/gB,EAAe6E,EAAA,GACnBA,EAACwQ,EAAO5L,KAAKS,UAAWga,MAE5BrD,SAAU7gB,OAAA+gB,EAAA,gBAAA/gB,EAAe+E,EAAA,GACrBA,EAACsQ,EAAO5L,KAAKS,UAAWia,OAIzBhD,CAAQhH,EAAO9E,GAfX8E,EAkBf,SAAS8J,EACL3X,EACA+I,SAEA,YAHA,IAAA/I,MAAAsX,GAGQvO,EAAOpT,MACf,KAAKmiB,EAAA,EAAyBC,0BAC1B,OAAKhP,EAAO5L,MAAS4L,EAAO5L,KAAK6a,YAI1B1B,EAAYtW,EAAM,CACrBuX,uBAAqBjf,EAAA,GACjBA,EAACyQ,EAAO5L,KAAK6a,cAAc,OALxBhY,EASf,KAAK8X,EAAA,EAAyBG,4BAC1B,OAAO5D,EAAUrU,EAAM,wBAAyB,IAGpD,OAAOA,EAGX,SAAS4X,EACLpf,EACAuQ,GAEA,YAHA,IAAAvQ,MAAAgf,GAGQzO,EAAOpT,MACf,KAAKmiB,EAAA,EAAyBI,0BAC9B,KAAKJ,EAAA,EAAyBC,0BAC1B,OAAO1D,EAAU7b,EAAQ,uBAAmBsF,GAEhD,KAAKga,EAAA,EAAyBK,uBAC1B,OAAO9D,EAAU7b,EAAQ,kBAAmBuQ,EAAOC,SAEvD,KAAK8O,EAAA,EAAyBM,4BAC9B,KAAKN,EAAA,EAAyBG,4BAC1B,OAAO5D,EAAU7b,EAAQ,yBAAqBsF,GAElD,KAAKga,EAAA,EAAyBO,yBAC1B,OAAOhE,EAAU7b,EAAQ,oBAAqBuQ,EAAOC,SAEzD,QACI,OAAOxQ,GAIf,SAASqf,EACLtD,EACAxL,GAEA,YAHA,IAAAwL,MAAAkD,GAGQ1O,EAAOpT,MACf,KAAKmiB,EAAA,EAAyBI,0BAC1B,OAAO7D,EAAUE,EAAU,kBAAkB,GAEjD,KAAKuD,EAAA,EAAyBK,uBAC9B,KAAKL,EAAA,EAAyBC,0BAC1B,OAAO1D,EAAUE,EAAU,kBAAkB,GAEjD,KAAKuD,EAAA,EAAyBM,4BAC1B,OAAO/D,EAAUE,EAAU,oBAAoB,GAEnD,KAAKuD,EAAA,EAAyBO,yBAC9B,KAAKP,EAAA,EAAyBG,4BAC1B,OAAO5D,EAAUE,EAAU,oBAAoB,GAEnD,QACI,OAAOA,eChFF+D,EAA6B,CACtCnb,KAAM,GACN3E,OAAQ,GACR+b,SAAU,ICfC,SAAAgE,EACX1K,EACA9E,GAQA,YATA,IAAA8E,MAAAyK,GAGgB5kB,OAAA+gB,EAAA,gBAAA/gB,CAA6B,CACzCsM,KAAMwY,EACNhgB,OAAQ9E,OAAA+gB,EAAA,gBAAA/gB,CAAgB+kB,EAAe7E,GACvCW,SAAUmE,IAGP7D,CAAQhH,EAAO9E,GAG1B,SAASyP,EACLxY,EACA+I,GAEA,OAAQA,EAAOpT,MACf,KAAKgjB,EAAA,EAAiBC,oBAClB,OAAOtC,EAAYtW,EAAM+I,EAAOC,SAEpC,QACI,OAAOhJ,GAIf,SAASyY,EACLjgB,EACAuQ,GAEA,YAHA,IAAAvQ,MAA4B8f,EAAc9f,QAGlCuQ,EAAOpT,MACf,KAAKgjB,EAAA,EAAiBC,oBAClB,OAAOvE,EAAU7b,EAAQ,iBAAasF,GAE1C,KAAK6a,EAAA,EAAiBE,iBAClB,OAAOxE,EAAU7b,EAAQ,YAAauQ,EAAOC,SAEjD,QACI,OAAOxQ,GAIf,SAASkgB,GACLnE,EACAxL,GAEA,YAHA,IAAAwL,MAAgC+D,EAAc/D,UAGtCxL,EAAOpT,MACf,KAAKgjB,EAAA,EAAiBG,oBAClB,OAAOzE,EAAUE,EAAU,aAAa,GAE5C,KAAKoE,EAAA,EAAiBC,oBACtB,KAAKD,EAAA,EAAiBE,iBAClB,OAAOxE,EAAUE,EAAU,aAAa,GAE5C,QACI,OAAOA,GC3CR,IAAMwE,GAA6B,CACtCvgB,OAAQ,GACR+b,SAAU,ICZC,SAAAyE,GACXnL,EACA9E,GAQA,YATA,IAAA8E,MAAAkL,IAGgBrlB,OAAA+gB,EAAA,gBAAA/gB,CAA6B,CACzCsM,KAAMiZ,GACNzgB,OAAQ9E,OAAA+gB,EAAA,gBAAA/gB,CAAgBwlB,GAAetF,GACvCW,SAAU4E,IAGPtE,CAAQhH,EAAO9E,GAG1B,SAASkQ,GACLjZ,EACA+I,GAEA,OAAQA,EAAOpT,MACf,KAAKsf,EAAA,EAAmB3I,sBACxB,KAAKyK,EAAA,EAAiBC,qBACtB,KAAKD,EAAA,EAAiBE,sBACtB,KAAK/B,EAAA,EAAgBC,mBACjB,OAAOM,EAAazV,EAAM+I,EAAOC,SAAWD,EAAOC,QAAQoQ,SAE/D,QACI,OAAOpZ,GAIf,SAASkZ,GACL1gB,EACAuQ,GAEA,YAHA,IAAAvQ,MAAA,IAGQuQ,EAAOpT,MACf,KAAKohB,EAAA,EAAiBsC,qBACtB,KAAKtC,EAAA,EAAiBC,qBAClB,OAAO3C,EAAU7b,EAAQ,wBAAoBsF,GAEjD,KAAKiZ,EAAA,EAAiBuC,kBAClB,OAAOjF,EAAU7b,EAAQ,mBAAoBuQ,EAAOC,SAExD,KAAK+N,EAAA,EAAiBwC,sBACtB,KAAKxC,EAAA,EAAiBE,sBAClB,OAAO5C,EAAU7b,EAAQ,yBAAqBsF,GAElD,KAAKiZ,EAAA,EAAiByC,mBAClB,OAAOnF,EAAU7b,EAAQ,oBAAqBuQ,EAAOC,SAEzD,QACI,OAAOxQ,GAIf,SAAS2gB,GACL5E,EACAxL,GAEA,YAHA,IAAAwL,MAAA,IAGQxL,EAAOpT,MACf,KAAKohB,EAAA,EAAiBsC,qBAClB,OAAOhF,EAAUE,EAAU,oBAAoB,GAEnD,KAAKwC,EAAA,EAAiBC,qBACtB,KAAKD,EAAA,EAAiBuC,kBAClB,OAAOjF,EAAUE,EAAU,oBAAoB,GAEnD,KAAKwC,EAAA,EAAiBwC,sBAClB,OAAOlF,EAAUE,EAAU,oBAAoB,GAEnD,KAAKwC,EAAA,EAAiBE,sBACtB,KAAKF,EAAA,EAAiByC,mBAClB,OAAOnF,EAAUE,EAAU,oBAAoB,GAEnD,QACI,OAAOA,GC/DR,IAAMkF,GAAsC,CAC/CjhB,OAAQ,GACR+b,SAAU,ICXC,SAAAmF,GACX7L,EACA9E,GAQA,YATA,IAAA8E,MAAA4L,IAGgB/lB,OAAA+gB,EAAA,gBAAA/gB,CAAsC,CAClDsM,KAAM2Z,GACNnhB,OAAQ9E,OAAA+gB,EAAA,gBAAA/gB,CAAgBkmB,GAAehG,GACvCW,SAAUsF,IAGPhF,CAAQhH,EAAO9E,GAG1B,SAAS4Q,GACL3Z,EACA+I,GAEA,OAAQA,EAAOpT,MACf,KAAKsf,EAAA,EAAmB3I,sBACxB,KAAKwK,EAAA,EAAsB5G,4BAC3B,KAAK4G,EAAA,EAAsBzG,2BAC3B,KAAKyG,EAAA,EAAsBrG,2BAC3B,KAAKqG,EAAA,EAAsB3H,8BAC3B,KAAK4H,EAAA,EAAiBC,qBACtB,KAAKD,EAAA,EAAiBE,sBACtB,KAAKC,EAAA,EAA0BC,8BAC/B,KAAKD,EAAA,EAA0BE,+BAC3B,OAAO3B,EAAazV,EAAM+I,EAAOC,SAAWD,EAAOC,QAAQ8Q,kBAE/D,QACI,OAAO9Z,GAIf,SAAS4Z,GACLphB,EACAuQ,GAEA,YAHA,IAAAvQ,MAAqCihB,GAAcjhB,QAG3CuQ,EAAOpT,MACf,KAAKuhB,EAAA,EAA0B6C,8BAC/B,KAAK7C,EAAA,EAA0BC,8BAC3B,OAAO9C,EAAU7b,EAAQ,iCAA6BsF,GAE1D,KAAKoZ,EAAA,EAA0B8C,2BAC3B,OAAO3F,EAAU7b,EAAQ,4BAA6BuQ,EAAOC,SAEjE,KAAKkO,EAAA,EAA0B+C,+BAC/B,KAAK/C,EAAA,EAA0BE,+BAC3B,OAAO/C,EAAU7b,EAAQ,kCAA8BsF,GAE3D,KAAKoZ,EAAA,EAA0BgD,4BAC3B,OAAO7F,EAAU7b,EAAQ,6BAA8BuQ,EAAOC,SAElE,QACI,OAAOxQ,GAIf,SAASqhB,GACLtF,EACAxL,GAEA,YAHA,IAAAwL,MAAyCkF,GAAclF,UAG/CxL,EAAOpT,MACf,KAAKuhB,EAAA,EAA0B6C,8BAC3B,OAAO1F,EAAUE,EAAU,6BAA6B,GAE5D,KAAK2C,EAAA,EAA0BC,8BAC/B,KAAKD,EAAA,EAA0B8C,2BAC3B,OAAO3F,EAAUE,EAAU,6BAA6B,GAE5D,KAAK2C,EAAA,EAA0B+C,+BAC3B,OAAO5F,EAAUE,EAAU,6BAA6B,GAE5D,KAAK2C,EAAA,EAA0BE,+BAC/B,KAAKF,EAAA,EAA0BgD,4BAC3B,OAAO7F,EAAUE,EAAU,6BAA6B,GAE5D,QACI,OAAOA,GCpFR,IAAM4F,GAA+B,GCE7B,SAAAC,GACXvM,EACA9E,GAMA,YAPA,IAAA8E,MAAAsM,IAGgBzmB,OAAA+gB,EAAA,gBAAA/gB,CAA+C,CAC3DsM,KAAMqa,IAGHxF,CAAQhH,EAAO9E,GAG1B,SAASsR,GACLra,EACA+I,GAEA,OAAQA,EAAOpT,MACf,KAAKsf,EAAA,EAAmB3I,sBACpB,OAAOgK,EAAYtW,EAAM+I,EAAOC,SAAWD,EAAOC,QAAQsR,UAE9D,QACI,OAAOta,eCUFua,GAAuC,CAChDva,KAAM,GACNxH,OAAQ,GACR+b,SAAU,ICjCC,SAAAiG,GACX3M,EACA9E,GAQA,YATA,IAAA8E,MAAA0M,IAGgB7mB,OAAA+gB,EAAA,gBAAA/gB,CAA+D,CAC3EsM,KAAMya,GACNjiB,OAAQ9E,OAAA+gB,EAAA,gBAAA/gB,CAAgBgnB,GAAe9G,GACvCW,SAAUoG,IAGP9F,CAAQhH,EAAO9E,GAG1B,SAAS0R,GACLza,EACA+I,WAEA,YAHA,IAAA/I,MAAkCua,GAAcva,MAGxC+I,EAAOpT,MACf,KAAKilB,GAAA,EAA2BC,oBAC5B,OAAOvE,EAAYtW,IAAI1H,EAAA,IAClByQ,EAAO5L,MAAQ4L,EAAO5L,KAAKS,UAAW,CACnCkd,eAAe,OAI3B,KAAKF,GAAA,EAA2BG,sBAC5B,OAAOzE,EAAYtW,IAAIzH,EAAA,IAClBwQ,EAAO5L,MAAQ4L,EAAO5L,KAAKS,UAAW,CACnCkd,eAAe,OAK3B,OAAO9a,EAGX,SAAS0a,GACLliB,EACAuQ,GAEA,YAHA,IAAAvQ,MAAsC+hB,GAAc/hB,QAG5CuQ,EAAOpT,MACf,KAAKilB,GAAA,EAA2BI,oBAChC,KAAKJ,GAAA,EAA2BC,oBAC5B,OAAOvE,EAAY9d,EAAQ,CACvByiB,qBAAiBnd,EACjBod,wBAAoBpd,IAG5B,KAAK8c,GAAA,EAA2BO,iBAC5B,OAAO7E,EAAY9d,EAAQ,CACvByiB,gBAAiBlS,EAAOC,QACxBkS,mBAAoBnS,EAAO5L,MAAQ4L,EAAO5L,KAAKS,WAGvD,KAAKgd,GAAA,EAA2BQ,sBAChC,KAAKR,GAAA,EAA2BG,sBAC5B,OAAOzE,EAAY9d,EAAQ,CACvB6iB,uBAAmBvd,EACnBwd,0BAAsBxd,IAG9B,KAAK8c,GAAA,EAA2BW,mBAC5B,OAAOjF,EAAY9d,EAAQ,CACvB6iB,kBAAmBtS,EAAOC,QAC1BsS,qBAAsBvS,EAAO5L,MAAQ4L,EAAO5L,KAAKS,WAGzD,KAAKgd,GAAA,EAA2BY,gBAChC,KAAKZ,GAAA,EAA2Ba,gBAC5B,OAAOnF,EAAY9d,EAAQ,CACvBkjB,iBAAa5d,EACb6d,oBAAgB7d,IAGxB,KAAK8c,GAAA,EAA2BgB,aAC5B,OAAOtF,EAAY9d,EAAQ,CACvBkjB,YAAa3S,EAAOC,QACpB2S,eAAgB5S,EAAO5L,MAAQ4L,EAAO5L,KAAKS,WAGnD,KAAKgd,GAAA,EAA2BiB,iBAChC,KAAKjB,GAAA,EAA2BkB,iBAC5B,OAAOxF,EAAY9d,EAAQ,CACvBujB,kBAAcje,EACdke,qBAAiBle,IAGzB,KAAK8c,GAAA,EAA2BqB,cAC5B,OAAO3F,EAAY9d,EAAQ,CACvBujB,aAAchT,EAAOC,QACrBgT,gBAAiBjT,EAAO5L,MAAQ4L,EAAO5L,KAAKS,WAGpD,KAAKgd,GAAA,EAA2BsB,yBAChC,KAAKtB,GAAA,EAA2BuB,0BAC5B,OAAO7F,EAAY9d,EAAQ,CACvB4jB,4BAAwBte,EACxBue,+BAA2Bve,IAGnC,KAAK8c,GAAA,EAA2B0B,wBAC5B,OAAOhG,EAAY9d,EAAQ,CACvB4jB,uBAAwBrT,EAAOC,QAC/BqT,0BAA2BtT,EAAO5L,KAAKS,WAG/C,QACI,OAAOpF,GAIf,SAASmiB,GACLpG,EACAxL,GAEA,YAHA,IAAAwL,MAA0CgG,GAAchG,UAGhDxL,EAAOpT,MACf,KAAKilB,GAAA,EAA2BI,oBAC5B,OAAO1E,EAAY/B,EAAU,CACzBgI,gBAAgB,EAChBrB,mBAAoBnS,EAAO5L,MAAQ4L,EAAO5L,KAAKS,WAGvD,KAAKgd,GAAA,EAA2BO,iBAChC,KAAKP,GAAA,EAA2BC,oBAC5B,OAAOvE,EAAY/B,EAAU,CACzBgI,gBAAgB,EAChBrB,wBAAoBpd,IAG5B,KAAK8c,GAAA,EAA2BQ,sBAC5B,OAAO9E,EAAY/B,EAAU,CACzBiI,kBAAkB,EAClBlB,qBAAsBvS,EAAO5L,MAAQ4L,EAAO5L,KAAKS,WAGzD,KAAKgd,GAAA,EAA2BW,mBAChC,KAAKX,GAAA,EAA2BG,sBAC5B,OAAOzE,EAAY/B,EAAU,CACzBiI,kBAAkB,EAClBlB,0BAAsBxd,IAG9B,KAAK8c,GAAA,EAA2BY,gBAC5B,OAAOlF,EAAY/B,EAAU,CACzBkI,aAAa,EACbd,eAAgB5S,EAAO5L,MAAQ4L,EAAO5L,KAAKS,WAGnD,KAAKgd,GAAA,EAA2BgB,aAChC,KAAKhB,GAAA,EAA2Ba,gBAC5B,OAAOnF,EAAY/B,EAAU,CACzBkI,aAAa,EACbd,oBAAgB7d,IAGxB,KAAK8c,GAAA,EAA2BiB,iBAC5B,OAAOvF,EAAY/B,EAAU,CACzBmI,cAAc,EACdV,gBAAiBjT,EAAO5L,MAAQ4L,EAAO5L,KAAKS,WAGpD,KAAKgd,GAAA,EAA2BqB,cAChC,KAAKrB,GAAA,EAA2BkB,iBAC5B,OAAOxF,EAAY/B,EAAU,CACzBmI,cAAc,EACdV,qBAAiBle,IAGzB,KAAK8c,GAAA,EAA2BsB,yBAC5B,OAAO5F,EAAY/B,EAAU,CACzBoI,qBAAqB,EACrBN,0BAA2BtT,EAAO5L,KAAKS,WAG/C,KAAKgd,GAAA,EAA2BuB,0BAChC,KAAKvB,GAAA,EAA2B0B,wBAC5B,OAAOhG,EAAY/B,EAAU,CACzBoI,qBAAqB,EACrBN,+BAA2Bve,IAGnC,QACI,OAAOyW,gBC9KFqI,GAA8B,CACvCpkB,OAAQ,GACR+b,SAAU,ICTC,SAAAsI,GACXhP,EACA9E,GAQA,YATA,IAAA8E,MAAA+O,IAGgBlpB,OAAA+gB,EAAA,gBAAA/gB,CAA8B,CAC1CsM,KAAM8c,GACNtkB,OAAQ9E,OAAA+gB,EAAA,gBAAA/gB,CAAgBqpB,GAAenJ,GACvCW,SAAUyI,IAGPnI,CAAQhH,EAAO9E,GAG1B,SAAS+T,GACL9c,EACA+I,GAEA,OAAQA,EAAOpT,MACf,KAAKsnB,GAAA,EAAkBC,uBACnB,OAAOzH,EAAazV,EAAM+I,EAAOC,SAErC,QACI,OAAOhJ,GAIf,SAAS+c,GACLvkB,EACAuQ,GAEA,YAHA,IAAAvQ,MAA6BokB,GAAcpkB,QAGnCuQ,EAAOpT,MACf,KAAKsnB,GAAA,EAAkBE,uBACvB,KAAKF,GAAA,EAAkBC,uBACnB,OAAO7I,EAAU7b,EAAQ,iBAAasF,GAE1C,KAAKmf,GAAA,EAAkBG,oBACnB,OAAO/I,EAAU7b,EAAQ,YAAauQ,EAAOC,SAEjD,QACI,OAAOxQ,GAIf,SAASwkB,GACLzI,EACAxL,GAEA,YAHA,IAAAwL,MAAiCqI,GAAcrI,UAGvCxL,EAAOpT,MACf,KAAKsnB,GAAA,EAAkBE,uBACnB,OAAO9I,EAAUE,EAAU,aAAa,GAE5C,KAAK0I,GAAA,EAAkBC,uBACvB,KAAKD,GAAA,EAAkBG,oBACnB,OAAO/I,EAAUE,EAAU,aAAa,GAE5C,QACI,OAAOA,GC/BR,IAAM8I,GAA4B,CACrC7kB,OAAQ,GACR2E,KAAM,GACNoX,SAAU,aC3BC,SAAA+I,GACXzP,EACA9E,GASA,YAVA,IAAA8E,MAAAwP,IAGgB3pB,OAAA+gB,EAAA,gBAAA/gB,CAA4B,CACxCsM,KAAMud,GACN/kB,OAAQ9E,OAAA+gB,EAAA,gBAAA/gB,CAAgB8pB,GAAe5J,GACvCzW,KAAMsgB,GACNlJ,SAAUmJ,IAGP7I,CAAQhH,EAAO9E,GAG1B,SAASwU,GACLvd,EACA+I,GAEA,OAAQA,EAAOpT,MACf,KAAKuf,EAAA,EAAgBC,mBACrB,KAAKD,EAAA,EAAgByI,2BACjB,OAAOrH,EAAYtW,EAAMtM,OAAA8O,EAAA,KAAA9O,CAAKqV,EAAOC,QAAS,CAAC,iBAAkB,aAErE,QACI,OAAOhJ,GAIf,SAAAyd,GACItgB,EACA4L,GAEA,OAAQA,EAAOpT,MACf,KAAKuf,EAAA,EAAgB0I,uBACrB,KAAK1I,EAAA,EAAgB2I,qBACjB,OAAOvH,EAAYnZ,EAAM7F,EAAA,YAClByR,EAAO5L,KAAI,CACd2gB,YAAa/U,EAAOC,SAAWD,EAAOC,QAAQ+U,MAAMD,YACpDE,WAAYjV,EAAOC,SAAWD,EAAOC,QAAQ+U,MAAME,MACnDC,QAASnV,EAAOC,SAAWD,EAAOC,QAAQ+U,OAAShV,EAAOC,QAAQ+U,MAAMG,WAGhF,KAAKC,GAAA,EAAyBC,UAC1B,OAAO/J,EAAUlX,EAAM,sBAAuB4L,EAAOC,SAEzD,QACI,OAAO7L,GAIf,SAASqgB,GACLhlB,EACAuQ,GAEA,YAHA,IAAAvQ,MAA2B6kB,GAAc7kB,QAGjCuQ,EAAOpT,MACf,KAAKuf,EAAA,EAAgBmJ,mBACrB,KAAKnJ,EAAA,EAAgBC,mBACrB,KAAKD,EAAA,EAAgByI,2BACrB,KAAKzI,EAAA,EAAgBoJ,2BACjB,OAAOjK,EAAU7b,EAAQ,iBAAasF,GAE1C,KAAKoX,EAAA,EAAgBqJ,gBACrB,KAAKrJ,EAAA,EAAgBsJ,wBACjB,OAAOnK,EAAU7b,EAAQ,YAAauQ,EAAOC,SAEjD,QACI,OAAOxQ,GAIf,SAASklB,GACLnJ,EACAxL,GAEA,YAHA,IAAAwL,MAA+B8I,GAAc9I,UAGrCxL,EAAOpT,MACf,KAAKuf,EAAA,EAAgBmJ,mBACrB,KAAKnJ,EAAA,EAAgBoJ,2BACjB,OAAOjK,EAAUE,EAAU,aAAa,GAE5C,KAAKW,EAAA,EAAgBC,mBACrB,KAAKD,EAAA,EAAgBqJ,gBACrB,KAAKrJ,EAAA,EAAgByI,2BACrB,KAAKzI,EAAA,EAAgBsJ,wBACjB,OAAOnK,EAAUE,EAAU,aAAa,GAE5C,QACI,OAAOA,gBC1FA,SAAAkK,GAAwB5Q,EAA0B9E,GAK7D,YALmC,IAAA8E,MAAA,IACnBna,OAAA+gB,EAAA,gBAAA/gB,CAA6C,CACzDsM,KAAM0e,IAGH7J,CAAQhH,EAAO9E,GAG1B,SAAS2V,GAAY1e,EAAuC+I,GACxD,OAAQA,EAAOpT,MACf,KAAKgpB,GAAA,EAAkBC,uBACnB,OAAO7V,EAAOC,QAElB,QACI,OAAOhJ,gBCEF6e,GAAoC,CAC7CrmB,OAAQ,GACR+b,SAAU,ICdC,SAAAuK,GACXjR,EACA9E,GASA,YAVA,IAAA8E,MAAAgR,IAGgBnrB,OAAA+gB,EAAA,gBAAA/gB,CAAoC,CAChDsM,KAAM+e,GACNvmB,OAAQ9E,OAAA+gB,EAAA,gBAAA/gB,CAAgBsrB,GAAepL,GACvCzW,KAAM8hB,GACN1K,SAAU2K,IAGPrK,CAAQhH,EAAO9E,GAG1B,SAASgW,GACL/e,EACA+I,GAEA,OAAQA,EAAOpT,MACf,KAAKwpB,GAAA,EAAwBphB,2BACzB,OCnBO,SACXqhB,EACA5e,EACAsL,GAEA,IAAKtL,EACD,OAAO4e,EAGX,IAAMC,EAAmB3rB,OAAA8O,EAAA,KAAA9O,CAAK8M,EAAM,MAC9B1G,EAAQpG,OAAA8O,EAAA,UAAA9O,CAAU0rB,EAA4B,iBAAdtT,EAAyBpY,OAAA8O,EAAA,OAAA9O,CAAOoY,GAAcA,GAAauT,GAC3F1J,EAAeyJ,EAAKrc,QAE1B,IAAe,IAAXjJ,EACA6b,EAASlW,KAAKe,OACX,CACH,IAAMyQ,EAAemO,EAAMtlB,GAE3B6b,EAAS7b,GAASpG,OAAA2iB,EAAA,EAAA3iB,CAAcud,IAAiBvd,OAAA2iB,EAAA,EAAA3iB,CAAc8M,GAC3D8V,EAAYrF,EAAczQ,GAC1BA,EAGR,OAAOmV,EDJI2J,CAAYtf,GAAQ,GAAI+I,EAAOC,QAASD,EAAOC,SAAW,CAC7DrI,GAAIoI,EAAOC,QAAQrI,GACnB4e,QAASxW,EAAOC,QAAQuW,UAGhC,KAAKJ,GAAA,EAAwB7hB,4BACzB,OAAOmY,EAAazV,EAAM+I,EAAOC,QAAS,CACtC4M,YAAa,SAAC4J,EAASC,GAAY,OAC/BD,EAAQ7e,KAAO8e,EAAQ9e,IAAM6e,EAAQD,UAAYE,EAAQF,WAIrE,QACI,OAAOvf,GAIf,SAASif,GACL9hB,EACA4L,GAEA,OAAQA,EAAOpT,MACf,KAAKwpB,GAAA,EAAwB7hB,4BACzB,OAAOgZ,EAAYnZ,EAAM4L,EAAO5L,MAEpC,QACI,OAAOA,GAIf,SAAS6hB,GACLxmB,EACAuQ,GAEA,YAHA,IAAAvQ,MAAmCqmB,GAAcrmB,QAGzCuQ,EAAOpT,MACf,KAAKwpB,GAAA,EAAwBliB,4BAC7B,KAAKkiB,GAAA,EAAwB7hB,4BACzB,OAAO+W,EAAU7b,EAAQ,iBAAasF,GAE1C,KAAKqhB,GAAA,EAAwBzhB,yBACzB,OAAO2W,EAAU7b,EAAQ,YAAauQ,EAAOC,SAEjD,KAAKmW,GAAA,EAAwBthB,2BAC7B,KAAKshB,GAAA,EAAwBphB,2BACzB,OAAOuY,EAAY9d,EAAQ,CACvBknB,kBAAc5hB,EACd6hB,qBAAiB7hB,IAGzB,KAAKqhB,GAAA,EAAwBnhB,wBACzB,OAAOsY,EAAY9d,EAAQ,CACvBknB,aAAc3W,EAAO5L,KAAKS,SAC1B+hB,gBAAiB5W,EAAOC,UAGhC,QACI,OAAOxQ,GAIf,SAAS0mB,GACL3K,EACAxL,GAEA,YAHA,IAAAwL,MAAuCsK,GAActK,UAG7CxL,EAAOpT,MACf,KAAKwpB,GAAA,EAAwBliB,4BACzB,OAAOoX,EAAUE,EAAU,aAAa,GAE5C,KAAK4K,GAAA,EAAwB7hB,4BAC7B,KAAK6hB,GAAA,EAAwBzhB,yBACzB,OAAO2W,EAAUE,EAAU,aAAa,GAE5C,KAAK4K,GAAA,EAAwBthB,2BACzB,OAAOyY,EAAY/B,EAAU,CACzBqL,iBAAiB,EACjBF,aAAc3W,EAAO5L,KAAKS,WAGlC,KAAKuhB,GAAA,EAAwBphB,2BAC7B,KAAKohB,GAAA,EAAwBnhB,wBACzB,OAAOsY,EAAY/B,EAAU,CACzBqL,iBAAiB,EACjBF,kBAAc5hB,IAGtB,QACI,OAAOyW,eE9EFsL,GAAsC,CAC/C7f,KAAM,GACNxH,OAAQ,GACR+b,SAAU,ICjCC,SAAAuL,GACXjS,EACA9E,GAQA,YATA,IAAA8E,MAAAgS,IAGgBnsB,OAAA+gB,EAAA,gBAAA/gB,CAA6D,CACzEsM,KAAM+f,GACNvnB,OAAQ9E,OAAA+gB,EAAA,gBAAA/gB,CAAgBssB,GAAepM,GACvCW,SAAU0L,IAGPpL,CAAQhH,EAAO9E,GAG1B,SAASgX,GACL/f,EACA+I,WAEA,YAHA,IAAA/I,MAAiC6f,GAAc7f,MAGvC+I,EAAOpT,MACf,KAAKuqB,GAAA,EAA0BrF,oBAC3B,OAAOvE,EAAYtW,IAAI1H,EAAA,IAClByQ,EAAO5L,MAAQ4L,EAAO5L,KAAKS,UAAW,CACnCkd,eAAe,OAI3B,KAAKoF,GAAA,EAA0BnF,sBAC3B,OAAOzE,EAAYtW,IAAIzH,EAAA,IAClBwQ,EAAO5L,MAAQ4L,EAAO5L,KAAKS,UAAW,CACnCkd,eAAe,OAK3B,OAAO9a,EAGX,SAASggB,GACLxnB,EACAuQ,GAEA,YAHA,IAAAvQ,MAAqCqnB,GAAcrnB,QAG3CuQ,EAAOpT,MACf,KAAKuqB,GAAA,EAA0BlF,oBAC/B,KAAKkF,GAAA,EAA0BrF,oBAC3B,OAAOvE,EAAY9d,EAAQ,CACvByiB,qBAAiBnd,EACjBod,wBAAoBpd,IAG5B,KAAKoiB,GAAA,EAA0B/E,iBAC3B,OAAO7E,EAAY9d,EAAQ,CACvByiB,gBAAiBlS,EAAOC,QACxBkS,mBAAoBnS,EAAO5L,MAAQ4L,EAAO5L,KAAKS,WAGvD,KAAKsiB,GAAA,EAA0B9E,sBAC/B,KAAK8E,GAAA,EAA0BnF,sBAC3B,OAAOzE,EAAY9d,EAAQ,CACvB6iB,uBAAmBvd,EACnBwd,0BAAsBxd,IAG9B,KAAKoiB,GAAA,EAA0B3E,mBAC3B,OAAOjF,EAAY9d,EAAQ,CACvB6iB,kBAAmBtS,EAAOC,QAC1BsS,qBAAsBvS,EAAO5L,MAAQ4L,EAAO5L,KAAKS,WAGzD,KAAKsiB,GAAA,EAA0BC,iBAC/B,KAAKD,GAAA,EAA0BE,iBAC3B,OAAO9J,EAAY9d,EAAQ,CACvB6nB,kBAAcviB,EACdwiB,qBAAiBxiB,IAGzB,KAAKoiB,GAAA,EAA0BK,cAC3B,OAAOjK,EAAY9d,EAAQ,CACvB6nB,aAActX,EAAOC,QACrBsX,gBAAiBvX,EAAO5L,MAAQ4L,EAAO5L,KAAKS,WAGpD,KAAKsiB,GAAA,EAA0BM,kBAC/B,KAAKN,GAAA,EAA0BO,kBAC3B,OAAOnK,EAAY9d,EAAQ,CACvBkoB,mBAAe5iB,EACf6iB,sBAAkB7iB,IAG1B,KAAKoiB,GAAA,EAA0BU,eAC3B,OAAOtK,EAAY9d,EAAQ,CACvBkoB,cAAe3X,EAAOC,QACtB2X,iBAAkB5X,EAAO5L,MAAQ4L,EAAO5L,KAAKS,WAGrD,KAAKsiB,GAAA,EAA0BhE,yBAC/B,KAAKgE,GAAA,EAA0B/D,0BAC3B,OAAO7F,EAAY9d,EAAQ,CACvB4jB,4BAAwBte,EACxBue,+BAA2Bve,IAGnC,KAAKoiB,GAAA,EAA0B5D,wBAC3B,OAAOhG,EAAY9d,EAAQ,CACvB4jB,uBAAwBrT,EAAOC,QAC/BqT,0BAA2BtT,EAAO5L,KAAKS,WAG/C,QACI,OAAOpF,GAIf,SAASynB,GACL1L,EACAxL,GAEA,YAHA,IAAAwL,MAAyCsL,GAActL,UAG/CxL,EAAOpT,MACf,KAAKuqB,GAAA,EAA0BlF,oBAC3B,OAAO1E,EAAY/B,EAAU,CACzBgI,gBAAgB,EAChBrB,mBAAoBnS,EAAO5L,MAAQ4L,EAAO5L,KAAKS,WAGvD,KAAKsiB,GAAA,EAA0B/E,iBAC/B,KAAK+E,GAAA,EAA0BrF,oBAC3B,OAAOvE,EAAY/B,EAAU,CACzBgI,gBAAgB,EAChBrB,wBAAoBpd,IAG5B,KAAKoiB,GAAA,EAA0B9E,sBAC3B,OAAO9E,EAAY/B,EAAU,CACzBiI,kBAAkB,EAClBlB,qBAAsBvS,EAAO5L,MAAQ4L,EAAO5L,KAAKS,WAGzD,KAAKsiB,GAAA,EAA0B3E,mBAC/B,KAAK2E,GAAA,EAA0BnF,sBAC3B,OAAOzE,EAAY/B,EAAU,CACzBiI,kBAAkB,EAClBlB,0BAAsBxd,IAG9B,KAAKoiB,GAAA,EAA0BC,iBAC3B,OAAO7J,EAAY/B,EAAU,CACzBsM,aAAa,EACbP,gBAAiBvX,EAAO5L,MAAQ4L,EAAO5L,KAAKS,WAGpD,KAAKsiB,GAAA,EAA0BK,cAC/B,KAAKL,GAAA,EAA0BE,iBAC3B,OAAO9J,EAAY/B,EAAU,CACzBsM,aAAa,EACbP,qBAAiBxiB,IAGzB,KAAKoiB,GAAA,EAA0BM,kBAC3B,OAAOlK,EAAY/B,EAAU,CACzBuM,cAAc,EACdH,iBAAkB5X,EAAO5L,MAAQ4L,EAAO5L,KAAKS,WAGrD,KAAKsiB,GAAA,EAA0BU,eAC/B,KAAKV,GAAA,EAA0BO,kBAC3B,OAAOnK,EAAY/B,EAAU,CACzBuM,cAAc,EACdH,sBAAkB7iB,IAG1B,KAAKoiB,GAAA,EAA0BhE,yBAC3B,OAAO5F,EAAY/B,EAAU,CACzBoI,qBAAqB,EACrBN,0BAA2BtT,EAAO5L,KAAKS,WAG/C,KAAKsiB,GAAA,EAA0B/D,0BAC/B,KAAK+D,GAAA,EAA0B5D,wBAC3B,OAAOhG,EAAY/B,EAAU,CACzBoI,qBAAqB,EACrBN,+BAA2Bve,IAGnC,QACI,OAAOyW,gBCrKFwM,GAAgB,CACzB/gB,KAAM,GACNxH,OAAQ,GACR+b,SAAU,ICnBC,SAAAyM,GACXnT,EACA9E,GASA,YAVA,IAAA8E,MAAAkT,IAGgBrtB,OAAA+gB,EAAA,gBAAA/gB,CAAiC,CAC7CsM,KAAMihB,GACNzoB,OAAQ9E,OAAA+gB,EAAA,gBAAA/gB,CAAgBwtB,GAAetN,GACvCzW,KAAMgkB,GACN5M,SAAU6M,IAGPvM,CAAQhH,EAAO9E,GAG1B,SAASkY,GACLjhB,EACA+I,GAEA,YAHA,IAAA/I,MAAqB+gB,GAAc/gB,MAG3B+I,EAAOpT,MACf,KAAK0rB,GAAA,EAAqBC,yBACtB,OAAO7L,EAAazV,EAAM+I,EAAOC,SAAWD,EAAOC,QAAQuY,oBAAsB,IAErF,KAAKF,GAAA,EAAqBG,0BACtB,OAAO/L,EAAazV,EAAMA,EAAKzF,OAAO,SAAAknB,GAClC,OAAAA,EAAWC,eAAiB3Y,EAAO5L,MAAQ4L,EAAO5L,KAAKwkB,iBAG/D,QACI,OAAO3hB,GAIf,SAASmhB,GACLhkB,EACA4L,GAEA,OAAQA,EAAOpT,MACf,KAAK0rB,GAAA,EAAqBC,yBAC1B,KAAKD,GAAA,EAAqBG,0BACtB,OAAOlL,EAAYnZ,EAAM4L,EAAO5L,MAEpC,QACI,OAAOA,GAIf,SAAS+jB,GACL1oB,EACAuQ,GAEA,YAHA,IAAAvQ,MAA+BuoB,GAAcvoB,QAGrCuQ,EAAOpT,MACf,KAAK0rB,GAAA,EAAqBO,yBAC1B,KAAKP,GAAA,EAAqBC,yBACtB,OAAOjN,EAAU7b,EAAQ,iBAAasF,GAE1C,KAAKujB,GAAA,EAAqBQ,0BAC1B,KAAKR,GAAA,EAAqBG,0BACtB,OAAOlL,EAAY9d,EAAQ,CACvBspB,iBAAahkB,EACbikB,sBAAkBjkB,IAG1B,KAAKujB,GAAA,EAAqBW,sBACtB,OAAO3N,EAAU7b,EAAQ,YAAauQ,EAAOC,SAEjD,KAAKqY,GAAA,EAAqBY,uBACtB,OAAO3L,EAAY9d,EAAQ,CACvBspB,YAAa/Y,EAAOC,QACpB+Y,iBAAkBhZ,EAAO5L,KAAKwkB,eAGtC,QACI,OAAOnpB,GAIf,SAAS4oB,GACL7M,EACAxL,GAEA,YAHA,IAAAwL,MAAkCwM,GAAcxM,UAGxCxL,EAAOpT,MACf,KAAK0rB,GAAA,EAAqBO,yBACtB,OAAOvN,EAAUE,EAAU,aAAa,GAE5C,KAAK8M,GAAA,EAAqBQ,0BACtB,OAAOvL,EAAY/B,EAAU,CACzB2N,YAAY,EACZC,mBAAoBpZ,EAAO5L,KAAKwkB,eAGxC,KAAKN,GAAA,EAAqBC,yBAC1B,KAAKD,GAAA,EAAqBW,sBACtB,OAAO3N,EAAUE,EAAU,aAAa,GAE5C,KAAK8M,GAAA,EAAqBG,0BAC1B,KAAKH,GAAA,EAAqBY,uBACtB,OAAO3L,EAAY/B,EAAU,CACzB2N,YAAY,EACZC,wBAAoBrkB,IAG5B,QACI,OAAOyW,gBCrGF6N,GAAqC,CAC9CpiB,KAAM,ICHK,SAAAqiB,GACXxU,EACA9E,SAEA,YAHA,IAAA8E,MAAAuU,IAGKrZ,EAAO5L,MAAS4L,EAAO5L,KAAKS,SAIjBlK,OAAA+gB,EAAA,gBAAA/gB,CAAqC,CACjDsM,KAAMtM,OAAA+gB,EAAA,gBAAA/gB,EAAe4E,EAAA,GACjBA,EAACyQ,EAAO5L,KAAKS,UAAW0kB,QAIzBzN,CAAQhH,EAAO9E,GATX8E,EAYf,SAASyU,GACLtiB,EACA+I,GAEA,YAHA,IAAA/I,MAAuBoiB,GAAcpiB,MAG7B+I,EAAOpT,MACf,KAAK4sB,GAAA,EAAyBC,iCAC1B,OAAOnO,EAAUrU,EAAM,UAAkB+I,EAAOC,SAAWD,EAAOC,QAAQyZ,SAE9E,KAAKF,GAAA,EAAyBG,kCAC1B,OAAOrO,EAAUrU,EAAM,WAAmB+I,EAAOC,SAAWD,EAAOC,QAAQ2Z,UAE/E,KAAKJ,GAAA,EAAyBK,4BAC1B,OAAOvO,EAAUrU,EAAM,WAAY+I,EAAOC,SAE9C,KAAKuZ,GAAA,EAAyBM,qBAC1B,OAAOvM,EAAYtW,EAAM+I,EAAOC,SAEpC,QACI,OAAOhJ,gBCjBF8iB,GAAkC,CAC3CtqB,OAAQ,CACJuqB,0BAA2B,GAC3BC,YAAa,GACblB,YAAa,IAEjBvN,SAAU,CACN0O,WAAY,GACZC,yBAA0B,GAC1BhB,WAAY,KCvBL,SAAAiB,GACXtV,EACA9E,GAQA,YATA,IAAA8E,MAAAiV,IAGgBpvB,OAAA+gB,EAAA,gBAAA/gB,CAAsE,CAClFsM,KAAMojB,GACN5qB,OAAQ9E,OAAA+gB,EAAA,gBAAA/gB,CAAgB2vB,GAAezP,GACvCW,SAAU+O,IAGPzO,CAAQhH,EAAO9E,GAG1B,SAASqa,GACLpjB,EACA+I,GAEA,OAAQA,EAAOpT,MACf,KAAKsf,EAAA,EAAmB3I,sBACxB,KAAKwK,EAAA,EAAsBnH,6BAC3B,KAAKmH,EAAA,EAAsB5G,4BAC3B,KAAK4G,EAAA,EAAsBzG,2BAC3B,KAAKyG,EAAA,EAAsBrG,2BAC3B,KAAKqG,EAAA,EAAsB3H,8BAC3B,KAAK4H,EAAA,EAAiBC,qBACtB,KAAKD,EAAA,EAAiBE,sBAClB,OAAOxB,EAAazV,EAAM+I,EAAOC,SAAWD,EAAOC,QAAQgF,cAE/D,KAAKuV,GAAA,EAAmBC,yBACpB,OAAO/N,EAAazV,EAAM,IAE9B,QACI,OAAOA,GAIf,SAASqjB,GACL7qB,EACAuQ,mBAEA,YAHA,IAAAvQ,MAAiCsqB,GAActqB,QAGvCuQ,EAAOpT,MACf,KAAKsf,EAAA,EAAmB7I,sBACxB,KAAK6I,EAAA,EAAmB3I,sBACxB,KAAKwK,EAAA,EAAsBnH,6BAC3B,KAAKmH,EAAA,EAAsBxH,6BACvB,OAAO+E,EAAU7b,EAAQ,iBAAasF,GAE1C,KAAKmX,EAAA,EAAmBxI,mBACxB,KAAKqK,EAAA,EAAsBlH,0BACvB,OAAOyE,EAAU7b,EAAQ,YAAauQ,EAAOC,SAEjD,KAAK8N,EAAA,EAAsB7G,4BAC3B,KAAK6G,EAAA,EAAsB5G,4BACvB,OAAOmE,EAAU7b,EAAQ,mBAAesF,GAE5C,KAAKgZ,EAAA,EAAsB3G,yBACvB,OAAOkE,EAAU7b,EAAQ,cAAeuQ,EAAOC,SAEnD,KAAK8N,EAAA,EAAsBzG,2BAC3B,KAAKyG,EAAA,EAAsB1G,2BACvB,OAAIrH,EAAO5L,KACAmZ,EAAY9d,EAAQ,CACvBwqB,aAAW1qB,EAAA,GACPA,EAACyQ,EAAO5L,KAAKwD,SAAK7C,OAKvBtF,EAEX,KAAKse,EAAA,EAAsBxG,wBACvB,OAAIvH,EAAO5L,KACAmZ,EAAY9d,EAAQ,CACvBwqB,aAAWzqB,EAAA,GACPA,EAACwQ,EAAO5L,KAAKwD,IAAKoI,EAAOC,aAK9BxQ,EAEX,KAAKse,EAAA,EAAsBrG,2BAC3B,KAAKqG,EAAA,EAAsBtG,2BACvB,OAAIzH,EAAO5L,KACAmZ,EAAY9d,EAAQ,CACvBspB,aAAWrpB,EAAA,GACPA,EAACsQ,EAAO5L,KAAKwD,SAAK7C,OAKvBtF,EAEX,KAAKse,EAAA,EAAsBpG,wBACvB,OAAI3H,EAAO5L,KACAmZ,EAAY9d,EAAQ,CACvBspB,aAAW2B,EAAA,GACPA,EAAC1a,EAAO5L,KAAKwD,IAAKoI,EAAOC,aAK9BxQ,EAEX,KAAKse,EAAA,EAAsB5H,8BAC3B,KAAK4H,EAAA,EAAsB3H,8BACvB,OAAIpG,EAAO5L,KACAmZ,EAAY9d,EAAQ,CACvBuqB,2BAAyBW,EAAA,GACrBA,EAAC3a,EAAO5L,KAAKwD,SAAK7C,OAKvBtF,EAEX,KAAKse,EAAA,EAAsB1H,2BACvB,OAAIrG,EAAO5L,KACAmZ,EAAY9d,EAAQ,CACvBuqB,2BAAyBY,EAAA,GACrBA,EAAC5a,EAAO5L,KAAKwD,IAAKoI,EAAOC,aAK9BxQ,EAEX,QACI,OAAOA,GAIf,SAAS8qB,GACL/O,EACAxL,mBAEA,YAHA,IAAAwL,MAAqCuO,GAAcvO,UAG3CxL,EAAOpT,MACf,KAAKsf,EAAA,EAAmB7I,sBACpB,OAAOiI,EAAUE,EAAU,aAAa,GAE5C,KAAKuC,EAAA,EAAsBxH,6BACvB,OAAO+E,EAAUE,EAAU,4BAA4B,GAE3D,KAAKU,EAAA,EAAmB3I,sBACxB,KAAK2I,EAAA,EAAmBxI,mBACpB,OAAO4H,EAAUE,EAAU,aAAa,GAE5C,KAAKuC,EAAA,EAAsBnH,6BAC3B,KAAKmH,EAAA,EAAsBlH,0BACvB,OAAOyE,EAAUE,EAAU,4BAA4B,GAE3D,KAAKuC,EAAA,EAAsB7G,4BACvB,OAAOoE,EAAUE,EAAU,cAAc,GAE7C,KAAKuC,EAAA,EAAsB5G,4BAC3B,KAAK4G,EAAA,EAAsB3G,yBACvB,OAAOkE,EAAUE,EAAU,cAAc,GAE7C,KAAKuC,EAAA,EAAsB1G,2BACvB,OAAIrH,EAAO5L,KACAmZ,EAAY/B,EAAU,CACzB0O,YAAU3qB,EAAA,GACNA,EAACyQ,EAAO5L,KAAKwD,KAAK,OAKvB4T,EAEX,KAAKuC,EAAA,EAAsBzG,2BAC3B,KAAKyG,EAAA,EAAsBxG,wBACvB,OAAIvH,EAAO5L,KACAmZ,EAAY/B,EAAU,CACzB0O,YAAU1qB,EAAA,GACNA,EAACwQ,EAAO5L,KAAKwD,KAAK,OAKvB4T,EAEX,KAAKuC,EAAA,EAAsBtG,2BACvB,OAAIzH,EAAO5L,KACAmZ,EAAY/B,EAAU,CACzB2N,YAAUzpB,EAAA,GACNA,EAACsQ,EAAO5L,KAAKwD,KAAK,OAKvB4T,EAEX,KAAKuC,EAAA,EAAsBrG,2BAC3B,KAAKqG,EAAA,EAAsBpG,wBACvB,OAAI3H,EAAO5L,KACAmZ,EAAY/B,EAAU,CACzB2N,YAAUuB,EAAA,GACNA,EAAC1a,EAAO5L,KAAKwD,KAAK,OAKvB4T,EAEX,KAAKuC,EAAA,EAAsB5H,8BACvB,OAAInG,EAAO5L,KACAmZ,EAAY/B,EAAU,CACzB2O,0BAAwBQ,EAAA,GACpBA,EAAC3a,EAAO5L,KAAKwD,KAAK,OAKvB4T,EAEX,KAAKuC,EAAA,EAAsB3H,8BAC3B,KAAK2H,EAAA,EAAsB1H,2BACvB,OAAIrG,EAAO5L,KACAmZ,EAAY/B,EAAU,CACzB2O,0BAAwBS,EAAA,GACpBA,EAAC5a,EAAO5L,KAAKwD,KAAK,OAKvB4T,EAEX,QACI,OAAOA,gBChOFqP,GAAsC,CAC/CprB,OAAQ,GACR+b,SAAU,ICTC,SAAAsP,GACXhW,EACA9E,GAQA,YATA,IAAA8E,MAAA+V,IAGgBlwB,OAAA+gB,EAAA,gBAAA/gB,CAAsC,CAClDsM,KAAM8jB,GACNtrB,OAAQ9E,OAAA+gB,EAAA,gBAAA/gB,CAAgBqwB,GAAenQ,GACvCW,SAAUyP,IAGPnP,CAAQhH,EAAO9E,GAG1B,SAAS+a,GACL9jB,EACA+I,GAEA,OAAQA,EAAOpT,MACf,KAAKsuB,GAAA,EAA0BC,+BAC3B,OAAOzO,EAAazV,EAAM+I,EAAOC,SAErC,QACI,OAAOhJ,GAIf,SAAS+jB,GACLvrB,EACAuQ,GAEA,YAHA,IAAAvQ,MAAqCorB,GAAcprB,QAG3CuQ,EAAOpT,MACf,KAAKsuB,GAAA,EAA0BE,+BAC/B,KAAKF,GAAA,EAA0BC,+BAC3B,OAAO7P,EAAU7b,EAAQ,iBAAasF,GAE1C,KAAKmmB,GAAA,EAA0BG,4BAC3B,OAAO/P,EAAU7b,EAAQ,YAAauQ,EAAOC,SAEjD,QACI,OAAOxQ,GAIf,SAASwrB,GACLzP,EACAxL,GAEA,YAHA,IAAAwL,MAAyCqP,GAAcrP,UAG/CxL,EAAOpT,MACf,KAAKsuB,GAAA,EAA0BE,+BAC3B,OAAO9P,EAAUE,EAAU,aAAa,GAE5C,KAAK0P,GAAA,EAA0BC,+BAC/B,KAAKD,GAAA,EAA0BG,4BAC3B,OAAO/P,EAAUE,EAAU,aAAa,GAE5C,QACI,OAAOA,gBC/BF8P,GAAuC,CAChDrkB,KAAM,GACNxH,OAAQ,GACR+b,SAAU,IC7BC,SAAA+P,GACXzW,EACA9E,GAQA,YATA,IAAA8E,MAAAwW,IAGgB3wB,OAAA+gB,EAAA,gBAAA/gB,CAA+D,CAC3EsM,KAAMukB,GACN/rB,OAAQ9E,OAAA+gB,EAAA,gBAAA/gB,CAAgB8wB,GAAe5Q,GACvCW,SAAUkQ,IAGP5P,CAAQhH,EAAO9E,GAG1B,SAASwb,GACLvkB,EACA+I,WAEA,YAHA,IAAA/I,MAAkCqkB,GAAcrkB,MAGxC+I,EAAOpT,MACf,KAAK+uB,GAAA,EAA2B7J,oBAC5B,OAAOvE,EAAYtW,IAAI1H,EAAA,IAClByQ,EAAO5L,MAAQ4L,EAAO5L,KAAKS,UAAW,CACnCkd,eAAe,OAI3B,KAAK4J,GAAA,EAA2B3J,sBAC5B,OAAOzE,EAAYtW,IAAIzH,EAAA,IAClBwQ,EAAO5L,MAAQ4L,EAAO5L,KAAKS,UAAW,CACnCkd,eAAe,OAK3B,OAAO9a,EAGX,SAASwkB,GACLhsB,EACAuQ,GAEA,YAHA,IAAAvQ,MAAsC6rB,GAAc7rB,QAG5CuQ,EAAOpT,MACf,KAAK+uB,GAAA,EAA2B1J,oBAChC,KAAK0J,GAAA,EAA2B7J,oBAC5B,OAAOvE,EAAY9d,EAAQ,CACvByiB,qBAAiBnd,EACjBod,wBAAoBpd,IAG5B,KAAK4mB,GAAA,EAA2BvJ,iBAC5B,OAAO7E,EAAY9d,EAAQ,CACvByiB,gBAAiBlS,EAAOC,QACxBkS,mBAAoBnS,EAAO5L,MAAQ4L,EAAO5L,KAAKS,WAGvD,KAAK8mB,GAAA,EAA2BtJ,sBAChC,KAAKsJ,GAAA,EAA2B3J,sBAC5B,OAAOzE,EAAY9d,EAAQ,CACvB6iB,uBAAmBvd,EACnBwd,0BAAsBxd,IAG9B,KAAK4mB,GAAA,EAA2BnJ,mBAC5B,OAAOjF,EAAY9d,EAAQ,CACvB6iB,kBAAmBtS,EAAOC,QAC1BsS,qBAAsBvS,EAAO5L,MAAQ4L,EAAO5L,KAAKS,WAGzD,KAAK8mB,GAAA,EAA2BC,uBAChC,KAAKD,GAAA,EAA2BE,uBAC5B,OAAOtO,EAAY9d,EAAQ,CACvBqsB,wBAAoB/mB,EACpBgnB,2BAAuBhnB,IAG/B,KAAK4mB,GAAA,EAA2BK,oBAC5B,OAAOzO,EAAY9d,EAAQ,CACvBqsB,mBAAoB9b,EAAOC,QAC3B8b,sBAAuB/b,EAAO5L,MAAQ4L,EAAO5L,KAAKS,WAG1D,KAAK8mB,GAAA,EAA2BM,sBAChC,KAAKN,GAAA,EAA2BO,sBAC5B,OAAO3O,EAAY9d,EAAQ,CACvB0sB,uBAAmBpnB,EACnBqnB,0BAAsBrnB,IAG9B,KAAK4mB,GAAA,EAA2BU,mBAC5B,OAAO9O,EAAY9d,EAAQ,CACvB0sB,kBAAmBnc,EAAOC,QAC1Bmc,qBAAsBpc,EAAO5L,MAAQ4L,EAAO5L,KAAKS,WAGzD,QACI,OAAOpF,GAIf,SAASisB,GACLlQ,EACAxL,GAEA,YAHA,IAAAwL,MAA0C8P,GAAc9P,UAGhDxL,EAAOpT,MACf,KAAK+uB,GAAA,EAA2B1J,oBAC5B,OAAO1E,EAAY/B,EAAU,CACzBgI,gBAAgB,EAChBrB,mBAAoBnS,EAAO5L,MAAQ4L,EAAO5L,KAAKS,WAGvD,KAAK8mB,GAAA,EAA2BvJ,iBAChC,KAAKuJ,GAAA,EAA2B7J,oBAC5B,OAAOvE,EAAY/B,EAAU,CACzBgI,gBAAgB,EAChBrB,wBAAoBpd,IAG5B,KAAK4mB,GAAA,EAA2BtJ,sBAC5B,OAAO9E,EAAY/B,EAAU,CACzBiI,kBAAkB,EAClBlB,qBAAsBvS,EAAO5L,MAAQ4L,EAAO5L,KAAKS,WAGzD,KAAK8mB,GAAA,EAA2BnJ,mBAChC,KAAKmJ,GAAA,EAA2B3J,sBAC5B,OAAOzE,EAAY/B,EAAU,CACzBiI,kBAAkB,EAClBlB,0BAAsBxd,IAG9B,KAAK4mB,GAAA,EAA2BC,uBAC5B,OAAOrO,EAAY/B,EAAU,CACzB8Q,mBAAmB,EACnBP,sBAAuB/b,EAAO5L,MAAQ4L,EAAO5L,KAAKS,WAG1D,KAAK8mB,GAAA,EAA2BK,oBAChC,KAAKL,GAAA,EAA2BE,uBAC5B,OAAOtO,EAAY/B,EAAU,CACzB8Q,mBAAmB,EACnBP,2BAAuBhnB,IAG/B,KAAK4mB,GAAA,EAA2BM,sBAC5B,OAAO1O,EAAY/B,EAAU,CACzB+Q,mBAAmB,EACnBH,qBAAsBpc,EAAO5L,MAAQ4L,EAAO5L,KAAKS,WAGzD,KAAK8mB,GAAA,EAA2BU,mBAChC,KAAKV,GAAA,EAA2BO,sBAC5B,OAAO3O,EAAY/B,EAAU,CACzB+Q,mBAAmB,EACnBH,0BAAsBrnB,IAG9B,QACI,OAAOyW,GC9IR,IAAMgR,GAA+B,CACxC/sB,OAAQ,GACR+b,SAAU,ICXC,SAAAiR,GACX3X,EACA9E,GAQA,YATA,IAAA8E,MAAA0X,IAGgB7xB,OAAA+gB,EAAA,gBAAA/gB,CAA+B,CAC3CsM,KAAMylB,GACNjtB,OAAQ9E,OAAA+gB,EAAA,gBAAA/gB,CAAgBgyB,GAAe9R,GACvCW,SAAUoR,IAGP9Q,CAAQhH,EAAO9E,GAG1B,SAAS0c,GACLzlB,EACA+I,GAEA,OAAQA,EAAOpT,MACf,KAAKsf,EAAA,EAAmB3I,sBACxB,KAAK2I,EAAA,EAAmB3H,wBACxB,KAAKwH,EAAA,EAAyBC,8BAC9B,KAAKgC,EAAA,EAAiBC,qBACtB,KAAKD,EAAA,EAAiBE,sBACtB,KAAKH,EAAA,EAAsB5G,4BAC3B,KAAK4G,EAAA,EAAsBzG,2BAC3B,KAAKyG,EAAA,EAAsBrG,2BAC3B,KAAKqG,EAAA,EAAsB3H,8BAC3B,KAAK+H,EAAA,EAA0BC,8BAC/B,KAAKD,EAAA,EAA0BE,+BAC3B,OAAOd,EAAYtW,EAAMtM,OAAA8O,EAAA,KAAA9O,CAAKqV,EAAOC,QAAS,CAC1C,iBACA,OACA,eACA,WACA,UACA,qBAGR,KAAKkM,EAAA,EAAgB2I,qBACjB,OAAOxJ,EAAUrU,EAAM,UAAW+I,EAAOC,SAAWD,EAAOC,QAAQ+U,MAAM6H,SAE7E,QACI,OAAO5lB,GAIf,SAAS0lB,GACLltB,EACAuQ,GAEA,YAHA,IAAAvQ,MAA8B+sB,GAAc/sB,QAGpCuQ,EAAOpT,MACf,KAAKsf,EAAA,EAAmB7I,sBACxB,KAAK6I,EAAA,EAAmB3I,sBACpB,OAAO+H,EAAU7b,EAAQ,iBAAasF,GAE1C,KAAKmX,EAAA,EAAmBxI,mBACpB,OAAO4H,EAAU7b,EAAQ,YAAauQ,EAAOC,SAEjD,KAAKiM,EAAA,EAAmB5H,wBACxB,KAAK4H,EAAA,EAAmB3H,wBACpB,OAAO+G,EAAU7b,EAAQ,mBAAesF,GAE5C,KAAKmX,EAAA,EAAmB1H,qBACpB,OAAO8G,EAAU7b,EAAQ,cAAeuQ,EAAOC,SAEnD,QACI,OAAOxQ,GAIf,SAASmtB,GACLpR,EACAxL,GAEA,YAHA,IAAAwL,MAAkCgR,GAAchR,UAGxCxL,EAAOpT,MACf,KAAKsf,EAAA,EAAmB7I,sBACpB,OAAOiI,EAAUE,EAAU,aAAa,GAE5C,KAAKU,EAAA,EAAmBxI,mBACxB,KAAKwI,EAAA,EAAmB3I,sBACpB,OAAO+H,EAAUE,EAAU,aAAa,GAE5C,KAAKU,EAAA,EAAmB5H,wBACpB,OAAOgH,EAAUE,EAAU,cAAc,GAE7C,KAAKU,EAAA,EAAmB1H,qBACxB,KAAK0H,EAAA,EAAmB3H,wBACpB,OAAO+G,EAAUE,EAAU,cAAc,GAE7C,QACI,OAAOA,0BClGA,SAAAsR,GAA6Cxa,GACxD,OAcJ,SAAuCA,EAAWya,GAC9C,IAAMC,EAAQryB,OAAOY,OAAO+W,GAa5B,OAGJ,SAA6BA,EAAgB2a,GAGzC,IAFA,IAAIpxB,EAAYlB,OAAOuyB,eAAe5a,GAE/BzW,GACHoxB,EAASpxB,GAETA,EAAYlB,OAAOuyB,eAAerxB,GApBtCsxB,CAAoB7a,EAAQ,SAAAzW,GACxBlB,OAAO+X,oBAAoB7W,GACtBkL,QAAQ,SAAAvM,GACQ,gBAATA,GAAiD,mBAAhBwyB,EAAMxyB,IAA2C,MAAnBA,EAAK4yB,OAAO,KAI/EJ,EAAMxyB,GAAQuyB,EAAKza,EAAiC9X,EAAiBwyB,QAI1EA,EA5BAK,CAAY/a,EAAQ,SAACA,EAAQ9X,GAChC,sBAAC,MAAAwI,EAAA,GAAAC,EAAA,EAAAA,EAAAC,UAAApC,OAAAmC,IAAAD,EAAAC,GAAAC,UAAAD,GAAmB,OAAAtI,OAAA+gB,EAAA,WAAA/gB,EAAW4E,EAAA+S,EAAO9X,IAAMJ,KAAIiJ,MAAA9D,EAAA,CAAC+S,GAAMhP,OAAKN,QCU7D,SAAAsqB,KACH,IAAMC,EAA2B5yB,OAAA6yB,GAAA,EAAA7yB,CAC7B,SAACma,GAAuB,OAAAA,EAAM7N,MAC9B,SAAA6M,GAAU,gBAAC2Z,EAA2BC,QAA3B,IAAAD,MAAA,IACP,IAAME,EAAkBhzB,OAAA8O,EAAA,KAAA9O,CAAK8yB,EAAW,CAAExf,KAAMyf,IAGhD,OAFe5Z,EAASA,EAAO8Z,YAAYC,WAAWC,sBAAwB,IAEhEtmB,IAAI,SAACumB,GAAe,OAAAC,EAAaD,EAAON,EAAWE,QAInEM,EAA0BtzB,OAAA6yB,GAAA,EAAA7yB,CAC5B,SAACma,GAAuB,OAAAA,EAAM7N,MAC9B,SAAA6M,GAAU,gBAAC2Z,EAA2BC,QAA3B,IAAAD,MAAA,IACP,IAAME,EAAkBhzB,OAAA8O,EAAA,KAAA9O,CAAK8yB,EAAW,CAAExf,KAAMyf,IAGhD,OAFe5Z,EAASA,EAAO8Z,YAAYC,WAAWK,qBAAuB,IAE/D1mB,IAAI,SAACumB,GAAe,OAAAC,EAAaD,EAAON,EAAWE,QAIzE,SAAAK,EAAsBD,EAAkBN,EAAsBE,GAC1D,MAAmB,gBAAfI,EAAMvzB,KAed,SAAwBuzB,EAAkBN,EAA2BU,QAA3B,IAAAV,MAAA,IACtC,IAAKA,EAAU3sB,OACX,OAAOitB,EAGH,IAAAxuB,GAAA4uB,GAAA,IAAAlgB,YAAA,IAAA1O,EAAA,GAAAA,EACF6uB,EAAQX,EAAUjmB,IAAI,SAACjI,OAAE0O,EAAA1O,EAAA0O,KAAMzT,EAAA+E,EAAA/E,KAAgB,OACjDU,MAAO+S,EACPogB,MAAO7zB,KAGX,OAAO+D,EAAA,YACAwvB,EAAK,CACRptB,QAAS,CAAEytB,MAAKA,GAChB1f,QAAST,EACTrR,KAAM,QACN0xB,UAAW,WACXC,SAAU,WA/BHC,CAAeT,EAAON,EAAWE,GAGzB,oBAAfI,EAAMvzB,KAgCd,SAAyBuzB,EAAkBI,GAC/B,IAAA5uB,GAAA4uB,GAAA,IAAAM,oBAAA,IAAAlvB,EAAA,GAAAA,EAER,IAAKkvB,EAAa3tB,OACd,OAAOvC,EAAA,YACAwvB,EAAK,CACRW,UAAU,IAIlB,IAAMN,EAAQK,EAAajnB,IAAI,SAACjI,OAAE0O,EAAA1O,EAAA0O,KAAMzT,EAAA+E,EAAA/E,KAAgB,OACpDU,MAAO+S,EACPogB,MAAO7zB,KAGX,OAAO+D,EAAA,YACAwvB,EAAK,CACRvzB,KAAM,sBACNmG,QAAS,CAAEytB,MAAKA,GAChBM,UAAU,EACV9xB,KAAM,QACN0xB,UAAW,WACXC,SAAU,WArDHI,CAAgBZ,EAAOJ,GAGf,eAAfI,EAAMvzB,KAsDd,SAA0BuzB,EAAkBI,GAChC,IAAA5uB,GAAA4uB,GAAA,IAAAS,sBAAA,IAAArvB,EAAA,GAAAA,EAER,QAAuBwF,IAAnB6pB,EACA,OAAOb,EAGX,OAAOxvB,EAAA,YAAKwvB,EAAK,CAAEW,SAAUG,QAAQD,KA5D1BE,CAAiBf,EAAOJ,GAG5BI,EA4DX,OAAOpzB,OAAAgQ,GAAA,EAAAhQ,CAAW,SACdma,GAEA,YAFA,IAAAA,MAAAyK,GAEO,CACHgO,yBAA0BA,EAAyBzY,GACnDmZ,wBAAyBA,EAAwBnZ,4BC5G7D,SAAAia,GAAmBhY,GACf,OAAOpc,OAAA8O,EAAA,OAAA9O,CAAO,CACVq0B,UAAWjY,EAAQiY,UACnBC,SAAUlY,EAAQkY,SAClBC,QAASnY,EAAQmY,QACjBC,SAAUpY,EAAQoY,SAClBC,SAAUrY,EAAQqY,SAClBC,KAAMtY,EAAQsY,KACdC,gBAAiBvY,EAAQuY,gBACzB5B,YAAa3W,EAAQ2W,YACrB6B,WAAYxY,EAAQwY,WACpBC,MAAOzY,EAAQyY,MACfC,aAAc1Y,EAAQ0Y,cACvBhmB,EAAA,UCqBA,SAAAimB,KACH,IAAM5Z,EAAkBnb,OAAA6yB,GAAA,EAAA7yB,CACpB,SAACma,GAA4B,OAAAA,EAAM7N,MACnC,SAAAgO,GAAgB,kBAAM,OAAAA,KAGpB0a,EAAqBh1B,OAAA6yB,GAAA,EAAA7yB,CACvB,SAACma,GAA4B,OAAAA,EAAM7N,MACnC,SAAAgO,GAAgB,gBAACrN,GACb,GAAKqN,GAAiBA,EAAanU,OAInC,OAAOnG,OAAA8O,EAAA,KAAA9O,CAAKsa,EAAc,CAAErN,GAAEA,OAIhCsN,EAA0Bva,OAAA6yB,GAAA,EAAA7yB,CAC5B,SAACma,GAA4B,OAAAA,EAAM7N,MACnC,SAAAgO,GAAgB,gBAAC8B,GACb,GAAK9B,GAAiBA,EAAanU,OAInC,OAAOnG,OAAA8O,EAAA,KAAA9O,CAAKsa,EAAc,SAAAJ,GACtB,OD/DuB+a,EC+DR/a,EAAYM,gBD/DwB0a,EC+DP9Y,ED9DjDpc,OAAA8O,EAAA,QAAA9O,CAAQo0B,GAAUa,GAAWb,GAAUc,IADnC,IAAwBD,EAA4BC,OCoEzDC,EAAoBn1B,OAAA6yB,GAAA,EAAA7yB,CACtB,SAACma,GAA4B,OAAAA,EAAM7N,MACnC,SAAAgO,GAAgB,kBACZ,GAAIA,GAAgBA,EAAanU,OAC7B,OAAOmU,EAAa,GAAG8a,0BAK7BC,EAAer1B,OAAA6yB,GAAA,EAAA7yB,CACjB,SAACma,GAA4B,OAAAA,EAAMrV,OAAOwwB,WAC1C,SAAAvrB,GAAS,kBAAM,OAAAA,KAGbwrB,EAAiBv1B,OAAA6yB,GAAA,EAAA7yB,CACnB,SAACma,GAA4B,OAAAA,EAAMrV,OAAO2a,aAC1C,SAAA1V,GAAS,kBAAM,OAAAA,KAGbyrB,EAA8Bx1B,OAAA6yB,GAAA,EAAA7yB,CAChC,SAACma,GAA4B,OAAAA,EAAMrV,OAAO2wB,0BAC1C,SAAA1rB,GAAS,kBAAM,OAAAA,KAGb2rB,EAAqB11B,OAAA6yB,GAAA,EAAA7yB,CACvBmb,EACA,SAACzE,EAAqB9R,GAA8C,OAA5CA,EAAA+V,KAAiDC,SACzE,SAACO,EAAiBP,GAAY,kBAC1B,IAAMD,EAAOC,IAEb,IAAKD,EACD,MAAO,GAGX,IAAMgb,GAAuBxa,KAAqB,IAAIvO,OAClD,SAACgpB,EAAS1b,GAAgB,OAAA0b,EAAQjtB,OAAOuR,EAAYoD,cACrD,IAGJ,OAAQ3C,EAAKF,UAAU0C,eAAiB,IAAItW,OACxC,SAAAiG,GAAQ,OAAA6oB,EAAoB1pB,QAAQa,EAAKG,IAAgB,OAK/D4oB,EAAiB71B,OAAA6yB,GAAA,EAAA7yB,CACnB,SAACma,GAA4B,OAAAA,EAAMrV,OAAOwqB,aAC1C,SAAAA,GAAe,gBAACzS,GACZ,OAAIA,EACOyS,EAAYzS,GAGhB7c,OAAA8O,EAAA,KAAA9O,CAAKsvB,MAIdwG,EAAiB91B,OAAA6yB,GAAA,EAAA7yB,CACnB,SAACma,GAA4B,OAAAA,EAAMrV,OAAOspB,aAC1C,SAAAA,GAAe,gBAACvR,GACZ,OAAIA,EACOuR,EAAYvR,GAGhB7c,OAAA8O,EAAA,KAAA9O,CAAKouB,MAId2H,EAAyB/1B,OAAA6yB,GAAA,EAAA7yB,CAC3Bua,EACAsb,EACAN,EACA,SAAChb,EAAyBsb,EAAgBN,GAAmB,gBAACnZ,GAC1D,IAAMlC,EAAcK,EAAwB6B,GAE5C,OAAOlC,EAAc2b,EAAe3b,EAAYjN,IAAMsoB,OAIxDS,EAA+Bh2B,OAAA6yB,GAAA,EAAA7yB,CACjC,SAACma,GAA4B,OAAAA,EAAMrV,OAAOuqB,2BAC1C,SAAAA,GAA6B,gBAACxS,GAC1B,OAAIA,EACOwS,EAA0BxS,GAG9B7c,OAAA8O,EAAA,KAAA9O,CAAKqvB,MAId4G,EAAYj2B,OAAA6yB,GAAA,EAAA7yB,CACd,SAACma,GAA4B,OAAAA,EAAM0G,SAASoV,WAC5C,SAAAA,GAAa,kBAAM,OAAc,IAAdA,KAGjBC,EAA2Bl2B,OAAA6yB,GAAA,EAAA7yB,CAC7B,SAACma,GAA4B,OAAAA,EAAM0G,SAASqV,0BAC5C,SAAAA,GAA4B,kBAAM,OAA6B,IAA7BA,KAGhCC,EAAan2B,OAAA6yB,GAAA,EAAA7yB,CACf,SAACma,GAA4B,OAAAA,EAAM0G,SAASsV,YAC5C,SAAAA,GAAc,kBAAM,OAAe,IAAfA,KAGlB5G,EAAavvB,OAAA6yB,GAAA,EAAA7yB,CACf,SAACma,GAA4B,OAAAA,EAAM0G,SAAS0O,YAC5C,SAAAA,GAAc,gBAAC1S,GACX,OAAIA,GACqC,IAA9B0S,EAAW1S,IAGM,IAArB7c,OAAA8O,EAAA,KAAA9O,CAAKuvB,MAIdf,EAAaxuB,OAAA6yB,GAAA,EAAA7yB,CACf,SAACma,GAA4B,OAAAA,EAAM0G,SAAS2N,YAC5C,SAAAA,GAAc,gBAAC3R,GACX,OAAIA,GACqC,IAA9B2R,EAAW3R,IAGM,IAArB7c,OAAA8O,EAAA,KAAA9O,CAAKwuB,MAId4H,EAAmBp2B,OAAA6yB,GAAA,EAAA7yB,CACrBua,EACAgV,EACA4G,EACA,SAAC5b,EAAyBgV,EAAY4G,GAAe,gBAAC/Z,GAClD,IAAMlC,EAAcK,EAAwB6B,GAE5C,OAAOlC,EAAcqV,EAAWrV,EAAYjN,IAAMkpB,OAIpD3G,EAA2BxvB,OAAA6yB,GAAA,EAAA7yB,CAC7B,SAACma,GAA4B,OAAAA,EAAM0G,SAAS2O,0BAC5C,SAAAA,GAA4B,gBAAC3S,GACzB,OAAIA,GACmD,IAA5C2S,EAAyB3S,IAGM,IAAnC7c,OAAA8O,EAAA,KAAA9O,CAAKwvB,MAIpB,OAAOxvB,OAAAgQ,GAAA,EAAAhQ,CAAW,SACdma,EACAQ,GAEA,YAHA,IAAAR,MAAAiV,IAGO,CACHjU,gBAAiBA,EAAgBhB,GACjC6a,mBAAoBA,EAAmB7a,GACvCI,wBAAyBA,EAAwBJ,GACjDgb,kBAAmBA,EAAkBhb,GACrCkb,aAAcA,EAAalb,GAC3Bob,eAAgBA,EAAepb,GAC/Bqb,4BAA6BA,EAA4Brb,GACzDub,mBAAoBA,EAAmBvb,EAAO,CAAEQ,KAAIA,IACpDkb,eAAgBA,EAAe1b,GAC/B2b,eAAgBA,EAAe3b,GAC/B4b,uBAAwBA,EAAuB5b,GAC/C6b,6BAA8BA,EAA6B7b,GAC3D8b,UAAWA,EAAU9b,GACrB+b,yBAA0BA,EAAyB/b,GACnDgc,WAAYA,EAAWhc,GACvBoV,WAAYA,EAAWpV,GACvBqU,WAAYA,EAAWrU,GACvBic,iBAAkBA,EAAiBjc,GACnCqV,yBAA0BA,EAAyBrV,MC1NxD,SAAAkc,KACH,ICPMC,EAKAT,EAKAU,EAKAlB,EAKA9F,EAKAiH,EAKAP,EC7BA/c,EAKA2P,EAaAzB,EAiBA0B,EAaA2N,EAWAC,EC7DAC,EAKAC,EAKAC,EAKAC,EAKAC,ECzBAC,ECCAvd,ECDAwd,ECkBAC,EASAC,EAWAC,EAWAC,EAyBAC,EAmBAC,EASAC,EASAC,EASAC,EP3GAC,GCPArB,EAAoBt2B,OAAA6yB,GAAA,EAAA7yB,CACtB,SAACma,GAA+B,OAAAA,EAAM7N,MACtC,SAAAA,GAAQ,kBAAM,OAAAA,KAGZupB,EAAiB71B,OAAA6yB,GAAA,EAAA7yB,CACnB,SAACma,GAA+B,OAAAA,EAAMrV,OAAOwqB,aAC7C,SAAAvlB,GAAS,kBAAM,OAAAA,KAGbwsB,EAA0Bv2B,OAAA6yB,GAAA,EAAA7yB,CAC5B,SAACma,GAA+B,OAAAA,EAAMrV,OAAO8yB,sBAC7C,SAAA7tB,GAAS,kBAAM,OAAAA,KAGbsrB,EAAer1B,OAAA6yB,GAAA,EAAA7yB,CACjB,SAACma,GAA+B,OAAAA,EAAMrV,OAAOwwB,WAC7C,SAAAvrB,GAAS,kBAAM,OAAAA,KAGbwlB,EAAavvB,OAAA6yB,GAAA,EAAA7yB,CACf,SAACma,GAA+B,QAAEA,EAAM0G,SAAS0O,YACjD,SAAA9qB,GAAU,kBAAM,OAAAA,KAGd+xB,EAAsBx2B,OAAA6yB,GAAA,EAAA7yB,CACxB,SAACma,GAA+B,QAAEA,EAAM0G,SAAS2V,qBACjD,SAAA/xB,GAAU,kBAAM,OAAAA,KAGdwxB,EAAYj2B,OAAA6yB,GAAA,EAAA7yB,CACd,SAACma,GAA+B,QAAEA,EAAM0G,SAASoV,WACjD,SAAAxxB,GAAU,kBAAM,OAAAA,KAGbzE,OAAAgQ,GAAA,EAAAhQ,CAAW,SACdma,GAEA,YAFA,IAAAA,MAAAyG,GAEO,CACH0V,kBAAmBA,EAAkBnc,GACrC0b,eAAgBA,EAAe1b,GAC/Boc,wBAAyBA,EAAwBpc,GACjDkb,aAAcA,EAAalb,GAC3BoV,WAAYA,EAAWpV,GACvBqc,oBAAqBA,EAAoBrc,GACzC8b,UAAWA,EAAU9b,ODrCvB0d,EQbH,WACH,IAAMjd,EAAU5a,OAAA6yB,GAAA,EAAA7yB,CACZ,SAACma,GAAqB,OAAAA,EAAM7N,MAC5B,SAAAqO,GAAQ,kBAAM,OAAAA,KAGZ0a,EAAer1B,OAAA6yB,GAAA,EAAA7yB,CACjB,SAACma,GAAqB,OAAAA,EAAMrV,OAAOwwB,WACnC,SAAAvrB,GAAS,kBAAM,OAAAA,KAGbksB,EAAYj2B,OAAA6yB,GAAA,EAAA7yB,CACd,SAACma,GAAqB,QAAEA,EAAM0G,SAASoV,WACvC,SAAAxxB,GAAU,kBAAM,OAAAA,KAGpB,OAAOzE,OAAAgQ,GAAA,EAAAhQ,CAAW,SACdma,GAEA,YAFA,IAAAA,MAAA4I,GAEO,CACHnI,QAASA,EAAQT,GACjBkb,aAAcA,EAAalb,GAC3B8b,UAAWA,EAAU9b,MRTF2d,GACrBC,GERA7e,EAAWlZ,OAAA6yB,GAAA,EAAA7yB,CACb,SAACma,GAA+B,OAAAA,GAChC,SAAAA,GAAS,kBAAM,OAAAA,KAGb0O,EAAiB7oB,OAAA6yB,GAAA,EAAA7yB,CACnB,SAACma,GAA+B,OAAAA,EAAM0G,UACtC,SAAAA,GAAY,OAAA7gB,OAAAgQ,GAAA,EAAAhQ,CAAQ,SAACkK,GACjB,GAAIA,EAAU,CACV,IAAM6M,EAAS8J,EAAS3W,GAExB,OAA6C,KAArC6M,GAAUA,EAAO8R,gBAG7B,OAAO7oB,OAAA8O,EAAA,KAAA9O,CAAK6gB,EAAU,CAAEgI,gBAAgB,QAI1CzB,EAAgBpnB,OAAA6yB,GAAA,EAAA7yB,CAClB,SAACma,GAA+B,OAAAA,EAAM7N,MACtC,SAAAA,GAAQ,OAAAtM,OAAAgQ,GAAA,EAAAhQ,CAAQ,SAACkK,EAAoCoa,GACjD,IAAMvN,EAASzK,EAAKpC,GAEpB,QAAK6M,IAIAuN,GAIgD,IAA9CvN,EAAO8M,sBAAsBS,GAHzBtkB,OAAA8O,EAAA,KAAA9O,CAAK+W,EAAO8M,sBAAuB,SAAAuD,GAAiB,OAAkB,IAAlBA,SAOjE0B,EAAmB9oB,OAAA6yB,GAAA,EAAA7yB,CACrB,SAACma,GAA+B,OAAAA,EAAM0G,UACtC,SAAAA,GAAY,OAAA7gB,OAAAgQ,GAAA,EAAAhQ,CAAQ,SAACkK,GACjB,GAAIA,EAAU,CACV,IAAM6M,EAAS8J,EAAS3W,GAExB,OAA+C,KAAvC6M,GAAUA,EAAO+R,kBAG7B,OAAO9oB,OAAA8O,EAAA,KAAA9O,CAAK6gB,EAAU,CAAEiI,kBAAkB,QAI5C2N,EAAqBz2B,OAAA6yB,GAAA,EAAA7yB,CACvB,SAACma,GAA+B,OAAAA,EAAMrV,QACtC,SAAAA,GAAU,OAAA9E,OAAAgQ,GAAA,EAAAhQ,CAAQ,SAACkK,GACf,IAAM6M,EAAS7M,EACXpF,EAAOoF,GACPlK,OAAA8O,EAAA,KAAA9O,CAAKA,OAAA8O,EAAA,OAAA9O,CAAO8E,GAAS,SAAAiS,GAAU,SAAGA,IAAUA,EAAOwQ,mBAEvD,OAAOxQ,GAAUA,EAAOwQ,oBAI1BmP,EAAuB12B,OAAA6yB,GAAA,EAAA7yB,CACzB,SAACma,GAA+B,OAAAA,EAAMrV,QACtC,SAAAA,GAAU,OAAA9E,OAAAgQ,GAAA,EAAAhQ,CAAQ,SAACkK,GACf,IAAM6M,EAAS7M,EACXpF,EAAOoF,GACPlK,OAAA8O,EAAA,KAAA9O,CAAKA,OAAA8O,EAAA,OAAA9O,CAAO8E,GAAS,SAAAiS,GAAU,SAAGA,IAAUA,EAAO4Q,qBAEvD,OAAO5Q,GAAUA,EAAO4Q,sBAIzB3nB,OAAAgQ,GAAA,EAAAhQ,CAAW,SACdma,GAEA,YAFA,IAAAA,MAAAwJ,GAEO,CACHzK,SAAUA,EAASiB,GACnB0O,eAAgBA,EAAe1O,GAC/BiN,cAAeA,EAAcjN,GAC7B2O,iBAAkBA,EAAiB3O,GACnCsc,mBAAoBA,EAAmBtc,GACvCuc,qBAAsBA,EAAqBvc,OFtE7C6d,ESZH,WAEH,IAAMC,EAAYj4B,OAAA6yB,GAAA,EAAA7yB,CACd,SAACma,GAAuB,OAAAA,EAAM7N,MAC9B,SAAAA,GAAQ,kBAAM,OAAAA,KAGZ4rB,EAAiBl4B,OAAA6yB,GAAA,EAAA7yB,CACnB,SAACma,GAAuB,OAAAA,EAAM7N,MAAQ6N,EAAM7N,KAAK2mB,aACjD,SAAA3mB,GAAQ,kBAAM,OAAAA,KAGZ8M,EAAmBpZ,OAAA6yB,GAAA,EAAA7yB,CACrB,SAACma,GAAuB,OAAAA,EAAM7N,MAAQ6N,EAAM7N,KAAK2M,SACjD,SAAA3M,GAAQ,kBAAM,OAAAA,KAGZ6rB,EAAoBn4B,OAAA6yB,GAAA,EAAA7yB,CACtB,SAACma,GAAuB,OAAAA,EAAM1Q,MAAQ0Q,EAAM1Q,KAAK2uB,gBACjD,SAAA9rB,GAAQ,kBAAM,OAAAA,KAGZ+oB,EAAer1B,OAAA6yB,GAAA,EAAA7yB,CACjB,SAACma,GAAuB,OAAAA,EAAMrV,OAAOwwB,WACrC,SAAAvrB,GAAS,kBAAM,OAAAA,KAGbksB,EAAYj2B,OAAA6yB,GAAA,EAAA7yB,CACd,SAACma,GAAuB,QAAEA,EAAM0G,SAASoV,WACzC,SAAAxxB,GAAU,kBAAM,OAAAA,KAGpB,OAAOzE,OAAAgQ,GAAA,EAAAhQ,CAAW,SACdma,GAEA,YAFA,IAAAA,MAAAyK,GAEO,CACHqT,UAAWA,EAAU9d,GACrB+d,eAAgBA,EAAe/d,GAC/Bf,iBAAkBA,EAAiBe,GACnCge,kBAAmBA,EAAkBhe,GACrCkb,aAAcA,EAAalb,GAC3B8b,UAAWA,EAAU9b,MT7BAke,GACvBC,EUhBH,WACH,IAAMC,EAAev4B,OAAA6yB,GAAA,EAAA7yB,CACjB,SAACma,GAAwB,OAAAA,EAAM7N,MAC/B,SAAAwmB,GAAa,kBAAM,OAAAA,KAGjBuC,EAAer1B,OAAA6yB,GAAA,EAAA7yB,CACjB,SAACma,GAAwB,OAAAA,EAAMrV,OAAOwwB,WACtC,SAAAvrB,GAAS,kBAAM,OAAAA,KAGbksB,EAAYj2B,OAAA6yB,GAAA,EAAA7yB,CACd,SAACma,GAAwB,QAAEA,EAAM0G,SAASoV,WAC1C,SAAAxxB,GAAU,kBAAM,OAAAA,KAGpB,OAAOzE,OAAAgQ,GAAA,EAAAhQ,CAAW,SACdma,GAEA,YAFA,IAAAA,MAAA+O,IAEO,CACHqP,aAAcA,EAAape,GAC3Bkb,aAAcA,EAAalb,GAC3B8b,UAAWA,EAAU9b,MVNCqe,GACxBC,GGbA9B,EAAa32B,OAAA6yB,GAAA,EAAA7yB,CACf,SAACma,GAAuB,OAAAA,EAAM7N,MAC9B,SAAAA,GAAQ,kBAAM,OAAAA,KAGZsqB,EAAiB52B,OAAA6yB,GAAA,EAAA7yB,CACnB,SAACma,GAAuB,OAAAA,EAAMrV,OAAO4zB,mBACrC,SAAA3uB,GAAS,kBAAM,OAAAA,KAGb8sB,EAAgB72B,OAAA6yB,GAAA,EAAA7yB,CAClB,SAACma,GAAuB,OAAAA,EAAMrV,OAAO6zB,kBACrC,SAAA5uB,GAAS,kBAAM,OAAAA,KAGb+sB,EAAa92B,OAAA6yB,GAAA,EAAA7yB,CACf,SAACma,GAAuB,QAAEA,EAAM0G,SAAS+X,kBACzC,SAAAn0B,GAAU,kBAAM,OAAAA,KAGdsyB,EAAa/2B,OAAA6yB,GAAA,EAAA7yB,CACf,SAACma,GAAuB,QAAEA,EAAM0G,SAASgY,kBACzC,SAAAp0B,GAAU,kBAAM,OAAAA,KAGbzE,OAAAgQ,GAAA,EAAAhQ,CAAW,SACdma,GAEA,YAFA,IAAAA,MAAAkL,IAEO,CACHsR,WAAYA,EAAWxc,GACvByc,eAAgBA,EAAezc,GAC/B0c,cAAeA,EAAc1c,GAC7B2c,WAAYA,EAAW3c,GACvB4c,WAAYA,EAAW5c,OHnBzB2e,GInBA9B,EAAch3B,OAAA6yB,GAAA,EAAA7yB,CAChB,SAACma,GAAyB,OAAAA,EAAM7N,MAChC,SAAAsa,GAAY,kBAAM,OAAAA,KAGf5mB,OAAAgQ,GAAA,EAAAhQ,CAAW,SACdma,GAEA,YAFA,IAAAA,MAAAsM,IAEO,CACHuQ,YAAaA,EAAY7c,OJW3B4e,EWdH,WACH,IAAMC,EAAiBh5B,OAAA6yB,GAAA,EAAA7yB,CACnB,SAACma,GAAiC,OAAAA,EAAMrV,OAAOmjB,gBAC/C,SAAC9N,GAAiC,OAAAA,EAAMrV,OAAOkjB,aAC/C,SAACC,EAAgBD,GAAgB,gBAAC9d,GAC9B,IAAIA,GAAY+d,IAAmB/d,EAInC,OAAO8d,KAITiR,EAAkBj5B,OAAA6yB,GAAA,EAAA7yB,CACpB,SAACma,GAAiC,OAAAA,EAAMrV,OAAOwjB,iBAC/C,SAACnO,GAAiC,OAAAA,EAAMrV,OAAOujB,cAC/C,SAACC,EAAiBD,GAAiB,gBAACne,GAChC,IAAIA,GAAYoe,IAAoBpe,EAIpC,OAAOme,KAIToO,EAAqBz2B,OAAA6yB,GAAA,EAAA7yB,CACvB,SAACma,GAAiC,OAAAA,EAAMrV,OAAO0iB,oBAC/C,SAACrN,GAAiC,OAAAA,EAAMrV,OAAOyiB,iBAC/C,SAACC,EAAoBD,GAAoB,gBAACrd,GACtC,IAAIA,GAAYsd,IAAuBtd,EAIvC,OAAOqd,KAIT2R,EAA4Bl5B,OAAA6yB,GAAA,EAAA7yB,CAC9B,SAACma,GAAiC,OAAAA,EAAMrV,OAAO6jB,2BAC/C,SAACxO,GAAiC,OAAAA,EAAMrV,OAAO4jB,wBAC/C,SAACC,EAA2BD,GAA2B,gBAACxe,GACpD,IAAIA,GAAYye,IAA8Bze,EAI9C,OAAOwe,KAITK,EAAc/oB,OAAA6yB,GAAA,EAAA7yB,CAChB,SAACma,GAAiC,OAAAA,EAAM0G,SAASoH,gBACjD,SAAC9N,GAAiC,OAAAA,EAAM0G,SAASkI,aACjD,SAACd,EAAgBc,GAAgB,gBAAC7e,GAC9B,QAAIA,GAAY+d,IAAmB/d,IAI1B6e,MAIXC,EAAehpB,OAAA6yB,GAAA,EAAA7yB,CACjB,SAACma,GAAiC,OAAAA,EAAM0G,SAASyH,iBACjD,SAACnO,GAAiC,OAAAA,EAAM0G,SAASmI,cACjD,SAACV,EAAiBU,GAAiB,gBAAC9e,GAChC,QAAIA,GAAYoe,IAAoBpe,IAI3B8e,MAIXH,EAAiB7oB,OAAA6yB,GAAA,EAAA7yB,CACnB,SAACma,GAAiC,OAAAA,EAAM0G,SAAS2G,oBACjD,SAACrN,GAAiC,OAAAA,EAAM0G,SAASgI,gBACjD,SAACrB,EAAoBqB,GAAmB,gBAAC3e,GACrC,QAAIA,GAAYsd,IAAuBtd,IAI9B2e,MAIXzB,EAAgBpnB,OAAA6yB,GAAA,EAAA7yB,CAClB,SAACma,GAAiC,OAAAA,EAAM7N,MACxC,SAAAA,GAAQ,gBAACpC,GACL,SACIoC,EAAKpC,KACLoC,EAAKpC,GAAUkd,kBAKrB6B,EAAsBjpB,OAAA6yB,GAAA,EAAA7yB,CACxB,SAACma,GAAiC,OAAAA,EAAM0G,SAAS8H,2BACjD,SAACxO,GAAiC,OAAAA,EAAM0G,SAASoI,qBACjD,SAACN,EAA2BM,GAAwB,gBAAC/e,GACjD,QAAIA,GAAYye,IAA8Bze,IAIrC+e,MAIjB,OAAOjpB,OAAAgQ,GAAA,EAAAhQ,CAAW,SACdma,GAEA,YAFA,IAAAA,MAAA0M,IAEO,CACHmS,eAAgBA,EAAe7e,GAC/B8e,gBAAiBA,EAAgB9e,GACjCsc,mBAAoBA,EAAmBtc,GACvC+e,0BAA2BA,EAA0B/e,GACrD4O,YAAaA,EAAY5O,GACzB6O,aAAcA,EAAa7O,GAC3B0O,eAAgBA,EAAe1O,GAC/BiN,cAAeA,EAAcjN,GAC7B8O,oBAAqBA,EAAoB9O,MXzGVgf,GACjCC,EYhBH,WACH,IAAMC,EAAsBr5B,OAAA6yB,GAAA,EAAA7yB,CACxB,SAACma,GAAgC,OAAAA,EAAM7N,MACvC,SAAAA,GAAQ,kBAAM,OAAAA,KAGZsqB,EAAiB52B,OAAA6yB,GAAA,EAAA7yB,CACnB,SAACma,GAAgC,OAAAA,EAAMrV,OAAOw0B,4BAC9C,SAAAvvB,GAAS,kBAAM,OAAAA,KAGb8sB,EAAgB72B,OAAA6yB,GAAA,EAAA7yB,CAClB,SAACma,GAAgC,OAAAA,EAAMrV,OAAOy0B,2BAC9C,SAAAxvB,GAAS,kBAAM,OAAAA,KAGb+sB,EAAa92B,OAAA6yB,GAAA,EAAA7yB,CACf,SAACma,GAAgC,QAAEA,EAAM0G,SAAS2Y,2BAClD,SAAA/0B,GAAU,kBAAM,OAAAA,KAGdsyB,EAAa/2B,OAAA6yB,GAAA,EAAA7yB,CACf,SAACma,GAAgC,QAAEA,EAAM0G,SAAS4Y,2BAClD,SAAAh1B,GAAU,kBAAM,OAAAA,KAGpB,OAAOzE,OAAAgQ,GAAA,EAAAhQ,CAAW,SACdma,GAEA,YAFA,IAAAA,MAAA4L,IAEO,CACHsT,oBAAqBA,EAAoBlf,GACzCyc,eAAgBA,EAAezc,GAC/B0c,cAAeA,EAAc1c,GAC7B2c,WAAYA,EAAW3c,GACvB4c,WAAYA,EAAW5c,MZlBOuf,GAChCC,EalBH,WACH,IAAMC,EAAiB55B,OAAA6yB,GAAA,EAAA7yB,CACnB,SAACma,GAA2B,OAAAA,EAAM7N,MAClC,SAAAutB,GAAe,kBAAM,OAAAA,KAGnBC,EAAqB95B,OAAA6yB,GAAA,EAAA7yB,CACvB,SAACma,GAA2B,OAAAA,EAAM1Q,MAClC,SAAAA,GAAQ,kBAAM,OAAAA,KAGZ4rB,EAAer1B,OAAA6yB,GAAA,EAAA7yB,CACjB,SAACma,GAA2B,OAAAA,EAAMrV,OAAOwwB,WACzC,SAAAA,GAAa,kBAAM,OAAAA,KAGjBQ,EAAiB91B,OAAA6yB,GAAA,EAAA7yB,CACnB,SAACma,GAA2B,OAAAA,EAAMrV,OAAOupB,kBACzC,SAAClU,GAA2B,OAAAA,EAAMrV,OAAOspB,aACzC,SAACC,EAAkBD,GAAgB,gBAACH,GAChC,IAAIA,GAAgBI,IAAqBJ,EAIzC,OAAOG,KAIT6H,EAAYj2B,OAAA6yB,GAAA,EAAA7yB,CACd,SAACma,GAA2B,OAAAA,EAAM0G,SAASoV,WAC3C,SAAAA,GAAa,kBAAM,QAAEA,KAGnBzH,EAAaxuB,OAAA6yB,GAAA,EAAA7yB,CACf,SAACma,GAA2B,OAAAA,EAAM0G,SAAS4N,oBAC3C,SAACtU,GAA2B,OAAAA,EAAM0G,SAAS2N,YAC3C,SAACC,EAAoBD,GAAe,gBAACP,GACjC,QAAIA,GAAgBQ,IAAuBR,IAIlCO,MAIjB,OAAOxuB,OAAAgQ,GAAA,EAAAhQ,CAAW,SACdma,GAEA,YAFA,IAAAA,MAAAkT,IAEO,CACHuM,eAAgBA,EAAezf,GAC/B2f,mBAAoBA,EAAmB3f,GACvCkb,aAAcA,EAAalb,GAC3B2b,eAAgBA,EAAe3b,GAC/B8b,UAAWA,EAAU9b,GACrBqU,WAAYA,EAAWrU,MbpCE4f,GAC3BC,EAAqBrH,KACrBsH,EchBH,WACH,IAAMC,EAAoBl6B,OAAA6yB,GAAA,EAAA7yB,CACtB,SAACma,GAA8B,OAAAA,EAAM7N,MACrC,SAAA6tB,GAAkB,kBAAM,OAAAA,KAGtBC,EAAwBp6B,OAAA6yB,GAAA,EAAA7yB,CAC1B,SAACma,GAA8B,OAAAA,EAAM1Q,MACrC,SAAAA,GAAQ,kBAAM,OAAAA,KAGZ4wB,EAAmBr6B,OAAA6yB,GAAA,EAAA7yB,CACrB,SAACma,GAA8B,OAAAA,EAAM7N,MACrC,SAAA6tB,GAAkB,gBAACjwB,EAAkBowB,GACjC,OAAOA,EACHt6B,OAAA8O,EAAA,KAAA9O,CAAKm6B,EAAgB,CAAEltB,GAAI/C,EAAU2hB,QAASyO,IAC9Ct6B,OAAA8O,EAAA,KAAA9O,CAAKm6B,EAAgB,CAAEltB,GAAI/C,OAIjCmrB,EAAer1B,OAAA6yB,GAAA,EAAA7yB,CACjB,SAACma,GAA8B,OAAAA,EAAMrV,OAAOwwB,WAC5C,SAAAA,GAAa,kBAAM,OAAAA,KAGjBiF,EAAqBv6B,OAAA6yB,GAAA,EAAA7yB,CACvB,SAACma,GAA8B,OAAAA,EAAMrV,OAAOknB,cAC5C,SAAC7R,GAA8B,OAAAA,EAAMrV,OAAOmnB,iBAC5C,SAACD,EAAcC,GAAoB,gBAAC/hB,GAChC,IAAIA,GAAY8hB,IAAiB9hB,EAIjC,OAAO+hB,KAITgK,EAAYj2B,OAAA6yB,GAAA,EAAA7yB,CACd,SAACma,GAA8B,OAAAA,EAAM0G,SAASoV,WAC9C,SAAAA,GAAa,kBAAM,QAAEA,KAGnB/J,EAAkBlsB,OAAA6yB,GAAA,EAAA7yB,CACpB,SAACma,GAA8B,OAAAA,EAAM0G,SAASmL,cAC9C,SAAC7R,GAA8B,OAAAA,EAAM0G,SAASqL,iBAC9C,SAACF,EAAcE,GAAoB,gBAAChiB,GAChC,QAAIA,GAAY8hB,IAAiB9hB,IAIxBgiB,MAIjB,OAAOlsB,OAAAgQ,GAAA,EAAAhQ,CAAW,SACdma,GAEA,YAFA,IAAAA,MAAAgR,IAEO,CACH+O,kBAAmBA,EAAkB/f,GACrCigB,sBAAuBA,EAAsBjgB,GAC7CkgB,iBAAkBA,EAAiBlgB,GACnCkb,aAAcA,EAAalb,GAC3BogB,mBAAoBA,EAAmBpgB,GACvC8b,UAAWA,EAAU9b,GACrB+R,gBAAiBA,EAAgB/R,MdhDLqgB,GAC9BC,EenBH,WACH,IAAMhE,EAAqBz2B,OAAA6yB,GAAA,EAAA7yB,CACvB,SAACma,GAAgC,OAAAA,EAAMrV,OAAO0iB,oBAC9C,SAACrN,GAAgC,OAAAA,EAAMrV,OAAOyiB,iBAC9C,SAACC,EAAoBD,GAAoB,gBAACrd,GACtC,IAAIA,GAAYsd,IAAuBtd,EAIvC,OAAOqd,KAITmT,EAAkB16B,OAAA6yB,GAAA,EAAA7yB,CACpB,SAACma,GAAgC,OAAAA,EAAMrV,OAAO8nB,iBAC9C,SAACzS,GAAgC,OAAAA,EAAMrV,OAAO6nB,cAC9C,SAACC,EAAiBD,GAAiB,gBAACziB,GAChC,IAAIA,GAAY0iB,IAAoB1iB,EAIpC,OAAOyiB,KAITgO,EAAmB36B,OAAA6yB,GAAA,EAAA7yB,CACrB,SAACma,GAAgC,OAAAA,EAAMrV,OAAOmoB,kBAC9C,SAAC9S,GAAgC,OAAAA,EAAMrV,OAAOkoB,eAC9C,SAACC,EAAkBD,GAAkB,gBAAC9iB,GAClC,IAAIA,GAAY+iB,IAAqB/iB,EAIrC,OAAO8iB,KAIT4N,EAA4B56B,OAAA6yB,GAAA,EAAA7yB,CAC9B,SAACma,GAAgC,OAAAA,EAAMrV,OAAO6jB,2BAC9C,SAACxO,GAAgC,OAAAA,EAAMrV,OAAO4jB,wBAC9C,SAACC,EAA2BD,GAA2B,gBAACxe,GACpD,IAAIA,GAAYye,IAA8Bze,EAI9C,OAAOwe,KAITG,EAAiB7oB,OAAA6yB,GAAA,EAAA7yB,CACnB,SAACma,GAAgC,OAAAA,EAAM0G,SAAS2G,oBAChD,SAACrN,GAAgC,OAAAA,EAAM0G,SAASgI,gBAChD,SAACrB,EAAoBqB,GAAmB,gBAAC3e,GACrC,QAAIA,GAAYsd,IAAuBtd,IAI9B2e,MAIXzB,EAAgBpnB,OAAA6yB,GAAA,EAAA7yB,CAClB,SAACma,GAAgC,OAAAA,EAAM7N,MACvC,SAAAA,GAAQ,gBAACpC,GACL,SACIoC,EAAKpC,KACLoC,EAAKpC,GAAUkd,kBAKrB+F,EAAcntB,OAAA6yB,GAAA,EAAA7yB,CAChB,SAACma,GAAgC,OAAAA,EAAM0G,SAAS+L,iBAChD,SAACzS,GAAgC,OAAAA,EAAM0G,SAASsM,aAChD,SAACP,EAAiBO,GAAgB,gBAACjjB,GAC/B,QAAIA,GAAY0iB,IAAoB1iB,IAI3BijB,MAIXC,EAAeptB,OAAA6yB,GAAA,EAAA7yB,CACjB,SAACma,GAAgC,OAAAA,EAAM0G,SAASoM,kBAChD,SAAC9S,GAAgC,OAAAA,EAAM0G,SAASuM,cAChD,SAACH,EAAkBG,GAAiB,gBAACljB,GACjC,QAAIA,GAAY+iB,IAAqB/iB,IAI5BkjB,MAIXnE,EAAsBjpB,OAAA6yB,GAAA,EAAA7yB,CACxB,SAACma,GAAgC,OAAAA,EAAM0G,SAAS8H,2BAChD,SAACxO,GAAgC,OAAAA,EAAM0G,SAASoI,qBAChD,SAACN,EAA2BM,GAAwB,gBAAC/e,GACjD,QAAIA,GAAYye,IAA8Bze,IAIrC+e,MAIjB,OAAOjpB,OAAAgQ,GAAA,EAAAhQ,CAAW,SACdma,GAEA,YAFA,IAAAA,MAAAgS,IAEO,CACHsK,mBAAoBA,EAAmBtc,GACvCugB,gBAAiBA,EAAgBvgB,GACjCwgB,iBAAkBA,EAAiBxgB,GACnCygB,0BAA2BA,EAA0BzgB,GACrD0O,eAAgBA,EAAe1O,GAC/BiN,cAAeA,EAAcjN,GAC7BgT,YAAaA,EAAYhT,GACzBiT,aAAcA,EAAajT,GAC3B8O,oBAAqBA,EAAoB9O,MfpGX0gB,GAChCC,GKzBArhB,EAAczZ,OAAA6yB,GAAA,EAAA7yB,CAChB,SAACma,GAA+B,OAAAA,EAAM7N,MACtC,SAAAA,GAAQ,gBAAkDpC,GACtD,OAAOoC,EAAKpC,MAIblK,OAAAgQ,GAAA,EAAAhQ,CAAW,SACdma,GAEA,YAFA,IAAAA,MAAAuU,IAEO,CACHjV,YAAaA,EAAYU,OLe3B4gB,GM3BA9D,EAAqBj3B,OAAA6yB,GAAA,EAAA7yB,CACvB,SAACma,GAA4B,OAAAA,EAAM7N,MACnC,SAAAgO,GAAgB,kBACZ,GAAKA,GAAiBA,EAAa,GAInC,OAAOA,EAAa,GAAGE,mBAIxBxa,OAAAgQ,GAAA,EAAAhQ,CAAW,SACdma,GAEA,YAFA,IAAAA,MAAAiV,IAEO,CACH6H,mBAAoBA,EAAmB9c,ONazC6gB,EgB3BH,WACH,IAAMC,EAAuBj7B,OAAA6yB,GAAA,EAAA7yB,CACzB,SAACma,GAAgC,OAAAA,EAAM7N,MACvC,SAAAA,GAAQ,kBAAM,OAAAA,KAGZ+oB,EAAer1B,OAAA6yB,GAAA,EAAA7yB,CACjB,SAACma,GAAgC,OAAAA,EAAMrV,OAAOwwB,WAC9C,SAAAvrB,GAAS,kBAAM,OAAAA,KAGbksB,EAAYj2B,OAAA6yB,GAAA,EAAA7yB,CACd,SAACma,GAAgC,OAAAA,EAAM0G,SAASoV,WAChD,SAAAxxB,GAAU,kBAAM,QAAEA,KAGtB,OAAOzE,OAAAgQ,GAAA,EAAAhQ,CAAW,SACdma,GAEA,YAFA,IAAAA,MAAA+V,IAEO,CACH+K,qBAAsBA,EAAqB9gB,GAC3Ckb,aAAcA,EAAalb,GAC3B8b,UAAWA,EAAU9b,MhBKS+gB,GAChCC,EiBzBH,WACH,IAAMC,EAAwBp7B,OAAA6yB,GAAA,EAAA7yB,CAC1B,SAACma,GAAiC,OAAAA,EAAMrV,OAAOssB,uBAC/C,SAACjX,GAAiC,OAAAA,EAAMrV,OAAOqsB,oBAC/C,SAACC,EAAuBD,GAAuB,gBAACjnB,GAC5C,IAAIA,GAAYknB,IAA0BlnB,EAI1C,OAAOinB,KAITkK,EAAuBr7B,OAAA6yB,GAAA,EAAA7yB,CACzB,SAACma,GAAiC,OAAAA,EAAMrV,OAAO2sB,sBAC/C,SAACtX,GAAiC,OAAAA,EAAMrV,OAAO0sB,mBAC/C,SAACC,EAAsBD,GAAsB,gBAACtnB,GAC1C,IAAIA,GAAYunB,IAAyBvnB,EAIzC,OAAOsnB,KAITiF,EAAqBz2B,OAAA6yB,GAAA,EAAA7yB,CACvB,SAACma,GAAiC,OAAAA,EAAMrV,OAAO0iB,oBAC/C,SAACrN,GAAiC,OAAAA,EAAMrV,OAAOyiB,iBAC/C,SAACC,EAAoBD,GAAoB,gBAACrd,GACtC,IAAIA,GAAYsd,IAAuBtd,EAIvC,OAAOqd,KAIToK,EAAoB3xB,OAAA6yB,GAAA,EAAA7yB,CACtB,SAACma,GAAiC,OAAAA,EAAM0G,SAASuQ,uBACjD,SAACjX,GAAiC,OAAAA,EAAM0G,SAAS8Q,mBACjD,SAACP,EAAuBO,GAAsB,gBAACznB,GAC3C,QAAIA,GAAYknB,IAA0BlnB,IAIjCynB,MAIXC,EAAoB5xB,OAAA6yB,GAAA,EAAA7yB,CACtB,SAACma,GAAiC,OAAAA,EAAM0G,SAAS4Q,sBACjD,SAACtX,GAAiC,OAAAA,EAAM0G,SAAS+Q,mBACjD,SAACH,EAAsBG,GAAsB,gBAAC1nB,GAC1C,QAAIA,GAAYunB,IAAyBvnB,IAIhC0nB,MAIX/I,EAAiB7oB,OAAA6yB,GAAA,EAAA7yB,CACnB,SAACma,GAAiC,OAAAA,EAAM0G,SAAS2G,oBACjD,SAACrN,GAAiC,OAAAA,EAAM0G,SAASgI,gBACjD,SAACrB,EAAoBqB,GAAmB,gBAAC3e,GACrC,QAAIA,GAAYsd,IAAuBtd,IAI9B2e,MAIXzB,EAAgBpnB,OAAA6yB,GAAA,EAAA7yB,CAClB,SAACma,GAAiC,OAAAA,EAAM7N,MACxC,SAAAA,GAAQ,gBAACpC,GACL,SACIoC,EAAKpC,KACLoC,EAAKpC,GAAUkd,kBAK3B,OAAOpnB,OAAAgQ,GAAA,EAAAhQ,CAAW,SACdma,GAEA,YAFA,IAAAA,MAAAwW,IAEO,CACHyK,sBAAuBA,EAAsBjhB,GAC7CkhB,qBAAsBA,EAAqBlhB,GAC3Csc,mBAAoBA,EAAmBtc,GACvCwX,kBAAmBA,EAAkBxX,GACrCyX,kBAAmBA,EAAkBzX,GACrC0O,eAAgBA,EAAe1O,GAC/BiN,cAAeA,EAAcjN,MjBpEEmhB,GACjCC,EAA4BxG,KAC5ByG,GkBLH,WACH,IAAM/hB,EAAczZ,OAAA6yB,GAAA,EAAA7yB,CAChB,SAACma,GAAyB,OAAAA,EAAM7N,MAChC,SAACoK,EAAkB9R,GAAqD,OAAnDA,EAAA8c,eAAkE4U,mBACvF,SAAC5f,EAAkB9R,GAA2C,OAAzCA,EAAA+V,KAA8CC,SACnE,SAAClE,EAAkB9R,GAA+C,OAA7CA,EAAAgiB,SAAsDoQ,aAC3E,SAACtgB,EAAkB9R,GAAmD,OAAjDA,EAAA0V,aAA8Da,iBACnF,SAACzE,EAAkB9R,GAA8C,OAA5CA,EAAA8gB,QAAoDiR,YACzE,SAACjgB,EAAkB9R,GAAuD,OAArDA,EAAAwhB,iBAAsEiT,qBAC3F,SAAC/sB,EAAMgqB,EAAmB1b,EAASoc,EAAa7b,EAAiBwb,EAAY0C,GAAwB,kBACjG,IAAM3X,EAAiB4U,IACjB3b,EAAOC,IACPgM,EAAWoQ,IACX1c,EAAea,KAAqB,GACpCuK,EAAUiR,KAAgB,GAC1BvQ,EAAmBiT,KAAyB,GAElD,GAAK/sB,GAASqO,GAASiM,EAIvB,OAAOhjB,EAAA,YACA0I,EAAI,CACPoV,eAAcA,EACd/G,KAAIA,EACJiM,SAAQA,EACRtM,aAAYA,EACZoL,QAAOA,EACPU,iBAAgBA,OAKtBqV,EAAgBz7B,OAAA6yB,GAAA,EAAA7yB,CAClByZ,EACA,SAAAA,GAAe,gBAACiiB,GACZ,IAAMliB,EAAWC,IAEjB,GAAKD,EAAL,CAIA,IAAMmiB,EAAaniB,EAASmiB,YAAc,EACpCC,EAAcpiB,EAASoN,SAASgV,aAAe,EAErD,OAAOF,EAAiBjmB,KAAKomB,IAAIF,EAAaC,EAAa,GAAKD,MAIlEtG,EAAer1B,OAAA6yB,GAAA,EAAA7yB,CACjB,SAACma,GAAyB,OAAAA,EAAMrV,OAAOwwB,WACvC,SAAAvrB,GAAS,kBAAM,OAAAA,KAGb8rB,EAAiB71B,OAAA6yB,GAAA,EAAA7yB,CACnB,SAACma,GAAyB,OAAAA,EAAMrV,OAAOwqB,aACvC,SAAAvlB,GAAS,kBAAM,OAAAA,KAGbksB,EAAYj2B,OAAA6yB,GAAA,EAAA7yB,CACd,SAACma,GAAyB,OAAAA,EAAM0G,SAASoV,WACzC,SAAAA,GAAa,kBAAM,OAAc,IAAdA,KAGjB1G,EAAavvB,OAAA6yB,GAAA,EAAA7yB,CACf,SAACma,GAAyB,OAAAA,EAAM0G,SAAS0O,YACzC,SAAAA,GAAc,kBAAM,OAAe,IAAfA,KAGxB,OAAOvvB,OAAAgQ,GAAA,EAAAhQ,CAAW,SACdma,EACAuH,EACA/G,EACAL,EACAoL,EACAkB,EACAR,GAEA,YARA,IAAAjM,MAAA0X,IAQO,CACHpY,YAAaA,EAAYU,EAAO,CAC5BuH,eAAcA,EACd/G,KAAIA,EACJL,aAAYA,EACZoL,QAAOA,EACPkB,SAAQA,EACRR,iBAAgBA,IAEpBqV,cAAeA,EAActhB,EAAO,CAChCuH,eAAcA,EACd/G,KAAIA,EACJL,aAAYA,EACZoL,QAAOA,EACPkB,SAAQA,EACRR,iBAAgBA,IAEpBiP,aAAcA,EAAalb,GAC3B0b,eAAgBA,EAAe1b,GAC/B8b,UAAWA,EAAU9b,GACrBoV,WAAYA,EAAWpV,MlB7FA2hB,GACzBC,GmBnBH,WACH,IAAMC,EAAWh8B,OAAA6yB,GAAA,EAAA7yB,CACb,SAACma,GAAsB,OAAAA,EAAM7N,MAC7B,SAACoK,EAAe9R,GAAkD,OAAhDA,EAAA8c,eAA+D4U,qBACjF,SAAC5f,EAAe9R,GAA2C,OAAzCA,EAAA8gB,QAAiDiR,cACnE,SAACrqB,EAAMoV,EAAgBgE,GAAiB,YAAjB,IAAAA,MAAA,IAAiB,WACpC,GAAKpZ,GAASoV,EAId,OAAO9d,EAAA,YACA0I,EAAI,CACPoV,eAAcA,EACdgE,QAAOA,OAKbuW,EAAej8B,OAAA6yB,GAAA,EAAA7yB,CACjB,SAACma,GAAsB,OAAAA,EAAM1Q,MAC7B,SAAAA,GAAQ,kBAAM,OAAAA,KAGZ4rB,EAAer1B,OAAA6yB,GAAA,EAAA7yB,CACjB,SAACma,GAAsB,OAAAA,EAAMrV,OAAOwwB,WACpC,SAAAvrB,GAAS,kBAAM,OAAAA,KAGbksB,EAAYj2B,OAAA6yB,GAAA,EAAA7yB,CACd,SAACma,GAAsB,QAAEA,EAAM0G,SAASoV,WACxC,SAAAxxB,GAAU,kBAAM,OAAAA,KAGpB,OAAOzE,OAAAgQ,GAAA,EAAAhQ,CAAW,SACdma,EACAuH,EACAgE,GAEA,YAJA,IAAAvL,MAAAwP,IAIO,CACHqS,SAAUA,EAAS7hB,EAAO,CAAEuH,eAAcA,EAAEgE,QAAOA,IACnDuW,aAAcA,EAAa9hB,GAC3Bkb,aAAcA,EAAalb,GAC3B8b,UAAWA,EAAU9b,MnBvBD+hB,GACtBC,IOfAjF,EAAqBl3B,OAAA6yB,GAAA,EAAA7yB,CACvB,SAAC4E,GAA2C,OAAzCA,EAAAylB,MAA+C4R,cAClD,SAAAA,GAAgB,kBACZ,IAAMxyB,EAAOwyB,IAEb,OAAOxyB,GAAQA,EAAK+gB,WAItB2M,EAAoBn3B,OAAA6yB,GAAA,EAAA7yB,CACtB,SAAC4E,GAA2C,OAAzCA,EAAAylB,MAA+C2R,UAClD,SAAAA,GAAY,kBACR,IAAM3R,EAAQ2R,IAEd,OAAOh8B,OAAA8O,EAAA,KAAA9O,CAAKqqB,GAASA,EAAM+R,SAAU,SAACx3B,OAAEy3B,EAAAz3B,EAAAy3B,WACpC,MAAe,oBAAfA,GAAmD,gBAAfA,OAK1CjF,EAAmBp3B,OAAA6yB,GAAA,EAAA7yB,CACrB,SAAC4E,GAA8C,OAA5CA,EAAA4U,SAAqDC,aACxD,SAAAA,GAAe,kBACX,IAAMD,EAAWC,IAEjB,OAAOzZ,OAAA8O,EAAA,KAAA9O,CAAKwZ,GAAYA,EAAS4iB,SAAU,SAACx3B,GACxC,OAD0CA,EAAA03B,eACzBC,GAAA,OAKvBlF,EAAer3B,OAAA6yB,GAAA,EAAA7yB,CACjBk3B,EACAE,EACAD,EACA,SAACD,EAAoBE,EAAkBD,GAAsB,kBACzD,IAAMqF,EAAkBtF,IAExB,GAAIsF,GAAmBA,EAAgBvvB,GACnC,MAAO,CACHovB,WAAYG,EAAgBvvB,GAC5BqtB,UAAWkC,EAAgB3Q,SAInC,IAAMrB,EAAU4M,KAAsBD,IAEtC,OAAI3M,GAAWA,EAAQ6R,WACZ,CACHA,WAAY7R,EAAQ6R,WACpB/B,UAAW9P,EAAQ8P,gBAH3B,KASFhD,EAAmBt3B,OAAA6yB,GAAA,EAAA7yB,CACrBk3B,EACAE,EACAD,EACA,SAACD,EAAoBE,EAAkBD,GAAsB,kBACzD,IAAMqF,EAAkBtF,IAExB,GAAIsF,GAAmBA,EAAgB/3B,OACnC,OAAO+3B,EAAgB/3B,OAAO8b,QAAQ,kBAAmB,IAG7D,IAAMiK,EAAU4M,KAAsBD,IAEtC,OAAI3M,EACOA,EAAQtL,OAAOud,UAD1B,KAMFlF,EAAkBv3B,OAAA6yB,GAAA,EAAA7yB,CACpB,SAAC4E,GAA2C,OAAzCA,EAAAylB,MAA+C4R,cAClD,SAAAA,GAAgB,kBACZ,IAAMxyB,EAAOwyB,IAEb,OAAOxyB,GAAQA,EAAK8gB,SAItBiN,EAAwBx3B,OAAA6yB,GAAA,EAAA7yB,CAC1Bk3B,EACA,SAAAA,GAAsB,kBAClB,IAAM1M,EAAU0M,IAEhB,OAAO1M,GAAWA,EAAQkS,eAI5BjF,EAAwBz3B,OAAA6yB,GAAA,EAAA7yB,CAC1B,SAAC4E,GAA8C,OAA5CA,EAAA4U,SAAqDiiB,eACxD,SAAAA,GAAiB,gBAACC,QAAA,IAAAA,OAAA,GACd,IAAMC,EAAaF,EAAcC,GAEjC,QAAOC,GAAaA,EAAa,KAInCjE,EAAyB13B,OAAA6yB,GAAA,EAAA7yB,CAC3Bs3B,EACA,SAAAA,GAAoB,gBAACqF,GACjB,SAAIA,IAAiBA,EAAcC,QAI5BtF,MAAuBuF,GAAA,GAAevF,MAAuBuF,GAAA,KAIrE78B,OAAAgQ,GAAA,EAAAhQ,CAAW,SACdwZ,EACA6Q,GAEA,MAAO,CACHgN,aAAcA,EAAa,CAAE7d,SAAQA,EAAE6Q,MAAKA,IAC5CiN,iBAAkBA,EAAiB,CAAE9d,SAAQA,EAAE6Q,MAAKA,IACpDkN,gBAAiBA,EAAgB,CAAE/d,SAAQA,EAAE6Q,MAAKA,IAClDmN,sBAAuBA,EAAsB,CAAEhe,SAAQA,EAAE6Q,MAAKA,IAC9DoN,sBAAuBA,EAAsB,CAAEje,SAAQA,EAAE6Q,MAAKA,IAC9DqN,uBAAwBA,EAAuB,CAAEle,SAAQA,EAAE6Q,MAAKA,QP1GxE,OAAO,SAAClQ,EAAOnU,QAAA,IAAAA,MAAA,IACX,IJtCiE6G,EIsC3D6U,EAAiBiW,EAA6Bxd,EAAMuH,gBACpD/G,EAAOkd,EAAmB1d,EAAMQ,MAChCmiB,EAAiB/E,EAA6B5d,EAAM2iB,gBACpD3jB,EAAS6e,EAAqB7d,EAAMhB,QACpC2Z,EAAYwF,EAAsBne,EAAM2Y,WACxCpN,EAAU+S,EAAqBte,EAAMuL,SACrCkB,EAAWkS,EAAuB3e,EAAMyM,UACxCmW,EAAqBhE,EAA+B5e,EAAM4iB,oBAC1DC,EAAOhD,EAAmB7f,EAAMhB,QAChCiN,EAAmBgT,EAA8Bjf,EAAMiM,kBACvDyT,EAAcF,EAAyBxf,EAAM0f,aAC7CM,EAAiBF,EAA4B9f,EAAMggB,gBACnD8C,EAAoBxC,EAA8BtgB,EAAM8iB,mBACxDC,EAAiBpC,EAA6B3gB,EAAM+iB,gBACpD1iB,EAAkBugB,EAA8B5gB,EAAMG,cACtD6iB,EAAoBnC,EAA8B7gB,EAAMgjB,mBACxDC,EAAqBjC,EAA+BhhB,EAAMijB,oBAG1D9iB,EAAeihB,EAA0BphB,EAAMG,aAAcK,GAC7DnB,EAAWgiB,GAAuBrhB,EAAMX,SAAUkI,EAAgB/G,EAAML,EAAcoL,EAASkB,EAAUR,GACzGiE,EAAQ0R,GAAoB5hB,EAAMkQ,MAAO3I,EAAgBgE,GAGzD2X,EAAY,CACd3b,eAAcA,EACd/G,KAAIA,EACJnB,SAAQA,EACRsjB,eAAcA,EACd3jB,OAAMA,EACNmB,aAAYA,EACZwY,UAASA,EACTpN,QAAOA,EACPkB,SAAQA,EACRmW,mBAAkBA,EAClBC,KAAIA,EACJ5W,iBAAgBA,EAChByT,YAAWA,EACXxP,MAAKA,EACLG,QAjBY2R,GAAsB3iB,EAAU6Q,GAkB5C8P,eAAcA,EACd8C,kBAAiBA,EACjBC,eAAcA,EACd1iB,gBAAeA,EACf2iB,kBAAiBA,EACjBC,mBAAkBA,GAGtB,OAAOp3B,EAAQs3B,oBJtFkDzwB,EIsFTwwB,EJrFrDr9B,OAAOgH,KAAK6F,GACdD,OAAO,SAAC/D,EAAQhI,GAGb,OAFAgI,EAAOhI,GAAOsxB,GAAkBtlB,EAAIhM,IAE7BgI,GACR,KIgFkEw0B,GoBvF9D,SAAAE,GACXC,EACAx3B,QADA,IAAAw3B,MAAA,IAGA,ICPAC,ECDMC,EFQAC,GERAD,EAAU,IAAIE,EAEY,CAC5B,eACA,aACA,mBACA,sBACA,sBACA,yBACA,0BACA,yBACA,qCACA,sBACA,uBACA,uBACA,iBAGoBxxB,QAAQ,SAAAnK,GAC5By7B,EAAQze,SAAShd,EAAM,SAAC0C,EAAUtB,GAAY,WAAIw6B,EAAmBl5B,EAAUtB,OAGnFq6B,EAAQze,SAAS,2BAA4B,SAAAta,GAAY,WAAIm5B,EAAA,EAA0Bn5B,KACvF+4B,EAAQze,SAAS,2BAA4B,SAAAta,GAAY,WAAIm5B,EAAA,EAA0Bn5B,KDtBvF84B,ECwBOC,EDtBA,SAAAK,GAAW,OAAA/9B,OAAAsX,EAAA,KAAAtX,CAAK+9B,GAASxmB,KAAKvX,OAAAwX,EAAA,WAAAxX,CAA0B,SAAAqV,GAC3D,GAAIA,aAAkB5R,OAAS4R,EAAOC,mBAAmB7R,MACrD,MAAM4R,EAGV,IAUYrU,EAVGqU,EAAOC,UAWO,iBAAXtU,GAIf,CAAC,OAAQ,UAAW,SAAU,cAAcg9B,MAAM,SAAAn9B,GACrD,OAAAG,EAAOG,eAAeN,KAhBU,CAC5B,IAAMwC,EAAUgS,EAAOC,QAAQ/Q,MAAQ8Q,EAAOC,QAAQ/Q,KAAK2a,OAE3D,MAAMtb,EAAA,YAAKyR,EAAM,CAAEC,QAASmoB,EAAoBhe,YAAYpK,EAAOC,QAASjS,KAOxF,IAAoBrC,EAJZ,MAAMqU,ODLJ4oB,EAAkC5H,KAGxC,OAAOr2B,OAAA+gB,EAAA,gBAAA/gB,CGCAA,OAAA+gB,EAAA,gBAAA/gB,CAAgB,CACnB0hB,eAAgBZ,EAChBnG,KAAMqI,EACNxJ,SAAUsY,GACVgL,eAAgB9Y,EAChB7K,OAAQ0L,EACRvK,aAAcmV,GACdqD,UAAW3J,GACXzD,QAASJ,GACTsB,SAAUF,GACVqW,mBAAoBjW,GACpBV,iBAAkBJ,GAClB6T,YAAavM,GACbjD,MAAOT,GACPY,QAASO,GACToP,eAAgB/O,GAChB6R,kBAAmB7Q,GACnB8Q,eAAgBvO,GAChBwO,kBAAmBhN,GACnBiN,mBAAoBxM,KHlBpB4M,EAAY55B,EAAA,UACV+5B,kBAAiBA,EAAEO,iBALA,SAAC/jB,GAA8B,OAAA8jB,EAAgC9jB,KAK1CnU,yGIhBlD,SAAAnE,GACI,SAAAs8B,EAAYx5B,GAAZ,IAAA5C,EACIF,EAAApC,KAAAuC,KAAM2C,EAAU,CAAEtB,QAASsB,EAASJ,KAAK4a,SAAQnd,YAEjDD,EAAKlC,KAAO,4BACZkC,EAAKE,KAAO,2BAEpB,OAPuD2B,EAAA,UAAAu6B,EAAAt8B,GAOvDs8B,EAPA,OAAuD,GCIvDC,EAAA,WACI,SAAAC,EACYr1B,GAAAhH,KAAAgH,iBAyChB,OAtCIq1B,EAAAn9B,UAAAsX,aAAA,SAAavL,EAAYrI,OAAAC,OAAA,IAAAD,EAAA,GAAAA,EAAEiX,EAAAhX,EAAAgX,OAAQlR,EAAA9F,EAAA8F,QACzBI,EAAM,4BAA4BkC,EAClCzI,EAAU,CAAEoG,OAAQ0zB,EAAA,EAAYzzB,QAEtC,OAAO7I,KAAKgH,eAAe7I,IAAI4K,EAAK,CAChC8Q,OAAQ,CACJC,QAAS9b,OAAAu+B,EAAA,EAAAv+B,CACFw+B,EAAA,EAAyB71B,OACxBkT,GAAUA,EAAOC,SAAW,MAGxCtX,QAAOA,EACPmG,QAAOA,IACRb,MAAM,SAAAC,GACL,GAAIA,EAAMtF,QAAU,KAAOsF,EAAMtF,OAAS,IACtC,MAAM,IAAIg6B,EAA0B10B,GAGxC,MAAMA,KAIds0B,EAAAn9B,UAAAqY,eAAA,SAAetM,EAAY1I,EAA2BK,OAAAC,OAAA,IAAAD,EAAA,GAAAA,EAAEiX,EAAAhX,EAAAgX,OAAQlR,EAAA9F,EAAA8F,QACtDI,EAAM,4BAA4BkC,EAClCzI,EAAU,CAAEoG,OAAQ0zB,EAAA,EAAYzzB,QAEtC,OAAO7I,KAAKgH,eAAe+U,IAAIhT,EAAK,CAChC8Q,OAAQ,CACJC,QAAS9b,OAAAu+B,EAAA,EAAAv+B,CACFw+B,EAAA,EAAyB71B,OACxBkT,GAAUA,EAAOC,SAAW,MAGxCvX,KAAIA,EACJC,QAAOA,EACPmG,QAAOA,KAGnB0zB,EA3CA,uCCNAn/B,EAAAU,EAAA4B,EAAA,sBAAAk9B,IAAA,IAAMC,EAAc,CAChB,oBACA,sBACA,qBACA,oBACA,iBAQW,SAAAD,EAA6BE,GACxC,MAAO,CACHtrB,KAAMsrB,EAAOtrB,KACbjG,SAAUuxB,EAAOC,YACjBC,aAAcH,EAAY1yB,QAAQ2yB,EAAOG,4CCRlC,SAAAC,EAA8B5iB,EAAmC9B,GAC5E,IAAI2kB,EAQJ,OCjBW,SAA8B7iB,GAGzC,YAAoC,IAFbA,EAEMnP,GDQzBiyB,CAAqB9iB,GAEd9B,GAAgBA,EAAanU,SACpC84B,EAAY3kB,EAAa,GAAGrN,IAF5BgyB,EAAY7iB,EAAQnP,GAKjB,CACHA,GAAIgyB,EACJ5K,UAAWjY,EAAQiY,UACnBC,SAAUlY,EAAQkY,SAClBC,QAASnY,EAAQmY,QACjB4K,aAAc/iB,EAAQoY,SACtB4K,aAAchjB,EAAQqY,SACtBC,KAAMtY,EAAQsY,KACd2K,SAAUjjB,EAAQuY,gBAClB2K,aAAcljB,EAAQmjB,oBACtBC,SAAUpjB,EAAQwY,WAClBpB,QAASpX,EAAQoX,QACjBT,YAAa3W,EAAQ2W,YACrB8B,MAAOzY,EAAQyY,MACfC,aAAc1Y,EAAQ0Y,cAnC9B51B,EAAAU,EAAA4B,EAAA,sBAAAw9B,gJEUe,SAAAS,EAA0D9nB,GACrE,IAAME,EAAe,SAAAhW,GAAG,SAAAiW,mDAAsB,OAARlU,EAAA,UAAAkU,EAAAjW,GAAQiW,EAAzB,CAAiBH,GAiBtC,OAfA3X,OAAO+X,oBAAoBJ,EAAOzW,WAC7BkL,QAAQ,SAAAvL,GACL,IAAM8V,EAAa3W,OAAOgY,yBAAyBL,EAAOzW,UAAWL,GAEhE8V,GAAsB,gBAAR9V,GAInBb,OAAOC,eACH4X,EAAgB3W,UAChBL,EAQhB,SAAmD8W,EAAgB9W,EAAa8V,GAC5E,GAAgC,mBAArBA,EAAWpW,MAClB,OAAOoW,EAGX,IAAItG,EAAW,IAAIgH,EAAA,EACfN,EAASJ,EAAWpW,MACpBm/B,EAAiB1/B,OAAA8O,EAAA,QAAA9O,CAAQ+W,EAAQ,eAAC,IAAA1O,EAAA,GAAAC,EAAA,EAAAA,EAAAC,UAAApC,OAAAmC,IAAAD,EAAAC,GAAAC,UAAAD,GAAY,OAAA+H,EAAStB,OAAMrG,MAAf2H,EAAmBhI,KAErE,OAAOrI,OAAA2/B,EAAA,EAAA3/B,CAAc2X,EAAQ9W,EAAK,CAC9BV,IAAG,WAAH,IAAA4B,EAAAC,KACUzB,EAAQ,eAAE,IAAA8H,EAAA,GAAAC,EAAA,EAAAA,EAAAC,UAAApC,OAAAmC,IAAAD,EAAAC,GAAAC,UAAAD,GACZ,IAAMs3B,EAAcF,EAAejgC,KAAIiJ,MAAnBg3B,EAAc,CAAM39B,GAAI4G,OAAKN,IAEjD,GAAuC,IAAnCgI,EAASd,aAAY7G,MAArB2H,EAAyBhI,GACzB,OAAOu3B,EAGX,IAAMnf,EAAW1J,EAAOtX,KAAIiJ,MAAXqO,EAAM,CAAMhV,GAAI4G,OAAKN,IAEtC,OAAIrI,OAAA0gB,EAAA,EAAA1gB,CAAQygB,EAAUmf,EAAa,CAAE94B,UAAW,SAAAjG,GAAO,OAACb,OAAA6/B,EAAA,EAAA7/B,CAAUa,MACvD++B,GAGXF,EAAevvB,MAAMiH,IAAI/G,EAAStB,OAAMrG,MAAf2H,EAAmBhI,GAAOoY,GAE5CA,IAKX,OAFAzgB,OAAOC,eAAe+B,KAAMnB,EAAK+C,EAAA,YAAK+S,EAAU,CAAEpW,MAAKA,KAEhDA,GAEX6W,IAAG,SAAC7W,GACA8P,EAAW,IAAIgH,EAAA,EACfN,EAASxW,EACTm/B,EAAiB1/B,OAAA8O,EAAA,QAAA9O,CAAQ+W,EAAQ,eAAC,IAAA1O,EAAA,GAAAC,EAAA,EAAAA,EAAAC,UAAApC,OAAAmC,IAAAD,EAAAC,GAAAC,UAAAD,GAAY,OAAA+H,EAAStB,OAAMrG,MAAf2H,EAAmBhI,QA3C7Dy3B,CAAwBnoB,EAAOzW,UAAWL,EAAK8V,MAIpDkB,ECrBX,IAAqBkoB,EAArB,WAMI,SAAAC,EAAY3C,GACRr7B,KAAKi+B,gBAAkB5C,EAAUP,eAUzC,OAPIkD,EAAA9+B,UAAAg/B,yBAAA,SAAyBh2B,GACrB,OAAOlI,KAAKi+B,gBAAgBxJ,mBAAmBvsB,IAGnD81B,EAAA9+B,UAAAi/B,2BAAA,SAA2Bj2B,GACvB,OAAOlI,KAAKi+B,gBAAgBvJ,qBAAqBxsB,IAfpC81B,EAA2Bp8B,EAAA,YAD/C67B,GACoBO,GAArB,GCAqBI,EAArB,WAMI,SAAAC,EAAYhD,GACRr7B,KAAKi+B,gBAAkB5C,EAAUP,eAUzC,OAPIuD,EAAAn/B,UAAAo/B,qBAAA,SAAqBp2B,GACjB,OAAOlI,KAAKi+B,gBAAgBpX,eAAe3e,IAG/Cm2B,EAAAn/B,UAAAq/B,uBAAA,SAAuBr2B,GACnB,OAAOlI,KAAKi+B,gBAAgBnX,iBAAiB5e,IAfhCm2B,EAA4Bz8B,EAAA,YADhD67B,GACoBY,GAArB,GCDe,SAAAG,EAAuCnD,GAIlD,MAAO,CACHv4B,OAJW,IAAIi7B,EAA4B1C,GAK3Cxc,SAJa,IAAIuf,EAA6B/C,ICEtD,ICVKoD,EDUgBC,EAArB,WAMI,SAAAC,EACYC,EACAC,GAFZ,IAAA9+B,EAAAC,KACYA,KAAA4+B,SACA5+B,KAAA6+B,+BAER7+B,KAAK8+B,OAASN,EAA8Bx+B,KAAK4+B,OAAO1nB,YAExDlX,KAAK4+B,OAAOG,UAAU,SAAA5mB,GAClBpY,EAAK++B,OAASN,EAA8BrmB,KAqHxD,OAlGIwmB,EAAAz/B,UAAAgY,SAAA,WACI,OAAOlX,KAAK8+B,QAiChBH,EAAAz/B,UAAA6/B,UAAA,SACIC,OADJ,MAAAj/B,EAAAC,KAEIi/B,EAAA,GAAA34B,EAAA,EAAAA,EAAAC,UAAApC,OAAAmC,IAAA24B,EAAA34B,EAAA,GAAAC,UAAAD,GAEA,OAAO1D,EAAA5C,KAAK4+B,QAAOG,UAASr4B,MAAA9D,EAAA,CACxB,WAAM,OAAAo8B,EAAWj/B,EAAKmX,aACtB,SAAAiB,GAAS,OAAAA,EAAM2iB,eAAe5jB,aAAUvQ,OACrCs4B,EAAQp0B,IAAI,SAAAhG,GAAU,gBAACsT,GAAqC,OAAAtT,EAAO25B,EAA8BrmB,UAsB5GwmB,EAAAz/B,UAAAggC,iBAAA,SAAiBl7B,GAAjB,IEzGgCiH,EFyGhClL,EAAAC,KACUm/B,GE1GsBl0B,EF0GKjH,EAAQse,YEzGtC,kBAAkBxO,KAAK7I,GF0GtB,CAACjH,EAAQse,aGvGN,SAA4B8c,EAAkBC,GACzD,IAAMC,EAAatrB,SAASurB,iBAAiBH,GAE7C,IAAKE,EAAWn7B,OACZ,MAAM,IAAIq7B,EAAA,EAAqB,2DAA2DJ,GAG9F,OAAOn7B,MAAM/E,UAAUmO,MAAM5P,KAAK6hC,GAC7Bz0B,IAAI,SAAC40B,GAKF,OAJKA,EAAUx0B,KACXw0B,EAAUx0B,GAAKjN,OAAA8O,EAAA,SAAA9O,CAASqhC,IAGrBI,EAAUx0B,KH2FjBy0B,CAAmB17B,EAAQse,YAAgBte,EAAQkE,SAAQ,eAE/D,OAAO2I,QAAQC,IACXquB,EAAat0B,IAAI,SAAAyX,GACb,IAAMjP,EAAStT,EAAK8+B,6BAA6B1uB,WAAWvO,EAAA,YAAKoC,EAAO,CAAEse,YAAWA,KAC/Eqd,EAAU,0BAA0B37B,EAAQkE,SAAQ,IAAIoa,EAE9D,OAAOviB,EAAK6+B,OAAOgB,SAASvsB,EAAQ,CAAEssB,QAAOA,OAGhDn4B,KAAK,WAAM,OAAAzH,EAAKmX,cAezBynB,EAAAz/B,UAAA2gC,mBAAA,SAAmB77B,GAAnB,IAAAjE,EAAAC,KACUqT,EAASrT,KAAK6+B,6BAA6BiB,aAAa97B,GACxD27B,EAAU,0BAA0B37B,EAAQkE,SAElD,OAAOlI,KAAK4+B,OAAOgB,SAASvsB,EAAQ,CAAEssB,QAAOA,IACxCn4B,KAAK,WAAM,OAAAzH,EAAKmX,cAhIRynB,EAAyB/8B,EAAA,YAD7C+7B,EAAA,GACoBgB,GAArB,2CIGA,WACI,SAAAoB,EACYC,EACAC,GADAjgC,KAAAggC,YACAhgC,KAAAigC,8BAuChB,OApCIF,EAAA7gC,UAAAiR,WAAA,SAAWnM,GAAX,IAAAjE,EAAAC,KACI,OAAO,SAAAyV,GACH,IAAMhO,EAAO,CAAES,SAAUlE,EAAQkE,SAAUoa,YAAate,EAAQse,aAEhE,OAAI7M,EAAMyB,WAAW4jB,eAAe1V,cAAcphB,EAAQkE,SAAUlE,EAAQse,aACjEtkB,OAAAsX,EAAA,MAAAtX,GAGJA,OAAAsX,EAAA,OAAAtX,CACHA,OAAAsX,EAAA,GAAAtX,CAAGA,OAAA+gB,EAAA,aAAA/gB,CAAaokB,EAAA,EAAyBI,+BAA2Bpa,EAAWX,IAC/E1H,EAAKkgC,4BAA4Bh4B,kBAAkBjE,EAAQkE,SAAU,CAAES,QAAS3E,EAAQ2E,QAASuM,UAAU,IAC3GlX,OAAAsX,EAAA,MAAAtX,CAAM,WAAM,OAAA+B,EAAKigC,UAAU7hC,IAAI6F,EAAQkE,UAAUiI,WAAWnM,GACvDwD,KAAK,WAAM,OAAAxJ,OAAA+gB,EAAA,aAAA/gB,CAAaokB,EAAA,EAAyBC,+BAA2Bja,EAAWX,QAC9F8N,KACEvX,OAAAwX,EAAA,WAAAxX,CAAW,SAAA+J,GAAS,OAAA/J,OAAAkiC,EAAA,EAAAliC,CAAiBokB,EAAA,EAAyBK,uBAAwB1a,EAAON,QAKzGs4B,EAAA7gC,UAAA4gC,aAAA,SAAa97B,GAAb,IAAAjE,EAAAC,KACI,OAAO,SAAAyV,GACH,IAAMhO,EAAO,CAAES,SAAUlE,EAAQkE,UAEjC,OAAKuN,EAAMyB,WAAW4jB,eAAe1V,cAAcphB,EAAQkE,UAIpDlK,OAAAsX,EAAA,OAAAtX,CACHA,OAAAsX,EAAA,GAAAtX,CAAGA,OAAA+gB,EAAA,aAAA/gB,CAAaokB,EAAA,EAAyBM,iCAA6Bta,EAAWX,IACjFzJ,OAAAsX,EAAA,MAAAtX,CAAM,WAAM,OAAA+B,EAAKigC,UAAU7hC,IAAI6F,EAAQkE,UAAU43B,eAC5Ct4B,KAAK,WAAM,OAAAxJ,OAAA+gB,EAAA,aAAA/gB,CAAaokB,EAAA,EAAyBG,iCAA6Bna,EAAWX,QAChG8N,KACEvX,OAAAwX,EAAA,WAAAxX,CAAW,SAAA+J,GAAS,OAAA/J,OAAAkiC,EAAA,EAAAliC,CAAiBokB,EAAA,EAAyBO,yBAA0B5a,EAAON,MARxFzJ,OAAAsX,EAAA,MAAAtX,KAYvB+hC,EA1CA,qHHbA,SAAKtB,GACDA,EAAA,mCACAA,EAAA,gDACAA,EAAA,yCACAA,EAAA,mCACAA,EAAA,wBACAA,EAAA,8BANJ,CAAKA,MAAwB,KASd,IAAA0B,EAAA,mBIGf,WAII,SAAAC,EACYxB,EACAyB,EACAC,EACAC,EACAC,EACAC,QAAA,IAAAA,OAAA,GALAzgC,KAAA4+B,SACA5+B,KAAAqgC,yBACArgC,KAAAsgC,uBACAtgC,KAAAugC,sBACAvgC,KAAAwgC,cACAxgC,KAAAygC,eAqMhB,OAlMIL,EAAAlhC,UAAAiR,WAAA,SAAWnM,GAAX,IAAAjE,EAAAC,KACU0gC,GAAiB1gC,KAAKygC,aAAez8B,EAAQ28B,sBAAwB38B,EAAQ48B,kBAAoB,GACjGzoB,EAAQnY,KAAK4+B,OAAO1nB,WACpByjB,EAAgB36B,KAAK6gC,eAAiB1oB,EAAMggB,eAAeE,iBAAiBr0B,EAAQkE,UAE1F,IAAKyyB,IAAkBA,EAAcvqB,YACjC,MAAM,IAAI0wB,EAAA,EAAiBA,EAAA,EAAqBngC,sBAKpD,OAFAX,KAAKsgC,qBAAqBnwB,WAAWwqB,EAAcvqB,aAE5CS,QAAQC,IAAI,CACf9Q,KAAKsgC,qBAAqBvvB,oBAC1B/Q,KAAKugC,oBAAoB/wB,eAExBhI,KAAK,SAAC5E,OAAC+M,EAAA/M,EAAA,GAAgB6M,EAAA7M,EAAA,GACpB7C,EAAKiR,gBAAkBrB,EAEvB,IAAMoxB,EAAiB,GACjBC,EAAoB,GAQ1B,OANIN,EAAcO,YACdF,EAAeh3B,KAAK0F,EAAOyxB,QAAQC,QAEnCH,EAAkBj3B,KAAK0F,EAAOyxB,QAAQC,QAGnC1xB,EAAO2xB,OAAOC,OAAO,CACxBC,IAAK3G,EAAcxjB,OAAOoqB,SAAW,UAAY,aACjDC,SAAQd,EAAce,qBACtBC,QAAS,CACLC,QAASZ,EACTa,WAAYZ,GAEhBa,MAAOjgC,EAAA,UACHkgC,MAAO,OACPpQ,MAAO3xB,EAAK0gC,aAAe,cAAWr4B,GACnCpK,OAAA8O,EAAA,KAAA9O,CAAK0iC,EAAcmB,MAAO,SAAU,OAAQ,QAAS,QAAS,QAAS,UAAW,iBAEzFrZ,QAAS,WAAM,OAAAzoB,EAAKgiC,cAAcrB,EAAcsB,iBAChDC,YAAa,SAAA33B,GAAQ,OAAAvK,EAAKmiC,iBAAiB53B,EAAMo2B,EAAce,qBAAsBf,EAAcyB,oBACpGn+B,EAAQse,gBAIvB8d,EAAAlhC,UAAA4gC,aAAA,WAMI,OALA9/B,KAAKgR,qBAAkB5I,EACvBpI,KAAK6gC,oBAAiBz4B,EAEtBpI,KAAKsgC,qBAAqB9uB,WAEnBX,QAAQY,WAGX2uB,EAAAlhC,UAAA6iC,cAAR,SAAsBK,GAAtB,IAAAriC,EAAAC,KACI,OAAOA,KAAK4+B,OAAOgB,SAAS5/B,KAAKqgC,uBAAuBrpB,uBACnDxP,KAAK,SAAA2Q,GACF,IAAMX,EAAWW,EAAMX,SAASC,cAC1BN,EAASgB,EAAMhB,OAAO+e,iBACtBtR,EAAWzM,EAAMyM,SAASoQ,cAC1B5a,EAAUwK,GAAYA,EAASyd,WAAazd,EAASyd,UAAU,GAErE,IAAKtiC,EAAKiR,gBACN,MAAM,IAAIsxB,EAAA,EAAoBA,EAAA,EAAwBC,8BAG1D,IAAK/qB,EACD,MAAM,IAAIspB,EAAA,EAAiBA,EAAA,EAAqBzgC,iBAGpD,IAAK8W,EACD,MAAM,IAAI2pB,EAAA,EAAiBA,EAAA,EAAqBxgC,uBAGpD,OAAOP,EAAKiR,gBAAgBwxB,cAAc,CACtCC,KAAM,WACNC,uBAAuB,EACvBC,yBAAyB,EACzBC,wBAAyBxoB,EAAUra,EAAK8iC,uBAAuBzoB,QAAWhS,EAC1E+C,OAAQqM,EAASmiB,WACjBmJ,SAAU3rB,EAAO2rB,SAASxxB,KAC1ByxB,YAAahjC,EAAK0gC,iBAGzB34B,MAAM,SAAAC,GAKH,MAJIq6B,GACAA,EAAQr6B,GAGNA,KAIVq4B,EAAAlhC,UAAAgjC,iBAAR,SACI53B,EACAm3B,EACAW,GAHJ,IAAAriC,EAAAC,KAKI,IAAKA,KAAKgR,kBAAoBhR,KAAK6gC,eAC/B,MAAM,IAAIyB,EAAA,EAAoBA,EAAA,EAAwBC,8BAG1D,IAAMr6B,EAAWlI,KAAK6gC,eAAe51B,GAErC,OAAO4F,QAAQC,IAAI,CACf9Q,KAAKgR,gBAAgBgyB,gBAAgB14B,GACrCtK,KAAKsgC,qBAAqBnvB,iBAAiB,CAAE1B,QAAQ,MAEpDjI,KAAK,SAAC5E,OAAC0Q,EAAA1Q,EAAA,GAAW2O,EAAA3O,EAAA,GAAA2O,WAWf,OAVAxR,EAAKygC,YAAYyC,SAAS,gBAAiB,CACvCC,aAAc,SACdC,SAAUj7B,EACVmL,OAAQouB,EAAuB,kBAAoB,wBACnD7G,MAAOtnB,EAAQsnB,MACfwI,YAAa7xB,EACb8xB,iBAAkBC,KAAKC,UAAUxjC,EAAKyjC,4BAA4BlwB,IAClEmwB,gBAAiBH,KAAKC,UAAUxjC,EAAK2jC,2BAA2BpwB,MAG7DA,IAEVxL,MAAM,SAAAC,GAKH,MAJIq6B,GACAA,EAAQr6B,GAGNA,KAIVq4B,EAAAlhC,UAAAskC,4BAAR,SAAoClwB,GAChC,IAAMkF,EAAkBlF,EAAQqwB,QAAQnrB,gBAElC5V,GADgB4V,GAAmBA,EAAgBorB,eAAiB,IACpE9lB,MAAA,KAACuU,EAAAzvB,EAAA,GAAW0vB,EAAA1vB,EAAA,GAElB,MAAO,CACHihC,MAAOvwB,EAAQqwB,QAAQE,MACvBC,WAAYzR,EACZ0R,UAAWzR,EACX0R,aAAcxrB,GAAmBA,EAAgBqa,OAASvf,EAAQqwB,QAAQ9Q,MAC1EoR,eAAgBzrB,GAAmBA,EAAgB0rB,MACnDC,eAAgB3rB,GAAmBA,EAAgB4rB,MACnD1R,KAAMla,GAAmBA,EAAgBka,KACzCva,MAAOK,GAAmBA,EAAgBL,MAC1CksB,aAAc7rB,GAAmBA,EAAgBuY,YACjDuT,YAAa9rB,GAAmBA,EAAgBoa,aAIhDwN,EAAAlhC,UAAAwkC,2BAAR,SAAmCpwB,GAC/B,IAAMoM,EAAiBpM,EAAQqwB,QAAQjkB,eACjClH,EAAkBlF,EAAQqwB,QAAQnrB,gBAExC,OAAIkH,EACO,CACHmkB,MAAOvwB,EAAQqwB,QAAQE,MACvBC,WAAYpkB,EAAe2S,WAAa/e,EAAQqwB,QAAQtR,UACxD0R,UAAWrkB,EAAe4S,UAAYhf,EAAQqwB,QAAQrR,SACtD0R,aAActkB,EAAemT,OAASvf,EAAQqwB,QAAQ9Q,MACtDoR,eAAgBvkB,EAAewkB,MAC/BC,eAAgBzkB,EAAe0kB,MAC/B1R,KAAMhT,EAAegT,KACrBva,MAAOuH,EAAevH,MACtBksB,aAAc3kB,EAAeqR,YAC7BuT,YAAa5kB,EAAekT,YAI7B,CACHiR,MAAOvwB,EAAQqwB,QAAQE,MACvBC,WAAYxwB,EAAQqwB,QAAQtR,UAC5B0R,UAAWzwB,EAAQqwB,QAAQrR,SAC3B0R,aAAc1wB,EAAQqwB,QAAQ9Q,MAC9BoR,eAAgBzrB,GAAmBA,EAAgB0rB,MACnDC,eAAgB3rB,GAAmBA,EAAgB4rB,MACnD1R,KAAMla,GAAmBA,EAAgBka,KACzCva,MAAOK,GAAmBA,EAAgBL,MAC1CksB,aAAc7rB,GAAmBA,EAAgBuY,YACjDuT,YAAa9rB,GAAmBA,EAAgBoa,aAIhDwN,EAAAlhC,UAAA2jC,uBAAR,SAA+BzoB,GAC3B,MAAO,CACH8pB,MAAO9pB,EAAQoY,SACf4R,MAAOhqB,EAAQqY,SACfC,KAAMtY,EAAQsY,KACdva,MAAOiC,EAAQmjB,oBACf3K,WAAYxY,EAAQwY,WACpB7B,YAAa3W,EAAQ2W,YACrB8B,MAAOzY,EAAQyY,MACf+Q,cAAkBxpB,EAAQiY,UAAS,IAAIjY,EAAQkY,WAG3D8N,EA/MA,GCHqBmE,EAArB,WAII,SAAAC,EACY5F,EACA4B,EACAH,EACAoE,GAHAzkC,KAAA4+B,SACA5+B,KAAAwgC,cACAxgC,KAAAqgC,yBACArgC,KAAAykC,6BA+EhB,OA5EID,EAAAtlC,UAAAiR,WAAA,SAAWnM,GAAX,IAAAjE,EAAAC,KACYsiB,EAAAte,EAAAse,YAAapa,EAAAlE,EAAAkE,SAErB,IAAKoa,IAAgBpa,EACjB,MAAM,IAAIs3B,EAAA,EAAqB,qEAKnC,OAFAx/B,KAAK0kC,UAAYx8B,EAEVlI,KAAK4+B,OAAOgB,SAAS5/B,KAAKqgC,uBAAuBrpB,uBACnDxP,KAAK,WAAM,OAAAzH,EAAK0kC,2BAA2Bt0B,WAAWpQ,EAAK4kC,kBAC3Dn9B,KAAK,WACFzH,EAAK6kC,cAAgB7kC,EAAK8kC,oBAAoBviB,MAI1DkiB,EAAAtlC,UAAA4gC,aAAA,WAMI,OALI9/B,KAAK4kC,eAAiB5kC,KAAK4kC,cAAcE,aACzC9kC,KAAK4kC,cAAcE,WAAWC,YAAY/kC,KAAK4kC,eAC/C5kC,KAAK4kC,mBAAgBx8B,GAGlBpI,KAAKykC,2BAA2B3E,gBAGnC0E,EAAAtlC,UAAA2lC,oBAAR,SAA4BviB,GACxB,IAAMmd,EAAYzrB,SAASgxB,eAAe1iB,GAE1C,IAAKmd,EACD,MAAM,IAAID,EAAA,EAAqB,+DAGnC,IAAMyF,EAAkBjlC,KAAKykC,2BAA2BS,aAAallC,KAAKmlC,0BAI1E,OAFA1F,EAAU2F,YAAYH,GAEfA,GAGHT,EAAAtlC,UAAAylC,aAAR,WACI,IAAK3kC,KAAK0kC,UACN,MAAM,IAAIpC,EAAA,EAAoBA,EAAA,EAAwB9xB,uBAG1D,OAAOxQ,KAAK0kC,WAIRF,EAAAtlC,UAAAimC,yBAAR,SAAiCx/B,GADjC,IAAA5F,EAAAC,KAII,OAFA2F,EAAM0/B,iBAECrlC,KAAKykC,2BAA2Ba,gBAClC99B,KAAK,SAAA+9B,GAAe,OAAAxlC,EAAK0kC,2BAA2Be,cAAcD,GAClE/9B,KAAK,WACE+9B,EAAY/sB,iBACZzY,EAAK0kC,2BAA2BgB,sBAAsBF,EAAY/sB,qBAGzEhR,KAAK,WAAM,OAAAzH,EAAK2lC,6BAChB59B,MAAM,SAAAC,GAAS,OAAAhI,EAAK4lC,SAAS59B,MAG9By8B,EAAAtlC,UAAAwmC,yBAAR,WACI1lC,KAAKwgC,YAAYyC,SAAS,gBAAiB,CACvCzgC,QAAS,CACLoG,OAAQ,YACRg9B,eAAgB,wCAKpBpB,EAAAtlC,UAAAymC,SAAR,SAAiB59B,GACb,GAAIA,GAA2B,aAAlBA,EAAM1G,QACf,MAAM0G,GAzBdnG,EAAA,YADC+7B,EAAA,gDA6BL6G,EAvFA,WCIqBqB,EAArB,WAKI,SAAAC,EACYlH,EACAyB,EACA0F,GAFA/lC,KAAA4+B,SACA5+B,KAAAqgC,yBACArgC,KAAA+lC,0BAwFhB,OArFID,EAAA5mC,UAAAiR,WAAA,SAAWnM,GAAX,IAAAjE,EAAAC,KACYsiB,EAAAte,EAAAse,YAAapa,EAAAlE,EAAAkE,SAErB,IAAKoa,IAAgBpa,EACjB,MAAM,IAAIs3B,EAAA,EAAqB,qEAKnC,OAFAx/B,KAAK0kC,UAAYx8B,EAEVlI,KAAK4+B,OAAOgB,SAAS5/B,KAAKqgC,uBAAuBrpB,uBACnDxP,KAAK,SAAA2Q,GACF,IAAMwiB,EAAgBxiB,EAAMggB,eAAeE,iBAAiBnwB,GAE5D,IAAKyyB,IAAkBA,EAAcqL,mBAAmB3uB,WACpD,MAAM,IAAIypB,EAAA,EAAiBA,EAAA,EAAqBngC,sBAGpD,OAAOZ,EAAKgmC,wBAAwBE,KAAKtL,EAAcxjB,OAAOoqB,YAEjE/5B,KAAK,SAAA0+B,GACFnmC,EAAKomC,kBAAoBD,EACzBnmC,EAAKqmC,cAAgBrmC,EAAK8kC,oBAAoBviB,MAI1DwjB,EAAA5mC,UAAA4gC,aAAA,WAOI,OANI9/B,KAAKomC,eAAiBpmC,KAAKomC,cAActB,aACzC9kC,KAAKomC,cAAcz8B,oBAAoB,QAAS3J,KAAKmlC,0BACrDnlC,KAAKomC,cAActB,WAAWC,YAAY/kC,KAAKomC,eAC/CpmC,KAAKomC,mBAAgBh+B,GAGlByI,QAAQY,WAGXq0B,EAAA5mC,UAAA2lC,oBAAR,SAA4BviB,GACxB,IAAM+jB,EAAkBryB,SAASgxB,eAAe1iB,GAEhD,IAAK+jB,EACD,MAAM,IAAI5kC,MAAM,wCAGpB,IAAM6kC,EAAStyB,SAASC,cAAc,SAQtC,OANAqyB,EAAOrmC,KAAO,QACdqmC,EAAOC,IAAM,4EACbF,EAAgBjB,YAAYkB,GAE5BA,EAAO98B,iBAAiB,QAASxJ,KAAKmlC,0BAE/BmB,GAGHR,EAAA5mC,UAAAsnC,yBAAR,WACI,IAAMruB,EAAQnY,KAAK4+B,OAAO1nB,WACpBM,EAAWW,EAAMX,SAASC,cAC1BkjB,EAAgB36B,KAAK0kC,UAAYvsB,EAAMggB,eAAeE,iBAAiBr4B,KAAK0kC,WAAa,KAE/F,IAAKltB,EACD,MAAM,IAAIspB,EAAA,EAAiBA,EAAA,EAAqBzgC,iBAGpD,IAAKs6B,EACD,MAAM,IAAImG,EAAA,EAAiBA,EAAA,EAAqBngC,sBAGpD,MAAO,CACH0W,WAAYsjB,EAAcqL,mBAAmB3uB,WAC7CovB,iBAAkB9L,EAAcqL,mBAAmBS,iBACnDt7B,OAAQqM,EAASmB,KAAK+tB,WAAW/hC,WACjCm+B,SAAUtrB,EAASmB,KAAKmqB,SAASxxB,KACjCq1B,OAAQnvB,EAASmB,KAAK1N,GACtB27B,yBAAyB,EACzBxe,YAAapqB,OAAA6oC,EAAA,EAAA7oC,CAAe,UAK5B8nC,EAAA5mC,UAAAimC,yBAAR,WACI,IAAKnlC,KAAKmmC,kBACN,MAAM,IAAI7D,EAAA,EAAoBA,EAAA,EAAwBC,8BAG1DviC,KAAKmmC,kBAAkB3uB,SAASxX,KAAKwmC,6BALzC5kC,EAAA,YADC+7B,EAAA,gDAQLmI,EAhGA,aCFA,WAGI,SAAAgB,EACYlI,EACAyB,EACAE,EACAC,EACAuG,QAAA,IAAAA,MAAA,IAJA/mC,KAAA4+B,SACA5+B,KAAAqgC,yBACArgC,KAAAugC,sBACAvgC,KAAAwgC,cACAxgC,KAAA+mC,QAgHhB,OA7GID,EAAA5nC,UAAAiR,WAAA,SAAWnM,GAAX,IAAAjE,EAAAC,KACU0gC,EAAgB18B,EAAQyL,OACxB0I,EAAQnY,KAAK4+B,OAAO1nB,WACpByjB,EAAgB36B,KAAK6gC,eAAiB1oB,EAAMggB,eAAeE,iBAAiBr0B,EAAQkE,UAE1F,IAAKw4B,EACD,MAAM,IAAIlB,EAAA,EAGd,OAAOx/B,KAAKugC,oBAAoB/wB,aAC3BhI,KAAK,SAAAiI,SACF,IAAKkrB,IAAkBA,EAAcxjB,OAAO6vB,WACxC,MAAM,IAAIlG,EAAA,EAAiBA,EAAA,EAAqBngC,sBAGpD,IAAMqmC,EAAarM,EAAcxjB,OAAO6vB,WAClC1F,EAAM3G,EAAcxjB,OAAOoqB,SAAW,UAAY,aAClDnxB,IAAWxN,EAAA,IAAyB0+B,GAAMZ,EAAcuG,SAAQrkC,GAEhEm+B,EAAiB,GACjBC,EAAoB,GAQ1B,OANIN,EAAcO,YACdF,EAAeh3B,KAAK0F,EAAOyxB,QAAQC,QAEnCH,EAAkBj3B,KAAK0F,EAAOyxB,QAAQC,QAGnC1xB,EAAO2xB,OAAOC,OAAO,CACxBC,IAAGA,EACHnyB,OAAQiB,EACRoxB,OAAQd,EAAce,qBACtBC,QAAS,CACLC,QAASZ,EACTa,WAAYZ,GAEhBa,MAAOjgC,EAAA,UACHkgC,MAAO,QACJ9jC,OAAA8O,EAAA,KAAA9O,CAAK0iC,EAAcmB,MAAO,SAAU,OAAQ,QAAS,QAAS,QAAS,UAAW,iBAEzFrZ,QAAS,SAAC9T,EAAGwyB,GAAY,OAAAnnC,EAAKgiC,cAAciF,EAAYE,EAASxG,EAAcsB,iBAC/EC,YAAa,SAAC33B,EAAM48B,GAAY,OAAAnnC,EAAKmiC,iBAAiB53B,EAAM48B,EAASxG,EAAce,qBAAsBf,EAAcyB,oBACxHn+B,EAAQse,gBAIvBwkB,EAAA5nC,UAAA4gC,aAAA,WAGI,OAFA9/B,KAAK6gC,oBAAiBz4B,EAEfyI,QAAQY,WAGXq1B,EAAA5nC,UAAA6iC,cAAR,SAAsBiF,EAAoBE,EAAyB9E,GAAnE,IAAAriC,EAAAC,KACI,IAAKknC,EACD,MAAM,IAAI5E,EAAA,EAAoBA,EAAA,EAAwBC,8BAG1D,OAAOviC,KAAK4+B,OAAOgB,SAAS5/B,KAAKqgC,uBAAuBrpB,uBACnDxP,KAAK,SAAA2Q,GACF,IAAMQ,EAAOR,EAAMQ,KAAKC,UAClB+tB,EAAShuB,EAAOA,EAAK1N,GAAK,GAEhC,OAAOi8B,EAAQvrB,QAAQjW,KAAQ3F,EAAKgnC,MAAK,wCAAyC,CAAEC,WAAUA,EAAEL,OAAMA,GAAI,CACtGnkC,QAAS,CACLsG,iBAAkBq+B,EAAA,OAI7B3/B,KAAK,SAAA4/B,GAAO,OAAAA,EAAIn8B,KAChBnD,MAAM,SAAAC,GAKH,MAJIq6B,GACAA,EAAQr6B,GAGNA,KAIV++B,EAAA5nC,UAAAgjC,iBAAR,SACI53B,EACA48B,EACAzF,EACAkE,GAJJ,IAAA5lC,EAAAC,KAMI,IAAKA,KAAK6gC,eACN,MAAM,IAAIyB,EAAA,EAAoBA,EAAA,EAAwBC,8BAG1D,IAAK2E,EACD,MAAM,IAAI5E,EAAA,EAAoBA,EAAA,EAAwBC,8BAG1D,IAAKj4B,EAAK+8B,YAAc/8B,EAAKg9B,QACzB,MAAM,IAAIxG,EAAA,EAAiBA,EAAA,EAAqBpgC,gBAGpD,IAAMwH,EAAWlI,KAAK6gC,eAAe51B,GAErC,OAAOi8B,EAAQ1e,QAAQrqB,IAAImM,EAAK+8B,WAAW7/B,KAAK,SAAA8L,GAC5CvT,EAAKygC,YAAYyC,SAAS,gBAAiB,CACvCC,aAAc,SACdC,SAAUj7B,EACVmL,OAAQouB,EAAuB,kBAAoB,wBACnD8F,UAAWj9B,EAAK+8B,UAChBG,QAASl9B,EAAKg9B,QACdG,UAAWnE,KAAKC,UAAUjwB,EAAQo0B,MAAMC,iBAIxDb,EAxHA,GCuBe,SAAAc,EACX5jC,GAEA,IAAM6jC,EAAO7jC,GAAWA,EAAQ6jC,KAC1BpyB,EAAQzX,OAAA8pC,EAAA,EAAA9pC,GACR+pC,EAAgB/pC,OAAAgqC,EAAA,oBAAAhqC,CAAoB,CAAE6pC,KAAIA,IAC1CI,EAAajqC,OAAAkqC,EAAA,iBAAAlqC,CAAiB,CAAE6pC,KAAIA,IAE1C,OAAO,IAAInJ,EACPjpB,EACA,IAAI0yB,EC1BG,SACX1yB,EACAsyB,EACAE,EACAJ,GAEA,IAAMO,EAAW,IAAIC,EAAA,EACfC,EAAetqC,OAAAuqC,EAAA,gBAAAvqC,GACfwqC,EAAwB,IAAIC,EAAA,EAC9B,IAAIC,EAAA,EAAsBX,GAC1B,IAAIY,EAAA,EAAoB,IAAIC,EAAA,EAAoBb,KAqEpD,OAlEAK,EAASnrB,SAASkjB,EAAyB0I,iBAAkB,WACzD,WAAIC,EACArzB,EACA+yB,EACA,IAAIO,EAAA,EAAoB,IAAIC,EAAA,EAAsBV,IAClD,IAAIW,EAAA,EAAmBX,GACvBL,KAIRG,EAASnrB,SAASkjB,EAAyB+I,wBAAyB,WAChE,WAAIJ,EACArzB,EACA+yB,EACA,IAAIO,EAAA,EAAoB,IAAIC,EAAA,EAAsBV,IAClD,IAAIW,EAAA,EAAmBX,GACvBL,GACA,KAIRG,EAASnrB,SAASkjB,EAAyBgJ,WAAY,WACnD,WAAItD,EACApwB,EACA+yB,EACA,IAAIY,EAAA,EAAuBd,MAGnCF,EAASnrB,SAASkjB,EAAyBkJ,oBAAqB,WAC5D,WAAI9E,EACA9uB,EACAwyB,EACAO,EACAxqC,OAAAsrC,EAAA,EAAAtrC,CACIyX,EACA,IAAI8zB,EAAA,EACA,IAAIR,EAAA,EACA,IAAIC,EAAA,EAAsBV,SAO9CF,EAASnrB,SAASkjB,EAAyBqJ,iBAAkB,WACzD,WAAIjF,EACA9uB,EACAwyB,EACAO,EACAxqC,OAAAsrC,EAAA,EAAAtrC,CACIyX,EACA,IAAIg0B,EAAA,MAKhBrB,EAASnrB,SAASkjB,EAAyBuJ,cAAe,WACtD,WAAIC,EACAl0B,EACA+yB,EACA,IAAIS,EAAA,EAAmBX,GACvBL,EACAJ,KAIDO,EDpDCwB,CAA6Bn0B,EAAOsyB,EAAeE,EAAYJ,GAC/D,IAAIgC,EAAA,EAA2B,IAAIC,EAAA,EAA2B/B,MA9C1E7qC,EAAAU,EAAA4B,EAAA,sBAAAooC,sCEEYmC,6BCAZ,WACI,SAAAC,EACYC,GAAAjqC,KAAAiqC,aAuChB,OApCID,EAAA9qC,UAAAgrC,QAAA,SAAsBrrC,GAClB,IAAMsrC,EAAWC,EAAAjqB,EAAQ+pB,QAAQlqC,KAAKqqC,cAAcxrC,IAEpD,GAAiB,OAAbsrC,EACA,OAAO,KAGX,IACI,OAAO7G,KAAKgH,MAAMH,GACpB,MAAOpiC,GAIL,OAFA/H,KAAKuqC,WAAWvqC,KAAKqqC,cAAcxrC,IAE5B,OAIfmrC,EAAA9qC,UAAAsrC,YAAA,SAA0B3rC,GACtB,IAAMN,EAAQyB,KAAKkqC,QAAQrrC,GAI3B,OAFAmB,KAAKuqC,WAAW1rC,GAETN,GAGXyrC,EAAA9qC,UAAAurC,QAAA,SAAsB5rC,EAAaN,GAC/B,OAAO6rC,EAAAjqB,EAAQsqB,QAAQzqC,KAAKqqC,cAAcxrC,GAAMykC,KAAKC,UAAUhlC,KAGnEyrC,EAAA9qC,UAAAqrC,WAAA,SAAW1rC,GACP,OAAOurC,EAAAjqB,EAAQoqB,WAAWvqC,KAAKqqC,cAAcxrC,KAGzCmrC,EAAA9qC,UAAAmrC,cAAR,SAAsBxrC,GAClB,OAAUmB,KAAKiqC,WAAU,IAAIprC,GAErCmrC,EAzCA,oCCGA,SAAAnqC,GACI,SAAA6qC,EAAY/nC,GAAZ,IAAA5C,EACIF,EAAApC,KAAAuC,KAAM2C,EAAU,CAAEtB,QAASsB,EAASJ,KAAK4a,SAAQnd,YAEjDD,EAAKlC,KAAO,yBACZkC,EAAKE,KAAO,wBAEpB,OAPoD2B,EAAA,UAAA8oC,EAAA7qC,GAOpD6qC,EAPA,OAAoD,YFHpD,SAAYX,GACRA,EAAA,qCACAA,EAAA,iCACAA,EAAA,6BAHJ,CAAYA,MAAsB,KAMlC,eAAAlqC,GACI,SAAA8qC,EACItpC,EACOvB,QAAA,IAAAA,MAAkCiqC,EAAuBa,cAFpE,IAAA7qC,EAIIF,EAAApC,KAAAuC,KAAMqB,GAAW,uCAAqCrB,YAF/CD,EAAAD,UAIPC,EAAKlC,KAAO,qBACZkC,EAAKE,KAAO,mBAEpB,OAVgD2B,EAAA,UAAA+oC,EAAA9qC,GAUhD8qC,EAVA,CAAgDE,EAAA,WGa3BC,EAArB,WAOI,SAAAC,EACYC,EACAC,EACAC,EACAC,EACAnkC,EACAokC,EACAC,EACA3+B,GARZ,IAAA3M,EAAAC,KACYA,KAAAgrC,iBACAhrC,KAAAirC,mBACAjrC,KAAAkrC,iBACAlrC,KAAAmrC,oBACAnrC,KAAAgH,iBACAhH,KAAAorC,WACAprC,KAAAqrC,YACArrC,KAAA0M,WAER1M,KAAKsrC,aAAc,EAEftrC,KAAK0M,SAAS6+B,YACdvrC,KAAKirC,iBAAiBrhC,YAAY4hC,EAAA,EAA0BC,iBAAkBzrC,KAAK0M,SAAS6+B,YAG5FvrC,KAAK0M,SAAS01B,SACdpiC,KAAKirC,iBAAiBrhC,YAAY4hC,EAAA,EAA0BE,cAAe1rC,KAAK0M,SAAS01B,SAGzFpiC,KAAK0M,SAASi/B,QACd3rC,KAAKirC,iBAAiBrhC,YAAY4hC,EAAA,EAA0BI,eAAgB5rC,KAAK0M,SAASi/B,QAG1F3rC,KAAK0M,SAASm/B,aACd7rC,KAAKirC,iBAAiBrhC,YAAY4hC,EAAA,EAA0BM,YAAa9rC,KAAK0M,SAASm/B,aAGvF7rC,KAAK0M,SAASq/B,WACd/rC,KAAKirC,iBAAiBrhC,YAAY4hC,EAAA,EAA0BQ,UAAWhsC,KAAK0M,SAASq/B,WAGzF/rC,KAAKirC,iBAAiBrhC,YAAY4hC,EAAA,EAA0BM,YAAa,WAAM,OAAA/rC,EAAKksC,qBAyH5F,OAtHIlB,EAAA7rC,UAAAgtC,OAAA,eAAAnsC,EAAAC,KACI,OAAIA,KAAKsrC,YACEz6B,QAAQY,QAAQzR,OAG3BA,KAAKsrC,aAAc,EACnBtrC,KAAKirC,iBAAiB1hC,SACtBvJ,KAAKmrC,kBAAkBgB,KAAKnsC,KAAK0M,SAAS4V,aAEnCtiB,KAAKosC,eACP5kC,KAAK,WAAM,OAAAzH,EAAKssC,kBAChB7kC,KAAK,SAAAuB,GAAO,OAAAhJ,EAAKirC,eAAesB,YAAYvjC,EAAKhJ,EAAK2M,SAAS4V,eAC/D9a,KAAK,SAAA+kC,GACFxsC,EAAKysC,QAAUD,EAEfxsC,EAAKksC,mBACLlsC,EAAKorC,kBAAkBsB,SAE1B3kC,MAAM,SAAAC,GAGH,OAFAhI,EAAKurC,aAAc,EAEZvrC,EAAK2sC,kBAAkB3kC,GACzBD,MAAM,WAQH,MAPA/H,EAAKkrC,iBAAiB9gC,QAAQ,CAC1BlK,KAAMurC,EAAA,EAA0BmB,WAChCr5B,QAASvL,IAGbhI,EAAKorC,kBAAkBsB,OAEjB1kC,MAGjBP,KAAK,WAAM,OAAAzH,MAGpBgrC,EAAA7rC,UAAA0tC,OAAA,WACS5sC,KAAKsrC,cAIVtrC,KAAKsrC,aAAc,EACnBtrC,KAAKirC,iBAAiBvhC,aAElB1J,KAAKwsC,SAAWxsC,KAAKwsC,QAAQ1H,aAC7B9kC,KAAKwsC,QAAQ1H,WAAWC,YAAY/kC,KAAKwsC,SACzCxsC,KAAKwsC,QAAQK,cAAcC,WAI3B/B,EAAA7rC,UAAA+sC,iBAAR,WACSjsC,KAAKwsC,SAAYxsC,KAAKwsC,QAAQO,eAAkB/sC,KAAK0M,SAASsgC,SAInEhtC,KAAKkrC,eAAeplC,UAAU9F,KAAKwsC,QAAQO,eAE3C/sC,KAAKkrC,eAAexlC,KAAK,CACrBzF,KAAMgtC,EAAA,EAAyBC,gBAC/B55B,QAAStT,KAAK0M,SAASsgC,WAIvBjC,EAAA7rC,UAAAmtC,cAAR,WACI,MAAK,kBAAkBv4B,KAAK9V,OAAAmvC,EAAA,EAAAnvC,CAASgC,KAAK0M,SAAS3D,KAAKsL,UAIjDrU,KAAKgH,eAAetB,KAAK1F,KAAK0M,SAAS3D,KACzCvB,KAAK,SAAC5E,GAA8B,OAApBA,EAAAL,KAAAm4B,cAChB5yB,MAAM,SAAAnF,GAAY,OAAAkO,QAAQu8B,OAAO,IAAIC,EAAuB1qC,MALtDkO,QAAQY,QAAQzR,KAAK0M,SAAS3D,MAerCgiC,EAAA7rC,UAAAktC,aAAR,WACI,GAAIpsC,KAAKorC,SAASlB,QA9HI,mBAoIlB,OAFAlqC,KAAKorC,SAASX,QAnIK,uBAmI2B,GAEvC55B,QAAQY,UAGnBzR,KAAKorC,SAASb,WAxIS,uBAyIvBvqC,KAAKorC,SAASX,QAxIQ,mBAwIuB,GAErC,IACF/P,EADE18B,OAAAmvC,EAAA,EAAAnvC,CAAAgC,KAAA0M,SAAA3D,KAAAtD,OACqB,6CAA6C6nC,mBAAmBttC,KAAKqrC,UAAUn3B,MAK5G,OAHAF,SAASzR,KAAKs/B,MAAM0L,WAAa,SACjCvtC,KAAKqrC,UAAU9sB,QAAQmc,GAEhB,IAAI7pB,QAAe,eAGtBk6B,EAAA7rC,UAAAwtC,kBAAR,SAA0B3kC,GAOtB,OALI/H,KAAKorC,SAASlB,QAtJK,wBAuJnBniC,aAAiBylC,GACjBzlC,EAAMjI,UAAYiqC,EAAuB0D,gBAO7CztC,KAAKorC,SAASb,WA/JS,uBAgKvBvqC,KAAKorC,SAASb,WA/JQ,mBAiKfvqC,KAAKosC,gBANDv7B,QAAQu8B,UAxJNrC,EAAgBnpC,EAAA,YADpC+7B,EAAA,GACoBoN,GAArB,mBCnBM2C,EAAyC,CAC3CC,KAAM,GACNC,MAAO,UACPC,gBAAiB,WAGfC,EAAqB,iDAE3B,WAKI,SAAAC,EACI/pC,GAEAhE,KAAKguC,QAAUpsC,EAAA,YAAK8rC,EAAmB1pC,GAAWA,EAAQgpC,QAE1DhtC,KAAKiuC,mBAELjuC,KAAKkuC,WAAaluC,KAAKmuC,kBACvBnuC,KAAKouC,WAAapuC,KAAKquC,kBAEvBruC,KAAKkuC,WAAW9I,YAAYplC,KAAKouC,YA0FzC,OAvFIL,EAAA7uC,UAAAitC,KAAA,SAAKmC,GACD,GAAIA,EAAU,CACV,IAAMC,EAASv6B,SAASgxB,eAAesJ,GAEvC,IAAKC,EACD,MAAM,IAAI9sC,MAAM,8EAGpB8sC,EAAOnJ,YAAYplC,KAAKkuC,YAG5BluC,KAAKkuC,WAAWrM,MAAM0L,WAAa,UACnCvtC,KAAKkuC,WAAWrM,MAAM2M,QAAU,KAGpCT,EAAA7uC,UAAAutC,KAAA,eAAA1sC,EAAAC,KACUyuC,EAAsB,WACxB1uC,EAAKmuC,WAAWrM,MAAM0L,WAAa,SAEnCxtC,EAAKmuC,WAAWvkC,oBAAoB,gBAAiB8kC,IAGzDzuC,KAAKkuC,WAAW1kC,iBAAiB,gBAAiBilC,GAElDzuC,KAAKkuC,WAAWrM,MAAM2M,QAAU,KAG5BT,EAAA7uC,UAAAivC,gBAAR,WACI,IAAM1O,EAAYzrB,SAASC,cAAc,OAazC,OAXAwrB,EAAUoC,MAAM6M,QAAU,QAC1BjP,EAAUoC,MAAM8M,OAAS,IACzBlP,EAAUoC,MAAM+M,KAAO,IACvBnP,EAAUoC,MAAMgN,OAAS,OACzBpP,EAAUoC,MAAMiN,MAAQ,OACxBrP,EAAUoC,MAAMkN,SAAW,WAC3BtP,EAAUoC,MAAMmN,MAAQ,IACxBvP,EAAUoC,MAAMoN,IAAM,IACtBxP,EAAUoC,MAAMqN,WAAa,qBAC7BzP,EAAUoC,MAAM2M,QAAU,IAEnB/O,GAGHsO,EAAA7uC,UAAAmvC,gBAAR,WACI,IAAMc,EAAYn7B,SAASC,cAAc,OAiBzC,OAfAk7B,EAAUtN,MAAM6M,QAAU,QAC1BS,EAAUtN,MAAMiN,MAAW9uC,KAAKguC,QAAQL,KAAI,KAC5CwB,EAAUtN,MAAMgN,OAAY7uC,KAAKguC,QAAQL,KAAI,KAC7CwB,EAAUtN,MAAMuN,aAAkBpvC,KAAKguC,QAAQL,KAAI,KACnDwB,EAAUtN,MAAMwN,OAAS,YACzBF,EAAUtN,MAAMyN,YAAiBtvC,KAAKguC,QAAQH,gBAAe,IAAI7tC,KAAKguC,QAAQH,gBAAe,IAAI7tC,KAAKguC,QAAQJ,MAAK,IAAI5tC,KAAKguC,QAAQJ,MACpIuB,EAAUtN,MAAM0N,OAAS,SACzBJ,EAAUtN,MAAMkN,SAAW,WAC3BI,EAAUtN,MAAM+M,KAAO,IACvBO,EAAUtN,MAAMmN,MAAQ,IACxBG,EAAUtN,MAAMoN,IAAM,MACtBE,EAAUtN,MAAM2N,UAAY,gCAC5BL,EAAUtN,MAAM4N,eAAiB,cACjCN,EAAUtN,MAAM6N,UAAe5B,EAAkB,uDAE1CqB,GAGHpB,EAAA7uC,UAAA+uC,iBAAR,WAGI,IAAIj6B,SAASgxB,eAAe8I,GAA5B,CAIA,IAAMjM,EAAQ7tB,SAASC,cAAc,SAErC4tB,EAAM52B,GAAK6iC,EAEX95B,SAAS27B,KAAKvK,YAAYvD,GAEtBA,EAAM+N,iBAAiBC,eACvBhO,EAAM+N,MAAME,WAAW,gCACNhC,EAAkB,yLAO/CC,EAzGA,iBCHA,WACI,SAAAgC,EACYrjC,GAAA1M,KAAA0M,WAyEhB,OAtEIqjC,EAAA7wC,UAAAotC,YAAA,SAAY/F,EAAajkB,GACrB,IAAMmd,EAAYzrB,SAASgxB,eAAe1iB,GAClC1f,GAAA5C,KAAA0M,UAAA,IAAA/D,eAAA,IAAA/F,EAAA,IAAAA,EAER,IAAK68B,EACD,MAAM,IAAI+N,EACN,+EACAzD,EAAuBiG,kBAI/B,IAAMzD,EAASv4B,SAASC,cAAc,UAUtC,OARAs4B,EAAOhG,IAAMA,EACbgG,EAAO1K,MAAMwN,OAAS,OACtB9C,EAAO1K,MAAM6M,QAAU,OACvBnC,EAAO1K,MAAMiN,MAAQ,OACrBvC,EAAO0D,qBAAsB,EAE7BxQ,EAAU2F,YAAYmH,GAEfvsC,KAAKkwC,kBAAkB3D,EAAQ5jC,GACjCb,MAAM,SAAAC,GAGH,MAFA03B,EAAUsF,YAAYwH,GAEhBxkC,KAIVgoC,EAAA7wC,UAAAgxC,kBAAR,SAA0B3D,EAA2B4D,GAGjD,OAAO,IAAIt/B,QAAQ,SAACY,EAAS27B,GACzB,IAAMzkC,EAAU/C,OAAOwqC,WAAW,WAC9BhD,EAAO,IAAII,EAAmB,yEAC/B2C,GAEGE,EAAgB,SAAC1qC,GCxB5B,IAAuB3B,EAAwB2R,EDyBtC,GAAIhQ,EAAMF,SAAWzH,OAAAmvC,EAAA,EAAAnvC,CAASuuC,EAAOhG,KAAK9gC,SAItCzH,OAAAsyC,EAAA,EAAAtyC,CAAc2H,EAAM2E,KAAMkhC,EAAA,EAA0BmB,cACpDn7B,IACA47B,EAAO,IAAII,EAAmB7nC,EAAM2E,KAAKgJ,QAAQjS,QAAS0oC,EAAuB0D,kBAGjFzvC,OAAAsyC,EAAA,EAAAtyC,CAAc2H,EAAM2E,KAAMkhC,EAAA,EAA0BM,cAAc,CAClES,EAAO1K,MAAM6M,QAAU,GAEvB,IAAM6B,EAAY5qC,EAAM2E,KAAKgJ,SAAW3N,EAAM2E,KAAKgJ,QAAQi9B,UACrDC,GCtCIxsC,EDsCoB,CAC1BysC,WAAW,EACXC,WAAW,EACXC,wBAAyBJ,EAAY,gBAAkB,iBCzCzB56B,ED0C/B42B,GCvCZqE,EAFC1zC,EAAA,IAAA2zC,eAEqB7sC,EAAS2R,IDyCtBnE,IACAC,EAAQ++B,EAAQA,EAAQrsC,OAAS,MAInCqN,EAAW,WACb5L,OAAO+D,oBAAoB,UAAW0mC,GACtCzqC,OAAOkrC,aAAanoC,IAGxB/C,OAAO4D,iBAAiB,UAAW6mC,MAG/CN,EA3EA,GEPA7yC,EAAAU,EAAA4B,EAAA,sBAAAuxC,IAcA,IAAMC,EAAiB,+BAoBR,SAAAD,EAAuB/sC,GAClC,IAAMyB,EAASzH,OAAAmvC,EAAA,EAAAnvC,CAASgG,EAAQ+E,KAAKtD,OAYrC,OAXyB,IAAIqlC,EACzB,IAAImG,EACJ,IAAIC,EAAA,EAA8CzrC,GAClD,IAAI0rC,EAAA,EAAwC1rC,GAC5C,IAAI2rC,EAAiB,CAAEpE,OAAQhpC,EAAQgpC,QAAUhpC,EAAQgpC,OAAOqE,mBAChErzC,OAAAgqC,EAAA,oBAAAhqC,GACA,IAAIszC,EAAeN,GACnBprC,OAAOqW,SACPjY,GAGoBkoC,yBC/C5B7uC,EAAAD,QAAAkC,QAAA,6CCAAjC,EAAAD,QAAAkC,QAAA,yECIAiyC,EAAA,SAAA1xC,GACI,SAAA0xC,EAAY5uC,GAAZ,IAAA5C,EACIF,EAAApC,KAAAuC,KAAM2C,EAAU,CACZtB,QAAS,2CACXrB,YAEFD,EAAKlC,KAAO,eACZkC,EAAKE,KAAO,YAEpB,OAT0Cc,EAAA,UAAAwwC,EAAA1xC,GAS1C0xC,EATA,OAA0C,uCCJ1C,IAAAC,EAAAt0C,EAAA,IAAAu0C,EAAAv0C,EAAA,IASesC,EAAA,EAAAxB,OAAAyzC,EAAA,GAAqBD,EAAA,8CCTpCt0C,EAAAU,EAAA4B,EAAA,sBAAAkyC,IAAA,IAAAxuC,EAAAhG,EAAA,GAEe,SAAAw0C,EAAsBC,GACjC,OAAO3zC,OAAAkF,EAAA,KAAAlF,CAAK2zC,GAAU91B,KAAK,6ECM/B+1B,EAAA,WACI,SAAAA,EACYC,GAAA7xC,KAAA6xC,uBAkBhB,OAdID,EAAA1yC,UAAAyX,WAAA,SAAW3S,GADX,IAAAjE,EAAAC,KAEI,OAAOkH,EAAA,WAAWtI,OAAO,SAACuI,GACtBA,EAASC,KAAKpJ,OAAAqJ,EAAA,aAAArJ,CAAa8zC,EAAA,EAAiB1uB,sBAE5CrjB,EAAK8xC,qBAAqBl7B,WAAW3S,GAChCwD,KAAK,SAAA7E,GACFwE,EAASC,KAAKpJ,OAAAqJ,EAAA,aAAArJ,CAAa8zC,EAAA,EAAiB5uB,oBAAqBvgB,EAASJ,OAC1E4E,EAASU,aAEZC,MAAM,SAAAnF,GACHwE,EAASY,MAAM/J,OAAAqJ,EAAA,kBAAArJ,CAAkB8zC,EAAA,EAAiB3uB,iBAAkBxgB,SAVpF5B,EAAA,YADCwH,EAAA,kCAeLqpC,EApBA,GAAqBpyC,EAAA,kCCPrB,IAAAgJ,EAAAtL,EAAA,IAAAuL,EAAAvL,EAAA,IAIA60C,EAAA,WACI,SAAAA,EACY/qC,GAAAhH,KAAAgH,iBAchB,OAXI+qC,EAAA7yC,UAAAyX,WAAA,SAAW/T,OAAE+F,QAAA,IAAA/F,EAAA,GAAAA,GAAA+F,QAGT,OAAO3I,KAAKgH,eAAe7I,IAFf,oCAEwB,CAChCwK,QAAOA,EACPnG,QAAS,CACLoG,OAAQJ,EAAA,EAAYK,OACpBC,iBAAkBL,EAAA,MAIlCspC,EAhBA,uFCOAC,EAAA,WACI,SAAAA,EACYhrC,GAAAhH,KAAAgH,iBAqGhB,OAlGIgrC,EAAA9yC,UAAA+yC,gBAAA,SACIC,EACAluC,GAFJ,IAAAjE,EAAAC,KAII,OAAO,SAAAyV,GAAS,OAAAvO,EAAA,WAAWtI,OAAO,SAACuI,GAC/B,IAAMgR,EAAQ1C,EAAMyB,WACdM,EAAWW,EAAMX,SAASC,cAEhC,IAAKD,EACD,MAAM,IAAI26B,EAAA,EAAiBA,EAAA,EAAqB9xC,iBAGpD,IAAMukB,EAAWzM,EAAMyM,SAASoQ,cAEhC,GAAIpQ,IAAaA,EAASwtB,QACtB,MAAM,IAAIh6B,EAAA,EAAc,oDAG5B,IAEIi6B,EAFE3yB,EAAiBvH,EAAMuH,eAAe4U,oBAI5C,GAAK5U,EAEE,CACKA,EAAA8R,QAAA,IAAS8gB,EAAAvxC,EAAA,OAAA2e,EAAA,aAEjB2yB,EAA4BtxC,EAAA,YACrBuxC,EACAJ,QANPG,EAA4BH,EAUhC/qC,EAASC,KAAKpJ,OAAAqJ,EAAA,aAAArJ,CAAau0C,EAAA,EAAyB1yB,2BAEpD9f,EAAKyyC,8BAA8Bh7B,EAASvM,GAAIonC,EAA2BruC,GACtEwD,KAAK,SAAC5E,OAAEL,EAAAK,EAAAL,KACL4E,EAASC,KAAKpJ,OAAAqJ,EAAA,aAAArJ,CAAau0C,EAAA,EAAyBjzB,yBAA0B/c,IAC9E4E,EAASU,aAEZC,MAAM,SAAAnF,GACHwE,EAASY,MAAM/J,OAAAqJ,EAAA,kBAAArJ,CAAkBu0C,EAAA,EAAyBzyB,sBAAuBnd,UAKjGqvC,EAAA9yC,UAAAib,cAAA,SACIC,EACApW,GAFJ,IAAAjE,EAAAC,KAII,OAAO,SAAAyV,GAAS,OAAAvO,EAAA,WAAWtI,OAAO,SAACuI,GAC/B,IAAMgR,EAAQ1C,EAAMyB,WACdM,EAAWW,EAAMX,SAASC,cAEhC,IAAKD,EACD,MAAM,IAAI26B,EAAA,EAAiBA,EAAA,EAAqB9xC,iBAGpD8G,EAASC,KAAKpJ,OAAAqJ,EAAA,aAAArJ,CAAau0C,EAAA,EAAyB5yB,gCAEpD,IAAMD,EAAiBvH,EAAMuH,eAAe4U,oBAOtC+d,EAA4BtxC,EAAA,YAC3BqZ,EAAO,CACVypB,WAAgC,IAAlBzpB,EAAQypB,OAAyBnkB,EAAiBA,EAAemkB,MAAQzpB,EAAQypB,QAG/FnkB,GAAkBA,EAAezU,KACjConC,EAA0BpnC,GAAKyU,EAAezU,IAGlDlL,EAAKyyC,8BAA8Bh7B,EAASvM,GAAIonC,EAA2BruC,GACtEwD,KAAK,SAAC5E,OAAEL,EAAAK,EAAAL,KACL4E,EAASC,KAAKpJ,OAAAqJ,EAAA,aAAArJ,CAAau0C,EAAA,EAAyBlzB,8BAA+B9c,IACnF4E,EAASU,aAEZC,MAAM,SAAAnF,GACHwE,EAASY,MAAM/J,OAAAqJ,EAAA,kBAAArJ,CAAkBu0C,EAAA,EAAyB3yB,2BAA4Bjd,UAK9FqvC,EAAA9yC,UAAAszC,8BAAR,SACIn7B,EACA+C,EACApW,GAEA,OAAKoW,EAAQnP,GAINjL,KAAKgH,eAAemT,cAAc9C,EAAY+C,EAASpW,GAHnDhE,KAAKgH,eAAeyrC,cAAcp7B,EAAY+C,EAASpW,IAK1EguC,EAvGA,0DCLMp2B,EAAiB,CACnB9B,QAAS,CACL,uCACA,sCACA,WACA,sBACF+B,KAAK,MAGX62B,EAAA,WACI,SAAAA,EACY1rC,GAAAhH,KAAAgH,iBAiBhB,OAdI0rC,EAAAxzC,UAAAuzC,cAAA,SAAcp7B,EAAoB+C,EAAsCxX,OAAE+F,QAAA,IAAA/F,EAAA,GAAAA,GAAA+F,QAChEI,EAAM,6BAA6BsO,EAAU,mBAC7C7U,EAAU,CAAEoG,OAAQH,EAAA,EAAYI,QAEtC,OAAO7I,KAAKgH,eAAetB,KAAKqD,EAAK,CAAExG,KAAM6X,EAASP,OAAQ+B,EAAgBpZ,QAAOA,EAAEmG,QAAOA,KAGlG+pC,EAAAxzC,UAAAib,cAAA,SAAc9C,EAAoB+C,EAAmDxX,OAAE+F,QAAA,IAAA/F,EAAA,GAAAA,GAAA+F,QAC3EsC,EAAAmP,EAAAnP,GAAI1I,EAAAxB,EAAA,OAAAqZ,EAAA,QACNrR,EAAM,6BAA6BsO,EAAU,oBAAoBpM,EACjEzI,EAAU,CAAEoG,OAAQH,EAAA,EAAYI,QAEtC,OAAO7I,KAAKgH,eAAe+U,IAAIhT,EAAK,CAAE8Q,OAAQ+B,EAAgBrZ,KAAIA,EAAEC,QAAOA,EAAEmG,QAAOA,KAE5F+pC,EAnBA,0DCfAC,EAAA,WAKI,SAAAA,EAAY3uC,GACRhE,KAAK4yC,WAAa,GAClB5yC,KAAK6yC,WAAa,GAClB7yC,KAAK0M,SAAW3L,EAAA,UAAE+xC,aAAc,WAAc9uC,GA8CtD,OA3CI2uC,EAAAzzC,UAAAf,IAAA,SAAIoqB,EAAWwqB,GACX,IACI,OAAO/yC,KAAKgzC,aACRzqB,GAASvoB,KAAK0M,SAASomC,aACvBC,GAAcxqB,GAASvoB,KAAK0M,SAASomC,cAE3C,MAAO/qC,GACL,OAAO/H,KAAKgzC,aACRhzC,KAAK0M,SAASomC,aACdC,GAAc/yC,KAAK0M,SAASomC,gBAKxCH,EAAAzzC,UAAA+d,SAAA,SAASsL,EAAUmT,GACf,GAAI17B,KAAKizC,YAAY1qB,GACjB,MAAM,IAAI2qB,EAAA,EAAqB,IAAI3qB,EAAK,4BAG5CvoB,KAAK4yC,WAAWrqB,GAASmT,GAGnBiX,EAAAzzC,UAAA+zC,YAAV,SAAsB1qB,GAClB,QAASvoB,KAAK4yC,WAAWrqB,IAGrBoqB,EAAAzzC,UAAAi0C,aAAR,SAAqB5qB,GACjB,QAASvoB,KAAK6yC,WAAWtqB,IAGrBoqB,EAAAzzC,UAAA8zC,aAAR,SAAqBzqB,EAAewqB,GAChC,IAAK/yC,KAAKmzC,aAAaJ,GAAa,CAChC,IAAMrX,EAAU17B,KAAK4yC,WAAWrqB,GAEhC,IAAKmT,EACD,MAAM,IAAIwX,EAAA,EAAqB,IAAI3qB,EAAK,wBAG5CvoB,KAAK6yC,WAAWE,GAAcrX,IAGlC,OAAO17B,KAAK6yC,WAAWE,IAE/BJ,EAtDA,uCCAA,IAAA/jC,EAAA1R,EAAA,IAIAk2C,EAAA,WACI,SAAAA,EACYtkC,EACDC,QAAA,IAAAA,MAAAnJ,QADC5F,KAAA8O,gBACD9O,KAAA+O,UAcf,OAXIqkC,EAAAl0C,UAAA+mC,KAAA,SAAK1E,GAAL,IAAAxhC,EAAAC,KACI,OAAOA,KAAK8O,cACPG,WAAW,MAAKsyB,EAAW,WAAa,IAAE,0CAC1C/5B,KAAK,WACF,IAAKzH,EAAKgP,QAAQm3B,WACd,MAAM,IAAIt3B,EAAA,EAGd,OAAO7O,EAAKgP,QAAQm3B,cAGpCkN,EAjBA,kDCJAC,EAAA,SAAAxzC,GACI,SAAAwzC,EACWtrC,GADX,IAAAhI,EAGIF,EAAApC,KAAAuC,KAAM,qGAAmGA,YAFlGD,EAAAgI,QAIPhI,EAAKlC,KAAO,qCACZkC,EAAKE,KAAO,oCAEpB,OATgEc,EAAA,UAAAsyC,EAAAxzC,GAShEwzC,EATA,OAAgE,uCCFhE,IAAAnwC,EAAAhG,EAAA,GAAAqT,EAAArT,EAAA,GAeAo2C,EAAA,WAGI,SAAAA,EACYhT,GAAAtgC,KAAAsgC,uBAuHhB,OApHIgT,EAAAp0C,UAAAiR,WAAA,SACIqH,EACAmjB,EACA4Y,GAHJ,IAAAxzC,EAAAC,KAKI,IAAK26B,EAAcvqB,YACf,MAAM,IAAIG,EAAA,EAAiBA,EAAA,EAAqB5P,sBAKpD,OAFAX,KAAKsgC,qBAAqBnwB,WAAWwqB,EAAcvqB,aAE5CpQ,KAAKsgC,qBAAqB1uB,4BAC5BpK,KAAK,SAAAgsC,GAGF,OAFAzzC,EAAK0zC,uBAAyBD,EAEvBzzC,EAAK2zC,wBACRl8B,EACAmjB,EAAcqL,mBACduN,MAKhBD,EAAAp0C,UAAAsS,SAAA,WACI,OAAOxR,KAAKsgC,qBAAqB9uB,YAGrC8hC,EAAAp0C,UAAAy0C,cAAA,SAAcpO,GACV,IAAMjyB,EAAUgwB,KAAKgH,MAAM/E,EAAYqO,kBAAkBC,iBAAiBtrB,OAAOurB,gBAAgB,GAEjG,MAAO,CACHlZ,MAAOtnB,EAAQsnB,MACf36B,KAAMqT,EAAQrT,KACdmc,YAAa9I,EAAQ8I,YACrBunB,QAAS,CACLoQ,SAAUzgC,EAAQqwB,QAAQoQ,SAC1BC,SAAU1gC,EAAQqwB,QAAQqQ,SAC1BC,QAAS3gC,EAAQqwB,QAAQsQ,SAE7BC,QAAS5gC,EAAQ4gC,UAIjBZ,EAAAp0C,UAAAw0C,wBAAR,SACIl8B,EACAwuB,EACAuN,GAEA,IAAKvN,EAAmBmO,cACpB,MAAM,IAAI5jC,EAAA,EAAiBA,EAAA,EAAqB5P,sBAGpD,IAAMyzC,EAAsE,CACxEC,aAAc,CACVC,QAAStO,EAAmBmO,cAC5BI,aAAcvO,EAAmBwO,mBACjCxN,WAAYhB,EAAmByO,kBAEnCC,gBAAiB,CACbC,aAAcn9B,EAASmB,KAAKmqB,SAASxxB,KACrCsjC,iBAAkB,QAClBC,WAAY72C,OAAAkF,EAAA,MAAAlF,CAAMwZ,EAASmiB,WAAY,GAAGmb,QAAQ,IAEtDC,iBAAkB,CACdC,wBAAwB,EACxBC,qBAAsB,QAE1BC,yBAA0B3B,EAC1B4B,eAAe,EACfC,qBAAqB,GAGzB,OAAOp1C,KAAKq1C,0DACRr1C,KAAKyzC,uBAAuB6B,yBAAyBlB,KAIrDd,EAAAp0C,UAAAm2C,0DAAR,SAAkEE,GAC9D,MAAO,CACHC,WAAY,EACZC,gBAAiB,EACjBpB,aAAc,CACVC,QAASiB,EAAgClB,aAAaC,QACtDtN,WAAYuO,EAAgClB,aAAarN,WACzDuN,aAAcgB,EAAgClB,aAAaE,cAE/DmB,sBAAuB,CAAC,CACpBz1C,KAAM,OACN01C,WAAY,CACRC,mBAAoB,CAAC,WAAY,kBACjCC,oBAAqBN,EAAgCR,iBAAiBc,oBACtEb,wBAAwB,EACxBc,yBAA0B,CACtBC,OAAQ,OACRX,qBAAqB,IAG7BY,0BAA2B,CACvB/1C,KAAM,kBACN01C,WAAY,CACR9rB,QAAS,YACTosB,uBAAwB,KACxBC,qCAAsCX,EAAgCY,oCAAoCR,WAAW,sCACrHS,uBAAwBb,EAAgCY,oCAAoCR,WAAW,wBACvGU,uBAAwBd,EAAgCY,oCAAoCR,WAAW,4BAInHjB,gBAAiBa,EAAgCb,gBACjDS,eAAe,EACfD,wBAAyBK,EAAgCL,wBACzDoB,0BAA2B,CACvBlB,oBAAqBG,EAAgCH,uBAIrE9B,EA3HA,uCCfA,IAAApwC,EAAAhG,EAAA,GAAAqT,EAAArT,EAAA,IAaAq5C,EAAA,oBAAAA,KA+EA,OA9EIA,EAAAr3C,UAAAiR,WAAA,SACIqH,EACAmjB,EACA4Y,GAEA,OAAO1iC,QAAQY,QAAQzR,KAAKw2C,uDACxBh/B,EACAmjB,EAAcqL,mBACduN,KAIRgD,EAAAr3C,UAAAsS,SAAA,WACI,OAAOX,QAAQY,WAGnB8kC,EAAAr3C,UAAAy0C,cAAA,SAAcpO,GACV,IACI,IAAMjyB,EAAUgwB,KAAKgH,MAAM/E,EAAYqO,kBAAkBC,iBAAiBtrB,OAE1E,MAAO,CACHqS,MAAOtnB,EAAQrI,GACfhL,KAAMqT,EAAQrT,KACd0jC,QAAS,CACLoQ,SAAUzgC,EAAQmjC,KAAKjkC,MACvBwhC,SAAU1gC,EAAQmjC,KAAKC,QAGjC,MAAOC,GACL,MAAM,IAAIpmC,EAAA,EAAqB,+CAI/BgmC,EAAAr3C,UAAAs3C,uDAAR,SACIh/B,EACAwuB,EACAuN,GAEA,MAAO,CACHiC,WAAY,EACZC,gBAAiB,EACjBpB,aAAc,CACVC,QAAStO,EAAmBmO,cAC5BnN,WAAYhB,EAAmByO,iBAC/BF,aAAcvO,EAAmBwO,oBAErCkB,sBAAuB,CAAC,CACpBz1C,KAAM,OACN01C,WAAY,CACRC,mBAAoB,CAAC,WAAY,kBACjCC,oBAAqB,CAAC,OAAQ,WAAY,MAAO,aAAc,QAC/Db,wBAAwB,EACxBc,yBAA0B,CACtBC,OAAQ,OACRX,qBAAqB,IAG7BY,0BAA2B,CACvB/1C,KAAM,kBACN01C,WAAY,CACR9rB,QAAS,SACT+sB,iBAAkB5Q,EAAmB6Q,cACrCC,wBAAyB9Q,EAAmB+Q,yBAIxDrC,gBAAiB,CACbC,aAAcn9B,EAASmB,KAAKmqB,SAASxxB,KACrCsjC,iBAAkB,QAClBC,WAAY72C,OAAAkF,EAAA,MAAAlF,CAAMwZ,EAASmiB,WAAY,GAAGmb,QAAQ,IAEtDK,eAAe,EACfD,yBAA0B3B,EAC1B+C,0BAA2B,CACvBlB,qBAAqB,KAIrCmB,EA/EA,uCCbAr5C,EAAAU,EAAA4B,EAAA,sBAAAw3C,IAAA,IAAAC,EAAA/5C,EAAA,KAWe,SAAA85C,EAA+BpyB,EAAoBlF,GAC9D,IAAM2S,EAAYzN,EAASyN,WAAa3S,EAAe2S,WAAa,GAC9DC,EAAW1N,EAAS0N,UAAY5S,EAAe4S,UAAY,GAEjE,MAAO,CACH+P,WAAYzd,EAASyd,WAAa,IAAIx3B,IAAI,SAAAuP,GAAW,OAAApc,OAAAi5C,EAAA,EAAAj5C,CAAqBoc,KAC1E88B,WAAYtyB,EAAS3Z,GACrBmnC,QAASxtB,EAASwtB,QAClBxY,YAAahV,EAASgV,YACtBiK,MAAOjf,EAASif,OAASnkB,EAAemkB,OAAS,GACjDxR,UAASA,EACTC,SAAQA,EACRz0B,KAAM+mB,EAASuyB,UAAY,CAAC9kB,EAAWC,GAAUzW,KAAK,qCCf/C,SAAAu7B,EAAsCC,GACjD,MAAO,CACH/lC,KAAM+lC,EAAgB/lC,KACtBgmC,iBAAkBD,EAAgBE,KAClCC,iBAAkBH,EAAgBI,UAClCJ,gBAAiB,CACbK,QAASL,EAAgBK,QACzBpmC,KAAM+lC,EAAgB/lC,KACtBqmC,aAAcN,EAAgBM,eAb1Cz6C,EAAAU,EAAA4B,EAAA,sBAAA43C,kCCHAl6C,EAAAU,EAAA4B,EAAA,sBAAAo4C,IAAA,IAAA10C,EAAAhG,EAAA,GAAA26C,EAAA36C,EAAA,IAAAqN,EAAArN,EAAA,IAAA46C,EAAA56C,EAAA,KAAAA,EAAA,IAiBe,SAAA06C,EAA4BvvB,EAAc0vB,QAAA,IAAAA,MAAA,IACrD,IAkF2B3d,EACrB3I,EAnFA/mB,EAAgB2d,EAAMya,SAASp4B,cAC/BK,EAAoB,IAAIR,EAAA,EAAkBG,GAEhD,MAAO,CACHO,GAAIod,EAAM6H,QACVuB,MAAOzzB,OAAA65C,EAAA,EAAA75C,CAAuBqqB,EAAM5P,UAAW4P,EAAMya,SAASp4B,cAAe,aAC7EwlB,QAAS7H,EAAM6H,QACf4S,SAAUza,EAAMya,SAASxxB,KACzB0mC,qBAAsB3vB,EAAM2vB,qBAC5BxvB,QAASyvB,EAA0B5vB,EAAM+R,SAAU2d,EAAUvvB,SAC7D0vB,SAAU,CACN/sC,OAAQkd,EAAM8vB,WACd7sC,cAAeP,EAAkBQ,UAAU8c,EAAM8vB,aAErDvb,OAAQ,CACJ0a,iBAAkBt5C,OAAAkF,EAAA,OAAAlF,CAAOqqB,EAAM3E,QAAS,SAAC00B,EAAKxb,GAC1C,OAAOwb,EAAMxb,EAAO0a,kBACrB,GACH5zB,QAAS2E,EAAM3E,QAAQ7Y,IAAIitC,EAAA,IAE/BzsC,SAAU,CACNF,OAAQkd,EAAMhW,eACd/G,cAAeP,EAAkBQ,UAAU8c,EAAMhW,iBAErDkW,MAAOwvB,EAAUzvB,WACjBF,YAAa2vB,EAAU3vB,YACvBiwB,sBAAuB,GACvBhB,iBAuDuBjd,EAvDgB/R,EAAM+R,SAwD3C3I,EAAQzzB,OAAAkF,EAAA,OAAAlF,CAAOo8B,EAAU,CAAEC,WAAY,oBAEtC,CACHie,sBAAuBt6C,OAAAkF,EAAA,OAAAlF,CAAOyzB,EAAO,SAAC2mB,EAAKttC,GAAS,OAAAA,EAAKK,OAASitC,GAAK,GACvEG,wBAAyBv6C,OAAAkF,EAAA,MAAAlF,CAAMyzB,EAAM5mB,IAAI,SAAAC,GAAQ,OAC7CwG,KAAMxG,EAAKoS,OAAO5L,KAClBgmC,iBAAkBxsC,EAAKK,OACvBqsC,iBAAkB1sC,EAAKoS,OAAOu6B,UAC9BJ,gBAAiB,CACbK,QAAS5sC,EAAKK,OAASL,EAAKoS,OAAOu6B,UACnCnmC,KAAMxG,EAAKoS,OAAO5L,KAClBqmC,aAAc,OAEjB,UApELa,WAAYC,EAA4BpwB,GACxC5lB,OAAQ4lB,EAAM5lB,OACdi2C,gBAAiBrwB,EAAMqwB,gBACvBC,eAAgBtwB,EAAMswB,eACtBC,WAAYvwB,EAAMuwB,WAClB3rB,SAAU,CACN9hB,OAAQkd,EAAMwwB,kBACdvtC,cAAeP,EAAkBQ,UAAU8c,EAAMwwB,mBACjDC,qBAAsBzwB,EAAM0wB,2BAC5BC,4BAA6BjuC,EAAkBQ,UAAU8c,EAAM0wB,6BAEnEnf,YAAa,CACTzuB,OAAQ8tC,EAAiB5wB,EAAM+R,WAEnC8e,MAAO7wB,EAAM6wB,MACbC,SAAU,CACNhuC,OAAQkd,EAAM8wB,SACd7tC,cAAeP,EAAkBQ,UAAU8c,EAAM8wB,WAErDC,SAAU,CACNjuC,OAAQkd,EAAMgxB,kBACd/tC,cAAeP,EAAkBQ,UAAU8c,EAAMgxB,oBAErD1f,WAAY,CACRxuB,OAAQkd,EAAMixB,YACdhuC,cAAe+c,EAAMkxB,uBAmBjC,SAAAC,EAAoC/2C,GAChC,MAAO,kBAAkBA,EAG7B,SAAAw2C,EAA0B7e,GACtB,IAAMtvB,EAAO9M,OAAAkF,EAAA,KAAAlF,CAAKo8B,EAAU,CAAEC,WAAY,gBAE1C,OAAOvvB,EAAOA,EAAKK,OAAS,EAqBhC,SAAA8sC,EAAmC7d,EAA0B5R,QAAA,IAAAA,MAAA,IACzD,IAAM1d,EAAO9M,OAAAkF,EAAA,KAAAlF,CAAKo8B,EAAUqf,GAE5B,OAAK3uC,EAIE,CACHG,GAAIH,EAAKuvB,WACT53B,OAAQ+2C,EAA2B1uC,EAAKoS,OAAOud,MAC/Cif,SAAU5uC,EAAKoS,OAAOy8B,aACtBC,UAAWpxB,EAAQoxB,WAPZ,GAWf,SAAAH,EAA+BjxB,GAC3B,MAA8B,oBAAvBA,EAAQ6R,YAA2D,gBAAvB7R,EAAQ6R,WAG/D,SAAAoe,EAAqCpwB,GACjC,IAAMwxB,EAAiE,GAUvE,OAROxxB,EAAM5P,UAAU0C,cAAaxU,OAC7B0hB,EAAM5P,UAAUqhC,cAGjB1vC,QAAQ,SAAAU,GAOlB,IAAiC4Q,EANzBm+B,EAAiB/uC,EAAKG,KAMGyQ,EAN2B5Q,EAO1C,CAAC,KAAM,KAAM,MAEdF,OAAO,SAAC4tC,EAAYlnC,GAC7B,IAAMxG,EAAO4Q,EAASq+B,aAAer+B,EAASq+B,YAAYt+B,KAAK,SAAA3Q,GAAQ,OAAAA,EAAKwG,OAASA,IAErF,OAAKxG,GAIL0tC,EAAWlnC,GAAQ,CACfzT,KAAM6d,EAAS7d,KACfue,YAAaV,EAAS7d,KACtBm8C,MAAOt+B,EAASxQ,SAChBnC,IAAK+B,EAAKmvC,KACVC,UAAWpvC,EAAKqvC,KAChBC,YAAatvC,EAAKmvC,KAClBI,YAAavvC,EAAKwvC,QAClBC,YAAazvC,EAAKwG,MAGfknC,GAdIA,GAeZ,OAzBIqB,iCClJX,IAAAjrC,EAAA1R,EAAA,IAIAs9C,EAAA,WAGI,SAAAA,EACY1rC,GAAA9O,KAAA8O,gBAER9O,KAAK+O,QAAUnJ,OAcvB,OAXI40C,EAAAt7C,UAAAsQ,WAAA,eAAAzP,EAAAC,KACI,OAAOA,KAAK8O,cACPG,WAAW,+CACXzH,KAAK,WACF,IAAKzH,EAAKgP,QAAQU,OACd,MAAM,IAAIb,EAAA,EAGd,OAAO7O,EAAKgP,QAAQU,UAGpC+qC,EApBA,gGCJA,oBAAAC,KAOA,OANIA,EAAAv7C,UAAAw7C,WAAA,SAAW3yC,GACP,MAAO,CACH9H,KAAMke,EAAA,EAAgBC,WACtB9K,QAASvL,IAGrB0yC,EAPA,GCFe,SAAAE,IACX,IACI,OAAOC,QAAAtZ,IAAAuZ,WAAwB,EACjC,MAAOC,GACL,MAAO,eCFf,iBACI,SAAAC,EACYC,GAAAh7C,KAAAg7C,WA8BhB,OA3BID,EAAA77C,UAAA+7C,IAAA,eAAI,IAAAC,EAAA,GAAA50C,EAAA,EAAAA,EAAAC,UAAApC,OAAAmC,IAAA40C,EAAA50C,GAAAC,UAAAD,GACAtG,KAAKm7C,cAAaz0C,MAAlB1G,KAAI,CAAe,OAAK2G,OAAKu0C,KAGjCH,EAAA77C,UAAAk8C,KAAA,eAAK,IAAAF,EAAA,GAAA50C,EAAA,EAAAA,EAAAC,UAAApC,OAAAmC,IAAA40C,EAAA50C,GAAAC,UAAAD,GACDtG,KAAKm7C,cAAaz0C,MAAlB1G,KAAI,CAAe,QAAM2G,OAAKu0C,KAGlCH,EAAA77C,UAAAm8C,KAAA,eAAK,IAAAH,EAAA,GAAA50C,EAAA,EAAAA,EAAAC,UAAApC,OAAAmC,IAAA40C,EAAA50C,GAAAC,UAAAD,GACDtG,KAAKm7C,cAAaz0C,MAAlB1G,KAAI,CAAe,QAAM2G,OAAKu0C,KAGlCH,EAAA77C,UAAA6I,MAAA,eAAM,IAAAmzC,EAAA,GAAA50C,EAAA,EAAAA,EAAAC,UAAApC,OAAAmC,IAAA40C,EAAA50C,GAAAC,UAAAD,GACFtG,KAAKm7C,cAAaz0C,MAAlB1G,KAAI,CAAe,SAAO2G,OAAKu0C,KAGnCH,EAAA77C,UAAAo8C,MAAA,eAAM,IAAAJ,EAAA,GAAA50C,EAAA,EAAAA,EAAAC,UAAApC,OAAAmC,IAAA40C,EAAA50C,GAAAC,UAAAD,GACFtG,KAAKm7C,cAAaz0C,MAAlB1G,KAAI,CAAe,SAAO2G,OAAKu0C,KAG3BH,EAAA77C,UAAAi8C,cAAR,SAAsBl7C,OAAqB,MAAAi7C,EAAA,GAAA50C,EAAA,EAAAA,EAAAC,UAAApC,OAAAmC,IAAA40C,EAAA50C,EAAA,GAAAC,UAAAD,GAClCtG,KAAKg7C,UAAah7C,KAAKg7C,SAAS/6C,KAIrC2C,EAAA5C,KAAKg7C,SAAS/6C,IAAMxC,KAAIiJ,MAAA9D,EAAA,CAAC5C,KAAKg7C,UAAQr0C,OAAKu0C,KAEnDH,EAhCA,KCAA,oBAAAQ,KAUA,OATIA,EAAAr8C,UAAA+7C,IAAA,aAEAM,EAAAr8C,UAAAk8C,KAAA,aAEAG,EAAAr8C,UAAAm8C,KAAA,aAEAE,EAAAr8C,UAAA6I,MAAA,aAEAwzC,EAAAr8C,UAAAo8C,MAAA,aACJC,EAVA,GCGA,ICDqCC,EDC/BC,QCD+B,KAAAD,EDCY,SAArBb,OCDSa,GAAA,GAC5BA,EAIE,IAAIE,EAAcC,SAHd,IAAIC,GDCJ,SAAAC,IACX,OAAOJ,uDEEX,WACI,SAAAK,EACYC,GAAA/7C,KAAA+7C,uBA8ChB,OA3CID,EAAA58C,UAAA88C,YAAA,SAAY1qC,EAActN,GAA1B,IAAAjE,EAAAC,KACI,OAAO,SAAAyV,GAAS,OAAAH,EAAA,WAAW1W,OAAO,SAACuI,GAC/B,IACMqQ,EADQ/B,EAAMyB,WACGM,SAASC,cAEhC,IAAKD,EACD,MAAM,IAAIspB,EAAA,EAAiBA,EAAA,EAAqBzgC,iBAGpD8G,EAASC,KAAKpJ,OAAA+gB,EAAA,aAAA/gB,CAAaqjB,EAAA,EAAiBsC,uBAE5C5jB,EAAKg8C,qBAAqBC,YAAYxkC,EAASvM,GAAIqG,EAAMtN,GACpDwD,KAAK,SAAC5E,OAAEL,EAAAK,EAAAL,KACL4E,EAASC,KAAKpJ,OAAA+gB,EAAA,aAAA/gB,CAAaqjB,EAAA,EAAiBC,qBAAsB/e,IAClE4E,EAASU,aAEZC,MAAM,SAAAnF,GACHwE,EAASY,MAAM/J,OAAA+gB,EAAA,kBAAA/gB,CAAkBqjB,EAAA,EAAiBuC,kBAAmBjhB,UAKrFm5C,EAAA58C,UAAA+8C,aAAA,SAAa3qC,EAActN,GAA3B,IAAAjE,EAAAC,KACI,OAAO,SAAAyV,GAAS,OAAAH,EAAA,WAAW1W,OAAO,SAACuI,GAC/B,IACMqQ,EADQ/B,EAAMyB,WACGM,SAASC,cAEhC,IAAKD,EACD,MAAM,IAAIspB,EAAA,EAAiBA,EAAA,EAAqBzgC,iBAGpD8G,EAASC,KAAKpJ,OAAA+gB,EAAA,aAAA/gB,CAAaqjB,EAAA,EAAiBwC,wBAE5C9jB,EAAKg8C,qBAAqBE,aAAazkC,EAASvM,GAAIqG,EAAMtN,GACrDwD,KAAK,SAAC5E,OAAEL,EAAAK,EAAAL,KACL4E,EAASC,KAAKpJ,OAAA+gB,EAAA,aAAA/gB,CAAaqjB,EAAA,EAAiBE,sBAAuBhf,IACnE4E,EAASU,aAEZC,MAAM,SAAAnF,GACHwE,EAASY,MAAM/J,OAAA+gB,EAAA,kBAAA/gB,CAAkBqjB,EAAA,EAAiByC,mBAAoBnhB,UAI1Fm5C,EAhDA,sCCLA,WACI,SAAAI,EACYl1C,GAAAhH,KAAAgH,iBAmChB,OAhCIk1C,EAAAh9C,UAAA88C,YAAA,SAAY3kC,EAAoB8kC,EAAoBv5C,OAAE+F,QAAA,IAAA/F,EAAA,GAAAA,GAAA+F,QAC5CI,EAAM,6BAA6BsO,EAAU,WAC7C7U,EAAU,CAAEoG,OAAQ0zB,EAAA,EAAYzzB,QAEtC,OAAO7I,KAAKgH,eAAetB,KAAKqD,EAAK,CACjCvG,QAAOA,EACPmG,QAAOA,EACPkR,OAAQ,CACJC,QAAS9b,OAAAu+B,EAAA,EAAAv+B,CACFw+B,EAAA,EAAyB71B,OAAA,CAC5By1C,EAAA,EAAiBpiC,6BAGzBzX,KAAM,CAAE45C,WAAUA,MAI1BD,EAAAh9C,UAAA+8C,aAAA,SAAa5kC,EAAoB8kC,EAAoBv5C,OAAE+F,QAAA,IAAA/F,EAAA,GAAAA,GAAA+F,QAC7CI,EAAM,6BAA6BsO,EAAU,YAAY8kC,EACzD35C,EAAU,CAAEoG,OAAQ0zB,EAAA,EAAYzzB,QAEtC,OAAO7I,KAAKgH,eAAeuH,OAAOxF,EAAK,CACnCvG,QAAOA,EACPmG,QAAOA,EACPkR,OAAQ,CACJC,QAAS9b,OAAAu+B,EAAA,EAAAv+B,CACFw+B,EAAA,EAAyB71B,OAAA,CAC5By1C,EAAA,EAAiBpiC,gCAKrCkiC,EArCA,aCKA,WACI,SAAAG,EACYC,GAAAt8C,KAAAs8C,gCA8ChB,OA3CID,EAAAn9C,UAAAq9C,qBAAA,SAAqBlF,EAAyBrzC,GAA9C,IAAAjE,EAAAC,KACI,OAAO,SAAAyV,GAAS,OAAAH,EAAA,WAAW1W,OAAO,SAACuI,GAC/B,IACMqQ,EADQ/B,EAAMyB,WACGM,SAASC,cAEhC,IAAKD,EACD,MAAM,IAAIspB,EAAA,EAAiBA,EAAA,EAAqBzgC,iBAGpD8G,EAASC,KAAKpJ,OAAA+gB,EAAA,aAAA/gB,CAAawjB,EAAA,EAA0B6C,gCAErDtkB,EAAKu8C,8BAA8BC,qBAAqB/kC,EAASvM,GAAIosC,EAAiBrzC,GACjFwD,KAAK,SAAC5E,OAAEL,EAAAK,EAAAL,KACL4E,EAASC,KAAKpJ,OAAA+gB,EAAA,aAAA/gB,CAAawjB,EAAA,EAA0BC,8BAA+Blf,IACpF4E,EAASU,aAEZC,MAAM,SAAAnF,GACHwE,EAASY,MAAM/J,OAAA+gB,EAAA,kBAAA/gB,CAAkBwjB,EAAA,EAA0B8C,2BAA4B3hB,UAKvG05C,EAAAn9C,UAAAs9C,sBAAA,SAAsBnF,EAAyBrzC,GAA/C,IAAAjE,EAAAC,KACI,OAAO,SAAAyV,GAAS,OAAAH,EAAA,WAAW1W,OAAO,SAACuI,GAC/B,IACMqQ,EADQ/B,EAAMyB,WACGM,SAASC,cAEhC,IAAKD,EACD,MAAM,IAAIspB,EAAA,EAAiBA,EAAA,EAAqBzgC,iBAGpD8G,EAASC,KAAKpJ,OAAA+gB,EAAA,aAAA/gB,CAAawjB,EAAA,EAA0B+C,iCAErDxkB,EAAKu8C,8BAA8BE,sBAAsBhlC,EAASvM,GAAIosC,EAAiBrzC,GAClFwD,KAAK,SAAC5E,OAAEL,EAAAK,EAAAL,KACL4E,EAASC,KAAKpJ,OAAA+gB,EAAA,aAAA/gB,CAAawjB,EAAA,EAA0BE,+BAAgCnf,IACrF4E,EAASU,aAEZC,MAAM,SAAAnF,GACHwE,EAASY,MAAM/J,OAAA+gB,EAAA,kBAAA/gB,CAAkBwjB,EAAA,EAA0BgD,4BAA6B7hB,UAI5G05C,EAhDA,KCLA,WACI,SAAAI,EACYz1C,GAAAhH,KAAAgH,iBA6BhB,OA1BIy1C,EAAAv9C,UAAAq9C,qBAAA,SAAqBllC,EAAoBqlC,EAA6B95C,OAAE+F,QAAA,IAAA/F,EAAA,GAAAA,GAAA+F,QAC9DI,EAAM,6BAA6BsO,EAAU,qBAC7C7U,EAAU,CAAEoG,OAAQ0zB,EAAA,EAAYzzB,QAEtC,OAAO7I,KAAKgH,eAAetB,KAAKqD,EAAK,CACjCvG,QAAOA,EACPmG,QAAOA,EACPkR,OAAQ,CACJC,QAAS9b,OAAAu+B,EAAA,EAAAv+B,CAAaw+B,EAAA,IAE1Bj6B,KAAM,CAAEm6C,oBAAmBA,MAInCD,EAAAv9C,UAAAs9C,sBAAA,SAAsBnlC,EAAoBqlC,EAA6B95C,OAAE+F,QAAA,IAAA/F,EAAA,GAAAA,GAAA+F,QAC/DI,EAAM,6BAA6BsO,EAAU,sBAAsBqlC,EACnEl6C,EAAU,CAAEoG,OAAQ0zB,EAAA,EAAYzzB,QAEtC,OAAO7I,KAAKgH,eAAeuH,OAAOxF,EAAK,CACnCvG,QAAOA,EACPmG,QAAOA,EACPkR,OAAQ,CACJC,QAAS9b,OAAAu+B,EAAA,EAAAv+B,CAAaw+B,EAAA,OAItCigB,EA/BA,YCaA,WACI,SAAAE,EACYC,GAAA58C,KAAA48C,oBAyGhB,OAtGID,EAAAz9C,UAAA29C,OAAA,SAAO3K,EAAkCluC,GAAzC,IAAAjE,EAAAC,KACI,OAAOsV,EAAA,WAAW1W,OAAO,SAACuI,GACtB,IAAMe,EAAWlE,GAAWA,EAAQkE,SAC9BT,EAAO,CAAES,SAAQA,GAEvBf,EAASC,KAAKpJ,OAAA+gB,EAAA,aAAA/gB,CAAaknB,EAAA,EAA2BY,qBAAiB1d,EAAWX,IAElF1H,EAAK68C,kBAAkBz+C,IAAI+J,GACtB20C,OAAO3K,EAAaluC,GACpBwD,KAAK,WACFL,EAASC,KAAKpJ,OAAA+gB,EAAA,aAAA/gB,CAAaknB,EAAA,EAA2Ba,qBAAiB3d,EAAWX,IAClFN,EAASU,aAEZC,MAAM,SAAAC,GACHZ,EAASY,MAAM/J,OAAA+gB,EAAA,kBAAA/gB,CAAkBknB,EAAA,EAA2BgB,aAAcne,EAAON,SAKjGk1C,EAAAz9C,UAAA49C,QAAA,SAAQ94C,GAAR,IAAAjE,EAAAC,KACI,OAAOsV,EAAA,WAAW1W,OAAO,SAACuI,GACtB,IAAMe,EAAWlE,GAAWA,EAAQkE,SAC9BT,EAAO,CAAES,SAAQA,GAEvBf,EAASC,KAAKpJ,OAAA+gB,EAAA,aAAA/gB,CAAaknB,EAAA,EAA2BiB,sBAAkB/d,EAAWX,IAEnF1H,EAAK68C,kBAAkBz+C,IAAI+J,GACtB40C,QAAQ94C,GACRwD,KAAK,WACFL,EAASC,KAAKpJ,OAAA+gB,EAAA,aAAA/gB,CAAaknB,EAAA,EAA2BkB,sBAAkBhe,EAAWX,IACnFN,EAASU,aAEZC,MAAM,SAAAC,GACHZ,EAASY,MAAM/J,OAAA+gB,EAAA,kBAAA/gB,CAAkBknB,EAAA,EAA2BqB,cAAexe,EAAON,SAKlGk1C,EAAAz9C,UAAAiR,WAAA,SAAWnM,GAAX,IAAAjE,EAAAC,KACI,OAAO,SAAAyV,GAAS,OAAAH,EAAA,WAAW1W,OAAO,SAACuI,GAC/B,IAAMgR,EAAQ1C,EAAMyB,WACdhP,EAAWlE,GAAWA,EAAQkE,SAC9BT,EAAO,CAAES,SAAQA,GAEvB,GAAIA,GAAYiQ,EAAM4iB,mBAAmB3V,cAAcld,GACnD,OAAOf,EAASU,WAGpBV,EAASC,KAAKpJ,OAAA+gB,EAAA,aAAA/gB,CAAaknB,EAAA,EAA2BI,yBAAqBld,EAAWX,IAEtF1H,EAAK68C,kBAAkBz+C,IAAI+J,GACtBiI,WAAWnM,GACXwD,KAAK,WACFL,EAASC,KAAKpJ,OAAA+gB,EAAA,aAAA/gB,CAAaknB,EAAA,EAA2BC,yBAAqB/c,EAAWX,IACtFN,EAASU,aAEZC,MAAM,SAAAC,GACHZ,EAASY,MAAM/J,OAAA+gB,EAAA,kBAAA/gB,CAAkBknB,EAAA,EAA2BO,iBAAkB1d,EAAON,UAKrGk1C,EAAAz9C,UAAA4gC,aAAA,SAAa97B,GAAb,IAAAjE,EAAAC,KACI,OAAO,SAAAyV,GAAS,OAAAH,EAAA,WAAW1W,OAAO,SAACuI,GAC/B,IAAMgR,EAAQ1C,EAAMyB,WACdhP,EAAWlE,GAAWA,EAAQkE,SAC9BT,EAAO,CAAES,SAAQA,GAEvB,GAAIA,IAAaiQ,EAAM4iB,mBAAmB3V,cAAcld,GACpD,OAAOf,EAASU,WAGpBV,EAASC,KAAKpJ,OAAA+gB,EAAA,aAAA/gB,CAAaknB,EAAA,EAA2BQ,2BAAuBtd,EAAWX,IAExF1H,EAAK68C,kBAAkBz+C,IAAI+J,GACtB43B,aAAa97B,GACbwD,KAAK,WACFL,EAASC,KAAKpJ,OAAA+gB,EAAA,aAAA/gB,CAAaknB,EAAA,EAA2BG,2BAAuBjd,EAAWX,IACxFN,EAASU,aAEZC,MAAM,SAAAC,GACHZ,EAASY,MAAM/J,OAAA+gB,EAAA,kBAAA/gB,CAAkBknB,EAAA,EAA2BW,mBAAoB9d,EAAON,UAKvGk1C,EAAAz9C,UAAA69C,kBAAA,SAAkBhoC,EAA4B/Q,GAC1C,OAAOsR,EAAA,WAAW1W,OAAO,SAACuI,GACtB,IACMM,EAAO,CAAES,SADElE,GAAWA,EAAQkE,UAGpCf,EAASC,KAAKpJ,OAAA+gB,EAAA,aAAA/gB,CAAaknB,EAAA,EAA2BsB,8BAA0Bpe,EAAWX,IAE3FsN,IAASvN,KAAK,WACVL,EAASC,KAAKpJ,OAAA+gB,EAAA,aAAA/gB,CAAaknB,EAAA,EAA2BuB,+BAA2Bre,EAAWX,IAC5FN,EAASU,aAEZC,MAAM,SAAAC,GACHZ,EAASY,MAAM/J,OAAA+gB,EAAA,kBAAA/gB,CAAkBknB,EAAA,EAA2B0B,wBAAyB7e,EAAON,SAI5Gk1C,EA3GA,uDCZA,WAGI,SAAAK,EACYluC,GAAA9O,KAAA8O,gBAER9O,KAAK+O,QAAUnJ,OA4CvB,OAzCIo3C,EAAA99C,UAAA+9C,WAAA,SAAWloC,EAAuBmoC,GAE1B,IAAAt6C,EAAAmS,EAAAoC,OAAU6vB,EAAApkC,EAAAokC,WAAYzF,EAAA3+B,EAAA2+B,SACtB1+B,EAAAkS,EAAAixB,mBAAsBjjC,QAAA,IAAAF,EAAA,GAAAA,GAAAs6C,cAAA,IAAAp6C,EAAA,KAAAA,EAGpBgG,EAAM,YACkB,OAAzBo0C,EAAOC,cAAyB,aAAe,cAChD,yCACGD,EAAOC,cAAa,KACtB7b,EAAW,WAAa,KACC,OAAzB4b,EAAOC,cAAyB,OAAS,IAC1C,0BAA0BpW,EAI9B,OAFAhnC,KAAKq9C,iBAAiBtoC,EAAQmoC,GAEvBl9C,KAAK8O,cAAcG,WAAWlG,IAGjCi0C,EAAA99C,UAAAm+C,iBAAR,SAAyBtoC,EAAuBmoC,GAAhD,IAAAn9C,EAAAC,KACUs9C,EAAe,WACZv9C,EAAKgP,QAAQwuC,SAIlBx9C,EAAKgP,QAAQwuC,OAAOC,MAAMC,YAAY1oC,EAAOixB,mBAAmBiB,UAChElnC,EAAKgP,QAAQwuC,OAAOC,MAAME,cAAa,KAGvC19C,KAAK+O,QAAQwuC,QAAUv9C,KAAK+O,QAAQwuC,OAAOC,MAC3CF,IAEAt9C,KAAK+O,QAAQ4uC,mBAAqBL,EAGlCt9C,KAAK+O,QAAQ6uC,mBAAqBV,EAClCA,IAEAl9C,KAAK+O,QAAQ8uC,sBAAwBX,GAGjDF,EAlDA,4BCOA,WACI,SAAAc,EACYxd,EACAt5B,GADAhH,KAAAsgC,uBACAtgC,KAAAgH,iBAgHhB,OA7GI82C,EAAA5+C,UAAAiR,WAAA,SAAWC,EAAqBpM,GAG5B,OAFAhE,KAAKsgC,qBAAqBnwB,WAAWC,GAE9BpQ,KAAKsgC,qBAAqB5uB,kBAC5BlK,KAAK,SAAAqI,GAAgB,OAAAA,EAAakuC,kBAAkB,CACjDC,SAAU,CACNC,OAAQj6C,EAAQi6C,OAChBhxB,SAAU,CACNixB,gBAAiBl6C,EAAQk6C,kBAGjCC,eAAgB,CACZxJ,aAAc3wC,EAAQ2wC,aACtBuD,SAAUkG,OAAOp6C,EAAQk0C,gBAKzC4F,EAAA5+C,UAAA4gC,aAAA,WACI,OAAO9/B,KAAKsgC,qBAAqB9uB,YAGrCssC,EAAA5+C,UAAAsmC,cAAA,SAAchd,EAA4CyE,EAAoBF,GAA9E,IAAAhtB,EAAAC,KACI,OAAOA,KAAKsgC,qBAAqB5uB,kBAC5BlK,KAAK,SAAA62C,GAAyB,OAAAxtC,QAAQC,IAAI,CACvCutC,EAAsBC,SAAS91B,GAC/BzoB,EAAKugC,qBAAqBnvB,qBAE7B3J,KAAK,SAAC5E,OAAC27C,EAAA37C,EAAA,GAAkB2M,EAAA3M,EAAA,GAElBC,EAAA07C,EAAA/lC,uBAAA,IAAA3V,EAAA9C,EAAAy+C,uBAAAvxB,GAAApqB,EACAE,EAAAw7C,EAAA7+B,sBAAA,IAAA3c,EAAAhD,EAAAy+C,uBAAAzxB,GAAAhqB,EAGJ,OAAOhD,EAAK0+C,UAAU78C,EAAA,YACf28C,EAAgB,CACnB/lC,gBAAeA,EACfkH,eAAcA,IACfnQ,QAIPuuC,EAAA5+C,UAAAu/C,UAAR,SAAkBlZ,EAA2Ch2B,GAErD,IAAAmvC,EAAAnZ,EAAAmZ,SACAh/B,EAAA6lB,EAAA7lB,eACAlH,EAAA+sB,EAAA/sB,gBACAmmC,EAAApZ,EAAA5B,QAEIib,EAAAF,EAAAE,UACArtC,EAAAhC,EAAAgC,WAER,OAAOvR,KAAKgH,eAAetB,KAAK,gBAAiB,CAC7ClD,QAAS,CACLoG,OAAQ,YACRg9B,eAAgB,qCAEpBrjC,KAAM,CACF2gC,aAAcqC,EAAYtlC,KAC1B26B,MAAO2K,EAAY3K,MACnBuI,SAAU,wBACV9vB,OAAQ,wBACR+vB,YAAa7xB,EACbstC,iBAAkB7+C,KAAK8+C,oBAAoBH,GAC3Clb,gBAAiBzjC,KAAK++C,YAAYH,EAAWl/B,GAC7C2jB,iBAAkBrjC,KAAK++C,YAAYH,EAAWpmC,OAKlDslC,EAAA5+C,UAAAs/C,uBAAR,SAA+BpkC,GAC3B,OAAKA,EAIE,CACHiY,UAAWjY,EAAQiY,UACnBC,SAAUlY,EAAQkY,SAClB0sB,YAAa5kC,EAAQyY,MACrBosB,cAAe7kC,EAAQoY,SACvB0sB,gBAAiB9kC,EAAQqY,SACzB0sB,SAAU/kC,EAAQsY,KAClByqB,OAAQ/iC,EAAQmjB,oBAChBxM,YAAa3W,EAAQ2W,YACrB6B,WAAYxY,EAAQwY,YAZb,IAgBPkrB,EAAA5+C,UAAA6/C,YAAR,SAAoBlb,EAAezpB,GAC/B,YAD+B,IAAAA,MAAA,IACxB,CACHypB,MAAKA,EACLC,WAAY1pB,EAAQiY,UACpB0R,UAAW3pB,EAAQkY,SACnB0R,aAAc5pB,EAAQ4kC,YACtB/a,eAAgB7pB,EAAQ6kC,cACxB9a,eAAgB/pB,EAAQ8kC,gBACxBxsB,KAAMtY,EAAQ+kC,SACdhnC,MAAOiC,EAAQ+iC,OACf9Y,aAAcjqB,EAAQ2W,YACtBuT,YAAalqB,EAAQwY,aAIrBkrB,EAAA5+C,UAAA4/C,oBAAR,SAA4BH,GACxB,MAAO,CACH1+C,KAAM0+C,EAAgB5K,SACtBqL,OAAQT,EAAgB1K,UAGpC6J,EAnHA,GCNe,SAAAuB,EACX/W,EACAP,GAEA,IAAMuX,EAAwB,IAAItW,EAAA,EAAsBV,GAClDiX,EAAsB,IAAIxW,EAAA,EAAoBuW,GAEpD,OAAO,IAAIE,EAAsCD,EAAqBxX,iBCR1E,WACI,SAAA0X,EACY3wC,EACAC,QAAA,IAAAA,MAAAnJ,QADA5F,KAAA8O,gBACA9O,KAAA+O,UAchB,OAXI0wC,EAAAvgD,UAAA+mC,KAAA,SAAK1E,GAAL,IAAAxhC,EAAAC,KACI,OAAOA,KAAK8O,cACPG,WAAW,MAAKsyB,EAAW,WAAa,IAAE,sFAC1C/5B,KAAK,WACF,IAAKzH,EAAKgP,QAAQ2wC,EACd,MAAM,IAAI7U,EAAA,EAGd,OAAO9qC,EAAKgP,QAAQ2wC,KAGpCD,EAjBA,KCDA,WACI,SAAAE,EACY7wC,EACDC,QAAA,IAAAA,MAAAnJ,QADC5F,KAAA8O,gBACD9O,KAAA+O,UAcf,OAXI4wC,EAAAzgD,UAAA+mC,KAAA,SAAK1E,GAAL,IAAAxhC,EAAAC,KACI,OAAOA,KAAK8O,cACPG,WAAW,SAAQsyB,EAAW,MAAQ,IAAE,gGACxC/5B,KAAK,WACF,IAAKzH,EAAKgP,QAAQ6wC,KACd,MAAM,IAAI/U,EAAA,EAGd,OAAO9qC,EAAKgP,QAAQ6wC,QAGpCD,EAjBA,yCCEA,WACI,SAAAE,EACY74C,GAAAhH,KAAAgH,iBA4ChB,OAzCI64C,EAAA3gD,UAAA4gD,kBAAA,SAAkBC,EAAoBlmC,EAAkCjX,OAAE+F,QAAA,IAAA/F,EAAA,GAAAA,GAAA+F,QAChEI,EAAM,oBAAoBg3C,EAAU,WAE1C,OAAO//C,KAAKgH,eAAe7I,IAAI4K,EAAK,CAAE8Q,OAAMA,EAAElR,QAAOA,KAGzDk3C,EAAA3gD,UAAA8gD,mBAAA,SAAmBD,EAAoBlmC,EAAkCjX,OAAE+F,QAAA,IAAA/F,EAAA,GAAAA,GAAA+F,QACjEI,EAAM,oBAAoBg3C,EAAU,YAE1C,OAAO//C,KAAKgH,eAAe7I,IAAI4K,EAAK,CAAE8Q,OAAMA,EAAElR,QAAOA,KAGzDk3C,EAAA3gD,UAAA+gD,kBAAA,SAAkBF,EAAoBlmC,EAAmCjX,OAAE+F,QAAA,IAAA/F,EAAA,GAAAA,GAAA+F,QACjEI,EAAM,oBAAoBg3C,EAAU,WAE1C,OAAO//C,KAAKgH,eAAe7I,IAAI4K,EAAK,CAAE8Q,OAAMA,EAAElR,QAAOA,KAGzDk3C,EAAA3gD,UAAAghD,aAAA,SAAaH,EAAoBn9C,OAAE+F,QAAA,IAAA/F,EAAA,GAAAA,GAAA+F,QACzBI,EAAM,oBAAoBg3C,EAAU,YAE1C,OAAO//C,KAAKgH,eAAe7I,IAAI4K,EAAK,CAAEJ,QAAOA,KAGjDk3C,EAAA3gD,UAAA49C,QAAA,SAAQiD,EAAoBn9C,OAAE+F,QAAA,IAAA/F,EAAA,GAAAA,GAAA+F,QACpBI,EAAM,oBAAoBg3C,EAAU,WAE1C,OAAO//C,KAAKgH,eAAe7I,IAAI4K,EAAK,CAAEJ,QAAOA,KAGjDk3C,EAAA3gD,UAAAihD,cAAA,SAAcv9C,OAAE+F,QAAA,IAAA/F,EAAA,GAAAA,GAAA+F,QAGZ,OAAO3I,KAAKgH,eAAe7I,IAFf,yBAEwB,CAAEwK,QAAOA,KAGjDk3C,EAAA3gD,UAAAkhD,wBAAA,SAAwBx9C,OAAE+F,QAAA,IAAA/F,EAAA,GAAAA,GAAA+F,QAGtB,OAAO3I,KAAKgH,eAAetB,KAFf,oFAEyB,CAAEiD,QAAOA,KAEtDk3C,EA9CA,aCMA,WACI,SAAAQ,EACYC,GAAAtgD,KAAAsgD,+BAiFhB,OA9EID,EAAAnhD,UAAA4gD,kBAAA,SAAkB53C,EAAkB2R,EAAkC7V,GAAtE,IAAAjE,EAAAC,KACI,OAAOsV,EAAA,WAAW1W,OAAO,SAACuI,GACtBA,EAASC,KAAKpJ,OAAA+gB,EAAA,aAAA/gB,CAAa6uB,EAAA,EAAyB0zB,sCAAkCn4C,EAAW,CAAEF,SAAQA,KAE3GnI,EAAKugD,6BAA6BR,kBAAkB53C,EAAU2R,EAAQ7V,GACjEwD,KAAK,SAAC5E,OAAEC,EAAAD,EAAAL,YAAA,IAAAM,EAAA,GAAAA,EACLsE,EAASC,KAAKpJ,OAAA+gB,EAAA,aAAA/gB,CAAa6uB,EAAA,EAAyBC,iCAAkCvqB,EAAM,CAAE2F,SAAQA,KACtGf,EAASU,aAEZC,MAAM,SAAAnF,GACHwE,EAASY,MAAM/J,OAAA+gB,EAAA,kBAAA/gB,CAAkB6uB,EAAA,EAAyB2zB,8BAA+B79C,EAAU,CAAEuF,SAAQA,UAK7Hm4C,EAAAnhD,UAAA8gD,mBAAA,SAAmB93C,EAAkB2R,EAAkC7V,GAAvE,IAAAjE,EAAAC,KACI,OAAOsV,EAAA,WAAW1W,OAAO,SAACuI,GACtBA,EAASC,KAAKpJ,OAAA+gB,EAAA,aAAA/gB,CAAa6uB,EAAA,EAAyB4zB,uCAAmCr4C,EAAW,CAAEF,SAAQA,KAE5GnI,EAAKugD,6BAA6BN,mBAAmB93C,EAAU2R,EAAQ7V,GAClEwD,KAAK,SAAC5E,OAAEC,EAAAD,EAAAL,YAAA,IAAAM,EAAA,GAAAA,EACLsE,EAASC,KAAKpJ,OAAA+gB,EAAA,aAAA/gB,CAAa6uB,EAAA,EAAyBG,kCAAmCzqB,EAAM,CAAE2F,SAAQA,KACvGf,EAASU,aAEZC,MAAM,SAAAnF,GACHwE,EAASY,MAAM/J,OAAA+gB,EAAA,kBAAA/gB,CAAkB6uB,EAAA,EAAyB6zB,+BAAgC/9C,EAAU,CAAEuF,SAAQA,UAK9Hm4C,EAAAnhD,UAAA+gD,kBAAA,SAAkB/3C,EAAkB2R,EAAmC7V,GAAvE,IAAAjE,EAAAC,KACI,OAAOsV,EAAA,WAAW1W,OAAO,SAACuI,GACtBA,EAASC,KAAKpJ,OAAA+gB,EAAA,aAAA/gB,CAAa6uB,EAAA,EAAyB8zB,sCAAkCv4C,EAAW,CAAEF,SAAQA,KAE3GnI,EAAKugD,6BAA6BL,kBAAkB/3C,EAAU2R,EAAQ7V,GACjEwD,KAAK,SAAC5E,OAAEC,EAAAD,EAAAL,YAAA,IAAAM,EAAA,GAAAA,EACLsE,EAASC,KAAKpJ,OAAA+gB,EAAA,aAAA/gB,CAAa6uB,EAAA,EAAyB+zB,iCAAkCr+C,EAAM,CAAE2F,SAAQA,KACtGf,EAASU,aAEZC,MAAM,SAAAnF,GACHwE,EAASY,MAAM/J,OAAA+gB,EAAA,kBAAA/gB,CAAkB6uB,EAAA,EAAyBg0B,8BAA+Bl+C,EAAU,CAAEuF,SAAQA,UAK7Hm4C,EAAAnhD,UAAAghD,aAAA,SAAah4C,EAAkBlE,GAA/B,IAAAjE,EAAAC,KACI,OAAOsV,EAAA,WAAW1W,OAAO,SAACuI,GACtBA,EAASC,KAAKpJ,OAAA+gB,EAAA,aAAA/gB,CAAa6uB,EAAA,EAAyBi0B,iCAA6B14C,EAAW,CAAEF,SAAQA,KAEtGnI,EAAKugD,6BAA6BJ,aAAah4C,EAAUlE,GACpDwD,KAAK,SAAC5E,OAAEL,EAAAK,EAAAL,KACL4E,EAASC,KAAKpJ,OAAA+gB,EAAA,aAAA/gB,CAAa6uB,EAAA,EAAyBK,4BAA6B3qB,EAAM,CAAE2F,SAAQA,KACjGf,EAASU,aAEZC,MAAM,SAAAnF,GACHwE,EAASY,MAAM/J,OAAA+gB,EAAA,kBAAA/gB,CAAkB6uB,EAAA,EAAyBk0B,yBAA0Bp+C,EAAU,CAAEuF,SAAQA,UAKxHm4C,EAAAnhD,UAAA49C,QAAA,SAAQ50C,EAAkBlE,GAA1B,IAAAjE,EAAAC,KACI,OAAOsV,EAAA,WAAW1W,OAAO,SAACuI,GACtBA,EAASC,KAAKpJ,OAAA+gB,EAAA,aAAA/gB,CAAa6uB,EAAA,EAAyBm0B,oCAAgC54C,EAAW,CAAEF,SAAQA,KAEzGnI,EAAKugD,6BAA6BxD,QAAQ50C,EAAUlE,GAC/CwD,KAAK,WACFL,EAASC,KAAKpJ,OAAA+gB,EAAA,aAAA/gB,CAAa6uB,EAAA,EAAyBo0B,oCAAgC74C,EAAW,CAAEF,SAAQA,KACzGf,EAASU,aAEZC,MAAM,SAAAnF,GACHwE,EAASY,MAAM/J,OAAA+gB,EAAA,kBAAA/gB,CAAkB6uB,EAAA,EAAyBq0B,4BAA6Bv+C,EAAU,CAAEuF,SAAQA,UAK3Hm4C,EAAAnhD,UAAAqY,eAAA,SAAwDrP,EAAaoC,GACjE,OAAOtM,OAAA+gB,EAAA,aAAA/gB,CAAa6uB,EAAA,EAAyBM,qBAAsB7iB,EAAM,CAAEpC,SAAQA,KAE3Fm4C,EAnFA,iCCDA,WACI,SAAAc,EACYC,EACA/gB,GADArgC,KAAAohD,yBACAphD,KAAAqgC,yBAqChB,OAlCI8gB,EAAAjiD,UAAAmiD,eAAA,SACInP,EACAluC,GAFJ,IAAAjE,EAAAC,KAII,OAAO,SAAAyV,GAAS,OAAAzX,OAAAsX,EAAA,OAAAtX,CACZA,OAAAsX,EAAA,GAAAtX,CAAGA,OAAA+gB,EAAA,aAAA/gB,CAAa6vB,GAAA,EAAmByzB,0BACnCtjD,OAAAsX,EAAA,KAAAtX,CAAK+B,EAAKqhD,uBAAuBC,eAAenP,EAAaluC,IACxDuR,KACGvX,OAAAwX,GAAA,UAAAxX,CAAU,SAAC4E,OAAEL,EAAAK,EAAAL,KAAW,OAAAvE,OAAAsX,EAAA,OAAAtX,CACpB+B,EAAKsgC,uBAAuBvoB,oBAAoB9T,EAAhDjE,CAAyD0V,GACzDzX,OAAAsX,EAAA,GAAAtX,CAAGA,OAAA+gB,EAAA,aAAA/gB,CAAa6vB,GAAA,EAAmB0zB,wBAAyBh/C,EAAK+H,YAG/EiL,KACEvX,OAAAwX,GAAA,WAAAxX,CAAW,SAAA+J,GAAS,OAAA/J,OAAAkiC,GAAA,EAAAliC,CAAiB6vB,GAAA,EAAmB2zB,qBAAsBz5C,QAItFo5C,EAAAjiD,UAAAuiD,gBAAA,SACIz9C,GADJ,IAAAjE,EAAAC,KAGI,OAAO,SAAAyV,GAAS,OAAAzX,OAAAsX,EAAA,OAAAtX,CACZA,OAAAsX,EAAA,GAAAtX,CAAGA,OAAA+gB,EAAA,aAAA/gB,CAAa6vB,GAAA,EAAmB6zB,2BACnC1jD,OAAAsX,EAAA,KAAAtX,CAAK+B,EAAKqhD,uBAAuBK,gBAAgBz9C,IAC5CuR,KACGvX,OAAAwX,GAAA,UAAAxX,CAAU,SAAC4E,OAAEL,EAAAK,EAAAL,KAAW,OAAAvE,OAAAsX,EAAA,OAAAtX,CACpB+B,EAAKsgC,uBAAuBvoB,oBAAoB9T,EAAhDjE,CAAyD0V,GACzDzX,OAAAsX,EAAA,GAAAtX,CAAGA,OAAA+gB,EAAA,aAAA/gB,CAAa6vB,GAAA,EAAmBC,yBAA0BvrB,EAAK+H,YAGhFiL,KACEvX,OAAAwX,GAAA,WAAAxX,CAAW,SAAA+J,GAAS,OAAA/J,OAAAkiC,GAAA,EAAAliC,CAAiB6vB,GAAA,EAAmB8zB,sBAAuB55C,QAG3Fo5C,EAxCA,MCLA,WACI,SAAAS,EACY56C,GAAAhH,KAAAgH,iBAchB,OAXI46C,EAAA1iD,UAAAmiD,eAAA,SAAenP,EAAkCtvC,OAAE+F,QAAA,IAAA/F,EAAA,GAAAA,GAAA+F,QAG/C,OAAO3I,KAAKgH,eAAetB,KAFf,oCAEyB,CAAEiD,QAAOA,EAAEpG,KAAM2vC,KAG1D0P,EAAA1iD,UAAAuiD,gBAAA,SAAgB7+C,OAAE+F,QAAA,IAAA/F,EAAA,GAAAA,GAAA+F,QAGd,OAAO3I,KAAKgH,eAAeuH,OAFf,oCAE2B,CAAE5F,QAAOA,KAExDi5C,EAhBA,eCLA,SAAA/hD,GACI,SAAAgiD,EAAYxgD,GAAZ,IAAAtB,EACIF,EAAApC,KAAAuC,KAAMqB,GAAW,qBAAmBrB,YAEpCD,EAAKlC,KAAO,sBACZkC,EAAKE,KAAO,oBAEpB,OAPiD2B,EAAA,UAAAigD,EAAAhiD,GAOjDgiD,EAPA,CAAiDhX,EAAA,eCQjD,WAII,SAAAiX,EACYljB,EACAqB,EACA8hB,EACAzB,EACAxxC,GAJA9O,KAAA4+B,SACA5+B,KAAAigC,8BACAjgC,KAAA+hD,+BACA/hD,KAAAsgD,+BACAtgD,KAAA8O,gBAER9O,KAAK+O,QAAUnJ,OAqGvB,OAlGIk8C,EAAA5iD,UAAAiR,WAAA,SAAWnM,GAAX,IAAAjE,EAAAC,KACYgiD,EAAAh+C,EAAAu5C,OAAuBr1C,EAAAlE,EAAAkE,SAE/B,IAAK85C,IAAkB95C,EACnB,MAAM,IAAIs3B,GAAA,EAAqB,wEAGnC,OAAOx/B,KAAK4+B,OAAOgB,SAAS5/B,KAAKigC,4BAA4Bh4B,kBAAkBC,IAC1EV,KAAK,SAAA2Q,GAAS,WAAItH,QAAQ,SAACY,EAAS27B,GAGjC,GAFArtC,EAAK8gC,eAAiB1oB,EAAMggB,eAAeE,iBAAiBnwB,IAEvDnI,EAAK8gC,eACN,MAAM,IAAIC,EAAA,EAAiBA,EAAA,EAAqBngC,sBAG5C,IAAAiC,EAAAo/C,EAAA5f,eAAA,IAAAx/B,EAAA,aAAAA,EAaR7C,EAAK+O,cAAcmuC,WAAWl9C,EAAK8gC,eAZnB,WACZ9gC,EAAK8kC,oBAAoBjjC,EAAA,YAClBogD,EAAa,CAChB5f,QAAS,SAAAr6B,GACLqlC,EAAOrlC,GACPq6B,EAAQr6B,OAIhB0J,MAIC3J,MAAMslC,OAEd5lC,KAAK,WAAM,OAAAzH,EAAK6+B,OAAO1nB,cAGhC4qC,EAAA5iD,UAAA4gC,aAAA,WAGI,OAFA9/B,KAAK6gC,oBAAiBz4B,EAEfyI,QAAQY,QAAQzR,KAAK4+B,OAAO1nB,aAGvC4qC,EAAA5iD,UAAA29C,OAAA,WACI,MAAM,IAAIoF,GACN,6FAIRH,EAAA5iD,UAAA49C,QAAA,SAAQ94C,GACJ,IACMwkB,EADQxoB,KAAK4+B,OAAO1nB,WACJsR,QAAQ6M,eAE9B,OAAK7M,EAIExoB,KAAK4+B,OAAOgB,SACf5/B,KAAK+hD,6BAA6BjF,QAAQt0B,EAAQ6R,WAAYr2B,IAJvD6M,QAAQY,QAAQzR,KAAK4+B,OAAO1nB,aAQnC4qC,EAAA5iD,UAAA2lC,oBAAR,SAA4B7gC,GAA5B,IAAAjE,EAAAC,KACI,IAAKA,KAAK6gC,iBAAmB7gC,KAAK+O,QAAQ6uC,kBACtC,MAAM,IAAItb,GAAA,EAAoBA,GAAA,EAAwBvvB,wBAG1D,IAAK/S,KAAK6gC,eAAe1pB,OAAO6vB,WAC5B,MAAM,IAAIlG,EAAA,EAAiBA,EAAA,EAAqBngC,sBAG5C,IAAAqlC,EAAAhmC,KAAA6gC,eAAAmF,mBAER,OAAO,IAAIhmC,KAAK+O,QAAQ6uC,kBAAkBxc,OAAOp9B,EAAQy7B,UAAWz/B,KAAK6gC,eAAe1pB,OAAO6vB,WAAY,CACvG4G,MAAO5pC,EAAQ4pC,OAAS,OACxBD,KAAM3pC,EAAQ2pC,MAAQ,QACtB1tC,KAAM,MACNiiD,sBAAsB,EACtB9f,QAASp+B,EAAQo+B,QACjB1xB,cAAe,WACX3Q,EAAKoiD,qBAAqBnc,OAK9B8b,EAAA5iD,UAAAijD,qBAAR,SAA6Bn+C,GAA7B,IAAAjE,EAAAC,KACIA,KAAKsgD,6BAA6BH,gBAC7B34C,KAAK,SAAC5E,OAAEL,EAAAK,EAAAL,KACL,IAAKxC,EAAKgP,QAAQwuC,OACd,MAAM,IAAIjb,GAAA,EAAoBA,GAAA,EAAwBtvB,wBAG1DjT,EAAKgP,QAAQwuC,OAAOC,MAAM4E,UAAU,CAChCC,OAAO,EACPC,MAAO,6EACPnqC,MAAO,GAAGnU,EAAQu+C,YAAchgD,EAAKgmB,OACtCvkB,EAAQ02B,aAEX36B,EAAKugD,6BAA6BF,6BAGlD0B,EAhHA,MCAA,WAII,SAAAU,EACY5jB,EACAyB,EACAJ,EACAwiB,EACAV,EACAW,EACAC,GANA3iD,KAAA4+B,SACA5+B,KAAAqgC,yBACArgC,KAAAigC,8BACAjgC,KAAAyiD,iCACAziD,KAAA+hD,+BACA/hD,KAAA0iD,yCACA1iD,KAAA2iD,4BATJ3iD,KAAA4iD,iBAA2B,wBA6IvC,OAjIIJ,EAAAtjD,UAAAiR,WAAA,SAAWnM,GAAX,IAAAjE,EAAAC,KACY6iD,EAAA7+C,EAAA8+C,sBAA4C56C,EAAAlE,EAAAkE,SAEpD,IAAK26C,IAAwB36C,EACzB,MAAM,IAAIs3B,GAAA,EAAqB,uFAGnC,OAAOx/B,KAAK4+B,OAAOgB,SAAS5/B,KAAKigC,4BAA4Bh4B,kBAAkBC,IAC1EV,KAAK,SAAA2Q,GACFpY,EAAK8gC,eAAiB1oB,EAAMggB,eAAeE,iBAAiBnwB,GAE5D,IAAMsP,EAAWW,EAAMX,SAASC,cAC1BwZ,EAAc9Y,EAAMhB,OAAO+e,iBAEjC,IAAK1e,EACD,MAAM,IAAIspB,EAAA,EAAiBA,EAAA,EAAqBzgC,iBAGpD,IAAK4wB,EACD,MAAM,IAAI6P,EAAA,EAAiBA,EAAA,EAAqBxgC,uBAGpD,IAAKP,EAAK8gC,iBAAmB9gC,EAAK8gC,eAAezwB,YAC7C,MAAM,IAAI0wB,EAAA,EAAiBA,EAAA,EAAqBngC,sBAIhD,IAAA8+B,EAAAojB,EAAApjB,UACA78B,EAAAigD,EAAAzgB,eAAA,IAAAx/B,EAAA,aAAAA,EAGEmgD,EAAc,CAChB9E,OAAQhtB,EAAY+xB,aAAaC,cACjC/E,iBAAiB,EACjBhG,SAAU1gC,EAAS0gC,SACnBvD,aAAc1jB,EAAY6R,SAASxxB,MAGvC,OAAOT,QAAQC,IAAI,CACf/Q,EAAK4iD,0BAA0B1c,KAAKlmC,EAAK8gC,eAAe1pB,OAAOoqB,UAC/DxhC,EAAK2iD,uCAAuCvyC,WAAWpQ,EAAK8gC,eAAezwB,YAAa2yC,KAE3Fv7C,KAAK,SAAC5E,OAACiN,EAAAjN,EAAA,GAAcmgD,EAAAngD,EAAA,GACZsgD,EAAenjD,EAAK8kC,oBAAoBpF,EAAW1/B,EAAK6iD,kBAS9D,OAPA/yC,EAAaszC,KAAKJ,GAClBlzC,EAAauzC,GAAG,kBAAmB,SAACC,GAChC,OAAAtjD,EAAKujD,2BAA2BD,GAC3Bv7C,MAAM,SAAAC,GAAS,OAAAq6B,EAAQr6B,OAEhC8H,EAAauzC,GAAG,gBAAiB,SAAC1uC,EAAG3M,GAAU,OAAAq6B,EAAQr6B,KAEhDm7C,IAEV17C,KAAK,SAAA07C,GAAkBA,EAAarhB,MAAM0L,WAAa,cAE3D/lC,KAAK,WAAM,OAAAzH,EAAK6+B,OAAO1nB,cAGhCsrC,EAAAtjD,UAAA29C,OAAA,WACI,MAAM,IAAIoF,GACN,4FAIRO,EAAAtjD,UAAA49C,QAAA,SAAQ94C,GACJ,OAAOhE,KAAK4+B,OAAOgB,SACf5/B,KAAK+hD,6BAA6BjF,QAAQ,wBAAyB94C,KAI3Ew+C,EAAAtjD,UAAA4gC,aAAA,eAAA//B,EAAAC,KAGI,OAFAA,KAAK6gC,oBAAiBz4B,EAEfpI,KAAK0iD,uCAAuC5iB,eAC9Ct4B,KAAK,WAAM,OAAAzH,EAAK6+B,OAAO1nB,cAGxBsrC,EAAAtjD,UAAAokD,2BAAR,SAAmCD,GAAnC,IAAAtjD,EAAAC,KACUmY,EAAQnY,KAAK4+B,OAAO1nB,WAE1B,IAAKlX,KAAK6gC,eACN,MAAM,IAAIp/B,MAAM,kCAGZ,IAAAyG,EAAAlI,KAAA6gC,eAAA51B,GAER,OAAOjL,KAAK4+B,OAAOgB,SACf5/B,KAAKyiD,+BAA+B1F,kBAAkB,WAClD,OAAOh9C,EAAK2iD,uCAAuCld,cAC/C6d,EACAlrC,EAAMK,gBAAgByc,qBACtB9c,EAAMuH,eAAe4U,qBAExB9sB,KAAK,WAAM,OAAAzH,EAAK6+B,OAAOgB,SAAS7/B,EAAKsgC,uBAAuBvoB,0BAClE,CAAE5P,SAAQA,IAAK,CAAEy3B,QAAS,uBAGzB6iB,EAAAtjD,UAAA2lC,oBAAR,SAA4BviB,EAAqBihC,GAC7C,IAAM9jB,EAAYzrB,SAASwvC,cAAc,IAAIlhC,GAE7C,IAAKmd,EACD,MAAM,IAAIh+B,MAAM,wCAGpB,OAAQg+B,EAAU+jB,cAAc,IAAMD,IAClCvjD,KAAKyjD,0BAA0BhkB,EAAW8jB,IAG1Cf,EAAAtjD,UAAAukD,0BAAR,SAAkChkB,EAAoB8jB,GAClD,IAUMG,EAAqB1vC,SAASC,cAAc,OAOlD,OANAyvC,EAAmB7hB,MAAM0L,WAAa,SACtCmW,EAAmBC,UAAYJ,EAC/BG,EAAmBE,UAZI,ucAcvBnkB,EAAU2F,YAAYse,GAEfA,GAEflB,EA/IA,MCCA,WAGI,SAAAqB,EACYjlB,EACAqB,EACA8hB,EACA+B,EACA98C,EACAw5B,GALAxgC,KAAA4+B,SACA5+B,KAAAigC,8BACAjgC,KAAA+hD,+BACA/hD,KAAA8jD,wBACA9jD,KAAAgH,iBACAhH,KAAAwgC,cA8HhB,OA3HIqjB,EAAA3kD,UAAAiR,WAAA,SAAWnM,GAAX,IAAAjE,EAAAC,KACY+jD,EAAA//C,EAAAggD,SAA2B97C,EAAAlE,EAAAkE,SAEnC,IAAK67C,IAAoB77C,EACrB,MAAM,IAAIs3B,GAAA,EAAqB,0EAGnC,OAAOx/B,KAAK4+B,OAAOgB,SAAS5/B,KAAKigC,4BAA4Bh4B,kBAAkBC,IAC1EV,KAAK,SAAA2Q,GACFpY,EAAK8gC,eAAiB1oB,EAAMggB,eAAeE,iBAAiBnwB,GAE5D,IAAMyQ,EAAOR,EAAMQ,KAAKC,UAClBqY,EAAc9Y,EAAMhB,OAAO+e,iBAEjC,IAAKvd,EACD,MAAM,IAAImoB,EAAA,EAAiBA,EAAA,EAAqB3gC,aAGpD,IAAK8wB,EACD,MAAM,IAAI6P,EAAA,EAAiBA,EAAA,EAAqBxgC,uBAGpD,IAAKP,EAAK8gC,iBAAmB9gC,EAAK8gC,eAAemF,mBAAmBie,iBAChE,MAAM,IAAI3hB,GAAA,EAAoBA,GAAA,EAAwB9xB,uBAGlD,IAAAivB,EAAAskB,EAAAtkB,UAER,OAAO1/B,EAAK+jD,sBAAsB7d,KAAKlmC,EAAK8gC,eAAe1pB,OAAOoqB,UAC7D/5B,KAAK,SAAAo4C,GACF,IAAMsE,EAAWtE,EAAKsE,SAEtBA,EAASC,UAAU,CACfC,SAAUnzB,EAAY+xB,aAAaC,gBAGnCiB,EAASG,cACTH,EAASI,cAAc,CACnBhlB,WAAY,CAACG,KAIrBykB,EAASd,GAAGc,EAASK,UAAUC,eAAgB,WAC3CzkD,EAAK6+B,OAAOgB,SAAS7/B,EAAKkgC,4BAA4Bh4B,kBAAkBC,IACnEV,KAAK,WACF,IACMuN,EADQhV,EAAK6+B,OAAO1nB,WACLihB,eAAeE,iBAAiBnwB,GAC/Cu8C,EAAY1vC,GAAUA,EAAOixB,oBAAsBjxB,EAAOixB,mBAAmBie,iBAE/EQ,GACAP,EAASQ,cAAcD,OAKvCP,EAASd,GAAGc,EAASK,UAAUI,kBAAmB,SAACrxC,GAC/C,IACMyB,EADQhV,EAAK6+B,OAAO1nB,WACLihB,eAAeE,iBAAiBnwB,GAC/C08C,EAAY7vC,GAAUA,EAAOixB,oBAAsBjxB,EAAOixB,mBAAmB6e,kBAE/ED,GACA7kD,EAAK+kD,yBAAyBxxC,EAASsxC,GAClCp9C,KAAK,WACFzH,EAAKglD,sBAMhCv9C,KAAK,WAAM,OAAAzH,EAAK6+B,OAAO1nB,cAGhC2sC,EAAA3kD,UAAA4gC,aAAA,WACI,OAAOjvB,QAAQY,QAAQzR,KAAK4+B,OAAO1nB,aAGvC2sC,EAAA3kD,UAAA29C,OAAA,WACI,MAAM,IAAIoF,GACN,uFAIR4B,EAAA3kD,UAAA49C,QAAA,SAAQ94C,GACJ,IACMwkB,EADQxoB,KAAK4+B,OAAO1nB,WACJsR,QAAQ6M,eAE9B,OAAK7M,EAIExoB,KAAK4+B,OAAOgB,SACf5/B,KAAK+hD,6BAA6BjF,QAAQt0B,EAAQ6R,WAAYr2B,IAJvD6M,QAAQY,QAAQzR,KAAK4+B,OAAO1nB,aAQnC2sC,EAAA3kD,UAAA4lD,yBAAR,SAAiCxxC,EAAiCsxC,GAC9D,IACM5gD,EAAU,CACZxB,QAAS,CACLoG,OAAQ,YACRg9B,eAAgB,oDAEpBrjC,KAAM,CACFyiD,aAAc1xC,EAAQ0xC,aACtBH,kBAAmBD,GAEvB7vC,OAAQ,QAGZ,OAAO/U,KAAKgH,eAAei+C,YAbf,8DAagCjhD,IAGxC6/C,EAAA3kD,UAAA6lD,YAAR,WACI/kD,KAAKwgC,YAAYyC,SAAS,gBAAiB,CACvCzgC,QAAS,CACLoG,OAAQ,YACRg9B,eAAgB,qCAEpB/rB,OAAQ,CACJqrC,cAAc,MAI9BrB,EAvIA,MCLA,WACI,SAAAsB,EACYvmB,EACAwmB,GADAplD,KAAA4+B,SACA5+B,KAAAolD,yBAsBhB,OAnBID,EAAAjmD,UAAA29C,OAAA,SAAO3K,EAAkCluC,GACrC,OAAOhE,KAAK4+B,OAAOgB,SACf5/B,KAAKolD,uBAAuB/D,eAAenP,EAAaluC,KAIhEmhD,EAAAjmD,UAAA49C,QAAA,SAAQ94C,GACJ,OAAOhE,KAAK4+B,OAAOgB,SACf5/B,KAAKolD,uBAAuB3D,gBAAgBz9C,KAIpDmhD,EAAAjmD,UAAAiR,WAAA,WACI,OAAOU,QAAQY,QAAQzR,KAAK4+B,OAAO1nB,aAGvCiuC,EAAAjmD,UAAA4gC,aAAA,WACI,OAAOjvB,QAAQY,QAAQzR,KAAK4+B,OAAO1nB,aAE3CiuC,EAzBA,YCMqBE,GAArB,WAGI,SAAAC,EACY1mB,EACAmjB,EACAtd,EACAjE,GAHAxgC,KAAA4+B,SACA5+B,KAAA+hD,+BACA/hD,KAAAykC,6BACAzkC,KAAAwgC,cAuGhB,OApGI8kB,EAAApmD,UAAAiR,WAAA,SAAWnM,GAAX,IAAAjE,EAAAC,KACYkI,EAAAlE,EAAAkE,SAEFq9C,EAAmBvlD,KAAKwlD,qBAAqBxhD,GAEnD,IAAKkE,EACD,MAAM,IAAI44B,EAAA,EAAiBA,EAAA,EAAqBngC,sBAGpD,OAAOX,KAAKykC,2BAA2Bt0B,WAAWjI,GAC7CV,KAAK,WACFzH,EAAK6kC,cAAgB7kC,EAAK8kC,oBAAoB0gB,EAAiB9lB,aAElEj4B,KAAK,WAAM,OAAAzH,EAAK6+B,OAAO1nB,cAGhCouC,EAAApmD,UAAA4gC,aAAA,eAAA//B,EAAAC,KAMI,OALIA,KAAK4kC,eAAiB5kC,KAAK4kC,cAAcE,aACzC9kC,KAAK4kC,cAAcE,WAAWC,YAAY/kC,KAAK4kC,eAC/C5kC,KAAK4kC,mBAAgBx8B,GAGlBpI,KAAKykC,2BAA2B3E,eAClCt4B,KAAK,WAAM,OAAAzH,EAAK6+B,OAAO1nB,cAGhCouC,EAAApmD,UAAA29C,OAAA,WACI,MAAM,IAAIoF,GACN,uFAIRqD,EAAApmD,UAAA49C,QAAA,SAAQ94C,GACJ,IACMwkB,EADQxoB,KAAK4+B,OAAO1nB,WACJsR,QAAQ6M,eAE9B,OAAK7M,EAIExoB,KAAK4+B,OAAOgB,SACf5/B,KAAK+hD,6BAA6BjF,QAAQt0B,EAAQ6R,WAAYr2B,IAJvD6M,QAAQY,QAAQzR,KAAK4+B,OAAO1nB,aAQnCouC,EAAApmD,UAAA2lC,oBAAR,SAA4BviB,GACxB,IAAMmd,EAAYzrB,SAASwvC,cAAc,IAAIlhC,GAE7C,IAAKmd,EACD,MAAM,IAAID,GAAA,EAAqB,+DAGnC,IAAM8G,EAAStmC,KAAKykC,2BAA2BS,aAAallC,KAAKmlC,0BAIjE,OAFA1F,EAAU2F,YAAYkB,GAEfA,GAGHgf,EAAApmD,UAAAsmD,qBAAR,SAA6BxhD,GACzB,GAAyB,uBAArBA,EAAQkE,UAAqClE,EAAQyhD,mBACrD,OAAOzhD,EAAQyhD,mBAGnB,GAAyB,oBAArBzhD,EAAQkE,UAAkClE,EAAQ0hD,gBAClD,OAAO1hD,EAAQ0hD,gBAGnB,MAAM,IAAIlmB,GAAA,GAGN8lB,EAAApmD,UAAAwmC,yBAAR,WACI1lC,KAAKwgC,YAAYyC,SAAS,gBAAiB,CACvCzgC,QAAS,CACLoG,OAAQ,YACRg9B,eAAgB,wCAKpB0f,EAAApmD,UAAAymC,SAAR,SAAiB59B,GACb,GAAIA,GAA2B,aAAlBA,EAAM1G,QACf,MAAM0G,GAKNu9C,EAAApmD,UAAAimC,yBAAR,SAAiCx/B,GADjC,IAAA5F,EAAAC,KAII,OAFA2F,EAAM0/B,iBAECrlC,KAAKykC,2BAA2Ba,gBAClC99B,KAAK,SAAA+9B,GAAe,OAAAxlC,EAAK0kC,2BAA2Be,cAAcD,GAClE/9B,KAAK,WACE+9B,EAAY/sB,iBACZzY,EAAK0kC,2BAA2BgB,sBAAsBF,EAAY/sB,qBAGzEhR,KAAK,WAAM,OAAAzH,EAAK2lC,6BAChB59B,MAAM,SAAAC,GAAS,OAAAhI,EAAK4lC,SAAS59B,MAXtCnG,EAAA,YADC+7B,GAAA,gDAcL2nB,EA9GA,eCCA,WAII,SAAAK,EACY/mB,EACAqB,EACA8hB,EACAhc,GAHA/lC,KAAA4+B,SACA5+B,KAAAigC,8BACAjgC,KAAA+hD,+BACA/hD,KAAA+lC,0BA4FhB,OAzFI4f,EAAAzmD,UAAAiR,WAAA,SAAWnM,GAAX,IAAAjE,EAAAC,KACY4lD,EAAA5hD,EAAAkiC,WAA+Bh+B,EAAAlE,EAAAkE,SAEvC,IAAK09C,IAAsB19C,EACvB,MAAM,IAAIs3B,GAAA,EAAqB,4EAGnC,OAAOx/B,KAAK4+B,OAAOgB,SAAS5/B,KAAKigC,4BAA4Bh4B,kBAAkBC,IAC1EV,KAAK,SAAA2Q,GAGF,GADApY,EAAK8gC,eAAiB1oB,EAAMggB,eAAeE,iBAAiBnwB,IACvDnI,EAAK8gC,iBAAmB9gC,EAAK8gC,eAAemF,mBAAmB3uB,WAChE,MAAM,IAAIypB,EAAA,EAAiBA,EAAA,EAAqBngC,sBAGpD,IAAMgY,EAAOR,EAAMQ,KAAKC,UACxB,IAAKD,EACD,MAAM,IAAImoB,EAAA,EAAiBA,EAAA,EAAqB3gC,aAG5C,IAAAs/B,EAAAmmB,EAAAnmB,UAEFnsB,EAAU,CACZ+D,WAAYtX,EAAK8gC,eAAemF,mBAAmB3uB,WACnDovB,iBAAkB1mC,EAAK8gC,eAAemF,mBAAmBS,iBACzDt7B,OAAQwN,EAAK+tB,WAAW/hC,WACxBm+B,SAAUnqB,EAAKmqB,SAASxxB,KACxBq1B,OAAQhuB,EAAK1N,GACb27B,yBAAyB,EACzBxe,YAAapqB,OAAA6oC,GAAA,EAAA7oC,CAAe,aAGhC,OAAO+B,EAAKgmC,wBAAwBE,KAAKlmC,EAAK8gC,eAAe1pB,OAAOoqB,UAC/D/5B,KAAK,SAAAq+C,GACF9lD,EAAKqmC,cAAgBrmC,EAAK8kC,oBAAoBpF,GAE9C1/B,EAAKqmC,cAAc58B,iBAAiB,QAAS,WACzCq8C,EAAWruC,SAASlE,SAInC9L,KAAK,WAAM,OAAAzH,EAAK6+B,OAAO1nB,cAGhCyuC,EAAAzmD,UAAA4gC,aAAA,WAQI,OAPA9/B,KAAK6gC,oBAAiBz4B,EAElBpI,KAAKomC,eAAiBpmC,KAAKomC,cAActB,aACzC9kC,KAAKomC,cAActB,WAAWC,YAAY/kC,KAAKomC,eAC/CpmC,KAAKomC,mBAAgBh+B,GAGlByI,QAAQY,QAAQzR,KAAK4+B,OAAO1nB,aAGvCyuC,EAAAzmD,UAAA29C,OAAA,WACI,MAAM,IAAIoF,GACN,uFAIR0D,EAAAzmD,UAAA49C,QAAA,SAAQ94C,GACJ,IACMwkB,EADQxoB,KAAK4+B,OAAO1nB,WACJsR,QAAQ6M,eAE9B,OAAK7M,EAIExoB,KAAK4+B,OAAOgB,SACf5/B,KAAK+hD,6BAA6BjF,QAAQt0B,EAAQ6R,WAAYr2B,IAJvD6M,QAAQY,QAAQzR,KAAK4+B,OAAO1nB,aAQnCyuC,EAAAzmD,UAAA2lC,oBAAR,SAA4BviB,GACxB,IAAMmd,EAAYzrB,SAASwvC,cAAc,IAAIlhC,GAE7C,IAAKmd,EACD,MAAM,IAAID,GAAA,EAAqB,+DAGnC,IAAM8G,EAAStyB,SAASC,cAAc,SAMtC,OAJAqyB,EAAOrmC,KAAO,QACdqmC,EAAOC,IAAM,4EACb9G,EAAU2F,YAAYkB,GAEfA,GAEfqf,EApGA,MCPA,WAEI,SAAAG,EACYlnB,EACAmjB,GADA/hD,KAAA4+B,SACA5+B,KAAA+hD,+BA6BhB,OA1BI+D,EAAA5mD,UAAA29C,OAAA,WACI,MAAM,IAAIoF,GACN,uFAIR6D,EAAA5mD,UAAA49C,QAAA,SAAQ94C,GACJ,IACMwkB,EADQxoB,KAAK4+B,OAAO1nB,WACJsR,QAAQ6M,eAE9B,OAAK7M,EAIExoB,KAAK4+B,OAAOgB,SACf5/B,KAAK+hD,6BAA6BjF,QAAQt0B,EAAQ6R,WAAYr2B,IAJvD6M,QAAQY,QAAQzR,KAAK4+B,OAAO1nB,aAQ3C4uC,EAAA5mD,UAAAiR,WAAA,WACI,OAAOU,QAAQY,QAAQzR,KAAK4+B,OAAO1nB,aAGvC4uC,EAAA5mD,UAAA4gC,aAAA,WACI,OAAOjvB,QAAQY,QAAQzR,KAAK4+B,OAAO1nB,aAE3C4uC,EAjCA,mBCGA,WACI,SAAAC,EACYC,GAAAhmD,KAAAgmD,wBAiBhB,OAdID,EAAA7mD,UAAA+mD,cAAA,SAAcjiD,GAAd,IAAAjE,EAAAC,KACI,OAAOsV,EAAA,WAAW1W,OAAO,SAACuI,GACtBA,EAASC,KAAKpJ,OAAA+gB,EAAA,aAAA/gB,CAAaupB,GAAA,EAAkBE,yBAE7C1nB,EAAKimD,sBAAsBC,cAAcjiD,GACpCwD,KAAK,SAAA7E,GACFwE,EAASC,KAAKpJ,OAAA+gB,EAAA,aAAA/gB,CAAaupB,GAAA,EAAkBC,uBAAwB7kB,EAASJ,KAAK+H,OACnFnD,EAASU,aAEZC,MAAM,SAAAnF,GACHwE,EAASY,MAAM/J,OAAA+gB,EAAA,kBAAA/gB,CAAkBupB,GAAA,EAAkBG,oBAAqB/kB,SAI5FojD,EAnBA,MCHA,WACI,SAAAG,EACYl/C,EACAm/C,GADAnmD,KAAAgH,iBACAhH,KAAAmmD,UAWhB,OARID,EAAAhnD,UAAA+mD,cAAA,SAAcrjD,OAAE+F,QAAA,IAAA/F,EAAA,GAAAA,GAAA+F,QAENnG,EAAU,CACZ4jD,kBAAmBpmD,KAAKmmD,QAAQlI,QAGpC,OAAOj+C,KAAKgH,eAAe7I,IALf,kCAKwB,CAAEqE,QAAOA,EAAEmG,QAAOA,KAE9Du9C,EAdA,MCGA,WACI,SAAAG,EACYr/C,GAAAhH,KAAAgH,iBAqChB,OAlCIq/C,EAAAnnD,UAAAonD,UAAA,SAAUp2B,EAAiBttB,OAAAC,OAAA,IAAAD,EAAA,GAAAA,EAAE+F,EAAA9F,EAAA8F,QAASkR,EAAAhX,EAAAgX,OAC5B9Q,EAAM,0BAA0BmnB,EAChC1tB,EAAU,CAAEoG,OAAQ0zB,EAAA,EAAYzzB,QAStC,OAAO7I,KAAKgH,eAAe7I,IAAI4K,EAAK,CAChC8Q,OAAQ,CACJC,QAAS9b,OAAAu+B,EAAA,EAAAv+B,CAVD,CACZ,WACA,sCACA,kCACA,qCACA,kCAMkB2I,OACNkT,GAAUA,EAAOC,SAAW,MAGxCtX,QAAOA,EACPmG,QAAOA,KAIf09C,EAAAnnD,UAAAqnD,YAAA,SAAYhkD,EAAgCK,OAAE+F,QAAA,IAAA/F,EAAA,GAAAA,GAAA+F,QAG1C,OAAO3I,KAAKgH,eAAetB,KAFf,iCAEyB,CAAEnD,KAAIA,EAAEoG,QAAOA,KAGxD09C,EAAAnnD,UAAAsnD,cAAA,SAAct2B,EAAiBttB,OAAE+F,QAAA,IAAA/F,EAAA,GAAAA,GAAA+F,QACvBI,EAAM,kCAAkCmnB,EAE9C,OAAOlwB,KAAKgH,eAAetB,KAAKqD,EAAK,CAAEJ,QAAOA,KAEtD09C,EAvCA,eCMA,WACI,SAAAI,EACYC,EACAC,EACAC,GAFA5mD,KAAA0mD,sBACA1mD,KAAA2mD,qBACA3mD,KAAA4mD,+BAiKhB,OA9JIH,EAAAvnD,UAAAonD,UAAA,SAAUp2B,EAAiBlsB,GAA3B,IAAAjE,EAAAC,KACI,OAAO,IAAIsV,EAAA,WAAW,SAACnO,GACnBA,EAASC,KAAKpJ,OAAA+gB,EAAA,aAAA/gB,CAAawhB,GAAA,EAAgBmJ,qBAE3C5oB,EAAK2mD,oBAAoBJ,UAAUp2B,EAASlsB,GACvCwD,KAAK,SAAA7E,GACFwE,EAASC,KAAKpJ,OAAA+gB,EAAA,aAAA/gB,CAAawhB,GAAA,EAAgBC,mBAAoB9c,EAASJ,OACxE4E,EAASU,aAEZC,MAAM,SAAAnF,GACHwE,EAASY,MAAM/J,OAAA+gB,EAAA,kBAAA/gB,CAAkBwhB,GAAA,EAAgBqJ,gBAAiBlmB,SAMlF8jD,EAAAvnD,UAAA2nD,kBAAA,SAAkB32B,EAAiBlsB,GAAnC,IAAAjE,EAAAC,KACI,OAAO,IAAIsV,EAAA,WAAW,SAACnO,GACnBA,EAASC,KAAKpJ,OAAA+gB,EAAA,aAAA/gB,CAAawhB,GAAA,EAAgBoJ,6BAE3C7oB,EAAK2mD,oBAAoBJ,UAAUp2B,EAASlsB,GACvCwD,KAAK,SAAA7E,GACFwE,EAASC,KAAKpJ,OAAA+gB,EAAA,aAAA/gB,CAAawhB,GAAA,EAAgByI,2BAA4BtlB,EAASJ,OAChF4E,EAASU,aAEZC,MAAM,SAAAnF,GACHwE,EAASY,MAAM/J,OAAA+gB,EAAA,kBAAA/gB,CAAkBwhB,GAAA,EAAgBsJ,wBAAyBnmB,SAK1F8jD,EAAAvnD,UAAA4nD,iBAAA,SAAiB9iD,GAAjB,IAAAjE,EAAAC,KACI,OAAO,SAAAyV,GAAS,OAAAzX,OAAAsX,EAAA,MAAAtX,CAAM,WAClB,IAAMkyB,EAAUnwB,EAAKgnD,mBAAmBtxC,EAAMyB,YAE9C,IAAKgZ,EACD,MAAM,IAAI4Q,EAAA,EAAiBA,EAAA,EAAqBrgC,gBAGpD,OAAOV,EAAKumD,UAAUp2B,EAASlsB,OAIvCyiD,EAAAvnD,UAAAqnD,YAAA,SAAYjzC,EAA2BtP,GAAvC,IAAAjE,EAAAC,KACI,OAAO,SAAAyV,GAAS,OAAAzX,OAAAsX,EAAA,OAAAtX,CACZA,OAAAsX,EAAA,GAAAtX,CAAGA,OAAA+gB,EAAA,aAAA/gB,CAAawhB,GAAA,EAAgBwnC,uBAChChpD,OAAAsX,EAAA,MAAAtX,CAAM,WACF,IAAMma,EAAQ1C,EAAMyB,WACdkf,EAAiBje,EAAMhB,OAAOgf,oBAC9B3e,EAAWW,EAAMX,SAASC,cAC1BsgC,EAAY5/B,EAAMkQ,MAAM4R,eACxBhJ,EAAc9Y,EAAMhB,OAAO+e,iBAC3B+wB,EAAsBlP,GAAaA,EAAUkP,oBAEnD,IAAKh2B,EACD,MAAM,IAAI6P,EAAA,EAAiBA,EAAA,EAAqBxgC,uBAGpD,IAAKkX,EACD,MAAM,IAAIspB,EAAA,EAAiBA,EAAA,EAAqBzgC,iBAKpD,GAFQ4wB,EAAAi2B,iBAAAC,0BAEwBF,EAC5B,MAAM,IAAInmB,EAAA,EAAiBA,EAAA,EAAqBjgC,4BAGpD,OAAO7C,OAAAsX,EAAA,KAAAtX,CACH+B,EAAK4mD,mBAAmBS,SAAS5vC,EAAUxT,GACtCwD,KAAK,WAAM,OAAAzH,EAAK2mD,oBAAoBH,YAAYxmD,EAAKsnD,uBAClD/zC,EACAkE,EAAS8vC,gBACTlxB,EACA6wB,GACDjjD,MACTuR,KACEvX,OAAAwX,GAAA,UAAAxX,CAAU,SAAA2E,GAAY,OAAA3E,OAAAsX,EAAA,OAAAtX,CAElB+B,EAAKumD,UAAU3jD,EAASJ,KAAK+H,KAAK+d,MAAM6H,QAASlsB,GACjDhG,OAAAsX,EAAA,GAAAtX,CAAGA,OAAA+gB,EAAA,aAAA/gB,CAAawhB,GAAA,EAAgB2I,qBAAsBxlB,EAASJ,KAAK+H,KAAM1I,EAAA,YAAKe,EAASJ,KAAKkF,KAAI,CAAE8gB,MAAO5lB,EAASH,QAAQ+lB,gBAGpIhT,KACCvX,OAAAwX,GAAA,WAAAxX,CAAW,SAAA+J,GAAS,OAAA/J,OAAAkiC,GAAA,EAAAliC,CAAiBwhB,GAAA,EAAgB+nC,kBAAmBx/C,SAKpF0+C,EAAAvnD,UAAAsnD,cAAA,SAAct2B,EAAiBlsB,GAA/B,IAAAjE,EAAAC,KACI,OAAOhC,OAAAsX,EAAA,OAAAtX,CACHA,OAAAsX,EAAA,GAAAtX,CAAGA,OAAA+gB,EAAA,aAAA/gB,CAAawhB,GAAA,EAAgBgoC,yBAChCxpD,OAAAsX,EAAA,KAAAtX,CAAKgC,KAAK0mD,oBAAoBF,cAAct2B,EAASlsB,IAChDuR,KACGvX,OAAAwX,GAAA,UAAAxX,CAAU,SAAA2E,GAAY,OAAA3E,OAAAsX,EAAA,OAAAtX,CAClB+B,EAAKumD,UAAUp2B,EAASlsB,GACxBhG,OAAAsX,EAAA,GAAAtX,CAAGA,OAAA+gB,EAAA,aAAA/gB,CAAawhB,GAAA,EAAgB0I,uBAAwBvlB,EAASJ,KAAK+H,YAGpFiL,KACEvX,OAAAwX,GAAA,WAAAxX,CAAW,SAAA+J,GAAS,OAAA/J,OAAAkiC,GAAA,EAAAliC,CAAiBwhB,GAAA,EAAgBioC,oBAAqB1/C,OAIlF0+C,EAAAvnD,UAAAwoD,sBAAA,eAAA3nD,EAAAC,KACI,OAAO,SAAAyV,GACH,IAAMwb,EAAcxb,EAAMyB,WAAWC,OAAO+e,iBAE5C,IAAKjF,EACD,MAAM,IAAI6P,EAAA,EAAiBA,EAAA,EAAqBxgC,uBAKpD,OAFQ2wB,EAAAi2B,iBAAAC,wBAMDpnD,EAAK6mD,6BAA6Be,UAH9B3pD,OAAAsX,EAAA,MAAAtX,KAOXyoD,EAAAvnD,UAAA6nD,mBAAR,SAA2B5uC,GACvB,IAAMkQ,EAAQlQ,EAAMkQ,MAAM2R,WACpBxiB,EAAWW,EAAMX,SAASC,cAEhC,OAAQ4Q,GAASA,EAAM6H,SAAa1Y,GAAYA,EAAS0Y,SAGrDu2B,EAAAvnD,UAAAmoD,uBAAR,SACI/zC,EACAg0C,EACAlxB,EACA6wB,GAEQ,IAAAz+B,EAAAlV,EAAAkV,QAASH,EAAAzmB,EAAA,OAAA0R,EAAA,aAEjB,OAAKkV,EASE5mB,EAAA,YACAymB,EAAK,CACRi/B,gBAAeA,EACflxB,eAAcA,EACd6wB,oBAAmBA,EACnBz+B,QAAS,CACL+c,YAAa/c,EAAQ+c,YACrB1nC,KAAM2qB,EAAQtgB,SACd2hB,QAASrB,EAAQ8P,aAhBd12B,EAAA,YACAymB,EAAK,CACRi/B,gBAAeA,EACflxB,eAAcA,EACd6wB,oBAAmBA,KAgBnCR,EArKA,GCNAmB,GAAA,WACI,SAAAA,EACY74C,QAAA,IAAAA,MAAkCnJ,QAAlC5F,KAAA+O,UAMhB,OAHI64C,EAAA1oD,UAAAN,OAAA,SAAOipD,GACH,OAAO,IAAI7nD,KAAK+O,QAAQ+4C,iBAAiBD,IAEjDD,EARA,MCPA,SAAA/nD,GACI,SAAAkoD,IAAA,IAAAhoD,EACIF,EAAApC,KAAAuC,KAAM,qFAAmFA,YAEzFD,EAAKlC,KAAO,4BACZkC,EAAKE,KAAO,2BAEpB,OAPuD2B,EAAA,UAAAmmD,EAAAloD,GAOvDkoD,EAPA,CAAuDld,EAAA,MCAvD,SAAAhrC,GACI,SAAAmoD,IAAA,IAAAjoD,EACIF,EAAApC,KAAAuC,KAAM,6EAA4EA,YAElFD,EAAKlC,KAAO,kCACZkC,EAAKE,KAAO,kCAEpB,OAP6D2B,EAAA,UAAAomD,EAAAnoD,GAO7DmoD,EAPA,CAA6Dnd,EAAA,MCW7D,WAII,SAAAod,EACYC,EACAC,GADAnoD,KAAAkoD,8BACAloD,KAAAmoD,0BAsEhB,OAnEIF,EAAA/oD,UAAA+mC,KAAA,SAAK3jB,EAAqB8lC,GAA1B,IAAAroD,EAAAC,KACUqoD,EAAS,IAAI/yC,EAAA,QAGnB,OAFAtV,KAAKsoD,QAAUD,EAERroD,KAAKkoD,4BAA4BjiB,OACnCz+B,KAAK,SAAA+gD,GACFA,EAAUlnB,OAAO/e,EAAa,CAC1B8lC,QAAOA,EACPza,KAAM,YACNka,SAAU,WACNQ,EAAOjhD,KAAK,CACRmhB,MAAOggC,EAAUC,iBAGzBC,iBAAkB,WACdJ,EAAOjhD,KAAK,CACRW,MAAO,IAAI2gD,QAKvB3oD,EAAK4oD,WAAaJ,KAI9BN,EAAA/oD,UAAAyoD,QAAA,WACI,IAAK3nD,KAAKsoD,UAAYtoD,KAAK2oD,WACvB,MAAM,IAAIrmB,GAAA,EAAoBA,GAAA,EAAwBrvB,8BAO1D,OAJAjT,KAAK4oD,+BAA+B5oD,KAAKsoD,SAEzCtoD,KAAK2oD,WAAWhB,UAET3nD,KAAKsoD,SAGRL,EAAA/oD,UAAA0pD,+BAAR,SAAuCjjD,GACnC,IAAMkjD,EAAgB70C,SAASwvC,cAAc,uCAE7C,IAAKqF,EACD,MAAM,IAAIpnD,MAAM,yCAGpB,IAAMqnD,EAAkBD,EAAcE,cAEtC,IAAKD,EACD,MAAM,IAAIrnD,MAAM,mDAGpB,IAAMg+B,EAAYqpB,EAAgBC,cAElC,IAAKtpB,EACD,MAAM,IAAIh+B,MAAM,4CAGpBzB,KAAKmoD,wBAAwBvpD,OAAO,WAEG,WAA/B6gC,EAAUoC,MAAM0L,YAChB5nC,EAAMyB,KAAK,CACPW,MAAO,IAAIihD,OAKtBC,QAAQxpB,EAAW,CAAE5zB,YAAY,EAAMq9C,gBAAiB,CAAC,YAElEjB,EA5EA,MCXA,WAGI,SAAAkB,EACYr6C,EACAC,QAAA,IAAAA,MAAAnJ,QADA5F,KAAA8O,gBACA9O,KAAA+O,UA4BhB,OAzBIo6C,EAAAjqD,UAAA+mC,KAAA,WAKI,OAJKjmC,KAAKopD,eACNppD,KAAKopD,aAAeppD,KAAKqpD,eAGtBrpD,KAAKopD,cAGRD,EAAAjqD,UAAAmqD,YAAR,eAAAtpD,EAAAC,KAEU6Z,EAAS,CACX,uBACA,mBACFgC,KAAK,KAEP,OAAO,IAAIhL,QAAQ,SAACY,EAAS27B,GACzBrtC,EAAKgP,QAAoB,cAAI,WAAM,OAAA0C,EAAQ1R,EAAKgP,QAAQu6C,aAExDvpD,EAAK+O,cAAcG,WAAW,qCAAqC4K,GAC9D/R,MAAM,SAAAC,GACHhI,EAAKqpD,kBAAehhD,EACpBglC,EAAOrlC,QAI3BohD,EAjCA,mBCSA,WACI,SAAAI,EACYC,GAAAxpD,KAAAwpD,mBAwChB,OArCID,EAAArqD,UAAAiR,WAAA,SAAWnM,GAAX,IAAAjE,EAAAC,KACI,OAAO,SAAAyV,GAAS,OAAAH,EAAA,WAAW1W,OAAO,SAACuI,GAC/B,IACMgQ,EADQ1B,EAAMyB,WACCC,OAAO8e,YACpB3T,EAAAte,EAAAse,YAER,IAAKnL,EACD,MAAM,IAAI2pB,EAAA,EAAiBA,EAAA,EAAqBxgC,uBAGpD6G,EAASC,KAAKpJ,OAAA+gB,EAAA,aAAA/gB,CAAayqB,GAAA,EAAyBnD,yBAAqBld,IAEzE,IAAMqhD,EAAmBtyC,EAAO8Z,YAAYi2B,iBAAiBwC,uBAE7D,OAAO3pD,EAAKypD,iBAAiBvjB,KAAK3jB,EAAamnC,GAC1CjiD,KAAK,WACFL,EAASC,KAAKpJ,OAAA+gB,EAAA,aAAA/gB,CAAayqB,GAAA,EAAyBtD,sBACpDhe,EAASU,aAEZC,MAAM,SAAAC,GACHZ,EAASY,MAAM/J,OAAA+gB,EAAA,kBAAA/gB,CAAkByqB,GAAA,EAAyBhD,iBAAkB1d,EAAOua,UAKnGinC,EAAArqD,UAAAyoD,QAAA,WACI,OAAO3pD,OAAAsX,EAAA,OAAAtX,CACHA,OAAAsX,EAAA,GAAAtX,CAAGA,OAAA+gB,EAAA,aAAA/gB,CAAayqB,GAAA,EAAyBgC,sBAAkBriB,IAC3DpI,KAAKwpD,iBAAiB7B,UACjBpyC,KAAKvX,OAAAwX,GAAA,KAAAxX,CAAK,IACVuX,KAAKvX,OAAAwX,GAAA,UAAAxX,CAAU,SAAC4E,OAAEmF,EAAAnF,EAAAmF,MAAOwgB,EAAA3lB,EAAA2lB,MACtB,OAAOxgB,EACH/J,OAAAsX,EAAA,WAAAtX,CAAWA,OAAA+gB,EAAA,kBAAA/gB,CAAkByqB,GAAA,EAAyBkhC,aAAc5hD,IACpE/J,OAAAsX,EAAA,GAAAtX,CAAGA,OAAA+gB,EAAA,aAAA/gB,CAAayqB,GAAA,EAAyBC,UAAWH,SAI5EghC,EA1CA,aCTA,ICFKK,MDEL,SAAA/pD,GACI,SAAAgqD,IAAA,IAAA9pD,EACIF,EAAApC,KAAAuC,KAAM,mEAAiEA,YAEvED,EAAKlC,KAAO,oCACZkC,EAAKE,KAAO,oCAEpB,OAP+D2B,EAAA,UAAAioD,EAAAhqD,GAO/DgqD,EAPA,CAA+Dhf,EAAA,YCF/D,SAAK+e,GACDA,EAAA,gBACAA,EAAA,oBACAA,EAAA,gBACAA,EAAA,yBACAA,EAAA,0BACAA,EAAA,gBACAA,EAAA,gBACAA,EAAA,kBACAA,EAAA,kBACAA,EAAA,gBACAA,EAAA,+BACAA,EAAA,4CACAA,EAAA,mBACAA,EAAA,kBACAA,EAAA,oBACAA,EAAA,iDACAA,EAAA,sBACAA,EAAA,mCACAA,EAAA,gDACAA,EAAA,gDACAA,EAAA,0CACAA,EAAA,qBACAA,EAAA,eACAA,EAAA,wBACAA,EAAA,oCACAA,EAAA,UACAA,EAAA,oBA3BJ,CAAKA,QAAmB,KA8BT,IAAAE,GAAA,MCLf,WACI,SAAAC,EACYnN,EACAoN,GADAhqD,KAAA48C,oBACA58C,KAAAgqD,sBAsJhB,OAnJID,EAAA7qD,UAAAyoD,QAAA,SAAQr0C,EAA2BtP,GAAnC,IAAAjE,EAAAC,KACI,OAAO,SAAAyV,GAAS,OAAAzX,OAAAsX,EAAA,OAAAtX,CACZ+B,EAAKiqD,oBAAoBtC,uBAAzB3nD,CAAiD0V,GACjD,IAAIH,EAAA,WAAW,SAACnO,GACZ,IAII8iD,EAJE9xC,EAAQ1C,EAAMyB,WACZtU,EAAA0Q,EAAAkV,eAAA,IAAA5lB,EAAA,GAAAA,EAAyC82B,EAAApmB,EAAAomB,eAC3CjyB,EAAO,CAAES,SAAUsgB,EAAQtgB,UAIjC,GAAIiQ,EAAMqQ,QAAQiN,sBAAsBiE,GAAiB,CACrD,IAAM3kB,EAASoD,EAAMggB,eAAeE,iBAAiB7P,EAAQtgB,SAAUsgB,EAAQ8P,WAE/E,IAAKvjB,EACD,MAAM,IAAI+rB,EAAA,EAAiBA,EAAA,EAAqBngC,sBAGpDspD,EAAWlqD,EAAK68C,kBAAkBsN,YAAYn1C,QAE9Ck1C,EAAWlqD,EAAK68C,kBAAkBz+C,IAAI2rD,GAAoBK,0BAG9DhjD,EAASC,KAAKpJ,OAAA+gB,EAAA,aAAA/gB,CAAawsB,GAAA,EAA0BC,sBAAkBriB,EAAWX,IAElFwiD,EACKtC,QAAQr0C,EAAS1R,EAAA,YAAKoC,EAAO,CAAEkE,SAAUsgB,EAAQtgB,SAAUowB,UAAW9P,EAAQ8P,aAC9E9wB,KAAK,WACFL,EAASC,KAAKpJ,OAAA+gB,EAAA,aAAA/gB,CAAawsB,GAAA,EAA0BE,sBAAkBtiB,EAAWX,IAClFN,EAASU,aAEZC,MAAM,SAAAC,GACHZ,EAASY,MAAM/J,OAAA+gB,EAAA,kBAAA/gB,CAAkBwsB,GAAA,EAA0BK,cAAe9iB,EAAON,WAMrGsiD,EAAA7qD,UAAAkrD,SAAA,SAASpmD,GAAT,IAAAjE,EAAAC,KACI,OAAO,SAAAyV,GAAS,OAAAzX,OAAAsX,EAAA,OAAAtX,CACZA,OAAAsX,EAAA,GAAAtX,CAAGA,OAAA+gB,EAAA,aAAA/gB,CAAawsB,GAAA,EAA0BM,oBAC1C/qB,EAAKsqD,2BAA2B50C,EAAOzR,GACvChG,OAAAsX,EAAA,MAAAtX,CAAM,WACF,IAAMma,EAAQ1C,EAAMyB,WACdtU,EAAAuV,EAAAqQ,QAAA6M,gBAAA,GAAExyB,EAAAD,EAAAy3B,kBAAA,IAAAx3B,EAAA,GAAAA,EAAiBE,EAAAH,EAAA01B,iBAAA,IAAAv1B,EAAA,GAAAA,EACnBgS,EAASoD,EAAMggB,eAAeE,iBAAiBgC,EAAY/B,GAEjE,IAAKvjB,EACD,MAAM,IAAIu1C,GAGd,OAAOvqD,EAAK68C,kBAAkBsN,YAAYn1C,GACrCq1C,SAASxoD,EAAA,YAAKoC,EAAO,CAAEkE,SAAU6M,EAAO9J,GAAIqtB,UAAWvjB,EAAO8U,WAC9DriB,KAAK,WAAM,OAAAxJ,OAAA+gB,EAAA,aAAA/gB,CAAawsB,GAAA,EAA0BO,uBAAmB3iB,EAAW,CAAEF,SAAU6M,EAAO9J,UAE9GsK,KACEvX,OAAAwX,GAAA,WAAAxX,CAAW,SAAA+J,GACP,IACMygB,EADQ/S,EAAMyB,WACEsR,QAAQ6M,eAE9B,OAAOr3B,OAAAkiC,GAAA,EAAAliC,CAAiBwsB,GAAA,EAA0BU,eAAgBnjB,EAAO,CAAEG,SAAUsgB,GAAWA,EAAQ6R,kBAKpH0vB,EAAA7qD,UAAAiR,WAAA,SAAWnM,GAAX,IAAAjE,EAAAC,KACI,OAAO,SAAAyV,GAAS,OAAAH,EAAA,WAAW1W,OAAO,SAACuI,GAC/B,IAAMgR,EAAQ1C,EAAMyB,WACZhP,EAAAlE,EAAAkE,SAAUowB,EAAAt0B,EAAAs0B,UACZvjB,EAASoD,EAAMggB,eAAeE,iBAAiBnwB,EAAUowB,GAE/D,IAAKvjB,EACD,MAAM,IAAI+rB,EAAA,EAAiBA,EAAA,EAAqBngC,sBAGpD,GAAIuH,GAAYiQ,EAAM8iB,kBAAkB7V,cAAcld,GAClD,OAAOf,EAASU,WAGpBV,EAASC,KAAKpJ,OAAA+gB,EAAA,aAAA/gB,CAAawsB,GAAA,EAA0BlF,yBAAqBld,EAAW,CAAEF,SAAQA,KAE/FnI,EAAK68C,kBAAkBsN,YAAYn1C,GAC9B5E,WAAWvO,EAAA,YAAKoC,EAAO,CAAEkE,SAAQA,EAAEowB,UAASA,KAC5C9wB,KAAK,WACFL,EAASC,KAAKpJ,OAAA+gB,EAAA,aAAA/gB,CAAawsB,GAAA,EAA0BrF,yBAAqB/c,EAAW,CAAEF,SAAQA,KAC/Ff,EAASU,aAEZC,MAAM,SAAAC,GACHZ,EAASY,MAAM/J,OAAA+gB,EAAA,kBAAA/gB,CAAkBwsB,GAAA,EAA0B/E,iBAAkB1d,EAAO,CAAEG,SAAQA,WAK9G6hD,EAAA7qD,UAAA4gC,aAAA,SAAa97B,GAAb,IAAAjE,EAAAC,KACI,OAAO,SAAAyV,GAAS,OAAAH,EAAA,WAAW1W,OAAO,SAACuI,GAC/B,IAAMgR,EAAQ1C,EAAMyB,WACZhP,EAAAlE,EAAAkE,SAAUowB,EAAAt0B,EAAAs0B,UACZvjB,EAASoD,EAAMggB,eAAeE,iBAAiBnwB,EAAUowB,GAE/D,IAAKvjB,EACD,MAAM,IAAI+rB,EAAA,EAAiBA,EAAA,EAAqBngC,sBAGpD,GAAIuH,IAAaiQ,EAAM8iB,kBAAkB7V,cAAcld,GACnD,OAAOf,EAASU,WAGpBV,EAASC,KAAKpJ,OAAA+gB,EAAA,aAAA/gB,CAAawsB,GAAA,EAA0B9E,2BAAuBtd,EAAW,CAAEF,SAAQA,KAEjGnI,EAAK68C,kBAAkBsN,YAAYn1C,GAC9B+qB,aAAal+B,EAAA,YAAKoC,EAAO,CAAEkE,SAAQA,EAAEowB,UAASA,KAC9C9wB,KAAK,WACFL,EAASC,KAAKpJ,OAAA+gB,EAAA,aAAA/gB,CAAawsB,GAAA,EAA0BnF,2BAAuBjd,EAAW,CAAEF,SAAQA,KACjGf,EAASU,aAEZC,MAAM,SAAAC,GACHZ,EAASY,MAAM/J,OAAA+gB,EAAA,kBAAA/gB,CAAkBwsB,GAAA,EAA0B3E,mBAAoB9d,EAAO,CAAEG,SAAQA,WAKhH6hD,EAAA7qD,UAAA69C,kBAAA,SAAkBhoC,EAA4B/Q,GAC1C,OAAO,WAAM,OAAAsR,EAAA,WAAW1W,OAAO,SAACuI,GAC5B,IACMM,EAAO,CAAES,SADElE,GAAWA,EAAQkE,UAGpCf,EAASC,KAAKpJ,OAAA+gB,EAAA,aAAA/gB,CAAawsB,GAAA,EAA0BhE,8BAA0Bpe,EAAWX,IAE1FsN,IAASvN,KAAK,WACVL,EAASC,KAAKpJ,OAAA+gB,EAAA,aAAA/gB,CAAawsB,GAAA,EAA0B/D,+BAA2Bre,EAAWX,IAC3FN,EAASU,aAEZC,MAAM,SAAAC,GACHZ,EAASY,MAAM/J,OAAA+gB,EAAA,kBAAA/gB,CAAkBwsB,GAAA,EAA0B5D,wBAAyB7e,EAAON,UAK/FsiD,EAAA7qD,UAAAmrD,2BAAR,SAAmC50C,EAA8BzR,GAC7D,IACMwT,EADQ/B,EAAMyB,WACGM,SAASC,cAEhC,OAAID,GAAYA,EAAS0Y,QACdlwB,KAAKgqD,oBAAoBnD,kBAAkBrvC,EAAS0Y,QAASlsB,GAGjEhG,OAAAsX,EAAA,MAAAtX,IAEf+rD,EAzJA,cCnBA,oBAAAQ,KA+CA,OA9CIA,EAAArrD,UAAA2E,QAAA,SAAQ2mD,EAAaC,GACjB,OAAOzsD,OAAA8O,GAAA,QAAA9O,CACHgC,KAAK0qD,WAAWF,GAChBxqD,KAAK0qD,WAAWD,KAIhBF,EAAArrD,UAAAwrD,WAAR,SAAmB/xC,GACf,MAAO,CACH+tB,WAAY/tB,EAAK+tB,WACjB5D,SAAUnqB,EAAKmqB,SACf73B,GAAI0N,EAAK1N,GACTwN,UAAW,CACPqhC,aAAcnhC,EAAKF,UAAUqhC,aACxBzsC,QACAs9C,KAAK,SAACC,EAAOC,GACV,UAAGD,EAAMl4C,UAAYk4C,EAAM9+C,WAAYg/C,cAAc,GAAGD,EAAMn4C,UAAYm4C,EAAM/+C,aAEnFjB,IAAI,SAAAC,GAAQ,OACTsH,kBAAmBtH,EAAKsH,kBACxBM,UAAW5H,EAAK4H,UAChBhH,SAAUZ,EAAKY,SACfI,UAAWhB,EAAKgB,aAExBsY,iBAAkBzL,EAAKF,UAAU2L,iBAC5B/W,QACAs9C,KAAK,SAACC,EAAOC,GAAU,UAAGD,EAAM3/C,IAAK6/C,cAAc,GAAGD,EAAM5/C,MAC5DJ,IAAI,SAAAC,GAAQ,OACTK,OAAQL,EAAKK,OACbS,UAAWd,EAAKc,aAExBuP,cAAexC,EAAKF,UAAU0C,cACzB9N,QACAs9C,KAAK,SAACC,EAAOC,GACV,UAAGD,EAAMl4C,UAAYk4C,EAAM9+C,WAAYg/C,cAAc,GAAGD,EAAMn4C,UAAYm4C,EAAM/+C,aAEnFjB,IAAI,SAAAC,GAAQ,OACTsH,kBAAmBtH,EAAKsH,kBACxBM,UAAW5H,EAAK4H,UAChBhH,SAAUZ,EAAKY,SACfI,UAAWhB,EAAKgB,UAChBi/C,aAAcjgD,EAAKigD,mBAK3CR,EA/CA,MCJA,SAAA1qD,GACI,SAAAmrD,IAAA,IAAAjrD,EACIF,EAAApC,KAAAuC,KAAM,2GAAyGA,YAE/GD,EAAKlC,KAAO,mBACZkC,EAAKE,KAAO,iBAEpB,OAP8C2B,EAAA,UAAAopD,EAAAnrD,GAO9CmrD,EAPA,CAA8CngB,EAAA,MCS9C,WACI,SAAAogB,EACY30C,GAAAtW,KAAAsW,yBA+BhB,OA5BI20C,EAAA/rD,UAAAkoD,SAAA,SAAS5vC,EAAqBxT,GAA9B,IAAAjE,EAAAC,KACI,IAAKwX,EACD,MAAM,IAAIspB,EAAA,EAAiBA,EAAA,EAAqBzgC,iBAGpD,OAAOL,KAAKsW,uBAAuBE,aAAagB,EAASvM,GAAIjH,GACxDwD,KAAK,SAAA7E,GACF,IAAMuoD,EAAa,IAAIC,GAEvB,KAAI3zC,EAASmiB,aAAeh3B,EAASJ,KAAKo3B,YACnC55B,EAAKqrD,gBAAgB5zC,EAASkM,QAAS/gB,EAASJ,KAAKmhB,UACrD3jB,EAAKsrD,yBAAyB7zC,EAAS4M,iBAAkBzhB,EAASJ,KAAK6hB,mBACvE8mC,EAAWrnD,QAAQ2T,EAASmB,KAAMhW,EAASJ,KAAKoW,OAKvD,MAAM,IAAI2yC,MAIdL,EAAA/rD,UAAAksD,gBAAR,SAAwBG,EAAoBC,GACxC,OAAOxtD,OAAA8O,GAAA,QAAA9O,CAAQA,OAAA8O,GAAA,IAAA9O,CAAIutD,EAAU,QAASvtD,OAAA8O,GAAA,IAAA9O,CAAIwtD,EAAU,UAGhDP,EAAA/rD,UAAAmsD,yBAAR,SAAiCI,EAAsCC,GACnE,OAAO1tD,OAAA8O,GAAA,QAAA9O,CAAQA,OAAA8O,GAAA,IAAA9O,CAAIytD,EAAmB,QAASztD,OAAA8O,GAAA,IAAA9O,CAAI0tD,EAAmB,UAE9ET,EAjCA,eCEA,WACI,SAAAU,EACYC,EACA5B,EACA6B,GAFA7rD,KAAA4rD,wBACA5rD,KAAAgqD,sBACAhqD,KAAA6rD,6BAoChB,OAjCIF,EAAAzsD,UAAA4sD,cAAA,SAActjC,GAAd,IAAAzoB,EAAAC,KACI,OAAO,SAAAyV,GAAS,OAAAzX,OAAAsX,EAAA,OAAAtX,CACZA,OAAAsX,EAAA,GAAAtX,CAAGA,OAAA+gB,EAAA,aAAA/gB,CAAairB,GAAA,EAAkB8iC,yBAClC/tD,OAAAsX,EAAA,KAAAtX,CAAK+B,EAAK6rD,sBAAsBE,cAC5B/rD,EAAK8rD,2BAA2Brc,UAAUhnB,EAAS/S,EAAMyB,cAExD3B,KACGvX,OAAAwX,GAAA,UAAAxX,CAAU,SAAC4E,OAAEL,EAAAK,EAAAL,KAAW,OAAAvE,OAAAsX,EAAA,OAAAtX,CACpB+B,EAAKiqD,oBAAoBlD,kBAAzB/mD,CAA4C0V,GAC5CzX,OAAAsX,EAAA,GAAAtX,CAAGA,OAAA+gB,EAAA,aAAA/gB,CAAairB,GAAA,EAAkBC,uBAAwB3mB,SAGxEgT,KACEvX,OAAAwX,GAAA,WAAAxX,CAAW,SAAA+J,GAAS,OAAA/J,OAAAkiC,GAAA,EAAAliC,CAAiBirB,GAAA,EAAkB+iC,oBAAqBjkD,QAIpF4jD,EAAAzsD,UAAA+sD,yBAAA,SACI/jD,EACAowB,GAFJ,IAAAv4B,EAAAC,KAII,OAAO,SAAAyV,GACH,IAAMnC,EAAUvT,EAAK8rD,2BAA2Brc,UAAU,CAAElX,UAASA,EAAEpwB,SAAQA,GAAIuN,EAAMyB,YAEzF,OAAOlZ,OAAAsX,EAAA,OAAAtX,CACHA,OAAAsX,EAAA,GAAAtX,CAAGA,OAAA+gB,EAAA,aAAA/gB,CAAairB,GAAA,EAAkBijC,oCAClCnsD,EAAK6rD,sBAAsBK,yBAAyB34C,GAC/C9L,KAAK,WAAM,OAAAxJ,OAAA+gB,EAAA,aAAA/gB,CAAairB,GAAA,EAAkBkjC,sCACjD52C,KACEvX,OAAAwX,GAAA,WAAAxX,CAAW,SAAA+J,GAAS,OAAA/J,OAAAkiC,GAAA,EAAAliC,CAAiBirB,GAAA,EAAkBmjC,+BAAgCrkD,QAIvG4jD,EAxCA,MCNA,WAKI,SAAAU,EACY57C,GAAAzQ,KAAAyQ,UA6BhB,OA1BI47C,EAAAntD,UAAA4sD,cAAA,SAAcx4C,GAAd,IAAAvT,EAAAC,KACI,OAAO,IAAI6Q,QAAQ,SAACY,EAAS27B,GACzBrtC,EAAK0Q,QAAQq7C,cAAcx4C,EAAS,SAACvL,EAAYpF,GACzCoF,EACAqlC,EAAOrtC,EAAKusD,mBAAmBvkD,IAE/B0J,EAAQ1R,EAAKusD,mBAAmB3pD,SAMhD0pD,EAAAntD,UAAA+sD,yBAAA,SAAyB34C,GAAzB,IAAAvT,EAAAC,KACI,OAAO,IAAI6Q,QAAQ,WACf9Q,EAAK0Q,QAAQw7C,yBAAyB34C,MAItC+4C,EAAAntD,UAAAotD,mBAAR,SAA2B3pD,GACvB,MAAO,CACHH,QAAS,GACTD,KAAMI,EAAS2H,KACf7H,OAAQE,EAASF,OACjB8pD,WAAY5pD,EAAS4pD,aAGjCF,EAnCA,qDCLe,SAAAG,GAA6BzgC,GACxC,OAAOmG,QAASnG,EAAiCE,cCarD,IChBYwgC,MDgBZ,oBAAAC,KAyEA,OAxEIA,EAAAxtD,UAAAswC,UAAA,SAAUhnB,EAAkBmkC,GACxB,IAAMjtC,EAAiBitC,EAAcjtC,eAAe4U,oBAC9C9c,EAAWm1C,EAAcn1C,SAASC,cAClCmN,EAAW+nC,EAAc/nC,SAASoQ,cAClC3M,EAAQskC,EAActkC,MAAM2R,WAC5BW,EAAgB36B,KAAK4sD,kBAAkBD,EAAcx0B,eAAgB3P,EAAQtgB,SAAUsgB,EAAQ8P,WAC/F9f,EAAkBm0C,EAAcn0C,gBAAgByc,qBAChD3c,EAAeq0C,EAAcr0C,aAAaa,kBAC1C0zC,EAAiBF,EAAcr0C,aAAa6a,oBAC5ClC,EAAc07B,EAAcx1C,OAAO+e,iBACnC42B,EAAgBH,EAAcx1C,OAAOC,mBACrC21C,EAAiBJ,EAAc90B,YAAYC,qBAC3Ck1B,EAAcL,EAAcx0B,eAAeC,wBAC3C2f,EAAY4U,EAActkC,MAAM4R,eAChCgzB,EAAmBroC,GAAYlF,GAAkB1hB,OAAAkvD,GAAA,EAAAlvD,CAAsB4mB,EAAUlF,GAEjFytC,EAAYJ,GAAkBvkC,EAAQ+c,aAAeinB,GAAoBhkC,EAAQ+c,aAChFonB,EAAcnkC,QAAQ+M,kBAAiB,KAAKw3B,EAAeK,iBAC9DT,EAAcnkC,QAAQ+M,kBAE1B,IAAK43B,EACD,MAAM,IAAItiB,EAAA,EAGd,MAAO,CACHsiB,UAASA,EACTxyB,cAAaA,EACb/V,SAAUqoC,EACVvtC,eAAgBA,GAAkB1hB,OAAAqvD,GAAA,EAAArvD,CAAqB0hB,GACvDlH,gBAAiBA,GAAmBxa,OAAAqvD,GAAA,EAAArvD,CAAqBwa,EAAiBF,GAC1Eu0C,eAAgBA,GAAkB7uD,OAAAsvD,GAAA,EAAAtvD,CAA4B6uD,GAAgB,GAC9El0C,KAAMnB,GAAYxZ,OAAAuvD,GAAA,EAAAvvD,CAAkBwZ,GACpC6Q,MAAOA,GAASrqB,OAAAwvD,GAAA,EAAAxvD,CAAmBqqB,EAAO0vB,GAC1CA,UAASA,EACTvvB,QAASA,EAAQ+c,YACjBkoB,UAAW,CACP9xC,QAAS/Z,EAAA,YACForD,EAAW,CACdU,eAAgBZ,GAAiBA,EAAcY,kBAGvDC,OAAQ,8BACRl4C,MAAOzX,OAAA8O,GAAA,KAAA9O,CAAKizB,GAAeA,EAAY+xB,aAAc,CACjD,YACA,UACA,gBACA,gBAKJ0J,EAAAxtD,UAAA0tD,kBAAR,SACIgB,EACA1lD,EACAowB,GAEA,IAAMqC,EAAgBizB,EAAsBv1B,iBAAiBnwB,EAAUowB,GAEvE,GAAKqC,EAIL,MAA6B,iBAAzBA,EAAc5lB,QAA8B4lB,EAAc9Q,QAI1D8Q,EAAcqL,oBAAsBrL,EAAcqL,mBAAmBnc,QAC9DjoB,EAAA,YAAK+4B,EAAa,CAAE1vB,GAAI0vB,EAAcqL,mBAAmBnc,UAG7D8Q,EAPI/4B,EAAA,YAAK+4B,EAAa,CAAE9Q,QAAS8Q,EAAc1vB,MAS9DyhD,EAzEA,eEHA,SAAA7sD,GACI,SAAAguD,EACYjvB,EACR56B,GAFJ,IAAAjE,EAIIF,EAAApC,KAAAuC,KAAMgE,IAAQhE,YAHND,EAAA6+B,WA8DhB,OAhEqDh9B,EAAA,UAAAisD,EAAAhuD,GAQjDguD,EAAA3uD,UAAAgrD,YAAA,SAAYvvB,GACR,IAAKA,EACD,OAAO36B,KAAK7B,MAGhB,IAAMoqB,EAAQvoB,KAAK8tD,UAAUnzB,GACvBoY,EAAapY,EAAc9Q,SAAW8Q,EAAc1vB,GAE1D,OAAOjL,KAAK7B,IAAIoqB,EAAOwqB,IAGnB8a,EAAA3uD,UAAA4uD,UAAR,SAAkBnzB,GACd,IAAMzyB,EAAWyyB,EAAc9Q,SAAW8Q,EAAc1vB,GAExD,OAAIjL,KAAK+tD,qBAAqB7lD,GACnBA,EAGPyyB,EAAc16B,OAASs6B,GAAA,EAChBuvB,GAAoBnmD,QAG3B3D,KAAKguD,gBAAgBrzB,GACdmvB,GAAoBmE,OAG3BtzB,EAAc16B,OAASs6B,GAAA,EAChBuvB,GAAoBoE,QAGxBpE,GAAoBqE,aAGvBN,EAAA3uD,UAAA6uD,qBAAR,SACI7lD,GAEA,OAAOlI,KAAKizC,YAAY/qC,IAGpB2lD,EAAA3uD,UAAA8uD,gBAAR,SAAwBrzB,GACpB,IAAMxjB,EAASnX,KAAK4+B,OAAO1nB,WAAWC,OAAO+e,iBAE7C,IAAK/e,EACD,MAAM,IAAI2pB,EAAA,EAAiBA,EAAA,EAAqBxgC,uBAG5C,IAAA8tD,EAAAj3C,EAAAk3C,gBAAAD,2BAER,SAAKA,GAAwD,UAA1BzzB,EAAc9Q,WAIzC7rB,OAAA8O,GAAA,KAAA9O,CAAKowD,EAA4B,SAAAnjD,GACrC,OAAA0vB,EAAc1vB,KAAOA,GAAM0vB,EAAc9Q,UAAY5e,KAGjE4iD,EAhEA,CAAqDxlB,EAAA,aDbrD,SAAYokB,GACRA,EAAA,2DACAA,EAAA,6DAFJ,CAAYA,QAAa,KEEzB,gBAAA5sD,GACI,SAAAyuD,EAAYC,GAAZ,IAAAxuD,EAAAC,KACQqB,EAAU,gFAEVktD,IACAltD,EAAaA,EAAO,2DAA2DktD,EAAc1yC,KAAK,MAAK,MAG3G9b,EAAAF,EAAApC,KAAAuC,KAAMqB,IAAQrB,MAETnC,KAAO,gCAEpB,OAZyD+D,EAAA,UAAA0sD,EAAAzuD,GAYzDyuD,EAZA,CAAyD9uB,GAAA,MCAzD,SAAA3/B,GACI,SAAA2uD,EAAYntD,GAAZ,IAAAtB,EACIF,EAAApC,KAAAuC,KAAMqB,GAAW,mCAAiCrB,YAElDD,EAAKlC,KAAO,8BACZkC,EAAKE,KAAO,sBAEpB,OAPyD2B,EAAA,UAAA4sD,EAAA3uD,GAOzD2uD,EAPA,CAAyD3jB,EAAA,eCezD,WAGI,SAAA4jB,EACY7vB,EACAorB,EACA0E,EACAzuB,EACA0uB,GAJA3uD,KAAA4+B,SACA5+B,KAAAgqD,sBACAhqD,KAAA0uD,wBACA1uD,KAAAigC,8BACAjgC,KAAA2uD,sBAoRhB,OAjRIF,EAAAvvD,UAAAiR,WAAA,SAAWnM,GAAX,IAAAjE,EAAAC,KACI,OAAOA,KAAK4+B,OAAOgB,SAAS5/B,KAAKigC,4BAA4Bh4B,kBAAkBjE,EAAQkE,WAClFV,KAAK,SAAA2Q,GACF,IAAMwiB,EAAgBxiB,EAAMggB,eAAeE,iBAAiBr0B,EAAQkE,UAEpE,IAAKyyB,IAAkBA,EAAcvqB,YACjC,MAAM,IAAI0wB,EAAA,EAAiBA,EAAA,EAAqBngC,sBAGlC,IAAA4gC,EAAA5G,EAAAxjB,OAAAoqB,SAAYqtB,EAAAj0B,EAAAvqB,YAE9B,OAAOrQ,EAAK4uD,oBAAoB1oB,KAAK2oB,EAAWrtB,KAEnD/5B,KAAK,SAAAqnD,GAGF,OAFA9uD,EAAK+uD,QAAUD,EAER9uD,EAAK6+B,OAAO1nB,cAI/Bu3C,EAAAvvD,UAAAyoD,QAAA,SAAQr0C,EAA2BtP,GAAnC,IAAAjE,EAAAC,KACUkI,EAAWoL,EAAQkV,SAAWlV,EAAQkV,QAAQtgB,SAC5CwxB,EAAApmB,EAAAomB,eACAo1B,EAAA9uD,KAAA8uD,QAER,IAAKA,EACD,MAAM,IAAIxsB,GAAA,EAAoBA,GAAA,EAAwB9xB,uBAG1D,IAAKtI,EACD,MAAM,IAAI6mD,GAA4B,CAAC,qBAG3C,IAAMC,EAAiBptD,EAAA,YAChBoC,EAAO,CACV6V,OAAQ,CACJC,QAAS,CACL2yC,GAAcwC,wBACdxC,GAAcyC,2BAK1B,OAAOlvD,KAAK4+B,OAAOgB,SAAS5/B,KAAKgqD,oBAAoBzD,YAAY,CAAE7sB,eAAcA,GAAIs1B,IAChFxnD,KAA4B,WAGzB,OAFAsnD,EAAQt3C,SAASzX,EAAKovD,2BAEf,IAAIt+C,QAAQ,SAACY,EAAS27B,GACzB0hB,EAAQt3C,SAAS43C,KAAK,CAClBC,OAAQ,SAACC,GACiB,aAAtBA,EAAWC,OAAwBniB,EAAO,IAAIoiB,IAAiCpiB,EAAO,IAAItR,GAAA,IAE9F2zB,UAAW,SAAAC,GAAmBj+C,EAAQi+C,MAE1CZ,EAAQa,GAAG5nD,MAAMq7C,GAAG,QAAS,WACzBhW,EAAO,IAAIoiB,UAItBhoD,KAAK,SAAAX,GACF,IAAM+oD,EAAiB,CACnB1nD,SAAQA,EACRq9B,YAAa,CAAE3K,MAAO/zB,EAAOgpD,iBAGjC,OAAO9vD,EAAK6+B,OAAOgB,SAAS7/B,EAAK2uD,sBAAsB5C,cAAc8D,OAIjFnB,EAAAvvD,UAAA4gC,aAAA,WAKI,OAJI9/B,KAAK8uD,UACL9uD,KAAK8uD,aAAU1mD,GAGZyI,QAAQY,QAAQzR,KAAK4+B,OAAO1nB,aAGvCu3C,EAAAvvD,UAAAkrD,SAAA,WACI,OAAOv5C,QAAQu8B,OAAO,IAAIkd,KAGtBmE,EAAAvvD,UAAAiwD,wBAAR,WACI,IAAMh3C,EAAQnY,KAAK4+B,OAAO1nB,WACpBC,EAASgB,EAAMhB,OAAO+e,iBACtB5d,EAAeH,EAAMG,aAAaa,kBAClCkP,EAAQlQ,EAAMkQ,MAAM2R,WAE1B,IAAK7iB,EACD,MAAM,IAAI2pB,EAAA,EAAiBA,EAAA,EAAqBxgC,uBAGpD,IAAK+nB,EACD,MAAM,IAAIyY,EAAA,EAAiBA,EAAA,EAAqBzgC,iBAGpD,IAAM0K,EAAoB,IAAIC,GAAA,EAAkBqd,EAAMya,SAASp4B,eACzDgV,EAAiB1f,KAAK8vD,qBAE5B,MAAO,CACHC,SAAU,CACNC,sBAAuB74C,EAAO84C,MAAMC,aACpCC,gBAAiBh5C,EAAO84C,MAAMC,aAC9BE,6BAA8B,QAElCnjC,SAAUjtB,KAAKqwD,uBAAyB3wC,EACxCqN,QAASrN,EACT+R,MAAOzxB,KAAKswD,UAAUvlD,EAAmBsd,GACzCkoC,SAAU,CACNC,cAAexwD,KAAKywD,iBAAiBn4C,GACrC7Z,KAAM,QACNiyD,cAAe,cACfC,iBAAkB,GAClBC,gBAAiB,IAErBC,UAAW7wD,KAAK8wD,cAAc/lD,EAAmBsd,GACjD0oC,SAAU1oC,EAAM6H,QAAU7H,EAAM6H,QAAQvrB,WAAa,GACrDqsD,gBAAiBjmD,EAAkBQ,UAAU8c,EAAMwwB,mBACnDoY,WAAYlmD,EAAkBQ,UAAU8c,EAAM8wB,UAC9C+X,MAAOnmD,EAAkBQ,UAAU8c,EAAMixB,eAIzCmV,EAAAvvD,UAAAuxD,iBAAR,SAAyBn4C,GACrB,IAAKA,EACD,MAAO,GAGX,IAAMJ,EAAcI,EAAa,GAEjC,OAAOJ,GAAeA,EAAYkb,uBAC9Blb,EAAYkb,uBAAuBnzB,KAAO,IAG1CwuD,EAAAvvD,UAAA4wD,mBAAR,WACI,IACMpwC,EADQ1f,KAAK4+B,OAAO1nB,WACGwI,eAAe4U,oBAE5C,IAAK5U,EACD,MAAM,IAAIohB,EAAA,EAAiBA,EAAA,EAAqB5gC,uBAqBpD,MAlB2B,CACvBrC,KAAM,CACFszD,MAAOzxC,EAAe2S,UACtB++B,KAAM1xC,EAAe4S,SACrB++B,KAAS3xC,EAAe2S,UAAS,IAAI3S,EAAe4S,UAExDlY,QAAS,CACL8pB,MAAOxkB,EAAe8S,SACtB4R,MAAO1kB,EAAe+S,SACtBC,KAAMhT,EAAegT,KACrBva,MAAOuH,EAAe6d,oBACtB+zB,QAAS5xC,EAAekT,WACxBpB,QAAS9R,EAAeqR,aAE5BiT,aAActkB,EAAemT,MAC7BgR,MAAOnkB,EAAemkB,QAMtB4qB,EAAAvvD,UAAAmxD,oBAAR,WACI,IACM73C,EADQxY,KAAK4+B,OAAO1nB,WACIsB,gBAAgByc,qBAE9C,GAAKzc,EAqBL,MAjB4B,CACxB3a,KAAM,CACFszD,MAAO34C,EAAgB6Z,UACvB++B,KAAM54C,EAAgB8Z,SACtB++B,KAAS74C,EAAgB6Z,UAAS,IAAI7Z,EAAgB8Z,UAE1DlY,QAAS,CACL8pB,MAAO1rB,EAAgBga,SACvB4R,MAAO5rB,EAAgBia,SACvBC,KAAMla,EAAgBka,KACtBva,MAAOK,EAAgB+kB,oBACvB+zB,QAAS94C,EAAgBoa,WACzBpB,QAAShZ,EAAgBuY,aAE7BiT,aAAcxrB,EAAgBqa,QAM9B47B,EAAAvvD,UAAAoxD,UAAR,SAAkBvlD,EAAsCsd,GAGpD,IAFA,IAAMoJ,EAAsB,GAETnrB,EAAA,EAAA1D,EAAAylB,EAAM5P,UAAU0C,cAAhB7U,EAAA1D,EAAAuB,OAAAmC,IAA+B,CAA7C,IAAMwE,EAAIlI,EAAA0D,GACXmrB,EAAM1nB,KAAK,CACPwnD,aAAczmD,EAAKjN,KACnB2zD,IAAK1mD,EAAK0mD,IACVC,WAAY1mD,EAAkBQ,UAAUT,EAAK4mD,WAC7CC,IAAK7mD,EAAKY,SACVkmD,eAAgB9mD,EAAKI,SACrB2mD,SAAU/mD,EAAK/B,IACf+oD,WAAY9xD,KAAK+xD,eAAejnD,EAAKgnD,cAI7C,IAAmB,IAAAjvD,EAAA,EAAAE,EAAAslB,EAAM5P,UAAUqhC,aAAhBj3C,EAAAE,EAAAoB,OAAAtB,IAA8B,CAAtCiI,EAAI/H,EAAAF,GACX4uB,EAAM1nB,KAAK,CACPwnD,aAAczmD,EAAKjN,KACnB2zD,IAAK1mD,EAAK0mD,IACVC,WAAY1mD,EAAkBQ,UAAUT,EAAK4mD,WAC7CC,IAAK7mD,EAAKY,SACVkmD,eAAgB9mD,EAAKI,SACrB2mD,SAAU/mD,EAAK/B,IACf+oD,WAAY9xD,KAAK+xD,eAAejnD,EAAKgnD,cAI7C,IAAmB,IAAA/jC,EAAA,EAAAC,EAAA3F,EAAM5P,UAAU2L,iBAAhB2J,EAAAC,EAAA7pB,OAAA4pB,IAAkC,CAA1CjjB,EAAIkjB,EAAAD,GACX0D,EAAM1nB,KAAK,CACPwnD,aAAczmD,EAAKjN,KACnB2zD,IAAK,GACLC,WAAY1mD,EAAkBQ,UAAUT,EAAKK,QAC7CwmD,IAAK,EACLC,eAAgB,GAChBC,SAAU,KAIlB,GAAIxpC,EAAM5P,UAAUu5C,YAChB,IAAmB,IAAA/jC,EAAA,EAAAgkC,EAAA5pC,EAAM5P,UAAUu5C,YAAhB/jC,EAAAgkC,EAAA9tD,OAAA8pB,IAA6B,CAArCnjB,EAAImnD,EAAAhkC,GACXwD,EAAM1nB,KAAK,CACPwnD,aAAczmD,EAAKjN,KACnB2zD,IAAK1mD,EAAK0mD,IACVC,WAAY1mD,EAAkBQ,UAAUT,EAAKonD,WAC7CP,IAAK7mD,EAAKY,SACVkmD,eAAgB,GAChBC,SAAU,KAKtB,OAAOpgC,GAGHg9B,EAAAvvD,UAAA4xD,cAAR,SAAsB/lD,EAAsCsd,GAGxD,IAFA,IAAMwoC,EAA4B,GAEfvqD,EAAA,EAAA1D,EAAAylB,EAAM3E,QAANpd,EAAA1D,EAAAuB,OAAAmC,IAAe,CAA7B,IAAM6rD,EAAIvvD,EAAA0D,GACP6rD,EAAK7a,iBAAmB,IACxBuZ,EAAUsB,EAAK7gD,MAAQ,CACnB8gD,gBAAiBrnD,EAAkBQ,UAAU4mD,EAAK7a,kBAClD+a,sBAAuBF,EAAKt1B,cAYxC,OAPIxU,EAAMhW,eAAiB,IACvBw+C,EAAUyB,kBAAoB,CAC1BF,gBAAiBrnD,EAAkBQ,UAAU8c,EAAMhW,gBACnDggD,sBAAuB,aAIxBxB,GAGHpC,EAAAvvD,UAAA6yD,eAAR,SAAuBD,GACnB,OAAKA,EAIEA,EAAWjnD,IAAI,SAAA0nD,GAAgB,OAAAA,EAAa1nD,IAAI,SAAA2nD,GAAY,OAAAA,EAAS30D,SAHlE,CAAC,KAKnB4wD,EA5RA,GCdegE,GAAAC,SAAS,mwBAAT,MCEf,WACI,SAAAC,EACW5jD,QAAA,IAAAA,MAAAnJ,QAAA5F,KAAA+O,UAsBf,OAnBI4jD,EAAAzzD,UAAA+mC,KAAA,SAAK2sB,EAAiBrxB,GAClB,IAAMsxB,EAAY7yD,KAAK8yD,cAAcvxB,GAGrC,GADAkxB,GAAaG,EAAQC,IAChB7yD,KAAK+O,QAAQ8/C,OACd,MAAM,IAAIhkB,EAAA,EAGd,OAAOh6B,QAAQY,QAAQzR,KAAK+O,QAAQ8/C,SAGhC8D,EAAAzzD,UAAA4zD,cAAR,SAAsBvxB,GAMlB,YANkB,IAAAA,OAAA,GAMXA,EAHM,4CADH,qCAMlBoxB,EAxBA,MCSA,WAGI,SAAAI,EACYn0B,EACA+nB,EACAqD,EACA0E,EACAzuB,EACA8hB,EACAiR,GANAhzD,KAAA4+B,SACA5+B,KAAA2mD,qBACA3mD,KAAAgqD,sBACAhqD,KAAA0uD,wBACA1uD,KAAAigC,8BACAjgC,KAAA+hD,+BACA/hD,KAAAgzD,wBA6GhB,OA1GID,EAAA7zD,UAAAiR,WAAA,SAAWnM,GAAX,IAAAjE,EAAAC,KACUmY,EAAQnY,KAAK4+B,OAAO1nB,WACpByjB,EAAgBxiB,EAAMggB,eAAeE,iBAAiBr0B,EAAQkE,SAAUlE,EAAQs0B,WAChFnhB,EAASgB,EAAMhB,OAAO+e,iBACtB+8B,EAAmB97C,EAASA,EAAO6rC,aAAakQ,aAAe,GAErE,IAAKv4B,EACD,MAAM,IAAImG,EAAA,EAAiBA,EAAA,EAAqBngC,sBAGpD,OAAOX,KAAKgzD,sBAAsB/sB,KAAKtL,EAAe36B,KAAKmzD,kBAAkBF,IACxEzrD,KAAK,SAAA4rD,GACFrzD,EAAKszD,aAAeD,IAEvB5rD,KAAK,WAAM,OAAAzH,EAAK6+B,OAAO1nB,cAGhC67C,EAAA7zD,UAAA4gC,aAAA,WAKI,OAJI9/B,KAAKqzD,eACLrzD,KAAKqzD,kBAAejrD,GAGjByI,QAAQY,QAAQzR,KAAK4+B,OAAO1nB,aAGvC67C,EAAA7zD,UAAAyoD,QAAA,SAAQr0C,EAA2BtP,GAAnC,IAAAjE,EAAAC,KACUunC,EAAYj0B,EAAQkV,SAAWlV,EAAQkV,QAAQ8P,UAErD,IAAKiP,EACD,MAAM,IAAIwnB,GAA4B,CAAC,sBAG3C,IAAMr1B,IAAmBpmB,EAAQomB,eAE3BviB,EADQnX,KAAK4+B,OAAO1nB,WACLC,OAAO+e,iBACtB+8B,EAAmB97C,EAASA,EAAO6rC,aAAakQ,aAAe,GAErE,OAAOlzD,KAAK4+B,OAAOgB,SACf5/B,KAAK+hD,6BAA6B9B,kBAAkB1Y,EAAW,CAAE7N,eAAcA,KAE9ElyB,KAAK,SAAA2Q,GAAS,OAAApY,EAAK4mD,mBAAmBS,SAASjvC,EAAMX,SAASC,cAAezT,KAC7EwD,KAAK,WAAM,OAAAzH,EAAK6+B,OAAOgB,SACpB7/B,EAAKkgC,4BAA4Bh4B,kBAAkBs/B,EAAWvjC,MAEjEwD,KAAK,SAAA2Q,GAAS,OAAApY,EAAKuzD,oBAAoBL,EAAkB96C,EAAMggB,eAAeE,iBAAiBkP,MAE/F//B,KAAK,WAAM,WAAIqJ,QAAe,iBAGvCkiD,EAAA7zD,UAAAkrD,SAAA,SAASpmD,GAAT,IAAAjE,EAAAC,KACI,OAAOA,KAAK4+B,OAAOgB,SAAS5/B,KAAK+hD,6BAA6B7B,aAAal8C,EAAQkE,WAC9EV,KAAK,SAAA2Q,GACF,IAAMqQ,EAAUrQ,EAAMqQ,QAAQ6M,eACxBle,EAASgB,EAAMhB,OAAOC,mBACtBm8C,EAAWp7C,EAAM+iB,eAAezjB,YAAY,YAElD,IAAK+Q,EACD,MAAM,IAAIsY,EAAA,EAAiBA,EAAA,EAAqBzgC,iBAGpD,IAAK8W,IAAWA,EAAOqR,QAAQD,MAC3B,MAAM,IAAIuY,EAAA,EAAiBA,EAAA,EAAqBxgC,uBAGpD,IAAKizD,IAAaA,EAASvV,SACvB,MAAM,IAAI1b,GAAA,EAAoBA,GAAA,EAAwB9xB,uBAG1D,IAAMgjD,EAAe,CACjB95B,eAAgB65B,EAASvV,SAAStkB,gBAGhCk2B,EAAiB,CACnB1nD,SAAUsgB,EAAQ6R,WAClBkL,YAAa,CAAE3K,MAAOzjB,EAAOqR,QAAQD,QAGzC,OAAOxoB,EAAK6+B,OAAOgB,SAAS7/B,EAAKiqD,oBAAoBzD,YAAYiN,EAAcxvD,IAC1EwD,KAAK,WAAM,OAAAzH,EAAK6+B,OAAOgB,SAAS7/B,EAAK2uD,sBAAsB5C,cAAc8D,SAIlFmD,EAAA7zD,UAAAo0D,oBAAR,SAA4BG,EAAqB94B,GAC7C,IAAK36B,KAAKqzD,eAAiB14B,IAAkBA,EAAcvqB,YACvD,MAAM,IAAIkyB,GAAA,EAAoBA,GAAA,EAAwB9xB,uBAG1DxQ,KAAKqzD,aAAaljD,WAAW,CAAE4gB,YAAa/wB,KAAKmzD,kBAAkBM,KACnEzzD,KAAKqzD,aAAaK,SAAS,CAAEnrC,MAAOoS,EAAcvqB,eAG9C2iD,EAAA7zD,UAAAi0D,kBAAR,SAA0BM,GACtB,OAAQA,GACR,IAAK,YACD,MAAO,KAEX,IAAK,cACD,MAAO,KAEX,IAAK,gBACD,MAAO,KAEX,QACI,MAAO,OAGnBV,EAvHA,GCFMY,GACI,0CADJA,GAEO,kDAGPC,GACI,0CADJA,GAEO,wDAIb,WACI,SAAAC,EACY/kD,GAAA9O,KAAA8O,gBAuBhB,OAhBI+kD,EAAA30D,UAAA+mC,KAAA,SAAKlxB,EAAuBgc,GACxB,IAAMwQ,EAAWxsB,EAAOoC,OAAOoqB,WAAY,EACrCsxB,EAAY7yD,KAAK8yD,cAAc/hC,EAAawQ,GAElD,OAAOvhC,KAAK8O,cAAcG,WAAW4jD,GAChCrrD,KAAK,WAAM,OAAC5B,OAA0BkuD,YAGvCD,EAAA30D,UAAA4zD,cAAR,SAAsB/hC,EAAqBwQ,GACvC,MAAoB,OAAhBxQ,EACOwQ,EAAWqyB,GAAqBA,GAGpCryB,EAAWoyB,GAA0BA,IAGpDE,EAzBA,sBCjBe,SAAAE,GAAgC9gC,EAAoCC,GAC/E,OAAOl1B,OAAA8O,GAAA,QAAA9O,CAAQo0B,GAAUa,GAAWb,GAAUc,IAGlD,SAAAd,GAAmBhY,GACf,ICRgCpb,EDQ1Bg1D,EAAc,CAAC,KAAM,gBAE3B,OAAQh2D,OAAOgH,MCViBhG,EDUAob,ECTzBpc,OAAAsgB,GAAA,EAAAtgB,CAASgB,EAAQ,SAAC0V,EAAQ7V,GAAgB,OAAAb,OAAA6/B,GAAA,EAAA7/B,CAAUa,MDSf,KACvC+L,OACG,SAAC/D,EAAQhI,SAAQ,OAA8B,IAA9Bm1D,EAAY/pD,QAAQpL,IAAeub,EAAQvb,GAAM+C,EAAA,YACzDiF,IAAMjE,EAAA,IAAG/D,GAAMub,EAAQvb,GAAI+D,IAChCiE,GACJ,IEbG,SAAAotD,GAAgC75C,GAC3C,MAAO,CACHnP,GAAImP,EAAQnP,GACZonB,UAAWjY,EAAQiY,UACnBC,SAAUlY,EAAQkY,SAClBC,QAASnY,EAAQmY,QACjBC,SAAUpY,EAAQ+iB,aAClB1K,SAAUrY,EAAQgjB,aAClB1K,KAAMtY,EAAQsY,KACdC,gBAAiBvY,EAAQijB,SACzBE,oBAAqBnjB,EAAQkjB,aAC7B1K,WAAYxY,EAAQojB,SACpBhM,QAASpX,EAAQoX,QACjBT,YAAa3W,EAAQ2W,YACrB8B,MAAOzY,EAAQyY,MACfC,aAAc1Y,EAAQ0Y,wCCY9B,WAKI,SAAAohC,EACYt1B,EACAorB,EACAmK,EACApS,EACAjzC,GAJA9O,KAAA4+B,SACA5+B,KAAAgqD,sBACAhqD,KAAAm0D,+BACAn0D,KAAA+hD,+BACA/hD,KAAA8O,gBAER9O,KAAK+O,QAAUnJ,OAiOvB,OA9NIsuD,EAAAh1D,UAAAiR,WAAA,SAAWnM,GAAX,IAAAjE,EAAAC,KACYgiD,EAAAh+C,EAAAu5C,OAAuBr1C,EAAAlE,EAAAkE,SAEzByyB,EADQ36B,KAAK4+B,OAAO1nB,WACEihB,eAAeE,iBAAiBnwB,GAE5D,IAAK85C,EACD,MAAM,IAAIxiB,GAAA,EAAqB,mFAGnC,IAAK7E,EACD,MAAM,IAAImG,EAAA,EAAiBA,EAAA,EAAqBngC,sBAMpD,OAHAX,KAAKo0D,eAAiBpS,EACtBhiD,KAAK6gC,eAAiBlG,EAEf,IAAI9pB,QAAQ,SAACY,EAAS27B,GAOzBrtC,EAAK+O,cAAcmuC,WAAWtiB,EANd,WACZ56B,EAAKs0D,cAAcrS,GACdx6C,KAAKiK,GACL3J,MAAMslC,KAIVtlC,MAAMslC,KAEV5lC,KAAK,WAAM,OAAAzH,EAAK6+B,OAAO1nB,cAGhCg9C,EAAAh1D,UAAA4gC,aAAA,WAGI,OAFA9/B,KAAKo0D,oBAAiBhsD,EAEfyI,QAAQY,QAAQzR,KAAK4+B,OAAO1nB,aAGvCg9C,EAAAh1D,UAAAyoD,QAAA,SAAQr0C,EAA2BtP,GAAnC,IAAAjE,EAAAC,KACUs0D,EAAct0D,KAAKu0D,uBACnBC,EAAWx0D,KAAKy0D,iBAEtB,IAAKH,IAAgBE,EACjB,MAAM,IAAIlyB,GAAA,EAAoBA,GAAA,EAAwB9xB,uBAG1D,IAAK8C,EAAQkV,QACT,MAAM,IAAIgX,GAAA,EAAqB,kFAG3B,IAAA58B,EAAA0Q,EAAAkV,QAAwBonC,GAAbhtD,EAAA2iC,YAAa3jC,EAAA,OAAAgB,EAAA,kBAAqBC,EAAAyQ,EAAAomB,sBAAA,IAAA72B,KAErD,OAAImB,GAAWhE,KAAK6gC,gBAAkB7gC,KAAK6gC,eAAe1pB,OAAOu9C,aACtD10D,KAAK20D,uBACRH,EACAF,EACA1E,EAAe1nD,SACfwxB,EACA11B,GAIDhE,KAAK4+B,OAAOgB,SACf5/B,KAAK+hD,6BAA6B9B,kBAAkB2P,EAAe1nD,SAAU,CAAEosD,YAAWA,EAAE56B,eAAcA,KAEzGlyB,KAAK,WAAM,OAAAzH,EAAK6+B,OAAOgB,SACpB7/B,EAAKiqD,oBAAoBzD,YAAY3kD,EAAA,YAC9B0R,EAAO,CACVkV,QAASonC,IACV5rD,MAEN8D,MAAM,SAAAC,GACH,OAAIA,aAAiB6U,GAAA,GAAoC,0BAApB7U,EAAMxF,KAAKtC,MAAoCF,EAAKq0D,eAC9Er0D,EAAKs0D,cAAct0D,EAAKq0D,gBAC1B5sD,KAAK,WAAM,OAAAqJ,QAAQu8B,OAAOrlC,KAG5B8I,QAAQu8B,OAAOrlC,MAIlCmsD,EAAAh1D,UAAAkrD,SAAA,WACI,OAAOv5C,QAAQu8B,OAAO,IAAIkd,KAGtB4J,EAAAh1D,UAAAu1D,eAAR,WACI,OAAOz0D,KAAK6gC,gBAAkB7gC,KAAK6gC,eAAe1pB,OAAO6vB,YAGrDktB,EAAAh1D,UAAAq1D,qBAAR,WACI,IACMhX,EADQv9C,KAAK4+B,OAAO1nB,WACLgkB,eAAezjB,YAAY,UAEhD,OAAO8lC,EAASA,EAAO+W,iBAAclsD,GAGjC8rD,EAAAh1D,UAAAm1D,cAAR,SAAsBrwD,GAAtB,IAAAjE,EAAAC,KACI,OAAO,IAAI6Q,QAAQ,SAACY,EAAS27B,GACjB,IAAA3N,EAAAz7B,EAAAy7B,UAAW78B,EAAAoB,EAAAo+B,eAAA,IAAAx/B,EAAAkK,GAAA,KAAAlK,EAAgBC,EAAAmB,EAAA4wD,uBAAA,IAAA/xD,EAAAiK,GAAA,KAAAjK,EAAwBE,EAAAiB,EAAA6wD,eAAA,IAAA9xD,EAAA+J,GAAA,KAAA/J,EACrDuxD,EAAcv0D,EAAKw0D,uBACnBvtB,EAAajnC,EAAK00D,iBAExB,IAAKzgD,SAASgxB,eAAevF,GACzB,OAAO2N,EAAO,IAAI5N,GAAA,EAAqB,yEAG3C,IAAKz/B,EAAKgP,QAAQ6uC,kBACd,OAAOxQ,EAAO,IAAI9K,GAAA,EAAoBA,GAAA,EAAwB9xB,wBAGlE,IAAKw2B,EACD,OAAOoG,EAAO,IAAItM,EAAA,EAAiBA,EAAA,EAAqBngC,uBAG5D,IAAMm0D,EAAwC,CAC1CC,uBAAwBT,EACxBU,OAAQ,CAAEC,WAAY,cACtB3S,MAAO,6EACPkS,SAAUxtB,EACV5E,QAAS,SAAAr6B,GACLqlC,EAAOrlC,GACPq6B,EAAQr6B,IAEZ6sD,gBAAiB,SAAAM,GACbn1D,EAAKo1D,6BACA3tD,KAAK,WAAM,OAAAotD,EAAgBM,KAC3BptD,MAAMs6B,IAEfyyB,QAAS,SAAAK,GACLzjD,IACAojD,EAAQK,KAIXJ,EAAcC,yBACfD,EAAcD,QAAU,SAAAK,GACpBn1D,EAAKq1D,sBAAsBF,GACtB1tD,KAAK,WACFiK,IACAojD,EAAQK,KAEXptD,MAAMs6B,KAInB,IAAMizB,EAAS,IAAIt1D,EAAKgP,QAAQ6uC,kBAAkB0X,QAAQC,OAAOT,GAIjE,OAFAO,EAAOv2D,KAAK2gC,GAEL41B,KAIPnB,EAAAh1D,UAAAi2D,2BAAR,eAAAp1D,EAAAC,KACUs0D,EAAct0D,KAAKu0D,uBACnBrsD,EAAWlI,KAAK6gC,gBAAkB7gC,KAAK6gC,eAAe51B,GAE5D,IAAK/C,IAAaosD,EACd,MAAM,IAAIkB,GAAA,EAGd,OAAOx1D,KAAK4+B,OAAOgB,SACf5/B,KAAK+hD,6BAA6BjC,kBAAkB53C,EAAU,CAAEosD,YAAWA,KAE1E9sD,KAAK,SAAA2Q,GACF,IAAMolC,EAASplC,EAAM+iB,eAAezjB,YAAY,UAC1Cg+C,EAAgBlY,GAAUA,EAAOxwB,SAAWwwB,EAAOxwB,QAAQ3S,QAC3DsF,EAAiBvH,EAAMuH,eAAe4U,oBACtCohC,EAAyBh2C,GAAkB1hB,OAAAqvD,GAAA,EAAArvD,CAAqB0hB,GAEtE,IAAsB,IAAlB+1C,EACA,MAAM,IAAID,GAAA,EAGd,OAAKC,GAAiB1B,GAAuB0B,EAAeC,GAA0B,IAC3E31D,EAAK6+B,OAAO1nB,WAGhBnX,EAAK6+B,OAAOgB,SACf7/B,EAAKo0D,6BAA6Bh6C,cAAc85C,GAAuBwB,QAK/EvB,EAAAh1D,UAAAk2D,sBAAR,SAA8BF,GAC1B,OAAOl1D,KAAK4+B,OAAOgB,SACf5/B,KAAK+hD,6BAA6BxqC,eAAe,SAAU,CACvD+8C,YAAaY,EAAeS,gCAKhCzB,EAAAh1D,UAAAy1D,uBAAR,SAA+BH,EAAkBF,EAAqBpsD,EAAkBwxB,EAAyB11B,GAAjH,IAAAjE,EAAAC,KACI,OAAO,IAAI6Q,QAAQ,SAAC6D,EAAG04B,GACnB,OAAKrtC,EAAKgP,QAAQ6uC,kBAIX79C,EAAKgP,QAAQ6uC,kBAAkBgY,qBAClCpB,EACAF,EACA,SAACuB,GACG,OAAO91D,EAAK6+B,OAAOgB,SACf7/B,EAAKiqD,oBAAoBzD,YAAY,CAAC7sB,eAAcA,GAAG11B,IAEtDwD,KAAK,WAAM,OAAAzH,EAAK6+B,OAAOgB,SACpB7/B,EAAKgiD,6BAA6B9B,kBAAkB/3C,EAAU,CAC1DosD,YAAWA,EACX56B,eAAcA,OAGrBlyB,KAAK,WAGF,OAFAquD,EAAiBC,UAEV,IAAIjlD,QAAe,gBAE7B/I,MAAM,SAAAC,GAGH,OAFA8tD,EAAiB9tD,QAEVqlC,EAAOrlC,OAxBnBqlC,EAAO,IAAI9K,GAAA,EAAoBA,GAAA,EAAwB9xB,2BA8B9E0jD,EA7OA,MCtBA,WAII,SAAA6B,EAAY/xD,GACRhE,KAAKg2D,SAAWh2D,KAAKi2D,eAAejyD,GAyF5C,OAtFI+xD,EAAA72D,UAAAitC,KAAA,SAAKnoC,GAAL,IAAAjE,EAAAC,KACQA,KAAKg2D,SAASjN,gBAIlB/oD,KAAKk2D,eAAelyD,GAEpBgQ,SAASzR,KAAK6iC,YAAYplC,KAAKg2D,UAG/B5lB,WAAW,WAAM,OAAArwC,EAAKi2D,SAASn0B,MAAM2M,QAAU,QAGnDunB,EAAA72D,UAAAi3D,OAAA,eAAAp2D,EAAAC,KACSA,KAAKg2D,SAASjN,gBAIf/oD,KAAKo2D,kBACLp2D,KAAKo2D,mBAGTp2D,KAAKq2D,yBAELjmB,WAAW,WAAM,OAAArwC,EAAKi2D,SAASn0B,MAAM2M,QAAU,QAG3CunB,EAAA72D,UAAA+2D,eAAR,SAAuBjyD,GACnB,IAAMsyD,EAAUtiD,SAASC,cAAc,OACjCrR,EAAAoB,GAAA,GACFnB,EAAAD,EAAA2zD,kBAAA,IAAA1zD,EAAA,qBAAAA,EACAE,EAAAH,EAAAqI,UAAA,IAAAlI,EAAA,KAAAA,EACAgrB,EAAAnrB,EAAA4zD,0BAAA,IAAAzoC,EAAA,IAAAA,EAkBJ,OAfAuoC,EAAQz0B,MAAM00B,WAAaA,EAC3BD,EAAQz0B,MAAM6M,QAAU,QACxB4nB,EAAQz0B,MAAMgN,OAAS,OACvBynB,EAAQz0B,MAAM+M,KAAO,MACrB0nB,EAAQz0B,MAAM2M,QAAU,IACxB8nB,EAAQz0B,MAAMkN,SAAW,QACzBunB,EAAQz0B,MAAMoN,IAAM,MACpBqnB,EAAQz0B,MAAMqN,WAAa,WAAWsnB,EAAkB,cACxDF,EAAQz0B,MAAMiN,MAAQ,OACtBwnB,EAAQz0B,MAAM40B,OAAS,aAEnBxrD,IACAqrD,EAAQrrD,GAAKA,GAGVqrD,GAGHP,EAAA72D,UAAAg3D,eAAR,SAAuBlyD,GAAvB,IAAAjE,EAAAC,KAKI,GAJIA,KAAKo2D,kBACLp2D,KAAKo2D,mBAGLpyD,GAAWA,EAAQ0yD,QAAS,CACpB,IAAAC,EAAA3yD,EAAA0yD,QAER12D,KAAKg2D,SAASxsD,iBAAiB,QAASmtD,GAExC32D,KAAKo2D,iBAAmB,WACpBr2D,EAAKi2D,SAASrsD,oBAAoB,QAASgtD,GAC3C52D,EAAKq2D,sBAAmBhuD,KAK5B2tD,EAAA72D,UAAAm3D,uBAAR,eAAAt2D,EAAAC,KACU42D,EAA0C,SAAAjxD,GAEI,YAA3CA,EAA0BkxD,eAI3B92D,EAAKi2D,SAASjN,eACdhpD,EAAKi2D,SAASjN,cAAchkB,YAAYhlC,EAAKi2D,UAGjDj2D,EAAKi2D,SAASrsD,oBAAoB,gBAAiBitD,KAGvD52D,KAAKg2D,SAASxsD,iBAAiB,gBAAiBotD,IAExDb,EA9FA,MCVA,WAWA,OAPI,SAAYe,GAAZ,IAAA/2D,EAAAC,KACU+2D,EAAc,IAAIlmD,QAAW,SAAC6D,EAAG04B,GACnCrtC,EAAKi3D,OAAS5pB,IAGlBptC,KAAK82D,QAAUjmD,QAAQomD,KAAK,CAACH,EAASC,KAT9C,MCYA,WAGI,SAAAG,EACY52B,EACA62B,GADAn3D,KAAAsgC,uBACAtgC,KAAAm3D,WA4HhB,OAzHID,EAAAh4D,UAAAiR,WAAA,SAAWC,EAAqBpM,GAC5BhE,KAAKsgC,qBAAqBnwB,WAAWC,GACrCpQ,KAAKo3D,qBAAuBpzD,GAAWA,EAAQqL,cAGnD6nD,EAAAh4D,UAAAm4D,cAAA,WACI,OAAOr3D,KAAKsgC,qBAAqB3vB,aAGrCumD,EAAAh4D,UAAAo4D,aAAA,SAAa9uC,EAAkC9I,GACnC,IAAA6lB,EAAA/c,EAAA+c,YACFgyB,EAAcv3D,KAAKw3D,iBAAiBjyB,EAAqC7lB,GAE/E,OAAO1f,KAAKsgC,qBAAqBhwB,YAC5B9I,KAAK,SAAA2H,GAAU,OAAAA,EAAOwM,QAAQ47C,KAC9B/vD,KAAK,SAAC5E,GAAoB,OACvBg4B,MADKh4B,EAAA60D,YACc,GAAG78B,UAIlCs8B,EAAAh4D,UAAAuQ,OAAA,SAAOtE,EAAgB83C,EAAuBngB,EAAkBC,GAAhE,IAAAhjC,EAAAC,KACI,OAAOA,KAAKsgC,qBAAqB3vB,YAC5BnJ,KAAK,SAAAiI,GAKF,OAJA1P,EAAKo3D,SAAShrB,KAAK,CACfuqB,QAAS,WAAM,OAAAjnD,EAAOioD,iBAGnBjoD,EAAO6uC,SAAS,CACnBnzC,OAAMA,EACN23B,SAAQA,EACRJ,uBAAuB,EACvBD,KAAM,WACNwb,OAAQgF,EACRlgB,YAAWA,EACX40B,WAAY,aAGnBnwD,KAAK,SAAA7E,GAGF,OAFA5C,EAAKo3D,SAAShB,SAEPxzD,IAEVmF,MAAM,SAAAC,GAGH,MAFAhI,EAAKo3D,SAAShB,SAERpuD,KAIlBmvD,EAAAh4D,UAAA04D,WAAA,SAAWpvC,EAAkC9I,EAAyBvU,GAClE,IAAKnL,KAAKo3D,qBACN,MAAM,IAAI90B,GAAA,EAAoBA,GAAA,EAAwB9xB,uBAGpD,IAAA5N,EAAA5C,KAAAo3D,qBAAES,EAAAj1D,EAAAi1D,SAAUC,EAAAl1D,EAAAk1D,YAElB,OAAOjnD,QAAQC,IAAI,CACf9Q,KAAKs3D,aAAa9uC,EAAS9I,GAC3B1f,KAAKsgC,qBAAqBrvB,WAC3BzJ,KAAK,SAAC5E,OAAC2iC,EAAA3iC,EAAA,GAAayM,EAAAzM,EAAA,GACXg4B,EAAA2K,EAAA3K,MACFm9B,EAAmB,WAAM,OAAA1oD,EAAa0oD,mBACvCvwD,KAAK,SAAA7E,GAGF,OAFAq1D,EAAahB,OAAO,IAAIxH,IAEjB7sD,KAGTq1D,EAAe,IAAIC,GACrB5oD,EAAauoD,WAAW,CACpBC,SAAU,SAAC9vD,EAAOwkC,GACdsrB,EAAS9vD,EAAOwkC,EAAQwrB,IAE5B5sD,OAAMA,EACNyvB,MAAKA,EACLk9B,YAAWA,KAInB,OAAOE,EAAalB,WAI5BI,EAAAh4D,UAAAg5D,gBAAA,SAAgBC,GAAhB,IAAAp4D,EAAAC,KACI,OAAOm4D,EACF3wD,KAAK,SAAA+9B,GAAe,OAAA10B,QAAQC,IAAI,CAACy0B,EAAaxlC,EAAKugC,qBAAqBnvB,uBACxE3J,KAAK,SAAC5E,OAAC2iC,EAAA3iC,EAAA,GAAe2O,EAAA3O,EAAA,GAAA2O,WAAkB,OAAC3P,EAAA,YAAK2jC,EAAW,CAAE79B,gBAAiB6J,OAGrF2lD,EAAAh4D,UAAA4gC,aAAA,WACI,OAAO9/B,KAAKsgC,qBAAqB9uB,YAG7B0lD,EAAAh4D,UAAAs4D,iBAAR,SAAyBY,EAAkC14C,GACvD,IAAIu/B,EAAgBv/B,EAAe8S,SAMnC,OAJI9S,EAAe+S,WACfwsB,EAAgB,IAAIv/B,EAAe+S,UAGhC,CACHnoB,KAAM,CACF8tD,WAAY,CACRC,eAAgBD,EAAWE,OAC3BlZ,OAAQgZ,EAAWG,SACnBC,IAAKJ,EAAWK,MAChBC,eAAmBN,EAAWO,SAASC,MAAK,IAAIR,EAAWO,SAASE,KACpE70D,QAAS,CACLojD,UAAU,GAEd1nC,eAAgB,CACZ+zC,YAAa/zC,EAAe8R,QAC5BoB,WAAYlT,EAAekT,WAC3BqsB,cAAaA,KAIzB6Z,SAAU,+BACV/jD,OAAQ,SAGpBmiD,EAjIA,GCTe,SAAA6B,GAA0BhtC,GACrC,IAAM0qB,EAAO1qB,EAEb,OAAQygC,GAAoB/V,IACD,iBAAhBA,EAAK6hB,QACa,iBAAlB7hB,EAAK8hB,UACa,iBAAlB9hB,EAAKkiB,UACmB,iBAAxBliB,EAAKkiB,SAASC,OACS,iBAAvBniB,EAAKkiB,SAASE,KCI7B,kBAGI,SAAAG,EACYp6B,EACAorB,EACA0E,EACAzuB,EACAg5B,GAJAj5D,KAAA4+B,SACA5+B,KAAAgqD,sBACAhqD,KAAA0uD,wBACA1uD,KAAAigC,8BACAjgC,KAAAi5D,6BA4FhB,OAzFID,EAAA95D,UAAAiR,WAAA,SAAWnM,GAAX,IAAAjE,EAAAC,KACI,OAAOA,KAAK4+B,OAAOgB,SAAS5/B,KAAKigC,4BAA4Bh4B,kBAAkBjE,EAAQkE,WAClFV,KAAK,SAAA2Q,GACF,IAAMwiB,EAAgBxiB,EAAMggB,eAAeE,iBAAiBr0B,EAAQkE,UAEpE,IAAKyyB,IAAkBA,EAAcvqB,YACjC,MAAM,IAAI0wB,EAAA,EAAiBA,EAAA,EAAqBngC,sBAMpD,OAHAZ,EAAKk5D,2BAA2B9oD,WAAWwqB,EAAcvqB,YAAapM,EAAQkL,WAC9EnP,EAAKm5D,cAAgBv+B,EAAcxjB,OAAOu9C,aAEnC30D,EAAK6+B,OAAO1nB,aAEtBpP,MAAM,SAACC,GAAiB,OAAAhI,EAAKo5D,aAAapxD,MAGnDixD,EAAA95D,UAAAyoD,QAAA,SAAQyR,EAAgCp1D,GAAxC,IAAAjE,EAAAC,KACYwoB,EAAA4wC,EAAA5wC,QAASH,EAAAzmB,EAAA,OAAAw3D,EAAA,aAEjB,IAAK5wC,EACD,MAAM,IAAIumC,GAA4B,CAAC,YAG3C,OAAO/uD,KAAK4+B,OAAOgB,SACf5/B,KAAKgqD,oBAAoBzD,YAAYl+B,EAAOrkB,IAE3CwD,KAAK,SAAA2Q,GACF,OAAAA,EAAMqQ,QAAQiN,sBAAsBpN,EAAMqR,iBAAmBlR,EACzDzoB,EAAKs5D,oBAAoB7wC,GACzB3X,QAAQY,QAAQ+W,KAEvBhhB,KAAK,SAAAghB,GACF,OAAAzoB,EAAK6+B,OAAOgB,SAAS7/B,EAAK2uD,sBAAsB5C,cAActjC,MAEjE1gB,MAAM,SAACC,GAAiB,OAAAhI,EAAKo5D,aAAapxD,MAGnDixD,EAAA95D,UAAAkrD,SAAA,WACI,OAAOv5C,QAAQu8B,OAAO,IAAIkd,KAG9B0O,EAAA95D,UAAA4gC,aAAA,eAAA//B,EAAAC,KACI,OAAOA,KAAKi5D,2BAA2Bn5B,eAClCt4B,KAAK,WAAM,OAAAzH,EAAK6+B,OAAO1nB,cAGxB8hD,EAAA95D,UAAAi6D,aAAR,SAAqBpxD,GACjB,GAAmB,mBAAfA,EAAMlK,KACN,MAAM,IAAIgtC,EAAA,EAAc9iC,EAAM1G,SAGlC,MAAM0G,GAGFixD,EAAA95D,UAAAo6D,iBAAR,SAAyB/zB,GACrB,OAAIwzB,GAAiBxzB,GACVrT,QAAQqT,EAAYg0B,sBAGxB/M,GAAoBjnB,IAGvByzB,EAAA95D,UAAAm6D,oBAAR,SAA4B7wC,GAChB,IAAA+c,EAAA/c,EAAA+c,YACFptB,EAAQnY,KAAK4+B,OAAO1nB,WAE1B,GAAIquB,GAAevlC,KAAKs5D,iBAAiB/zB,GACrC,OAAO10B,QAAQY,QAAQ+W,GAG3B,IAAMH,EAAQlQ,EAAMkQ,MAAM2R,WACpBta,EAAiBvH,EAAMuH,eAAe4U,oBAE5C,IAAKjM,EACD,MAAM,IAAIyY,EAAA,EAAiBA,EAAA,EAAqBtgC,cAGpD,IAAKkf,EACD,MAAM,IAAIohB,EAAA,EAAiBA,EAAA,EAAqB5gC,uBAGpD,IAAMs5D,EAAgBx5D,KAAKk5D,cACvBl5D,KAAKi5D,2BAA2BrB,WAAWpvC,EAAS9I,EAAgB2I,EAAMixB,aAC1Et5C,KAAKi5D,2BAA2B3B,aAAa9uC,EAAS9I,GAE1D,OAAO1f,KAAKi5D,2BAA2Bf,gBAAgBsB,GAClDhyD,KAAK,SAAA+9B,GAAe,OAAC3jC,EAAA,YAAK4mB,EAAO,CAAE+c,YAAWA,OAE3DyzB,EApGA,GCCA,IC0BYS,GAuGAC,GAKAC,GAOAC,GASAC,GAIAC,GAIAC,MD9JZ,WAGI,SAAAC,EACYp7B,EACAorB,EACA0E,EACAzuB,EACAg5B,EACAgB,QAAA,IAAAA,OAAA,GALAj6D,KAAA4+B,SACA5+B,KAAAgqD,sBACAhqD,KAAA0uD,wBACA1uD,KAAAigC,8BACAjgC,KAAAi5D,6BACAj5D,KAAAi6D,UA4FhB,OAzFID,EAAA96D,UAAAiR,WAAA,SAAWnM,GAAX,IAAAjE,EAAAC,KACYk6D,EAAAl2D,EAAAkL,UAA6BhH,EAAAlE,EAAAkE,SAIrC,OAFAlI,KAAK6gC,eAAiB7gC,KAAK4+B,OAAO1nB,WAAWihB,eAAeE,iBAAiBnwB,GAEzElI,KAAK6gC,gBAAkB7gC,KAAK6gC,eAAejG,MACpC/pB,QAAQY,QAAQzR,KAAK4+B,OAAO1nB,YAGhClX,KAAK4+B,OAAOgB,SAAS5/B,KAAKigC,4BAA4Bh4B,kBAAkBC,IAC1EV,KAAK,SAAA2Q,GAGF,GAFApY,EAAK8gC,eAAiB1oB,EAAMggB,eAAeE,iBAAiBnwB,IAEvDnI,EAAK8gC,iBAAmB9gC,EAAK8gC,eAAezwB,YAC7C,MAAM,IAAI0wB,EAAA,EAAiBA,EAAA,EAAqBngC,sBAKpD,OAFAZ,EAAKk5D,2BAA2B9oD,WAAWpQ,EAAK8gC,eAAezwB,YAAa8pD,GAErEn6D,EAAKk5D,2BAA2B5B,kBAE1C7vD,KAAK,WAAM,OAAAzH,EAAK6+B,OAAO1nB,aACvBpP,MAAM,SAACC,GAAiB,OAAAhI,EAAKo5D,aAAapxD,MAGnDiyD,EAAA96D,UAAAyoD,QAAA,SAAQyR,EAAgCp1D,GAAxC,IAAAjE,EAAAC,KACYwoB,EAAA4wC,EAAA5wC,QAASH,EAAAzmB,EAAA,OAAAw3D,EAAA,aAEjB,IAAK5wC,EACD,MAAM,IAAIumC,GAA4B,CAAC,YAG3C,OAAQvmC,EAAUxoB,KAAKq5D,oBAAoB7wC,EAASH,EAAMqR,gBAAkB7oB,QAAQY,QAAQ+W,IACvFhhB,KAAK,SAAAghB,GAAW,OAAA3X,QAAQC,IAAI,CAAC0X,EAASzoB,EAAK6+B,OAAOgB,SAAS7/B,EAAKiqD,oBAAoBzD,YAAYl+B,EAAOrkB,QACvGwD,KAAK,SAAC5E,OAAC4lB,EAAA5lB,EAAA,GAAa,OAAA7C,EAAK6+B,OAAOgB,SAAS7/B,EAAK2uD,sBAAsB5C,cAActjC,MAClF1gB,MAAM,SAACC,GAAiB,OAAAhI,EAAKo5D,aAAapxD,MAGnDiyD,EAAA96D,UAAAkrD,SAAA,WACI,OAAOv5C,QAAQu8B,OAAO,IAAIkd,KAG9B0P,EAAA96D,UAAA4gC,aAAA,eAAA//B,EAAAC,KACI,OAAOA,KAAKi5D,2BAA2Bn5B,eAClCt4B,KAAK,WAAM,OAAAzH,EAAK6+B,OAAO1nB,cAGxB8iD,EAAA96D,UAAAi6D,aAAR,SAAqBpxD,GACjB,IE1EO,SAA0BA,GACrC,MAAsB,mBAAfA,EAAMlK,KFyEJs8D,CAAiBpyD,GAClB,MAAMA,EAGV,GAAmB,wBAAfA,EAAMuJ,KACN,MAAM,IAAIk+C,GAA4BznD,EAAM1G,SAGhD,MAAM,IAAIwpC,EAAA,EAAc9iC,EAAM1G,UAG1B24D,EAAA96D,UAAAm6D,oBAAR,SAA4B7wC,EAAkCkR,GAC1D,IAAMvhB,EAAQnY,KAAK4+B,OAAO1nB,WACpByiB,EAAaxhB,EAAMX,SAASiiB,cAAcC,GAC1CviB,EAASgB,EAAMhB,OAAO+e,iBAE5B,IAAKyD,EACD,MAAM,IAAImH,EAAA,EAAiBA,EAAA,EAAqBzgC,iBAGpD,IAAK8W,EACD,MAAM,IAAI2pB,EAAA,EAAiBA,EAAA,EAAqBxgC,uBAGpD,IAAKN,KAAK6gC,eACN,MAAM,IAAIyB,GAAA,EAAoBA,GAAA,EAAwB9xB,uBAGlD,IAAAsyB,EAAA3rB,EAAA2rB,SAA0BmgB,EAAA9rC,EAAA6rC,aAAAC,cAC5BrgD,EAAA5C,KAAA6gC,eAAE9rB,EAAAnS,EAAAmS,OAAQ6lB,EAAAh4B,EAAAg4B,MAEhB,GAAIA,EACA,OAAO/pB,QAAQY,QAAQ7P,EAAA,YAAK4mB,EAAO,CAAE+c,YAAa,CAAE3K,MAAKA,EAAE7lB,OAAMA,MAGrE,IAAMykD,EAAgBx5D,KAAKi5D,2BACtBxpD,OAAOkqB,EAAYspB,EAAengB,EAASxxB,KAAMtR,KAAKi6D,SAE3D,OAAOj6D,KAAKi5D,2BAA2Bf,gBAAgBsB,GAClDhyD,KAAK,SAAA+9B,GAAe,OAAC3jC,EAAA,YAAK4mB,EAAO,CAAE+c,YAAa3jC,EAAA,YAAK2jC,EAAW,CAAExwB,OAAMA,SAErFilD,EArGA,MGDA,WAGI,SAAAI,EACYx7B,EACAyB,EACAJ,EACAo6B,EACA3L,EACA1E,EACAtH,EACAC,GAPA3iD,KAAA4+B,SACA5+B,KAAAqgC,yBACArgC,KAAAigC,8BACAjgC,KAAAq6D,gCACAr6D,KAAA0uD,wBACA1uD,KAAAgqD,sBACAhqD,KAAA0iD,yCACA1iD,KAAA2iD,4BAoHhB,OAjHIyX,EAAAl7D,UAAAiR,WAAA,SAAWnM,GAAX,IAAAjE,EAAAC,KACY6iD,EAAA7+C,EAAA8+C,sBAA4C56C,EAAAlE,EAAAkE,SAEpD,IAAK26C,EACD,MAAM,IAAIrjB,GAAA,EAAqB,kGAGnC,OAAOx/B,KAAK4+B,OAAOgB,SAAS5/B,KAAKigC,4BAA4Bh4B,kBAAkBC,IAC1EV,KAAK,SAAA2Q,GACFpY,EAAK8gC,eAAiB1oB,EAAMggB,eAAeE,iBAAiBnwB,GAE5D,IAAMsP,EAAWW,EAAMX,SAASC,cAC1BwZ,EAAc9Y,EAAMhB,OAAO+e,iBAEjC,IAAK1e,EACD,MAAM,IAAIspB,EAAA,EAAiBA,EAAA,EAAqBzgC,iBAGpD,IAAK4wB,EACD,MAAM,IAAI6P,EAAA,EAAiBA,EAAA,EAAqBxgC,uBAGpD,IAAKP,EAAK8gC,iBAAmB9gC,EAAK8gC,eAAezwB,YAC7C,MAAM,IAAI0wB,EAAA,EAAiBA,EAAA,EAAqBngC,sBAIhD,IAAAiC,EAAAigD,EAAAzgB,eAAA,IAAAx/B,EAAA,aAAAA,EACAC,EAAAggD,EAAA+R,uBAAA,IAAA/xD,EAAA,aAAAA,EAGEkgD,EAAc,CAChB9E,OAAQhtB,EAAY+xB,aAAaC,cACjC/E,iBAAiB,EACjBhG,SAAU1gC,EAAS0gC,SACnBvD,aAAc1jB,EAAY6R,SAASxxB,MAGvC,OAAOT,QAAQC,IAAI,CACf/Q,EAAK4iD,0BAA0B1c,KAAKlmC,EAAK8gC,eAAe1pB,OAAOoqB,UAC/DxhC,EAAK2iD,uCAAuCvyC,WAAWpQ,EAAK8gC,eAAezwB,YAAa2yC,KAE3Fv7C,KAAK,SAAC5E,OAACiN,EAAAjN,EAAA,GAAc03D,EAAA13D,EAAA,GAClBiN,EAAaszC,KAAKmX,GAClBzqD,EAAauzC,GAAG,kBAAmB,SAACC,GAChC,OAAAtjD,EAAKujD,2BAA2BD,GAC3B77C,KAAK,WAAM,OAAAotD,MACX9sD,MAAM,SAAAC,GAAS,OAAAq6B,EAAQr6B,OAEhC8H,EAAauzC,GAAG,gBAAiB,SAAC1uC,EAAG3M,GAAU,OAAAq6B,EAAQr6B,SAG9DP,KAAK,WAAM,OAAAzH,EAAK6+B,OAAO1nB,cAGhCkjD,EAAAl7D,UAAAyoD,QAAA,SAAQyR,EAAgCp1D,GAAxC,IAAAjE,EAAAC,KACYwoB,EAAA4wC,EAAA5wC,QAASH,EAAAzmB,EAAA,OAAAw3D,EAAA,aAEjB,IAAK5wC,EACD,MAAM,IAAIgX,GAAA,EAAqB,gFAGnC,IAAKx/B,KAAK6gC,iBAAmB7gC,KAAK6gC,eAAemF,qBAAuBhmC,KAAK6gC,eAAemF,mBAAmBpL,MAC3G,MAAM,IAAIkG,EAAA,EAAiBA,EAAA,EAAqBngC,sBAG5C,IAAAi6B,EAAA56B,KAAA6gC,eAAAmF,mBAAApL,MAER,OAAO56B,KAAK4+B,OAAOgB,SAAS5/B,KAAKgqD,oBAAoBzD,YAAYl+B,EAAOrkB,IACnEwD,KAAK,WACF,OAAAzH,EAAK6+B,OAAOgB,SAAS7/B,EAAK2uD,sBAAsB5C,cAAclqD,EAAA,YAAK4mB,EAAO,CAAE+c,YAAa,CAAE3K,MAAKA,SAEnG9yB,MAAM,SAACC,GAAiB,OAAAhI,EAAKo5D,aAAapxD,MAGnDqyD,EAAAl7D,UAAAkrD,SAAA,WACI,OAAOv5C,QAAQu8B,OAAO,IAAIkd,KAG9B8P,EAAAl7D,UAAA4gC,aAAA,eAAA//B,EAAAC,KACI,OAAOA,KAAK0iD,uCAAuC5iB,eAC9Ct4B,KAAK,WAAM,OAAAzH,EAAK6+B,OAAO1nB,cAGxBkjD,EAAAl7D,UAAAokD,2BAAR,SAAmCD,GAAnC,IAAAtjD,EAAAC,KACUmY,EAAQnY,KAAK4+B,OAAO1nB,WAE1B,IAAKlX,KAAK6gC,eACN,MAAM,IAAIp/B,MAAM,kCAGZ,IAAAyG,EAAAlI,KAAA6gC,eAAA51B,GAER,OAAOjL,KAAK4+B,OAAOgB,SAAS5/B,KAAKq6D,8BAA8Btd,kBAAkB,WAC7E,OAAOh9C,EAAK2iD,uCAAuCld,cAC/C6d,EACAlrC,EAAMK,gBAAgByc,qBACtB9c,EAAMuH,eAAe4U,qBAExB9sB,KAAK,WAAM,OAAAqJ,QAAQC,IAAI,CACpB/Q,EAAK6+B,OAAOgB,SAAS7/B,EAAKsgC,uBAAuBvoB,uBACjD/X,EAAK6+B,OAAOgB,SAAS7/B,EAAKkgC,4BAA4Bh4B,kBAAkBC,SAE7E,CAAEA,SAAQA,IAAK,CAAEy3B,QAAS,uBAGzBy6B,EAAAl7D,UAAAi6D,aAAR,SAAqBpxD,GACjB,GAAmB,mBAAfA,EAAMlK,KACN,MAAM,IAAIgtC,EAAA,EAAc9iC,EAAM1G,SAGlC,MAAM0G,GAEdqyD,EA/HA,MCOA,WAII,SAAAG,EACY37B,EACA8vB,EACAzuB,EACAu6B,GAHAx6D,KAAA4+B,SACA5+B,KAAA0uD,wBACA1uD,KAAAigC,8BACAjgC,KAAAw6D,kBA4HhB,OAzHID,EAAAr7D,UAAAu7D,QAAA,SAAQvyD,GAAR,IAAAnI,EAAAC,KACI,OAAIA,KAAKqQ,aACEQ,QAAQY,UAGZzR,KAAK4+B,OAAOgB,SAAS5/B,KAAKigC,4BAA4Bh4B,kBAAkBC,IAC1EV,KAAK,SAAA2Q,GAGF,GAFApY,EAAK8gC,eAAiB1oB,EAAMggB,eAAeE,iBAAiBnwB,IAEvDnI,EAAK8gC,iBAAmB9gC,EAAK8gC,eAAe1pB,OAC7C,MAAM,IAAI2pB,EAAA,EAAiBA,EAAA,EAAqBngC,sBAGpD,OAAOZ,EAAKy6D,gBAAgBrqD,WAAWjI,EAAUnI,EAAK8gC,eAAe1pB,OAAOoqB,YAE/E/5B,KAAK,WACF,IAAKzH,EAAK8gC,iBAAmB9gC,EAAK8gC,eAAezwB,YAC7C,MAAM,IAAI0wB,EAAA,EAAiBA,EAAA,EAAqBngC,sBAKpD,OAFAZ,EAAKsQ,aAAetQ,EAAK8gC,eAAezwB,YAEjCrQ,EAAKy6D,gBAAgBrW,UAAUpkD,EAAKsQ,iBAIvDkqD,EAAAr7D,UAAAw7D,MAAA,SAAMlyC,GAAN,IAAAzoB,EAAAC,KACI,IAAKwoB,EAAQ+c,YACT,MAAM,IAAIzE,EAAA,EAAiBA,EAAA,EAAqBpgC,gBAGpD,IAAKq4D,GAAiBvwC,EAAQ+c,eAAiBinB,GAAoBhkC,EAAQ+c,aACvE,MAAM,IAAI/F,GAAA,EAGd,IAAM+F,EAAc/c,EAAQ+c,YAE5B,OAAOvlC,KAAKw6D,gBAAgBG,cAAc36D,KAAK46D,cAAcr1B,IACxD/9B,KAAK,WACF,IAAKzH,EAAKsQ,aACN,MAAM,IAAIywB,EAAA,EAAiBA,EAAA,EAAqBngC,sBAWpD,OARA6nB,EAAU5mB,EAAA,YACH4mB,EAAO,CACV+c,YAAa3jC,EAAA,YACN2jC,EAAW,CACdl2B,aAAc,CAAEkZ,MAAOxoB,EAAKsQ,kBAI7BtQ,EAAK6+B,OAAOgB,SAAS7/B,EAAK2uD,sBAAsB5C,cAActjC,MAExE1gB,MAAM,SAAAC,GACH,OAAMA,aAAiB6U,GAAA,GAAkB5e,OAAA8O,GAAA,KAAA9O,CAAK+J,EAAMxF,KAAKO,OAAQ,CAACwO,KAAM,4BAIjEvR,EAAKy6D,gBAAgBK,oBACxB9yD,EAAMxF,KAAKu4D,gBACX/6D,EAAKg7D,cAAcx1B,IAEtB/9B,KAAK,SAAA6H,GACF,OAAAtP,EAAK6+B,OAAOgB,SAAS7/B,EAAK2uD,sBAAsB5C,cAAclqD,EAAA,YACvD4mB,EAAO,CACV+c,YAAa3jC,EAAA,YACN2jC,EAAW,CACdl2B,aAAYA,UAZbwB,QAAQu8B,OAAOrlC,MAmB9BwyD,EAAAr7D,UAAA07D,cAAR,SAAsBpyC,GAClB,GAAIgkC,GAAoBhkC,GAAU,CAC9B,IAAMqP,EAAc73B,KAAK4+B,OAAO1nB,WAAW2gB,YAAYD,iBAE/C3L,EAAAzD,EAAAyD,aAEF+uC,EAAQh9D,OAAA8O,GAAA,KAAA9O,CAAK65B,EAAa,CAAE7L,YAAaC,IAE/C,OAAO+uC,GAASA,EAAMC,KAAO,GAGjC,OAAOzyC,EAAQ+vC,UAGXgC,EAAAr7D,UAAA67D,cAAR,SAAsBx1B,GAClB,IAAMptB,EAAQnY,KAAK4+B,OAAO1nB,WACpBwI,EAAiBvH,EAAMuH,eAAe4U,oBACtC9b,EAAkBL,EAAMK,gBAAgByc,qBACxCzd,EAAWW,EAAMX,SAASC,cAC1B4Q,EAAQlQ,EAAMkQ,MAAM2R,WAE1B,IAAKta,IAAmBA,EAAemkB,MACnC,MAAM,IAAI/C,EAAA,EAAiBA,EAAA,EAAqB5gC,uBAGpD,IAAKsX,EACD,MAAM,IAAIspB,EAAA,EAAiBA,EAAA,EAAqBzgC,iBAGpD,IAAKgoB,EACD,MAAM,IAAIyY,EAAA,EAAiBA,EAAA,EAAqBtgC,cAGpD,IAAMgoB,EAA6B,CAC/B9I,eAAcA,EACdlH,gBAAeA,EACfm8B,aAAcn9B,EAASmB,KAAKmqB,SAASxxB,KACrCrG,GAAIod,EAAM6H,QAAQvrB,WAClBwG,OAAQqM,EAASmB,KAAK+tB,YAO1B,OAJIqyB,GAAiBxzB,KACjB/c,EAAQ+c,YAAcA,GAGnB/c,GAEf+xC,EApIA,GHtBaW,GAAoC,CAAC,OAAQ,KAAM,KAAM,OA0CtE,SAAYzB,GACRA,EAAA,YACAA,EAAA,oBACAA,EAAA,kBAHJ,CAAYA,QAA0B,KAuGtC,SAAYC,GACRA,EAAA,wCACAA,EAAA,+BAFJ,CAAYA,QAAiB,KAK7B,SAAYC,GACRA,EAAA,kBACAA,EAAA,oBACAA,EAAA,kBACAA,EAAA,cAJJ,CAAYA,QAAuB,KAOnC,SAAYC,GACRA,EAAA,UACAA,EAAA,gBACAA,EAAA,gBACAA,EAAA,4BACAA,EAAA,oBACAA,EAAA,gCANJ,CAAYA,QAAmB,KAS/B,SAAYC,GACRA,EAAA,yBADJ,CAAYA,QAAqB,KAIjC,SAAYC,GACRA,EAAA,UADJ,CAAYA,QAAoB,KAIhC,SAAYC,GACRA,EAAA,QACAA,EAAA,OAFJ,CAAYA,QAA6B,KIvIzC,ICvCYoB,MDuCZ,WAGI,SAAAC,EACYtsD,GAAA9O,KAAA8O,gBAmKhB,OAhKIssD,EAAAl8D,UAAAiR,WAAA,SAAWgzB,EAAkB5B,GAKzB,OAJKvhC,KAAKq7D,OACNr7D,KAAKq7D,KAAOr7D,KAAK8O,cAAcm3B,KAAK9C,EAAU5B,IAG3CvhC,KAAKq7D,KAAK7zD,KAAK,eAG1B4zD,EAAAl8D,UAAAilD,UAAA,SAAU/zC,GACN,OAAOpQ,KAAKs7D,gBACP9zD,KAAK,SAAA2H,GAAU,WAAI0B,QAAc,SAACY,EAAS27B,GACxCj+B,EAAOi0C,GAAGsW,GAAkB6B,eAAgB,WACxCpsD,EAAOqsD,IAAI9B,GAAkB6B,gBAC7BpsD,EAAOqsD,IAAI9B,GAAkB+B,WAE7BhqD,MAGJtC,EAAOi0C,GAAGsW,GAAkB+B,UAAW,SAACnxD,GAIpC,OAHA6E,EAAOqsD,IAAI9B,GAAkB6B,gBAC7BpsD,EAAOqsD,IAAI9B,GAAkB+B,WAErBnxD,EAAKoxD,YACT,KAAK/B,GAAwBl4D,MACrBzD,OAAA8O,GAAA,SAAA9O,CAASk9D,GAAmC5wD,EAAKqxD,cACjDvuB,EAAO,IAAItM,EAAA,EAAiBA,EAAA,EAAqBngC,uBAErDysC,EAAO,IAAIvC,EAAA,EAAcvgC,EAAKsxD,sBAK1CzsD,EAAO0sD,MAAMpC,GAA2BqC,KAAM,CAC1CC,IAAK3rD,SAKrBgrD,EAAAl8D,UAAAy7D,cAAA,SAAcqB,GACV,OAAOh8D,KAAKs7D,gBACP9zD,KAAK,SAAA2H,GAAU,OAAAA,EAAOhF,QAAQ0vD,GAAsBoC,WAAYD,GAAWl0D,MAAM,gBACjFN,KAAK,SAAAX,GACF,IAAKA,IAAWA,EAAOq1D,OACnB,MAAM,IAAI55B,GAAA,EAAoBA,GAAA,EAAwB9xB,0BAKtE4qD,EAAAl8D,UAAA27D,oBAAA,SAAoBsB,EAAiCC,GAArD,IAAAr8D,EAAAC,KACI,OAAOA,KAAKs7D,gBACP9zD,KAAK,SAAA2H,GACF,OAAO,IAAI0B,QAA2B,SAACY,EAAS27B,GAC5Cj+B,EAAOi0C,GAAGsW,GAAkB+B,UAAW,SAACnxD,EAA6ByxD,GAEjE,GADA5sD,EAAOqsD,IAAI9B,GAAkB+B,YACxBM,EACD,OAAO3uB,EAAO,IAAIvC,EAAA,EAAcvgC,EAAKsxD,iBAAmBtxD,EAAKsxD,iBAAmB,+DAGpF,IAAKtxD,EAAKoxD,WACN,OAAOjqD,EAAQ,CAAE8W,MAAOwzC,IAG5B,OAAQzxD,EAAKoxD,YACT,KAAK/B,GAAwB0C,QACzB,OAAO5qD,EAAQ,CAAE8W,MAAOwzC,IAC5B,KAAKpC,GAAwB2C,SACzB,OAAIhyD,EAAKqxD,YAAc,EACZvuB,EAAO,IAAIvC,EAAA,EAAcvgC,EAAKsxD,mBAC7BtxD,EAAKiyD,SAAYjyD,EAAKiyD,QAAQC,cAAgBlyD,EAAKiyD,QAAQC,aAAaC,wBAA0B1C,GAA8B2C,IAIrIjrD,EAAQ,CAAE8W,MAAOwzC,IAHb3uB,EAAO,IAAIvC,EAAA,EAAc,kDAIxC,KAAK8uB,GAAwBgD,QACzB,OAAOvvB,EAAO,IAAIvC,EAAA,EAAc,6FACpC,KAAK8uB,GAAwBl4D,MACzB,OAAO2rC,EAAO,IAAIvC,EAAA,EAAcvgC,EAAKsxD,sBAIjD,IAAMgB,EAAiB,CACnBC,OAAQV,EAAiBW,QACzBC,QAASZ,EAAiBa,eAGxBC,EAAel9D,EAAKm9D,mBAAmBd,EAAWD,EAAiBgB,oBAEzEhuD,EAAOiuD,SAAStD,GAAqBuD,IAAKT,EAAgBK,QAKlE7B,EAAAl8D,UAAAg+D,mBAAR,SAA2Bd,EAA8BkB,GACrD,IAAMC,EAA6B,CAC/BC,eAAgBx9D,KAAKy9D,sBAAsBrB,EAAU18C,iBAezD,OAZI08C,EAAU72B,cACVg4B,EAASG,QAAU19D,KAAK29D,sBAAsBvB,EAAU72B,cAGxD62B,EAAU18C,eAAemkB,QACzB05B,EAASK,OAASxB,EAAU18C,eAAemkB,OAG3Cu4B,EAAU5jD,kBACV+kD,EAASM,gBAAkB79D,KAAKy9D,sBAAsBrB,EAAU5jD,kBAG5D,CACJslD,SAAUP,EACVQ,aAAc,CACVC,YAAa5B,EAAUnxD,GACvBgzD,OAAQ7B,EAAUjxD,OAClB+yD,aAAc9B,EAAUznB,aACxBwpB,aAAc,IACdC,cAAed,KAKnBlC,EAAAl8D,UAAAy+D,sBAAR,SAA8Bp4B,GAC1B,MAAO,CACH84B,cAAeC,OAAO/4B,EAAYgzB,UAClCgG,gBAAiBD,OAAO/4B,EAAYozB,SAASC,OAC7C4F,eAAgBF,OAAO/4B,EAAYozB,SAASE,MAC5C4F,cAAel5B,EAAY+yB,OAC3BoG,SAAUJ,OAAO/4B,EAAYkzB,SAI7B2C,EAAAl8D,UAAAu+D,sBAAR,SAA8BrjD,GAC1B,IAAMukD,EAAmC,CACrCC,UAAWxkD,EAAQiY,UACnBwsC,SAAUzkD,EAAQkY,SAClBwsC,SAAU1kD,EAAQoY,SAClBusC,KAAM3kD,EAAQsY,KACdssC,MAAO5kD,EAAQuY,gBACfssC,WAAY7kD,EAAQwY,WACpBssC,YAAa9kD,EAAQ2W,aAWzB,OARI3W,EAAQqY,WACRksC,EAAgBQ,SAAW/kD,EAAQqY,UAGnCrY,EAAQyY,QACR8rC,EAAgBS,OAAShlD,EAAQyY,OAG9B8rC,GAGHvD,EAAAl8D,UAAAo8D,cAAR,WACI,IAAKt7D,KAAKq7D,KACN,MAAM,IAAI/4B,GAAA,EAAoBA,GAAA,EAAwB9xB,uBAG1D,OAAOxQ,KAAKq7D,MAEpBD,EAvKA,ME9BA,WACI,SAAAiE,EACYvwD,EACAC,QAAA,IAAAA,MAAAnJ,QADA5F,KAAA8O,gBACA9O,KAAA+O,UAgBhB,OAbIswD,EAAAngE,UAAA+mC,KAAA,SAAK9C,EAAkB5B,GAAvB,IAAAxhC,EAAAC,KACU+I,EAAMw4B,EAVC,gEACA,4DAWb,OAAOvhC,KAAK8O,cACPG,WAAWlG,EAAM,MAAQo6B,GACzB37B,KAAK,WACF,IAAKzH,EAAKgP,QAAQuwD,SACd,MAAM,IAAIz0B,EAAA,EAGd,OAAO9qC,EAAKgP,QAAQuwD,YAGpCD,EAnBA,IDTA,SAAYlE,GACRA,EAAA,8BACAA,EAAA,oCACAA,EAAA,gCAHJ,CAAYA,QAAiB,KEsB7B,IC2CYoE,GAYAC,GDvDSC,GAArB,WAMI,SAAAC,EACY9gC,EACAyB,EACA2pB,EACA0E,EACAzuB,EACAo6B,EACArzD,EACA88C,EACA6b,GARA3/D,KAAA4+B,SACA5+B,KAAAqgC,yBACArgC,KAAAgqD,sBACAhqD,KAAA0uD,wBACA1uD,KAAAigC,8BACAjgC,KAAAq6D,gCACAr6D,KAAAgH,iBACAhH,KAAA8jD,wBACA9jD,KAAA2/D,mBAER3/D,KAAK4/D,cAAgB,IAAItqD,EAAA,QAoNjC,OAjNIoqD,EAAAxgE,UAAAiR,WAAA,SAAWnM,GAAX,IAAAjE,EAAAC,KAGI,GAFAA,KAAK0kC,UAAY1gC,EAAQkE,UAEpBlE,EAAQggD,SACT,MAAM,IAAIxkB,GAAA,EAAqB,qFAGnC,IAAMqgC,EAAe77D,EAAQggD,SAAS6b,cAAgB7rD,SAASgxB,eAAehhC,EAAQggD,SAAS6b,cAO/F,OALIA,IACA7/D,KAAK4kC,cAAgBi7B,EACrB7/D,KAAK4kC,cAAcp7B,iBAAiB,QAASxJ,KAAKmlC,2BAG/CnlC,KAAK8/D,iBAAiB97D,EAAQggD,UAChCx8C,KAAK,WAAM,OAAAzH,EAAK6+B,OAAO1nB,cAGhCwoD,EAAAxgE,UAAA4gC,aAAA,WAQI,OAPI9/B,KAAK4kC,eACL5kC,KAAK4kC,cAAcj7B,oBAAoB,QAAS3J,KAAKmlC,0BAGzDnlC,KAAK4kC,mBAAgBx8B,EACrBpI,KAAK+/D,qBAAkB33D,EAEhByI,QAAQY,QAAQzR,KAAK4+B,OAAO1nB,aAGvCwoD,EAAAxgE,UAAAyoD,QAAA,SAAQr0C,EAA2BtP,GAAnC,IAAAjE,EAAAC,KACI,OAAOA,KAAKggE,cACPl4D,MAAM,SAAAC,GACH,GAAIA,EAAMjI,UAAYghC,EAAA,EAAqBpgC,eACvC,OAAOX,EAAKkgE,iBACPz4D,KAAK,WAAM,OAAAzH,EAAKigE,gBAGzB,MAAMj4D,IAETP,KAAK,SAAAghB,GACF,OAAAzoB,EAAKmgE,aAAa13C,EAASlV,EAAQomB,eAAgB11B,MAI/D07D,EAAAxgE,UAAAkrD,SAAA,WACI,OAAOv5C,QAAQu8B,OAAO,IAAIkd,KAGtBoV,EAAAxgE,UAAA4gE,iBAAR,SAAyB97D,GAAzB,IAAAjE,EAAAC,KACUmY,EAAQnY,KAAK4+B,OAAO1nB,WACpByjB,EAAgBxiB,EAAMggB,eAAeE,iBAAiBr4B,KAAK0kC,WAC3DzT,EAAc9Y,EAAMhB,OAAO+e,iBAEjC,IAAKyE,EACD,MAAM,IAAImG,EAAA,EAAiBA,EAAA,EAAqBngC,sBAGpD,IAAKswB,EACD,MAAM,IAAI6P,EAAA,EAAiBA,EAAA,EAAqBxgC,uBAGpD,OAAON,KAAK8jD,sBAAsB7d,KAAKtL,EAAcxjB,OAAOoqB,UACvD/5B,KAAK,SAAC5E,OAAEshD,EAAAthD,EAAAshD,SACLnkD,EAAKggE,gBAAkB7b,EAEnBlgD,EAAQm8D,eAAiBnsD,SAASgxB,eAAehhC,EAAQm8D,gBACzDpgE,EAAKggE,gBAAgBK,gBAAgB,CACjCxyB,MAAO,QACPtO,WAAY,CAACt7B,EAAQm8D,iBAI7BpgE,EAAKggE,gBAAgB5b,UAAU,CAC3BC,SAAUnzB,EAAY+xB,aAAaC,gBAGvCljD,EAAKggE,gBAAgB3c,GAAG+X,GAAkBkF,eAAgB,WACtDtgE,EAAK6/D,cAAcx4D,KAAK,CAAEnH,KAAMk7D,GAAkBkF,iBAE9Cr8D,EAAQs8D,UACRt8D,EAAQs8D,aAIhBvgE,EAAKggE,gBAAgB3c,GAAG+X,GAAkBoF,iBAAkB,SAACjtD,GACzDvT,EAAKygE,iBAAiBltD,EAAQ0xC,cACzBx9C,KAAK,WACFzH,EAAK6/D,cAAcx4D,KAAK,CAAEnH,KAAMk7D,GAAkBoF,mBAE9Cv8D,EAAQ4wD,iBACR5wD,EAAQ4wD,yBAO5B8K,EAAAxgE,UAAA+gE,eAAR,eAAAlgE,EAAAC,KACI,OAAOA,KAAK4+B,OAAOgB,SAAS5/B,KAAKq6D,8BAA8Btd,kBAAkB,WAkB7E,OAjBAh9C,EAAK6+B,OAAOgB,SAAS7/B,EAAKkgC,4BAA4Bh4B,kBAAkBlI,EAAK2kC,YACxEl9B,KAAK,SAAA2Q,GACF,IAAMwiB,EAAgBxiB,EAAMggB,eAAeE,iBAAiBt4B,EAAK2kC,WAEjE,IAAK3kC,EAAKggE,gBACN,MAAM,IAAIz9B,GAAA,EAAoBA,GAAA,EAAwB9xB,uBAG1D,IAAKmqB,EACD,MAAM,IAAImG,EAAA,EAAiBA,EAAA,EAAqBngC,sBAGpDZ,EAAKggE,gBAAgBU,uBACrB1gE,EAAKggE,gBAAgBrb,cAAc/pB,EAAcqL,mBAAmBie,oBAIrE,IAAIpzC,QAAQ,SAACY,EAAS27B,GACzBrtC,EAAK6/D,cACArqD,KAAKvX,OAAAwX,GAAA,KAAAxX,CAAK,IACV+gC,UAAU,SAACp5B,GACJA,EAAM1F,OAASk7D,GAAkBkF,eACjCjzB,EAAO,IAAIoiB,IACJ7pD,EAAM1F,OAASk7D,GAAkBoF,kBACxC9uD,SAIjB,CAAEvJ,SAAUlI,KAAK0kC,YAAc,CAAE/E,QAAS,uBAGzC+/B,EAAAxgE,UAAAshE,iBAAR,SAAyBxb,GAAzB,IAAAjlD,EAAAC,KAEU26B,EADQ36B,KAAK4+B,OAAO1nB,WACEihB,eAAeE,iBAAiBr4B,KAAK0kC,WAC3DmgB,EAAoBlqB,GAAiBA,EAAcqL,mBAAmB6e,kBAE5E,OAAO7kD,KAAKgH,eAAetB,KAAK,eAAgB,CAC5ClD,QAAS,CACLoG,OAAQ,YACRg9B,eAAgB,oDAEpBrjC,KAAM,CACF8Q,OAAQ,wBACR8vB,SAAUnjC,KAAK0kC,UACfsgB,aAAYA,EACZH,kBAAiBA,KAIpBr9C,KAAK,WAAM,OAAAqJ,QAAQC,IAAI,CACpB/Q,EAAK6+B,OAAOgB,SAAS7/B,EAAKsgC,uBAAuBvoB,uBACjD/X,EAAK6+B,OAAOgB,SAAS7/B,EAAKkgC,4BAA4Bh4B,kBAAkBlI,EAAK2kC,gBAEhFl9B,KAAK,WAAM,OAAAzH,EAAK6+B,OAAO1nB,cAGxBwoD,EAAAxgE,UAAA8gE,YAAR,eAAAjgE,EAAAC,KACI,OAAOA,KAAK4+B,OAAOgB,SAAS5/B,KAAKigC,4BAA4Bh4B,kBAAkBjI,KAAK0kC,YAC/El9B,KAAK,WACF,MAAuB,UAAnBzH,EAAK2kC,UACE3kC,EAAK4/D,iBAAiBxvD,aACxB3I,KAAK,SAAA2H,GAAU,OAAAA,EAAOuxD,iBAGxB,KAEVl5D,KAAK,SAAAm5D,GACF,IACMhmC,EADQ56B,EAAK6+B,OAAO1nB,WACEihB,eAAeE,iBAAiBt4B,EAAK2kC,WAEjE,IAAK/J,EACD,MAAM,IAAImG,EAAA,EAAiBA,EAAA,EAAqBngC,sBAGpD,IAAKg6B,EAAcqL,mBAAmB46B,kBAClC,MAAM,IAAI9/B,EAAA,EAAiBA,EAAA,EAAqBpgC,gBAGpD,IAAM6kC,EAAc,CAChBxwB,OAAQhV,EAAK2kC,UACbm8B,aAAclmC,EAAcqL,mBAAmB46B,kBAC/CE,IAAKnmC,EAAcqL,mBAAmB86B,IACtCxD,cAAeyD,KAAKpmC,EAAcqL,mBAAmBg7B,YACrDrI,SAAU,CACNC,MAAOj+B,EAAcqL,mBAAmBi7B,QAAQt8D,WAAWu8D,OAAO,EAAG,GACrErI,KAAMl+B,EAAcqL,mBAAmBi7B,QAAQt8D,WAAWu8D,OAAO,EAAG,IAExE3I,SAAU59B,EAAcqL,mBAAmBm7B,WAC3CC,YAAazmC,EAAcqL,mBAAmBo7B,YAC9CC,UAAWV,EAAY,CAAEA,UAASA,QAAKv4D,GAG3C,MAAO,CACHF,SAAUnI,EAAK2kC,UACfa,YAAWA,MAKnBm6B,EAAAxgE,UAAAghE,aAAR,SAAqB13C,EAAkBkR,EAA0B11B,GAAjE,IAAAjE,EAAAC,KACI,OAAOA,KAAK4+B,OAAOgB,SAAS5/B,KAAKgqD,oBAAoBzD,YAAY,CAAE7sB,eAAcA,GAAI11B,IAChFwD,KAAK,WAAM,OAAAzH,EAAK6+B,OAAOgB,SAAS7/B,EAAK2uD,sBAAsB5C,cAActjC,OAI1Ek3C,EAAAxgE,UAAAimC,yBAAR,SAAiCx/B,GAC7BA,EAAM0/B,iBAENrlC,KAAKigE,kBAHTr+D,EAAA,YADC+7B,GAAA,gDAML+hC,EArOA,eETA,WACI,SAAA4B,EACY1iC,EACAorB,EACA0E,EACAluB,GAHAxgC,KAAA4+B,SACA5+B,KAAAgqD,sBACAhqD,KAAA0uD,wBACA1uD,KAAAwgC,cAgDhB,OA7CI8gC,EAAApiE,UAAAyoD,QAAA,SAAQr0C,EAA2BtP,GAAnC,IAAAjE,EAAAC,KACYwoB,EAAAlV,EAAAkV,QAASH,EAAAzmB,EAAA,OAAA0R,EAAA,aACXiyB,EAAc/c,GAAWA,EAAQ+c,YAEvC,IAAK/c,IAAY+c,EACb,MAAM,IAAIwpB,GAA4B,CAAC,wBAG3C,OAAO/uD,KAAK4+B,OAAOgB,SAAS5/B,KAAKgqD,oBAAoBzD,YAAYl+B,EAAOrkB,IACnEwD,KAAK,WACF,OAAAzH,EAAK6+B,OAAOgB,SAAS7/B,EAAK2uD,sBAAsB5C,cAAclqD,EAAA,YAAK4mB,EAAO,CAAE+c,YAAWA,QAE1Fz9B,MAAM,SAAAC,GACH,OAAMA,aAAiB6U,GAAA,GAAkB5e,OAAA8O,GAAA,KAAA9O,CAAK+J,EAAMxF,KAAKO,OAAQ,CAAEwO,KAAM,4BAIlE,IAAIT,QAAQ,WACf9Q,EAAKygC,YAAYyC,SAASl7B,EAAMxF,KAAKu4D,gBAAgBgC,QAAS,CAC1DyE,MAAOx5D,EAAMxF,KAAKu4D,gBAAgBqC,mBAClCqE,QAASz5D,EAAMxF,KAAKu4D,gBAAgB2G,aACpCC,GAAI35D,EAAMxF,KAAKu4D,gBAAgBkC,kBAP5BnsD,QAAQu8B,OAAOrlC,MAatCu5D,EAAApiE,UAAAkrD,SAAA,SAASpmD,GACL,IAAMmU,EAAQnY,KAAK4+B,OAAO1nB,WACpBmR,EAAQlQ,EAAMkQ,MAAM2R,WAE1B,OAAI3R,GAASlQ,EAAMqQ,QAAQ8M,qBAAuBuF,GAAA,EACvC76B,KAAK4+B,OAAOgB,SAAS5/B,KAAKgqD,oBAAoBxD,cAAcn+B,EAAM6H,QAASlsB,IAG/E6M,QAAQu8B,OAAO,IAAIkd,KAG9BgX,EAAApiE,UAAAiR,WAAA,WACI,OAAOU,QAAQY,QAAQzR,KAAK4+B,OAAO1nB,aAGvCoqD,EAAApiE,UAAA4gC,aAAA,WACI,OAAOjvB,QAAQY,QAAQzR,KAAK4+B,OAAO1nB,aAE3CoqD,EArDA,MCLA,WACI,SAAAK,EACY/iC,EACAorB,EACA0E,GAFA1uD,KAAA4+B,SACA5+B,KAAAgqD,sBACAhqD,KAAA0uD,wBA4BhB,OAzBIiT,EAAAziE,UAAAyoD,QAAA,SAAQr0C,EAA2BtP,GAAnC,IAAAjE,EAAAC,KACYwoB,EAAAlV,EAAAkV,QAASH,EAAAzmB,EAAA,OAAA0R,EAAA,aACXiyB,EAAc/c,GAAWA,EAAQ+c,YAEvC,IAAK/c,IAAY+c,EACb,MAAM,IAAIwpB,GAA4B,CAAC,wBAG3C,OAAO/uD,KAAK4+B,OAAOgB,SAAS5/B,KAAKgqD,oBAAoBzD,YAAYl+B,EAAOrkB,IACnEwD,KAAK,WACF,OAAAzH,EAAK6+B,OAAOgB,SAAS7/B,EAAK2uD,sBAAsB5C,cAAclqD,EAAA,YAAK4mB,EAAO,CAAE+c,YAAWA,SAInGo8B,EAAAziE,UAAAkrD,SAAA,SAAS19C,GACL,OAAOmE,QAAQu8B,OAAO,IAAIkd,KAG9BqX,EAAAziE,UAAAiR,WAAA,SAAWzD,GACP,OAAOmE,QAAQY,QAAQzR,KAAK4+B,OAAO1nB,aAGvCyqD,EAAAziE,UAAA4gC,aAAA,SAAapzB,GACT,OAAOmE,QAAQY,QAAQzR,KAAK4+B,OAAO1nB,aAE3CyqD,EAhCA,MCEA,WAGI,SAAAC,EACYhjC,EACAorB,EACA0E,EACAmT,GAHA7hE,KAAA4+B,SACA5+B,KAAAgqD,sBACAhqD,KAAA0uD,wBACA1uD,KAAA6hE,oBA6ChB,OA1CID,EAAA1iE,UAAAiR,WAAA,SAAWnM,GAAX,IAAAjE,EAAAC,KACYkI,EAAAlE,EAAAkE,SAGR,GAFAlI,KAAK6gC,eAAiB7gC,KAAK4+B,OAAO1nB,WAAWihB,eAAeE,iBAAiBnwB,IAExElI,KAAK6gC,eACN,MAAM,IAAIC,EAAA,EAAiBA,EAAA,EAAqBngC,sBAGpD,OAAKX,KAAK6gC,eAAe1pB,OAAOu9C,aAIzB10D,KAAK6hE,kBAAkBpH,QAAQvyD,GACjCV,KAAK,WAAM,OAAAzH,EAAK6+B,OAAO1nB,aAJjBrG,QAAQY,QAAQzR,KAAK4+B,OAAO1nB,aAO3C0qD,EAAA1iE,UAAAyoD,QAAA,SAAQr0C,EAA2BtP,GAAnC,IAAAjE,EAAAC,KACYwoB,EAAAlV,EAAAkV,QAASH,EAAAzmB,EAAA,OAAA0R,EAAA,aAEjB,IAAKkV,EACD,MAAM,IAAIsY,EAAA,EAAiBA,EAAA,EAAqBpgC,gBAGpD,OAAOV,KAAK4+B,OAAOgB,SAAS5/B,KAAKgqD,oBAAoBzD,YAAYl+B,EAAOrkB,IACnEwD,KAAK,WACF,IAAKzH,EAAK8gC,eACN,MAAM,IAAIC,EAAA,EAAiBA,EAAA,EAAqBngC,sBAGpD,OAAOZ,EAAK8gC,eAAe1pB,OAAOu9C,aAC9B30D,EAAK8hE,kBAAkBnH,MAAMlyC,GAC7BzoB,EAAK6+B,OAAOgB,SAAS7/B,EAAK2uD,sBAAsB5C,cAActjC,OAI9Eo5C,EAAA1iE,UAAAkrD,SAAA,WACI,OAAOv5C,QAAQu8B,OAAO,IAAIkd,KAG9BsX,EAAA1iE,UAAA4gC,aAAA,WACI,OAAOjvB,QAAQY,QAAQzR,KAAK4+B,OAAO1nB,aAE3C0qD,EApDA,GCYqBE,GAArB,WAKI,SAAAC,EACYnjC,EACAyB,EACAJ,EACAo6B,EACA3L,EACA1E,EACAvlB,GANAzkC,KAAA4+B,SACA5+B,KAAAqgC,yBACArgC,KAAAigC,8BACAjgC,KAAAq6D,gCACAr6D,KAAA0uD,wBACA1uD,KAAAgqD,sBACAhqD,KAAAykC,6BA0JhB,OAvJIs9B,EAAA7iE,UAAAiR,WAAA,SAAWnM,GAAX,IAAAjE,EAAAC,KAGI,OAFAA,KAAK0kC,UAAY1gC,EAAQkE,SAElBlI,KAAKykC,2BAA2Bt0B,WAAWnQ,KAAK0kC,WAClDl9B,KAAK,WAGF,GAFAzH,EAAKiiE,kBAAoBjiE,EAAKylD,qBAAqBxhD,IAE9CjE,EAAKiiE,kBACN,MAAM,IAAIxiC,GAAA,EAAqB,sFAGnC,IAAMqgC,EAAe9/D,EAAKiiE,kBAAkBnC,cAAgB7rD,SAASgxB,eAAejlC,EAAKiiE,kBAAkBnC,cAO3G,OALIA,IACA9/D,EAAK6kC,cAAgBi7B,EACrB9/D,EAAK6kC,cAAcp7B,iBAAiB,QAASzJ,EAAKolC,2BAG/CplC,EAAK6+B,OAAO1nB,cAI/B6qD,EAAA7iE,UAAA4gC,aAAA,eAAA//B,EAAAC,KAOI,OANIA,KAAK4kC,eACL5kC,KAAK4kC,cAAcj7B,oBAAoB,QAAS3J,KAAKmlC,0BAGzDnlC,KAAK4kC,mBAAgBx8B,EAEdpI,KAAKykC,2BAA2B3E,eAClCt4B,KAAK,WAAM,OAAAzH,EAAK6+B,OAAO1nB,cAGhC6qD,EAAA7iE,UAAAyoD,QAAA,SAAQr0C,EAA2BtP,GAAnC,IAAAjE,EAAAC,KACI,IAAKA,KAAKgiE,kBACN,MAAM,IAAIxiC,GAAA,EAAqB,sFAG7B,IAAA58B,EAAA5C,KAAAgiE,kBACFn/D,EAAAD,EAAAw/B,eAAA,IAAAv/B,EAAA,aAAAA,EACAE,EAAAH,EAAAgyD,uBAAA,IAAA7xD,EAAA,aAAAA,EAGJ,OAAO8N,QAAQY,QAAQzR,KAAKggE,eACvBx4D,KAAK,SAAAghB,GACF,OAAKA,EAAQ+c,YAAY3K,OAAUpS,EAAQ+c,YAAYoZ,gBAahDn2B,EAXIzoB,EAAK0kC,2BAA2Ba,gBAClC99B,KAAK,SAAA+9B,GAAe,OAAAxlC,EAAKujD,2BAA2B/d,KACpD/9B,KAAK,WAAM,OAAAotD,MACXptD,KAAK,WAAM,OAAAzH,EAAKigE,gBAChBl4D,MAAM,SAAAC,GACsB,aAArBA,EAAMk6D,YACN7/B,EAAQr6B,OAO3BP,KAAK,WACF,OAAAzH,EAAK6+B,OAAOgB,SAAS7/B,EAAKiqD,oBAAoBzD,YAAY,CAAE7sB,eAAgBpmB,EAAQomB,gBAAkB11B,IACjGwD,KAAK,WAAM,OAAAzH,EAAK6+B,OAAOgB,SAAS7/B,EAAK2uD,sBAAsB5C,cAAc/rD,EAAKigE,qBAI/F+B,EAAA7iE,UAAAkrD,SAAA,WACI,OAAOv5C,QAAQu8B,OAAO,IAAIkd,KAGtByX,EAAA7iE,UAAAokD,2BAAR,SAAmC/d,GAAnC,IAAAxlC,EAAAC,KACI,IAAKA,KAAK0kC,UACN,MAAM,IAAIpC,GAAA,EAAoBA,GAAA,EAAwB9xB,uBAG1D,IAAMtI,EAAWlI,KAAK0kC,UAGtB,OAAO1kC,KAAKykC,2BAA2Be,cAAcD,GAChD/9B,KAAK,WAAM,OAAAqJ,QAAQC,IAAI,CACpB/Q,EAAK6+B,OAAOgB,SAAS7/B,EAAKsgC,uBAAuBvoB,uBACjD/X,EAAK6+B,OAAOgB,SAAS7/B,EAAKkgC,4BAA4Bh4B,kBAAkBC,SAI5E65D,EAAA7iE,UAAAsmD,qBAAR,SAA6BxhD,GACzB,GAAyB,uBAArBA,EAAQkE,UAAqClE,EAAQyhD,mBACrD,OAAOzhD,EAAQyhD,mBAGnB,GAAyB,oBAArBzhD,EAAQkE,UAAkClE,EAAQ0hD,gBAClD,OAAO1hD,EAAQ0hD,gBAGnB,MAAM,IAAIlmB,GAAA,GAGNuiC,EAAA7iE,UAAA8gE,YAAR,WACI,IAAKhgE,KAAK0kC,UACN,MAAM,IAAIpC,GAAA,EAAoBA,GAAA,EAAwB9xB,uBAG1D,IACMmqB,EADQ36B,KAAK4+B,OAAO1nB,WACEihB,eAAeE,iBAAiBr4B,KAAK0kC,WAEjE,IAAK/J,EACD,MAAM,IAAImG,EAAA,EAAiBA,EAAA,EAAqBngC,sBAGpD,IAAKg6B,EAAcqL,mBAAmBpL,MAClC,MAAM,IAAIkG,EAAA,EAAiBA,EAAA,EAAqBpgC,gBAGpD,IAAM6kC,EAAc,CAChBxwB,OAAQ/U,KAAK0kC,UACb9J,MAAOD,EAAcqL,mBAAmBpL,MACxC+jB,gBAAiBhkB,EAAcqL,mBAAmB6Y,kBAGtD,MAAO,CACH32C,SAAUlI,KAAK0kC,UACfa,YAAWA,IAKXw8B,EAAA7iE,UAAAimC,yBAAR,SAAiCx/B,GADjC,IAAA5F,EAAAC,KAII,GAFA2F,EAAM0/B,kBAEDrlC,KAAK0kC,YAAc1kC,KAAKgiE,kBACzB,MAAM,IAAI1/B,GAAA,EAAoBA,GAAA,EAAwB9xB,uBAG1D,IAAMtI,EAAWlI,KAAK0kC,UAEhB9hC,EAAA5C,KAAAgiE,kBACFn/D,EAAAD,EAAAw/B,eAAA,IAAAv/B,EAAA,aAAAA,EACAE,EAAAH,EAAAgyD,uBAAA,IAAA7xD,EAAA,aAAAA,EAGJ,OAAO/C,KAAK4+B,OAAOgB,SAAS5/B,KAAKq6D,8BAA8Btd,kBAAkB,WAC7E,OAAOh9C,EAAK0kC,2BAA2Ba,gBAClC99B,KAAK,SAAA+9B,GAAe,OAAAxlC,EAAKujD,2BAA2B/d,KACpD/9B,KAAK,WAAM,OAAAotD,MACX9sD,MAAM,SAAAC,GACsB,aAArBA,EAAMk6D,YACN7/B,EAAQr6B,MAGrB,CAAEG,SAAQA,IAAK,CAAEy3B,QAAS,uBAvBjC/9B,EAAA,YADC+7B,GAAA,gDA0BLokC,EAtKA,MCEA,WAKI,SAAAG,EACYtjC,EACAorB,EACA/pB,EACA8hB,EACAogB,GAJAniE,KAAA4+B,SACA5+B,KAAAgqD,sBACAhqD,KAAAigC,8BACAjgC,KAAA+hD,+BACA/hD,KAAAmiE,sBAPJniE,KAAAoiE,sBAAwB,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAmKrF,OAzJIF,EAAAhjE,UAAAiR,WAAA,SAAWnM,GAAX,IAAAjE,EAAAC,KACI,OAAOA,KAAKmiE,oBAAoBl8B,OAC3Bz+B,KAAK,SAAA66D,GAAkBtiE,EAAKuiE,cAAgBD,IAC5C76D,KAAK,WAcF,OAbAzH,EAAKwiE,aAAexiE,EAAK6+B,OAAOG,UAC5B,SAAA5mB,GACQA,EAAM8iB,kBAAkB7V,cAAcphB,EAAQkE,WAC9CnI,EAAKyiE,YAAYx+D,IAGzB,SAAAmU,GACI,IAAMX,EAAWW,EAAMX,SAASC,cAEhC,OAAOD,GAAYA,EAASmiB,aAI7B55B,EAAKyiE,YAAYx+D,KAE3BwD,KAAK,WAAM,OAAAzH,EAAK6+B,OAAO1nB,cAGhCgrD,EAAAhjE,UAAA4gC,aAAA,WAKI,OAJI9/B,KAAKuiE,cACLviE,KAAKuiE,eAGF1xD,QAAQY,QAAQzR,KAAK4+B,OAAO1nB,aAGvCgrD,EAAAhjE,UAAAyoD,QAAA,SAAQr0C,EAA2BtP,GAAnC,IAAAjE,EAAAC,KACI,IAAKsT,EAAQkV,QACT,MAAM,IAAIgX,GAAA,EAAqB,yEAGnC,IAAQ58B,EAAA0Q,EAAAkV,QAAwBonC,GAAbhtD,EAAA2iC,YAAa3jC,EAAA,OAAAgB,EAAA,kBAEhC,OAAO5C,KAAKyiE,aACPj7D,KAAK,SAAC5E,OAAE8/D,EAAA9/D,EAAA+/D,oBAA8C,OAAA5iE,EAAK6+B,OAAOgB,SAC/D7/B,EAAKgiD,6BAA6B9B,kBAAkB2P,EAAe1nD,SAAU,CAAEw6D,mBAAkBA,OAEpGl7D,KAAK,WAAM,OAAAzH,EAAK6+B,OAAOgB,SACpB7/B,EAAKiqD,oBAAoBzD,YAAY3kD,EAAA,YAC9B0R,EAAO,CACVkV,QAASonC,EAGTl2B,gBAAgB,IACjB11B,OAIfk+D,EAAAhjE,UAAAkrD,SAAA,WACI,OAAOv5C,QAAQu8B,OAAO,IAAIkd,KAGtB4X,EAAAhjE,UAAAsjE,YAAR,SAAoBx+D,GAApB,IAAAjE,EAAAC,KACI,IAAKgE,EAAQ4+D,OACT,MAAM,IAAIpjC,GAAA,EAAqB,4EAG3B,IAAAt3B,EAAAlE,EAAAkE,SAAUtF,EAAAoB,EAAA4+D,OAAUnjC,EAAA78B,EAAA68B,UAAWkM,EAAA/oC,EAAA+oC,OAEvC,OAAO3rC,KAAK4+B,OAAOgB,SAAS5/B,KAAKigC,4BAA4Bh4B,kBAAkBC,IAC1EV,KAAK,SAAA2Q,GAAS,WAAItH,QAA4B,SAAAY,GAC3C,IAAMkpB,EAAgBxiB,EAAMggB,eAAeE,iBAAiBnwB,GAE5D,IAAKyyB,EACD,MAAM,IAAImG,EAAA,EAAiBA,EAAA,EAAqBngC,sBAGpD,IAAKZ,EAAKuiE,gBAAkB3nC,EAAcvqB,YACtC,MAAM,IAAIkyB,GAAA,EAAoBA,GAAA,EAAwB9xB,uBAG1DzQ,EAAKuiE,cAAcnf,KAAK,CAAE0f,aAAcloC,EAAcvqB,cAEtDrQ,EAAKuiE,cAAcr8B,KAAK,CAAExG,UAASA,GAAI,SAAA98B,GAC/BgpC,GACAA,EAAOhpC,GAEX8O,EAAQ9O,UAKhBu/D,EAAAhjE,UAAA4jE,sBAAR,SAA8BpjD,EAAgClH,GAC1D,IAAKxa,OAAA8O,GAAA,SAAA9O,CAASgC,KAAKoiE,sBAAuB1iD,EAAeqR,aACrD,MAAO,GAGX,IAAMzmB,EAAkC,CACpCm5B,gBAAiBzjC,KAAK+iE,oBAAoBrjD,EAAgBA,EAAemkB,QAO7E,OAJIrrB,IACAlO,EAAK+4B,iBAAmBrjC,KAAK+iE,oBAAoBvqD,EAAiBkH,EAAemkB,QAG9Ev5B,GAGH43D,EAAAhjE,UAAA6jE,oBAAR,SAA4B3oD,EAAkBypB,GAC1C,IAAMm/B,EAA+B,CACjCC,eAAgB7oD,EAAQoY,SACxBE,KAAMtY,EAAQsY,KACdlB,QAASpX,EAAQ2W,YACjBmyC,WAAY9oD,EAAQiY,UACpB8wC,YAAa/oD,EAAQkY,SACrBgS,YAAalqB,EAAQwY,WACrBuqB,OAAQ/iC,EAAQuY,gBAChBkR,MAAKA,GAWT,OARIzpB,EAAQqY,WACRuwC,EAAcI,gBAAkBhpD,EAAQqY,UAGxCrY,EAAQyY,QACRmwC,EAAcnwC,MAAQzY,EAAQyY,OAG3BmwC,GAGHd,EAAAhjE,UAAAujE,WAAR,eAAA1iE,EAAAC,KACI,OAAO,IAAI6Q,QAAQ,SAACY,EAAS27B,GACzB,IAAM1tB,EAAiB3f,EAAK6+B,OAAO1nB,WAAWwI,eAAe4U,oBACvD9b,EAAkBzY,EAAK6+B,OAAO1nB,WAAWsB,gBAAgByc,qBAE/D,IAAKvV,EACD,MAAM,IAAIohB,EAAA,EAAiBA,EAAA,EAAqB5gC,uBAGpD,IAAKH,EAAKuiE,cACN,MAAM,IAAIhgC,GAAA,EAAoBA,GAAA,EAAwB9xB,uBAG1D,IAAM6yD,EAAoBtjE,EAAK+iE,sBAAsBpjD,EAAgBlH,GAErEzY,EAAKuiE,cAAclgB,UAAUihB,EAAmB,SAAAj8B,GAC5C,OAAIA,EAAIk8B,SACG7xD,EAAQ21B,GAGfA,EAAIm8B,UACGn2B,EAAO,IAAIoiB,SAGtBpiB,EAAO,IAAItR,GAAA,QAI3BomC,EAtKA,MCjBA,WACI,SAAAsB,EACY10D,GAAA9O,KAAA8O,gBAOhB,OAJI00D,EAAAtkE,UAAA+mC,KAAA,WACI,OAAOjmC,KAAK8O,cAAcG,WARlB,wCASHzH,KAAK,WAAM,OAAC5B,OAAwB69D,OAAOC,UAExDF,EATA,MCDA,WACI,SAAAG,EACY/kC,EACAorB,GADAhqD,KAAA4+B,SACA5+B,KAAAgqD,sBAkBhB,OAfI2Z,EAAAzkE,UAAAyoD,QAAA,SAAQr0C,EAA2BtP,GAC/B,OAAOhE,KAAK4+B,OAAOgB,SAAS5/B,KAAKgqD,oBAAoBzD,YAAYjzC,EAAStP,KAG9E2/D,EAAAzkE,UAAAkrD,SAAA,WACI,OAAOv5C,QAAQu8B,OAAO,IAAIkd,KAG9BqZ,EAAAzkE,UAAAiR,WAAA,WACI,OAAOU,QAAQY,QAAQzR,KAAK4+B,OAAO1nB,aAGvCysD,EAAAzkE,UAAA4gC,aAAA,WACI,OAAOjvB,QAAQY,QAAQzR,KAAK4+B,OAAO1nB,aAE3CysD,EArBA,GCQqBC,GAArB,WAKI,SAAAC,EACYjlC,EACAorB,EACA0E,EACA3oB,GAHA/lC,KAAA4+B,SACA5+B,KAAAgqD,sBACAhqD,KAAA0uD,wBACA1uD,KAAA+lC,0BA+GhB,OA5GI89B,EAAA3kE,UAAAiR,WAAA,SAAWnM,GAAX,IAAAjE,EAAAC,KACYkI,EAAAlE,EAAAkE,SAIR,GAFAlI,KAAK6gC,eAAiB7gC,KAAK4+B,OAAO1nB,WAAWihB,eAAeE,iBAAiBnwB,IAExElI,KAAK6gC,eACN,MAAM,IAAIC,EAAA,EAAiBA,EAAA,EAAqBngC,sBAGpD,OAAOX,KAAK+lC,wBAAwBE,KAAKjmC,KAAK6gC,eAAe1pB,OAAOoqB,UAC/D/5B,KAAK,SAAA0+B,GAGF,GAFAnmC,EAAKomC,kBAAoBD,GAEpBliC,EAAQkiC,WACT,MAAM,IAAI1G,GAAA,EAAqB,uFAGnC,IAAMqgC,EAAgB77D,EAAQkiC,WAAW25B,cAAgB7rD,SAASgxB,eAAehhC,EAAQkiC,WAAW25B,cAOpG,OALIA,IACA9/D,EAAK6kC,cAAgBi7B,EACrB9/D,EAAK6kC,cAAcp7B,iBAAiB,QAASzJ,EAAKolC,2BAG/CplC,EAAK6+B,OAAO1nB,cAI/B2sD,EAAA3kE,UAAA4gC,aAAA,WAUI,OATA9/B,KAAK6gC,oBAAiBz4B,EAElBpI,KAAK4kC,eACL5kC,KAAK4kC,cAAcj7B,oBAAoB,QAAS3J,KAAKmlC,0BAGzDnlC,KAAK4kC,mBAAgBx8B,EACrBpI,KAAKmmC,uBAAoB/9B,EAElByI,QAAQY,QAAQzR,KAAK4+B,OAAO1nB,aAGvC2sD,EAAA3kE,UAAAyoD,QAAA,SAAQr0C,EAA2BtP,GAAnC,IAAAjE,EAAAC,KACYwoB,EAAAlV,EAAAkV,QACFH,EAAQ,CAAEqR,eAAgBpmB,EAAQomB,gBAExC,IAAKlR,EACD,MAAM,IAAIgX,GAAA,EAAqB,gFAGnC,IAAKx/B,KAAK6gC,iBAAmB7gC,KAAK6gC,eAAemF,qBAAuBhmC,KAAK6gC,eAAemF,mBAAmBnc,QAC3G,MAAM,IAAIiX,EAAA,EAAiBA,EAAA,EAAqBngC,sBAIpD,IAAM4kC,EAAcvlC,KAAK6gC,eAAemF,mBAAmBT,YAG3D,IAAKA,EACD,MAAM,IAAI/F,GAAA,EAAqB,sGAGnC,OAAOx/B,KAAK4+B,OAAOgB,SAAS5/B,KAAKgqD,oBAAoBzD,YAAYl+B,EAAOrkB,IACnEwD,KAAK,WAAM,OAAAzH,EAAK6+B,OAAOgB,SAAS7/B,EAAK2uD,sBAAsB5C,cAAclqD,EAAA,YAAK4mB,EAAO,CAAE+c,YAAWA,SAG3Gs+B,EAAA3kE,UAAAkrD,SAAA,WACI,OAAOv5C,QAAQu8B,OAAO,IAAIkd,KAGtBuZ,EAAA3kE,UAAAsnC,yBAAR,WACI,IAAMruB,EAAQnY,KAAK4+B,OAAO1nB,WACpBM,EAAWW,EAAMX,SAASC,cAC1BwZ,EAAc9Y,EAAMhB,OAAO+e,iBAEjC,IAAK1e,EACD,MAAM,IAAIspB,EAAA,EAAiBA,EAAA,EAAqBzgC,iBAGpD,IAAK4wB,EACD,MAAM,IAAI6P,EAAA,EAAiBA,EAAA,EAAqBxgC,uBAGpD,IAAKN,KAAK6gC,iBAAmB7gC,KAAK6gC,eAAemF,mBAC7C,MAAM,IAAIlF,EAAA,EAAiBA,EAAA,EAAqBngC,sBAGpD,MAAO,CACH0W,WAAYrX,KAAK6gC,eAAemF,mBAAmB3uB,WACnDovB,iBAAkBzmC,KAAK6gC,eAAemF,mBAAmBS,iBACzDt7B,OAAQqM,EAAS0gC,SAASpD,QAAQ,GAClChS,SAAU7R,EAAY6R,SAASxxB,KAC/Bq1B,OAAQnvB,EAASmB,KAAK1N,GACtB27B,yBAAyB,EACzBxe,YAAapqB,OAAA6oC,GAAA,EAAA7oC,CAAe,cAK5B6lE,EAAA3kE,UAAAimC,yBAAR,SAAiCx/B,GAG7B,GAFAA,EAAM0/B,iBAEDrlC,KAAKmmC,kBAAV,CAIA,IAAM7yB,EAAUtT,KAAKwmC,2BACrBxmC,KAAKmmC,kBAAkB3uB,SAASlE,KARpC1R,EAAA,YADC+7B,GAAA,gDAWLkmC,EAxHA,MCNA,WACI,SAAAC,EACYllC,EACAorB,GADAhqD,KAAA4+B,SACA5+B,KAAAgqD,sBAoBhB,OAjBI8Z,EAAA5kE,UAAAyoD,QAAA,SAAQyR,EAAgCp1D,GACpC,OAAOhE,KAAK4+B,OAAOgB,SACf5/B,KAAKgqD,oBAAoBzD,YAAYvoD,OAAA8O,GAAA,KAAA9O,CAAKo7D,EAAc,WAAYp1D,KAI5E8/D,EAAA5kE,UAAAkrD,SAAA,WACI,OAAOv5C,QAAQu8B,OAAO,IAAIkd,KAG9BwZ,EAAA5kE,UAAAiR,WAAA,WACI,OAAOU,QAAQY,QAAQzR,KAAK4+B,OAAO1nB,aAGvC4sD,EAAA5kE,UAAA4gC,aAAA,WACI,OAAOjvB,QAAQY,QAAQzR,KAAK4+B,OAAO1nB,aAE3C4sD,EAvBA,MCFA,WACI,SAAAC,EACYnlC,EACAorB,GADAhqD,KAAA4+B,SACA5+B,KAAAgqD,sBAuBhB,OApBI+Z,EAAA7kE,UAAAyoD,QAAA,SAAQr0C,EAA2BtP,GAC/B,IAAMqP,EAASrT,KAAKgqD,oBAAoBzD,YAAY3kD,EAAA,YAC7C0R,EAAO,CACVkV,QAASlV,EAAQkV,QAAU,CAAEtgB,SAAUoL,EAAQkV,QAAQtgB,eAAaE,IACrEpE,GAEH,OAAOhE,KAAK4+B,OAAOgB,SAASvsB,IAGhC0wD,EAAA7kE,UAAAkrD,SAAA,WACI,OAAOv5C,QAAQu8B,OAAO,IAAIkd,KAG9ByZ,EAAA7kE,UAAAiR,WAAA,WACI,OAAOU,QAAQY,QAAQzR,KAAK4+B,OAAO1nB,aAGvC6sD,EAAA7kE,UAAA4gC,aAAA,WACI,OAAOjvB,QAAQY,QAAQzR,KAAK4+B,OAAO1nB,aAE3C6sD,EA1BA,MCGA,WACI,SAAAC,EACYplC,EACAorB,EACA0E,GAFA1uD,KAAA4+B,SACA5+B,KAAAgqD,sBACAhqD,KAAA0uD,wBA8ChB,OA3CIsV,EAAA9kE,UAAAyoD,QAAA,SAAQr0C,EAA2BtP,GAAnC,IAAAjE,EAAAC,KACYwoB,EAAAlV,EAAAkV,QAASH,EAAAzmB,EAAA,OAAA0R,EAAA,aACXkgD,EAAexzD,KAAKikE,yBAAyBz7C,GAAWlV,EAAU+U,EAExE,IAAKG,EACD,MAAM,IAAIumC,GAA4B,CAAC,YAG3C,OAAO/uD,KAAK4+B,OAAOgB,SAAS5/B,KAAKgqD,oBAAoBzD,YAAYiN,EAAcxvD,IAC1EwD,KAAK,WACF,OAAAzH,EAAK6+B,OAAOgB,SAAS7/B,EAAK2uD,sBAAsBzC,yBAAyBzjC,EAAQtgB,SAAUsgB,EAAQ8P,eAI/G0rC,EAAA9kE,UAAAkrD,SAAA,SAASpmD,GACL,IAAMmU,EAAQnY,KAAK4+B,OAAO1nB,WACpBmR,EAAQlQ,EAAMkQ,MAAM2R,WACpBv3B,EAAS0V,EAAMqQ,QAAQ8M,mBAE7B,OAAIjN,GAAU5lB,IAAWo4B,GAAA,GAAkCp4B,IAAWo4B,GAAA,EAI/DhqB,QAAQu8B,OAAO,IAAIkd,IAHftqD,KAAK4+B,OAAOgB,SAAS5/B,KAAKgqD,oBAAoBxD,cAAcn+B,EAAM6H,QAASlsB,KAM1FggE,EAAA9kE,UAAAiR,WAAA,WACI,OAAOU,QAAQY,QAAQzR,KAAK4+B,OAAO1nB,aAGvC8sD,EAAA9kE,UAAA4gC,aAAA,WACI,OAAOjvB,QAAQY,QAAQzR,KAAK4+B,OAAO1nB,aAG/B8sD,EAAA9kE,UAAA+kE,yBAAR,SAAiCz7C,GAG7B,QAAKA,IAIwB,UAAtBA,EAAQ8P,WAA8C,iBAArB9P,EAAQtgB,WAExD87D,EAlDA,MCEA,WAGI,SAAAE,EACYtlC,EACAorB,EACA0E,EACAmT,GAHA7hE,KAAA4+B,SACA5+B,KAAAgqD,sBACAhqD,KAAA0uD,wBACA1uD,KAAA6hE,oBA4DhB,OAzDIqC,EAAAhlE,UAAAiR,WAAA,SAAWnM,GAAX,IAAAjE,EAAAC,KACYkI,EAAAlE,EAAAkE,SAGR,GAFAlI,KAAK6gC,eAAiB7gC,KAAK4+B,OAAO1nB,WAAWihB,eAAeE,iBAAiBnwB,IAExElI,KAAK6gC,eACN,MAAM,IAAIC,EAAA,EAAiBA,EAAA,EAAqBngC,sBAGpD,OAAKX,KAAK6gC,eAAe1pB,OAAOu9C,aAIzB10D,KAAK6hE,kBAAkBpH,QAAQvyD,GACjCV,KAAK,WAAM,OAAAzH,EAAK6+B,OAAO1nB,aAJjBrG,QAAQY,QAAQzR,KAAK4+B,OAAO1nB,aAO3CgtD,EAAAhlE,UAAAyoD,QAAA,SAAQr0C,EAA2BtP,GAAnC,IAAAjE,EAAAC,KACI,GAAIA,KAAKmkE,yBACL,OAAOnkE,KAAK4+B,OAAOgB,SACf5/B,KAAKgqD,oBAAoBzD,YAAY3kD,EAAA,YAC9B0R,EAAO,CACVkV,QAASlV,EAAQkV,QAAU,CAAEtgB,SAAUoL,EAAQkV,QAAQtgB,eAAaE,IACrEpE,IAIH,IAAAwkB,EAAAlV,EAAAkV,QAASH,EAAAzmB,EAAA,OAAA0R,EAAA,aAEjB,IAAKkV,EACD,MAAM,IAAIsY,EAAA,EAAiBA,EAAA,EAAqBpgC,gBAGpD,OAAOV,KAAK4+B,OAAOgB,SAAS5/B,KAAKgqD,oBAAoBzD,YAAYl+B,EAAOrkB,IACnEwD,KAAK,WACF,IAAKzH,EAAK8gC,eACN,MAAM,IAAIC,EAAA,EAAiBA,EAAA,EAAqBngC,sBAGpD,OAAOZ,EAAK8gC,eAAe1pB,OAAOu9C,aAC9B30D,EAAK8hE,kBAAkBnH,MAAMlyC,GAC7BzoB,EAAK6+B,OAAOgB,SAAS7/B,EAAK2uD,sBAAsB5C,cAActjC,OAI9E07C,EAAAhlE,UAAAkrD,SAAA,WACI,OAAOv5C,QAAQu8B,OAAO,IAAIkd,KAG9B4Z,EAAAhlE,UAAA4gC,aAAA,WACI,OAAOjvB,QAAQY,QAAQzR,KAAK4+B,OAAO1nB,aAG/BgtD,EAAAhlE,UAAAilE,uBAAR,WAGI,OAFcnkE,KAAK4+B,OAAO1nB,WAEbsR,QAAQ8M,qBAAuBuF,GAAA,GAEpDqpC,EAnEA,MCCA,WAKI,SAAAE,EACYxlC,EACAorB,EACAl7C,EACAC,QAAA,IAAAA,MAAAnJ,QAHA5F,KAAA4+B,SACA5+B,KAAAgqD,sBACAhqD,KAAA8O,gBACA9O,KAAA+O,UANJ/O,KAAAqkE,kBAA4B,EA8GxC,OArGID,EAAAllE,UAAAiR,WAAA,SAAWnM,GAAX,IAAAjE,EAAAC,KACUmY,EAAQnY,KAAK4+B,OAAO1nB,WAK1B,OAHAlX,KAAK6gC,eAAiB1oB,EAAMggB,eAAeE,iBAAiBr0B,EAAQkE,UACpElI,KAAKqkE,kBAAwF,KAApErgE,EAAQsgE,eAAiBtgE,EAAQsgE,cAAcC,iBAEnEvkE,KAAKwkE,sBAIHxkE,KAAK8O,cAAcU,aACrBhI,KAAK,SAAAiI,GAGF,GAFA1P,EAAK0kE,WAAah1D,GAEb1P,EAAK8gC,iBAAmB9gC,EAAK8gC,eAAe1pB,OAAO6vB,WACpD,MAAM,IAAIlG,EAAA,EAAiBA,EAAA,EAAqBngC,sBAGpDZ,EAAK0kE,WAAWjtD,SAASqkD,MAAM97D,EAAK8gC,eAAe1pB,OAAO6vB,WAAY,CAClEV,OAAQ,gBACRo+B,YAAa3kE,EAAK8gC,eAAe1pB,OAAOoqB,SAAW,UAAY,iBAGtE/5B,KAAK,WAAM,OAAAzH,EAAK6+B,OAAO1nB,aAhBjBrG,QAAQY,QAAQzR,KAAK4+B,OAAO1nB,aAmB3CktD,EAAAllE,UAAA4gC,aAAA,WAMI,OALI9/B,KAAKwkE,uBAAyBxkE,KAAKykE,aACnCzkE,KAAKykE,WAAWjtD,SAASmtD,YACzB3kE,KAAKykE,gBAAar8D,GAGfyI,QAAQY,QAAQzR,KAAK4+B,OAAO1nB,aAGvCktD,EAAAllE,UAAAyoD,QAAA,SAAQr0C,EAA2BtP,GAAnC,IAAAjE,EAAAC,KACUyP,EAASzP,KAAKykE,WAEpB,GAAIzkE,KAAK4kE,6BACL,OAAO5kE,KAAK4+B,OAAOgB,SAAS5/B,KAAKgqD,oBAAoBzD,YAAYjzC,EAAStP,IAG9E,IAAKhE,KAAKwkE,uBAAyBxkE,KAAKqkE,iBACpC,OAAOrkE,KAAK4+B,OAAOgB,SAAS5/B,KAAKgqD,oBAAoBzD,YAAYjzC,EAAStP,IACrEwD,KAAK,SAAA2Q,GACF,IAAMuiB,EAAcviB,EAAMqQ,QAAQgN,wBAOlC,OALIkF,IACA36B,EAAKgP,QAAQkgC,IAAIhzB,SAAS/H,KAAOwmB,GAI9B,IAAI7pB,QAAe,gBAItC,IAAKpB,EACD,MAAM,IAAI6yB,GAAA,EAAoBA,GAAA,EAAwB9xB,uBAK1D,OAFAf,EAAO+H,SAASqtD,SAET7kE,KAAK4+B,OAAOgB,SAAS5/B,KAAKgqD,oBAAoBzD,YAAYjzC,EAAStP,IACrEwD,KAAK,SAAA2Q,GACF,IAAMuiB,EAAcviB,EAAMqQ,QAAQgN,wBAOlC,OALIkF,GACAjrB,EAAO+H,SAASstD,UAAUpqC,GAIvB,IAAI7pB,QAAe,gBAE7B/I,MAAM,SAAAC,GAGH,OAFA0H,EAAO+H,SAASmtD,YAET9zD,QAAQu8B,OAAOrlC,MAIlCq8D,EAAAllE,UAAAkrD,SAAA,SAASpmD,GACL,IACMqkB,EADQroB,KAAK4+B,OAAO1nB,WACNmR,MAAM2R,WAE1B,OAAI3R,GAASroB,KAAK4kE,6BACP5kE,KAAK4+B,OAAOgB,SAAS5/B,KAAKgqD,oBAAoBxD,cAAcn+B,EAAM6H,QAASlsB,IAG/E6M,QAAQu8B,OAAO,IAAIkd,KAGtB8Z,EAAAllE,UAAA0lE,2BAAR,WACI,IAAMzsD,EAAQnY,KAAK4+B,OAAO1nB,WAE1B,OAAOiB,EAAMqQ,QAAQ8M,qBAAuBuF,GAAA,GACrC1iB,EAAMqQ,QAAQ8M,qBAAuBuF,GAAA,GAGxCupC,EAAAllE,UAAAslE,oBAAR,WACI,SAAUxkE,KAAK6gC,iBAAkB7gC,KAAK6gC,eAAe1pB,OAAO6vB,aAEpEo9B,EAjHA,gBCAA,WACI,SAAAW,EACYnmC,EACAorB,EACA0E,EACAluB,GAHAxgC,KAAA4+B,SACA5+B,KAAAgqD,sBACAhqD,KAAA0uD,wBACA1uD,KAAAwgC,cAgDhB,OA7CIukC,EAAA7lE,UAAAyoD,QAAA,SAAQr0C,EAA2BtP,GAAnC,IAAAjE,EAAAC,KACYwoB,EAAAlV,EAAAkV,QAASH,EAAAzmB,EAAA,OAAA0R,EAAA,aACXiyB,EAAc/c,GAAWA,EAAQ+c,YAEvC,IAAK/c,IAAY+c,EACb,MAAM,IAAIwpB,GAA4B,CAAC,wBAG3C,OAAO/uD,KAAK4+B,OAAOgB,SAAS5/B,KAAKgqD,oBAAoBzD,YAAYl+B,EAAOrkB,IACnEwD,KAAK,WACF,OAAAzH,EAAK6+B,OAAOgB,SAAS7/B,EAAK2uD,sBAAsB5C,cAAclqD,EAAA,YAAK4mB,EAAO,CAAE+c,YAAWA,QAE1Fz9B,MAAM,SAAAC,GACH,OAAMA,aAAiB6U,GAAA,GAAkB5e,OAAA8O,GAAA,KAAA9O,CAAK+J,EAAMxF,KAAKO,OAAQ,CAAEwO,KAAM,4BAIlE,IAAIT,QAAQ,WACf9Q,EAAKygC,YAAYyC,SAASl7B,EAAMxF,KAAKu4D,gBAAgBgC,QAAS,CAC1DyE,MAAOx5D,EAAMxF,KAAKu4D,gBAAgBqC,mBAClCqE,QAASz5D,EAAMxF,KAAKu4D,gBAAgB2G,aACpCC,GAAI35D,EAAMxF,KAAKu4D,gBAAgBkC,kBAP5BnsD,QAAQu8B,OAAOrlC,MAatCg9D,EAAA7lE,UAAAkrD,SAAA,SAASpmD,GACL,IAAMmU,EAAQnY,KAAK4+B,OAAO1nB,WACpBmR,EAAQlQ,EAAMkQ,MAAM2R,WAE1B,OAAI3R,GAASlQ,EAAMqQ,QAAQ8M,qBAAuBuF,GAAA,EACvC76B,KAAK4+B,OAAOgB,SAAS5/B,KAAKgqD,oBAAoBxD,cAAcn+B,EAAM6H,QAASlsB,IAG/E6M,QAAQu8B,OAAO,IAAIkd,KAG9Bya,EAAA7lE,UAAAiR,WAAA,WACI,OAAOU,QAAQY,QAAQzR,KAAK4+B,OAAO1nB,aAGvC6tD,EAAA7lE,UAAA4gC,aAAA,WACI,OAAOjvB,QAAQY,QAAQzR,KAAK4+B,OAAO1nB,aAE3C6tD,EArDA,gBCVA,SAAAllE,GACI,SAAAmlE,EAAY3jE,GAAZ,IAAAtB,EACIF,EAAApC,KAAAuC,KAAMqB,GAAW,8BAA4BrB,YAE7CD,EAAKlC,KAAO,0BACZkC,EAAKE,KAAO,wBAEpB,OAPqD2B,EAAA,UAAAojE,EAAAnlE,GAOrDmlE,EAPA,CAAqDn6B,EAAA,If+DrD,SAAY00B,GACRA,EAAA,mCACAA,EAAA,oBACAA,EAAA,iCACAA,EAAA,UACAA,EAAA,wBACAA,EAAA,0BACAA,EAAA,sBACAA,EAAA,YACAA,EAAA,8BATJ,CAAYA,QAAS,KAYrB,SAAYC,GACRA,EAAA,oBACAA,EAAA,wBACAA,EAAA,YAHJ,CAAYA,QAAiB,KgBxC7B,kBAMI,SAAAyF,EACYrmC,EACAyB,EACA2pB,EACA0E,EACAzuB,EACAo6B,EACArzD,EACA8H,GAPA9O,KAAA4+B,SACA5+B,KAAAqgC,yBACArgC,KAAAgqD,sBACAhqD,KAAA0uD,wBACA1uD,KAAAigC,8BACAjgC,KAAAq6D,gCACAr6D,KAAAgH,iBACAhH,KAAA8O,gBAyPhB,OAtPIm2D,EAAA/lE,UAAAiR,WAAA,SAAWnM,GAAX,IAAAjE,EAAAC,KACYkI,EAAAlE,EAAAkE,SAIR,OAFAlI,KAAKklE,mBAAmBh9D,GAEjBlI,KAAK8O,cAAcm3B,OACrBz+B,KAAK,SAAA29D,GACF,WAAIt0D,QAAQ,SAACY,EAAS27B,GAClBrtC,EAAKqlE,aAAeD,EAChBplE,EAAKslE,gBAAgBrhE,EAAS,CAAEyN,QAAOA,EAAE27B,OAAMA,KAEnDrtC,EAAKqlE,aAAaE,YAEzB99D,KAAK,WAAM,OAAAzH,EAAK6+B,OAAO1nB,cAGhC+tD,EAAA/lE,UAAAyoD,QAAA,SAAQyR,EAAgCp1D,GAAxC,IAAAjE,EAAAC,KACYwoB,EAAA4wC,EAAA5wC,QAER,IAAKA,IAAYA,EAAQtgB,SACrB,MAAM,IAAIs3B,GAAA,EAAqB,yFAKnC,OAFAx/B,KAAKklE,mBAAmB18C,EAAQtgB,UAEzBlI,KAAKulE,oBAAoB/8C,EAAQtgB,UACnCV,KAAK,SAAA+9B,GACF,OAAAxlC,EAAK6+B,OAAOgB,SAAS7/B,EAAKiqD,oBAAoBzD,YAAYvoD,OAAA8O,GAAA,KAAA9O,CAAKo7D,EAAc,WAAYp1D,IACxFwD,KAAK,WACF,OAAAzH,EAAK6+B,OAAOgB,SAAS7/B,EAAK2uD,sBAAsB5C,cAAclqD,EAAA,YAAK4mB,EAAO,CAAE+c,YAAWA,WAIvG0/B,EAAA/lE,UAAAkrD,SAAA,WACI,OAAOv5C,QAAQu8B,OAAO,IAAIkd,KAG9B2a,EAAA/lE,UAAA4gC,aAAA,WACI,OAAOjvB,QAAQY,QAAQzR,KAAK4+B,OAAO1nB,aAG/B+tD,EAAA/lE,UAAAgmE,mBAAR,SAA2Bh9D,GACvB,IAAMiQ,EAAQnY,KAAK4+B,OAAO1nB,WAG1B,GAFAlX,KAAK6gC,eAAiB1oB,EAAMggB,eAAeE,iBAAiBnwB,IAEvDlI,KAAK6gC,iBAAmB7gC,KAAK6gC,eAAemF,mBAC7C,MAAM,IAAIlF,EAAA,EAAiBA,EAAA,EAAqBngC,uBAIhDskE,EAAA/lE,UAAAsmE,gBAAR,SAAwB/R,GACpB,OAAQA,EAAYgS,eAChB,IAAK,aACD,MAAO,KACX,IAAK,YACD,MAAO,KACX,QACI,MAAO,OAIXR,EAAA/lE,UAAAqmE,oBAAR,SAA4Br9D,GAA5B,IAAAnI,EAAAC,KAEU26B,EADQ36B,KAAK4+B,OAAO1nB,WACEihB,eAAeE,iBAAiBnwB,GAE5D,GAAIyyB,EAAe,CACP,IAAAqL,EAAArL,EAAAqL,mBACR,GAAIA,GAAsBA,EAAmBT,YAAY3K,MACrD,OAAO/pB,QAAQY,QAAQ,CAAEmpB,MAAOD,EAAcqL,mBAAmBT,YAAY3K,QAIrF,OAAO,IAAI/pB,QAAyB,SAACY,EAAS27B,GAC1C,IAAKrtC,EAAKqlE,aACN,MAAM,IAAI9iC,GAAA,EAAoBA,GAAA,EAAwB9xB,uBAGtDzQ,EAAK2lE,uBACL3lE,EAAK2lE,sBAAsBt4B,OAAO,IAAI7vB,GAAA,GAG1Cxd,EAAK2lE,sBAAwB,CAAEj0D,QAAOA,EAAE27B,OAAMA,GAC9CrtC,EAAKqlE,aAAaO,sBAIlBV,EAAA/lE,UAAAmmE,gBAAR,SAAwBrhE,EAAmC4hE,GAA3D,IAAA7lE,EAAAC,KACY6lE,EAAA7hE,EAAA8hE,OAER,IAAKD,IAAkB7lE,KAAK6gC,eACxB,MAAM,IAAIrB,GAAA,EAAqB,wEAKnC,OAFAx/B,KAAK+lE,eAAiBF,EAEfjkE,EAAA,YACA5B,KAAK+lE,eACL/lE,KAAK6gC,eAAemF,mBAAkB,CACzCggC,UAAW,CACPC,0BAA2B,SAACnjE,EAAQ83B,EAAOsrC,EAAUC,EAAgBC,GAC7DF,GAAYA,EAASG,sBAAwB7G,GAAkB8G,KAC/DvmE,EAAKwmE,2BAA2BzjE,EAAQ83B,EAAOsrC,EAAUC,EAAgBC,GAEzErmE,EAAKymE,yBAAyB1jE,EAAQ83B,IAG9C6rC,qBAAsB,WAAM,OAAA1mE,EAAK2mE,0BACjCC,iBAAkB,SAAAC,GACN,IAAA1gC,EAAA2/B,EAAA3/B,WAEJA,GACAnmC,EAAK8mE,oBAAoBD,EAAS1gC,IAG1C4gC,kBAAmB,WACflB,EAASn0D,UACT1R,EAAKgnE,kBAETC,2BAA4B,WAAM,OAAApB,EAASx4B,OAAO,IAAI65B,SAK1DhC,EAAA/lE,UAAAqnE,2BAAR,SACIzjE,EACA83B,EACAsrC,EACAC,EACAC,GAEA,IAAMhkC,EAAUpiC,KAAK+lE,gBAAkB/lE,KAAK+lE,eAAe3jC,SAAW9sB,EAAA,KAChEs/C,EAAkB50D,KAAK+lE,gBAAkB/lE,KAAK+lE,eAAenR,iBAAmBt/C,EAAA,KAElFxS,EACAs/B,EAAQt/B,GACD83B,GAAS56B,KAAK6gC,gBACrB7gC,KAAKsjD,2BACDtjD,KAAK6gC,eAAe51B,GACpB2vB,EACAsrC,EACAC,EACAC,GAEC5+D,KAAKotD,GACL9sD,MAAMs6B,IAIX6iC,EAAA/lE,UAAAsnE,yBAAR,SAAiC1jE,EAAiC83B,GAC9D,IAAK56B,KAAK0lE,sBACN,MAAM,IAAI76B,EAAA,GAGVjQ,GAAU93B,IAME9C,KAAK+lE,gBAAkB/lE,KAAK+lE,eAAe3jC,SAAW9sB,EAAA,MAE9DxS,GAER9C,KAAK0lE,sBAAsBt4B,OAAOtqC,IAT9B9C,KAAK0lE,sBAAsBj0D,QAAQ,CAAEmpB,MAAKA,KAY1CqqC,EAAA/lE,UAAAokD,2BAAR,SACIp7C,EACA0yB,EACAsrC,EACAC,EACAC,GALJ,IAAArmE,EAAAC,KAOI,OAAOA,KAAK4+B,OAAOgB,SAAS5/B,KAAKq6D,8BAA8Btd,kBAAkB,WAC7E,OAAOh9C,EAAK+kD,yBAAyBlqB,EAAOsrC,EAAUC,EAAgBC,GACrE5+D,KAAK,WACF,OAAAqJ,QAAQC,IAAI,CACZ/Q,EAAK6+B,OAAOgB,SAAS7/B,EAAKsgC,uBAAuBvoB,uBACjD/X,EAAK6+B,OAAOgB,SAAS7/B,EAAKkgC,4BAA4Bh4B,kBAAkBC,SAE7E,CAAEA,SAAQA,IAAK,CAAEy3B,QAAS,uBAGzBslC,EAAA/lE,UAAAwnE,uBAAR,WACI,IAAMvuD,EAAQnY,KAAK4+B,OAAO1nB,WACpBM,EAAWW,EAAMX,SAASC,cAC1BwZ,EAAc9Y,EAAMhB,OAAO+e,iBAEjC,IAAK1e,EACD,MAAM,IAAIspB,EAAA,EAAiBA,EAAA,EAAqBzgC,iBAGpD,IAAK4wB,EACD,MAAM,IAAI6P,EAAA,EAAiBA,EAAA,EAAqBxgC,uBAGpD,MAAO,CACH4mE,wBAAwB,EACxBC,oBAAoB,EACpBxyB,aAAc1jB,EAAY6R,SAASxxB,KACnCyf,YAAa/wB,KAAKwlE,gBAAgBv0C,EAAY+xB,aAAakQ,cAC3DhC,MAAO,CACHx/B,MAAOT,EAAY+xB,aAAaokB,UAChCj8D,OAAQizC,OAAO5mC,EAAS0gC,UACxBmvB,SAAS,KAKbpC,EAAA/lE,UAAA4lD,yBAAR,SAAiClqB,EAAgBsrC,EAAqBC,EAA0BC,GAC5F,OAAOpmE,KAAKgH,eAAetB,KAAK,gBAAiB,CAC7ClD,QAAS,CACLoG,OAAQ,YACRg9B,eAAgB,qCAEpBrjC,KAAM,CACFq4B,MAAKA,EACLuI,SAAU,WACV9vB,OAAQ,wBACR6yD,SAAU5iC,KAAKC,UAAU2iC,GACzBC,eAAgB7iC,KAAKC,UAAU4iC,GAC/BC,gBAAiB9iC,KAAKC,UAAU6iC,OAKpCnB,EAAA/lE,UAAA6nE,eAAR,WACI,IACMrnD,EADQ1f,KAAK4+B,OAAO1nB,WACGwI,eAAe4U,oBAE5C,IAAKt0B,KAAKolE,aACN,MAAM,IAAI9iC,GAAA,EAAoBA,GAAA,EAAwB9xB,uBAGtDkP,GAAkBA,EAAekT,YACjC5yB,KAAKolE,aAAakC,cAAc5nD,EAAekT,aAI/CqyC,EAAA/lE,UAAA2nE,oBAAR,SAA4BD,EAAqCtQ,GAC7D,IAAMiR,EAAgBvzD,SAASgxB,eAAesxB,EAAQkR,WAElDD,GAAiBX,EAAQ1gC,aACzBqhC,EAAc1lC,MAAM6M,QAAU,iBAG1Cu2B,EAvQA,MChCA,WACI,SAAAwC,EACY34D,GAAA9O,KAAA8O,gBAWhB,OARI24D,EAAAvoE,UAAA+mC,KAAA,WAGI,OAAOjmC,KAAK8O,cAAcG,WAFR,oCAGbzH,KAAK,WAAM,gBAACxD,GACT,WAAK4B,OAAwB8hE,cAAc1jE,OAG3DyjE,EAbA,MC+BA,WAII,SAAAE,EACY/oC,EACAqB,EACAyuB,EACA1E,EACA4d,GAJA5nE,KAAA4+B,SACA5+B,KAAAigC,8BACAjgC,KAAA0uD,wBACA1uD,KAAAgqD,sBACAhqD,KAAA4nE,sBA+PhB,OA5PID,EAAAzoE,UAAAiR,WAAA,SAAWnM,GAAX,IAAAjE,EAAAC,KACU6nE,EAAgB7jE,EAAQ8jE,SAE9B,IAAKD,EACD,MAAM,IAAIroC,GAAA,EAAqB,qFAGnC,IAAM7E,EAAgB36B,KAAK4+B,OAAO1nB,WAAWihB,eAAeE,iBAAiBr0B,EAAQkE,UAErF,IAAKyyB,EACD,MAAM,IAAImG,EAAA,EAAiBA,EAAA,EAAqBngC,sBAGpD,OAAOX,KAAK4nE,oBAAoB3hC,KAAKtL,EAAcqL,mBAAmB+Q,sBACjEvvC,KAAK,SAAAugE,GACFhoE,EAAKioE,gBAAkBD,EACvB,IACME,EADWloE,EAAKioE,gBAAgBE,WACTtpE,OAAO,OAAQ,CACxCijC,MAAOgmC,EAAchmC,QAOzB,OAJAomC,EAAYE,MAAM,IAAIN,EAAcvlD,aAEpCviB,EAAKqoE,aAAeH,EAEbp3D,QAAQY,QAAQ1R,EAAK6+B,OAAO1nB,eAI/CywD,EAAAzoE,UAAAyoD,QAAA,SAAQr0C,EAA2BtP,GAAnC,IAAAjE,EAAAC,KACYwoB,EAAAlV,EAAAkV,QAASH,EAAAzmB,EAAA,OAAA0R,EAAA,aACXiyB,EAAc/c,GAAWA,EAAQ+c,YACjCg0B,EAAuBrnC,QAAQqT,GAAgBA,EAAiCg0B,sBAEtF,IAAK/wC,EACD,MAAM,IAAIumC,GAA4B,CAAC,YAG3C,OAAO/uD,KAAK4+B,OAAOgB,SAAS5/B,KAAKgqD,oBAAoBzD,YAAYl+B,EAAOrkB,IACnEwD,KAAK,WACF,OAAI+9B,GAAeinB,GAAoBjnB,GAC5BxlC,EAAK6+B,OAAOgB,SAAS7/B,EAAK2uD,sBAAsB5C,cAAclqD,EAAA,YAAI4mB,EAAO,CAAE+c,YAAWA,MACxFz9B,MAAM,SAAAC,GACH,OAAMA,aAAiB6U,GAAA,GAAkB5e,OAAA8O,GAAA,KAAA9O,CAAK+J,EAAMxF,KAAKO,OAAQ,CAAEwO,KAAM,4BAIlEvR,EAAKsoE,eAAeC,kBAAkBvgE,EAAMxF,KAAKu4D,gBAAgBvyC,OACnE/gB,KAAK,SAAA+gE,GACF,GAAIA,EAAexgE,QAAUwgE,EAAeC,cAAcv9D,GACtD,MAAM,IAAI4/B,EAAA,EAAc09B,EAAexgE,OAASwgE,EAAexgE,MAAM1G,SAGzE,IAAMuuD,EAAiB,CACnB1nD,SAAUsgB,EAAQtgB,SAClBq9B,YAAa,CACT3K,MAAO2tC,EAAeC,cAAcv9D,KAI5C,OAAOlL,EAAK6+B,OAAOgB,SAAS7/B,EAAK2uD,sBAAsB5C,cAAc8D,MAhBlE/+C,QAAQu8B,OAAOrlC,KAqB/BhI,EAAK6+B,OAAOgB,SAAS7/B,EAAKkgC,4BAA4Bh4B,kBAAkBugB,EAAQtgB,WAClFV,KAAK,SAAA2Q,GACF,IAAMwiB,EAAgBxiB,EAAMggB,eAAeE,iBAAiB7P,EAAQtgB,UAC9DsgE,EAAgB7tC,GAAiBA,EAAcvqB,YAErD,IAAKrQ,EAAKqoE,aACN,MAAM,IAAI9lC,GAAA,EAAoBA,GAAA,EAAwB9xB,uBAG1D,OAAOzQ,EAAKsoE,eAAeI,oBAAoB,OAAQ1oE,EAAKqoE,aAAcroE,EAAK2oE,kCAC1ElhE,KAAK,SAAAmhE,GACF,GAAIA,EAAoB5gE,QAAU4gE,EAAoBhuC,cAAc1vB,GAChE,MAAM,IAAI4/B,EAAA,EAAc89B,EAAoB5gE,OAAS4gE,EAAoB5gE,MAAM1G,SAGnF,IAAKmnE,EACD,MAAM,IAAI1nC,EAAA,EAAiBA,EAAA,EAAqBngC,sBAGpD,IAAMioE,EAA2BhnE,EAAA,YAC1B7B,EAAK8oE,6BAA6BtP,GAAqB,CAC1DuP,eAAgBH,EAAoBhuC,cAAc1vB,KAGtD,OAAOlL,EAAKsoE,eAAeC,kBAAkBE,EAAeI,KAE/DphE,KAAK,SAAA+gE,GACF,GAAIA,EAAexgE,QAAUwgE,EAAeC,cAAcv9D,GACtD,MAAM,IAAI4/B,EAAA,EAAc09B,EAAexgE,OAASwgE,EAAexgE,MAAM1G,SAGzE,IAAMuuD,EAAiB,CACnB1nD,SAAUsgB,EAAQtgB,SAClBq9B,YAAa,CACT3K,MAAO2tC,EAAeC,cAAcv9D,GACpCsuD,qBAAoBA,IAI5B,OAAOx5D,EAAK6+B,OAAOgB,SAAS7/B,EAAK2uD,sBAAsB5C,cAAc8D,WAMjG+X,EAAAzoE,UAAAkrD,SAAA,WACI,OAAOv5C,QAAQu8B,OAAO,IAAIkd,KAG9Bqd,EAAAzoE,UAAA4gC,aAAA,WAKI,OAJI9/B,KAAKooE,cACLpoE,KAAKooE,aAAaW,UAGfl4D,QAAQY,QAAQzR,KAAK4+B,OAAO1nB,aAG/BywD,EAAAzoE,UAAAmpE,aAAR,WACI,IAAKroE,KAAKgoE,gBACN,MAAM,IAAI1lC,GAAA,EAAoBA,GAAA,EAAwB9xB,uBAG1D,OAAOxQ,KAAKgoE,iBAGRL,EAAAzoE,UAAA8pE,yBAAR,SAAiCtpD,GAC7B,GAAKA,EAIL,MAAO,CACHgT,KAAMhT,EAAegT,KACrBlB,QAAS9R,EAAeqR,YACxBmT,MAAOxkB,EAAe8S,SACtB4R,MAAO1kB,EAAe+S,SACtB6R,YAAa5kB,EAAekT,WAC5Bza,MAAOuH,EAAe6d,sBAItBoqC,EAAAzoE,UAAA+pE,0BAAR,SAAkCzwD,GAC9B,OAAKA,EAIE,CACHka,KAAMla,EAAgBka,KACtBlB,QAAShZ,EAAgBuY,YACzBmT,MAAO1rB,EAAgBga,SACvB4R,MAAO5rB,EAAgBia,SACvB6R,YAAa9rB,EAAgBoa,WAC7Bza,MAAOK,EAAgB+kB,qBAThB,IAaPoqC,EAAAzoE,UAAAgqE,yBAAR,SAAiCtmE,OAAAC,OAAA,IAAAD,EAAA,GAAAA,EAAE8c,EAAA7c,EAAA6c,eAAgBkF,EAAA/hB,EAAA+hB,SACzCukD,EAAuB,CACzB/uD,QAASpa,KAAKgpE,yBAAyBtpD,IAG3C,OAAIkF,EACOhjB,EAAA,YACAunE,EAAoB,CACvBtlC,MAAOjf,EAASif,MAChBhmC,KAAS+mB,EAASyN,UAAS,IAAIzN,EAAS0N,WAI5C5S,EACO9d,EAAA,YACAunE,EAAoB,CACvBtlC,MAAOnkB,EAAemkB,MACtBhmC,KAAS6hB,EAAe2S,UAAS,IAAI3S,EAAe4S,WAIrD,CACHz0B,KAAM,UAIN8pE,EAAAzoE,UAAAkqE,0BAAR,SAAkCxmE,OAAAC,OAAA,IAAAD,EAAA,GAAAA,EAAE4V,EAAA3V,EAAA2V,gBAAiBoM,EAAA/hB,EAAA+hB,SAC3CykD,EAAwB,CAC1BjvD,QAASpa,KAAKipE,0BAA0BzwD,IAG5C,OAAIoM,EACOhjB,EAAA,YACAynE,EAAqB,CACxBxrE,KAAS+mB,EAASyN,UAAS,IAAIzN,EAAS0N,WAI5C9Z,EACO5W,EAAA,YACAynE,EAAqB,CACxBxrE,KAAS2a,EAAgB6Z,UAAS,IAAI7Z,EAAgB8Z,WAIvD1wB,EAAA,YACAynE,EAAqB,CACxBxrE,KAAM,WAIN8pE,EAAAzoE,UAAAoqE,aAAR,WACI,IAAM1kD,EAAW5kB,KAAK4+B,OAAO1nB,WAAW0N,SAASoQ,cAEjD,IAAIpQ,GAC2B,KAAvBA,EAASyN,WAA0C,KAAtBzN,EAAS0N,UAAsC,KAAnB1N,EAASif,MAK1E,OAAOjf,GAGH+iD,EAAAzoE,UAAA2pE,6BAAR,SAAqCtP,GACjC,IAAM30C,EAAW5kB,KAAKspE,eAChB9wD,EAAkBxY,KAAK4+B,OAAO1nB,WAAWsB,gBAAgByc,qBAEzDs0C,EAAkB,CACpBt8C,SAAUjtB,KAAKopE,0BAA0B,CAAE5wD,gBAAeA,EAAEoM,SAAQA,KAGxE,OAAIA,EACOhjB,EAAA,YACA2nE,EAAe,CAClBC,cAAe5kD,EAASif,MACxB4lC,oBAAqBlQ,IAGlB33D,EAAA,YACA2nE,IAKP5B,EAAAzoE,UAAAwpE,+BAAR,WACI,IAAM9jD,EAAW5kB,KAAKspE,eAChB5pD,EAAiB1f,KAAK4+B,OAAO1nB,WAAWwI,eAAe4U,oBAE7D,MAAO,CACHo1C,gBAAiB1pE,KAAKkpE,yBAAyB,CAAExpD,eAAcA,EAAEkF,SAAQA,MAGrF+iD,EAxQA,MC9BA,WACI,SAAAgC,EACY76D,EACAC,QAAA,IAAAA,MAAAnJ,QADA5F,KAAA8O,gBACA9O,KAAA+O,UAgBhB,OAbI46D,EAAAzqE,UAAA+mC,KAAA,SAAK2jC,GAAL,IAAA7pE,EAAAC,KACI,OAAOA,KAAK8O,cACPG,WAAW,6BACXzH,KAAK,WACF,IAAKzH,EAAKgP,QAAQ86D,OACd,MAAM,IAAIh/B,EAAA,EAGd,OAAO9qC,EAAKgP,QAAQ86D,OAAOD,EAAgB,CACvCE,MAAO,CAAC,8BAI5BH,EAnBA,MCGA,WAGI,SAAAI,EACYj7D,GAAA9O,KAAA8O,gBAmBhB,OAhBIi7D,EAAA7qE,UAAAiR,WAAA,eAAApQ,EAAAC,KACI,OAAOA,KAAK8O,cACPG,WAXM,8CAYNzH,KAAK,WAAM,OAAAzH,EAAKiqE,YAAepkE,OAAuBqkE,MAAMC,OAC5D1iE,KAAK,WAAM,OAAAzH,KAGpBgqE,EAAA7qE,UAAAwhE,aAAA,WACI,IAAK1gE,KAAKgqE,YACN,MAAM,IAAI1nC,GAAA,EAAoBA,GAAA,EAAwB9xB,uBAK1D,OAFAxQ,KAAKgqE,YAAYG,sBAEVnqE,KAAKgqE,YAAYI,kBAEhCL,EAvBA,MCCA,SAAAlqE,GACI,SAAAwqE,EACI50D,EACA60D,EACAC,EACQ5K,GAJZ,IAAA5/D,EAMIF,EAAApC,KAAAuC,KAAMyV,EAAO60D,EAAoBC,IAAqBvqE,YAF9CD,EAAA4/D,qBAuBhB,OA5BkD/9D,EAAA,UAAAyoE,EAAAxqE,GAU9CwqE,EAAAnrE,UAAAiR,WAAA,SAAWnM,GAGP,OAFAhE,KAAK2/D,iBAAiBxvD,aAEftQ,EAAAX,UAAMiR,WAAU1S,KAAAuC,KAACgE,IAG5BqmE,EAAAnrE,UAAAyoD,QAAA,SAAQr0C,EAA2BtP,GAC/B,IAAMukB,EAAQvoB,KAAK2/D,iBAAiBe,eAC9B8J,EAAmBxsE,OAAA8O,GAAA,MAAA9O,CAAM,GAAIsV,EAAS,CACxCkV,QAAS,CACL+c,YAAa,CACT79B,gBAAiB6gB,MAK7B,OAAO1oB,EAAAX,UAAMyoD,QAAOlqD,KAAAuC,KAACwqE,EAAkBxmE,IAE/CqmE,EA5BA,CAAkDI,gBCRlD,SAAA5qE,GACI,SAAA6qE,EAAYrpE,GAAZ,IAAAtB,EACIF,EAAApC,KAAAuC,KAAMqB,GAAW,oFAAkFrB,YAEnGD,EAAKlC,KAAO,6BACZkC,EAAKE,KAAO,qBAEpB,OAPwD2B,EAAA,UAAA8oE,EAAA7qE,GAOxD6qE,EAPA,CAAwD7/B,EAAA,MCsBxD,WAII,SAAA8/B,EACY/rC,EACAorB,EACA0E,EACAzuB,EACA8hB,EACA6oB,EACA5jE,GANAhH,KAAA4+B,SACA5+B,KAAAgqD,sBACAhqD,KAAA0uD,wBACA1uD,KAAAigC,8BACAjgC,KAAA+hD,+BACA/hD,KAAA4qE,mBACA5qE,KAAAgH,iBA6GhB,OA1GI2jE,EAAAzrE,UAAAiR,WAAA,eAAApQ,EAAAC,KACI,OAAOA,KAAK4qE,iBAAiB3kC,OACxBz+B,KAAK,SAAAqjE,GAGF,OAFA9qE,EAAK+qE,WAAaD,EAEX9qE,EAAK6+B,OAAO1nB,cAI/ByzD,EAAAzrE,UAAA4gC,aAAA,WAII,OAHA9/B,KAAK6gC,oBAAiBz4B,EACtBpI,KAAK8qE,gBAAa1iE,EAEXyI,QAAQY,QAAQzR,KAAK4+B,OAAO1nB,aAGvCyzD,EAAAzrE,UAAAyoD,QAAA,SAAQr0C,EAA2BtP,GAAnC,IAAAjE,EAAAC,KACYwoB,EAAAlV,EAAAkV,QAASH,EAAAzmB,EAAA,OAAA0R,EAAA,aACTy3D,EAAA/qE,KAAA8qE,WACFpxC,IAAmBpmB,EAAQomB,eAEjC,IAAKlR,EACD,MAAM,IAAIgX,GAAA,EAAqB,gFAGnC,IAAKurC,EACD,MAAM,IAAIzoC,GAAA,EAAoBA,GAAA,EAAwB9xB,uBAG1D,OAAOxQ,KAAK4+B,OAAOgB,SAAS5/B,KAAKgqD,oBAAoBzD,YAAYl+B,EAAOrkB,IACnEwD,KAAK,WAAM,OAAAzH,EAAK6+B,OAAOgB,SACpB7/B,EAAKgiD,6BAA6B9B,kBAAkBz3B,EAAQtgB,SAAU,CAAEwxB,eAAcA,OAEzFlyB,KAAK,WACF,OAAOzH,EAAK6+B,OAAOgB,SAAS7/B,EAAKkgC,4BAA4Bh4B,kBAAkBugB,EAAQtgB,SAAUlE,IAC5FwD,KAAK,SAAA2Q,GAGF,GAFApY,EAAK8gC,eAAiB1oB,EAAMggB,eAAeE,iBAAiB7P,EAAQtgB,WAE/DnI,EAAK8gC,iBAAmB9gC,EAAK8gC,eAAezwB,YAC7C,MAAM,IAAI0wB,EAAA,EAAiBA,EAAA,EAAqBngC,wBAGvD6G,KAAK,WAAM,WAAIqJ,QAA4B,SAACY,EAAS27B,GAClD29B,EAAUC,SAAS7nB,KAAK,CACpB5X,WAAY,SAAC3oC,OAAEyU,EAAAzU,EAAAyU,WAAYc,EAAAvV,EAAAuV,MACvB,MAAS,cAALA,EACOi1B,EAAO,IAAIoiB,IAGb,aAALr3C,GAA4Cd,EACrCtX,EAAKkrE,gCAAgCziD,EAAQtgB,SAAUmP,GACzD7P,KAAK,WAAM,OAAAiK,MAGX,aAAL0G,GAA4Cd,EACrC5F,EAAQ4F,GAGV,aAALc,EACOi1B,EAAO,IAAI89B,GAA2B,4FAGjD99B,EAAO,IAAItR,GAAA,IAEfqvC,WAAY,SAAAC,GACR,IAAKrrE,EAAK8gC,iBAAmB9gC,EAAK8gC,eAAezwB,YAC7C,MAAM,IAAI0wB,EAAA,EAAiBA,EAAA,EAAqBngC,sBAGpDyqE,EAAU9nC,KAAKgH,MAAMvqC,EAAK8gC,eAAezwB,mBAIpD5I,KAAK,SAAAozB,GACF,YAAcxyB,IAAVwyB,EACO76B,EAAK6+B,OAAOgB,SAAS7/B,EAAK2uD,sBAAsB5C,cAAc,CACjE5jD,SAAUsgB,EAAQtgB,SAClBq9B,YAAa,CAAE3K,MAAKA,MAIrB76B,EAAK6+B,OAAO1nB,kBAMvCyzD,EAAAzrE,UAAAkrD,SAAA,WACI,OAAOv5C,QAAQu8B,OAAO,IAAIkd,KAGtBqgB,EAAAzrE,UAAA+rE,gCAAR,SAAwC9nC,EAAkBkoC,GACtD,IAAMtiE,EAAM,2BAA2Bo6B,EAAQ,oBACzCn/B,EAAU,CACZxB,QAAS,CACLoG,OAAQ0zB,EAAA,EAAYzzB,OACpBC,iBAAkBq+B,GAAA,GAEtB5kC,KAAM,CACF8oE,WAAUA,EACVloC,SAAQA,IAIhB,OAAOnjC,KAAKgH,eAAetB,KAAKqD,EAAK/E,IAE7C2mE,EAxHA,MCnBA,WACI,SAAAW,EACYx8D,EACDC,QAAA,IAAAA,MAAAnJ,QADC5F,KAAA8O,gBACD9O,KAAA+O,UAcf,OAXIu8D,EAAApsE,UAAA+mC,KAAA,eAAAlmC,EAAAC,KACI,OAAOA,KAAK8O,cACPG,WAAW,wDACXzH,KAAK,WACF,IAAKzH,EAAKgP,QAAQw8D,IACd,MAAM,IAAI1gC,EAAA,EAGd,OAAO9qC,EAAKgP,QAAQw8D,OAGpCD,EAjBA,GCwDe,SAAAE,GACX/1D,EACAg2D,EACA1jC,EACA2jC,GAEA,IAAMtjC,EAAW,IAAIujC,GAAwBl2D,EAAO,CAAEq9B,aAAcgX,GAAoBqE,cAClF7lB,EAAetqC,OAAAuqC,EAAA,gBAAAvqC,GACf4tE,EAA4B,IAAIC,GAChCC,EAAuB,IAAIC,GAAqBN,GAChDO,EAA8B,IAAIC,EAAA,EAA4B,IAAIC,EAAA,EAA4BnkC,IAC9FokC,EChEK,SAAyC7jC,GACpD,IAAMgX,EAAwB,IAAItW,EAAA,EAAsBV,GAClDiX,EAAsB,IAAIxW,EAAA,EAAoBuW,GAC9C8sB,EAAU,IAAIC,GAEpB,OAAO,IAAIC,GAA0B/sB,EAAqB6sB,GD2DxBG,CAAgCjkC,GAC5DkkC,EAAwB,IAAI9jC,EAAA,EAAsBX,GAClD0kC,EAAoB,IAAIC,GAAkBF,GAC1CG,EAA8B,IAAIC,GAA4BlB,GAC9DpB,EAAqB,IAAIuC,GAAmB,IAAIC,GAAmB/kC,GAAgB0kC,EAAmBE,GACtGpC,EAAuB,IAAIwC,GAAqBjB,EAAsBxB,EAAoBsB,GAC1FoB,EAA6B,IAAInjC,EAAA,EAA2B,IAAIC,EAAA,EAA2B/B,IAC3FklC,EAA8B,IAAIC,EAA4B,IAAIC,EAA4BplC,IAC9FqlC,EAAsB,IAAIzkC,EAAA,EAAoB,IAAIC,EAAA,EAAoBb,IACtES,EAAwB,IAAIC,EAAA,EAAsB+jC,EAAuBY,GACzEC,EAA+B,IAAIC,GAA6BllC,EAAUkiC,GAC1EriC,EAAajqC,OAAAkqC,EAAA,iBAAAlqC,GAgSnB,OA9RAoqC,EAASnrB,SAAS6sC,GAAoByjB,OAAQ,WAC1C,WAAIC,GACA/3D,EACA60D,EACAC,EACAyC,EACA,IAAIS,MAIZrlC,EAASnrB,SAAS6sC,GAAoB4jB,SAAU,WAC5C,WAAIC,GACAl4D,EACAg3D,EACAnC,EACAC,EACAyC,EACAC,EACA,IAAIW,GAAqBtlC,MAIjCF,EAASnrB,SAAS6sC,GAAoB+jB,OAAQ,WAC1C,WAAIC,GACAr4D,EACA60D,EACA0B,EACAiB,EACA,IAAIc,EAAsBzlC,MAIlCF,EAASnrB,SAAS6sC,GAAoBqE,YAAa,WAC/C,WAAIsc,GACAh1D,EACA60D,EACAC,KAIRniC,EAASnrB,SAAS6sC,GAAoBkkB,YAAa,WAC/C,WAAIC,GACAx4D,EACA60D,EACAC,EACA,IAAI2D,GACAz4D,EACA80D,EACAyC,EACA,IAAImB,GAAe,IAAIC,GAAqB9lC,QAKxDF,EAASnrB,SAAS6sC,GAAoBukB,OAAQ,WAC1C,WAAIC,GACA74D,EACA60D,EACA0C,EACAC,EACA,IAAIsB,GAAmBjmC,MAI/BF,EAASnrB,SAAS6sC,GAAoBmE,OAAQ,WAC1C,WAAIugB,GACA/4D,EACA60D,KAIRliC,EAASnrB,SAAS6sC,GAAoBnmD,QAAS,WAC3C,WAAI8qE,GACAh5D,EACA60D,KAIRliC,EAASnrB,SAAS6sC,GAAoBoE,QAAS,WAC3C,WAAIwgB,GACAj5D,EACA60D,EACAC,KAIRniC,EAASnrB,SAAS6sC,GAAoB6kB,OAAQ,WAC1C,WAAIC,GACAn5D,EACA60D,EACAC,EACA,IAAI2D,GACAz4D,EACA80D,EACAyC,EACA,IAAImB,GAAe,IAAIC,GAAqB9lC,QAKxDF,EAASnrB,SAAS6sC,GAAoB+kB,eAAgB,WAClD,WAAIC,GACAr5D,EACA60D,EACA,IAAIrhC,GAAA,EAAmBX,MAI/BF,EAASnrB,SAAS6sC,GAAoBilB,sBAAuB,WACzD,WAAID,GACAr5D,EACA60D,EACA,IAAIrhC,GAAA,EAAmBX,MAI/BF,EAASnrB,SAAS6sC,GAAoBklB,SAAU,WAC5C,WAAIC,GACAx5D,EACA60D,EACAC,EACAtiC,KAIRG,EAASnrB,SAAS6sC,GAAoBolB,OAAQ,WAC1C,WAAIC,GACA15D,EACA+yB,EACA8hC,EACAC,EACAyC,EACAK,EACAtlC,EACA,IAAIqnC,GAAmB9mC,MAI/BF,EAASnrB,SAAS6sC,GAAoBK,yBAA0B,WAC5D,WAAIklB,GACA55D,EACA60D,KAIRliC,EAASnrB,SAAS6sC,GAAoBwlB,UAAW,WAC7C,WAAIC,GACA95D,EACA60D,EACAC,EACAyC,EACAb,KAIR/jC,EAASnrB,SAAS6sC,GAAoBjhB,iBAAkB,WACpD,WAAI2mC,GACA/5D,EACA60D,EACAC,EACAyC,EACAb,KAIR/jC,EAASnrB,SAAS6sC,GAAoB5gB,wBAAyB,WAC3D,WAAIsmC,GACA/5D,EACA60D,EACAC,EACAyC,EACAb,GACA,KAIR/jC,EAASnrB,SAAS6sC,GAAoB2lB,wBAAyB,WAC3D,WAAIC,GACAj6D,EACA+yB,EACAwkC,EACAK,EACA9C,EACAD,EACAjrB,EAA4C/W,EAAcP,GAC1D,IAAI4nC,EAAyBrnC,MAIrCF,EAASnrB,SAAS6sC,GAAoB8lB,UAAW,WAC7C,WAAInQ,GACAhqD,EACA+yB,EACA8hC,EACAC,EACAyC,EACAK,EACAtlC,EACA,IAAI8nC,EAAqBvnC,GACzB,IAAIwnC,GAAgBxnC,MAI5BF,EAASnrB,SAAS6sC,GAAoBimB,qBAAsB,WACxD,WAAIjO,GACArsD,EACA+yB,EACAwkC,EACAK,EACA9C,EACAD,EACAtsE,OAAAsrC,EAAA,EAAAtrC,CACIyX,EACA,IAAI8zB,EAAA,EACA,IAAIR,EAAA,EACA,IAAIC,EAAA,EAAsBV,SAO9CF,EAASnrB,SAAS6sC,GAAoBkmB,OAAQ,WAC1C,WAAIC,GACAx6D,EACA60D,EACAC,EACA,IAAIuF,GAAgBxnC,MAI5BF,EAASnrB,SAAS6sC,GAAoB3gB,WAAY,WAC9C,WAAIy6B,GACAnuD,EACA60D,EACAC,EACA,IAAInhC,EAAA,EAAuBd,MAInCF,EAASnrB,SAAS6sC,GAAoBomB,kBAAmB,WACrD,WAAIpO,GACArsD,EACA+yB,EACAwkC,EACAK,EACA9C,EACAD,EACAtsE,OAAAsrC,EAAA,EAAAtrC,CACIyX,EACA,IAAIg0B,EAAA,MAKhBrB,EAASnrB,SAAS6sC,GAAoBqmB,IAAK,WACvC,WAAIC,GACA36D,EACA60D,EACAC,EACAyC,EACAC,EACA,IAAIoD,GAAgB/nC,GACpBP,KAIRK,EAASnrB,SAAS6sC,GAAoBwmB,SAAU,WAC5C,WAAIC,GACA96D,EACA60D,EACAC,EACAtiC,KAIRG,EAASnrB,SAAS6sC,GAAoB0mB,SAAU,WAC5C,WAAIC,GACAh7D,EACAu3D,EACAzC,EACAD,EACA,IAAIoG,GAAmBpoC,MAIxBF,MEjXNuoC,eCUL,WACI,SAAAC,EACYC,GAAA7wE,KAAA6wE,2BAyHhB,OAtHID,EAAA1xE,UAAA4xE,gBAAA,eAAA/wE,EAAAC,KACI,OAAO,SAAAyV,GAAS,OAAAH,EAAA,WAAW1W,OAAO,SAACuI,GAC/BA,EAASC,KAAKpJ,OAAA+gB,EAAA,aAAA/gB,CAAa2tB,GAAA,EAAqBO,2BAEhD,IAAM6kD,EAAUhxE,EAAKixE,mBAAmBv7D,GAClC8S,EAAQxoB,EAAKkxE,uBAAuBx7D,GACpC+C,EAAkBzY,EAAKswD,oBAAoB56C,GAEjD,OAAO1V,EAAKmxE,qBAAqB3oD,GAC5B/gB,KAAK,SAAA2pE,GACF,OAAApxE,EAAK8wE,yBAAyBC,gBAAgBlvE,EAAA,YACnCmvE,EAAO,CACV5jB,UAAWgkB,EAAa/jB,mBAE5B50C,GAEChR,KAAK,SAAC5E,OAAEL,EAAAK,EAAAL,KACL4E,EAASC,KAAKpJ,OAAA+gB,EAAA,aAAA/gB,CACV2tB,GAAA,EAAqBC,yBACrBrpB,EACA4uE,IAEJhqE,EAASU,eAGpBC,MAAM,SAAAnF,GACHwE,EAASY,MAAM/J,OAAA+gB,EAAA,kBAAA/gB,CAAkB2tB,GAAA,EAAqBW,sBAAuB3pB,UAK7FiuE,EAAA1xE,UAAAkyE,iBAAA,SAAiBnlD,GAAjB,IAAAlsB,EAAAC,KACI,OAAO,SAAAyV,GAAS,OAAAH,EAAA,WAAW1W,OAAO,SAACuI,GAC/BA,EAASC,KAAKpJ,OAAA+gB,EAAA,aAAA/gB,CAAa2tB,GAAA,EAAqBQ,+BAA2B/jB,EAAW,CAAE6jB,aAAYA,KAEpG,IAAM8kD,EAAUhxE,EAAKixE,mBAAmBv7D,GAClC8S,EAAQxoB,EAAKkxE,uBAAuBx7D,GAE1C,OAAO1V,EAAKmxE,qBAAqB3oD,GAC5B/gB,KAAK,SAAA2pE,GACF,OAAApxE,EAAK8wE,yBAAyBO,iBAAiBxvE,EAAA,YACxCmvE,EAAO,CACV5jB,UAAWgkB,EAAa/jB,mBACzBnhC,GACEzkB,KAAK,SAAC5E,OAAEL,EAAAK,EAAAL,KACL4E,EAASC,KAAKpJ,OAAA+gB,EAAA,aAAA/gB,CAAa2tB,GAAA,EAAqBG,0BAA2BvpB,EAAMX,EAAA,UAC7EqqB,aAAYA,GACTklD,KAEPhqE,EAASU,eAGpBC,MAAM,SAAAnF,GACHwE,EAASY,MAAM/J,OAAA+gB,EAAA,kBAAA/gB,CAAkB2tB,GAAA,EAAqBY,uBAAwB5pB,EAAU,CAAEspB,aAAYA,WAK9G2kD,EAAA1xE,UAAAmyE,yBAAR,SAAiC9oD,GAC7B,IAAKA,IAAUA,EAAM6kC,iBACjB,OAAO,EAGX,IChF2BkkB,EAAYnmE,EACrComE,EDkFF,OEnFO,SAAkBD,GAC7B,OAAOA,EAAKE,UAAYjtE,KAAKktE,MFkFlBC,ECnFoBJ,EDiFD,IAAI/sE,KAAKgkB,EAAMopD,mBCjFFxmE,EDgFlB,GC/EnBomE,EAAU,IAAIhtE,KAAK+sE,EAAK9sE,YAEtBotE,WAAWN,EAAKO,aAAe1mE,GAEhComE,KDiFCX,EAAA1xE,UAAA+xE,uBAAR,SAA+Bx7D,GACnB,IACFhO,EADEgO,EAAAyB,WAAA2gB,YACiBC,qBAEzB,GAAKrwB,EAIL,MAAO,CACH2lD,iBAAkB3lD,EAAK2lD,iBACvBukB,kBAAmBlqE,EAAKkqE,oBAIxBf,EAAA1xE,UAAAgyE,qBAAR,SAA6B3oD,GACzB,OAAOA,GAASvoB,KAAKqxE,yBAAyB9oD,GAC1C1X,QAAQY,QAAQ8W,GAChBvoB,KAAK6wE,yBAAyBiB,sBAAsBtqE,KAAK,SAAC5E,GAAa,OAAXA,EAAAL,QAG5DquE,EAAA1xE,UAAAmxD,oBAAR,SAA4B56C,GAGxB,OAFcA,EAAMyB,WAEPsB,gBAAgByc,sBAGzB27C,EAAA1xE,UAAA8xE,mBAAR,SAA2Bv7D,GACvB,IAAM0C,EAAQ1C,EAAMyB,WACdC,EAASgB,EAAMhB,OAAO+e,iBACtBvd,EAAOR,EAAMQ,KAAKC,UAExB,IAAKzB,EACD,MAAM,IAAI2pB,EAAA,EAAiBA,EAAA,EAAqBxgC,uBAGpD,IAAKqY,EACD,MAAM,IAAImoB,EAAA,EAAiBA,EAAA,EAAqB3gC,aAOpD,MAAO,CACH+2C,WALIv+B,EAAAu+B,WAMJ66B,QALI56D,EAAA6rC,aAAA+uB,QAMJp9B,cALIx9B,EAAA66D,gBAAAC,gBAAA96D,EAAA66D,gBAAA76D,EAAA2rB,UAAAxxB,OAQhBs/D,EA3HA,MGEA,oBAAAsB,KAsDA,OArDIA,EAAAhzE,UAAAizE,kBAAA,SACIxvE,GAEA,IAAMC,EAAA5C,KAAAssD,mBAAA3pD,GAAEJ,EAAAK,EAAAL,KAAM+Q,EAAA1R,EAAA,OAAAgB,EAAA,UAEd,OAAOhB,EAAA,YACA0R,EAAO,CACV/Q,KAAM,CACFspB,mBAAoB7rB,KAAKoyE,6BAA6B7vE,EAAK8vE,yBAKvEH,EAAAhzE,UAAAozE,uBAAA,SACI3vE,GAEA,OAAO3C,KAAKssD,mBAAmB3pD,IAGnCuvE,EAAAhzE,UAAAqzE,6BAAA,SACI5vE,GAEA,OAAOf,EAAA,YACAe,EAAQ,CACXJ,KAAM,CACF6qD,iBAAkBzqD,EAASJ,KAAK+H,KAAKie,MACrCopD,kBAAmBhvE,EAASJ,KAAK+H,KAAKkoE,eAK1CN,EAAAhzE,UAAAkzE,6BAAR,SAAqCvmD,GACjC,YADiC,IAAAA,MAAA,IAC1BA,EAAmBhhB,IAAI,SAAAkhB,GAAc,OACxCC,YAAaD,EAAW0mD,aACxBC,kBAAmB3mD,EAAW4mD,mBAC9BxvC,SAAUpX,EAAWoX,SACrB83B,IAAKlvC,EAAWkvC,IAChBvkB,MAAO3qB,EAAW6mD,OAClBC,YAAa9mD,EAAW+mD,aACxBC,WAAYhnD,EAAWinD,YACvBxgE,MAAOuZ,EAAWvZ,MAClBygE,uBAAwBlnD,EAAWmnD,6BAInChB,EAAAhzE,UAAAotD,mBAAR,SAA8B3pD,GAClB,IAAAJ,EAAAI,EAAA2H,KAAYgJ,EAAA1R,EAAA,OAAAe,EAAA,UAEpB,OAAOf,EAAA,YACA0R,EAAO,CACV/Q,KAAIA,KAGhB2vE,EAtDA,MCAA,WAGI,SAAAiB,EACY1iE,EACAzJ,GADAhH,KAAAyQ,UACAzQ,KAAAgH,iBAERhH,KAAKozE,aAAe,IAAIC,GAkFhC,OA/EIF,EAAAj0E,UAAA4yE,oBAAA,SACIlvE,OAAE+F,QAAA,IAAA/F,EAAA,GAAAA,GAAA+F,QAIF,OAAO3I,KAAKgH,eAAe7I,IAFf,uDAEwB,CAAEwK,QAAOA,IAAInB,KAAK,SAAA7E,GAAY,OAACf,EAAA,YAC5De,EAAQ,CACXJ,KAAM,CACF6qD,iBAAkBzqD,EAASJ,KAAK+H,KAAKie,MACrCopD,kBAAmBhvE,EAASJ,KAAK+H,KAAKkoE,iBAKlDW,EAAAj0E,UAAA4xE,gBAAA,SACIwC,EACA96D,GAEA,OAAO,EACHxY,KAAKuzE,4BAA4BD,EAAgB96D,GACjDxY,KAAKwzE,iBAAiBF,IAG9BH,EAAAj0E,UAAAkyE,iBAAA,SACIkC,EACArnD,GAFJ,IAAAlsB,EAAAC,KAIUsT,EAAU1R,EAAA,YACT0xE,EAAc,CACjBrnD,aAAYA,IAGhB,OAAO,IAAIpb,QAAQ,SAACY,EAAS27B,GACzBrtC,EAAK0Q,QAAQgjE,wBACTngE,EAAS,SACLyK,EACApb,GACE,OAAAob,EACFqvB,EAAOrtC,EAAKqzE,aAAad,uBAAuBv0D,IAChDtM,EAAQ1R,EAAKqzE,aAAajB,kBAAkBxvE,SAKpDwwE,EAAAj0E,UAAAs0E,iBAAR,SACIF,GADJ,IAAAvzE,EAAAC,KAGI,OAAO,IAAI6Q,QAAQ,SAACY,EAAS27B,GACzBrtC,EAAK0Q,QAAQqgE,gBACTwC,EAAgB,SACZv1D,EACApb,GACC,OAAAob,EACDqvB,EAAOrtC,EAAKqzE,aAAad,uBAAuBv0D,IAChDtM,EAAQ1R,EAAKqzE,aAAajB,kBAAkBxvE,SAKpDwwE,EAAAj0E,UAAAq0E,4BAAR,SACID,EACA96D,GAFJ,IAAAzY,EAAAC,KAIUsT,EAAU1R,EAAA,YACT0xE,EAAc,CACjB96D,gBAAiBxa,OAAAqvD,GAAA,EAAArvD,CAAqBwa,KAG1C,OAAO,IAAI3H,QAAQ,SAACY,EAAS27B,GACzBrtC,EAAK0Q,QAAQijE,2BACTpgE,EAAS,SACLyK,EACApb,GACC,OAAAob,EACDqvB,EAAOrtC,EAAKqzE,aAAad,uBAAuBv0D,IAChDtM,EAAQ1R,EAAKqzE,aAAajB,kBAAkBxvE,SAIhEwwE,EAzFA,iCCNA,WACI,SAAAQ,EACYC,GAAA5zE,KAAA4zE,gCAiBhB,OAdID,EAAAz0E,UAAA+mD,cAAA,SAAcjiD,GAAd,IAAAjE,EAAAC,KACI,OAAOsV,EAAA,WAAW1W,OAAO,SAACuI,GACtBA,EAASC,KAAKpJ,OAAA+gB,EAAA,aAAA/gB,CAAauwB,GAAA,EAA0BE,iCAErD1uB,EAAK6zE,8BAA8B3tB,cAAcjiD,GAC5CwD,KAAK,SAAA7E,GACFwE,EAASC,KAAKpJ,OAAA+gB,EAAA,aAAA/gB,CAAauwB,GAAA,EAA0BC,+BAAgC7rB,EAASJ,KAAK+H,OACnGnD,EAASU,aAEZC,MAAM,SAAAnF,GACHwE,EAASY,MAAM/J,OAAA+gB,EAAA,kBAAA/gB,CAAkBuwB,GAAA,EAA0BG,4BAA6B/rB,SAI5GgxE,EAnBA,MCHA,WACI,SAAAE,EACY7sE,EACAm/C,GADAnmD,KAAAgH,iBACAhH,KAAAmmD,UAWhB,OARI0tB,EAAA30E,UAAA+mD,cAAA,SAAcrjD,OAAE+F,QAAA,IAAA/F,EAAA,GAAAA,GAAA+F,QAENnG,EAAU,CACZ4jD,kBAAmBpmD,KAAKmmD,QAAQlI,QAGpC,OAAOj+C,KAAKgH,eAAe7I,IALf,qCAKwB,CAAEqE,QAAOA,EAAEmG,QAAOA,KAE9DkrE,EAdA,eCYA,WACI,SAAAC,EACYl3B,GAAA58C,KAAA48C,oBAyFhB,OAtFIk3B,EAAA50E,UAAAib,cAAA,SAAcC,EAAsCpW,GAApD,IAAAjE,EAAAC,KACI,OAAO,SAAAyV,GAAS,OAAAH,EAAA,WAAW1W,OAAO,SAACuI,GAC/B,IAAMqhB,EAAU/S,EAAMyB,WAAWsR,QAAQ6M,eACnCntB,EAAWlE,GAAWA,EAAQkE,UAAYsgB,GAAWA,EAAQ6R,WAEnElzB,EAASC,KAAKpJ,OAAA+gB,EAAA,aAAA/gB,CAAagxB,GAAA,EAA2BC,4BAAwB7mB,EAAW,CAAEF,SAAQA,KAEnGnI,EAAK68C,kBAAkBz+C,IAAI+J,GACtBiS,cAAcC,EAASxY,EAAA,YAAKoC,EAAO,CAAEkE,SAAQA,KAC7CV,KAAK,WACFL,EAASC,KAAKpJ,OAAA+gB,EAAA,aAAA/gB,CAAagxB,GAAA,EAA2BE,4BAAwB9mB,EAAW,CAAEF,SAAQA,KACnGf,EAASU,aAEZC,MAAM,SAAAC,GACHZ,EAASY,MAAM/J,OAAA+gB,EAAA,kBAAA/gB,CAAkBgxB,GAAA,EAA2BK,oBAAqBtnB,EAAO,CAAEG,SAAQA,WAKlH4rE,EAAA50E,UAAA60E,aAAA,SAAa16D,EAA0BrV,GAAvC,IAAAjE,EAAAC,KACI,OAAO,SAAAyV,GAAS,OAAAH,EAAA,WAAW1W,OAAO,SAACuI,GAC/B,IAAMqhB,EAAU/S,EAAMyB,WAAWsR,QAAQ6M,eACnCntB,EAAWlE,GAAWA,EAAQkE,UAAYsgB,GAAWA,EAAQ6R,WAEnElzB,EAASC,KAAKpJ,OAAA+gB,EAAA,aAAA/gB,CAAagxB,GAAA,EAA2BM,2BAAuBlnB,EAAW,CAAEF,SAAQA,KAElGnI,EAAK68C,kBAAkBz+C,IAAI+J,GACtB6rE,aAAa16D,EAAkBzX,EAAA,YAAKoC,EAAO,CAAEkE,SAAQA,KACrDV,KAAK,WACFL,EAASC,KAAKpJ,OAAA+gB,EAAA,aAAA/gB,CAAagxB,GAAA,EAA2BO,2BAAuBnnB,EAAW,CAAEF,SAAQA,KAClGf,EAASU,aAEZC,MAAM,SAAAC,GACHZ,EAASY,MAAM/J,OAAA+gB,EAAA,kBAAA/gB,CAAkBgxB,GAAA,EAA2BU,mBAAoB3nB,EAAO,CAAEG,SAAQA,WAKjH4rE,EAAA50E,UAAAiR,WAAA,SAAWnM,GAAX,IAAAjE,EAAAC,KACI,OAAO,SAAAyV,GAAS,OAAAH,EAAA,WAAW1W,OAAO,SAACuI,GAC/B,IAAMgR,EAAQ1C,EAAMyB,WACdsR,EAAUrQ,EAAMqQ,QAAQ6M,eACxBntB,EAAWlE,GAAWA,EAAQkE,UAAYsgB,GAAWA,EAAQ6R,WAC7D25C,EAAgBpyE,EAAA,YAAKoC,EAAO,CAAEkE,SAAQA,IAE5C,GAAIA,GAAYiQ,EAAMijB,mBAAmBhW,cAAcld,GACnD,OAAOf,EAASU,WAGpBV,EAASC,KAAKpJ,OAAA+gB,EAAA,aAAA/gB,CAAagxB,GAAA,EAA2B1J,yBAAqBld,EAAW,CAAEF,SAAQA,KAEhGnI,EAAK68C,kBAAkBz+C,IAAI+J,GACtBiI,WAAW6jE,GACXxsE,KAAK,WACFL,EAASC,KAAKpJ,OAAA+gB,EAAA,aAAA/gB,CAAagxB,GAAA,EAA2B7J,yBAAqB/c,EAAW,CAAEF,SAAQA,KAChGf,EAASU,aAEZC,MAAM,SAAAC,GACHZ,EAASY,MAAM/J,OAAA+gB,EAAA,kBAAA/gB,CAAkBgxB,GAAA,EAA2BvJ,iBAAkB1d,EAAO,CAAEG,SAAQA,WAK/G4rE,EAAA50E,UAAA4gC,aAAA,SAAa97B,GAAb,IAAAjE,EAAAC,KACI,OAAO,SAAAyV,GAAS,OAAAH,EAAA,WAAW1W,OAAO,SAACuI,GAC/B,IAAMgR,EAAQ1C,EAAMyB,WACdsR,EAAUrQ,EAAMqQ,QAAQ6M,eACxBntB,EAAWlE,GAAWA,EAAQkE,UAAYsgB,GAAWA,EAAQ6R,WAEnE,GAAInyB,IAAaiQ,EAAMijB,mBAAmBhW,cAAcld,GACpD,OAAOf,EAASU,WAGpBV,EAASC,KAAKpJ,OAAA+gB,EAAA,aAAA/gB,CAAagxB,GAAA,EAA2BtJ,2BAAuBtd,EAAW,CAAEF,SAAQA,KAElGnI,EAAK68C,kBAAkBz+C,IAAI+J,GACtB43B,aAAal+B,EAAA,YAAKoC,EAAO,CAAEkE,SAAQA,KACnCV,KAAK,WACFL,EAASC,KAAKpJ,OAAA+gB,EAAA,aAAA/gB,CAAagxB,GAAA,EAA2B3J,2BAAuBjd,EAAW,CAAEF,SAAQA,KAClGf,EAASU,aAEZC,MAAM,SAAAC,GACHZ,EAASY,MAAM/J,OAAA+gB,EAAA,kBAAA/gB,CAAkBgxB,GAAA,EAA2BnJ,mBAAoB9d,EAAO,CAAEG,SAAQA,WAIrH4rE,EA3FA,MCDA,WAII,SAAAG,EACYr1C,EACAs1C,EACAj0C,EACA8hB,EACAjzC,GAJA9O,KAAA4+B,SACA5+B,KAAAk0E,4BACAl0E,KAAAigC,8BACAjgC,KAAA+hD,+BACA/hD,KAAA8O,gBAER9O,KAAK+O,QAAUnJ,OA6IvB,OA1IIquE,EAAA/0E,UAAAiR,WAAA,SAAWnM,GAAX,IAAAjE,EAAAC,KACYgiD,EAAAh+C,EAAAu5C,OAAuBr1C,EAAAlE,EAAAkE,SAE/B,IAAK85C,IAAkB95C,EACnB,MAAM,IAAIs3B,GAAA,EAAqB,wEAGnC,OAAOx/B,KAAK4+B,OAAOgB,SAAS5/B,KAAKigC,4BAA4Bh4B,kBAAkBC,IAC1EV,KAAK,SAAA2Q,GAAS,WAAItH,QAAQ,SAACY,EAAS27B,GAGjC,GAFArtC,EAAK8gC,eAAiB1oB,EAAMggB,eAAeE,iBAAiBnwB,IAEvDnI,EAAK8gC,eACN,MAAM,IAAIC,EAAA,EAAiBA,EAAA,EAAqBngC,sBASpDZ,EAAK+O,cAAcmuC,WAAWl9C,EAAK8gC,eANnB,WACZ9gC,EAAKo0E,mBAAmBnyB,GACnBx6C,KAAKiK,GACL3J,MAAMslC,KAIVtlC,MAAMslC,OAEd5lC,KAAK,WAAM,OAAAzH,EAAK6+B,OAAO1nB,cAGhC+8D,EAAA/0E,UAAA4gC,aAAA,WAGI,OAFA9/B,KAAK6gC,oBAAiBz4B,EAEfyI,QAAQY,QAAQzR,KAAK4+B,OAAO1nB,aAGvC+8D,EAAA/0E,UAAAib,cAAA,WACI,OAAOtJ,QAAQY,QAAQzR,KAAK4+B,OAAO1nB,aAGvC+8D,EAAA/0E,UAAA60E,aAAA,SAAaK,EAAkBpwE,GAC3B,OAAOhE,KAAK4+B,OAAOgB,SACf5/B,KAAKk0E,0BAA0Bh7D,qBAAqBk7D,EAAUpwE,KAI9DiwE,EAAA/0E,UAAAi1E,mBAAR,SAA2BnwE,GAA3B,IAAAjE,EAAAC,KACI,OAAO,IAAI6Q,QAAQ,SAACY,EAAS27B,GACjB,IAAA3N,EAAAz7B,EAAAy7B,UAAW78B,EAAAoB,EAAAqwE,uBAAA,IAAAzxE,EAAA,aAAAA,EAA4BC,EAAAmB,EAAAo+B,eAAA,IAAAv/B,EAAA,aAAAA,EAAoBE,EAAAiB,EAAA6wD,eAAA,IAAA9xD,EAAA,aAAAA,EAC7DikC,EAAajnC,EAAK8gC,gBAAkB9gC,EAAK8gC,eAAe1pB,OAAO6vB,WAErE,IAAKhzB,SAASgxB,eAAevF,GACzB,OAAO2N,EAAO,IAAI5N,GAAA,EAAqB,8EAG3C,IAAKz/B,EAAKgP,QAAQ6uC,kBACd,OAAOxQ,EAAO,IAAI9K,GAAA,EAAoBA,GAAA,EAAwBtvB,yBAGlE,IAAKg0B,EACD,OAAOoG,EAAO,IAAItM,EAAA,EAAiBA,EAAA,EAAqBngC,uBAG5D,IAAM00D,EAAS,IAAIt1D,EAAKgP,QAAQ6uC,kBAAkB0X,QAAQgf,YAAY,CAClEtf,OAAQ,CACJC,WAAY,cAEhB3S,MAAO,6EACPkS,SAAUxtB,EACVqtC,gBAAiB,SAAAnf,GACbn1D,EAAKw0E,8BACA/sE,KAAK,WAAM,OAAA6sE,EAAgBnf,KAC3BptD,MAAMs6B,IAEfA,QAAS,SAAAr6B,GACLqlC,EAAOrlC,GACPq6B,EAAQr6B,IAEZ8sD,QAAS,SAAAK,GACLn1D,EAAKq1D,sBAAsBF,GACtB1tD,KAAK,WACFiK,IACAojD,EAAQK,KAEXptD,MAAMs6B,MAMnB,OAFAizB,EAAOv2D,KAAK2gC,GAEL41B,KAIP4e,EAAA/0E,UAAAq1E,4BAAR,eAAAx0E,EAAAC,KACUkI,EAAWlI,KAAK6gC,gBAAkB7gC,KAAK6gC,eAAe51B,GACtDsyC,EAASv9C,KAAK4+B,OAAO1nB,WAAWgkB,eAAezjB,YAAY,UAC3D68C,EAAc/W,EAASA,EAAO+W,iBAAclsD,EAElD,IAAKF,IAAaosD,EACd,MAAM,IAAIkB,GAAA,EAGd,OAAOx1D,KAAK4+B,OAAOgB,SACf5hC,OAAA+gB,EAAA,aAAA/gB,CAAagxB,GAAA,EAA2BC,4BAAwB7mB,EAAW,CAAEF,SAAQA,KAEpFV,KAAK,WAAM,OAAAzH,EAAK6+B,OAAOgB,SACpB7/B,EAAKgiD,6BAA6B/B,mBAAmB93C,EAAU,CAAEosD,YAAWA,OAE/E9sD,KAAK,SAAA2Q,GACF,IAAMolC,EAASplC,EAAM+iB,eAAezjB,YAAY,UAC1Cg+C,EAAgBlY,GAAUA,EAAOtwB,UAAYswB,EAAOtwB,SAAS7S,QAC7DA,EAAUjC,EAAMK,gBAAgByc,qBAEtC,IAAsB,IAAlBwgC,EACA,MAAM,IAAID,GAAA,EAGd,OAAKC,GAAiB1B,GAAuB0B,EAAer7C,GAAW,IAC5Dra,EAAK6+B,OAAO1nB,WAGhBnX,EAAK6+B,OAAOgB,SACf7/B,EAAKm0E,0BAA0B/5D,cAAc85C,GAAuBwB,OAG3EjuD,KAAK,WAAM,OAAAzH,EAAK6+B,OAAOgB,SACpB5hC,OAAA+gB,EAAA,aAAA/gB,CAAagxB,GAAA,EAA2BE,4BAAwB9mB,EAAW,CAAEF,SAAQA,OAExFJ,MAAM,SAAAC,GAAS,OAAAhI,EAAK6+B,OAAOgB,SACxB5hC,OAAA+gB,EAAA,kBAAA/gB,CAAkBgxB,GAAA,EAA2BK,oBAAqBtnB,EAAO,CAAEG,SAAQA,QAIvF+rE,EAAA/0E,UAAAk2D,sBAAR,SAA8BF,GAC1B,OAAOl1D,KAAK4+B,OAAOgB,SACf5/B,KAAK+hD,6BAA6BxqC,eAAe,SAAU,CACvD+8C,YAAaY,EAAeS,gCAI5Cse,EAxJA,MCVA,WACI,SAAAO,EACY51C,EACAs1C,GADAl0E,KAAA4+B,SACA5+B,KAAAk0E,4BAsBhB,OAnBIM,EAAAt1E,UAAAib,cAAA,SAAcC,EAA6BpW,GACvC,OAAOhE,KAAK4+B,OAAOgB,SACf5/B,KAAKk0E,0BAA0B/5D,cAAcC,EAASpW,KAI9DwwE,EAAAt1E,UAAA60E,aAAA,SAAaK,EAAkBpwE,GAC3B,OAAOhE,KAAK4+B,OAAOgB,SACf5/B,KAAKk0E,0BAA0Bh7D,qBAAqBk7D,EAAUpwE,KAItEwwE,EAAAt1E,UAAAiR,WAAA,WACI,OAAOU,QAAQY,QAAQzR,KAAK4+B,OAAO1nB,aAGvCs9D,EAAAt1E,UAAA4gC,aAAA,WACI,OAAOjvB,QAAQY,QAAQzR,KAAK4+B,OAAO1nB,aAE3Cs9D,EAzBA,IVJA,SAAK7D,GACDA,EAAA,0BADJ,CAAKA,QAAoB,4BWEnB8D,GAAYz2E,OAAA8O,GAAA,QAAA9O,CAAQ,SAAI02E,GAC1B,OAAIzwE,MAAMC,QAAQwwE,GACPA,EAAM7pE,IAAI,SAACtM,GAAsB,OACpCo2E,GAAcp2E,KAIlBP,OAAA2iB,GAAA,EAAA3iB,CAAc02E,GACN12E,OAAOgH,KAAK0vE,GACf9pE,OAAO,SAAC/D,EAAQhI,SAAQ,OAAC+C,EAAA,YACnBiF,IAAMjE,EAAA,IACR/D,GAAM81E,GAAcD,EAAM71E,IAAK+D,KAChC,IAGL8xE,IAMXD,GAAUtmE,MAAQ,IAAI0G,QAQtB,IAAM8/D,GAAgB,SAAID,GACtB,MAAwB,iBAAVA,GAAgC,OAAVA,EAChCD,GAAUC,GACVA,GAOO,SAAAE,GAAqC3mE,GAChD,OAAO,eAAE,IAAA5H,EAAA,GAAAC,EAAA,EAAAA,EAAAC,UAAApC,OAAAmC,IAAAD,EAAAC,GAAAC,UAAAD,GAAmB,OAAAquE,GAAc1mE,EAAEvH,WAAA,EAAIL,iDCvC9CwuE,GAA6B72E,OAAA82E,GAAA,sBAAA92E,CAC/B82E,GAAA,eACA,SAAC30D,EAAQC,GAAW,OAAAxT,GAAauT,EAAGC,KAGzB20D,GAAA/2E,OAAAg3E,GAAA,GAAqBH,ICA7B,SAAAI,KACH,IC0NMx9D,EAKAuiB,EAKA/D,EAKAhB,EAiCAigD,EAWA/7D,EAKAg8D,EAaAl8C,EAKA3E,EAKA8gD,EAKAl9C,EAKAG,EAKAg9C,EAUAz8D,EAKA+b,EAKA0C,EAKArC,EAKAS,EAKAC,EAQAkC,EAKAtG,EAQAV,ECxIA0kD,EAaAC,ECsCAC,EAQAC,EAWAC,EAeAC,EHrUAC,GC0NAn+D,EAAczZ,OAAA6yB,GAAA,EAAA7yB,CAChB,SAAC4E,GAA4C,OAA1CA,EAAA4U,SAAmDC,aACtD,SAAAA,GAAe,OAAAm9D,GAAMn9D,KAGnBuiB,EAAWh8B,OAAA6yB,GAAA,EAAA7yB,CACb,SAAC4E,GAAyC,OAAvCA,EAAAylB,MAA6C2R,UAChD,SAAAA,GAAY,OAAA46C,GAAM56C,KAGhB/D,EAAYj4B,OAAA6yB,GAAA,EAAA7yB,CACd,SAAC4E,GAA0C,OAAxCA,EAAAuU,OAA+C+e,gBAClD,SAAAA,GAAkB,OAAA0+C,GAAM1+C,KAGtBjB,EAAqBj3B,OAAA6yB,GAAA,EAAA7yB,CACvB,SAAC4E,GAAmD,OAAjDA,EAAA4V,gBAAiEyc,oBACpE,SAACryB,GAA0C,OAAxCA,EAAAuU,OAA+CC,kBAClD,SAAC6d,EAAoB7d,GAAqB,OAAAw9D,GAAM,WAC5C,IAAMp8D,EAAkByc,IAClBhe,EAAUG,IAEhB,IAAKoB,EAAiB,CAClB,IAAKvB,IAAYA,EAAQy2C,eACrB,OAGJ,MAAO,CACHr7B,UAAW,GACXC,SAAU,GACVC,QAAS,GACTC,SAAU,GACVC,SAAU,GACVC,KAAM,GACNC,gBAAiB,GACjB4K,oBAAqB,GACrB3K,WAAY,GACZpB,QAAS,GACTqB,MAAO,GACPC,aAAc,GACd/B,YAAa9Z,EAAQy2C,gBAI7B,OAAOl1C,MAIT08D,EAAqBl3E,OAAA6yB,GAAA,EAAA7yB,CACvB,SAAC4E,GAAgD,OAA9CA,EAAA0V,aAA2Da,iBAC9D,SAAAA,GAAmB,OAAAy7D,GAAM,WACrB,IAAMt8D,EAAea,IAErB,GAAIb,GAAgBA,EAAanU,OAC7B,OAAOmU,EAAa,GAAGu9D,6BAK7B18D,EAAkBnb,OAAA6yB,GAAA,EAAA7yB,CACpB,SAAC4E,GAAgD,OAA9CA,EAAA0V,aAA2Da,iBAC9D,SAAAA,GAAmB,OAAAy7D,GAAMz7D,KAGvBg8D,EAA4Bn3E,OAAA6yB,GAAA,EAAA7yB,CAC9B,SAAC4E,GAAgD,OAA9CA,EAAA0V,aAA2Da,iBAC9D,SAAAA,GAAmB,OAAAy7D,GAAM,WACrB,IAAMt8D,EAAea,IAErB,GAAKb,GAAiBA,EAAanU,OAInC,OAAOmU,EAAa,GAAG8a,2BAIzB6F,EAAuBj7B,OAAA6yB,GAAA,EAAA7yB,CACzB,SAAC4E,GAAqD,OAAnDA,EAAAu4B,kBAAqElC,sBACxE,SAAAA,GAAwB,OAAA27C,GAAM37C,KAG5B3E,EAAoBt2B,OAAA6yB,GAAA,EAAA7yB,CACtB,SAAC4E,GAAkD,OAAhDA,EAAA8c,eAA+D4U,mBAClE,SAAAA,GAAqB,OAAAsgD,GAAMtgD,KAGzB8gD,EAAsBp3E,OAAA6yB,GAAA,EAAA7yB,CACxB,SAAC4E,GAA6C,OAA3CA,EAAAkuB,UAAqDyF,cACxD,SAAAA,GAAgB,OAAAq+C,GAAMr+C,KAGpB2B,EAAoBl6B,OAAA6yB,GAAA,EAAA7yB,CACtB,SAAC4E,GAAkD,OAAhDA,EAAAu1B,eAA+DD,mBAClE,SAAAA,GAAqB,OAAA08C,GAAM18C,KAGzBG,EAAmBr6B,OAAA6yB,GAAA,EAAA7yB,CACrB,SAAC4E,GAAkD,OAAhDA,EAAAu1B,eAA+DE,kBAClE,SAAAA,GAAoB,OAAAu8C,GAAMv8C,KAGxBg9C,EAA2Br3E,OAAA6yB,GAAA,EAAA7yB,CAC7B,SAAC4E,GAA2C,OAAzCA,EAAA4lB,QAAiD6M,cACpD,SAACzyB,GAAkD,OAAhDA,EAAAu1B,eAA+DE,kBAClE,SAAChD,EAAcgD,GAAqB,OAAAu8C,GAAM,WACtC,IAAMpsD,EAAU6M,IAEhB,OAAO7M,GAAW6P,EAAiB7P,EAAQ6R,WAAY7R,EAAQ8P,eAIjE1f,EAAU5a,OAAA6yB,GAAA,EAAA7yB,CACZ,SAAC4E,GAAwC,OAAtCA,EAAA+V,KAA2CC,SAC9C,SAAAA,GAAW,OAAAg8D,GAAMh8D,KAGf+b,EAAa32B,OAAA6yB,GAAA,EAAA7yB,CACf,SAAC4E,GAA2C,OAAzCA,EAAA8gB,QAAiDiR,YACpD,SAAAA,GAAc,OAAAigD,GAAMjgD,KAGlB0C,EAAsBr5B,OAAA6yB,GAAA,EAAA7yB,CACxB,SAAC4E,GAAoD,OAAlDA,EAAAwhB,iBAAmEiT,qBACtE,SAAAA,GAAuB,OAAAu9C,GAAMv9C,KAG3BrC,EAAch3B,OAAA6yB,GAAA,EAAA7yB,CAChB,SAAC4E,GAA4C,OAA1CA,EAAAgiB,SAAmDoQ,aACtD,SAAAA,GAAe,OAAA4/C,GAAM5/C,KAGnBS,EAAwBz3B,OAAA6yB,GAAA,EAAA7yB,CAC1B,SAAC4E,GAA2C,OAAzCA,EAAA4lB,QAAiDiN,uBACpD,SAAAA,GAAyB,OAAAm/C,GAAMn/C,KAG7BC,EAAyB13B,OAAA6yB,GAAA,EAAA7yB,CAC3B,SAAC4E,GAA2C,OAAzCA,EAAA4lB,QAAiDkN,wBACpD,SAAC9yB,GAAkD,OAAhDA,EAAAu1B,eAA+DE,kBAClE,SAAC3C,EAAwB2C,GAAqB,OAAAu8C,GAAM,SAAC1sE,EAAkBowB,GACnE,OAAO5C,EAAuB2C,EAAiBnwB,EAAUowB,QAI3DV,EAAiB55B,OAAA6yB,GAAA,EAAA7yB,CACnB,SAAC4E,GAA+C,OAA7CA,EAAAi1B,YAAyDD,gBAC5D,SAAAA,GAAkB,OAAAg9C,GAAMh9C,KAGtBtG,EAA0BtzB,OAAA6yB,GAAA,EAAA7yB,CAC5B,SAAC4E,GAAwC,OAAtCA,EAAAo4B,KAA2C1J,yBAC9C,SAAC1uB,GAA6C,OAA3CA,EAAAkuB,UAAqDyF,cACxD,SAACjF,EAAyBiF,GAAiB,OAAAq+C,GAAM,SAAC7jD,GAC9C,OAAOO,EAAwBiF,IAAgBxF,OAIjDH,EAA2B5yB,OAAA6yB,GAAA,EAAA7yB,CAC7B,SAAC4E,GAAwC,OAAtCA,EAAAo4B,KAA2CpK,0BAC9C,SAAChuB,GAAqD,OAAnDA,EAAAu4B,kBAAqElC,sBACxE,SAACrI,EAA0BqI,GAAyB,OAAA27C,GAAM,SAAC7jD,GACvD,OAAOH,EAAyBqI,IAAwBlI,OAIzD/yB,OAAAgQ,GAAA,EAAAhQ,CAAW,SACdma,GAEA,MAAO,CACHV,YAAaA,EAAYU,GACzB6hB,SAAUA,EAAS7hB,GACnB8d,UAAWA,EAAU9d,GACrB8c,mBAAoBA,EAAmB9c,GACvC+8D,mBAAoBA,EAAmB/8D,GACvCgB,gBAAiBA,EAAgBhB,GACjCg9D,0BAA2BA,EAA0Bh9D,GACrD8gB,qBAAsBA,EAAqB9gB,GAC3Cmc,kBAAmBA,EAAkBnc,GACrCi9D,oBAAqBA,EAAoBj9D,GACzC+f,kBAAmBA,EAAkB/f,GACrCkgB,iBAAkBA,EAAiBlgB,GACnCk9D,yBAA0BA,EAAyBl9D,GACnDS,QAASA,EAAQT,GACjBwc,WAAYA,EAAWxc,GACvBkf,oBAAqBA,EAAoBlf,GACzC6c,YAAaA,EAAY7c,GACzBsd,sBAAuBA,EAAsBtd,GAC7Cud,uBAAwBA,EAAuBvd,GAC/Cyf,eAAgBA,EAAezf,GAC/BmZ,wBAAyBA,EAAwBnZ,GACjDyY,yBAA0BA,EAAyBzY,ODxZrD29D,GE+OAR,EAAWP,GACb,SAAC31C,GAA2D,OAAAA,GAC5D,SAAAA,GAAY,kBACR,IAAkB,IAAA94B,EAAA,EAAA1D,EAAA5E,OAAOgH,KAAKo6B,GAAZ94B,EAAA1D,EAAAuB,OAAAmC,IAAoF,CAAjG,IAAMzH,EAAG+D,EAAA0D,GACJyB,EAAQq3B,EAASvgC,KAEvB,GAAIkJ,EACA,OAAOA,MAMjBwtE,EAA+Bv3E,OAAA6yB,GAAA,EAAA7yB,CACjC,SAAC4E,GAAsD,OAApDA,EAAAw4B,mBAAuE/B,sBAC1E,SAACz2B,GAAgD,OAA9CA,EAAA0V,aAA2D0b,8BAC9D,SAACqF,EAAsBrF,GAAiC,gBAACnZ,GACrD,OACIwe,KACArF,EAA6BnZ,MAKlC7c,OAAAgQ,GAAA,EAAAhQ,CAAW,SACdma,GAEA,IAAMinB,EAAW,CACb22C,qBAAsB59D,EAAMX,SAAS6b,aACrC2iD,uBAAwB79D,EAAMX,SAASqc,eACvCoiD,oBAAqB99D,EAAM8iB,kBAAkBvC,gBAC7Cw9C,sBAAuB/9D,EAAM8iB,kBAAkBtC,iBAC/Cw9C,kBAAmBh+D,EAAMkQ,MAAMgL,aAC/B+iD,iBAAkBj+D,EAAMQ,KAAK0a,aAC7BgjD,6BAA8Bl+D,EAAM2Y,UAAUuC,aAC9CijD,8BAA+Bn+D,EAAMgjB,kBAAkB9H,aACvDkjD,2BAA4Bp+D,EAAMggB,eAAe9E,aACjDmjD,0BAA2Br+D,EAAMggB,eAAeI,mBAChDk+C,0BAA2Bt+D,EAAM8iB,kBAAkBxG,mBACnDuC,eAAgB7e,EAAM4iB,mBAAmB/D,eACzCC,gBAAiB9e,EAAM4iB,mBAAmB9D,gBAC1Cy/C,2BAA4Bv+D,EAAM4iB,mBAAmBtG,mBACrDjB,4BAA6Brb,EAAMG,aAAakb,4BAChD+hD,6BAA8BA,EAA6Bp9D,GAC3Doc,wBAAyBpc,EAAMuH,eAAe6U,wBAC9CoiD,6BAA8Bx+D,EAAMuH,eAAemU,eACnD+iD,8BAA+Bz+D,EAAMijB,mBAAmBhC,sBACxDy9C,0BAA2B1+D,EAAMG,aAAawb,eAC9CgjD,0BAA2B3+D,EAAMG,aAAaub,eAC9CkjD,2BAA4B5+D,EAAMG,aAAaib,eAC/CyjD,2BAA4B7+D,EAAMijB,mBAAmB3G,mBACrDwiD,oBAAqB9+D,EAAMuL,QAAQmR,cACnCqiD,qBAAsB/+D,EAAMuL,QAAQkR,eACpCuiD,6BAA8Bh/D,EAAMiM,iBAAiByQ,cACrDuiD,8BAA+Bj/D,EAAMiM,iBAAiBwQ,eACtDyiD,wBAAyBl/D,EAAM0f,YAAYxE,aAC3CikD,yBAA0Bn/D,EAAM0f,YAAY/D,eAC5CyjD,mBAAoBp/D,EAAMhB,OAAOkc,cAGrC,OAAOzxB,EAAA,UACH0zE,SAAUA,EAASl2C,IAChBA,MF5SLo4C,GGiSAhC,EAAYT,GACd,SAAC31C,GAA6D,OAAAA,GAC9D,SAAAA,GAAY,kBACR,OAAQphC,OAAOgH,KAAKo6B,GACfq4C,KAAK,SAAA54E,GAAO,OAAAugC,EAASvgC,UAI5B42E,EAA4Bz3E,OAAA6yB,GAAA,EAAA7yB,CAC9B,SAAC4E,GAAsD,OAApDA,EAAAw4B,mBAAuExL,mBAC1E,SAAChtB,GAAgD,OAA9CA,EAAA0V,aAA2DkV,0BAC9D,SAACoC,EAAmBpC,GAA6B,gBAAC3S,GAC9C,OACI+U,KACApC,EAAyB3S,MAK/B66D,EAAwB13E,OAAA6yB,GAAA,EAAA7yB,CAC1B,SAAC4E,GAAsD,OAApDA,EAAAm4B,mBAAuElU,gBAC1E,SAACjkB,GAAsD,OAApDA,EAAAm4B,mBAAuEhU,aAC1E,SAACnkB,GAAsD,OAApDA,EAAAm4B,mBAAuE/T,cAC1E,SAACpkB,GAAsD,OAApDA,EAAAm4B,mBAAuE9T,qBAC1E,SAACJ,EAAgBE,EAAaC,EAAcC,GAAwB,gBAAC/e,GACjE,OACI2e,EAAe3e,IACf6e,EAAY7e,IACZ8e,EAAa9e,IACb+e,EAAoB/e,MAK1BytE,EAAuB33E,OAAA6yB,GAAA,EAAA7yB,CACzB,SAAC4E,GAAqD,OAAnDA,EAAAq4B,kBAAqEpU,gBACxE,SAACjkB,GAAqD,OAAnDA,EAAAq4B,kBAAqE9P,aACxE,SAACvoB,GAAqD,OAAnDA,EAAAq4B,kBAAqE7P,cACxE,SAACxoB,GAAqD,OAAnDA,EAAAq4B,kBAAqEhU,qBACxE,SAACJ,EAAgBsE,EAAaC,EAAcnE,GAAwB,gBAAC/e,GACjE,OACI2e,EAAe3e,IACfijB,EAAYjjB,IACZkjB,EAAaljB,IACb+e,EAAoB/e,MAKzBlK,OAAAgQ,GAAA,EAAAhQ,CAAW,SACdma,GAEA,IAAMinB,EAAW,CACbs4C,kBAAmBv/D,EAAMX,SAASyc,UAClC0jD,mBAAoBx/D,EAAMX,SAAS+V,WACnCqqD,kBAAmBz/D,EAAM8iB,kBAAkB9P,YAC3C0sD,kBAAmB1/D,EAAM8iB,kBAAkB7P,aAC3C0sD,eAAgB3/D,EAAMkQ,MAAM4L,UAC5B8jD,cAAe5/D,EAAMQ,KAAKsb,UAC1B+jD,0BAA2B7/D,EAAM2Y,UAAUmD,UAC3CgkD,2BAA4B9/D,EAAMgjB,kBAAkBlH,UACpDikD,wBAAyB//D,EAAMggB,eAAelE,UAC9CkkD,uBAAwBhgE,EAAMggB,eAAejO,gBAC7CkuD,sBAAuBjgE,EAAM8iB,kBAAkBpU,eAC/CE,YAAa5O,EAAM4iB,mBAAmBhU,YACtCC,aAAc7O,EAAM4iB,mBAAmB/T,aACvCqxD,uBAAwBlgE,EAAM4iB,mBAAmBlU,eACjDqN,yBAA0B/b,EAAMG,aAAa4b,yBAC7CuhD,0BAA2BA,EAA0Bt9D,GACrDmgE,yBAA0BngE,EAAMuH,eAAe6N,WAC/CiH,oBAAqBrc,EAAMuH,eAAe8U,oBAC1C+jD,0BAA2BpgE,EAAMijB,mBAAmBzL,kBACpD6oD,sBAAuBrgE,EAAMG,aAAaiV,WAC1CkrD,sBAAuBtgE,EAAMG,aAAakU,WAC1CksD,uBAAwBvgE,EAAMG,aAAa6b,WAC3CwkD,uBAAwBxgE,EAAMijB,mBAAmBvU,eACjD+P,iBAAkBze,EAAMuL,QAAQoR,WAChC+B,iBAAkB1e,EAAMuL,QAAQqR,WAChCyC,0BAA2Brf,EAAMiM,iBAAiB0Q,WAClD2C,0BAA2Btf,EAAMiM,iBAAiB2Q,WAClD6jD,qBAAsBzgE,EAAM0f,YAAY5D,UACxC4kD,qBAAsB1gE,EAAM0f,YAAYrL,WACxCssD,gBAAiB3gE,EAAMhB,OAAO8c,UAC9ByhD,sBAAuBA,EAAsBv9D,GAC7Cw9D,qBAAsBA,EAAqBx9D,IAG/C,OAAOvW,EAAA,UACH4zE,UAAWA,EAAUp2C,IAClBA,MHxXX,OAAO,SAAC/D,GAKJ,MAAO,CACH/wB,KALSsrE,EAA4Bv6C,GAMrCv4B,OALWgzE,EAAiCz6C,GAM5Cxc,SALa24D,EAAkCn8C,KIhB3D,kBACI,SAAA09C,EACYC,GAAAh5E,KAAAg5E,qBAQhB,OALID,EAAA75E,UAAAswC,UAAA,SAAUznC,GCPC,IAAsB2sE,EDU7B,OAFA3sE,EAAM1G,SCRuBqzE,EDQA10E,KAAKg5E,mBAAmBjxE,ICHlD2sE,EAAM52D,MAAM,kBACdjT,IAAI,SAAAsnD,GAAQ,OAAAA,EAAK5zC,QAAQ,SAAU,MACnC1C,KAAK,KACLo9D,OANM,GDQAlxE,GAEfgxE,EAVA,GEkCA,IAAqBG,GAArB,WAQI,SAAAC,EACYv6C,EACAu1B,EACA9zB,EACA9pB,EACA29D,EACAkF,EACAC,EACA52B,EACA62B,EACAC,EACAC,EACAxvB,EACA/pB,EACAo6B,EACAof,EACAC,EACA9yB,GCtDD,IACX+yB,EpBQAlkE,EACAymB,EAEM09C,EmB0BM55E,KAAA4+B,SACA5+B,KAAAm0D,+BACAn0D,KAAAqgC,yBACArgC,KAAAuW,uBACAvW,KAAAk0E,4BACAl0E,KAAAo5E,wBACAp5E,KAAAq5E,uBACAr5E,KAAAyiD,iCACAziD,KAAAs5E,sBACAt5E,KAAAu5E,gCACAv5E,KAAAw5E,2BACAx5E,KAAAgqD,sBACAhqD,KAAAigC,8BACAjgC,KAAAq6D,gCACAr6D,KAAAy5E,gCACAz5E,KAAA05E,iCACA15E,KAAA4mD,+BAER5mD,KAAK65E,wBCvDT,IAAAF,MAA8C,gBAArBh/B,KAElB,IAAIm/B,GAAwB,SAAA/xE,GAC/B,IAAK4xE,IAmFb,SAAgC5xE,GAC5B,SAAUA,EAAMjI,UAAWiI,EAAM9H,MApFN85E,CAAuBhyE,GAC1C,OAAOA,EAAM1G,QAGjB,OAAQ0G,EAAMjI,SAAWiI,EAAM9H,MAC/B,KAAK6gC,EAAA,EAAqB1gC,oBACtB,MAAO,qBACD2H,EAAM1G,QAAO,2PAMvB,KAAKy/B,EAAA,EAAqB3gC,YAC1B,KAAK2gC,EAAA,EAAqBzgC,gBACtB,MAAO,qBACD0H,EAAM1G,QAAO,gQAMvB,KAAKy/B,EAAA,EAAqBxgC,sBACtB,MAAO,qBACDyH,EAAM1G,QAAO,oUAOvB,KAAKy/B,EAAA,EAAqBtgC,aACtB,MAAO,qBACDuH,EAAM1G,QAAO,6PAMvB,KAAKy/B,EAAA,EAAqBrgC,eACtB,MAAO,qBACDsH,EAAM1G,QAAO,8LAKvB,KAAKy/B,EAAA,EAAqBngC,qBACtB,MAAO,qBACDoH,EAAM1G,QAAO,2SAMvB,KAAKihC,GAAA,EAAwBvvB,uBACzB,MAAO,4OAMX,KAAKuvB,GAAA,EAAwB9xB,sBACzB,MAAO,qBACDzI,EAAM1G,QAAO,yOAMvB,KAAKihC,GAAA,EAAwBtvB,uBACzB,MAAO,qBACDjL,EAAM1G,QAAO,4OAMvB,QACI,OAAO0G,EAAM1G,YDzBjBrB,KAAKg6E,kBAAoB/E,KACzBj1E,KAAKi6E,kBnBjDTxkE,EmBiDsDzV,KAAK4+B,OnBhD3D1C,EmBgDmEl8B,KAAKg6E,kBnB9ClEJ,EAAa57E,OAAA+gB,EAAA,gBAAA/gB,CACf,SAACma,EAAO9E,GAAW,OAAAA,EAAOpT,OAAS0wE,GAAqBuJ,YACpD7mE,EAAOC,QACP6E,GACJ1C,EAAMyB,WACN,CAAEglB,iBAAgBA,IAGtBzmB,EAAMspB,UAAU,SAAA5mB,GACZyhE,EAAWh6C,SAAS5hC,OAAA+gB,EAAA,aAAA/gB,CAAa2yE,GAAqBuJ,YAAa/hE,KACpE,CAAEgiE,SAAS,IAEPP,GmBkiCX,OA5+BIT,EAAAj6E,UAAAgY,SAAA,WACI,OAAOlX,KAAKi6E,iBAAiB/iE,YASjCiiE,EAAAj6E,UAAAk7E,YAAA,WACIp6E,KAAKi6E,iBAAiBG,eAiC1BjB,EAAAj6E,UAAA6/B,UAAA,SACIC,OACA,MAAAC,EAAA,GAAA34B,EAAA,EAAAA,EAAAC,UAAApC,OAAAmC,IAAA24B,EAAA34B,EAAA,GAAAC,UAAAD,GAEA,OAAO1D,EAAA5C,KAAKi6E,kBAAiBl7C,UAASr4B,MAAA9D,EAAA,CAACo8B,GAAUr4B,OAAKs4B,KAqB1Dk6C,EAAAj6E,UAAAsX,aAAA,SAAavL,EAAajH,GACtB,OAAOhE,KAAKq6E,UAAUpvE,EAClBjL,KAAKqgC,uBAAuB7pB,aAAavL,EAAIjH,GAC7ChE,KAAKqgC,uBAAuBrpB,oBAAoBhT,KAiBxDm1E,EAAAj6E,UAAAqY,eAAA,SAAejE,EAA8BtP,GACzC,IAAMqP,EAASrT,KAAKqgC,uBAAuB9oB,eAAejE,EAAStP,GAEnE,OAAOhE,KAAKq6E,UAAUhnE,IAoB1B8lE,EAAAj6E,UAAAonD,UAAA,SAAUp2B,EAAiBlsB,GAA3B,IAAAjE,EAAAC,KACUs6E,EAAqBt6E,KAAKgqD,oBAAoB1D,UAAUp2B,EAASlsB,GACjEu2E,EAAmBv6E,KAAKuW,qBAAqBI,WAAW3S,GAE9D,OAAO6M,QAAQC,IAAI,CACf9Q,KAAKq6E,UAAUC,GACft6E,KAAKq6E,UAAUE,EAAkB,CAAE56C,QAAS,aAE3Cn4B,KAAK,WAAM,OAAAzH,EAAKmX,cA2CzBiiE,EAAAj6E,UAAAqnD,YAAA,SAAYjzC,EAA2BtP,GACnC,IAAMqP,EAASrT,KAAKq6D,8BAA8B1S,QAAQr0C,EAAStP,GAEnE,OAAOhE,KAAKq6E,UAAUhnE,EAAQ,CAAEssB,QAAS,qBAiC7Cw5C,EAAAj6E,UAAAs7E,sBAAA,SAAsBx2E,GAClB,IAAMqP,EAASrT,KAAKq6D,8BAA8BjQ,SAASpmD,GAE3D,OAAOhE,KAAKq6E,UAAUhnE,EAAQ,CAAEssB,QAAS,qBA0B7Cw5C,EAAAj6E,UAAA+H,mBAAA,SAAmBjD,GACf,IAAMqP,EAASrT,KAAKigC,4BAA4Bh5B,mBAAmBjD,GAEnE,OAAOhE,KAAKq6E,UAAUhnE,EAAQ,CAAEssB,QAAS,oBAe7Cw5C,EAAAj6E,UAAA+I,kBAAA,SAAkBC,EAAkBlE,GAChC,IAAMqP,EAASrT,KAAKigC,4BAA4Bh4B,kBAAkBC,EAAUlE,GAE5E,OAAOhE,KAAKq6E,UAAUhnE,EAAQ,CAAEssB,QAAS,oBAuB7Cw5C,EAAAj6E,UAAA+gD,kBAAA,SAAkBj8C,GACd,IAAMqP,EAASrT,KAAKq6D,8BAA8BlqD,WAAWnM,GAE7D,OAAOhE,KAAKq6E,UAAUhnE,EAAQ,CAAEssB,QAAS,qBAoB7Cw5C,EAAAj6E,UAAAu7E,oBAAA,SAAoBz2E,GAChB,IAAMqP,EAASrT,KAAKq6D,8BAA8Bv6B,aAAa97B,GAE/D,OAAOhE,KAAKq6E,UAAUhnE,EAAQ,CAAEssB,QAAS,qBAkB7Cw5C,EAAAj6E,UAAAw7E,qBAAA,SAAqB12E,GACjB,IAAMqP,EAASrT,KAAKo5E,sBAAsBnzB,cAAcjiD,GAExD,OAAOhE,KAAKq6E,UAAUhnE,EAAQ,CAAEssB,QAAS,sBAoB7Cw5C,EAAAj6E,UAAAy7E,sBAAA,SAAsB32E,GAClB,IAAMqP,EAASrT,KAAKy5E,8BAA8BxzB,cAAcjiD,GAEhE,OAAOhE,KAAKq6E,UAAUhnE,EAAQ,CAAEssB,QAAS,uBAoB7Cw5C,EAAAj6E,UAAA07E,yBAAA,SAAyB52E,GACrB,OAAOhE,KAAK06E,qBAAqB12E,IAoBrCm1E,EAAAj6E,UAAA27E,0BAAA,SAA0B72E,GACtB,OAAOhE,KAAK26E,sBAAsB32E,IAqBtCm1E,EAAAj6E,UAAA47E,mBAAA,SAAmB92E,GACf,IAAMqP,EAASrT,KAAKyiD,+BAA+BtyC,WAAWnM,GAE9D,OAAOhE,KAAKq6E,UAAUhnE,EAAQ,CAAEssB,QAAS,sBAoB7Cw5C,EAAAj6E,UAAA67E,qBAAA,SAAqB/2E,GACjB,IAAMqP,EAASrT,KAAKyiD,+BAA+B3iB,aAAa97B,GAEhE,OAAOhE,KAAKq6E,UAAUhnE,EAAQ,CAAEssB,QAAS,sBAc7Cw5C,EAAAj6E,UAAA+yC,gBAAA,SAAgBC,EAA+BluC,GAC3C,IAAMqP,EAASrT,KAAKm0D,6BAA6BliB,gBAAgBC,EAAaluC,GAE9E,OAAOhE,KAAKq6E,UAAUhnE,IAwB1B8lE,EAAAj6E,UAAAmiD,eAAA,SAAenP,EAAkCluC,GAC7C,IAAMqP,EAASrT,KAAKyiD,+BAA+B5F,OAAO3K,EAAaluC,GAEvE,OAAOhE,KAAKq6E,UAAUhnE,EAAQ,CAAEssB,QAAS,sBAmB7Cw5C,EAAAj6E,UAAAuiD,gBAAA,SAAgBz9C,GACZ,IAAMqP,EAASrT,KAAKyiD,+BAA+B3F,QAAQ94C,GAE3D,OAAOhE,KAAKq6E,UAAUhnE,EAAQ,CAAEssB,QAAS,sBAoB7Cw5C,EAAAj6E,UAAAya,oBAAA,SAAoB3V,GAChB,IAAMqP,EAASrT,KAAKk0E,0BAA0Bv6D,oBAAoB3V,GAElE,OAAOhE,KAAKq6E,UAAUhnE,IAsB1B8lE,EAAAj6E,UAAA8gD,mBAAA,SAAmBh8C,GACf,IAAMqP,EAASrT,KAAK05E,+BAA+BvpE,WAAWnM,GAE9D,OAAOhE,KAAKq6E,UAAUhnE,EAAQ,CAAEssB,QAAS,sBAoB7Cw5C,EAAAj6E,UAAA87E,qBAAA,SAAqBh3E,GACjB,IAAMqP,EAASrT,KAAK05E,+BAA+B55C,aAAa97B,GAEhE,OAAOhE,KAAKq6E,UAAUhnE,EAAQ,CAAEssB,QAAS,sBAoB7Cw5C,EAAAj6E,UAAAga,qBAAA,SAAqBG,EAA0BrV,GAC3C,IAAMqP,EAASrT,KAAK05E,+BAA+B3F,aAAa16D,EAAkBrV,GAElF,OAAOhE,KAAKq6E,UAAUhnE,EAAQ,CAAEssB,QAAS,sBA4B7Cw5C,EAAAj6E,UAAAumC,sBAAA,SAAsBrrB,EAAsCpW,GACxD,IAAMqP,EAASrT,KAAK05E,+BAA+Bv/D,cAAcC,EAASpW,GAE1E,OAAOhE,KAAKq6E,UAAUhnE,EAAQ,CAAEssB,QAAS,sBAgC7Cw5C,EAAAj6E,UAAAob,mBAAA,SACIhC,EACAtU,GAEA,IAAMqP,EAASrT,KAAKk0E,0BAA0B55D,mBAAmBhC,EAActU,GAE/E,OAAOhE,KAAKq6E,UAAUhnE,EAAQ,CAAEssB,QAAS,sBAgB7Cw5C,EAAAj6E,UAAA4Z,kBAAA,SACI+B,EACA7W,GAEA,IAAMqP,EAASrT,KAAKk0E,0BAA0Bp7D,kBAAkB+B,EAAe7W,GAE/E,OAAOhE,KAAKq6E,UAAUhnE,EAAQ,CAAEssB,QAAS,sBAoC7Cw5C,EAAAj6E,UAAA2Z,kBAAA,SACIX,EACAlU,GAEA,IAAMqP,EAASrT,KAAKk0E,0BAA0Br7D,kBAAkBX,EAAalU,GAE7E,OAAOhE,KAAKq6E,UAAUhnE,EAAQ,CAAEssB,QAAS,sBAc7Cw5C,EAAAj6E,UAAA+7E,qBAAA,SACI/iE,EACAlU,GAEA,IAAMqP,EAASrT,KAAKk0E,0BAA0Bn7D,qBAAqBb,EAAalU,GAEhF,OAAOhE,KAAKq6E,UAAUhnE,EAAQ,CAAEssB,QAAS,sBAc7Cw5C,EAAAj6E,UAAAg8E,uBAAA,SACIhjE,EACAlU,GAEA,IAAMqP,EAASrT,KAAKk0E,0BAA0Bj8D,uBAAuBC,EAAalU,GAElF,OAAOhE,KAAKq6E,UAAUhnE,EAAQ,CAAEssB,QAAS,sBAwB7Cw5C,EAAAj6E,UAAAi8E,gCAAA,SACItgE,EACAxB,EACArV,GAEA,IAAMqP,EAASrT,KAAKk0E,0BAA0Bj5D,qBAAqB,CAC/DhQ,GAAI4P,EACJxB,iBAAgBA,GACjBrV,GAEH,OAAOhE,KAAKq6E,UAAUhnE,EAAQ,CAAEssB,QAAS,sBAsB7Cw5C,EAAAj6E,UAAAk8E,qBAAA,SAAqBhhE,EAA6CpW,QAAA,IAAAA,MAAA,IAC9D,IAAMqP,EAASrT,KAAKm0D,6BAA6Bh6C,cAAcC,EAASpW,GAExE,OAAOhE,KAAKq6E,UAAUhnE,IAkB1B8lE,EAAAj6E,UAAA88C,YAAA,SAAY1qC,EAActN,GACtB,IAAMqP,EAASrT,KAAKq5E,qBAAqBr9B,YAAY1qC,EAAMtN,GAE3D,OAAOhE,KAAKq6E,UAAUhnE,IAiB1B8lE,EAAAj6E,UAAA+8C,aAAA,SAAa3qC,EAActN,GACvB,IAAMqP,EAASrT,KAAKq5E,qBAAqBp9B,aAAa3qC,EAAMtN,GAE5D,OAAOhE,KAAKq6E,UAAUhnE,IAiB1B8lE,EAAAj6E,UAAAq9C,qBAAA,SAAqBjrC,EAActN,GAC/B,IAAMqP,EAASrT,KAAKu5E,8BAA8Bh9B,qBAAqBjrC,EAAMtN,GAE7E,OAAOhE,KAAKq6E,UAAUhnE,IAiB1B8lE,EAAAj6E,UAAAs9C,sBAAA,SAAsBlrC,EAActN,GAChC,IAAMqP,EAASrT,KAAKu5E,8BAA8B/8B,sBAAsBlrC,EAAMtN,GAE9E,OAAOhE,KAAKq6E,UAAUhnE,IAmB1B8lE,EAAAj6E,UAAA4xE,gBAAA,WACI,IAAMz9D,EAASrT,KAAKw5E,yBAAyB1I,kBAE7C,OAAO9wE,KAAKq6E,UAAUhnE,IAkB1B8lE,EAAAj6E,UAAAkyE,iBAAA,SAAiBnlD,GACb,IAAM5Y,EAASrT,KAAKw5E,yBAAyBpI,iBAAiBnlD,GAE9D,OAAOjsB,KAAKq6E,UAAUhnE,IAe1B8lE,EAAAj6E,UAAAw7C,WAAA,SAAW3yC,GACP,IAAMsL,EAASrT,KAAKs5E,oBAAoB5+B,WAAW3yC,GAEnD,OAAO/H,KAAKq6E,UAAUhnE,IAmB1B8lE,EAAAj6E,UAAAm8E,yBAAA,SAAyBr3E,GACrB,IAAMqP,EAASrT,KAAK4mD,6BAA6Bz2C,WAAWnM,GAE5D,OAAOhE,KAAKq6E,UAAUhnE,EAAQ,CAAEssB,QAAS,oBAUrCw5C,EAAAj6E,UAAAm7E,UAAR,SAAkBhnE,EAA2DrP,GAA7E,IAAAjE,EAAAC,KACI,OAAOA,KAAK4+B,OAAOgB,SAASvsB,EAAQrP,GAC/BwD,KAAK,WAAM,OAAAzH,EAAKmX,aAChBpP,MAAM,SAAAC,GACH,MAAMhI,EAAK85E,kBAAkBrqC,UAAUznC,MA1hClCoxE,EAAev3E,EAAA,YADnC+7B,GAAA,GACoBw7C,GAArB,aEIe,SAAAmC,GAA+Bt3E,GACP,WAA/BgQ,SAASiI,SAAS1H,UAClBsnC,IAAmBR,KAAK,uEAGH,eAArBV,KACAkB,IAAmBR,KAAK,6HAG5B,IC1CyC/S,ED0CnCnxB,EAAsB,CACxB1P,KAAM,CACF2uB,eAAgBpyB,GAAWA,EAAQoyB,gBAEvCtzB,OAAQ,GACR+b,SAAU,IAERjc,EAAAoB,GAAA,GAAEnB,EAAAD,EAAAq7C,cAAA,IAAAp7C,EAAA,GAAAA,EAAaE,EAAAH,EAAA04B,0BAAA,IAAAv4B,KACfglC,EAAgB/pC,OAAAgqC,EAAA,oBAAAhqC,CAAoB,CAAE6pC,KAAM7jC,GAAWA,EAAQ6jC,OAC/DpyB,EAAQzX,OAAA8pC,GAAA,EAAA9pC,CAAoB,CAAEmZ,OAAMA,GAAI,CAAEmkB,mBAAkBA,IAC5DmwC,EErDK,SAA6Bh2D,GACxC,IAAMg2D,EAAgBztE,OAAAu9E,GAAA,aAAAv9E,GAatB,OAXAyX,EAAMspB,UACF,SAAA5mB,GACI,IAAMhB,EAASgB,EAAMhB,OAAO+e,iBAExB/e,GACAs0D,EAAc+P,QAAQrkE,EAAOk3C,gBAAgBotB,gBAGrD,SAAAtjE,GAAS,OAAAA,EAAMhB,OAAO+e,mBAGnBu1C,EFuCeiQ,CAAoBjmE,GACpCkmE,EAAqB,IAAI7O,GAAmB/kC,GAC5CykC,EAAwB,IAAI9jC,EAAA,EAAsBX,GAClDqlC,EAAsB,IAAIzkC,EAAA,EAAoB,IAAIC,EAAA,EAAoBb,IACtE2jC,GCxDmCpjC,EDwDGtqC,OAAAuqC,EAAA,mBAAAvqC,GCvDrC,IAAI49E,GACP,IAAIC,GAA4BvzC,GAChC,IAAIsf,KDsDF+kB,EAA8B,IAAIC,GAA4BlB,GAC9DpB,EAAqB,IAAIuC,GAC3B8O,EACA,IAAIjP,GAAkBF,GACtBG,GAGJ,OAAO,IAAIuM,GACPzjE,EACA,IAAIw2D,EAAA,EAA4B,IAAIC,EAAA,EAA4BnkC,IAChE,IAAIU,EAAA,EAAsB+jC,EAAuBY,GACjDA,EACA,IAAI0O,GAAA,EAAyB,IAAIC,GAAA,EAAyBh0C,GAAgBykC,GAC1E,IAAIwP,GAAqB,IAAIC,GAAqBl0C,EAAe,CAAEkW,OAAMA,KACzE,IAAIi+B,EAAoB,IAAIC,EAAoBp0C,IAChD,IAAIq0C,EG/CG,SACX3mE,EACAsyB,GAEA,IAAMK,EAAW,IAAIC,EAAA,EACfC,EAAetqC,OAAAuqC,EAAA,gBAAAvqC,GACfwuE,EAAwB,IAAI9jC,EAAA,EAAsBX,GAClDS,EAAwB,IAAIC,EAAA,EAC9B+jC,EACA,IAAI7jC,EAAA,EAAoB,IAAIC,EAAA,EAAoBb,KAE9CE,EAAajqC,OAAAkqC,EAAA,iBAAAlqC,GACbgvE,EAA6B,IAAInjC,EAAA,EAA2B,IAAIC,EAAA,EAA2B/B,IAC3Fs0C,EAA8B,IAAIlP,EAA4BplC,GAC9DklC,EAA8B,IAAIC,EAA4BmP,GAyFpE,OAvFAj0C,EAASnrB,SAAS,SAAU,WACxB,WAAIq/D,GACA7mE,EACAu3D,EACAC,EACAoP,EACA,IAAItO,EAAsBzlC,MAIlCF,EAASnrB,SAAS,wBAAyB,WACvC,WAAIs/D,GACA9mE,EACA+yB,EACAwkC,EACA,IAAIoP,EAA8Bh0C,GAClC6kC,EACA5tB,EAA4C/W,EAAcP,GAC1D,IAAI4nC,EAAyBrnC,MAIrCF,EAASnrB,SAAS,WAAY,WAC1B,WAAIu/D,GACA/mE,EACAu3D,EACAC,EACA,IAAI4C,EAAqBvnC,GACzBP,EACAE,KAIRG,EAASnrB,SAAS,WAAY,WAC1B,WAAIw/D,GACAhnE,EACA,IAAIy3D,EAA4BmP,MAIxCj0C,EAASnrB,SAAS,aAAc,WAC5B,WAAIy/D,GACAjnE,EACAu3D,EACAC,EACA,IAAI7jC,EAAA,EAAuBd,MAInCF,EAASnrB,SAAS,qBAAsB,WACpC,WAAIooC,GACA5vC,EACAw3D,EACAjvE,OAAAsrC,EAAA,EAAAtrC,CACIyX,EACA,IAAI8zB,EAAA,EACA,IAAIR,EAAA,EACA,IAAIC,EAAA,EAAsBV,MAItCL,KAIRG,EAASnrB,SAAS,kBAAmB,WACjC,WAAIooC,GACA5vC,EACAw3D,EACAjvE,OAAAsrC,EAAA,EAAAtrC,CACIyX,EACA,IAAIg0B,EAAA,GAERxB,KAIRG,EAASnrB,SAAS,UAAW,WACzB,WAAI0/D,GACAlnE,EACA,IAAImnE,GACA,IAAIC,GAAsB90C,GAC1BS,MAKLJ,EHxD+B00C,CAA+BrnE,EAAOsyB,IACxE,IAAIg1C,EACJ,IAAIC,EAA6B,IAAIC,EAA6Bl1C,IAClE,IAAIm1C,GAAwB,IAAIC,GAAwB1R,EAAe1jC,IACvEuiC,EACA,IAAIzgC,EAAA,EAA2B,IAAIC,EAAA,EAA2B/B,IAC9D,IAAIulC,GACA9B,GAA8B/1D,EAAOg2D,EAAe1jC,EAAe2jC,GACnEpB,GAEJ,IAAI8S,GAA6B,IAAIC,GAA6Bt1C,EAAe,CAAEkW,OAAMA,KACzF,IAAIq/B,GI3EG,SACX7nE,EACAsyB,GAEA,IAAMK,EAAW,IAAIC,EAAA,EACfmkC,EAAwB,IAAI9jC,EAAA,EAAsBX,GAClDw1C,EAA2B,IAAIxB,GAAA,EAAyBh0C,GACxDy1C,EAA2B,IAAI1B,GAAA,EAAyByB,EAA0B/Q,GAmBxF,OAjBApkC,EAASnrB,SAAS,SAAU,WACxB,WAAIwgE,GACAhoE,EACA+nE,EACA,IAAI3zC,EAAA,EAA2B,IAAIC,EAAA,EAA2B/B,IAC9D,IAAImlC,EAA4B,IAAIC,EAA4BplC,IAChE,IAAIgmC,EAAsB/vE,OAAAuqC,EAAA,gBAAAvqC,OAIlCoqC,EAASnrB,SAAS,UAAW,WACzB,WAAIygE,GACAjoE,EACA+nE,KAIDp1C,EJiD+Bu1C,CAA+BloE,EAAOsyB,IACxE4kC,sDKzFO,SAAAiR,GAAgCv8E,GAC3C,GAAKA,EAAQiS,SAAYjS,EAAQiS,QAAQi9B,UAAzC,CAIA,IAAMhuC,EAAOyR,SAASgxB,eAAe3jC,EAAQiS,QAAQi9B,WAEhDhuC,IAAQA,EAAKs7E,aAAa,uBAI/Bt7E,EAAKu7E,aAAa,qBAAsB,KCPrC,SAAAC,GAAuBh2E,GAC1B,MAC6B,iBAAlBA,EAAM1G,SACS,iBAAf0G,EAAM9H,OACa,iBAAlB8H,EAAMjI,UAAyBiI,EAAMjI,UAC7CiI,aAAiBtG,mBCYJu8E,GAArB,WAII,SAAAC,EACYhzC,EACAC,EACAgzC,EACAC,QAAA,IAAAA,MAAA,IAHAn+E,KAAAirC,mBACAjrC,KAAAkrC,iBACAlrC,KAAAk+E,2BACAl+E,KAAAm+E,mBAERn+E,KAAKirC,iBAAiB1hC,SA8F9B,OA3FI00E,EAAA/+E,UAAAk/E,aAAA,WACI,IAAM/8E,EAAyC,CAC3CpB,KAAMurC,GAAA,EAA0BC,kBAGpCzrC,KAAKq+E,aAAah9E,IAGtB48E,EAAA/+E,UAAAo/E,UAAA,SAAUhrE,GACN,IAAMjS,EAAsC,CACxCpB,KAAMurC,GAAA,EAA0BE,cAChCp4B,QAAStT,KAAKu+E,gBAAgBjrE,IAGlCtT,KAAKq+E,aAAah9E,IAGtB48E,EAAA/+E,UAAAs/E,eAAA,SAAelrE,GACX,IAAMjS,EAA2C,CAC7CpB,KAAMurC,GAAA,EAA0BmB,WAChCr5B,QAAStT,KAAKu+E,gBAAgBjrE,IASlCtT,KAAKq+E,aAAah9E,EAAS,CAAEo9E,YAAY,KAG7CR,EAAA/+E,UAAAw/E,gBAAA,SAAgBprE,GACZ,IAAMjS,EAA4C,CAC9CpB,KAAMurC,GAAA,EAA0BM,YAChCx4B,QAAOA,GAGXtT,KAAKq+E,aAAah9E,IAGtB48E,EAAA/+E,UAAAy/E,WAAA,WACI,IAAMt9E,EAAuC,CACzCpB,KAAMurC,GAAA,EAA0BI,gBAGpC5rC,KAAKq+E,aAAah9E,IAGtB48E,EAAA/+E,UAAA0/E,cAAA,WACI,IAAMv9E,EAA0C,CAC5CpB,KAAMurC,GAAA,EAA0BQ,WAGpChsC,KAAKq+E,aAAah9E,IAGtB48E,EAAA/+E,UAAA2/E,cAAA,SAAcC,GACV9+E,KAAKirC,iBAAiBrhC,YAAYqjC,GAAA,EAAyBC,gBAAiB,SAACtqC,OAAE0Q,EAAA1Q,EAAA0Q,QAC3EwrE,EAAQxrE,MAIR2qE,EAAA/+E,UAAAm/E,aAAR,SAAqBh9E,EAAgC2C,GAGjD,GAFAhE,KAAK++E,uBAAuB19E,GAExB2C,GAAWA,EAAQy6E,WACnB,OAAOz+E,KAAKk+E,yBAAyBx4E,KAAKrE,GAG9CrB,KAAKkrC,eAAexlC,KAAKrE,IAGrB48E,EAAA/+E,UAAA6/E,uBAAR,SAA+B19E,GAA/B,IAAAtB,EAAAC,KACIhC,OAAOgH,KAAKhF,KAAKm+E,kBACZ/zE,QAAQ,SAAAvL,GACL,IAAMigF,EAAU/+E,EAAKo+E,iBAAiBt/E,GAElCigF,GACAA,EAAQrhF,KAAK,KAAM4D,MAK3B48E,EAAA/+E,UAAAq/E,gBAAR,SAAwBx2E,GACpB,MAAO,CACH1G,QAAS0G,EAAM1G,QACfpB,KAAM89E,GAAch2E,GAASA,EAAM9H,UAAOmI,EAC1CtI,QAASi+E,GAAch2E,GAASA,EAAMjI,aAAUsI,IArGvC61E,EAA+Br8E,EAAA,YADnD+7B,GAAA,GACoBsgD,GAArB,GClBqBe,GAArB,oBAAAC,KAcA,OAbIA,EAAA//E,UAAAk/E,aAAA,aAEAa,EAAA//E,UAAAo/E,UAAA,aAEAW,EAAA//E,UAAAs/E,eAAA,aAEAS,EAAA//E,UAAAw/E,gBAAA,aAEAO,EAAA//E,UAAAy/E,WAAA,aAEAM,EAAA//E,UAAA0/E,cAAA,aAEAK,EAAA//E,UAAA2/E,cAAA,aAbiBI,EAA6Br9E,EAAA,YADjD+7B,GAAA,GACoBshD,GAArB,GC+Be,SAAAC,GAAyCl7E,SAC9Cm7E,EAAen7E,EAAQm7E,cAAgBv5E,OAAO+H,OAGpD,OAAI/H,SAAWu5E,EACJ,IAAIH,GAGR,IAAIhB,GACP,IAAI9sC,GAAA,EAA6CltC,EAAQo7E,cACzD,IAAIjuC,GAAA,EAAyCntC,EAAQo7E,aAAcD,GACnE,IAAIhuC,GAAA,EAAyC,IAAKguC,KAAav8E,EAAA,IAC5D4oC,GAAA,EAA0BM,aAAc8xC,GAAsBh7E,kBC3BpDy8E,GAArB,WASI,SAAAC,EACInoE,EACQooE,GAAAv/E,KAAAu/E,UAEF,IAAA38E,EAAA5C,KAAAw/E,iBAAAroE,GAAE8mC,EAAAr7C,EAAAq7C,OAAQwhC,EAAA78E,EAAA68E,QAASC,EAAA98E,EAAA88E,aAEzB1/E,KAAK2/E,QAAU1hC,EACfj+C,KAAK4/E,SAAWH,EAChBz/E,KAAK6/E,cAAgBH,EACrB1/E,KAAK8/E,YAAc,GAiI3B,OAjHIR,EAAApgF,UAAA6gF,QAAA,SAAQvzE,GAAR,IAAAzM,EAAAC,KACIhC,OAAOgH,KAAKwH,GAAMpC,QAAQ,SAAAvL,GACtB,IAAMmhF,EAAoBC,sBAAczzE,EAAK3N,GAE7CkB,EAAK8/E,cAAiBI,sBAAcphF,GAASkB,EAAK8/E,cAAcG,MASxEV,EAAApgF,UAAAghF,UAAA,WACI,OAAOlgF,KAAKmgF,mBAAqBngF,KAAK2/E,QA7DvB,MAkFnBL,EAAApgF,UAAAkhF,UAAA,SAAUvhF,EAAayL,QAAA,IAAAA,MAAA,IACnB,IAAM+1E,EAAiBJ,sBAAcphF,EAErC,GAA+C,iBAApCmB,KAAK6/E,cAAcQ,GAG1B,OAFArgF,KAAKu/E,QAAQlkC,KAAK,oBAAoBglC,EAAW,gBAE1CA,EAGX,IAAKrgF,KAAK8/E,YAAYO,GAAc,CAChC,IAAMC,EAAgB,IAAIC,GAAcvgF,KAAK4/E,SAASS,IAEtDrgF,KAAK8/E,YAAYO,GAAeC,EAAcE,QAAQxgF,KAAK6/E,cAAcQ,IAAgB,IAG7F,OAAOrgF,KAAK8/E,YAAYO,GAAargF,KAAKygF,eAAen2E,KAGrDg1E,EAAApgF,UAAAsgF,iBAAR,SAAyBroE,QAAA,IAAAA,MAAA,IACrB,IAAMupE,EAAyB,CAC3BC,oBAAqB,GACrBjB,aAAc,GACdD,QAAS,GACTxhC,OAAQ9mC,EAAO8mC,QAzGJ,MA4GTwhC,EAAUtoE,EAAOsoE,SAAW,GAC5BC,EAAe1/E,KAAK4gF,eAAezpE,EAAOuoE,cAAgB,IAC1DiB,EAAsB3gF,KAAK4gF,eAAezpE,EAAOwpE,qBAAuB,IAa9E,OAZwB3iF,OAAA8O,GAAA,MAAA9O,CAAMA,OAAOgH,KAAK27E,GAAsB3iF,OAAOgH,KAAK06E,IAE5Dt1E,QAAQ,SAAAvL,GAChB6gF,GAAgBA,EAAa7gF,IAC7B6hF,EAAOhB,aAAa7gF,GAAO6gF,EAAa7gF,GACxC6hF,EAAOjB,QAAQ5gF,GAAO4gF,EAAQ5gF,IAAQ6hF,EAAOziC,SAE7CyiC,EAAOhB,aAAa7gF,GAAO8hF,EAAoB9hF,GAC/C6hF,EAAOjB,QAAQ5gF,GAvHR,QA2HR6hF,GAGHpB,EAAApgF,UAAA0hF,eAAR,SAAuB5hF,EAAsB6H,EAA2Bg6E,GAAxE,IAAA9gF,EAAAC,UAA6C,IAAA6G,MAAA,SAA2B,IAAAg6E,MAAA,IACpE,IACI7iF,OAAOgH,KAAKhG,GAAQoL,QAAQ,SAAAvL,GACxB,IAAMN,EAAQS,EAAOH,GACfiiF,EAAYD,EAAeA,EAAS,IAAIhiF,EAAQA,EAEtD,GAAIb,OAAA8O,GAAA,SAAA9O,CAASO,GACT,OAAOwB,EAAK6gF,eAAeriF,EAAuBsI,EAAQi6E,GAG9Dj6E,EAAOi6E,GAAaviF,IAE1B,MAAOo4C,GACL32C,KAAKu/E,QAAQlkC,KAAK,2BAA2B1E,GAGjD,OAAO9vC,GAGHy4E,EAAApgF,UAAAuhF,eAAR,SAAuBn2E,GACnB,OAAOtM,OAAOgH,KAAKsF,GAAMM,OAAO,SAAC/D,EAAQhI,GACrC,IAAMN,EAAQ+L,EAAKzL,GAInB,OAFAgI,EAAOhI,GAAON,QAAwC,GAAKA,EAEpDsI,GACR,KAGCy4E,EAAApgF,UAAAihF,iBAAR,eAAApgF,EAAAC,KACI,OAAOhC,OAAOgH,KAAKhF,KAAK4/E,UAAU/0E,IAAI,SAAAhM,GAAO,OAAAkB,EAAK6/E,SAAS/gF,KACtDgG,OAAO,SAAAyM,GAAQ,OAAAA,EAAKwM,MAAM,KAAK,KAAO/d,EAAK4/E,QAAQ7hE,MAAM,KAAK,KAC9D3Z,OAAS,GAjJDm7E,EAAe19E,EAAA,YADnC+7B,GAAA,GACoB2hD,GAArB,GCFe,SAAAyB,GAA+B5pE,GAC1C,YAD0C,IAAAA,MAAA,IACnC,IAAIkoE,GACPloE,EACA0kC,KClBR,kBAOI,SAAAmlC,EACIC,GAEA,IAAKA,EACD,MAAM,IAAIx/E,MAAM,6BAIhB,IAAAiJ,EAAAu2E,EAAAv2E,cACAw2E,EAAAD,EAAAC,eACAC,EAAAF,EAAAE,OACAC,EAAAH,EAAAG,mBACAC,EAAAJ,EAAAI,iBAGJ,GAC8B,iBAAnBH,GACW,iBAAXC,GACuB,iBAAvBC,GACqB,iBAArBC,GACkB,iBAAlB32E,EAEP,MAAM,IAAI80B,GAAA,EAAqB,sCAGnCx/B,KAAKwT,eAAiB8tE,SAAS52E,EAAe,IAC9C1K,KAAKuhF,gBAAkBL,EACvBlhF,KAAKwhF,QAAUL,EACfnhF,KAAKyhF,oBAAsBL,EAC3BphF,KAAK0hF,kBAAoBL,EAyCjC,OAtCIL,EAAA9hF,UAAA62C,OAAA,SAAO5qC,GACH,GAAsB,iBAAXA,EACP,MAAM,IAAIq0B,GAAA,EAAqB,2BAGnC,IAAMmiD,EAAkB3hF,KAAK4hF,cAAcz2E,GAErC02E,EAAoB7hF,KAAK8hF,gBAAgBH,GAE/C,OAAOx2E,EAAS,EACZ,IAAI02E,EACJA,GAGAb,EAAA9hF,UAAA0iF,cAAR,SAAsBz2E,GAClB,IAAM42E,EAAiBtuE,KAAKuuE,IAAI72E,GAC1BvI,EAAA5C,KAAAiiF,SAAAF,EAAA/hF,KAAAwT,gBAAAsK,MAAA,KAAExS,EAAA1I,EAAA,GAAeC,EAAAD,EAAA,GAAAs/E,OAAA,IAAAr/E,EAAA,GAAAA,EACjBs/E,EAAsB72E,EAAciT,QAAQ,wBAAyBve,KAAKyhF,qBAEhF,OAAIzhF,KAAKwT,eAAiB,EACf2uE,EAGJ,CACHA,EACAD,GACFrmE,KAAK7b,KAAK0hF,oBAGRV,EAAA9hF,UAAA4iF,gBAAR,SAAwBH,GACpB,MAA+C,SAAvC3hF,KAAKuhF,gBAAgBnkC,cACzB,GAAGp9C,KAAKwhF,QAAUG,EAClB,GAAGA,EAAkB3hF,KAAKwhF,SAG1BR,EAAA9hF,UAAA+iF,SAAR,SAAiB1jF,EAAe6jF,GAC5B,SAAU3uE,KAAKC,QAAQnV,EAAQ,IAAM6jF,IAAc,KAAOA,IAAYttC,QAAQstC,IAEtFpB,EA7EA,GCKqBqB,GAArB,WAOI,SAAAC,EACYC,GAAAviF,KAAAuiF,eAERviF,KAAKwiF,mBAAqB,IAAIC,GAAkBziF,KAAKuiF,aAAavQ,iBAClEhyE,KAAK0iF,gBAAkB,IAAID,GAAkBziF,KAAKuiF,aAAaz/C,UAYvE,OATIw/C,EAAApjF,UAAAyjF,mBAAA,SAAmBx3E,GACf,IAAMy3E,EAAe5iF,KAAKuiF,aAAavQ,gBAAgB4Q,aAEvD,OAAO5iF,KAAKwiF,mBAAmBzsC,OAAO5qC,EAASy3E,IAGnDN,EAAApjF,UAAA2jF,gBAAA,SAAgB13E,GACZ,OAAOnL,KAAK0iF,gBAAgB3sC,OAAO5qC,IArBtBm3E,EAAe1gF,EAAA,YADnC+7B,GAAA,GACoB2kD,GAArB,GCiBe,SAAAQ,GACX3rE,GAEA,OAAO,IAAIkrE,GAAgBlrE,GC7B/Bja,EAAAU,EAAA4B,EAAA,kCAAAwoC,EAAA,gBAAA9qC,EAAAU,EAAA4B,EAAA,0CAAA87E,KAAAp+E,EAAAU,EAAA4B,EAAA,oDAAAujF,GAAA,IAAA7lF,EAAAU,EAAA4B,EAAA,kCAAAwjF,GAAA,IAAA9lF,EAAAU,EAAA4B,EAAA,oDAAA0/E,KAAAhiF,EAAAU,EAAA4B,EAAA,0CAAAuhF,KAAA7jF,EAAAU,EAAA4B,EAAA,0CAAAsjF,uCCmHYG,EAIAC,8GAJZ,SAAYD,GACRA,EAAA,YACAA,EAAA,cAFJ,CAAYA,MAAU,KAItB,SAAYC,GACRA,EAAA,kBACAA,EAAA,cACAA,EAAA,cAHJ,CAAYA,MAAW,KCzFvB,iBAKI,SAAAC,EACYvkD,EACAqB,EACAmjD,EACAC,EACAlvB,EACAmvB,EACAt8E,GANAhH,KAAA4+B,SACA5+B,KAAAigC,8BACAjgC,KAAAojF,yBACApjF,KAAAqjF,wBACArjF,KAAAm0D,+BACAn0D,KAAAsjF,2BACAtjF,KAAAgH,iBAqMhB,OAlMIm8E,EAAAjkF,UAAAiR,WAAA,SAAWjI,GAGP,OAFAlI,KAAK0kC,UAAYx8B,EAEVlI,KAAK8/D,oBAGhBqjB,EAAAjkF,UAAA4gC,aAAA,WACI,OAAO9/B,KAAKqjF,sBAAsB7xE,YAGtC2xE,EAAAjkF,UAAAgmC,aAAA,SACIwxB,EACA6sB,EACAC,GAEA,QAHA,IAAAD,MAAyBN,EAAWQ,YACpC,IAAAD,MAA2BN,EAAYQ,UAElC1jF,KAAK2jF,iBACN,MAAM,IAAIrhD,EAAA,EAAoBA,EAAA,EAAwB9xB,uBAG1D,OAAOxQ,KAAK2jF,iBAAiBz+C,aAAa,CACtCs+C,YAAWA,EACXD,WAAUA,EACV7sB,QAAOA,KAIfysB,EAAAjkF,UAAAomC,cAAA,WACI,IAAKtlC,KAAK2jF,iBACN,MAAM,IAAIrhD,EAAA,EAAoBA,EAAA,EAAwB9xB,uBAG1D,OAAOxQ,KAAK2jF,iBAAiBC,gBAAgB5jF,KAAK6jF,2BAGtDV,EAAAjkF,UAAAsmC,cAAA,SAAcD,GAAd,IAAAxlC,EAAAC,KACI,OAAOA,KAAKy+C,UAAUz+C,KAAKqjF,sBAAsB1vC,cAAcpO,IAC1D/9B,KAAK,WAAM,OAAAzH,EAAK+jF,sBAAsBv+C,MAG/C49C,EAAAjkF,UAAAumC,sBAAA,SAAsBjtB,GAClB,OAAOxY,KAAK4+B,OAAOgB,SACf5/B,KAAKsjF,yBAAyBnpE,cAAcna,KAAK+jF,sCAAsCvrE,MAIvF2qE,EAAAjkF,UAAA4gE,iBAAR,eAAA//D,EAAAC,KACUkI,EAAWlI,KAAK2kC,eAEtB,OAAO3kC,KAAK4+B,OAAOgB,SAAS5/B,KAAKigC,4BAA4Bh4B,kBAAkBC,IAC1EV,KAAK,SAAA2Q,GACF,IAAMwiB,EAAgBxiB,EAAMggB,eAAeE,iBAAiBnwB,GACtDsP,EAAWW,EAAMX,SAASC,cAC1B87B,IAAuBp7B,EAAMK,gBAAgByc,qBAEnD,IAAK0F,EACD,MAAM,IAAImG,EAAA,EAAiBA,EAAA,EAAqBngC,sBAGpD,IAAK6W,EACD,MAAM,IAAIspB,EAAA,EAAiBA,EAAA,EAAqBzgC,iBAG5C,IAAAkhC,EAAA5G,EAAAxjB,OAAAoqB,SAER,OAAO1wB,QAAQC,IAAI,CACf/Q,EAAKqjF,uBAAuBn9C,OAC5BlmC,EAAKsjF,sBAAsBlzE,WAAWqH,EAAUmjB,EAAe4Y,KAChE/rC,KAAK,SAAC5E,OAACohF,EAAAphF,EAAA,GAAWqhF,EAAArhF,EAAA,GAIjB,OAHA7C,EAAK4jF,iBAAmB5jF,EAAKmkF,oBAAoBF,EAAWziD,GAC5DxhC,EAAKokF,oBAAsBF,EAEpBlkF,EAAK4jF,iBAAiBS,aAAa,CACtC1uC,sBAAuB,CACnB,CACIz1C,KAAMgkF,EAAmBvuC,sBAAsB,GAAGz1C,KAClD01C,WAAY,CACRC,mBAAoBquC,EAAmBvuC,sBAAsB,GAAGC,WAAWC,mBAC3EC,oBAAqBouC,EAAmBvuC,sBAAsB,GAAGC,WAAWE,uBAIxFL,WAAYyuC,EAAmBzuC,WAC/BC,gBAAiBwuC,EAAmBxuC,kBACrCjuC,KAAK,SAAA7E,GACJ,IAAIA,EAASkE,OAIb,MAAM,IAAIi1B,EAAA,SAMtBqnD,EAAAjkF,UAAA4/C,oBAAR,SAA4BH,GACxB,MAAO,CACH1+C,KAAM0+C,EAAgB5K,SACtBqL,OAAQT,EAAgB3K,WAIxBmvC,EAAAjkF,UAAA2kF,uBAAR,WACI,IAAK7jF,KAAKmkF,oBACN,MAAM,IAAI3uB,EAAA,EAGd,OAAOx1D,KAAKmkF,qBAGRhB,EAAAjkF,UAAAglF,oBAAR,SAA4BG,EAAsB9iD,GAC9C,QAAiBn5B,IAAbm5B,EACA,MAAM,IAAIT,EAAA,EAAiBA,EAAA,EAAqBngC,sBAGpD,IAAM+jE,EAA+BnjC,EAAW,OAAS,aAEzD,OAAO,IAAI8iD,EAAOjqD,SAASkqD,IAAIC,eAAe,CAAE7f,YAAWA,KAGvDye,EAAAjkF,UAAAylC,aAAR,WACI,IAAK3kC,KAAK0kC,UACN,MAAM,IAAIpC,EAAA,EAAoBA,EAAA,EAAwB9xB,uBAG1D,OAAOxQ,KAAK0kC,WAGRy+C,EAAAjkF,UAAAslF,qCAAR,SAA6Cj/C,EAAgCt6B,GACzE,MAAO,CACHA,GAAEA,EACFonB,UAAWkT,EAAYqO,kBAAkBwH,KAAK17B,eAAe7hB,KAAKigB,MAAM,KAAKzQ,MAAM,GAAI,GAAGwO,KAAK,KAC/FyW,SAAUiT,EAAYqO,kBAAkBwH,KAAK17B,eAAe7hB,KAAKigB,MAAM,KAAKzQ,OAAO,GAAGwO,KAAK,KAC3F0W,QAASgT,EAAYqO,kBAAkBwH,KAAK17B,eAAe+kE,YAC3DjyD,SAAU+S,EAAYqO,kBAAkBwH,KAAK17B,eAAe8S,SAC5DC,SAAU8S,EAAYqO,kBAAkBwH,KAAK17B,eAAe+S,SAAW8S,EAAYqO,kBAAkBwH,KAAK17B,eAAeglE,SACzHhyD,KAAM6S,EAAYqO,kBAAkBwH,KAAK17B,eAAey/B,SACxDxsB,gBAAiB4S,EAAYqO,kBAAkBwH,KAAK17B,eAAeilE,mBACnEpnD,oBAAqBgI,EAAYqO,kBAAkBwH,KAAK17B,eAAeilE,mBACvE/xD,WAAY2S,EAAYqO,kBAAkBwH,KAAK17B,eAAekT,WAC9D7B,YAAawU,EAAYqO,kBAAkBwH,KAAK17B,eAAeqR,YAC/D8B,MAAO0S,EAAYqO,kBAAkBwH,KAAK17B,eAAes/B,YACzDlsB,aAAc,GACd+Q,MAAO0B,EAAY1B,QAInBs/C,EAAAjkF,UAAA6kF,sCAAR,SAA8C3pE,GAC1C,MAAO,CACHiY,UAAWjY,EAAQvc,KAAKigB,MAAM,KAAKzQ,MAAM,GAAI,GAAGwO,KAAK,KACrDyW,SAAUlY,EAAQvc,KAAKigB,MAAM,KAAKzQ,OAAO,GAAGwO,KAAK,KACjD0W,QAASnY,EAAQqqE,YACjBjyD,SAAUpY,EAAQoY,SAClBC,SAAUrY,EAAQqY,SAAWrY,EAAQsqE,SACrChyD,KAAMtY,EAAQ+kC,SACdxsB,gBAAiBvY,EAAQuqE,mBACzBpnD,oBAAqBnjB,EAAQuqE,mBAC7B/xD,WAAYxY,EAAQwY,WACpB7B,YAAa3W,EAAQ2W,YACrB8B,MAAOzY,EAAQ4kC,YACflsB,aAAc,KAIdqwD,EAAAjkF,UAAAu/C,UAAR,SAAkBmmC,GACd,IAAMjmC,EAAkBimC,EAAgBjhD,QAExC,OAAO3jC,KAAKgH,eAAetB,KAAK,gBAAiB,CAC7ClD,QAAS,CACLoG,OAAQ,YACRg9B,eAAgB,qCAEpBrjC,KAAM,CACF2gC,aAAc0hD,EAAgB3kF,KAC9B26B,MAAOgqD,EAAgBhqD,MACvBuI,SAAUnjC,KAAK2kC,eACftxB,OAAQ,wBACRwrC,iBAAkB7+C,KAAK8+C,oBAAoBH,OAK/CwkC,EAAAjkF,UAAA4kF,sBAAR,SAA8Bv+C,GAC1B,IAAMs/C,EAAuB7kF,KAAK4+B,OAAO1nB,WAAWwI,eAAe4U,oBAEnE,IAAKuwD,EACD,MAAM,IAAI/jD,EAAA,EAAiBA,EAAA,EAAqB5gC,uBAGpD,IAAM4kF,EAAyB9kF,KAAKwkF,qCAAqCj/C,EAAas/C,EAAqB55E,IAE3G,OAAOjL,KAAK4+B,OAAOgB,SACf5/B,KAAKm0D,6BAA6Bh6C,cAAc2qE,KAG5D3B,EAjNA,aCxBA,WACI,SAAA4B,EACYj2E,EACAC,QAAA,IAAAA,MAAAnJ,QADA5F,KAAA8O,gBACA9O,KAAA+O,UAchB,OAXIg2E,EAAA7lF,UAAA+mC,KAAA,eAAAlmC,EAAAC,KACI,OAAOA,KAAK8O,cACPG,WAAW,yCACXzH,KAAK,WACF,IAAKzH,EAAKgP,QAAQs1E,OACd,MAAM,IAAIx5C,EAAA,EAGd,OAAO9qC,EAAKgP,QAAQs1E,UAGpCU,EAjBA,GCOe,SAAAC,EAAyCvvE,EAAsBwvE,GAC1E,IAAMl9C,EAAgB/pC,OAAAgqC,EAAA,oBAAAhqC,GAChBsqC,EAAetqC,OAAAuqC,EAAA,gBAAAvqC,GAErB,OAAO,IAAIknF,EACPzvE,EACA,IAAIo0B,EAAA,EACA,IAAIC,EAAA,EAA2B/B,IAEnC,IAAIo9C,EAAsB78C,GAC1B28C,EACA,IAAIhZ,EAAA,EACA,IAAIC,EAAA,EAA4BnkC,IAEpC,IAAI+zC,EAAA,EACA,IAAIC,EAAA,EAAyBh0C,GAC7B,IAAIW,EAAA,EAAsBX,IAE9BA,GA/BR7qC,EAAAU,EAAA4B,EAAA,sBAAAwlF,oFCee,SAAAI,EAA2B5tE,GACtC,ICZ+C6tE,EACzCC,EDWA56E,EAAgB8M,EAASmB,KAAKmqB,SAASp4B,cACvCK,EAAoB,IAAIC,EAAA,EAAkBN,GAEhD,MAAO,CACHO,GAAIuM,EAASmB,KAAK1N,GAClBwmB,MAAOzzB,OAAAunF,EAAA,EAAAvnF,CAAuBwZ,EAASmB,KAAKF,UAAW/N,GACvDo4B,SAAUtrB,EAASmB,KAAKmqB,SAASxxB,KACjCsrB,OAAQ,CACJ0a,iBAAkBt5C,OAAA8O,EAAA,OAAA9O,CAAOwZ,EAASmB,KAAK+K,QAAS,SAAC00B,EAAKxb,GAClD,OAAOwb,EAAMxb,EAAO0a,kBACrB,GACH5zB,QAASlM,EAASmB,KAAK+K,QAAQ7Y,IAAI26E,EAAA,IAEvCn6E,SAAU,CACNF,OAAQqM,EAASmB,KAAKtG,eACtB/G,cAAeP,EAAkBQ,UAAUiM,EAASmB,KAAKtG,iBAE7DgmC,uBC7B2CgtC,ED6BO7tE,EAAS6tE,WC5BzDC,EAAwC,IAE7CD,GAAc,IAAIj7E,QAAQ,SAAAq7E,IACtBA,EAAUC,SAAW,IAAIt7E,QAAQ,SAAAu7E,GAC9BL,EAAcv7E,KAAK,CACf67E,aAAc,GACd9oD,aAAc,KACdz7B,QAAS,GACTwkF,YAAaF,EAAOxrC,WAKzBmrC,GDgBHjuC,gBAAiB,CACbiB,sBAAuBt6C,OAAA8O,EAAA,OAAA9O,CAAOwZ,EAAS4M,iBAAkB,SAACg0B,EAAK0tC,GAC3D,OAAO1tC,EAAM0tC,EAAYvuC,MAC1B,GACHgB,wBAAyBv6C,OAAA8O,EAAA,MAAA9O,CAAMwZ,EAAS4M,iBAAiBvZ,IAAIk7E,EAAA,GAA+B,SAEhG94D,SAAU,CACN9hB,OAAQqM,EAASqhC,kBACjBvtC,cAAeP,EAAkBQ,UAAUiM,EAASqhC,mBACpDC,qBAAsBthC,EAASuhC,2BAC/BC,4BAA6BjuC,EAAkBQ,UAAUiM,EAASuhC,4BAClEhnB,SAAU/zB,OAAA8O,EAAA,KAAA9O,CAAKwZ,EAASmB,KAAKF,UAAU0C,cAAe,SAAAO,GAAY,OAAAA,EAASsqE,sBAE/E9tC,SAAU,CACN/sC,OAAQqM,EAAS0gC,SACjB5sC,cAAeP,EAAkBQ,UAAUiM,EAAS0gC,WAExDte,YAAa,CACTzuB,OAAQqM,EAASoN,SAAWpN,EAASoN,SAASgV,YAAc,GAEhEqsD,YAAa,CACT96E,OAAQqM,EAAS2hC,SACjB7tC,cAAeP,EAAkBQ,UAAUiM,EAAS2hC,WAExDD,MAAO1hC,EAAS0hC,MAChBC,SAAU,CACNhuC,OAAQqM,EAAS2hC,SACjB7tC,cAAeP,EAAkBQ,UAAUiM,EAAS2hC,WAExDC,SAAU,CACNjuC,OAAQqM,EAAS6hC,kBACjB/tC,cAAeP,EAAkBQ,UAAUiM,EAAS6hC,oBAExD1f,WAAY,CACRxuB,OAAQqM,EAASmiB,WACjBruB,cAAeP,EAAkBQ,UAAUiM,EAASmiB,cArEhEz8B,EAAAU,EAAA4B,EAAA,sBAAA4lF","file":"checkout-sdk.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 145);\n","module.exports = require(\"@bigcommerce/data-store\");","module.exports = require(\"tslib\");","module.exports = require(\"lodash\");","module.exports = require(\"rxjs\");","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nimport { ConsignmentMeta } from './consignment';\n\nexport enum ConsignmentActionType {\n    CreateConsignmentsRequested = 'CREATE_CONSIGNMENTS_REQUESTED',\n    CreateConsignmentsSucceeded = 'CREATE_CONSIGNMENTS_SUCCEEDED',\n    CreateConsignmentsFailed = 'CREATE_CONSIGNMENTS_FAILED',\n\n    UpdateConsignmentRequested = 'UPDATE_CONSIGNMENT_REQUESTED',\n    UpdateConsignmentSucceeded = 'UPDATE_CONSIGNMENT_SUCCEEDED',\n    UpdateConsignmentFailed = 'UPDATE_CONSIGNMENT_FAILED',\n\n    DeleteConsignmentRequested = 'DELETE_CONSIGNMENT_REQUESTED',\n    DeleteConsignmentSucceeded = 'DELETE_CONSIGNMENT_SUCCEEDED',\n    DeleteConsignmentFailed = 'DELETE_CONSIGNMENT_FAILED',\n\n    UpdateShippingOptionRequested = 'UPDATE_SHIPPING_OPTION_REQUESTED',\n    UpdateShippingOptionSucceeded = 'UPDATE_SHIPPING_OPTION_SUCCEEDED',\n    UpdateShippingOptionFailed = 'UPDATE_SHIPPING_OPTION_FAILED',\n\n    LoadShippingOptionsRequested = 'LOAD_SHIPPING_OPTIONS_REQUESTED',\n    LoadShippingOptionsSucceeded = 'LOAD_SHIPPING_OPTIONS_SUCCEEDED',\n    LoadShippingOptionsFailed = 'LOAD_SHIPPING_OPTIONS_FAILED',\n}\n\nexport type ConsignmentAction =\n    CreateConsignmentsAction |\n    UpdateConsignmentAction |\n    DeleteConsignmentAction |\n    UpdateShippingOptionAction |\n    LoadShippingOptionsAction;\n\nexport type CreateConsignmentsAction =\n    CreateConsignmentsRequestedAction |\n    CreateConsignmentsSucceededAction |\n    CreateConsignmentsFailedAction;\n\nexport type UpdateConsignmentAction =\n    UpdateConsignmentRequestedAction |\n    UpdateConsignmentSucceededAction |\n    UpdateConsignmentFailedAction;\n\nexport type DeleteConsignmentAction =\n    DeleteConsignmentRequestedAction |\n    DeleteConsignmentSucceededAction |\n    DeleteConsignmentFailedAction;\n\nexport type UpdateShippingOptionAction =\n    UpdateShippingOptionRequestedAction |\n    UpdateShippingOptionSucceededAction |\n    UpdateShippingOptionFailedAction;\n\nexport type LoadShippingOptionsAction =\n    LoadShippingOptionsRequestedAction |\n    LoadShippingOptionsSucceededAction |\n    LoadShippingOptionsFailedAction;\n\nexport interface CreateConsignmentsRequestedAction extends Action {\n    type: ConsignmentActionType.CreateConsignmentsRequested;\n}\n\nexport interface CreateConsignmentsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.CreateConsignmentsSucceeded;\n}\n\nexport interface CreateConsignmentsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.CreateConsignmentsFailed;\n}\n\nexport interface UpdateConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentRequested;\n}\n\nexport interface UpdateConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentSucceeded;\n}\n\nexport interface UpdateConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentFailed;\n}\n\nexport interface DeleteConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentRequested;\n}\n\nexport interface DeleteConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentSucceeded;\n}\n\nexport interface DeleteConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentFailed;\n}\n\nexport interface UpdateShippingOptionRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionRequested;\n}\n\nexport interface UpdateShippingOptionSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionSucceeded;\n}\n\nexport interface UpdateShippingOptionFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionFailed;\n}\n\nexport interface LoadShippingOptionsRequestedAction extends Action {\n    type: ConsignmentActionType.LoadShippingOptionsRequested;\n}\n\nexport interface LoadShippingOptionsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.LoadShippingOptionsSucceeded;\n}\n\nexport interface LoadShippingOptionsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.LoadShippingOptionsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum CustomerStrategyActionType {\n    SignInFailed = 'CUSTOMER_STRATEGY_SIGN_IN_FAILED',\n    SignInRequested = 'CUSTOMER_STRATEGY_SIGN_IN_REQUESTED',\n    SignInSucceeded = 'CUSTOMER_STRATEGY_SIGN_IN_SUCCEEDED',\n    SignOutFailed = 'CUSTOMER_STRATEGY_SIGN_OUT_FAILED',\n    SignOutRequested = 'CUSTOMER_STRATEGY_SIGN_OUT_REQUESTED',\n    SignOutSucceeded = 'CUSTOMER_STRATEGY_SIGN_OUT_SUCCEEDED',\n    InitializeFailed = 'CUSTOMER_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'CUSTOMER_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'CUSTOMER_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'CUSTOMER_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'CUSTOMER_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'CUSTOMER_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type CustomerStrategyAction =\n    CustomerStrategySignInAction |\n    CustomerStrategySignOutAction |\n    CustomerStrategyInitializeAction |\n    CustomerStrategyDeinitializeAction |\n    CustomerStrategyWidgetAction;\n\nexport type CustomerStrategySignInAction =\n    SignInRequestedAction |\n    SignInSucceededAction |\n    SignInFailedAction;\n\nexport type CustomerStrategySignOutAction =\n    SignOutRequestedAction |\n    SignOutSucceededAction |\n    SignOutFailedAction;\n\nexport type CustomerStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type CustomerStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type CustomerStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface SignInRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignInRequested;\n}\n\nexport interface SignInSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignInSucceeded;\n}\n\nexport interface SignInFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignInFailed;\n}\n\nexport interface SignOutRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignOutRequested;\n}\n\nexport interface SignOutSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignOutSucceeded;\n}\n\nexport interface SignOutFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignOutFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderPaymentsAction } from '../order';\n\nexport enum PaymentStrategyActionType {\n    ExecuteFailed = 'PAYMENT_STRATEGY_EXECUTE_FAILED',\n    ExecuteRequested = 'PAYMENT_STRATEGY_EXECUTE_REQUESTED',\n    ExecuteSucceeded = 'PAYMENT_STRATEGY_EXECUTE_SUCCEEDED',\n    FinalizeFailed = 'PAYMENT_STRATEGY_FINALIZE_FAILED',\n    FinalizeRequested = 'PAYMENT_STRATEGY_FINALIZE_REQUESTED',\n    FinalizeSucceeded = 'PAYMENT_STRATEGY_FINALIZE_SUCCEEDED',\n    InitializeFailed = 'PAYMENT_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'PAYMENT_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'PAYMENT_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'PAYMENT_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'PAYMENT_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'PAYMENT_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type PaymentStrategyAction =\n    PaymentStrategyExecuteAction |\n    PaymentStrategyFinalizeAction |\n    PaymentStrategyInitializeAction |\n    PaymentStrategyDeinitializeAction |\n    PaymentStrategyWidgetAction;\n\nexport type PaymentStrategyExecuteAction =\n    ExecuteRequestedAction |\n    ExecuteSucceededAction |\n    ExecuteFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyFinalizeAction =\n    FinalizeRequestedAction |\n    FinalizeSucceededAction |\n    FinalizeFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type PaymentStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type PaymentStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface ExecuteRequestedAction extends Action {\n    type: PaymentStrategyActionType.ExecuteRequested;\n}\n\nexport interface ExecuteSucceededAction extends Action {\n    type: PaymentStrategyActionType.ExecuteSucceeded;\n}\n\nexport interface ExecuteFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.ExecuteFailed;\n}\n\nexport interface FinalizeRequestedAction extends Action {\n    type: PaymentStrategyActionType.FinalizeRequested;\n}\n\nexport interface FinalizeSucceededAction extends Action {\n    type: PaymentStrategyActionType.FinalizeSucceeded;\n}\n\nexport interface FinalizeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.FinalizeFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.WidgetInteractionFailed;\n}\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentMethod,\n    MissingShippingAddress,\n    MissingSpamProtectionToken,\n}\n\nexport default class MissingDataError extends StandardError {\n    constructor(\n        public subtype: MissingDataErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'MissingDataError';\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n    case MissingDataErrorType.MissingBillingAddress:\n        return 'Unable to proceed because billing address data is unavailable.';\n\n    case MissingDataErrorType.MissingCart:\n        return 'Unable to proceed because cart data is unavailable.';\n\n    case MissingDataErrorType.MissingConsignments:\n        return 'Unable to proceed because consignments data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckout:\n        return 'Unable to proceed because checkout data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckoutConfig:\n    case MissingDataErrorType.MissingOrderConfig:\n        return 'Unable to proceed because configuration data is unavailable.';\n\n    case MissingDataErrorType.MissingOrder:\n        return 'Unable to proceed because order data is unavailable.';\n\n    case MissingDataErrorType.MissingOrderId:\n        return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n    case MissingDataErrorType.MissingPayment:\n        return 'Unable to proceed because payment data is unavailable.';\n\n    case MissingDataErrorType.MissingPaymentMethod:\n        return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n    case MissingDataErrorType.MissingShippingAddress:\n        return 'Unable to proceed because shipping address data is unavailable.';\n\n    case MissingDataErrorType.MissingSpamProtectionToken:\n        return 'Unable to proceed because spam protection token is not provided.';\n\n    default:\n        return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ShippingStrategyActionType {\n    UpdateAddressFailed = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_FAILED',\n    UpdateAddressRequested = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_REQUESTED',\n    UpdateAddressSucceeded = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_SUCCEEDED',\n    SelectOptionFailed = 'SHIPPING_STRATEGY_SELECT_OPTION_FAILED',\n    SelectOptionRequested = 'SHIPPING_STRATEGY_SELECT_OPTION_REQUESTED',\n    SelectOptionSucceeded = 'SHIPPING_STRATEGY_SELECT_OPTION_SUCCEEDED',\n    InitializeFailed = 'SHIPPING_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'SHIPPING_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'SHIPPING_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'SHIPPING_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'SHIPPING_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'SHIPPING_STRATEGY_DEINITIALIZE_SUCCEEDED',\n}\n\nexport type ShippingStrategyAction =\n    ShippingStrategyUpdateAddressAction |\n    ShippingStrategySelectOptionAction |\n    ShippingStrategyInitializeAction |\n    ShippingStrategyDeinitializeAction;\n\nexport type ShippingStrategyUpdateAddressAction =\n    UpdateAddressRequestedAction |\n    UpdateAddressSucceededAction |\n    UpdateAddressFailedAction;\n\nexport type ShippingStrategySelectOptionAction =\n    SelectOptionRequestedAction |\n    SelectOptionSucceededAction |\n    SelectOptionFailedAction;\n\nexport type ShippingStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type ShippingStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport interface UpdateAddressRequestedAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressRequested;\n}\n\nexport interface UpdateAddressSucceededAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressSucceeded;\n}\n\nexport interface UpdateAddressFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.UpdateAddressFailed;\n}\n\nexport interface SelectOptionRequestedAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionRequested;\n}\n\nexport interface SelectOptionSucceededAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionSucceeded;\n}\n\nexport interface SelectOptionFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.SelectOptionFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.DeinitializeFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadConfigAction } from '../config/config-actions';\n\nimport Checkout from './checkout';\n\nexport enum CheckoutActionType {\n    LoadCheckoutRequested = 'LOAD_CHECKOUT_REQUESTED',\n    LoadCheckoutSucceeded = 'LOAD_CHECKOUT_SUCCEEDED',\n    LoadCheckoutFailed = 'LOAD_CHECKOUT_FAILED',\n\n    UpdateCheckoutRequested = 'UPDATE_CHECKOUT_REQUESTED',\n    UpdateCheckoutSucceeded = 'UPDATE_CHECKOUT_SUCCEEDED',\n    UpdateCheckoutFailed = 'UPDATE_CHECKOUT_FAILED',\n}\n\nexport type CheckoutAction = LoadCheckoutAction | UpdateCheckoutAction;\n\nexport type LoadCheckoutAction =\n    LoadCheckoutRequestedAction |\n    LoadCheckoutSucceededAction |\n    LoadCheckoutFailedAction |\n    LoadConfigAction;\n\nexport type UpdateCheckoutAction =\n    UpdateCheckoutRequestedAction |\n    UpdateCheckoutSucceededAction |\n    UpdateCheckoutFailedAction;\n\nexport interface LoadCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.LoadCheckoutRequested;\n}\n\nexport interface LoadCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.LoadCheckoutSucceeded;\n}\n\nexport interface LoadCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.LoadCheckoutFailed;\n}\n\nexport interface UpdateCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.UpdateCheckoutRequested;\n}\n\nexport interface UpdateCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.UpdateCheckoutSucceeded;\n}\n\nexport interface UpdateCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.UpdateCheckoutFailed;\n}\n","import { setPrototypeOf } from '../../utility';\n\nimport CustomError from './custom-error';\n\nexport default class StandardError extends Error implements CustomError {\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = (new Error(this.message)).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum CouponActionType {\n    ApplyCouponRequested = 'APPLY_COUPON_REQUESTED',\n    ApplyCouponSucceeded = 'APPLY_COUPON_SUCCEEDED',\n    ApplyCouponFailed = 'APPLY_COUPON_FAILED',\n\n    RemoveCouponRequested = 'REMOVE_COUPON_REQUESTED',\n    RemoveCouponSucceeded = 'REMOVE_COUPON_SUCCEEDED',\n    RemoveCouponFailed = 'REMOVE_COUPON_FAILED',\n}\n\nexport type CouponAction =\n    ApplyCouponAction |\n    RemoveCouponAction;\n\nexport type ApplyCouponAction =\n    ApplyCouponRequestedAction |\n    ApplyCouponSucceededAction |\n    ApplyCouponFailedAction;\n\nexport type RemoveCouponAction =\n    RemoveCouponRequestedAction |\n    RemoveCouponSucceededAction |\n    RemoveCouponFailedAction;\n\nexport interface ApplyCouponRequestedAction extends Action {\n    type: CouponActionType.ApplyCouponRequested;\n}\n\nexport interface ApplyCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.ApplyCouponSucceeded;\n}\n\nexport interface ApplyCouponFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: CouponActionType.ApplyCouponFailed;\n}\n\nexport interface RemoveCouponRequestedAction extends Action {\n    type: CouponActionType.RemoveCouponRequested;\n}\n\nexport interface RemoveCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.RemoveCouponSucceeded;\n}\n\nexport interface RemoveCouponFailedAction extends Action<RequestError> {\n    type: CouponActionType.RemoveCouponFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum BillingAddressActionType {\n    UpdateBillingAddressRequested = 'UPDATE_BILLING_ADDRESS_REQUESTED',\n    UpdateBillingAddressSucceeded = 'UPDATE_BILLING_ADDRESS_SUCCEEDED',\n    UpdateBillingAddressFailed = 'UPDATE_BILLING_ADDRESS_FAILED',\n\n    ContinueAsGuestRequested = 'CONTINUE_AS_GUEST_REQUESTED',\n    ContinueAsGuestSucceeded = 'CONTINUE_AS_GUEST_SUCCEEDED',\n    ContinueAsGuestFailed = 'CONTINUE_AS_GUEST_FAILED',\n}\n\nexport type BillingAddressAction =\n    ContinueAsGuestAction |\n    UpdateBillingAddressAction;\n\nexport type UpdateBillingAddressAction =\n    UpdateBillingAddressRequested |\n    UpdateBillingAddressSucceeded |\n    UpdateBillingAddressFailed;\n\nexport type ContinueAsGuestAction =\n    ContinueAsGuestRequested |\n    ContinueAsGuestSucceeded |\n    ContinueAsGuestFailed;\n\nexport interface UpdateBillingAddressRequested extends Action {\n    type: BillingAddressActionType.UpdateBillingAddressRequested;\n}\n\nexport interface UpdateBillingAddressSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.UpdateBillingAddressSucceeded;\n}\n\nexport interface UpdateBillingAddressFailed extends Action<Error> {\n    type: BillingAddressActionType.UpdateBillingAddressFailed;\n}\n\nexport interface ContinueAsGuestRequested extends Action {\n    type: BillingAddressActionType.ContinueAsGuestRequested;\n}\n\nexport interface ContinueAsGuestSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.ContinueAsGuestSucceeded;\n}\n\nexport interface ContinueAsGuestFailed extends Action<Error> {\n    type: BillingAddressActionType.ContinueAsGuestFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { InternalOrderResponseData } from './internal-order-responses';\nimport Order from './order';\n\nexport enum OrderActionType {\n    LoadOrderRequested = 'LOAD_ORDER_REQUESTED',\n    LoadOrderSucceeded = 'LOAD_ORDER_SUCCEEDED',\n    LoadOrderFailed = 'LOAD_ORDER_FAILED',\n\n    LoadOrderPaymentsRequested = 'LOAD_ORDER_PAYMENTS_REQUESTED',\n    LoadOrderPaymentsSucceeded = 'LOAD_ORDER_PAYMENTS_SUCCEEDED',\n    LoadOrderPaymentsFailed = 'LOAD_ORDER_PAYMENTS_FAILED',\n\n    SubmitOrderRequested = 'SUBMIT_ORDER_REQUESTED',\n    SubmitOrderSucceeded = 'SUBMIT_ORDER_SUCCEEDED',\n    SubmitOrderFailed = 'SUBMIT_ORDER_FAILED',\n\n    FinalizeOrderRequested = 'FINALIZE_ORDER_REQUESTED',\n    FinalizeOrderSucceeded = 'FINALIZE_ORDER_SUCCEEDED',\n    FinalizeOrderFailed = 'FINALIZE_ORDER_FAILED',\n}\n\nexport type OrderAction = LoadOrderAction |\n    LoadOrderPaymentsAction |\n    SubmitOrderAction |\n    FinalizeOrderAction;\n\nexport type LoadOrderPaymentsAction = LoadOrderPaymentsRequestedAction |\n    LoadOrderPaymentsSucceededAction |\n    LoadOrderPaymentsFailedAction;\n\nexport type LoadOrderAction =\n    LoadOrderRequestedAction |\n    LoadOrderSucceededAction |\n    LoadOrderFailedAction;\n\nexport type SubmitOrderAction =\n    SubmitOrderRequestedAction |\n    SubmitOrderSucceededAction |\n    SubmitOrderFailedAction |\n    LoadOrderAction;\n\nexport type FinalizeOrderAction =\n    FinalizeOrderRequestedAction |\n    FinalizeOrderSucceededAction |\n    FinalizeOrderFailedAction |\n    LoadOrderAction;\n\nexport interface LoadOrderRequestedAction extends Action {\n    type: OrderActionType.LoadOrderRequested;\n}\n\nexport interface LoadOrderSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderSucceeded;\n}\n\nexport interface LoadOrderFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderFailed;\n}\n\nexport interface LoadOrderPaymentsRequestedAction extends Action {\n    type: OrderActionType.LoadOrderPaymentsRequested;\n}\n\nexport interface LoadOrderPaymentsSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderPaymentsSucceeded;\n}\n\nexport interface LoadOrderPaymentsFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderPaymentsFailed;\n}\n\nexport interface SubmitOrderRequestedAction extends Action {\n    type: OrderActionType.SubmitOrderRequested;\n}\n\nexport interface SubmitOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.SubmitOrderSucceeded;\n}\n\nexport interface SubmitOrderFailedAction extends Action<Error> {\n    type: OrderActionType.SubmitOrderFailed;\n}\n\nexport interface FinalizeOrderRequestedAction extends Action {\n    type: OrderActionType.FinalizeOrderRequested;\n}\n\nexport interface FinalizeOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.FinalizeOrderSucceeded;\n}\n\nexport interface FinalizeOrderFailedAction extends Action<Error> {\n    type: OrderActionType.FinalizeOrderFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport enum PaymentMethodActionType {\n    LoadPaymentMethodRequested = 'LOAD_PAYMENT_METHOD_REQUESTED',\n    LoadPaymentMethodSucceeded = 'LOAD_PAYMENT_METHOD_SUCCEEDED',\n    LoadPaymentMethodFailed = 'LOAD_PAYMENT_METHOD_FAILED',\n\n    LoadPaymentMethodsRequested = 'LOAD_PAYMENT_METHODS_REQUESTED',\n    LoadPaymentMethodsSucceeded = 'LOAD_PAYMENT_METHODS_SUCCEEDED',\n    LoadPaymentMethodsFailed = 'LOAD_PAYMENT_METHODS_FAILED',\n}\n\nexport type PaymentMethodAction = LoadPaymentMethodAction | LoadPaymentMethodsAction;\n\nexport type LoadPaymentMethodAction =\n    LoadPaymentMethodRequestedAction |\n    LoadPaymentMethodSucceededAction |\n    LoadPaymentMethodFailedAction;\n\nexport type LoadPaymentMethodsAction =\n    LoadPaymentMethodsRequestedAction |\n    LoadPaymentMethodsSucceededAction |\n    LoadPaymentMethodsFailedAction;\n\nexport interface LoadPaymentMethodRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodRequested;\n}\n\nexport interface LoadPaymentMethodSucceededAction extends Action<PaymentMethod> {\n    type: PaymentMethodActionType.LoadPaymentMethodSucceeded;\n}\n\nexport interface LoadPaymentMethodFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodFailed;\n}\n\nexport interface LoadPaymentMethodsRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodsRequested;\n}\n\nexport interface LoadPaymentMethodsSucceededAction extends Action<PaymentMethod[], PaymentMethodMeta> {\n    type: PaymentMethodActionType.LoadPaymentMethodsSucceeded;\n}\n\nexport interface LoadPaymentMethodsFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadPaymentMethodAction } from '../payment';\n\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport enum CheckoutButtonActionType {\n    InitializeButtonFailed = 'INITIALIZE_BUTTON_FAILED',\n    InitializeButtonRequested = 'INITIALIZE_BUTTON_REQUESTED',\n    InitializeButtonSucceeded = 'INITIALIZE_BUTTON_SUCCEEDED',\n\n    DeinitializeButtonFailed = 'DEINITIALIZE_BUTTON_FAILED',\n    DeinitializeButtonRequested = 'DEINITIALIZE_BUTTON_REQUESTED',\n    DeinitializeButtonSucceeded = 'DEINITIALIZE_BUTTON_SUCCEEDED',\n}\n\nexport type CheckoutButtonAction = InitializeButtonAction | DeinitializeButtonAction;\n\nexport type InitializeButtonAction =\n    InitializeButtonRequestedAction |\n    InitializeButtonSucceededAction |\n    InitializeButtonFailedAction |\n    LoadPaymentMethodAction;\n\nexport type DeinitializeButtonAction =\n    DeinitializeButtonRequestedAction |\n    DeinitializeButtonSucceededAction |\n    DeinitializeButtonFailedAction;\n\nexport interface CheckoutButtonActionMeta {\n    methodId: CheckoutButtonMethodType;\n}\n\nexport interface InitializeButtonActionMeta extends CheckoutButtonActionMeta {\n    containerId: string;\n}\n\nexport interface InitializeButtonRequestedAction extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonRequested;\n}\n\nexport interface InitializeButtonSucceededAction extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonSucceeded;\n}\n\nexport interface InitializeButtonFailedAction extends Action<Error, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonFailed;\n}\n\nexport interface DeinitializeButtonRequestedAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonRequested;\n}\n\nexport interface DeinitializeButtonSucceededAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonSucceeded;\n}\n\nexport interface DeinitializeButtonFailedAction extends Action<Error, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonFailed;\n}\n","module.exports = require(\"rxjs/operators\");","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum GiftCertificateActionType {\n    ApplyGiftCertificateRequested = 'APPLY_GIFT_CERTIFICATE_REQUESTED',\n    ApplyGiftCertificateSucceeded = 'APPLY_GIFT_CERTIFICATE_SUCCEEDED',\n    ApplyGiftCertificateFailed = 'APPLY_GIFT_CERTIFICATE_FAILED',\n\n    RemoveGiftCertificateRequested = 'REMOVE_GIFT_CERTIFICATE_REQUESTED',\n    RemoveGiftCertificateSucceeded = 'REMOVE_GIFT_CERTIFICATE_SUCCEEDED',\n    RemoveGiftCertificateFailed = 'REMOVE_GIFT_CERTIFICATE_FAILED',\n}\n\nexport type GiftCertificateAction =\n    ApplyGiftCertificateAction |\n    RemoveGiftCertificateAction;\n\nexport type ApplyGiftCertificateAction =\n    ApplyGiftCertificateRequestedAction |\n    ApplyGiftCertificateSucceededAction |\n    ApplyGiftCertificateFailedAction;\n\nexport type RemoveGiftCertificateAction =\n    RemoveGiftCertificateRequestedAction |\n    RemoveGiftCertificateSucceededAction |\n    RemoveGiftCertificateFailedAction;\n\nexport interface ApplyGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.ApplyGiftCertificateRequested;\n}\n\nexport interface ApplyGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.ApplyGiftCertificateSucceeded;\n}\n\nexport interface ApplyGiftCertificateFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.ApplyGiftCertificateFailed;\n}\n\nexport interface RemoveGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.RemoveGiftCertificateRequested;\n}\n\nexport interface RemoveGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.RemoveGiftCertificateSucceeded;\n}\n\nexport interface RemoveGiftCertificateFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.RemoveGiftCertificateFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { VaultAccessToken } from './instrument';\nimport { InstrumentsResponseBody } from './instrument-response-body';\n\nexport enum InstrumentActionType {\n    LoadInstrumentsRequested = 'LOAD_INSTRUMENTS_REQUESTED',\n    LoadInstrumentsSucceeded = 'LOAD_INSTRUMENTS_SUCCEEDED',\n    LoadInstrumentsFailed = 'LOAD_INSTRUMENTS_FAILED',\n\n    DeleteInstrumentRequested = 'DELETE_INSTRUMENT_REQUESTED',\n    DeleteInstrumentSucceeded = 'DELETE_INSTRUMENT_SUCCEEDED',\n    DeleteInstrumentFailed = 'DELETE_INSTRUMENT_FAILED',\n}\n\nexport type InstrumentAction =\n    LoadInstrumentsAction |\n    DeleteInstrumentAction;\n\nexport type LoadInstrumentsAction =\n    LoadInstrumentsRequestedAction |\n    LoadInstrumentsSucceededAction |\n    LoadInstrumentsFailedAction;\n\nexport type DeleteInstrumentAction =\n    DeleteInstrumentRequestedAction |\n    DeleteInstrumentSucceededAction |\n    DeleteInstrumentFailedAction;\n\nexport interface LoadInstrumentsRequestedAction extends Action {\n    type: InstrumentActionType.LoadInstrumentsRequested;\n}\n\nexport interface LoadInstrumentsSucceededAction extends Action<InstrumentsResponseBody, VaultAccessToken> {\n    type: InstrumentActionType.LoadInstrumentsSucceeded;\n}\n\nexport interface LoadInstrumentsFailedAction extends Action<Error> {\n    type: InstrumentActionType.LoadInstrumentsFailed;\n}\n\nexport interface DeleteInstrumentRequestedAction extends Action {\n    type: InstrumentActionType.DeleteInstrumentRequested;\n}\n\nexport interface DeleteInstrumentSucceededAction extends Action<InstrumentsResponseBody, VaultAccessToken & { instrumentId: string }> {\n    type: InstrumentActionType.DeleteInstrumentSucceeded;\n}\n\nexport interface DeleteInstrumentFailedAction extends Action<Error> {\n    type: InstrumentActionType.DeleteInstrumentFailed;\n}\n","import EmbeddedCheckoutError from './embedded-checkout-error';\nimport EmbeddedContentOptions from './iframe-content/embedded-content-options';\n\nexport enum EmbeddedCheckoutEventType {\n    CheckoutComplete = 'CHECKOUT_COMPLETE',\n    CheckoutError = 'CHECKOUT_ERROR',\n    CheckoutLoaded = 'CHECKOUT_LOADED',\n    FrameError = 'FRAME_ERROR',\n    FrameLoaded = 'FRAME_LOADED',\n    SignedOut = 'SIGNED_OUT',\n}\n\nexport interface EmbeddedCheckoutEventMap {\n    [EmbeddedCheckoutEventType.CheckoutComplete]: EmbeddedCheckoutCompleteEvent;\n    [EmbeddedCheckoutEventType.CheckoutError]: EmbeddedCheckoutErrorEvent;\n    [EmbeddedCheckoutEventType.CheckoutLoaded]: EmbeddedCheckoutLoadedEvent;\n    [EmbeddedCheckoutEventType.FrameError]: EmbeddedCheckoutFrameErrorEvent;\n    [EmbeddedCheckoutEventType.FrameLoaded]: EmbeddedCheckoutFrameLoadedEvent;\n    [EmbeddedCheckoutEventType.SignedOut]: EmbeddedCheckoutSignedOutEvent;\n}\n\nexport type EmbeddedCheckoutEvent = (\n    EmbeddedCheckoutCompleteEvent |\n    EmbeddedCheckoutErrorEvent |\n    EmbeddedCheckoutFrameErrorEvent |\n    EmbeddedCheckoutFrameLoadedEvent |\n    EmbeddedCheckoutLoadedEvent |\n    EmbeddedCheckoutSignedOutEvent\n);\n\nexport interface EmbeddedCheckoutCompleteEvent {\n    type: EmbeddedCheckoutEventType.CheckoutComplete;\n}\n\nexport interface EmbeddedCheckoutErrorEvent {\n    type: EmbeddedCheckoutEventType.CheckoutError;\n    payload: EmbeddedCheckoutError;\n}\n\nexport interface EmbeddedCheckoutLoadedEvent {\n    type: EmbeddedCheckoutEventType.CheckoutLoaded;\n}\n\nexport interface EmbeddedCheckoutFrameErrorEvent {\n    type: EmbeddedCheckoutEventType.FrameError;\n    payload: EmbeddedCheckoutError;\n}\n\nexport interface EmbeddedCheckoutFrameLoadedEvent {\n    type: EmbeddedCheckoutEventType.FrameLoaded;\n    payload?: EmbeddedContentOptions;\n}\n\nexport interface EmbeddedCheckoutSignedOutEvent {\n    type: EmbeddedCheckoutEventType.SignedOut;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { AmazonPayRemoteCheckout } from './methods';\n\nexport enum RemoteCheckoutActionType {\n    InitializeRemoteBillingRequested = 'INITIALIZE_REMOTE_BILLING_REQUESTED',\n    InitializeRemoteBillingSucceeded = 'INITIALIZE_REMOTE_BILLING_SUCCEEDED',\n    InitializeRemoteBillingFailed = 'INITIALIZE_REMOTE_BILLING_FAILED',\n\n    InitializeRemoteShippingRequested = 'INITIALIZE_REMOTE_SHIPPING_REQUESTED',\n    InitializeRemoteShippingSucceeded = 'INITIALIZE_REMOTE_SHIPPING_SUCCEEDED',\n    InitializeRemoteShippingFailed = 'INITIALIZE_REMOTE_SHIPPING_FAILED',\n\n    InitializeRemotePaymentRequested = 'INITIALIZE_REMOTE_PAYMENT_REQUESTED',\n    InitializeRemotePaymentSucceeded = 'INITIALIZE_REMOTE_PAYMENT_SUCCEEDED',\n    InitializeRemotePaymentFailed = 'INITIALIZE_REMOTE_PAYMENT_FAILED',\n\n    LoadRemoteSettingsRequested = 'LOAD_REMOTE_SETTINGS_REQUESTED',\n    LoadRemoteSettingsSucceeded = 'LOAD_REMOTE_SETTINGS_SUCCEEDED',\n    LoadRemoteSettingsFailed = 'LOAD_REMOTE_SETTINGS_FAILED',\n\n    SignOutRemoteCustomerRequested = 'SIGN_OUT_REMOTE_CUSTOMER_REQUESTED',\n    SignOutRemoteCustomerSucceeded = 'SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED',\n    SignOutRemoteCustomerFailed = 'SIGN_OUT_REMOTE_CUSTOMER_FAILED',\n\n    UpdateRemoteCheckout = 'UPDATE_REMOTE_CHECKOUT',\n}\n\nexport type RemoteCheckoutAction = InitializeRemoteBillingAction |\n    InitializeRemoteShippingAction |\n    InitializeRemotePaymentAction |\n    SignOutRemoteCustomerAction |\n    LoadRemoteSettingsAction |\n    UpdateRemoteCheckoutAction;\n\nexport type InitializeRemoteBillingAction = InitializeRemoteBillingSucceededAction |\n    InitializeRemoteBillingFailedAction |\n    InitializeRemoteBillingRequestedAction;\n\nexport interface InitializeRemoteBillingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingSucceeded;\n}\n\nexport interface InitializeRemoteBillingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingFailed;\n}\n\nexport interface InitializeRemoteBillingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingRequested;\n}\n\nexport type InitializeRemoteShippingAction = InitializeRemoteShippingSucceededAction |\n    InitializeRemoteShippingFailedAction |\n    InitializeRemoteShippingRequestedAction;\n\nexport interface InitializeRemoteShippingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingSucceeded;\n}\n\nexport interface InitializeRemoteShippingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingFailed;\n}\n\nexport interface InitializeRemoteShippingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingRequested;\n}\n\nexport type InitializeRemotePaymentAction = InitializeRemotePaymentSucceededAction |\n    InitializeRemotePaymentFailedAction |\n    InitializeRemotePaymentRequestedAction;\n\nexport interface InitializeRemotePaymentSucceededAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentSucceeded;\n}\n\nexport interface InitializeRemotePaymentFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentFailed;\n}\n\nexport interface InitializeRemotePaymentRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentRequested;\n}\n\nexport type SignOutRemoteCustomerAction = SignOutRemoteCustomerSucceededAction |\n    SignOutRemoteCustomerFailedAction |\n    SignOutRemoteCustomerRequestedAction;\n\nexport interface SignOutRemoteCustomerSucceededAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded;\n}\n\nexport interface SignOutRemoteCustomerFailedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerFailed;\n}\n\nexport interface SignOutRemoteCustomerRequestedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerRequested;\n}\n\nexport type LoadRemoteSettingsAction = LoadRemoteSettingsSucceededAction |\n    LoadRemoteSettingsRequestedAction |\n    LoadRemoteSettingsFailedAction;\n\nexport interface LoadRemoteSettingsSucceededAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsSucceeded;\n}\n\nexport interface LoadRemoteSettingsRequestedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsRequested;\n}\n\nexport interface LoadRemoteSettingsFailedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsFailed;\n}\n\nexport interface UpdateRemoteCheckoutAction extends Action {\n    type: RemoteCheckoutActionType.UpdateRemoteCheckout;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n};\n\nexport default class RequestError<TBody = any> extends StandardError {\n    body: TBody | {};\n    headers: { [key: string]: any };\n    errors: Array<{ code: string; message?: string }>;\n    status: number;\n\n    constructor(\n        response?: Response<TBody | {}>,\n        { message, errors }: {\n            message?: string;\n            errors?: Array<{ code: string; message?: string }>;\n        } = {}\n    ) {\n        const { body, headers, status } = response || DEFAULT_RESPONSE;\n\n        super(message || 'An unexpected error has occurred.');\n\n        this.name = 'RequestError';\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.errors = errors || [];\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport Config from './config';\n\nexport enum ConfigActionType {\n    LoadConfigRequested = 'LOAD_CONFIG_REQUESTED',\n    LoadConfigSucceeded = 'LOAD_CONFIG_SUCCEEDED',\n    LoadConfigFailed = 'LOAD_CONFIG_FAILED',\n}\n\nexport type LoadConfigAction =\n    LoadConfigRequestedAction |\n    LoadConfigSucceededAction |\n    LoadConfigFailedAction;\n\nexport interface LoadConfigRequestedAction extends Action {\n    type: ConfigActionType.LoadConfigRequested;\n}\n\nexport interface LoadConfigSucceededAction extends Action<Config> {\n    type: ConfigActionType.LoadConfigSucceeded;\n}\n\nexport interface LoadConfigFailedAction extends Action<Error> {\n    type: ConfigActionType.LoadConfigFailed;\n}\n","import { isPlainObject as lodashIsPlainObject } from 'lodash';\n\n// We need this wrapper because Lodash's version doesn't act as a type guard\nexport default function isPlainObject(value: any): value is object {\n    return lodashIsPlainObject(value);\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport Country from './country';\n\nexport enum CountryActionType {\n    LoadCountriesRequested = 'LOAD_COUNTRIES_REQUESTED',\n    LoadCountriesSucceeded = 'LOAD_COUNTRIES_SUCCEEDED',\n    LoadCountriesFailed = 'LOAD_COUNTRIES_FAILED',\n}\n\nexport type LoadCountriesAction =\n    LoadCountriesRequestedAction |\n    LoadCountriesSucceededAction |\n    LoadCountriesFailedAction;\n\nexport interface LoadCountriesRequestedAction extends Action {\n    type: CountryActionType.LoadCountriesRequested;\n}\n\nexport interface LoadCountriesSucceededAction extends Action<Country[]> {\n    type: CountryActionType.LoadCountriesSucceeded;\n}\n\nexport interface LoadCountriesFailedAction extends Action<Error> {\n    type: CountryActionType.LoadCountriesFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Country } from '../geography';\n\nexport enum ShippingCountryActionType {\n    LoadShippingCountriesRequested = 'LOAD_SHIPPING_COUNTRIES_REQUESTED',\n    LoadShippingCountriesSucceeded = 'LOAD_SHIPPING_COUNTRIES_SUCCEEDED',\n    LoadShippingCountriesFailed = 'LOAD_SHIPPING_COUNTRIES_FAILED',\n}\n\nexport type LoadShippingCountriesAction = LoadShippingCountriesRequestedAction |\n    LoadShippingCountriesSucceededAction |\n    LoadShippingCountriesFailedAction;\n\nexport interface LoadShippingCountriesRequestedAction extends Action {\n    type: ShippingCountryActionType.LoadShippingCountriesRequested;\n}\n\nexport interface LoadShippingCountriesSucceededAction extends Action<Country[]> {\n    type: ShippingCountryActionType.LoadShippingCountriesSucceeded;\n}\n\nexport interface LoadShippingCountriesFailedAction extends Action<Error> {\n    type: ShippingCountryActionType.LoadShippingCountriesFailed;\n}\n","module.exports = require(\"@bigcommerce/request-sender\");","export const ACKNOWLEDGE = 'ACKNOWLEDGE';\nexport const FINALIZE = 'FINALIZE';\nexport const INITIALIZE = 'INITIALIZE';\n","module.exports = require(\"@bigcommerce/script-loader\");","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","module.exports = require(\"shallowequal\");","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderAction } from '../order';\n\nimport PaymentResponseBody from './payment-response-body';\n\nexport enum PaymentActionType {\n    SubmitPaymentRequested = 'SUBMIT_PAYMENT_REQUESTED',\n    SubmitPaymentSucceeded = 'SUBMIT_PAYMENT_SUCCEEDED',\n    SubmitPaymentFailed = 'SUBMIT_PAYMENT_FAILED',\n\n    InitializeOffsitePaymentRequested = 'INITIALIZE_OFFSITE_PAYMENT_REQUESTED',\n    InitializeOffsitePaymentSucceeded = 'INITIALIZE_OFFSITE_PAYMENT_SUCCEEDED',\n    InitializeOffsitePaymentFailed = 'INITIALIZE_OFFSITE_PAYMENT_FAILED',\n}\n\nexport type PaymentAction = SubmitPaymentAction |\n    InitializeOffsitePaymentAction;\n\nexport type SubmitPaymentAction =\n    SubmitPaymentRequestedAction |\n    SubmitPaymentSucceededAction |\n    SubmitPaymentFailedAction |\n    LoadOrderAction;\n\nexport type InitializeOffsitePaymentAction =\n    InitializeOffsitePaymentRequestedAction |\n    InitializeOffsitePaymentSucceededAction |\n    InitializeOffsitePaymentFailedAction;\n\nexport interface SubmitPaymentRequestedAction extends Action {\n    type: PaymentActionType.SubmitPaymentRequested;\n}\n\nexport interface SubmitPaymentSucceededAction extends Action<PaymentResponseBody> {\n    type: PaymentActionType.SubmitPaymentSucceeded;\n}\n\nexport interface SubmitPaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.SubmitPaymentFailed;\n}\n\nexport interface InitializeOffsitePaymentRequestedAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentRequested;\n}\n\nexport interface InitializeOffsitePaymentSucceededAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentSucceeded;\n}\n\nexport interface InitializeOffsitePaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.InitializeOffsitePaymentFailed;\n}\n","import StandardError from './standard-error';\n\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","export const HOSTED = 'PAYMENT_TYPE_HOSTED';\nexport const OFFLINE = 'PAYMENT_TYPE_OFFLINE';\n","import IframeEvent from './iframe-event';\n\nexport default function isIframeEvent<TEvent extends IframeEvent<TType>, TType extends string>(\n    object: any,\n    type: TType\n): object is TEvent {\n    return object.type === type;\n}\n","export interface CompareOptions {\n    keyFilter?(key: string): boolean;\n}\n\nexport default function isEqual(objectA: any, objectB: any, options?: CompareOptions): boolean {\n    if (objectA === objectB) {\n        return true;\n    }\n\n    if (objectA && objectB && typeof objectA === 'object' && typeof objectB === 'object') {\n        if (Array.isArray(objectA) && Array.isArray(objectB)) {\n            return isArrayEqual(objectA, objectB, options);\n        }\n\n        if (Array.isArray(objectA) || Array.isArray(objectB)) {\n            return false;\n        }\n\n        if ((objectA instanceof Date) && (objectB instanceof Date)) {\n            return isDateEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof Date) || (objectB instanceof Date)) {\n            return false;\n        }\n\n        if ((objectA instanceof RegExp) && (objectB instanceof RegExp)) {\n            return isRegExpEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof RegExp) || (objectB instanceof RegExp)) {\n            return false;\n        }\n\n        return isObjectEqual(objectA, objectB, options);\n    }\n\n    return objectA === objectB;\n}\n\nfunction isRegExpEqual(objectA: RegExp, objectB: RegExp): boolean {\n    return objectA.toString() === objectB.toString();\n}\n\nfunction isDateEqual(objectA: Date, objectB: Date): boolean {\n    return objectA.getTime() === objectB.getTime();\n}\n\nfunction isArrayEqual(objectA: any[], objectB: any[], options?: CompareOptions): boolean {\n    if (objectA.length !== objectB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = objectA.length; index < length; index++) {\n        if (!isEqual(objectA[index], objectB[index], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction isObjectEqual(\n    objectA: { [key: string]: any },\n    objectB: { [key: string]: any },\n    options?: CompareOptions\n): boolean {\n    const filter = options && options.keyFilter;\n    const keysA = filter ? Object.keys(objectA).filter(filter) : Object.keys(objectA);\n    const keysB = filter ? Object.keys(objectB).filter(filter) : Object.keys(objectB);\n\n    if (keysA.length !== keysB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = keysA.length; index < length; index++) {\n        const key = keysA[index];\n\n        if (!objectB.hasOwnProperty(key)) {\n            return false;\n        }\n\n        if (!isEqual(objectA[key], objectB[key], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n","module.exports = require(\"@bigcommerce/form-poster\");","module.exports = require(\"local-storage-fallback\");","module.exports = require(\"reselect\");","import { parseUrl } from '../common/url';\n\nexport default class IframeEventPoster<TEvent> {\n    private _targetOrigin: string;\n\n    constructor(\n        targetOrigin: string,\n        private _targetWindow?: Window\n    ) {\n        this._targetOrigin = targetOrigin === '*' ? '*' : parseUrl(targetOrigin).origin;\n    }\n\n    post(event: TEvent): void {\n        if (window === this._targetWindow) {\n            return;\n        }\n\n        if (!this._targetWindow) {\n            throw new Error('Unable to post message becauset target window is not set.');\n        }\n\n        this._targetWindow.postMessage(event, this._targetOrigin);\n    }\n\n    setTarget(window: Window) {\n        this._targetWindow = window;\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadCheckoutAction } from '../checkout';\n\nimport { InternalCustomerResponseData } from './internal-customer-responses';\n\nexport enum CustomerActionType {\n    SignInCustomerRequested = 'SIGN_IN_CUSTOMER_REQUESTED',\n    SignInCustomerSucceeded = 'SIGN_IN_CUSTOMER_SUCCEEDED',\n    SignInCustomerFailed = 'SIGN_IN_CUSTOMER_FAILED',\n\n    SignOutCustomerRequested = 'SIGN_OUT_CUSTOMER_REQUESTED',\n    SignOutCustomerSucceeded = 'SIGN_OUT_CUSTOMER_SUCCEEDED',\n    SignOutCustomerFailed = 'SIGN_OUT_CUSTOMER_FAILED',\n}\n\nexport type CustomerAction =\n    SignInCustomerAction |\n    SignOutCustomerAction;\n\nexport type SignInCustomerAction =\n    SignInCustomerRequestedAction |\n    SignInCustomerSucceededAction |\n    SignInCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport type SignOutCustomerAction =\n    SignOutCustomerRequestedAction |\n    SignOutCustomerSucceededAction |\n    SignOutCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport interface SignInCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignInCustomerRequested;\n}\n\nexport interface SignInCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignInCustomerSucceeded;\n}\n\nexport interface SignInCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignInCustomerFailed;\n}\n\nexport interface SignOutCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignOutCustomerRequested;\n}\n\nexport interface SignOutCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignOutCustomerSucceeded;\n}\n\nexport interface SignOutCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignOutCustomerFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum SpamProtectionActionType {\n    InitializeFailed = 'SPAM_PROTECTION_INITIALIZE_FAILED',\n    InitializeSucceeded = 'SPAM_PROTECTION_INITIALIZE_SUCCEEDED',\n    InitializeRequested = 'SPAM_PROTECTION_INITIALIZE_REQUESTED',\n    ExecuteRequested = 'SPAM_PROTECTION_EXECUTE_REQUESTED',\n    Completed = 'SPAM_PROTECTION_COMPLETED',\n    SubmitFailed = 'SPAM_PROTECTION_SUBMIT_FAILED',\n}\n\nexport type SpamProtectionAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction |\n    ExecuteRequestedAction |\n    CompletedAction |\n    SubmitFailedAction;\n\nexport interface InitializeRequestedAction extends Action {\n    type: SpamProtectionActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: SpamProtectionActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: SpamProtectionActionType.InitializeFailed;\n}\n\nexport interface ExecuteRequestedAction extends Action {\n    type: SpamProtectionActionType.ExecuteRequested;\n}\n\nexport interface CompletedAction extends Action<string> {\n    type: SpamProtectionActionType.Completed;\n}\n\nexport interface SubmitFailedAction extends Action {\n    type: SpamProtectionActionType.SubmitFailed;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { RequestError } from '../../common/error/errors';\n\nexport default class PaymentMethodInvalidError extends RequestError {\n    constructor(response?: Response) {\n        super(response, { message: 'There is a problem processing your payment. Please try again later.' });\n\n        this.name = 'PaymentMethodInvalidError';\n        this.type = 'payment_method_invalid';\n    }\n}\n","import { createSelector as defaultSelectorCreator } from 'reselect';\n\nimport memoize from '../utility/memoize';\n\n/**\n * Decorate selector creators with the ability to memoize the return value of\n * their combiner if it is a function (which effectively works as a partially\n * applied combiner).\n */\nexport default function withMemoizedCombiner<T extends typeof defaultSelectorCreator>(\n    creator: T\n): T {\n    return ((...args: any[]) => {\n        const combiner = args.pop();\n\n        // Reselect's default `createSelector` has many overloads. To avoid having\n        // to redefine all of them, we're using `any` to bypass the typechecker.\n        return (creator as any)(...args, (...combinerArgs: any[]) => {\n            // Although there are many overloads, all of them have the last argument\n            // as the combiner.\n            const result = combiner(...combinerArgs);\n\n            if (typeof result === 'function') {\n                return memoize(result);\n            }\n\n            return result;\n        });\n    }) as T;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ErrorActionType {\n    ClearError = 'CLEAR_ERROR',\n}\n\nexport type ErrorAction = ClearErrorAction;\n\nexport interface ClearErrorAction extends Action {\n    type: ErrorActionType.ClearError;\n    payload: Error;\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { cachableAction, ActionOptions } from '../common/data-store';\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadPaymentMethodsAction, LoadPaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\n\nexport default class PaymentMethodActionCreator {\n    constructor(\n        private _requestSender: PaymentMethodRequestSender\n    ) {}\n\n    loadPaymentMethods(options?: RequestOptions): Observable<LoadPaymentMethodsAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodsAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsRequested));\n\n            this._requestSender.loadPaymentMethods(options)\n                .then(response => {\n                    const meta = {\n                        deviceSessionId: response.headers['x-device-session-id'],\n                        sessionHash: response.headers['x-session-hash'],\n                    };\n\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsSucceeded, response.body, meta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodsFailed, response));\n                });\n        });\n    }\n\n    @cachableAction\n    loadPaymentMethod(methodId: string, options?: RequestOptions & ActionOptions): Observable<LoadPaymentMethodAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodRequested, undefined, { methodId }));\n\n            this._requestSender.loadPaymentMethod(methodId, options)\n                .then(response => {\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodSucceeded, response.body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodFailed, response, { methodId }));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport PaymentMethod from './payment-method';\n\nexport default class PaymentMethodRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadPaymentMethods({ timeout }: RequestOptions = {}): Promise<Response<PaymentMethod[]>> {\n        const url = '/api/storefront/payments';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n\n    loadPaymentMethod(methodId: string, { timeout }: RequestOptions = {}): Promise<Response<PaymentMethod>> {\n        const url = `/api/storefront/payments/${methodId}`;\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import EmbeddedCheckoutStyles from '../embedded-checkout-styles';\n\nexport enum EmbeddedContentEventType {\n    StyleConfigured = 'STYLE_CONFIGURED',\n}\n\nexport interface EmbeddedContentEventMap {\n    [EmbeddedContentEventType.StyleConfigured]: EmbeddedContentStyleConfiguredEvent;\n}\n\nexport type EmbeddedContentEvent = (\n    EmbeddedContentStyleConfiguredEvent\n);\n\nexport interface EmbeddedContentStyleConfiguredEvent {\n    type: EmbeddedContentEventType.StyleConfigured;\n    payload: EmbeddedCheckoutStyles;\n}\n","import { parseUrl } from '../common/url';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport { IframeEventMap } from './iframe-event';\nimport isIframeEvent from './is-iframe-event';\n\nexport default class IframeEventListener<TEventMap extends IframeEventMap<keyof TEventMap>> {\n    private _isListening: boolean;\n    private _listeners: EventListeners<TEventMap>;\n    private _sourceOrigin: string;\n\n    constructor(\n        sourceOrigin: string\n    ) {\n        this._sourceOrigin = parseUrl(sourceOrigin).origin;\n        this._isListening = false;\n        this._listeners = {};\n    }\n\n    listen(): void {\n        if (this._isListening) {\n            return;\n        }\n\n        this._isListening = true;\n\n        window.addEventListener('message', this._handleMessage);\n    }\n\n    stopListen(): void {\n        if (!this._isListening) {\n            return;\n        }\n\n        this._isListening = false;\n\n        window.removeEventListener('message', this._handleMessage);\n    }\n\n    addListener<TType extends keyof TEventMap>(type: TType, listener: (event: TEventMap[TType]) => void): void {\n        let listeners = this._listeners[type];\n\n        if (!listeners) {\n            this._listeners[type] = listeners = [];\n        }\n\n        listeners.push(listener);\n    }\n\n    removeListener<TType extends keyof TEventMap>(type: TType, listener: (event: TEventMap[TType]) => void): void {\n        const listeners = this._listeners[type];\n\n        if (!listeners) {\n            return;\n        }\n\n        const index = listeners.indexOf(listener);\n\n        if (index >= 0) {\n            listeners.splice(index, 1);\n        }\n    }\n\n    trigger<TType extends keyof TEventMap>(event: TEventMap[TType]): void {\n        const listeners = this._listeners[event.type];\n\n        if (!listeners) {\n            return;\n        }\n\n        listeners.forEach(listener => listener(event));\n    }\n\n    @bind\n    private _handleMessage(event: MessageEvent): void {\n        if ((event.origin !== this._sourceOrigin) || !isIframeEvent(event.data, event.data.type)) {\n            return;\n        }\n\n        this.trigger(event.data);\n    }\n}\n\ntype EventListeners<TEventMap> = {\n    [key in keyof TEventMap]?: Array<(event: TEventMap[keyof TEventMap]) => void>;\n};\n","const CHECKOUT_DEFAULT_INCLUDES = [\n    'cart.lineItems.physicalItems.options',\n    'cart.lineItems.digitalItems.options',\n    'customer',\n    'payments',\n    'promotions.banners',\n];\n\nexport default CHECKOUT_DEFAULT_INCLUDES;\n","import InternalLineItem from './internal-line-item';\nimport { LineItem } from './line-item';\nimport LineItemMap from './line-item-map';\nimport mapGiftCertificateToInternalLineItem from './map-gift-certificate-to-internal-line-item';\nimport mapToInternalLineItem from './map-to-internal-line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItems(\n    itemMap: LineItemMap,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem[] {\n    return (Object.keys(itemMap) as Array<keyof LineItemMap>)\n        .reduce((result, key) => [\n            ...result,\n            ...(itemMap[key] as LineItem[]).map((item: any) => {\n                if (key === 'giftCertificates') {\n                    return mapGiftCertificateToInternalLineItem(item, decimalPlaces);\n                }\n\n                return mapToInternalLineItem(\n                    item,\n                    mapToInternalLineItemType(key),\n                    decimalPlaces,\n                    idKey\n                );\n            }),\n        ], [] as InternalLineItem[]);\n}\n\nfunction mapToInternalLineItemType(type: string): string {\n    switch (type) {\n        case 'physicalItems':\n            return 'ItemPhysicalEntity';\n\n        case 'digitalItems':\n            return 'ItemDigitalEntity';\n\n        case 'giftCertificates':\n            return 'ItemGiftCertificateEntity';\n\n        default:\n            return '';\n    }\n}\n","import { AmountTransformer } from '../common/utility';\n\nimport InternalLineItem from './internal-line-item';\nimport { GiftCertificateItem } from './line-item';\n\nexport default function mapGiftCertificateToInternalLineItem(\n    item: GiftCertificateItem,\n    decimalPlaces: number\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: item.id,\n        imageUrl: '',\n        name: item.name,\n        amount: item.amount,\n        amountAfterDiscount: item.amount,\n        discount: 0,\n        integerAmount: amountTransformer.toInteger(item.amount),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.amount),\n        integerDiscount: 0,\n        quantity: 1,\n        sender: item.sender,\n        recipient: item.recipient,\n        type: 'ItemGiftCertificateEntity',\n        attributes: [],\n        variantId: null,\n    };\n}\n","export const INTERNAL_USE_ONLY = 'This API endpoint is for internal use only and may change in the future';\n","export interface RootCacheKeyMap {\n    maps: ChildCacheKeyMap[];\n}\n\nexport interface IntermediateCacheKeyMap {\n    maps: ChildCacheKeyMap[];\n    parentMap: RootCacheKeyMap | IntermediateCacheKeyMap;\n    usedCount: number;\n    value: any;\n}\n\nexport interface TerminalCacheKeyMap extends IntermediateCacheKeyMap {\n    cacheKey: string;\n}\n\nexport type ChildCacheKeyMap = IntermediateCacheKeyMap | TerminalCacheKeyMap;\n\nexport function isTerminalCacheKeyMap(map: ChildCacheKeyMap): map is TerminalCacheKeyMap {\n    return map.hasOwnProperty('cacheKey');\n}\n\nexport function isRootCacheKeyMap(map: RootCacheKeyMap | ChildCacheKeyMap): map is RootCacheKeyMap {\n    return map.hasOwnProperty('parentMap');\n}\n","import { noop } from 'lodash';\nimport * as shallowEqual from 'shallowequal';\n\nimport { isRootCacheKeyMap, isTerminalCacheKeyMap, ChildCacheKeyMap, IntermediateCacheKeyMap, RootCacheKeyMap, TerminalCacheKeyMap } from './cache-key-maps';\n\nexport interface CacheKeyResolverOptions {\n    maxSize?: number;\n    onExpire?(key: string): void;\n    isEqual?(valueA: any, valueB: any): boolean;\n}\n\ninterface ResolveResult {\n    index: number;\n    parentMap: RootCacheKeyMap | IntermediateCacheKeyMap;\n    map?: TerminalCacheKeyMap;\n}\n\nexport default class CacheKeyResolver {\n    private _lastId = 0;\n    private _map: RootCacheKeyMap = { maps: [] };\n    private _usedMaps: TerminalCacheKeyMap[] = [];\n    private _options: Required<CacheKeyResolverOptions>;\n\n    constructor(options?: CacheKeyResolverOptions) {\n        this._options = {\n            maxSize: 0,\n            isEqual: shallowEqual,\n            onExpire: noop,\n            ...options,\n        };\n    }\n\n    getKey(...args: any[]): string {\n        const result = this._resolveMap(...args);\n        const { index, parentMap } = result;\n        let { map } = result;\n\n        if (map && map.cacheKey) {\n            map.usedCount++;\n        } else {\n            map = this._generateMap(parentMap, args.slice(index));\n        }\n\n        // Keep track of the least used map so we can remove it if the size of\n        // the stack exceeds the maximum size.\n        this._removeLeastUsedMap(map);\n\n        return map.cacheKey;\n    }\n\n    getUsedCount(...args: any[]): number {\n        const { map } = this._resolveMap(...args);\n\n        return map ? map.usedCount : 0;\n    }\n\n    private _resolveMap(...args: any[]): ResolveResult {\n        let index = 0;\n        let parentMap = this._map;\n\n        // Traverse the tree to find the linked list of maps that match the\n        // arguments of the call. Each intermediate or terminal map contains a\n        // value that could be used to match with the arguments. The last map in\n        // the list (the terminal) should contain a cache key. If it can does\n        // not exist, we will return a falsy value so that the caller could\n        // handle and generate a new cache key.\n        while (parentMap.maps.length) {\n            let isMatched = false;\n\n            for (let mapIndex = 0; mapIndex < parentMap.maps.length; mapIndex++) {\n                const map = parentMap.maps[mapIndex];\n\n                if (!this._options.isEqual(map.value, args[index])) {\n                    continue;\n                }\n\n                // Move the most recently used map to the top of the stack for\n                // quicker access\n                parentMap.maps.unshift(...parentMap.maps.splice(mapIndex, 1));\n\n                if ((args.length === 0 || index === args.length - 1) && isTerminalCacheKeyMap(map)) {\n                    return { index, map, parentMap };\n                }\n\n                isMatched = true;\n                parentMap = map;\n                index++;\n\n                break;\n            }\n\n            if (!isMatched) {\n                break;\n            }\n        }\n\n        return { index, parentMap };\n    }\n\n    private _generateMap(parent: RootCacheKeyMap | IntermediateCacheKeyMap, args: any[]): TerminalCacheKeyMap {\n        let index = 0;\n        let parentMap = parent;\n        let map: IntermediateCacheKeyMap;\n\n        do {\n            map = {\n                maps: [],\n                parentMap,\n                usedCount: 1,\n                value: args[index],\n            };\n\n            // Continue to build the tree of maps so that it could be resolved\n            // next time when the function is called with the same set of\n            // arguments.\n            parentMap.maps.unshift(map);\n\n            parentMap = map;\n            index++;\n        } while (index < args.length);\n\n        const terminalMap = map as TerminalCacheKeyMap;\n\n        terminalMap.cacheKey = `${++this._lastId}`;\n\n        return terminalMap;\n    }\n\n    private _removeLeastUsedMap(recentlyUsedMap: TerminalCacheKeyMap): void {\n        if (!this._options.maxSize) {\n            return;\n        }\n\n        const index = this._usedMaps.indexOf(recentlyUsedMap);\n\n        this._usedMaps.splice(\n            index === -1 ? 0 : index,\n            index === -1 ? 0 : 1,\n            recentlyUsedMap\n        );\n\n        if (this._usedMaps.length <= this._options.maxSize) {\n            return;\n        }\n\n        const map = this._usedMaps.pop();\n\n        if (!map) {\n            return;\n        }\n\n        this._removeMap(map);\n        this._options.onExpire(map.cacheKey);\n    }\n\n    private _removeMap(map: ChildCacheKeyMap): void {\n        if (!map.parentMap) {\n            return;\n        }\n\n        map.parentMap.maps.splice(map.parentMap.maps.indexOf(map), 1);\n\n        if (isRootCacheKeyMap(map.parentMap)) {\n            return;\n        }\n\n        this._removeMap(map.parentMap);\n    }\n}\n","import { memoize as lodashMemoize } from 'lodash';\nimport * as shallowEqual from 'shallowequal';\n\nimport { Omit } from '../types';\n\nimport CacheKeyResolver from './cache-key-resolver';\n\nexport interface MemoizeOptions {\n    maxSize?: number;\n    isEqual?(valueA: any, valueB: any): boolean;\n}\n\nexport default function memoize<T extends (...args: any[]) => any>(\n    fn: T,\n    options?: MemoizeOptions\n) {\n    const { maxSize, isEqual } = { maxSize: 0, isEqual: shallowEqual, ...options };\n    const cache = new Map();\n    const resolver = new CacheKeyResolver({\n        maxSize,\n        isEqual,\n        onExpire: key => cache.delete(key),\n    });\n    const memoized = lodashMemoize(fn, (...args) => resolver.getKey(...args));\n\n    memoized.cache = cache;\n\n    return memoized;\n}\n\nexport function memoizeOne<T extends (...args: any[]) => any>(\n    fn: T,\n    options?: Omit<MemoizeOptions, 'maxSize'>\n) {\n    return memoize(fn, { ...options, maxSize: 1 });\n}\n","export enum CheckoutIncludes {\n    AvailableShippingOptions = 'consignments.availableShippingOptions',\n    PhysicalItemsCategoryNames = 'cart.lineItems.physicalItems.categoryNames',\n    DigitalItemsCategoryNames = 'cart.lineItems.digitalItems.categoryNames',\n}\n\nexport default interface CheckoutParams {\n    include?: CheckoutIncludes[];\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\nimport { GooglePayCreator } from '../googlepay';\n\nimport {\n    BraintreeClientCreator,\n    BraintreeDataCollectorCreator,\n    BraintreeHostWindow,\n    BraintreePaypalCheckoutCreator,\n    BraintreePaypalCreator,\n    BraintreeThreeDSecureCreator,\n    BraintreeVisaCheckoutCreator,\n} from './braintree';\n\nexport default class BraintreeScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: BraintreeHostWindow = window\n    ) {}\n\n    loadClient(): Promise<BraintreeClientCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/client.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.client) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.client;\n            });\n    }\n\n    load3DS(): Promise<BraintreeThreeDSecureCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/three-d-secure.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.threeDSecure) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.threeDSecure;\n            });\n    }\n\n    loadDataCollector(): Promise<BraintreeDataCollectorCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/data-collector.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.dataCollector) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.dataCollector;\n            });\n    }\n\n    loadPaypal(): Promise<BraintreePaypalCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/paypal.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypal) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.paypal;\n            });\n    }\n\n    loadPaypalCheckout(): Promise<BraintreePaypalCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/paypal-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypalCheckout) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.paypalCheckout;\n            });\n    }\n\n    loadVisaCheckout(): Promise<BraintreeVisaCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/visa-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.visaCheckout) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.visaCheckout;\n            });\n    }\n\n    loadGooglePayment(): Promise<GooglePayCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/google-payment.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.googlePayment) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.googlePayment;\n            });\n    }\n}\n","import { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport {\n    BraintreeClient,\n    BraintreeDataCollector,\n    BraintreeModule,\n    BraintreePaypal,\n    BraintreePaypalCheckout,\n    BraintreeThreeDSecure,\n    BraintreeVisaCheckout,\n    GooglePayBraintreeSDK,\n} from './braintree';\nimport BraintreeScriptLoader from './braintree-script-loader';\n\nexport default class BraintreeSDKCreator {\n    private _client?: Promise<BraintreeClient>;\n    private _3ds?: Promise<BraintreeThreeDSecure>;\n    private _paypal?: Promise<BraintreePaypal>;\n    private _paypalCheckout?: Promise<BraintreePaypalCheckout>;\n    private _clientToken?: string;\n    private _visaCheckout?: Promise<BraintreeVisaCheckout>;\n    private _dataCollectors: {\n        default?: Promise<BraintreeDataCollector>;\n        paypal?: Promise<BraintreeDataCollector>;\n    } = {};\n    private _googlePay?: Promise<GooglePayBraintreeSDK>;\n\n    constructor(\n        private _braintreeScriptLoader: BraintreeScriptLoader\n    ) {}\n\n    initialize(clientToken: string) {\n        this._clientToken = clientToken;\n    }\n\n    getClient(): Promise<BraintreeClient> {\n        if (!this._clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!this._client) {\n            this._client = this._braintreeScriptLoader.loadClient()\n                .then(client => client.create({ authorization: this._clientToken }));\n        }\n\n        return this._client;\n    }\n\n    getPaypal(): Promise<BraintreePaypal> {\n        if (!this._paypal) {\n            this._paypal = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypal(),\n            ])\n            .then(([client, paypal]) => paypal.create({ client }));\n        }\n\n        return this._paypal;\n    }\n\n    getPaypalCheckout(): Promise<BraintreePaypalCheckout> {\n        if (!this._paypalCheckout) {\n            this._paypalCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypalCheckout(),\n            ])\n                .then(([client, paypalCheckout]) => paypalCheckout.create({ client }));\n        }\n\n        return this._paypalCheckout;\n    }\n\n    get3DS(): Promise<BraintreeThreeDSecure> {\n        if (!this._3ds) {\n            this._3ds = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.load3DS(),\n            ])\n            .then(([client, threeDSecure]) => threeDSecure.create({ client }));\n        }\n\n        return this._3ds;\n    }\n\n    getDataCollector(options?: { paypal: boolean }): Promise<BraintreeDataCollector> {\n        const cacheKey = options && options.paypal ? 'paypal' : 'default';\n        let cached = this._dataCollectors[cacheKey];\n\n        if (!cached) {\n            cached = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadDataCollector(),\n            ])\n            .then(([client, dataCollector]) => dataCollector.create({ client, kount: true, ...options }))\n            .catch(error => {\n                if (error && error.code === 'DATA_COLLECTOR_KOUNT_NOT_ENABLED') {\n                    return { deviceData: undefined, teardown: () => Promise.resolve() };\n                }\n\n                throw error;\n            });\n\n            this._dataCollectors[cacheKey] = cached;\n        }\n\n        return cached;\n    }\n\n    getVisaCheckout(): Promise<BraintreeVisaCheckout> {\n        if (!this._visaCheckout) {\n            this._visaCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadVisaCheckout(),\n            ])\n            .then(([client, visaCheckout]) => visaCheckout.create({ client }));\n        }\n\n        return this._visaCheckout;\n    }\n\n    getGooglePaymentComponent(): Promise<GooglePayBraintreeSDK> {\n        if (!this._googlePay) {\n            this._googlePay = Promise.all ([\n                this.getClient(),\n                this._braintreeScriptLoader.loadGooglePayment(),\n            ])\n                .then(([client, googlePay]) => googlePay.create({ client }));\n        }\n\n        return this._googlePay;\n    }\n\n    teardown(): Promise<void> {\n        return Promise.all([\n            this._teardown(this._3ds),\n            this._teardown(this._dataCollectors.default),\n            this._teardown(this._dataCollectors.paypal),\n            this._teardown(this._visaCheckout),\n            this._teardown(this._googlePay),\n        ]).then(() => {\n            this._3ds = undefined;\n            this._visaCheckout = undefined;\n            this._dataCollectors = {};\n            this._googlePay = undefined;\n        });\n    }\n\n    private _teardown(module?: Promise<BraintreeModule>) {\n        return module ?\n            module.then(mod => mod.teardown()) :\n            Promise.resolve();\n    }\n}\n","import { AmountTransformer } from '../common/utility';\n\nimport InternalLineItem from './internal-line-item';\nimport { DigitalItem, LineItem } from './line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItem(\n    item: LineItem,\n    type: string,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: (item[idKey] as string | number),\n        imageUrl: item.imageUrl,\n        amount: item.extendedListPrice,\n        amountAfterDiscount: item.extendedSalePrice,\n        discount: item.discountAmount,\n        integerAmount: amountTransformer.toInteger(item.extendedListPrice),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.extendedSalePrice),\n        integerDiscount: amountTransformer.toInteger(item.discountAmount),\n        downloadsPageUrl: (item as DigitalItem).downloadPageUrl,\n        name: item.name,\n        quantity: item.quantity,\n        brand: item.brand,\n        categoryNames: item.categoryNames,\n        variantId: item.variantId,\n        productId: item.productId,\n        attributes: (item.options || []).map(option => ({\n            name: option.name,\n            value: option.value,\n        })),\n        addedByPromotion: item.addedByPromotion,\n        type,\n    };\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n    SpamProtectionNotInitialized,\n}\n\nexport default class NotInitializedError extends StandardError {\n    constructor(\n        public subtype: NotInitializedErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'NotInitializedError';\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n    case NotInitializedErrorType.CustomerNotInitialized:\n        return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.PaymentNotInitialized:\n        return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.ShippingNotInitialized:\n        return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.SpamProtectionNotInitialized:\n        return 'Unable to proceed because the checkout spam protection has not been initialized.';\n\n    default:\n        return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import { createErrorAction, Action } from '@bigcommerce/data-store';\nimport { concat, of, throwError, Observable } from 'rxjs';\n\nexport default function throwErrorAction<TPayload, TMeta, TType extends string>(\n    type: TType,\n    error?: TPayload,\n    meta?: TMeta\n): Observable<Action<TPayload, TMeta, TType>> {\n    if (isErrorAction(error)) {\n        return concat(of(error), throwError(createErrorAction(type, error.payload, meta)));\n    }\n\n    return throwError(createErrorAction(type, error, meta));\n}\n\nfunction isErrorAction(action: any): action is Action {\n    return action && action.type && action.error;\n}\n","export default class AmountTransformer {\n    constructor(private _decimalPlaces: number) {}\n\n    toInteger(amount: number): number {\n        return Math.round(amount * Math.pow(10, this._decimalPlaces));\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nimport Url from './url';\n\nexport default function parseUrl(url: string): Url {\n    if (!/^(https?:)?\\/\\//.test(url)) {\n        throw new InvalidArgumentError('The provided URL must be absolute.');\n    }\n\n    // new URL() is not supported in IE11, use anchor tag instead\n    const anchor = document.createElement('a');\n\n    anchor.href = url;\n\n    return {\n        hash: anchor.hash,\n        hostname: anchor.hostname,\n        href: anchor.href,\n        origin: anchor.origin,\n        pathname: anchor.pathname,\n        port: anchor.port,\n        protocol: anchor.protocol,\n        search: anchor.search,\n    };\n}\n","import cacheAction from './cache-action';\nimport isActionOptions from './is-action-options';\n\nexport default function cachableActionDecorator<TMethod extends (...args: any[]) => any>(\n    _: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<TMethod>\n): TypedPropertyDescriptor<TMethod> {\n    const memoizedMethods = new WeakMap<object, { [key: string]: TMethod }>();\n\n    function decorateMethod(this: object, method: TMethod): TMethod {\n        return ((...args: any[]) => {\n            const lastArg = args[args.length - 1];\n            const { useCache } = isActionOptions(lastArg) ? lastArg : { useCache: false };\n\n            if (!useCache) {\n                return method.call(this, ...args);\n            }\n\n            const instanceMethods = memoizedMethods.get(this) || {};\n\n            if (!memoizedMethods.get(this)) {\n                memoizedMethods.set(this, instanceMethods);\n            }\n\n            if (!instanceMethods[key]) {\n                instanceMethods[key] = cacheAction(method);\n            }\n\n            return instanceMethods[key].call(this, ...args);\n        }) as TMethod;\n    }\n\n    return {\n        get() {\n            if (typeof descriptor.value !== 'function') {\n                return descriptor.value;\n            }\n\n            const value = decorateMethod.call(this, descriptor.value);\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n    };\n}\n","import ActionOptions from './action-options';\n\nexport default function isActionOptions(param: any): param is ActionOptions {\n    return param && typeof param.useCache === 'boolean';\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { memoize } from 'lodash';\nimport { from, Observable } from 'rxjs';\nimport { shareReplay } from 'rxjs/operators';\n\nimport { CacheKeyResolver } from '../utility';\n\nexport default function cacheAction<TFunction extends CreateActionFn>(\n    fn: TFunction\n): TFunction {\n    const resolver = new CacheKeyResolver();\n\n    function decoratedFn(this: any, ...args: any[]) {\n        const action = fn.call(this, ...args);\n\n        if (action instanceof Observable) {\n            return from(action).pipe(shareReplay());\n        }\n\n        if (typeof action === 'function') {\n            return memoize(store => from(action(store)).pipe(shareReplay()));\n        }\n\n        return action;\n    }\n\n    return memoize(\n        decoratedFn as TFunction,\n        (...args) => resolver.getKey(...args)\n    );\n}\n\ntype CreateActionFn = (...args: any[]) => Observable<Action> | ThunkAction<Action> | Action;\n","/**\n * Decorates a class or a method by binding all its prototype methods or itself\n * to the calling instance respectively.\n */\nexport default function bindDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T>;\nexport default function bindDecorator<T extends Constructor<object>>(target: T): T;\nexport default function bindDecorator(target: any, key?: any, descriptor?: any): any {\n    if (!key || !descriptor) {\n        return bindClassDecorator(target);\n    }\n\n    return bindMethodDecorator(target, key, descriptor);\n}\n\n/**\n * Decorates a class by binding all its prototype methods to the calling\n * instance.\n */\nexport function bindClassDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                bindMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\n/**\n * Decorates a method by binding it to the calling instance.\n */\nexport function bindMethodDecorator<T extends Method>(_: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let method: T = descriptor.value;\n\n    return {\n        get() {\n            const boundMethod = method.bind(this);\n\n            Object.defineProperty(this, key, {\n                ...descriptor,\n                value: boundMethod,\n            });\n\n            return boundMethod;\n        },\n        set(value) {\n            method = value;\n        },\n    };\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\nexport type Method = (...args: any[]) => any;\n","module.exports = require(\"iframe-resizer\");","import { isPlainObject, omitBy, transform } from 'lodash';\n\nexport default function omitDeep(object: any, predicate: (value: any, key: string) => boolean): any {\n    if (Array.isArray(object)) {\n        return object.map(value => omitDeep(value, predicate));\n    }\n\n    if (isPlainObject(object)) {\n        return transform(omitBy(object, predicate), (result, value, key) => {\n            result[key] = omitDeep(value, predicate);\n        }, {});\n    }\n\n    return object;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, merge, of, Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\n\nimport { CheckoutRequestBody } from './checkout';\nimport { CheckoutActionType, LoadCheckoutAction, UpdateCheckoutAction } from './checkout-actions';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default class CheckoutActionCreator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender,\n        private _configActionCreator: ConfigActionCreator\n    ) {}\n\n    loadCheckout(id: string, options?: RequestOptions): Observable<LoadCheckoutAction> {\n        return concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            merge(\n                this._configActionCreator.loadConfig({ ...options, useCache: true }),\n                defer(() => this._checkoutRequestSender.loadCheckout(id, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body)))\n            )\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    loadDefaultCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            this._configActionCreator.loadConfig(),\n            defer(() => {\n                const state = store.getState();\n                const context = state.config.getContextConfig();\n\n                if (!context || !context.checkoutId) {\n                    throw new StandardError('Unable to load checkout: no cart is available');\n                }\n\n                return this._checkoutRequestSender.loadCheckout(context.checkoutId, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body));\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    updateCheckout(\n        body: CheckoutRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateCheckoutAction, InternalCheckoutSelectors> {\n        return store => new Observable(observer => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CheckoutActionType.UpdateCheckoutRequested));\n\n            this._checkoutRequestSender.updateCheckout(checkout.id, body, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CheckoutActionType.UpdateCheckoutSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CheckoutActionType.UpdateCheckoutFailed, response));\n                });\n        });\n    }\n\n    loadCurrentCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            return this.loadCheckout(checkout.id, options);\n        };\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { Cart } from '../cart';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { CheckoutIncludes } from '../checkout/checkout-params';\nimport CheckoutRequestSender from '../checkout/checkout-request-sender';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport Consignment, {\n    ConsignmentsRequestBody,\n    ConsignmentAssignmentRequestBody,\n    ConsignmentCreateRequestBody,\n    ConsignmentLineItem,\n    ConsignmentRequestBody,\n    ConsignmentShippingOptionRequestBody,\n    ConsignmentUpdateRequestBody\n} from './consignment';\nimport {\n    ConsignmentActionType,\n    CreateConsignmentsAction,\n    DeleteConsignmentAction,\n    LoadShippingOptionsAction,\n    UpdateConsignmentAction,\n    UpdateShippingOptionAction,\n} from './consignment-actions';\nimport ConsignmentRequestSender from './consignment-request-sender';\n\nexport default class ConsignmentActionCreator {\n    constructor(\n        private _consignmentRequestSender: ConsignmentRequestSender,\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    unassignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            if (!existingConsignment) {\n                throw new InvalidArgumentError('No consignment found for the specified address');\n            }\n\n            const lineItems = this._removeLineItems(\n                consignment.lineItems,\n                existingConsignment,\n                state.cart.getCart()\n            );\n\n            if (!lineItems.length) {\n                return this.deleteConsignment(existingConsignment.id, options)(store);\n            }\n\n            return this.updateConsignment({\n                id: existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems,\n            }, options)(store);\n        };\n    }\n\n    assignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            return this._createOrUpdateConsignment({\n                id: existingConsignment && existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems: this._addLineItems(\n                    consignment.lineItems,\n                    existingConsignment,\n                    state.cart.getCart()\n                ),\n            }, options)(store);\n        };\n    }\n\n    selectShippingOption(\n        id: string,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n            const consignments = state.consignments.getConsignments();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (!consignments || !consignments.length) {\n                throw new MissingDataError(MissingDataErrorType.MissingConsignments);\n            }\n\n            const consignmentUpdateBody = {\n                id: consignments[0].id,\n                shippingOptionId: id,\n            };\n\n            const consignmentMeta = {\n                id: consignments[0].id,\n            };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignmentUpdateBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(\n                        ConsignmentActionType.UpdateShippingOptionSucceeded,\n                        body,\n                        consignmentMeta\n                    ));\n\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(\n                        ConsignmentActionType.UpdateShippingOptionFailed,\n                        response,\n                        consignmentMeta\n                    ));\n                });\n        });\n    }\n\n    loadShippingOptions(options?: RequestOptions): ThunkAction<LoadShippingOptionsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadShippingOptionsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.LoadShippingOptionsRequested));\n\n            this._checkoutRequestSender.loadCheckout(checkout.id, {\n                ...options,\n                params: {\n                    include: [CheckoutIncludes.AvailableShippingOptions],\n                },\n            })\n            .then(({ body }) => {\n                observer.next(createAction(ConsignmentActionType.LoadShippingOptionsSucceeded, body));\n                observer.complete();\n            })\n            .catch(response => {\n                observer.error(createErrorAction(ConsignmentActionType.LoadShippingOptionsFailed, response));\n            });\n        });\n    }\n\n    updateAddress(\n        address: AddressRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const consignment = this._getConsignmentRequestBody(address, store);\n            const consignments = store.getState().consignments.getConsignments();\n\n            if (consignments && consignments.length) {\n                (consignment as ConsignmentUpdateRequestBody).id = consignments[0].id;\n            }\n\n            return this._createOrUpdateConsignment(consignment, options)(store);\n        };\n    }\n\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CreateConsignmentsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.CreateConsignmentsRequested));\n\n            this._consignmentRequestSender.createConsignments(checkout.id, consignments, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.CreateConsignmentsSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.CreateConsignmentsFailed, response));\n                });\n        });\n    }\n\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n            const consignmentMeta = { id: consignmentId };\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.DeleteConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.deleteConsignment(checkout.id, consignmentId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.DeleteConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.DeleteConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    updateShippingOption(\n        consignment: ConsignmentShippingOptionRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateShippingOptionSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateShippingOptionFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    private _createOrUpdateConsignment(\n        consignment: ConsignmentCreateRequestBody | ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (this._isUpdateConsignmentRequest(consignment)) {\n                return this.updateConsignment(consignment, options)(store);\n            }\n\n            return this.createConsignments([consignment], options)(store);\n        };\n    }\n\n    private _getConsignmentRequestBody(\n        shippingAddress: AddressRequestBody,\n        store: ReadableCheckoutStore\n    ): ConsignmentRequestBody {\n        const state = store.getState();\n        const cart = state.cart.getCart();\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return {\n            shippingAddress,\n            lineItems: (cart.lineItems && cart.lineItems.physicalItems || [])\n                .map(item => ({\n                    itemId: item.id,\n                    quantity: item.quantity,\n                })\n            ),\n        };\n    }\n\n    private _removeLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return this._hydrateLineItems(consignment.lineItemIds, cart).map(existingItem => {\n            const sharedItem = lineItems.find(lineItem => lineItem.itemId === existingItem.itemId);\n\n            return {\n                ...existingItem,\n                quantity: sharedItem ? (existingItem.quantity - sharedItem.quantity) : existingItem.quantity,\n            };\n        }).filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _addLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment?: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!consignment) {\n            return lineItems;\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return lineItems\n            .concat(this._hydrateLineItems(consignment.lineItemIds, cart))\n            .filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _hydrateLineItems(lineItemIds: string[], cart: Cart): ConsignmentLineItem[] {\n        return lineItemIds.map(itemId => {\n            const item = cart.lineItems.physicalItems.find(lineItem => lineItem.id === itemId );\n\n            return {\n                itemId,\n                quantity: item ? item.quantity : 0,\n            };\n        });\n    }\n\n    private _isUpdateConsignmentRequest(\n        request: ConsignmentRequestBody\n    ): request is ConsignmentUpdateRequestBody {\n        const updateRequest = request as ConsignmentUpdateRequestBody;\n\n        return !!updateRequest.id;\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { ConsignmentsRequestBody, ConsignmentUpdateRequestBody } from './consignment';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'consignments.availableShippingOptions',\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class ConsignmentRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createConsignments(checkoutId: string, consignments: ConsignmentsRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: consignments, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateConsignment(checkoutId: string, consignment: ConsignmentUpdateRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = consignment;\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n\n    deleteConsignment(checkoutId: string, consignmentId: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${consignmentId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, { params: DEFAULT_PARAMS, headers, timeout });\n    }\n}\n","export default function getCallbackUrl(origin: string): string {\n    return `${window.location.origin}/checkout.php?action=set_external_checkout&provider=masterpass&gateway=stripe&origin=${origin}`;\n}\n","import InternalShippingOption from './internal-shipping-option';\nimport ShippingOption from './shipping-option';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalShippingOption(option: ShippingOption, isSelected: boolean): InternalShippingOption {\n    return {\n        description: option.description,\n        module: option.type,\n        price: option.cost,\n        id: option.id,\n        selected: isSelected,\n        isRecommended: option.isRecommended,\n        imageUrl: option.imageUrl,\n        transitTime: option.transitTime,\n    };\n}\n","export default function isPrivate(key: string): boolean {\n    return `${key}`.indexOf('$$') === 0 || `${key}`.indexOf('_') === 0;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\nexport default class UnrecoverableError extends RequestError {\n    constructor(response: Response, message?: string) {\n        super(response, {\n            message: message || 'An unexpected error has occurred. The checkout process cannot continue as a result.',\n        });\n\n        this.name = 'UnrecoverableError';\n        this.type = 'unrecoverable';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromInternalErrorResponse(\n    response: Response<InternalErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || body.detail || body.title || message,\n        errors: errors.length ?\n            errors.map(message => ({ code: body.type, message })) :\n            [{ code: body.type, message: body.detail || body.title }],\n    });\n}\n\nfunction joinErrors(errors: string[]): string | undefined {\n    return errors.reduce((result: string[], error) => {\n        if (error) {\n            return [...result, error];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { PaymentErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromPaymentErrorResponse(\n    response: Response<PaymentErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || message,\n        errors,\n    });\n}\n\nfunction joinErrors(errors: Array<{ code: string; message?: string }>): string | undefined {\n    if (!Array.isArray(errors)) {\n        return;\n    }\n\n    return errors.reduce((result: string[], error) => {\n        if (error && error.message) {\n            return [...result, error.message];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\nimport { last } from 'lodash';\n\nimport ErrorResponseBody, {\n    InternalErrorResponseBody,\n    StorefrontErrorResponseBody\n} from './error-response-body';\nimport { RequestError, TimeoutError } from './errors';\nimport mapFromInternalErrorResponse from './errors/map-from-internal-error-response';\nimport mapFromPaymentErrorResponse from './errors/map-from-payment-error-response';\nimport mapFromStorefrontErrorResponse from './errors/map-from-storefront-error-response';\n\nexport default class RequestErrorFactory {\n    private _factoryMethods: { [key: string]: ErrorFactoryMethod } = {};\n\n    constructor() {\n        this.register('default', (response, message) => new RequestError(response, { message }));\n        this.register('internal', (response, message) => mapFromInternalErrorResponse(response, message));\n        this.register('storefront', (response, message) => mapFromStorefrontErrorResponse(response, message));\n        this.register('payment', (response, message) => mapFromPaymentErrorResponse(response, message));\n        this.register('timeout', response => new TimeoutError(response));\n    }\n\n    register(type: string, factoryMethod: ErrorFactoryMethod): void {\n        this._factoryMethods[type] = factoryMethod;\n    }\n\n    createError(response: Response, message?: string): RequestError {\n        const factoryMethod = this._factoryMethods[this._getType(response)] || this._factoryMethods.default;\n\n        return factoryMethod(response, message);\n    }\n\n    private _getType(response: Response<ErrorResponseBody>): string {\n        if (response.status === 0) {\n            return 'timeout';\n        }\n\n        if (this._isStorefrontErrorResponseBody(response.body)) {\n            return 'storefront';\n        }\n\n        if (this._isInternalErrorResponseBody(response.body)) {\n            const internalType = last(response.body.type.split('/'));\n\n            return internalType && this._factoryMethods[internalType] ?\n                internalType :\n                'internal';\n        }\n\n        const error = last(response.body && response.body.errors);\n\n        if (error && error.code && this._factoryMethods[error.code]) {\n            return error.code;\n        }\n\n        return 'payment';\n    }\n\n    private _isStorefrontErrorResponseBody(\n        errorResponse: ErrorResponseBody\n    ): errorResponse is StorefrontErrorResponseBody {\n        const storefrontErrorResponse = errorResponse as StorefrontErrorResponseBody;\n\n        return !this._isInternalErrorResponseBody(errorResponse) &&\n            typeof storefrontErrorResponse.title === 'string' &&\n            typeof storefrontErrorResponse.type === 'string' &&\n            typeof storefrontErrorResponse.status === 'number' &&\n            typeof storefrontErrorResponse.detail === 'string';\n    }\n\n    private _isInternalErrorResponseBody(\n        errorResponse: ErrorResponseBody\n    ): errorResponse is InternalErrorResponseBody {\n        const internalErrorResponse = errorResponse as InternalErrorResponseBody;\n\n        return typeof internalErrorResponse.errors === 'object' &&\n            typeof internalErrorResponse.title === 'string' &&\n            typeof internalErrorResponse.type === 'string' &&\n            typeof internalErrorResponse.status === 'number';\n    }\n}\n\nexport type ErrorFactoryMethod = (response: Response, message?: string) => RequestError;\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { StorefrontErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromStorefrontErrorResponse(\n    response: Response<StorefrontErrorResponseBody>,\n    message?: string\n): RequestError<StorefrontErrorResponseBody> {\n    const { body } = response;\n\n    return new RequestError(response, {\n        message: message || body.detail || body.title,\n        errors: [{\n            code: body.code || body.type,\n            message: body.detail || body.title,\n        }],\n    });\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { omitDeep } from '../utility';\n\nimport { ClearErrorAction, ErrorActionType } from './error-actions';\n\nexport default function clearErrorReducer<TState extends { [key: string]: any }, TAction extends Action>(\n    state: TState,\n    action: TAction\n): TState | undefined {\n    if (isClearErrorAction(action)) {\n        return omitDeep(state, value => value === action.payload);\n    }\n\n    return state;\n}\n\nfunction isClearErrorAction(action: Action): action is ClearErrorAction {\n    return action.type === ErrorActionType.ClearError;\n}\n","import isEqual from './is-equal';\n\n/**\n * Replace the current value with a new value if the former is different to the\n * latter.\n */\nexport default function replace<T>(currentValue: T, newValue?: T): T {\n    if (newValue === undefined || isEqual(currentValue, newValue)) {\n        return currentValue;\n    }\n\n    return newValue;\n}\n","import isEqual from './is-equal';\n\n/**\n * Set a new value to an object under a key if the new value is different to the\n * current value of the key.\n */\nexport default function objectSet<T extends { [key: string]: any }, K extends keyof T>(\n    object: T | undefined,\n    key: K,\n    value: T[K]\n): T {\n    if (object && object.hasOwnProperty(key) && isEqual(object[key], value)) {\n        return object;\n    }\n\n    return {\n        ...object as any,\n        [key]: value,\n    };\n}\n","import BillingAddress from './billing-address';\n\nexport default interface BillingAddressState {\n    data?: BillingAddress;\n    errors: BillingAddressErrorsState;\n    statuses: BillingAddressStatusesState;\n}\n\nexport interface BillingAddressErrorsState {\n    loadError?: Error;\n    updateError?: Error;\n    continueAsGuestError?: Error;\n}\n\nexport interface BillingAddressStatusesState {\n    isLoading?: boolean;\n    isUpdating?: boolean;\n    isContinuingAsGuest?: boolean;\n}\n\nexport const DEFAULT_STATE: BillingAddressState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { objectSet, replace } from '../common/utility';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport BillingAddress from './billing-address';\nimport { BillingAddressAction, BillingAddressActionType } from './billing-address-actions';\nimport BillingAddressState, { BillingAddressErrorsState, BillingAddressStatusesState, DEFAULT_STATE } from './billing-address-state';\n\nexport default function billingAddressReducer(\n    state: BillingAddressState = DEFAULT_STATE,\n    action: Action\n): BillingAddressState {\n    const reducer = combineReducers<BillingAddressState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: BillingAddress | undefined,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddress | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return replace(data, action.payload && action.payload.billingAddress);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: BillingAddressErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return objectSet(errors, 'updateError', undefined);\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n        return objectSet(errors, 'updateError', action.payload);\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return objectSet(errors, 'continueAsGuestError', undefined);\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n        return objectSet(errors, 'continueAsGuestError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: BillingAddressStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n        return objectSet(statuses, 'isUpdating', true);\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return objectSet(statuses, 'isUpdating', false);\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n        return objectSet(statuses, 'isContinuingAsGuest', true);\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return objectSet(statuses, 'isContinuingAsGuest', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { isArray } from 'lodash';\n\nimport isPlainObject from './is-plain-object';\nimport objectMerge from './object-merge';\nimport replace from './replace';\n\nexport interface ArrayReplaceOptions {\n    matchObject(objectA: any, objectB: any): boolean;\n}\n\nexport default function arrayReplace<T>(currentArray: T[] | undefined, newArray: T[], options?: ArrayReplaceOptions): T[];\nexport default function arrayReplace<T>(currentArray: T[], newArray?: T[], options?: ArrayReplaceOptions): undefined;\nexport default function arrayReplace<T>(currentArray?: T[], newArray?: T[], options?: ArrayReplaceOptions): T[] | undefined;\nexport default function arrayReplace<T>(currentArray?: T[], newArray?: T[], options?: ArrayReplaceOptions): T[] | undefined {\n    const { matchObject = (a: any, b: any) => a.id === b.id } = options || {};\n\n    // Return the new array if the current array does not exist\n    if (!currentArray) {\n        return newArray;\n    }\n\n    // If the new array does not exist, or the current array is strictly equal\n    // to the new array, exit early and return the current array so that the\n    // object reference doesn't change\n    if (!newArray || currentArray === newArray) {\n        return currentArray;\n    }\n\n    // Otherwise, try to replace the items of the current array with the new\n    // array. If the item from the two arrays are the same, keep the current\n    // one. Do it recursively until all arrays are replaced.\n    let sameAsCurrentCount = 0;\n    let sameAsNewCount = 0;\n\n    const countSameAsReplaced = <T>(replacedValue: T, currentValue: T, newValue: T): T => {\n        sameAsCurrentCount += replacedValue === currentValue ? 1 : 0;\n        sameAsNewCount += replacedValue === newValue ? 1 : 0;\n\n        return replacedValue;\n    };\n\n    const result = newArray.map((newItem, index) => {\n        const currentItem = currentArray && currentArray[index];\n\n        if (isPlainObject(currentItem) && isPlainObject(newItem)) {\n            if (matchObject(currentItem, newItem)) {\n                return countSameAsReplaced(\n                    objectMerge(currentItem, newItem),\n                    currentItem,\n                    newItem\n                );\n            }\n\n            return countSameAsReplaced(\n                replace(currentItem, newItem),\n                currentItem,\n                newItem\n            );\n        }\n\n        if (isArray(currentItem) && isArray(newItem)) {\n            return countSameAsReplaced(\n                arrayReplace(currentItem, newItem),\n                currentItem,\n                newItem\n            );\n        }\n\n        return countSameAsReplaced(\n            replace(currentItem, newItem),\n            currentItem,\n            newItem\n        );\n    }) as T[];\n\n    // If all items in the result are identical to the current array, and the\n    // current array and the new array have the same size, simply return the\n    // current array instead of the result.\n    if (sameAsCurrentCount === newArray.length && (currentArray && currentArray.length === newArray.length)) {\n        return currentArray;\n    }\n\n    // If all items in the result are identical to the new array, simply return\n    // the new array.\n    if (sameAsNewCount === newArray.length) {\n        return newArray;\n    }\n\n    return result;\n}\n","import { isArray } from 'lodash';\n\nimport arrayReplace from './array-replace';\nimport isPlainObject from './is-plain-object';\nimport objectSet from './object-set';\n\nexport default function objectMerge<T extends object>(currentObject: T, newObject?: Partial<T>): T;\nexport default function objectMerge<T extends object>(currentObject: T | undefined, newObject: Partial<T>): Partial<T>;\nexport default function objectMerge<T extends object>(currentObject?: T, newObject?: Partial<T>): T | undefined;\nexport default function objectMerge<T extends object>(currentObject?: T, newObject?: Partial<T>): T | Partial<T> | undefined {\n    if (!currentObject) {\n        return newObject;\n    }\n\n    // If the new object does not exist but the current object does, or the new\n    // object is strictly equal to the current object, return the current object\n    if (!newObject || currentObject === newObject) {\n        return currentObject;\n    }\n\n    // If both objects exist, but some values might be different, perform a merge.\n    // Retain values that are equal and only replace them with the new values if\n    // they are different.\n    return (Object.keys(newObject) as Array<keyof T>)\n        .reduce((result, key) => {\n            const currentValue = result[key];\n            const newValue = newObject[key];\n\n            if (isPlainObject(currentValue) && isPlainObject(newValue)) {\n                return objectSet(result, key, objectMerge(currentValue, newValue));\n            }\n\n            if (isArray(currentValue) && isArray(newValue)) {\n                return objectSet(result, key, arrayReplace(currentValue, newValue) as any);\n            }\n\n            return objectSet(result, key, newValue as any);\n        }, currentObject);\n}\n","import Cart from './cart';\n\nexport default interface CartState {\n    data?: Cart;\n    errors: CartErrorsState;\n    statuses: CartStatusesState;\n}\n\nexport interface CartErrorsState {\n    loadError?: Error;\n}\n\nexport interface CartStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: CartState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing/billing-address-actions';\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\nimport { CouponAction, CouponActionType } from '../coupon/coupon-actions';\nimport { GiftCertificateAction, GiftCertificateActionType } from '../coupon/gift-certificate-actions';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport Cart from './cart';\nimport CartState, { CartErrorsState, CartStatusesState, DEFAULT_STATE } from './cart-state';\n\nexport default function cartReducer(\n    state: CartState = DEFAULT_STATE,\n    action: Action\n): CartState {\n    const reducer = combineReducers<CartState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Cart | undefined,\n    action: BillingAddressAction | CheckoutAction | ConsignmentAction | CouponAction | GiftCertificateAction\n): Cart | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return objectMerge(data, action.payload && action.payload.cart);\n\n    default:\n        return data;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CartStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction\n): CartStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n\nfunction errorsReducer(\n    errors: CartErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction\n): CartErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n","import { CheckoutButtonMethodType } from './strategies';\n\nexport default interface CheckoutButtonState {\n    data: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonDataState | undefined\n    };\n    errors: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonErrorsState | undefined\n    };\n    statuses: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonStatusesState | undefined\n    };\n}\n\nexport interface CheckoutButtonDataState {\n    initializedContainers: {\n        [key: string]: boolean;\n    };\n}\n\nexport interface CheckoutButtonErrorsState {\n    initializeError?: Error;\n    deinitializeError?: Error;\n}\n\nexport interface CheckoutButtonStatusesState {\n    isInitializing?: boolean;\n    isDeinitializing?: boolean;\n}\n\nexport const DEFAULT_STATE: CheckoutButtonState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { CheckoutButtonAction, CheckoutButtonActionType } from './checkout-button-actions';\nimport CheckoutButtonState, { CheckoutButtonDataState, CheckoutButtonErrorsState, CheckoutButtonStatusesState, DEFAULT_STATE } from './checkout-button-state';\n\nconst DEFAULT_DATA_STATE: CheckoutButtonDataState = { initializedContainers: {} };\nconst DEFAULT_ERROR_STATE: CheckoutButtonErrorsState = {};\nconst DEFAULT_STATUS_STATE: CheckoutButtonStatusesState = {};\n\nexport default function checkoutButtonReducer(\n    state: CheckoutButtonState = DEFAULT_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<CheckoutButtonState>({\n        data: combineReducers({\n            [action.meta.methodId]: dataReducer,\n        }),\n        errors: combineReducers({\n            [action.meta.methodId]: errorsReducer,\n        }),\n        statuses: combineReducers({\n            [action.meta.methodId]: statusesReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutButtonDataState = DEFAULT_DATA_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonDataState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        if (!action.meta || !action.meta.containerId) {\n            return data;\n        }\n\n        return objectMerge(data, {\n            initializedContainers: {\n                [action.meta.containerId]: true,\n            },\n        });\n\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return objectSet(data, 'initializedContainers', {});\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CheckoutButtonErrorsState = DEFAULT_ERROR_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonErrorsState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return objectSet(errors, 'initializeError', undefined);\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n        return objectSet(errors, 'initializeError', action.payload);\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return objectSet(errors, 'deinitializeError', undefined);\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n        return objectSet(errors, 'deinitializeError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutButtonStatusesState = DEFAULT_STATUS_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonStatusesState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n        return objectSet(statuses, 'isInitializing', true);\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return objectSet(statuses, 'isInitializing', false);\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n        return objectSet(statuses, 'isDeinitializing', true);\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return objectSet(statuses, 'isDeinitializing', false);\n\n    default:\n        return statuses;\n    }\n}\n","import Config from './config';\n\nexport default interface ConfigState {\n    data?: Config;\n    meta?: ConfigMetaState;\n    errors: ConfigErrorsState;\n    statuses: ConfigStatusesState;\n}\n\nexport interface ConfigMetaState {\n    externalSource?: string;\n}\n\nexport interface ConfigErrorsState {\n    loadError?: Error;\n}\n\nexport interface ConfigStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: ConfigState = {\n    meta: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport Config from './config';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\nimport ConfigState, { ConfigErrorsState, ConfigStatusesState, DEFAULT_STATE } from './config-state';\n\nexport default function configReducer(\n    state: ConfigState = DEFAULT_STATE,\n    action: Action\n): ConfigState {\n    const reducer = combineReducers<ConfigState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Config | undefined,\n    action: LoadConfigAction\n): Config | undefined {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return objectMerge(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConfigErrorsState = DEFAULT_STATE.errors,\n    action: LoadConfigAction\n): ConfigErrorsState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case ConfigActionType.LoadConfigFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConfigStatusesState = DEFAULT_STATE.statuses,\n    action: LoadConfigAction\n): ConfigStatusesState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case ConfigActionType.LoadConfigSucceeded:\n    case ConfigActionType.LoadConfigFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nimport Coupon from './coupon';\n\nexport default interface CouponState {\n    data?: Coupon[];\n    errors: CouponErrorsState;\n    statuses: CouponStatusesState;\n}\n\nexport interface CouponErrorsState {\n    applyCouponError?: RequestError<StorefrontErrorResponseBody>;\n    removeCouponError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface CouponStatusesState {\n    isApplyingCoupon?: boolean;\n    isRemovingCoupon?: boolean;\n}\n\nexport const DEFAULT_STATE: CouponState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport Coupon from './coupon';\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport CouponState, { CouponErrorsState, CouponStatusesState, DEFAULT_STATE } from './coupon-state';\n\nexport default function couponReducer(\n    state: CouponState = DEFAULT_STATE,\n    action: Action\n): CouponState {\n    const reducer = combineReducers<CouponState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Coupon[] | undefined,\n    action: CouponAction | CheckoutAction | OrderAction\n): Coupon[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return arrayReplace(data, action.payload && action.payload.coupons);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CouponErrorsState = {},\n    action: CouponAction\n): CouponErrorsState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n    case CouponActionType.ApplyCouponSucceeded:\n        return objectSet(errors, 'applyCouponError', undefined);\n\n    case CouponActionType.ApplyCouponFailed:\n        return objectSet(errors, 'applyCouponError', action.payload);\n\n    case CouponActionType.RemoveCouponRequested:\n    case CouponActionType.RemoveCouponSucceeded:\n        return objectSet(errors, 'removeCouponError', undefined);\n\n    case CouponActionType.RemoveCouponFailed:\n        return objectSet(errors, 'removeCouponError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CouponStatusesState = {},\n    action: CouponAction\n): CouponStatusesState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n        return objectSet(statuses, 'isApplyingCoupon', true);\n\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.ApplyCouponFailed:\n        return objectSet(statuses, 'isApplyingCoupon', false);\n\n    case CouponActionType.RemoveCouponRequested:\n        return objectSet(statuses, 'isRemovingCoupon', true);\n\n    case CouponActionType.RemoveCouponSucceeded:\n    case CouponActionType.RemoveCouponFailed:\n        return objectSet(statuses, 'isRemovingCoupon', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nimport GiftCertificate from './gift-certificate';\n\nexport default interface GiftCertificateState {\n    data?: GiftCertificate[];\n    errors: GiftCertificateErrorsState;\n    statuses: GiftCertificateStatusesState;\n}\n\nexport interface GiftCertificateErrorsState {\n    applyGiftCertificateError?: RequestError<StorefrontErrorResponseBody>;\n    removeGiftCertificateError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface GiftCertificateStatusesState {\n    isApplyingGiftCertificate?: boolean;\n    isRemovingGiftCertificate?: boolean;\n}\n\nexport const DEFAULT_STATE: GiftCertificateState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport GiftCertificate from './gift-certificate';\nimport { GiftCertificateAction, GiftCertificateActionType } from './gift-certificate-actions';\nimport GiftCertificateState, { DEFAULT_STATE, GiftCertificateErrorsState, GiftCertificateStatusesState } from './gift-certificate-state';\n\nexport default function giftCertificateReducer(\n    state: GiftCertificateState = DEFAULT_STATE,\n    action: Action\n): GiftCertificateState {\n    const reducer = combineReducers<GiftCertificateState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: GiftCertificate[] | undefined,\n    action: CheckoutAction | GiftCertificateAction | ConsignmentAction | CouponAction\n): GiftCertificate[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return arrayReplace(data, action.payload && action.payload.giftCertificates);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: GiftCertificateErrorsState = DEFAULT_STATE.errors,\n    action: GiftCertificateAction\n): GiftCertificateErrorsState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        return objectSet(errors, 'applyGiftCertificateError', undefined);\n\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return objectSet(errors, 'applyGiftCertificateError', action.payload);\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return objectSet(errors, 'removeGiftCertificateError', undefined);\n\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return objectSet(errors, 'removeGiftCertificateError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: GiftCertificateStatusesState = DEFAULT_STATE.statuses,\n    action: GiftCertificateAction\n): GiftCertificateStatusesState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n        return objectSet(statuses, 'isApplyingGiftCertificate', true);\n\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return objectSet(statuses, 'isApplyingGiftCertificate', false);\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n        return objectSet(statuses, 'isRemovingGiftCertificate', true);\n\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return objectSet(statuses, 'isRemovingGiftCertificate', false);\n\n    default:\n        return statuses;\n    }\n}\n","import Customer from './customer';\n\nexport default interface CustomerState {\n    data?: Customer;\n}\n\nexport const DEFAULT_STATE: CustomerState = {};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { objectMerge } from '../common/utility';\n\nimport Customer from './customer';\nimport CustomerState, { DEFAULT_STATE } from './customer-state';\n\nexport default function customerReducer(\n    state: CustomerState = DEFAULT_STATE,\n    action: CheckoutAction\n): CustomerState {\n    const reducer = combineReducers<CustomerState, CheckoutAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Customer | undefined,\n    action: CheckoutAction\n): Customer | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectMerge(data, action.payload && action.payload.customer);\n\n    default:\n        return data;\n    }\n}\n","export default interface CustomerStrategyState {\n    data: CustomerStrategyDataState;\n    errors: CustomerStrategyErrorsState;\n    statuses: CustomerStrategyStatusesState;\n}\n\nexport interface CustomerStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface CustomerStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    signInError?: Error;\n    signInMethodId?: string;\n    signOutError?: Error;\n    signOutMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface CustomerStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isSigningIn?: boolean;\n    isSigningOut?: boolean;\n    signInMethodId?: string;\n    signOutMethodId?: string;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: CustomerStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { CustomerStrategyAction, CustomerStrategyActionType } from './customer-strategy-actions';\nimport CustomerStrategyState, { CustomerStrategyDataState, CustomerStrategyErrorsState, CustomerStrategyStatusesState, DEFAULT_STATE } from './customer-strategy-state';\n\nexport default function customerStrategyReducer(\n    state: CustomerStrategyState = DEFAULT_STATE,\n    action: Action\n): CustomerStrategyState {\n    const reducer = combineReducers<CustomerStrategyState, CustomerStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CustomerStrategyDataState = DEFAULT_STATE.data,\n    action: CustomerStrategyAction\n): CustomerStrategyDataState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        });\n\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CustomerStrategyErrorsState = DEFAULT_STATE.errors,\n    action: CustomerStrategyAction\n): CustomerStrategyErrorsState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return objectMerge(errors, {\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.InitializeFailed:\n        return objectMerge(errors, {\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(errors, {\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n        return objectMerge(errors, {\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignInRequested:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return objectMerge(errors, {\n            signInError: undefined,\n            signInMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignInFailed:\n        return objectMerge(errors, {\n            signInError: action.payload,\n            signInMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignOutRequested:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return objectMerge(errors, {\n            signOutError: undefined,\n            signOutMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignOutFailed:\n        return objectMerge(errors, {\n            signOutError: action.payload,\n            signOutMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n        return objectMerge(errors, {\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(errors, {\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CustomerStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: CustomerStrategyAction\n): CustomerStrategyStatusesState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n        return objectMerge(statuses, {\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.InitializeFailed:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return objectMerge(statuses, {\n            isInitializing: false,\n            initializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n        return objectMerge(statuses, {\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(statuses, {\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignInRequested:\n        return objectMerge(statuses, {\n            isSigningIn: true,\n            signInMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignInFailed:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return objectMerge(statuses, {\n            isSigningIn: false,\n            signInMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignOutRequested:\n        return objectMerge(statuses, {\n            isSigningOut: true,\n            signOutMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignOutFailed:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return objectMerge(statuses, {\n            isSigningOut: false,\n            signOutMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n        return objectMerge(statuses, {\n            isWidgetInteracting: true,\n            widgetInteractionMethodId: action.meta.methodId,\n         });\n\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(statuses, {\n            isWidgetInteracting: false,\n            widgetInteractionMethodId: undefined,\n         });\n\n    default:\n        return statuses;\n    }\n}\n","import Country from './country';\n\nexport default interface CountryState {\n    data?: Country[];\n    errors: CountryErrorsState;\n    statuses: CountryStatusesState;\n}\n\nexport interface CountryErrorsState {\n    loadError?: Error;\n}\n\nexport interface CountryStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: CountryState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\n\nimport Country from './country';\nimport { CountryActionType, LoadCountriesAction } from './country-actions';\nimport CountryState, { CountryErrorsState, CountryStatusesState, DEFAULT_STATE } from './country-state';\n\nexport default function countryReducer(\n    state: CountryState = DEFAULT_STATE,\n    action: Action\n): CountryState {\n    const reducer = combineReducers<CountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadCountriesAction\n): Country[] | undefined {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesSucceeded:\n        return arrayReplace(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadCountriesAction\n): CountryErrorsState {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesRequested:\n    case CountryActionType.LoadCountriesSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CountryActionType.LoadCountriesFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadCountriesAction\n): CountryStatusesState {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CountryActionType.LoadCountriesSucceeded:\n    case CountryActionType.LoadCountriesFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { Omit } from '../common/types';\n\nimport { InternalOrderMeta, InternalOrderPayment } from './internal-order';\nimport Order from './order';\n\nexport default interface OrderState {\n    data?: OrderDataState;\n    meta?: OrderMetaState;\n    errors: OrderErrorsState;\n    statuses: OrderStatusesState;\n}\n\nexport type OrderDataState = Omit<Order, 'billingAddress' | 'coupons'>;\n\nexport interface OrderMetaState extends InternalOrderMeta {\n    token?: string;\n    orderToken?: string;\n    callbackUrl?: string;\n    payment?: InternalOrderPayment;\n    spamProtectionToken?: string;\n}\n\nexport interface OrderErrorsState {\n    loadError?: Error;\n    submitError?: Error;\n    finalizeError?: Error;\n}\n\nexport interface OrderStatusesState {\n    isLoading?: boolean;\n    isSubmitting?: boolean;\n    isFinalizing?: boolean;\n}\n\nexport const DEFAULT_STATE: OrderState = {\n    errors: {},\n    meta: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { OrderAction, OrderActionType } from './order-actions';\nimport OrderState, { DEFAULT_STATE, OrderDataState, OrderErrorsState, OrderMetaState, OrderStatusesState } from './order-state';\nimport { SpamProtectionAction, SpamProtectionActionType } from './spam-protection';\n\nexport default function orderReducer(\n    state: OrderState = DEFAULT_STATE,\n    action: Action\n): OrderState {\n    const reducer = combineReducers<OrderState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: OrderDataState | undefined,\n    action: OrderAction\n): OrderDataState | undefined {\n    switch (action.type) {\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n        return objectMerge(data, omit(action.payload, ['billingAddress', 'coupons'])) as OrderDataState;\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: OrderMetaState | undefined,\n    action: OrderAction | SpamProtectionAction\n): OrderMetaState | undefined {\n    switch (action.type) {\n    case OrderActionType.FinalizeOrderSucceeded:\n    case OrderActionType.SubmitOrderSucceeded:\n        return objectMerge(meta, {\n            ...action.meta,\n            callbackUrl: action.payload && action.payload.order.callbackUrl,\n            orderToken: action.payload && action.payload.order.token,\n            payment: action.payload && action.payload.order && action.payload.order.payment,\n        });\n\n    case SpamProtectionActionType.Completed:\n        return objectSet(meta, 'spamProtectionToken', action.payload);\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: OrderErrorsState = DEFAULT_STATE.errors,\n    action: OrderAction\n): OrderErrorsState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return objectSet(errors, 'loadError', undefined);\n\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: OrderStatusesState = DEFAULT_STATE.statuses,\n    action: OrderAction\n): OrderStatusesState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { PaymentAction, PaymentActionType } from './payment-actions';\nimport PaymentResponseBody from './payment-response-body';\nimport PaymentState from './payment-state';\n\nexport default function paymentReducer(state: PaymentState = {}, action: PaymentAction): PaymentState {\n    const reducer = combineReducers<PaymentState, PaymentAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: PaymentResponseBody | undefined, action: PaymentAction): PaymentResponseBody | undefined {\n    switch (action.type) {\n    case PaymentActionType.SubmitPaymentSucceeded:\n        return action.payload;\n\n    default:\n        return data;\n    }\n}\n","import PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport default interface PaymentMethodState {\n    data?: PaymentMethod[];\n    meta?: PaymentMethodMeta;\n    errors: PaymentMethodErrorsState;\n    statuses: PaymentMethodStatusesState;\n}\n\nexport interface PaymentMethodErrorsState {\n    loadMethodId?: string;\n    loadError?: Error;\n    loadMethodError?: Error;\n}\n\nexport interface PaymentMethodStatusesState {\n    loadMethodId?: string;\n    isLoading?: boolean;\n    isLoadingMethod?: boolean;\n}\n\nexport const DEFAULT_STATE: PaymentMethodState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, mergeOrPush, objectMerge, objectSet } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport { PaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { DEFAULT_STATE, PaymentMethodErrorsState, PaymentMethodStatusesState } from './payment-method-state';\n\nexport default function paymentMethodReducer(\n    state: PaymentMethodState = DEFAULT_STATE,\n    action: Action\n): PaymentMethodState {\n    const reducer = combineReducers<PaymentMethodState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentMethod[] | undefined,\n    action: PaymentMethodAction\n): PaymentMethod[] | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return mergeOrPush(data || [], action.payload, action.payload && {\n            id: action.payload.id,\n            gateway: action.payload.gateway,\n        });\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return arrayReplace(data, action.payload, {\n            matchObject: (methodA, methodB) => (\n                methodA.id === methodB.id && methodA.gateway === methodB.gateway\n            ),\n        });\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: PaymentMethodMeta | undefined,\n    action: PaymentMethodAction\n): PaymentMethodMeta | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return objectMerge(meta, action.meta);\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: PaymentMethodErrorsState = DEFAULT_STATE.errors,\n    action: PaymentMethodAction\n): PaymentMethodErrorsState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return objectMerge(errors, {\n            loadMethodId: undefined,\n            loadMethodError: undefined,\n        });\n\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return objectMerge(errors, {\n            loadMethodId: action.meta.methodId,\n            loadMethodError: action.payload,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentMethodStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentMethodAction\n): PaymentMethodStatusesState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n        return objectMerge(statuses, {\n            isLoadingMethod: true,\n            loadMethodId: action.meta.methodId,\n        });\n\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return objectMerge(statuses, {\n            isLoadingMethod: false,\n            loadMethodId: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import { findIndex, pick, pickBy } from 'lodash';\n\nimport { PartialDeep } from '../types';\n\nimport isPlainObject from './is-plain-object';\nimport objectMerge from './object-merge';\n\n/**\n * Push an item to an array if it doesn't exist in the array. Otherwise, merge\n * with the existing item in the array. This function always returns a new array.\n */\nexport default function mergeOrPush<T>(\n    array: T[],\n    item?: T,\n    predicate?: ((item: T) => boolean) | PartialDeep<T>\n): T[] {\n    if (!item) {\n        return array;\n    }\n\n    const defaultPredicate = pick(item, 'id');\n    const index = findIndex(array, typeof predicate === 'object' ? pickBy(predicate) : (predicate || defaultPredicate));\n    const newArray = [...array];\n\n    if (index === -1) {\n        newArray.push(item);\n    } else {\n        const existingItem = array[index];\n\n        newArray[index] = isPlainObject(existingItem) && isPlainObject(item) ?\n            objectMerge(existingItem, item) :\n            item;\n    }\n\n    return newArray;\n}\n","export default interface PaymentStrategyState {\n    data: PaymentStrategyDataState;\n    errors: PaymentStrategyErrorsState;\n    statuses: PaymentStrategyStatusesState;\n}\n\nexport interface PaymentStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface PaymentStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    executeError?: Error;\n    executeMethodId?: string;\n    finalizeError?: Error;\n    finalizeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface PaymentStrategyStatusesState {\n    deinitializeMethodId?: string;\n    executeMethodId?: string;\n    finalizeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isExecuting?: boolean;\n    isFinalizing?: boolean;\n    isInitializing?: boolean;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: PaymentStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { PaymentStrategyAction, PaymentStrategyActionType } from './payment-strategy-actions';\nimport PaymentStrategyState, { DEFAULT_STATE, PaymentStrategyDataState, PaymentStrategyErrorsState, PaymentStrategyStatusesState } from './payment-strategy-state';\n\nexport default function paymentStrategyReducer(\n    state: PaymentStrategyState = DEFAULT_STATE,\n    action: Action\n): PaymentStrategyState {\n    const reducer = combineReducers<PaymentStrategyState, PaymentStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentStrategyDataState = DEFAULT_STATE.data,\n    action: PaymentStrategyAction\n): PaymentStrategyDataState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        });\n\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: PaymentStrategyErrorsState = DEFAULT_STATE.errors,\n    action: PaymentStrategyAction\n): PaymentStrategyErrorsState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return objectMerge(errors, {\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.InitializeFailed:\n        return objectMerge(errors, {\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(errors, {\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n        return objectMerge(errors, {\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.ExecuteRequested:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return objectMerge(errors, {\n            executeError: undefined,\n            executeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.ExecuteFailed:\n        return objectMerge(errors, {\n            executeError: action.payload,\n            executeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.FinalizeRequested:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return objectMerge(errors, {\n            finalizeError: undefined,\n            finalizeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.FinalizeFailed:\n        return objectMerge(errors, {\n            finalizeError: action.payload,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n        return objectMerge(errors, {\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(errors, {\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentStrategyAction\n): PaymentStrategyStatusesState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n        return objectMerge(statuses, {\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.InitializeFailed:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return objectMerge(statuses, {\n            isInitializing: false,\n            initializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n        return objectMerge(statuses, {\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(statuses, {\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.ExecuteRequested:\n        return objectMerge(statuses, {\n            isExecuting: true,\n            executeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.ExecuteFailed:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return objectMerge(statuses, {\n            isExecuting: false,\n            executeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.FinalizeRequested:\n        return objectMerge(statuses, {\n            isFinalizing: true,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.FinalizeFailed:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return objectMerge(statuses, {\n            isFinalizing: false,\n            finalizeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n        return objectMerge(statuses, {\n            isWidgetInteracting: true,\n            widgetInteractionMethodId: action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(statuses, {\n            isWidgetInteracting: false,\n            widgetInteractionMethodId: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import Instrument, { VaultAccessToken } from './instrument';\n\nexport default interface InstrumentState {\n    data?: Instrument[];\n    meta?: InstrumentMeta;\n    errors: InstrumentErrorState;\n    statuses: InstrumentStatusState;\n}\n\nexport interface InstrumentErrorState {\n    deleteError?: Error;\n    failedInstrument?: string;\n    loadError?: Error;\n    vaultError?: Error;\n}\n\nexport interface InstrumentStatusState {\n    isDeleting?: boolean;\n    isLoading?: boolean;\n    isVaulting?: boolean;\n    deletingInstrument?: string;\n}\n\nexport type InstrumentMeta = VaultAccessToken;\n\nexport const DEFAULT_STATE = {\n    data: [],\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../../common/error';\nimport { arrayReplace, objectMerge, objectSet } from '../../common/utility';\n\nimport Instrument from './instrument';\nimport { InstrumentAction, InstrumentActionType } from './instrument-actions';\nimport InstrumentState, { DEFAULT_STATE, InstrumentErrorState, InstrumentMeta, InstrumentStatusState } from './instrument-state';\n\nexport default function instrumentReducer(\n    state: InstrumentState = DEFAULT_STATE,\n    action: Action\n): InstrumentState {\n    const reducer = combineReducers<InstrumentState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Instrument[] = DEFAULT_STATE.data,\n    action: InstrumentAction\n): Instrument[] {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n        return arrayReplace(data, action.payload && action.payload.vaultedInstruments || []);\n\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return arrayReplace(data, data.filter(instrument =>\n            instrument.bigpayToken !== (action.meta && action.meta.instrumentId)\n        ));\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: InstrumentMeta | undefined,\n    action: InstrumentAction\n): InstrumentMeta | undefined {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return objectMerge(meta, action.meta);\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: InstrumentErrorState = DEFAULT_STATE.errors,\n    action: InstrumentAction\n): InstrumentErrorState {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsRequested:\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case InstrumentActionType.DeleteInstrumentRequested:\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return objectMerge(errors, {\n            deleteError: undefined,\n            failedInstrument: undefined,\n        });\n\n    case InstrumentActionType.LoadInstrumentsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case InstrumentActionType.DeleteInstrumentFailed:\n        return objectMerge(errors, {\n            deleteError: action.payload,\n            failedInstrument: action.meta.instrumentId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: InstrumentStatusState = DEFAULT_STATE.statuses,\n    action: InstrumentAction\n): InstrumentStatusState {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case InstrumentActionType.DeleteInstrumentRequested:\n        return objectMerge(statuses, {\n            isDeleting: true,\n            deletingInstrument: action.meta.instrumentId,\n        });\n\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n    case InstrumentActionType.LoadInstrumentsFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n    case InstrumentActionType.DeleteInstrumentFailed:\n        return objectMerge(statuses, {\n            isDeleting: false,\n            deletingInstrument: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import { AfterpayRemoteCheckout, AmazonPayRemoteCheckout } from './methods';\n\nexport default interface RemoteCheckoutState {\n    data: RemoteCheckoutStateData;\n}\n\nexport type RemoteCheckoutStateData =\n    { amazon?: AmazonPayRemoteCheckout } &\n    { afterpay?: AfterpayRemoteCheckout };\n\nexport const DEFAULT_STATE: RemoteCheckoutState = {\n    data: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport RemoteCheckout from './remote-checkout';\nimport { RemoteCheckoutAction, RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutState, { DEFAULT_STATE, RemoteCheckoutStateData } from './remote-checkout-state';\n\nexport default function remoteCheckoutReducer(\n    state: RemoteCheckoutState = DEFAULT_STATE,\n    action: RemoteCheckoutAction\n): RemoteCheckoutState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<RemoteCheckoutState>({\n        data: combineReducers<RemoteCheckoutStateData>({\n            [action.meta.methodId]: dataReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: RemoteCheckout = DEFAULT_STATE.data,\n    action: RemoteCheckoutAction\n): RemoteCheckout {\n    switch (action.type) {\n    case RemoteCheckoutActionType.InitializeRemoteBillingSucceeded:\n        return objectSet(data, 'billing' as any, action.payload && action.payload.billing);\n\n    case RemoteCheckoutActionType.InitializeRemoteShippingSucceeded:\n        return objectSet(data, 'shipping' as any, action.payload && action.payload.shipping);\n\n    case RemoteCheckoutActionType.LoadRemoteSettingsSucceeded:\n        return objectSet(data, 'settings', action.payload);\n\n    case RemoteCheckoutActionType.UpdateRemoteCheckout:\n        return objectMerge(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n","import Consignment from './consignment';\n\nexport default interface ConsignmentState {\n    data?: Consignment[];\n    errors: ConsignmentErrorsState;\n    statuses: ConsignmentStatusesState;\n}\n\nexport interface ConsignmentErrorsState {\n    loadError?: Error;\n    loadShippingOptionsError?: Error;\n    createError?: Error;\n    updateError: { [key: string]: Error | undefined };\n    deleteError: { [key: string]: Error | undefined };\n    updateShippingOptionError: { [key: string]: Error | undefined };\n}\n\nexport interface ConsignmentStatusesState {\n    isLoading?: boolean;\n    isLoadingShippingOptions?: boolean;\n    isCreating?: boolean;\n    isUpdating: { [key: string]: boolean };\n    isDeleting: { [key: string]: boolean };\n    isUpdatingShippingOption: { [key: string]: boolean };\n}\n\nexport const DEFAULT_STATE: ConsignmentState = {\n    errors: {\n        updateShippingOptionError: {},\n        updateError: {},\n        deleteError: {},\n    },\n    statuses: {\n        isUpdating: {},\n        isUpdatingShippingOption: {},\n        isDeleting: {},\n    },\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectMerge, objectSet } from '../common/utility';\nimport { CouponAction, CouponActionType } from '../coupon';\nimport { CustomerAction, CustomerActionType } from '../customer';\n\nimport Consignment from './consignment';\nimport { ConsignmentAction, ConsignmentActionType } from './consignment-actions';\nimport ConsignmentState, { ConsignmentErrorsState, ConsignmentStatusesState, DEFAULT_STATE } from './consignment-state';\n\nexport default function consignmentReducer(\n    state: ConsignmentState = DEFAULT_STATE,\n    action: Action\n): ConsignmentState {\n    const reducer = combineReducers<ConsignmentState, ConsignmentAction | CheckoutAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Consignment[] | undefined,\n    action: ConsignmentAction | CheckoutAction | CouponAction | CustomerAction\n): Consignment[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n        return arrayReplace(data, action.payload && action.payload.consignments);\n\n    case CustomerActionType.SignOutCustomerSucceeded:\n        return arrayReplace(data, []);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConsignmentErrorsState = DEFAULT_STATE.errors,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n        return objectSet(errors, 'createError', undefined);\n\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return objectSet(errors, 'createError', action.payload);\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateError: {\n                    [action.meta.id]: undefined,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateError: {\n                    [action.meta.id]: action.payload,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(errors, {\n                deleteError: {\n                    [action.meta.id]: undefined,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(errors, {\n                deleteError: {\n                    [action.meta.id]: action.payload,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateShippingOptionError: {\n                    [action.meta.id]: undefined,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateShippingOptionError: {\n                    [action.meta.id]: action.payload,\n                },\n            });\n        }\n\n        return errors;\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConsignmentStatusesState = DEFAULT_STATE.statuses,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return objectSet(statuses, 'isLoadingShippingOptions', true);\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return objectSet(statuses, 'isLoadingShippingOptions', false);\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n        return objectSet(statuses, 'isCreating', true);\n\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return objectSet(statuses, 'isCreating', false);\n\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdating: {\n                    [action.meta.id]: true,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdating: {\n                    [action.meta.id]: false,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isDeleting: {\n                    [action.meta.id]: true,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isDeleting: {\n                    [action.meta.id]: false,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdatingShippingOption: {\n                    [action.meta.id]: true,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdatingShippingOption: {\n                    [action.meta.id]: false,\n                },\n            });\n        }\n\n        return statuses;\n\n    default:\n        return statuses;\n    }\n}\n","import { Country } from '../geography';\n\nexport default interface ShippingCountryState {\n    data?: Country[];\n    errors: ShippingCountryErrorsState;\n    statuses: ShippingCountryStatusesState;\n}\n\nexport interface ShippingCountryErrorsState {\n    loadError?: Error;\n}\n\nexport interface ShippingCountryStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: ShippingCountryState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { Country } from '../geography';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryState, { DEFAULT_STATE, ShippingCountryErrorsState, ShippingCountryStatusesState } from './shipping-country-state';\n\nexport default function shippingCountryReducer(\n    state: ShippingCountryState = DEFAULT_STATE,\n    action: Action\n): ShippingCountryState {\n    const reducer = combineReducers<ShippingCountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadShippingCountriesAction\n): Country[] | undefined {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return arrayReplace(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ShippingCountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadShippingCountriesAction\n): ShippingCountryErrorsState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingCountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadShippingCountriesAction\n): ShippingCountryStatusesState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","export default interface ShippingStrategyState {\n    data: ShippingStrategyDataState;\n    errors: ShippingStrategyErrorsState;\n    statuses: ShippingStrategyStatusesState;\n}\n\nexport interface ShippingStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface ShippingStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    updateAddressError?: Error;\n    updateAddressMethodId?: string;\n    selectOptionError?: Error;\n    selectOptionMethodId?: string;\n}\n\nexport interface ShippingStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isUpdatingAddress?: boolean;\n    isSelectingOption?: boolean;\n    updateAddressMethodId?: string;\n    selectOptionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: ShippingStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { ShippingStrategyAction, ShippingStrategyActionType } from './shipping-strategy-actions';\nimport ShippingStrategyState, { DEFAULT_STATE, ShippingStrategyDataState, ShippingStrategyErrorsState, ShippingStrategyStatusesState } from './shipping-strategy-state';\n\nexport default function shippingStrategyReducer(\n    state: ShippingStrategyState = DEFAULT_STATE,\n    action: Action\n): ShippingStrategyState {\n    const reducer = combineReducers<ShippingStrategyState, ShippingStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: ShippingStrategyDataState = DEFAULT_STATE.data,\n    action: ShippingStrategyAction\n): ShippingStrategyDataState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        });\n\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: ShippingStrategyErrorsState = DEFAULT_STATE.errors,\n    action: ShippingStrategyAction\n): ShippingStrategyErrorsState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return objectMerge(errors, {\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.InitializeFailed:\n        return objectMerge(errors, {\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(errors, {\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n        return objectMerge(errors, {\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return objectMerge(errors, {\n            updateAddressError: undefined,\n            updateAddressMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n        return objectMerge(errors, {\n            updateAddressError: action.payload,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return objectMerge(errors, {\n            selectOptionError: undefined,\n            selectOptionMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n        return objectMerge(errors, {\n            selectOptionError: action.payload,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: ShippingStrategyAction\n): ShippingStrategyStatusesState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n        return objectMerge(statuses, {\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.InitializeFailed:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return objectMerge(statuses, {\n            isInitializing: false,\n            initializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n        return objectMerge(statuses, {\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(statuses, {\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n        return objectMerge(statuses, {\n            isUpdatingAddress: true,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return objectMerge(statuses, {\n            isUpdatingAddress: false,\n            updateAddressMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n        return objectMerge(statuses, {\n            isSelectingOption: true,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return objectMerge(statuses, {\n            isSelectingOption: false,\n            selectOptionMethodId: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import { Omit } from '../common/types';\n\nimport Checkout from './checkout';\n\nexport default interface CheckoutState {\n    data?: CheckoutDataState;\n    errors: CheckoutErrorsState;\n    statuses: CheckoutStatusesState;\n}\n\nexport type CheckoutDataState = Omit<Checkout, 'billingAddress' | 'cart' | 'consignments' | 'coupons' | 'giftCertificates'>;\n\nexport interface CheckoutErrorsState {\n    loadError?: Error;\n    updateError?: Error;\n}\n\nexport interface CheckoutStatusesState {\n    isLoading?: boolean;\n    isUpdating?: boolean;\n}\n\nexport const DEFAULT_STATE: CheckoutState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\nimport { CouponAction, CouponActionType, GiftCertificateAction, GiftCertificateActionType } from '../coupon';\nimport { OrderAction, OrderActionType } from '../order';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport { CheckoutAction, CheckoutActionType } from './checkout-actions';\nimport CheckoutState, { CheckoutDataState, CheckoutErrorsState, CheckoutStatusesState, DEFAULT_STATE } from './checkout-state';\n\nexport default function checkoutReducer(\n    state: CheckoutState = DEFAULT_STATE,\n    action: Action\n): CheckoutState {\n    const reducer = combineReducers<CheckoutState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutDataState | undefined,\n    action: CheckoutAction | BillingAddressAction | ConsignmentAction | CouponAction | GiftCertificateAction | OrderAction\n): CheckoutDataState | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return objectMerge(data, omit(action.payload, [\n            'billingAddress',\n            'cart',\n            'consignments',\n            'customer',\n            'coupons',\n            'giftCertifcates',\n        ])) as CheckoutDataState;\n\n    case OrderActionType.SubmitOrderSucceeded:\n        return objectSet(data, 'orderId', action.payload && action.payload.order.orderId) ;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CheckoutErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | OrderAction\n): CheckoutErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return objectSet(errors, 'updateError', undefined);\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n        return objectSet(errors, 'updateError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | OrderAction\n): CheckoutStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(statuses, 'isLoading', false);\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n        return objectSet(statuses, 'isUpdating', true);\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return objectSet(statuses, 'isUpdating', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { deepFreeze } from '@bigcommerce/data-store';\n\n// tslint:disable-next-line:ban-types\ntype FunctionProperties<T> = { [K in keyof T]: T[K] extends Function ? T[K] : never };\n\nexport default function createFreezeProxy<T extends object>(target: T): T {\n    return createProxy(target, (target, name) =>\n        (...args: any[]) => deepFreeze(target[name].call(target, ...args))\n    );\n}\n\nexport function createFreezeProxies<T extends { [key: string]: object }>(map: T): T {\n    return Object.keys(map)\n        .reduce((result, key) => {\n            result[key] = createFreezeProxy(map[key]);\n\n            return result;\n        }, {} as T);\n}\n\nfunction createProxy<T extends object>(target: T, trap: (target: FunctionProperties<T>, name: keyof FunctionProperties<T>, proxy: T) => any): T {\n    const proxy = Object.create(target);\n\n    traversePrototypeOf(target, prototype => {\n        Object.getOwnPropertyNames(prototype)\n            .forEach(name => {\n                if (name === 'constructor' || typeof proxy[name] !== 'function' || name.charAt(0) === '_') {\n                    return;\n                }\n\n                proxy[name] = trap(target as FunctionProperties<T>, name as keyof T, proxy);\n            });\n    });\n\n    return proxy;\n}\n\nfunction traversePrototypeOf(target: object, iteratee: (prototype: object) => void): void {\n    let prototype = Object.getPrototypeOf(target);\n\n    while (prototype) {\n        iteratee(prototype);\n\n        prototype = Object.getPrototypeOf(prototype);\n    }\n}\n","import { find } from 'lodash';\n\nimport { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\nimport { ConfigState } from '../config';\nimport { DEFAULT_STATE } from '../config/config-state';\nimport { Country } from '../geography';\n\nimport FormField from './form-field';\n\nexport default interface FormSelector {\n    getShippingAddressFields(countries: Country[] | undefined, countryCode: string): FormField[];\n    getBillingAddressFields(countries: Country[] | undefined, countryCode: string): FormField[];\n}\n\nexport type FormSelectorFactory = (state: ConfigState) => FormSelector;\n\nexport function createFormSelectorFactory(): FormSelectorFactory {\n    const getShippingAddressFields = createSelector(\n        (state: ConfigState) => state.data,\n        config => (countries: Country[] = [], countryCode: string) => {\n            const selectedCountry = find(countries, { code: countryCode });\n            const fields = config ? config.storeConfig.formFields.shippingAddressFields : [];\n\n            return fields.map((field: any) => processField(field, countries, selectedCountry));\n        }\n    );\n\n    const getBillingAddressFields = createSelector(\n        (state: ConfigState) => state.data,\n        config => (countries: Country[] = [], countryCode: string) => {\n            const selectedCountry = find(countries, { code: countryCode });\n            const fields = config ? config.storeConfig.formFields.billingAddressFields : [];\n\n            return fields.map((field: any) => processField(field, countries, selectedCountry));\n        }\n    );\n\n    function processField(field: FormField, countries: Country[], selectedCountry?: Country): FormField {\n        if (field.name === 'countryCode') {\n            return processCountry(field, countries, selectedCountry);\n        }\n\n        if (field.name === 'stateOrProvince') {\n            return processProvince(field, selectedCountry);\n        }\n\n        if (field.name === 'postalCode') {\n            return processsPostCode(field, selectedCountry);\n        }\n\n        return field;\n    }\n\n    function processCountry(field: FormField, countries: Country[] = [], country?: Country): FormField {\n        if (!countries.length) {\n            return field;\n        }\n\n        const { code = '' } = country || {};\n        const items = countries.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            options: { items },\n            default: code,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    function processProvince(field: FormField, country?: Country): FormField {\n        const { subdivisions = [] } = country || {};\n\n        if (!subdivisions.length) {\n            return {\n                ...field,\n                required: false,\n            };\n        }\n\n        const items = subdivisions.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            name: 'stateOrProvinceCode',\n            options: { items },\n            required: true,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    function processsPostCode(field: FormField, country?: Country): FormField {\n        const { hasPostalCodes = [] } = country || {};\n\n        if (hasPostalCodes === undefined) {\n            return field;\n        }\n\n        return { ...field, required: Boolean(hasPostalCodes) };\n    }\n\n    return memoizeOne((\n        state: ConfigState = DEFAULT_STATE\n    ): FormSelector => {\n        return {\n            getShippingAddressFields: getShippingAddressFields(state),\n            getBillingAddressFields: getBillingAddressFields(state),\n        };\n    });\n}\n","import { identity, isEqual, pickBy } from 'lodash';\n\nimport Address from './address';\n\nexport default function isAddressEqual(addressA: Partial<Address>, addressB: Partial<Address>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<Address>): Partial<Address> {\n    return pickBy({\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.address1,\n        address2: address.address2,\n        city: address.city,\n        stateOrProvince: address.stateOrProvince,\n        countryCode: address.countryCode,\n        postalCode: address.postalCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    }, identity);\n}\n","import { find } from 'lodash';\n\nimport { isAddressEqual, AddressRequestBody } from '../address';\nimport { CartSelector, PhysicalItem } from '../cart';\nimport { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\n\nimport Consignment from './consignment';\nimport ConsignmentState, { DEFAULT_STATE } from './consignment-state';\nimport ShippingOption from './shipping-option';\n\nexport default interface ConsignmentSelector {\n    getConsignments(): Consignment[] | undefined;\n    getConsignmentById(id: string): Consignment | undefined;\n    getConsignmentByAddress(address: AddressRequestBody): Consignment | undefined;\n    getShippingOption(): ShippingOption | undefined;\n    getLoadError(): Error | undefined;\n    getCreateError(): Error | undefined;\n    getLoadShippingOptionsError(): Error | undefined;\n    getUnassignedItems(): PhysicalItem[];\n    getUpdateError(consignmentId?: string): Error | undefined;\n    getDeleteError(consignmentId?: string): Error | undefined;\n    getItemAssignmentError(address: AddressRequestBody): Error | undefined;\n    getUpdateShippingOptionError(consignmentId?: string): Error | undefined;\n    isLoading(): boolean;\n    isLoadingShippingOptions(): boolean;\n    isCreating(): boolean;\n    isUpdating(consignmentId?: string): boolean;\n    isDeleting(consignmentId?: string): boolean;\n    isAssigningItems(address: AddressRequestBody): boolean;\n    isUpdatingShippingOption(consignmentId?: string): boolean;\n}\n\nexport type ConsignmentSelectorFactory = (\n    state: ConsignmentState,\n    cart: CartSelector\n) => ConsignmentSelector;\n\ninterface ConsignmentSelectorDependencies {\n    cart: CartSelector;\n}\n\nexport function createConsignmentSelectorFactory(): ConsignmentSelectorFactory {\n    const getConsignments = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => () => consignments\n    );\n\n    const getConsignmentById = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => (id: string) => {\n            if (!consignments || !consignments.length) {\n                return;\n            }\n\n            return find(consignments, { id });\n        }\n    );\n\n    const getConsignmentByAddress = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => (address: AddressRequestBody) => {\n            if (!consignments || !consignments.length) {\n                return;\n            }\n\n            return find(consignments, consignment =>\n                isAddressEqual(consignment.shippingAddress, address)\n            );\n        }\n    );\n\n    const getShippingOption = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => () => {\n            if (consignments && consignments.length) {\n                return consignments[0].selectedShippingOption;\n            }\n        }\n    );\n\n    const getLoadError = createSelector(\n        (state: ConsignmentState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const getCreateError = createSelector(\n        (state: ConsignmentState) => state.errors.createError,\n        error => () => error\n    );\n\n    const getLoadShippingOptionsError = createSelector(\n        (state: ConsignmentState) => state.errors.loadShippingOptionsError,\n        error => () => error\n    );\n\n    const getUnassignedItems = createSelector(\n        getConsignments,\n        (_: ConsignmentState, { cart }: ConsignmentSelectorDependencies) => cart.getCart,\n        (getConsignments, getCart) => () => {\n            const cart = getCart();\n\n            if (!cart) {\n                return [];\n            }\n\n            const assignedLineItemIds = (getConsignments() || []).reduce(\n                (itemIds, consignment) => itemIds.concat(consignment.lineItemIds),\n                [] as string[]\n            );\n\n            return (cart.lineItems.physicalItems || []).filter(\n                item => assignedLineItemIds.indexOf(item.id as string) < 0\n            );\n        }\n    );\n\n    const getUpdateError = createSelector(\n        (state: ConsignmentState) => state.errors.updateError,\n        updateError => (consignmentId?: string) => {\n            if (consignmentId) {\n                return updateError[consignmentId];\n            }\n\n            return find(updateError);\n        }\n    );\n\n    const getDeleteError = createSelector(\n        (state: ConsignmentState) => state.errors.deleteError,\n        deleteError => (consignmentId?: string) => {\n            if (consignmentId) {\n                return deleteError[consignmentId];\n            }\n\n            return find(deleteError);\n        }\n    );\n\n    const getItemAssignmentError = createSelector(\n        getConsignmentByAddress,\n        getUpdateError,\n        getCreateError,\n        (getConsignmentByAddress, getUpdateError, getCreateError) => (address: AddressRequestBody) => {\n            const consignment = getConsignmentByAddress(address);\n\n            return consignment ? getUpdateError(consignment.id) : getCreateError();\n        }\n    );\n\n    const getUpdateShippingOptionError = createSelector(\n        (state: ConsignmentState) => state.errors.updateShippingOptionError,\n        updateShippingOptionError => (consignmentId?: string) => {\n            if (consignmentId) {\n                return updateShippingOptionError[consignmentId];\n            }\n\n            return find(updateShippingOptionError);\n        }\n    );\n\n    const isLoading = createSelector(\n        (state: ConsignmentState) => state.statuses.isLoading,\n        isLoading => () => isLoading === true\n    );\n\n    const isLoadingShippingOptions = createSelector(\n        (state: ConsignmentState) => state.statuses.isLoadingShippingOptions,\n        isLoadingShippingOptions => () => isLoadingShippingOptions === true\n    );\n\n    const isCreating = createSelector(\n        (state: ConsignmentState) => state.statuses.isCreating,\n        isCreating => () => isCreating === true\n    );\n\n    const isUpdating = createSelector(\n        (state: ConsignmentState) => state.statuses.isUpdating,\n        isUpdating => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isUpdating[consignmentId] === true;\n            }\n\n            return find(isUpdating) === true;\n        }\n    );\n\n    const isDeleting = createSelector(\n        (state: ConsignmentState) => state.statuses.isDeleting,\n        isDeleting => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isDeleting[consignmentId] === true;\n            }\n\n            return find(isDeleting) === true;\n        }\n    );\n\n    const isAssigningItems = createSelector(\n        getConsignmentByAddress,\n        isUpdating,\n        isCreating,\n        (getConsignmentByAddress, isUpdating, isCreating) => (address: AddressRequestBody) => {\n            const consignment = getConsignmentByAddress(address);\n\n            return consignment ? isUpdating(consignment.id) : isCreating();\n        }\n    );\n\n    const isUpdatingShippingOption = createSelector(\n        (state: ConsignmentState) => state.statuses.isUpdatingShippingOption,\n        isUpdatingShippingOption => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isUpdatingShippingOption[consignmentId] === true;\n            }\n\n            return find(isUpdatingShippingOption) === true;\n        }\n    );\n\n    return memoizeOne((\n        state: ConsignmentState = DEFAULT_STATE,\n        cart: CartSelector\n    ): ConsignmentSelector => {\n        return {\n            getConsignments: getConsignments(state),\n            getConsignmentById: getConsignmentById(state),\n            getConsignmentByAddress: getConsignmentByAddress(state),\n            getShippingOption: getShippingOption(state),\n            getLoadError: getLoadError(state),\n            getCreateError: getCreateError(state),\n            getLoadShippingOptionsError: getLoadShippingOptionsError(state),\n            getUnassignedItems: getUnassignedItems(state, { cart }),\n            getUpdateError: getUpdateError(state),\n            getDeleteError: getDeleteError(state),\n            getItemAssignmentError: getItemAssignmentError(state),\n            getUpdateShippingOptionError: getUpdateShippingOptionError(state),\n            isLoading: isLoading(state),\n            isLoadingShippingOptions: isLoadingShippingOptions(state),\n            isCreating: isCreating(state),\n            isUpdating: isUpdating(state),\n            isDeleting: isDeleting(state),\n            isAssigningItems: isAssigningItems(state),\n            isUpdatingShippingOption: isUpdatingShippingOption(state),\n        };\n    });\n}\n","import { createBillingAddressSelectorFactory } from '../billing';\nimport { createCartSelectorFactory } from '../cart/cart-selector';\nimport { createCheckoutButtonSelectorFactory } from '../checkout-buttons';\nimport { createFreezeProxies } from '../common/utility';\nimport { createConfigSelectorFactory } from '../config';\nimport { createCouponSelectorFactory, createGiftCertificateSelectorFactory } from '../coupon';\nimport { createCustomerSelectorFactory, createCustomerStrategySelectorFactory } from '../customer';\nimport { createFormSelectorFactory } from '../form';\nimport { createCountrySelectorFactory } from '../geography';\nimport { createOrderSelectorFactory } from '../order';\nimport { createPaymentMethodSelectorFactory, createPaymentSelectorFactory, createPaymentStrategySelectorFactory } from '../payment';\nimport { createInstrumentSelectorFactory } from '../payment/instrument';\nimport { createRemoteCheckoutSelectorFactory } from '../remote-checkout';\nimport { createConsignmentSelectorFactory, createShippingAddressSelectorFactory, createShippingCountrySelectorFactory, createShippingStrategySelectorFactory } from '../shipping';\n\nimport { createCheckoutSelectorFactory } from './checkout-selector';\nimport { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport type InternalCheckoutSelectorsFactory = (\n    state: CheckoutStoreState,\n    options?: CheckoutStoreOptions\n) => InternalCheckoutSelectors;\n\nexport function createInternalCheckoutSelectorsFactory(): InternalCheckoutSelectorsFactory {\n    const createBillingAddressSelector = createBillingAddressSelectorFactory();\n    const createCartSelector = createCartSelectorFactory();\n    const createCheckoutButtonSelector = createCheckoutButtonSelectorFactory();\n    const createConfigSelector = createConfigSelectorFactory();\n    const createCountrySelector = createCountrySelectorFactory();\n    const createCouponSelector = createCouponSelectorFactory();\n    const createCustomerSelector = createCustomerSelectorFactory();\n    const createCustomerStrategySelector = createCustomerStrategySelectorFactory();\n    const createGiftCertificateSelector = createGiftCertificateSelectorFactory();\n    const createInstrumentSelector = createInstrumentSelectorFactory();\n    const createFormSelector = createFormSelectorFactory();\n    const createPaymentMethodSelector = createPaymentMethodSelectorFactory();\n    const createPaymentStrategySelector = createPaymentStrategySelectorFactory();\n    const createRemoteCheckoutSelector = createRemoteCheckoutSelectorFactory();\n    const createShippingAddressSelector = createShippingAddressSelectorFactory();\n    const createShippingCountrySelector = createShippingCountrySelectorFactory();\n    const createShippingStrategySelector = createShippingStrategySelectorFactory();\n    const createConsignmentSelector = createConsignmentSelectorFactory();\n    const createCheckoutSelector = createCheckoutSelectorFactory();\n    const createOrderSelector = createOrderSelectorFactory();\n    const createPaymentSelector = createPaymentSelectorFactory();\n\n    return (state, options = {}) => {\n        const billingAddress = createBillingAddressSelector(state.billingAddress);\n        const cart = createCartSelector(state.cart);\n        const checkoutButton = createCheckoutButtonSelector(state.checkoutButton);\n        const config = createConfigSelector(state.config);\n        const countries = createCountrySelector(state.countries);\n        const coupons = createCouponSelector(state.coupons);\n        const customer = createCustomerSelector(state.customer);\n        const customerStrategies = createCustomerStrategySelector(state.customerStrategies);\n        const form = createFormSelector(state.config);\n        const giftCertificates = createGiftCertificateSelector(state.giftCertificates);\n        const instruments = createInstrumentSelector(state.instruments);\n        const paymentMethods = createPaymentMethodSelector(state.paymentMethods);\n        const paymentStrategies = createPaymentStrategySelector(state.paymentStrategies);\n        const remoteCheckout = createRemoteCheckoutSelector(state.remoteCheckout);\n        const shippingAddress = createShippingAddressSelector(state.consignments);\n        const shippingCountries = createShippingCountrySelector(state.shippingCountries);\n        const shippingStrategies = createShippingStrategySelector(state.shippingStrategies);\n\n        // Compose selectors\n        const consignments = createConsignmentSelector(state.consignments, cart);\n        const checkout = createCheckoutSelector(state.checkout, billingAddress, cart, consignments, coupons, customer, giftCertificates);\n        const order = createOrderSelector(state.order, billingAddress, coupons);\n        const payment = createPaymentSelector(checkout, order);\n\n        const selectors = {\n            billingAddress,\n            cart,\n            checkout,\n            checkoutButton,\n            config,\n            consignments,\n            countries,\n            coupons,\n            customer,\n            customerStrategies,\n            form,\n            giftCertificates,\n            instruments,\n            order,\n            payment,\n            paymentMethods,\n            paymentStrategies,\n            remoteCheckout,\n            shippingAddress,\n            shippingCountries,\n            shippingStrategies,\n        };\n\n        return options.shouldWarnMutation ? createFreezeProxies(selectors) : selectors;\n    };\n}\n\nexport default function createInternalCheckoutSelectors(\n    state: CheckoutStoreState,\n    options?: CheckoutStoreOptions\n): InternalCheckoutSelectors {\n    return createInternalCheckoutSelectorsFactory()(state, options);\n}\n","import { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\n\nimport BillingAddress from './billing-address';\nimport BillingAddressState, { DEFAULT_STATE } from './billing-address-state';\n\nexport default interface BillingAddressSelector {\n    getBillingAddress(): BillingAddress | undefined;\n    getUpdateError(): Error | undefined;\n    getContinueAsGuestError(): Error | undefined;\n    getLoadError(): Error | undefined;\n    isUpdating(): boolean;\n    isContinuingAsGuest(): boolean;\n    isLoading(): boolean;\n}\n\nexport type BillingAddressSelectorFactory = (state: BillingAddressState) => BillingAddressSelector;\n\nexport function createBillingAddressSelectorFactory(): BillingAddressSelectorFactory {\n    const getBillingAddress = createSelector(\n        (state: BillingAddressState) => state.data,\n        data => () => data\n    );\n\n    const getUpdateError = createSelector(\n        (state: BillingAddressState) => state.errors.updateError,\n        error => () => error\n    );\n\n    const getContinueAsGuestError = createSelector(\n        (state: BillingAddressState) => state.errors.continueAsGuestError,\n        error => () => error\n    );\n\n    const getLoadError = createSelector(\n        (state: BillingAddressState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isUpdating = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isUpdating,\n        status => () => status\n    );\n\n    const isContinuingAsGuest = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isContinuingAsGuest,\n        status => () => status\n    );\n\n    const isLoading = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: BillingAddressState = DEFAULT_STATE\n    ): BillingAddressSelector => {\n        return {\n            getBillingAddress: getBillingAddress(state),\n            getUpdateError: getUpdateError(state),\n            getContinueAsGuestError: getContinueAsGuestError(state),\n            getLoadError: getLoadError(state),\n            isUpdating: isUpdating(state),\n            isContinuingAsGuest: isContinuingAsGuest(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { find, some, values } from 'lodash';\n\nimport { createSelector } from '../common/selector';\nimport { memoize, memoizeOne } from '../common/utility';\n\nimport CheckoutButtonState, { DEFAULT_STATE } from './checkout-button-state';\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport default interface CheckoutButtonSelector {\n    getState(): CheckoutButtonState;\n    isInitializing(methodId?: CheckoutButtonMethodType): boolean;\n    isInitialized(methodId: CheckoutButtonMethodType, containerId?: string): boolean;\n    isDeinitializing(methodId?: CheckoutButtonMethodType): boolean;\n    getInitializeError(methodId?: CheckoutButtonMethodType): Error | undefined;\n    getDeinitializeError(methodId?: CheckoutButtonMethodType): Error | undefined;\n}\n\nexport type CheckoutButtonSelectorFactory = (state: CheckoutButtonState) => CheckoutButtonSelector;\n\nexport function createCheckoutButtonSelectorFactory(): CheckoutButtonSelectorFactory {\n    const getState = createSelector(\n        (state: CheckoutButtonState) => state,\n        state => () => state\n    );\n\n    const isInitializing = createSelector(\n        (state: CheckoutButtonState) => state.statuses,\n        statuses => memoize((methodId?: CheckoutButtonMethodType) => {\n            if (methodId) {\n                const method = statuses[methodId];\n\n                return (method && method.isInitializing) === true;\n            }\n\n            return some(statuses, { isInitializing: true });\n        })\n    );\n\n    const isInitialized = createSelector(\n        (state: CheckoutButtonState) => state.data,\n        data => memoize((methodId: CheckoutButtonMethodType, containerId?: string) => {\n            const method = data[methodId];\n\n            if (!method) {\n                return false;\n            }\n\n            if (!containerId) {\n                return some(method.initializedContainers, isInitialized => isInitialized === true);\n            }\n\n            return method.initializedContainers[containerId] === true;\n        })\n    );\n\n    const isDeinitializing = createSelector(\n        (state: CheckoutButtonState) => state.statuses,\n        statuses => memoize((methodId?: CheckoutButtonMethodType) => {\n            if (methodId) {\n                const method = statuses[methodId];\n\n                return (method && method.isDeinitializing) === true;\n            }\n\n            return some(statuses, { isDeinitializing: true });\n        })\n    );\n\n    const getInitializeError = createSelector(\n        (state: CheckoutButtonState) => state.errors,\n        errors => memoize((methodId?: CheckoutButtonMethodType) => {\n            const method = methodId ?\n                errors[methodId] :\n                find(values(errors), method => !!(method && method.initializeError));\n\n            return method && method.initializeError;\n        })\n    );\n\n    const getDeinitializeError = createSelector(\n        (state: CheckoutButtonState) => state.errors,\n        errors => memoize((methodId?: CheckoutButtonMethodType) => {\n            const method = methodId ?\n                errors[methodId] :\n                find(values(errors), method => !!(method && method.deinitializeError));\n\n            return method && method.deinitializeError;\n        })\n    );\n\n    return memoizeOne((\n        state: CheckoutButtonState = DEFAULT_STATE\n    ): CheckoutButtonSelector => {\n        return {\n            getState: getState(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isDeinitializing: isDeinitializing(state),\n            getInitializeError: getInitializeError(state),\n            getDeinitializeError: getDeinitializeError(state),\n        };\n    });\n}\n","import { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\n\nimport Coupon from './coupon';\nimport CouponState, { DEFAULT_STATE } from './coupon-state';\n\nexport default interface CouponSelector {\n    getCoupons(): Coupon[] | undefined;\n    getRemoveError(): RequestError | undefined;\n    getApplyError(): RequestError | undefined;\n    isApplying(): boolean;\n    isRemoving(): boolean;\n}\n\nexport type CouponSelectorFactory = (state: CouponState) => CouponSelector;\n\nexport function createCouponSelectorFactory(): CouponSelectorFactory {\n    const getCoupons = createSelector(\n        (state: CouponState) => state.data,\n        data => () => data\n    );\n\n    const getRemoveError = createSelector(\n        (state: CouponState) => state.errors.removeCouponError,\n        error => () => error\n    );\n\n    const getApplyError = createSelector(\n        (state: CouponState) => state.errors.applyCouponError,\n        error => () => error\n    );\n\n    const isApplying = createSelector(\n        (state: CouponState) => !!state.statuses.isApplyingCoupon,\n        status => () => status\n    );\n\n    const isRemoving = createSelector(\n        (state: CouponState) => !!state.statuses.isRemovingCoupon,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: CouponState = DEFAULT_STATE\n    ): CouponSelector => {\n        return {\n            getCoupons: getCoupons(state),\n            getRemoveError: getRemoveError(state),\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n            isRemoving: isRemoving(state),\n        };\n    });\n}\n","import { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\n\nimport Customer from './customer';\nimport CustomerState, { DEFAULT_STATE } from './customer-state';\n\nexport default interface CustomerSelector {\n    getCustomer(): Customer | undefined;\n}\n\nexport type CustomerSelectorFactory = (state: CustomerState) => CustomerSelector;\n\nexport function createCustomerSelectorFactory(): CustomerSelectorFactory {\n    const getCustomer = createSelector(\n        (state: CustomerState) => state.data,\n        customer => () => customer\n    );\n\n    return memoizeOne((\n        state: CustomerState = DEFAULT_STATE\n    ): CustomerSelector => {\n        return {\n            getCustomer: getCustomer(state),\n        };\n    });\n}\n","import { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\n\nimport RemoteCheckoutState, { DEFAULT_STATE, RemoteCheckoutStateData } from './remote-checkout-state';\n\nexport default interface RemoteCheckoutSelector {\n    getCheckout<TMethodId extends keyof RemoteCheckoutStateData>(\n        methodId: TMethodId\n    ): RemoteCheckoutStateData[TMethodId] | undefined;\n}\n\nexport type RemoteCheckoutSelectorFactory = (state: RemoteCheckoutState) => RemoteCheckoutSelector;\n\nexport function createRemoteCheckoutSelectorFactory(): RemoteCheckoutSelectorFactory {\n    const getCheckout = createSelector(\n        (state: RemoteCheckoutState) => state.data,\n        data => <TMethodId extends keyof RemoteCheckoutStateData>(methodId: TMethodId) => {\n            return data[methodId];\n        }\n    );\n\n    return memoizeOne((\n        state: RemoteCheckoutState = DEFAULT_STATE\n    ): RemoteCheckoutSelector => {\n        return {\n            getCheckout: getCheckout(state),\n        };\n    });\n}\n","import { Address } from '../address';\nimport { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\n\nimport ConsignmentState, { DEFAULT_STATE } from './consignment-state';\n\nexport default interface ShippingAddressSelector {\n    getShippingAddress(): Address | undefined;\n}\n\nexport type ShippingAddressSelectorFactory = (state: ConsignmentState) => ShippingAddressSelector;\n\nexport function createShippingAddressSelectorFactory(): ShippingAddressSelectorFactory {\n    const getShippingAddress = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => () => {\n            if (!consignments || !consignments[0]) {\n                return;\n            }\n\n            return consignments[0].shippingAddress;\n        }\n    );\n\n    return memoizeOne((\n        state: ConsignmentState = DEFAULT_STATE\n    ): ShippingAddressSelector => {\n        return {\n            getShippingAddress: getShippingAddress(state),\n        };\n    });\n}\n","import { find } from 'lodash';\n\nimport { CheckoutSelector } from '../checkout';\nimport { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\nimport { GatewayOrderPayment, OrderSelector } from '../order';\n\nimport PaymentMethod from './payment-method';\nimport { HOSTED } from './payment-method-types';\nimport { ACKNOWLEDGE, FINALIZE } from './payment-status-types';\n\nexport default interface PaymentSelector {\n    getPaymentId(): { providerId: string; gatewayId?: string } | undefined;\n    getPaymentStatus(): string | undefined;\n    getPaymentToken(): string | undefined;\n    getPaymentRedirectUrl(): string | undefined;\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean;\n    isPaymentDataSubmitted(paymentMethod?: PaymentMethod): boolean;\n}\n\nexport type PaymentSelectorFactory = (\n    checkout: CheckoutSelector,\n    order: OrderSelector\n) => PaymentSelector;\n\ninterface PaymentSelectorDependencies {\n    checkout: CheckoutSelector;\n    order: OrderSelector;\n}\n\nexport function createPaymentSelectorFactory(): PaymentSelectorFactory {\n    const getInternalPayment = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrderMeta,\n        getOrderMeta => () => {\n            const meta = getOrderMeta();\n\n            return meta && meta.payment;\n        }\n    );\n\n    const getGatewayPayment = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrder,\n        getOrder => () => {\n            const order = getOrder();\n\n            return find(order && order.payments, ({ providerId }) =>\n                providerId !== 'giftcertificate' && providerId !== 'storecredit'\n            ) as GatewayOrderPayment;\n        }\n    );\n\n    const getHostedPayment = createSelector(\n        ({ checkout }: PaymentSelectorDependencies) => checkout.getCheckout,\n        getCheckout => () => {\n            const checkout = getCheckout();\n\n            return find(checkout && checkout.payments, ({ providerType }) =>\n                providerType === HOSTED\n            );\n        }\n    );\n\n    const getPaymentId = createSelector(\n        getInternalPayment,\n        getHostedPayment,\n        getGatewayPayment,\n        (getInternalPayment, getHostedPayment, getGatewayPayment) => () => {\n            const internalPayment = getInternalPayment();\n\n            if (internalPayment && internalPayment.id) {\n                return {\n                    providerId: internalPayment.id,\n                    gatewayId: internalPayment.gateway,\n                };\n            }\n\n            const payment = getHostedPayment() || getGatewayPayment();\n\n            if (payment && payment.providerId) {\n                return {\n                    providerId: payment.providerId,\n                    gatewayId: payment.gatewayId,\n                };\n            }\n        }\n    );\n\n    const getPaymentStatus = createSelector(\n        getInternalPayment,\n        getHostedPayment,\n        getGatewayPayment,\n        (getInternalPayment, getHostedPayment, getGatewayPayment) => () => {\n            const internalPayment = getInternalPayment();\n\n            if (internalPayment && internalPayment.status) {\n                return internalPayment.status.replace('PAYMENT_STATUS_', '');\n            }\n\n            const payment = getHostedPayment() || getGatewayPayment();\n\n            if (payment) {\n                return payment.detail.step;\n            }\n        }\n    );\n\n    const getPaymentToken = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrderMeta,\n        getOrderMeta => () => {\n            const meta = getOrderMeta();\n\n            return meta && meta.token;\n        }\n    );\n\n    const getPaymentRedirectUrl = createSelector(\n        getInternalPayment,\n        getInternalPayment => () => {\n            const payment = getInternalPayment();\n\n            return payment && payment.redirectUrl;\n        }\n    );\n\n    const isPaymentDataRequired = createSelector(\n        ({ checkout }: PaymentSelectorDependencies) => checkout.getGrandTotal,\n        getGrandTotal => (useStoreCredit: boolean = false) => {\n            const grandTotal = getGrandTotal(useStoreCredit);\n\n            return grandTotal ? grandTotal > 0 : false;\n        }\n    );\n\n    const isPaymentDataSubmitted = createSelector(\n        getPaymentStatus,\n        getPaymentStatus => (paymentMethod?: PaymentMethod) => {\n            if (paymentMethod && paymentMethod.nonce) {\n                return true;\n            }\n\n            return getPaymentStatus() === ACKNOWLEDGE || getPaymentStatus() === FINALIZE;\n        }\n    );\n\n    return memoizeOne((\n        checkout: CheckoutSelector,\n        order: OrderSelector\n    ): PaymentSelector => {\n        return {\n            getPaymentId: getPaymentId({ checkout, order }),\n            getPaymentStatus: getPaymentStatus({ checkout, order }),\n            getPaymentToken: getPaymentToken({ checkout, order }),\n            getPaymentRedirectUrl: getPaymentRedirectUrl({ checkout, order }),\n            isPaymentDataRequired: isPaymentDataRequired({ checkout, order }),\n            isPaymentDataSubmitted: isPaymentDataSubmitted({ checkout, order }),\n        };\n    });\n}\n","import { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\n\nimport Cart from './cart';\nimport CartState, { DEFAULT_STATE } from './cart-state';\n\nexport default interface CartSelector {\n    getCart(): Cart | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type CartSelectorFactory = (state: CartState) => CartSelector;\n\nexport function createCartSelectorFactory() {\n    const getCart = createSelector(\n        (state: CartState) => state.data,\n        cart => () => cart\n    );\n\n    const getLoadError = createSelector(\n        (state: CartState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: CartState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: CartState = DEFAULT_STATE\n    ): CartSelector => {\n        return {\n            getCart: getCart(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\n\nimport Config, { ContextConfig, StoreConfig } from './config';\nimport ConfigState, { DEFAULT_STATE } from './config-state';\n\nexport default interface ConfigSelector {\n    getConfig(): Config | undefined;\n    getStoreConfig(): StoreConfig | undefined;\n    getContextConfig(): ContextConfig | undefined;\n    getExternalSource(): string | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type ConfigSelectorFactory = (state: ConfigState) => ConfigSelector;\n\nexport function createConfigSelectorFactory(): ConfigSelectorFactory {\n\n    const getConfig = createSelector(\n        (state: ConfigState) => state.data,\n        data => () => data\n    );\n\n    const getStoreConfig = createSelector(\n        (state: ConfigState) => state.data && state.data.storeConfig,\n        data => () => data\n    );\n\n    const getContextConfig = createSelector(\n        (state: ConfigState) => state.data && state.data.context,\n        data => () => data\n    );\n\n    const getExternalSource = createSelector(\n        (state: ConfigState) => state.meta && state.meta.externalSource,\n        data => () => data\n    );\n\n    const getLoadError = createSelector(\n        (state: ConfigState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: ConfigState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: ConfigState = DEFAULT_STATE\n    ): ConfigSelector => {\n        return {\n            getConfig: getConfig(state),\n            getStoreConfig: getStoreConfig(state),\n            getContextConfig: getContextConfig(state),\n            getExternalSource: getExternalSource(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\n\nimport Country from './country';\nimport CountryState, { DEFAULT_STATE } from './country-state';\n\nexport default interface CountrySelector {\n    getCountries(): Country[] | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type CountrySelectorFactory = (state: CountryState) => CountrySelector;\n\nexport function createCountrySelectorFactory(): CountrySelectorFactory {\n    const getCountries = createSelector(\n        (state: CountryState) => state.data,\n        countries => () => countries\n    );\n\n    const getLoadError = createSelector(\n        (state: CountryState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: CountryState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: CountryState = DEFAULT_STATE\n    ): CountrySelector => {\n        return {\n            getCountries: getCountries(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\n\nimport CustomerStrategyState, { DEFAULT_STATE } from './customer-strategy-state';\n\nexport default interface CustomerStrategySelector {\n    getSignInError(methodId?: string): Error | undefined;\n    getSignOutError(methodId?: string): Error | undefined;\n    getInitializeError(methodId?: string): Error | undefined;\n    getWidgetInteractionError(methodId?: string): Error | undefined;\n    isSigningIn(methodId?: string): boolean;\n    isSigningOut(methodId?: string): boolean;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n    isWidgetInteracting(methodId?: string): boolean;\n}\n\nexport type CustomerStrategySelectorFactory = (state: CustomerStrategyState) => CustomerStrategySelector;\n\nexport function createCustomerStrategySelectorFactory(): CustomerStrategySelectorFactory {\n    const getSignInError = createSelector(\n        (state: CustomerStrategyState) => state.errors.signInMethodId,\n        (state: CustomerStrategyState) => state.errors.signInError,\n        (signInMethodId, signInError) => (methodId?: string) => {\n            if (methodId && signInMethodId !== methodId) {\n                return;\n            }\n\n            return signInError;\n        }\n    );\n\n    const getSignOutError = createSelector(\n        (state: CustomerStrategyState) => state.errors.signOutMethodId,\n        (state: CustomerStrategyState) => state.errors.signOutError,\n        (signOutMethodId, signOutError) => (methodId?: string) => {\n            if (methodId && signOutMethodId !== methodId) {\n                return;\n            }\n\n            return signOutError;\n        }\n    );\n\n    const getInitializeError = createSelector(\n        (state: CustomerStrategyState) => state.errors.initializeMethodId,\n        (state: CustomerStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        }\n    );\n\n    const getWidgetInteractionError = createSelector(\n        (state: CustomerStrategyState) => state.errors.widgetInteractionMethodId,\n        (state: CustomerStrategyState) => state.errors.widgetInteractionError,\n        (widgetInteractionMethodId, widgetInteractionError) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return;\n            }\n\n            return widgetInteractionError;\n        }\n    );\n\n    const isSigningIn = createSelector(\n        (state: CustomerStrategyState) => state.statuses.signInMethodId,\n        (state: CustomerStrategyState) => state.statuses.isSigningIn,\n        (signInMethodId, isSigningIn) => (methodId?: string) => {\n            if (methodId && signInMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSigningIn;\n        }\n    );\n\n    const isSigningOut = createSelector(\n        (state: CustomerStrategyState) => state.statuses.signOutMethodId,\n        (state: CustomerStrategyState) => state.statuses.isSigningOut,\n        (signOutMethodId, isSigningOut) => (methodId?: string) => {\n            if (methodId && signOutMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSigningOut;\n        }\n    );\n\n    const isInitializing = createSelector(\n        (state: CustomerStrategyState) => state.statuses.initializeMethodId,\n        (state: CustomerStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        }\n    );\n\n    const isInitialized = createSelector(\n        (state: CustomerStrategyState) => state.data,\n        data => (methodId: string) => {\n            return !!(\n                data[methodId] &&\n                data[methodId].isInitialized\n            );\n        }\n    );\n\n    const isWidgetInteracting = createSelector(\n        (state: CustomerStrategyState) => state.statuses.widgetInteractionMethodId,\n        (state: CustomerStrategyState) => state.statuses.isWidgetInteracting,\n        (widgetInteractionMethodId, isWidgetInteracting) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isWidgetInteracting;\n        }\n    );\n\n    return memoizeOne((\n        state: CustomerStrategyState = DEFAULT_STATE\n    ): CustomerStrategySelector => {\n        return {\n            getSignInError: getSignInError(state),\n            getSignOutError: getSignOutError(state),\n            getInitializeError: getInitializeError(state),\n            getWidgetInteractionError: getWidgetInteractionError(state),\n            isSigningIn: isSigningIn(state),\n            isSigningOut: isSigningOut(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isWidgetInteracting: isWidgetInteracting(state),\n        };\n    });\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\n\nimport GiftCertificate from './gift-certificate';\nimport GiftCertificateState, { DEFAULT_STATE } from './gift-certificate-state';\n\nexport default interface GiftCertificateSelector {\n    getGiftCertificates(): GiftCertificate[] | undefined;\n    getRemoveError(): RequestError<StorefrontErrorResponseBody> | undefined;\n    getApplyError(): RequestError<StorefrontErrorResponseBody> | undefined;\n    isApplying(): boolean;\n    isRemoving(): boolean;\n}\n\nexport type GiftCertificateSelectorFactory = (state: GiftCertificateState) => GiftCertificateSelector;\n\nexport function createGiftCertificateSelectorFactory(): GiftCertificateSelectorFactory {\n    const getGiftCertificates = createSelector(\n        (state: GiftCertificateState) => state.data,\n        data => () => data\n    );\n\n    const getRemoveError = createSelector(\n        (state: GiftCertificateState) => state.errors.removeGiftCertificateError,\n        error => () => error\n    );\n\n    const getApplyError = createSelector(\n        (state: GiftCertificateState) => state.errors.applyGiftCertificateError,\n        error => () => error\n    );\n\n    const isApplying = createSelector(\n        (state: GiftCertificateState) => !!state.statuses.isApplyingGiftCertificate,\n        status => () => status\n    );\n\n    const isRemoving = createSelector(\n        (state: GiftCertificateState) => !!state.statuses.isRemovingGiftCertificate,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: GiftCertificateState = DEFAULT_STATE\n    ): GiftCertificateSelector => {\n        return {\n            getGiftCertificates: getGiftCertificates(state),\n            getRemoveError: getRemoveError(state),\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n            isRemoving: isRemoving(state),\n        };\n    });\n}\n","import { createSelector } from '../../common/selector';\nimport { memoizeOne } from '../../common/utility';\n\nimport Instrument from './instrument';\nimport InstrumentState, { DEFAULT_STATE, InstrumentMeta } from './instrument-state';\n\nexport default interface InstrumentSelector {\n    getInstruments(): Instrument[] | undefined;\n    getInstrumentsMeta(): InstrumentMeta | undefined;\n    getLoadError(): Error | undefined;\n    getDeleteError(instrumentId?: string): Error | undefined;\n    isLoading(): boolean ;\n    isDeleting(instrumentId?: string): boolean;\n}\n\nexport type InstrumentSelectorFactory = (state: InstrumentState) => InstrumentSelector;\n\nexport function createInstrumentSelectorFactory(): InstrumentSelectorFactory {\n    const getInstruments = createSelector(\n        (state: InstrumentState) => state.data,\n        instruments => () => instruments\n    );\n\n    const getInstrumentsMeta = createSelector(\n        (state: InstrumentState) => state.meta,\n        meta => () => meta\n    );\n\n    const getLoadError = createSelector(\n        (state: InstrumentState) => state.errors.loadError,\n        loadError => () => loadError\n    );\n\n    const getDeleteError = createSelector(\n        (state: InstrumentState) => state.errors.failedInstrument,\n        (state: InstrumentState) => state.errors.deleteError,\n        (failedInstrument, deleteError) => (instrumentId?: string) => {\n            if (instrumentId && failedInstrument !== instrumentId) {\n                return;\n            }\n\n            return deleteError;\n        }\n    );\n\n    const isLoading = createSelector(\n        (state: InstrumentState) => state.statuses.isLoading,\n        isLoading => () => !!isLoading\n    );\n\n    const isDeleting = createSelector(\n        (state: InstrumentState) => state.statuses.deletingInstrument,\n        (state: InstrumentState) => state.statuses.isDeleting,\n        (deletingInstrument, isDeleting) => (instrumentId?: string) => {\n            if (instrumentId && deletingInstrument !== instrumentId) {\n                return false;\n            }\n\n            return !!isDeleting;\n        }\n    );\n\n    return memoizeOne((\n        state: InstrumentState = DEFAULT_STATE\n    ): InstrumentSelector => {\n        return {\n            getInstruments: getInstruments(state),\n            getInstrumentsMeta: getInstrumentsMeta(state),\n            getLoadError: getLoadError(state),\n            getDeleteError: getDeleteError(state),\n            isLoading: isLoading(state),\n            isDeleting: isDeleting(state),\n        };\n    });\n}\n","import { find } from 'lodash';\n\nimport { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { DEFAULT_STATE } from './payment-method-state';\n\nexport default interface PaymentMethodSelector {\n    getPaymentMethods(): PaymentMethod[] | undefined;\n    getPaymentMethodsMeta(): PaymentMethodMeta | undefined;\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined;\n    getLoadError(): Error | undefined;\n    getLoadMethodError(methodId?: string): Error | undefined;\n    isLoading(): boolean;\n    isLoadingMethod(methodId?: string): boolean;\n}\n\nexport type PaymentMethodSelectorFactory = (state: PaymentMethodState) => PaymentMethodSelector;\n\nexport function createPaymentMethodSelectorFactory(): PaymentMethodSelectorFactory {\n    const getPaymentMethods = createSelector(\n        (state: PaymentMethodState) => state.data,\n        paymentMethods => () => paymentMethods\n    );\n\n    const getPaymentMethodsMeta = createSelector(\n        (state: PaymentMethodState) => state.meta,\n        meta => () => meta\n    );\n\n    const getPaymentMethod = createSelector(\n        (state: PaymentMethodState) => state.data,\n        paymentMethods => (methodId: string, gatewayId?: string) => {\n            return gatewayId ?\n                find(paymentMethods, { id: methodId, gateway: gatewayId }) :\n                find(paymentMethods, { id: methodId });\n        }\n    );\n\n    const getLoadError = createSelector(\n        (state: PaymentMethodState) => state.errors.loadError,\n        loadError => () => loadError\n    );\n\n    const getLoadMethodError = createSelector(\n        (state: PaymentMethodState) => state.errors.loadMethodId,\n        (state: PaymentMethodState) => state.errors.loadMethodError,\n        (loadMethodId, loadMethodError) => (methodId?: string) => {\n            if (methodId && loadMethodId !== methodId) {\n                return;\n            }\n\n            return loadMethodError;\n        }\n    );\n\n    const isLoading = createSelector(\n        (state: PaymentMethodState) => state.statuses.isLoading,\n        isLoading => () => !!isLoading\n    );\n\n    const isLoadingMethod = createSelector(\n        (state: PaymentMethodState) => state.statuses.loadMethodId,\n        (state: PaymentMethodState) => state.statuses.isLoadingMethod,\n        (loadMethodId, isLoadingMethod) => (methodId?: string) => {\n            if (methodId && loadMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isLoadingMethod;\n        }\n    );\n\n    return memoizeOne((\n        state: PaymentMethodState = DEFAULT_STATE\n    ): PaymentMethodSelector => {\n        return {\n            getPaymentMethods: getPaymentMethods(state),\n            getPaymentMethodsMeta: getPaymentMethodsMeta(state),\n            getPaymentMethod: getPaymentMethod(state),\n            getLoadError: getLoadError(state),\n            getLoadMethodError: getLoadMethodError(state),\n            isLoading: isLoading(state),\n            isLoadingMethod: isLoadingMethod(state),\n        };\n    });\n}\n","import { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\n\nimport PaymentStrategyState, { DEFAULT_STATE } from './payment-strategy-state';\n\nexport default interface PaymentStrategySelector {\n    getInitializeError(methodId?: string): Error | undefined;\n    getExecuteError(methodId?: string): Error | undefined;\n    getFinalizeError(methodId?: string): Error | undefined;\n    getWidgetInteractingError(methodId?: string): Error | undefined;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n    isExecuting(methodId?: string): boolean;\n    isFinalizing(methodId?: string): boolean;\n    isWidgetInteracting(methodId?: string): boolean;\n}\n\nexport type PaymentStrategySelectorFactory = (state: PaymentStrategyState) => PaymentStrategySelector;\n\nexport function createPaymentStrategySelectorFactory(): PaymentStrategySelectorFactory {\n    const getInitializeError = createSelector(\n        (state: PaymentStrategyState) => state.errors.initializeMethodId,\n        (state: PaymentStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        }\n    );\n\n    const getExecuteError = createSelector(\n        (state: PaymentStrategyState) => state.errors.executeMethodId,\n        (state: PaymentStrategyState) => state.errors.executeError,\n        (executeMethodId, executeError) => (methodId?: string) => {\n            if (methodId && executeMethodId !== methodId) {\n                return;\n            }\n\n            return executeError;\n        }\n    );\n\n    const getFinalizeError = createSelector(\n        (state: PaymentStrategyState) => state.errors.finalizeMethodId,\n        (state: PaymentStrategyState) => state.errors.finalizeError,\n        (finalizeMethodId, finalizeError) => (methodId?: string) => {\n            if (methodId && finalizeMethodId !== methodId) {\n                return;\n            }\n\n            return finalizeError;\n        }\n    );\n\n    const getWidgetInteractingError = createSelector(\n        (state: PaymentStrategyState) => state.errors.widgetInteractionMethodId,\n        (state: PaymentStrategyState) => state.errors.widgetInteractionError,\n        (widgetInteractionMethodId, widgetInteractionError) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return;\n            }\n\n            return widgetInteractionError;\n        }\n    );\n\n    const isInitializing = createSelector(\n        (state: PaymentStrategyState) => state.statuses.initializeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        }\n    );\n\n    const isInitialized = createSelector(\n        (state: PaymentStrategyState) => state.data,\n        data => (methodId: string) => {\n            return !!(\n                data[methodId] &&\n                data[methodId].isInitialized\n            );\n        }\n    );\n\n    const isExecuting = createSelector(\n        (state: PaymentStrategyState) => state.statuses.executeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isExecuting,\n        (executeMethodId, isExecuting) => (methodId?: string) => {\n            if (methodId && executeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isExecuting;\n        }\n    );\n\n    const isFinalizing = createSelector(\n        (state: PaymentStrategyState) => state.statuses.finalizeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isFinalizing,\n        (finalizeMethodId, isFinalizing) => (methodId?: string) => {\n            if (methodId && finalizeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isFinalizing;\n        }\n    );\n\n    const isWidgetInteracting = createSelector(\n        (state: PaymentStrategyState) => state.statuses.widgetInteractionMethodId,\n        (state: PaymentStrategyState) => state.statuses.isWidgetInteracting,\n        (widgetInteractionMethodId, isWidgetInteracting) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isWidgetInteracting;\n        }\n    );\n\n    return memoizeOne((\n        state: PaymentStrategyState = DEFAULT_STATE\n    ): PaymentStrategySelector => {\n        return {\n            getInitializeError: getInitializeError(state),\n            getExecuteError: getExecuteError(state),\n            getFinalizeError: getFinalizeError(state),\n            getWidgetInteractingError: getWidgetInteractingError(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isExecuting: isExecuting(state),\n            isFinalizing: isFinalizing(state),\n            isWidgetInteracting: isWidgetInteracting(state),\n        };\n    });\n}\n","import { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\nimport { Country } from '../geography';\n\nimport ShippingCountryState, { DEFAULT_STATE } from './shipping-country-state';\n\nexport default interface ShippingCountrySelector {\n    getShippingCountries(): Country[] | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type ShippingCountrySelectorFactory = (state: ShippingCountryState) => ShippingCountrySelector;\n\nexport function createShippingCountrySelectorFactory(): ShippingCountrySelectorFactory {\n    const getShippingCountries = createSelector(\n        (state: ShippingCountryState) => state.data,\n        data => () => data\n    );\n\n    const getLoadError = createSelector(\n        (state: ShippingCountryState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: ShippingCountryState) => state.statuses.isLoading,\n        status => () => !!status\n    );\n\n    return memoizeOne((\n        state: ShippingCountryState = DEFAULT_STATE\n    ): ShippingCountrySelector => {\n        return {\n            getShippingCountries: getShippingCountries(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\n\nimport ShippingStrategyState, { DEFAULT_STATE } from './shipping-strategy-state';\n\nexport default interface ShippingStrategySelector {\n    getUpdateAddressError(methodId?: string): Error | undefined;\n    getSelectOptionError(methodId?: string): Error | undefined;\n    getInitializeError(methodId?: string): Error | undefined;\n    isUpdatingAddress(methodId?: string): boolean;\n    isSelectingOption(methodId?: string): boolean;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n}\n\nexport type ShippingStrategySelectorFactory = (state: ShippingStrategyState) => ShippingStrategySelector;\n\nexport function createShippingStrategySelectorFactory(): ShippingStrategySelectorFactory {\n    const getUpdateAddressError = createSelector(\n        (state: ShippingStrategyState) => state.errors.updateAddressMethodId,\n        (state: ShippingStrategyState) => state.errors.updateAddressError,\n        (updateAddressMethodId, updateAddressError) => (methodId?: string) => {\n            if (methodId && updateAddressMethodId !== methodId) {\n                return;\n            }\n\n            return updateAddressError;\n        }\n    );\n\n    const getSelectOptionError = createSelector(\n        (state: ShippingStrategyState) => state.errors.selectOptionMethodId,\n        (state: ShippingStrategyState) => state.errors.selectOptionError,\n        (selectOptionMethodId, selectOptionError) => (methodId?: string) => {\n            if (methodId && selectOptionMethodId !== methodId) {\n                return;\n            }\n\n            return selectOptionError;\n        }\n    );\n\n    const getInitializeError = createSelector(\n        (state: ShippingStrategyState) => state.errors.initializeMethodId,\n        (state: ShippingStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        }\n    );\n\n    const isUpdatingAddress = createSelector(\n        (state: ShippingStrategyState) => state.statuses.updateAddressMethodId,\n        (state: ShippingStrategyState) => state.statuses.isUpdatingAddress,\n        (updateAddressMethodId, isUpdatingAddress) => (methodId?: string) => {\n            if (methodId && updateAddressMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isUpdatingAddress;\n        }\n    );\n\n    const isSelectingOption = createSelector(\n        (state: ShippingStrategyState) => state.statuses.selectOptionMethodId,\n        (state: ShippingStrategyState) => state.statuses.isSelectingOption,\n        (selectOptionMethodId, isSelectingOption) => (methodId?: string) => {\n            if (methodId && selectOptionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSelectingOption;\n        }\n    );\n\n    const isInitializing = createSelector(\n        (state: ShippingStrategyState) => state.statuses.initializeMethodId,\n        (state: ShippingStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        }\n    );\n\n    const isInitialized = createSelector(\n        (state: ShippingStrategyState) => state.data,\n        data => (methodId: string) => {\n            return !!(\n                data[methodId] &&\n                data[methodId].isInitialized\n            );\n        }\n    );\n\n    return memoizeOne((\n        state: ShippingStrategyState = DEFAULT_STATE\n    ): ShippingStrategySelector => {\n        return {\n            getUpdateAddressError: getUpdateAddressError(state),\n            getSelectOptionError: getSelectOptionError(state),\n            getInitializeError: getInitializeError(state),\n            isUpdatingAddress: isUpdatingAddress(state),\n            isSelectingOption: isSelectingOption(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n        };\n    });\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector } from '../customer';\nimport { ConsignmentSelector } from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutState, { DEFAULT_STATE } from './checkout-state';\n\nexport default interface CheckoutSelector {\n    getCheckout(): Checkout | undefined;\n    getGrandTotal(useStoreCredit?: boolean): number | undefined;\n    getLoadError(): Error | undefined;\n    getUpdateError(): Error | undefined;\n    isLoading(): boolean;\n    isUpdating(): boolean;\n}\n\nexport type CheckoutSelectorFactory = (\n    state: CheckoutState,\n    billingAddress: BillingAddressSelector,\n    cart: CartSelector,\n    consignments: ConsignmentSelector,\n    coupons: CouponSelector,\n    customer: CustomerSelector,\n    giftCertificates: GiftCertificateSelector\n) => CheckoutSelector;\n\ninterface CheckoutSelectorDependencies {\n    billingAddress: BillingAddressSelector;\n    cart: CartSelector;\n    consignments: ConsignmentSelector;\n    coupons: CouponSelector;\n    customer: CustomerSelector;\n    giftCertificates: GiftCertificateSelector;\n}\n\nexport function createCheckoutSelectorFactory(): CheckoutSelectorFactory {\n    const getCheckout = createSelector(\n        (state: CheckoutState) => state.data,\n        (_: CheckoutState, { billingAddress }: CheckoutSelectorDependencies) => billingAddress.getBillingAddress,\n        (_: CheckoutState, { cart }: CheckoutSelectorDependencies) => cart.getCart,\n        (_: CheckoutState, { customer }: CheckoutSelectorDependencies) => customer.getCustomer,\n        (_: CheckoutState, { consignments }: CheckoutSelectorDependencies) => consignments.getConsignments,\n        (_: CheckoutState, { coupons }: CheckoutSelectorDependencies) => coupons.getCoupons,\n        (_: CheckoutState, { giftCertificates }: CheckoutSelectorDependencies) => giftCertificates.getGiftCertificates,\n        (data, getBillingAddress, getCart, getCustomer, getConsignments, getCoupons, getGiftCertificates) => () => {\n            const billingAddress = getBillingAddress();\n            const cart = getCart();\n            const customer = getCustomer();\n            const consignments = getConsignments() || [];\n            const coupons = getCoupons() || [];\n            const giftCertificates = getGiftCertificates() || [];\n\n            if (!data || !cart || !customer) {\n                return;\n            }\n\n            return {\n                ...data,\n                billingAddress,\n                cart,\n                customer,\n                consignments,\n                coupons,\n                giftCertificates,\n            };\n        }\n    );\n\n    const getGrandTotal = createSelector(\n        getCheckout,\n        getCheckout => (useStoreCredit?: boolean) => {\n            const checkout = getCheckout();\n\n            if (!checkout) {\n                return;\n            }\n\n            const grandTotal = checkout.grandTotal || 0;\n            const storeCredit = checkout.customer.storeCredit || 0;\n\n            return useStoreCredit ? Math.max(grandTotal - storeCredit, 0) : grandTotal;\n        }\n    );\n\n    const getLoadError = createSelector(\n        (state: CheckoutState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const getUpdateError = createSelector(\n        (state: CheckoutState) => state.errors.updateError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: CheckoutState) => state.statuses.isLoading,\n        isLoading => () => isLoading === true\n    );\n\n    const isUpdating = createSelector(\n        (state: CheckoutState) => state.statuses.isUpdating,\n        isUpdating => () => isUpdating === true\n    );\n\n    return memoizeOne((\n        state: CheckoutState = DEFAULT_STATE,\n        billingAddress: BillingAddressSelector,\n        cart: CartSelector,\n        consignments: ConsignmentSelector,\n        coupons: CouponSelector,\n        customer: CustomerSelector,\n        giftCertificates: GiftCertificateSelector\n    ): CheckoutSelector => {\n        return {\n            getCheckout: getCheckout(state, {\n                billingAddress,\n                cart,\n                consignments,\n                coupons,\n                customer,\n                giftCertificates,\n            }),\n            getGrandTotal: getGrandTotal(state, {\n                billingAddress,\n                cart,\n                consignments,\n                coupons,\n                customer,\n                giftCertificates,\n            }),\n            getLoadError: getLoadError(state),\n            getUpdateError: getUpdateError(state),\n            isLoading: isLoading(state),\n            isUpdating: isUpdating(state),\n        };\n    });\n}\n","import { BillingAddressSelector } from '../billing';\nimport { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\nimport { CouponSelector } from '../coupon';\n\nimport Order from './order';\nimport OrderState, { DEFAULT_STATE, OrderMetaState } from './order-state';\n\nexport default interface OrderSelector {\n    getOrder(): Order | undefined;\n    getOrderMeta(): OrderMetaState | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type OrderSelectorFactory = (\n    state: OrderState,\n    billingAddress: BillingAddressSelector,\n    coupons: CouponSelector\n) => OrderSelector;\n\ninterface OrderSelectorDependencies {\n    billingAddress: BillingAddressSelector;\n    coupons: CouponSelector;\n}\n\nexport function createOrderSelectorFactory(): OrderSelectorFactory {\n    const getOrder = createSelector(\n        (state: OrderState) => state.data,\n        (_: OrderState, { billingAddress }: OrderSelectorDependencies) => billingAddress.getBillingAddress(),\n        (_: OrderState, { coupons }: OrderSelectorDependencies) => coupons.getCoupons(),\n        (data, billingAddress, coupons = []) => () => {\n            if (!data || !billingAddress) {\n                return;\n            }\n\n            return {\n                ...data,\n                billingAddress,\n                coupons,\n            };\n        }\n    );\n\n    const getOrderMeta = createSelector(\n        (state: OrderState) => state.meta,\n        meta => () => meta\n    );\n\n    const getLoadError = createSelector(\n        (state: OrderState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: OrderState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: OrderState = DEFAULT_STATE,\n        billingAddress: BillingAddressSelector,\n        coupons: CouponSelector\n    ): OrderSelector => {\n        return {\n            getOrder: getOrder(state, { billingAddress, coupons }),\n            getOrderMeta: getOrderMeta(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { createDataStore } from '@bigcommerce/data-store';\n\nimport { createRequestErrorFactory } from '../common/error';\n\nimport CheckoutStore, { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport createActionTransformer from './create-action-transformer';\nimport createCheckoutStoreReducer from './create-checkout-store-reducer';\nimport { createInternalCheckoutSelectorsFactory } from './create-internal-checkout-selectors';\n\nexport default function createCheckoutStore(\n    initialState: Partial<CheckoutStoreState> = {},\n    options?: CheckoutStoreOptions\n): CheckoutStore {\n    const actionTransformer = createActionTransformer(createRequestErrorFactory());\n    const createInternalCheckoutSelectors = createInternalCheckoutSelectorsFactory();\n    const stateTransformer = (state: CheckoutStoreState) => createInternalCheckoutSelectors(state);\n\n    return createDataStore(\n        createCheckoutStoreReducer(),\n        initialState,\n        { actionTransformer, stateTransformer, ...options }\n    );\n}\n","import { Action } from '@bigcommerce/data-store';\nimport { from, Observable, Subscribable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { RequestErrorFactory } from '../common/error';\n\nexport default function createActionTransformer(\n    requestErrorFactory: RequestErrorFactory\n): (action: Subscribable<Action>) => Observable<Action> {\n    return action$ => from(action$).pipe(catchError<Action, never>(action => {\n        if (action instanceof Error || action.payload instanceof Error) {\n            throw action;\n        }\n\n        if (isResponse(action.payload)) {\n            const message = action.payload.body && action.payload.body.detail;\n\n            throw { ...action, payload: requestErrorFactory.createError(action.payload, message) };\n        }\n\n        throw action;\n    }));\n}\n\nfunction isResponse(object: any) {\n    if (!object || typeof object !== 'object') {\n        return false;\n    }\n\n    return ['body', 'headers', 'status', 'statusText'].every(key =>\n        object.hasOwnProperty(key)\n    );\n}\n","import { PaymentMethodInvalidError } from '../../payment/errors';\n\nimport { UnrecoverableError } from './errors';\nimport RequestErrorFactory from './request-error-factory';\n\nexport default function createRequestErrorFactory(): RequestErrorFactory {\n    const factory = new RequestErrorFactory();\n\n    const unrecoverableErrorTypes = [\n        'catalog_only',\n        'empty_cart',\n        'invalid_order_id',\n        'invalid_order_token',\n        'missing_order_token',\n        'missing_provider_token',\n        'missing_shipping_method',\n        'order_completion_error',\n        'order_could_not_be_finalized_error',\n        'order_create_failed',\n        'provider_fatal_error',\n        'provider_setup_error',\n        'stock_too_low',\n    ];\n\n    unrecoverableErrorTypes.forEach(type => {\n        factory.register(type, (response, message) => new UnrecoverableError(response, message));\n    });\n\n    factory.register('invalid_payment_provider', response => new PaymentMethodInvalidError(response));\n    factory.register('payment_config_not_found', response => new PaymentMethodInvalidError(response));\n\n    return factory;\n}\n","import { combineReducers, Action, Reducer } from '@bigcommerce/data-store';\n\nimport { billingAddressReducer } from '../billing';\nimport { cartReducer } from '../cart';\nimport { checkoutButtonReducer } from '../checkout-buttons';\nimport { configReducer } from '../config';\nimport { couponReducer, giftCertificateReducer } from '../coupon';\nimport { customerReducer, customerStrategyReducer } from '../customer';\nimport { countryReducer } from '../geography';\nimport { orderReducer } from '../order';\nimport { paymentMethodReducer, paymentReducer, paymentStrategyReducer } from '../payment';\nimport { instrumentReducer } from '../payment/instrument';\nimport { remoteCheckoutReducer } from '../remote-checkout';\nimport { consignmentReducer, shippingCountryReducer, shippingStrategyReducer } from '../shipping';\n\nimport checkoutReducer from './checkout-reducer';\nimport CheckoutStoreState from './checkout-store-state';\n\nexport default function createCheckoutStoreReducer(): Reducer<CheckoutStoreState, Action> {\n    return combineReducers({\n        billingAddress: billingAddressReducer,\n        cart: cartReducer,\n        checkout: checkoutReducer,\n        checkoutButton: checkoutButtonReducer,\n        config: configReducer,\n        consignments: consignmentReducer,\n        countries: countryReducer,\n        coupons: couponReducer,\n        customer: customerReducer,\n        customerStrategies: customerStrategyReducer,\n        giftCertificates: giftCertificateReducer,\n        instruments: instrumentReducer,\n        order: orderReducer,\n        payment: paymentReducer,\n        paymentMethods: paymentMethodReducer,\n        paymentStrategies: paymentStrategyReducer,\n        remoteCheckout: remoteCheckoutReducer,\n        shippingCountries: shippingCountryReducer,\n        shippingStrategies: shippingStrategyReducer,\n    });\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../../common/error';\nimport { RequestError } from '../../common/error/errors';\n\nexport default class CheckoutNotAvailableError extends RequestError {\n    constructor(response: Response<InternalErrorResponseBody>) {\n        super(response, { message: response.body.title });\n\n        this.name = 'CheckoutNotAvailableError';\n        this.type = 'checkout_not_available';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nimport Checkout, { CheckoutRequestBody } from './checkout';\nimport CHECKOUT_DEFAULT_INCLUDES from './checkout-default-includes';\nimport CheckoutParams from './checkout-params';\nimport { CheckoutNotAvailableError } from './errors';\n\nexport default class CheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadCheckout(id: string, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.get(url, {\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    ...(params && params.include || []),\n                ]),\n            },\n            headers,\n            timeout,\n        }).catch(error => {\n            if (error.status >= 400 && error.status < 500) {\n                throw new CheckoutNotAvailableError(error);\n            }\n\n            throw error;\n        });\n    }\n\n    updateCheckout(id: string, body: CheckoutRequestBody, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, {\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    ...(params && params.include || []),\n                ]),\n            },\n            body,\n            headers,\n            timeout,\n        });\n    }\n}\n","import Coupon from './coupon';\nimport InternalCoupon from './internal-coupon';\n\nconst couponTypes = [\n    'per_item_discount',\n    'percentage_discount',\n    'per_total_discount',\n    'shipping_discount',\n    'free_shipping',\n];\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCoupon(coupon: Coupon): InternalCoupon {\n    return {\n        code: coupon.code,\n        discount: coupon.displayName,\n        discountType: couponTypes.indexOf(coupon.couponType),\n    };\n}\n","import { isBillingAddressLike } from '../billing';\nimport BillingAddress from '../billing/billing-address';\nimport { Consignment } from '../shipping';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalAddress(address: Address | BillingAddress, consignments?: Consignment[]): InternalAddress {\n    let addressId;\n\n    if (isBillingAddressLike(address)) {\n        addressId = address.id;\n    } else if (consignments && consignments.length) {\n        addressId = consignments[0].id;\n    }\n\n    return {\n        id: addressId,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        addressLine1: address.address1,\n        addressLine2: address.address2,\n        city: address.city,\n        province: address.stateOrProvince,\n        provinceCode: address.stateOrProvinceCode,\n        postCode: address.postalCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import Address from '../address/address';\n\nimport BillingAddress from './billing-address';\n\nexport default function isBillingAddressLike(address: Address): address is BillingAddress {\n    const billingAddress = address as BillingAddress;\n\n    return typeof billingAddress.id !== 'undefined';\n}\n","import { memoize } from 'lodash';\n\nimport { bindDecorator, isEqual, isPrivate, CacheKeyResolver } from '../utility';\n\n/**\n * Decorates a class by patching all of its methods to cache their return values\n * and return them if they are called again with the same set of parameters. The\n * decorator also binds all the methods to the calling instance so it can be\n * destructed.\n */\nexport default function selectorDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                selectorMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\nfunction selectorMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let resolver = new CacheKeyResolver();\n    let method = descriptor.value;\n    let memoizedMethod = memoize(method, (...args) => resolver.getKey(...args));\n\n    return bindDecorator(target, key, {\n        get() {\n            const value = ((...args: any[]) => {\n                const cachedValue = memoizedMethod.call(this, ...args);\n\n                if (resolver.getUsedCount(...args) === 1) {\n                    return cachedValue;\n                }\n\n                const newValue = method.call(this, ...args);\n\n                if (isEqual(newValue, cachedValue, { keyFilter: key => !isPrivate(key) })) {\n                    return cachedValue;\n                }\n\n                memoizedMethod.cache.set(resolver.getKey(...args), newValue);\n\n                return newValue;\n            }) as T;\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n        set(value) {\n            resolver = new CacheKeyResolver();\n            method = value;\n            memoizedMethod = memoize(method, (...args) => resolver.getKey(...args));\n        },\n    });\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\ntype Method = (...args: any[]) => any;\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonErrorSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    getInitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getInitializeError(methodId);\n    }\n\n    getDeinitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getDeinitializeError(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonStatusSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    isInitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isInitializing(methodId);\n    }\n\n    isDeinitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isDeinitializing(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\n\nimport CheckoutButtonErrorSelector from './checkout-button-error-selector';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStatusSelector from './checkout-button-status-selector';\n\nexport default function createCheckoutButtonSelectors(selectors: InternalCheckoutSelectors): CheckoutButtonSelectors {\n    const errors = new CheckoutButtonErrorSelector(selectors);\n    const statuses = new CheckoutButtonStatusSelector(selectors);\n\n    return {\n        errors,\n        statuses,\n    };\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../checkout';\nimport { isElementId, setUniqueElementId } from '../common/dom';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonSelectors from './create-checkout-button-selectors';\n\n@bind\nexport default class CheckoutButtonInitializer {\n    private _state: CheckoutButtonSelectors;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _buttonStrategyActionCreator: CheckoutButtonStrategyActionCreator\n    ) {\n        this._state = createCheckoutButtonSelectors(this._store.getState());\n\n        this._store.subscribe(state => {\n            this._state = createCheckoutButtonSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * state. You can query the state by calling any of its getter methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.errors.getInitializeButtonError());\n     * console.log(state.statuses.isInitializingButton());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutButtonSelectors {\n        return this._state;\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the current state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.statuses.isInitializingButton());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.errors.getInitializeButtonError();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.errors.getInitializeButtonError())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutButtonSelectors) => void,\n        ...filters: Array<(state: CheckoutButtonSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            state => state.checkoutButton.getState(),\n            ...filters.map(filter => (state: InternalCheckoutSelectors) => filter(createCheckoutButtonSelectors(state)))\n        );\n    }\n\n    /**\n     * Initializes the checkout button of a payment method.\n     *\n     * When the checkout button is initialized, it will be inserted into the DOM,\n     * ready to be interacted with by the customer.\n     *\n     * ```js\n     * initializer.initializeButton({\n     *     methodId: 'braintreepaypal',\n     *     containerId: 'checkoutButton',\n     *     braintreepaypal: {\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeButton(options: CheckoutButtonInitializeOptions): Promise<CheckoutButtonSelectors> {\n        const containerIds = isElementId(options.containerId) ?\n            [options.containerId] :\n            setUniqueElementId(options.containerId, `${options.methodId}-container`);\n\n        return Promise.all(\n            containerIds.map(containerId => {\n                const action = this._buttonStrategyActionCreator.initialize({ ...options, containerId });\n                const queueId = `checkoutButtonStrategy:${options.methodId}:${containerId}`;\n\n                return this._store.dispatch(action, { queueId });\n            })\n        )\n            .then(() => this.getState());\n    }\n\n    /**\n     * De-initializes the checkout button by performing any necessary clean-ups.\n     *\n     * ```js\n     * await service.deinitializeButton({\n     *     methodId: 'braintreepaypal',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeButton(options: CheckoutButtonOptions): Promise<CheckoutButtonSelectors> {\n        const action = this._buttonStrategyActionCreator.deinitialize(options);\n        const queueId = `checkoutButtonStrategy:${options.methodId}`;\n\n        return this._store.dispatch(action, { queueId })\n            .then(() => this.getState());\n    }\n}\n","enum CheckoutButtonMethodType {\n    BRAINTREE_PAYPAL = 'braintreepaypal',\n    BRAINTREE_PAYPAL_CREDIT = 'braintreepaypalcredit',\n    GOOGLEPAY_BRAINTREE = 'googlepaybraintree',\n    GOOGLEPAY_STRIPE = 'googlepaystripe',\n    MASTERPASS = 'masterpass',\n    PAYPALEXPRESS = 'paypalexpress',\n}\n\nexport default CheckoutButtonMethodType;\n","export default function isElementId(id: string): boolean {\n    return /^\\w[\\w\\-\\:\\.]*$/.test(id);\n}\n","import { uniqueId } from 'lodash';\n\nimport { InvalidArgumentError } from '../error/errors';\n\nexport default function setUniqueElementId(selector: string, idPrefix: string): string[] {\n    const containers = document.querySelectorAll(selector);\n\n    if (!containers.length) {\n        throw new InvalidArgumentError(`Unable to find any element with the specified selector: ${selector}`);\n    }\n\n    return Array.prototype.slice.call(containers)\n        .map((container: HTMLElement) => {\n            if (!container.id) {\n                container.id = uniqueId(idPrefix);\n            }\n\n            return container.id;\n        });\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator } from '../payment';\n\nimport { CheckoutButtonActionType, DeinitializeButtonAction, InitializeButtonAction } from './checkout-button-actions';\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport { CheckoutButtonStrategy } from './strategies';\n\nexport default class CheckoutButtonStrategyActionCreator {\n    constructor(\n        private _registry: Registry<CheckoutButtonStrategy>,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): ThunkAction<InitializeButtonAction, InternalCheckoutSelectors> {\n        return store => {\n            const meta = { methodId: options.methodId, containerId: options.containerId };\n\n            if (store.getState().checkoutButton.isInitialized(options.methodId, options.containerId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(CheckoutButtonActionType.InitializeButtonRequested, undefined, meta)),\n                this._paymentMethodActionCreator.loadPaymentMethod(options.methodId, { timeout: options.timeout, useCache: true }),\n                defer(() => this._registry.get(options.methodId).initialize(options)\n                    .then(() => createAction(CheckoutButtonActionType.InitializeButtonSucceeded, undefined, meta)))\n            ).pipe(\n                catchError(error => throwErrorAction(CheckoutButtonActionType.InitializeButtonFailed, error, meta))\n            );\n        };\n    }\n\n    deinitialize(options: CheckoutButtonOptions): ThunkAction<DeinitializeButtonAction, InternalCheckoutSelectors> {\n        return store => {\n            const meta = { methodId: options.methodId };\n\n            if (!store.getState().checkoutButton.isInitialized(options.methodId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(CheckoutButtonActionType.DeinitializeButtonRequested, undefined, meta)),\n                defer(() => this._registry.get(options.methodId).deinitialize()\n                    .then(() => createAction(CheckoutButtonActionType.DeinitializeButtonSucceeded, undefined, meta)))\n            ).pipe(\n                catchError(error => throwErrorAction(CheckoutButtonActionType.DeinitializeButtonFailed, error, meta))\n            );\n        };\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { Address, LegacyAddress } from '../../../address';\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { PaymentMethod } from '../../../payment';\nimport { BraintreeAddress, BraintreeError, BraintreePaypalCheckout, BraintreeSDKCreator, BraintreeTokenizePayload } from '../../../payment/strategies/braintree';\nimport { PaypalAuthorizeData, PaypalScriptLoader } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class BraintreePaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paypalCheckout?: BraintreePaypalCheckout;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _offerCredit: boolean = false\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = (this._offerCredit ? options.braintreepaypalcredit : options.braintreepaypal) || {};\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paymentMethod || !paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return Promise.all([\n            this._braintreeSDKCreator.getPaypalCheckout(),\n            this._paypalScriptLoader.loadPaypal(),\n        ])\n            .then(([paypalCheckout, paypal]) => {\n                this._paypalCheckout = paypalCheckout;\n\n                const allowedSources = [];\n                const disallowedSources = [];\n\n                if (paypalOptions.allowCredit) {\n                    allowedSources.push(paypal.FUNDING.CREDIT);\n                } else {\n                    disallowedSources.push(paypal.FUNDING.CREDIT);\n                }\n\n                return paypal.Button.render({\n                    env: paymentMethod.config.testMode ? 'sandbox' : 'production',\n                    commit: paypalOptions.shouldProcessPayment ? true : false,\n                    funding: {\n                        allowed: allowedSources,\n                        disallowed: disallowedSources,\n                    },\n                    style: {\n                        shape: 'rect',\n                        label: this._offerCredit ? 'credit' : undefined,\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: () => this._setupPayment(paypalOptions.onPaymentError),\n                    onAuthorize: data => this._tokenizePayment(data, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, options.containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paypalCheckout = undefined;\n        this._paymentMethod = undefined;\n\n        this._braintreeSDKCreator.teardown();\n\n        return Promise.resolve();\n    }\n\n    private _setupPayment(onError?: (error: BraintreeError | StandardError) => void): Promise<string> {\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const checkout = state.checkout.getCheckout();\n                const config = state.config.getStoreConfig();\n                const customer = state.customer.getCustomer();\n                const address = customer && customer.addresses && customer.addresses[0];\n\n                if (!this._paypalCheckout) {\n                    throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                return this._paypalCheckout.createPayment({\n                    flow: 'checkout',\n                    enableShippingAddress: true,\n                    shippingAddressEditable: false,\n                    shippingAddressOverride: address ? this._mapToBraintreeAddress(address) : undefined,\n                    amount: checkout.grandTotal,\n                    currency: config.currency.code,\n                    offerCredit: this._offerCredit,\n                });\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        shouldProcessPayment?: boolean,\n        onError?: (error: BraintreeError | StandardError) => void\n    ): Promise<BraintreeTokenizePayload> {\n        if (!this._paypalCheckout || !this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return Promise.all([\n            this._paypalCheckout.tokenizePayment(data),\n            this._braintreeSDKCreator.getDataCollector({ paypal: true }),\n        ])\n            .then(([payload, { deviceData }]) => {\n                this._formPoster.postForm('/checkout.php', {\n                    payment_type: 'paypal',\n                    provider: methodId,\n                    action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                    nonce: payload.nonce,\n                    device_data: deviceData,\n                    shipping_address: JSON.stringify(this._mapToLegacyShippingAddress(payload)),\n                    billing_address: JSON.stringify(this._mapToLegacyBillingAddress(payload)),\n                });\n\n                return payload;\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _mapToLegacyShippingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const shippingAddress = payload.details.shippingAddress;\n        const recipientName = shippingAddress && shippingAddress.recipientName || '';\n        const [firstName, lastName] = recipientName.split(' ');\n\n        return {\n            email: payload.details.email,\n            first_name: firstName,\n            last_name: lastName,\n            phone_number: shippingAddress && shippingAddress.phone || payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToLegacyBillingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const billingAddress = payload.details.billingAddress;\n        const shippingAddress = payload.details.shippingAddress;\n\n        if (billingAddress) {\n            return {\n                email: payload.details.email,\n                first_name: billingAddress.firstName || payload.details.firstName,\n                last_name: billingAddress.lastName || payload.details.lastName,\n                phone_number: billingAddress.phone || payload.details.phone,\n                address_line_1: billingAddress.line1,\n                address_line_2: billingAddress.line2,\n                city: billingAddress.city,\n                state: billingAddress.state,\n                country_code: billingAddress.countryCode,\n                postal_code: billingAddress.postalCode,\n            };\n        }\n\n        return {\n            email: payload.details.email,\n            first_name: payload.details.firstName,\n            last_name: payload.details.lastName,\n            phone_number: payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToBraintreeAddress(address: Address): BraintreeAddress {\n        return {\n            line1: address.address1,\n            line2: address.address2,\n            city: address.city,\n            state: address.stateOrProvinceCode,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phone,\n            recipientName: `${address.firstName} ${address.lastName}`,\n        };\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class GooglePayButtonStrategy implements CheckoutButtonStrategy {\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _formPoster: FormPoster,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        this._methodId = methodId;\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(() => this._googlePayPaymentProcessor.initialize(this._getMethodId()))\n            .then(() => {\n                this._walletButton = this._createSignInButton(containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.getElementById(containerId);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const googlePayButton = this._googlePayPaymentProcessor.createButton(this._handleWalletButtonClick);\n\n        container.appendChild(googlePayButton);\n\n        return googlePayButton;\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        return this._googlePayPaymentProcessor.displayWallet()\n            .then(paymentData => this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => {\n                if (paymentData.shippingAddress) {\n                    this._googlePayPaymentProcessor.updateShippingAddress(paymentData.shippingAddress);\n                }\n            }))\n            .then(() => this._onPaymentSelectComplete())\n            .catch(error => this._onError(error));\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n\n    private _onError(error?: Error): void {\n        if (error && error.message !== 'CANCELED') {\n            throw error;\n        }\n    }\n}\n","import { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType\n} from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { getCallbackUrl, Masterpass, MasterpassCheckoutOptions, MasterpassScriptLoader } from '../../../payment/strategies/masterpass';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class MasterpassButtonStrategy implements CheckoutButtonStrategy {\n    private _masterpassClient?: Masterpass;\n    private _methodId?: string;\n    private _signInButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        this._methodId = methodId;\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod || !paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._masterpassScriptLoader.load(paymentMethod.config.testMode);\n            })\n            .then(masterpass => {\n                this._masterpassClient = masterpass;\n                this._signInButton = this._createSignInButton(containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.removeEventListener('click', this._handleWalletButtonClick);\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return Promise.resolve();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const buttonContainer = document.getElementById(containerId);\n\n        if (!buttonContainer) {\n            throw new Error('Need a container to place the button');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        buttonContainer.appendChild(button);\n\n        button.addEventListener('click', this._handleWalletButtonClick);\n\n        return button;\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const paymentMethod = this._methodId ? state.paymentMethods.getPaymentMethod(this._methodId) : null;\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.cart.cartAmount.toString(),\n            currency: checkout.cart.currency.code,\n            cartId: checkout.cart.id,\n            suppressShippingAddress: false,\n            callbackUrl: getCallbackUrl('cart'),\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(): void {\n        if (!this._masterpassClient) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        this._masterpassClient.checkout(this._createMasterpassPayload());\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { INTERNAL_USE_ONLY } from '../../../common/http-request';\nimport { PaymentMethod } from '../../../payment';\nimport { PaypalActions, PaypalAuthorizeData, PaypalClientToken, PaypalScriptLoader } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class PaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _host: string = ''\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = options.paypal;\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paypalOptions) {\n            throw new InvalidArgumentError();\n        }\n\n        return this._paypalScriptLoader.loadPaypal()\n            .then(paypal => {\n                if (!paymentMethod || !paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const merchantId = paymentMethod.config.merchantId;\n                const env = paymentMethod.config.testMode ? 'sandbox' : 'production';\n                const clientToken: PaypalClientToken = { [env]: paypalOptions.clientId };\n\n                const allowedSources = [];\n                const disallowedSources = [];\n\n                if (paypalOptions.allowCredit) {\n                    allowedSources.push(paypal.FUNDING.CREDIT);\n                } else {\n                    disallowedSources.push(paypal.FUNDING.CREDIT);\n                }\n\n                return paypal.Button.render({\n                    env,\n                    client: clientToken,\n                    commit: paypalOptions.shouldProcessPayment,\n                    funding: {\n                        allowed: allowedSources,\n                        disallowed: disallowedSources,\n                    },\n                    style: {\n                        shape: 'rect',\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: (_, actions) => this._setupPayment(merchantId, actions, paypalOptions.onPaymentError),\n                    onAuthorize: (data, actions) => this._tokenizePayment(data, actions, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, options.containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve();\n    }\n\n    private _setupPayment(merchantId: string, actions?: PaypalActions, onError?: (error: StandardError) => void): Promise<string> {\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const cart = state.cart.getCart();\n                const cartId = cart ? cart.id : '';\n\n                return actions.request.post(`${this._host}/api/storefront/payment/paypalexpress`, { merchantId, cartId }, {\n                    headers: {\n                        'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                    },\n                });\n            })\n            .then(res => res.id)\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        actions?: PaypalActions,\n        shouldProcessPayment?: boolean,\n        _onError?: (error: StandardError) => void // FIXME: This parameter seems to be unused\n    ): Promise<void> {\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!data.paymentID || !data.payerID) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return actions.payment.get(data.paymentID).then(payload => {\n            this._formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                paymentId: data.paymentID,\n                payerId: data.payerID,\n                payerInfo: JSON.stringify(payload.payer.payer_info),\n            });\n        });\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { createCheckoutStore } from '../checkout';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\n\nimport CheckoutButtonInitializer from './checkout-button-initializer';\nimport CheckoutButtonInitializerOptions from './checkout-button-initializer-options';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonRegistry from './create-checkout-button-registry';\n\n/**\n * Creates an instance of `CheckoutButtonInitializer`.\n *\n * @remarks\n * ```js\n * const initializer = createCheckoutButtonInitializer();\n *\n * initializer.initializeButton({\n *     methodId: 'braintreepaypal',\n *     braintreepaypal: {\n *         container: '#checkoutButton',\n *     },\n * });\n * ```\n *\n * @alpha\n * Please note that `CheckoutButtonInitializer` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutButtonInitializer`.\n */\nexport default function createCheckoutButtonInitializer(\n    options?: CheckoutButtonInitializerOptions\n): CheckoutButtonInitializer {\n    const host = options && options.host;\n    const store = createCheckoutStore();\n    const requestSender = createRequestSender({ host });\n    const formPoster = createFormPoster({ host });\n\n    return new CheckoutButtonInitializer(\n        store,\n        new CheckoutButtonStrategyActionCreator(\n            createCheckoutButtonRegistry(store, requestSender, formPoster, host),\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender))\n        )\n    );\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { BraintreeScriptLoader, BraintreeSDKCreator } from '../payment/strategies/braintree';\nimport { createGooglePayPaymentProcessor, GooglePayBraintreeInitializer, GooglePayStripeInitializer } from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { PaypalScriptLoader } from '../payment/strategies/paypal';\n\nimport { CheckoutButtonMethodType, CheckoutButtonStrategy } from './strategies';\nimport { BraintreePaypalButtonStrategy } from './strategies/braintree';\nimport { GooglePayButtonStrategy } from './strategies/googlepay';\nimport { MasterpassButtonStrategy } from './strategies/masterpass';\nimport { PaypalButtonStrategy } from './strategies/paypal';\n\nexport default function createCheckoutButtonRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender,\n    formPoster: FormPoster,\n    host?: string\n): Registry<CheckoutButtonStrategy, CheckoutButtonMethodType> {\n    const registry = new Registry<CheckoutButtonStrategy, CheckoutButtonMethodType>();\n    const scriptLoader = getScriptLoader();\n    const checkoutActionCreator = new CheckoutActionCreator(\n        new CheckoutRequestSender(requestSender),\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            formPoster\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL_CREDIT, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            formPoster,\n            true\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.MASTERPASS, () =>\n        new MasterpassButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        ));\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_BRAINTREE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_STRIPE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.PAYPALEXPRESS, () =>\n        new PaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new PaypalScriptLoader(scriptLoader),\n            formPoster,\n            host\n        )\n    );\n\n    return registry;\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport enum NotEmbeddableErrorType {\n    MissingContainer = 'missing_container',\n    MissingContent = 'missing_content',\n    UnknownError = 'unknown_error',\n}\n\nexport default class NotEmbeddableError extends StandardError {\n    constructor(\n        message?: string,\n        public subtype: NotEmbeddableErrorType = NotEmbeddableErrorType.UnknownError\n    ) {\n        super(message || 'Unable to embed the checkout form.');\n\n        this.name = 'NotEmbeddableError';\n        this.type = 'not_embeddable';\n    }\n}\n","import { default as storage } from 'local-storage-fallback';\n\nexport default class BrowserStorage {\n    constructor(\n        private _namespace: string\n    ) {}\n\n    getItem<TValue = any>(key: string): TValue | null {\n        const rawValue = storage.getItem(this.withNamespace(key));\n\n        if (rawValue === null) {\n            return null;\n        }\n\n        try {\n            return JSON.parse(rawValue);\n        } catch (error) {\n            // Clean up invalid values\n            this.removeItem(this.withNamespace(key));\n\n            return null;\n        }\n    }\n\n    getItemOnce<TValue = any>(key: string): TValue | null {\n        const value = this.getItem(key);\n\n        this.removeItem(key);\n\n        return value;\n    }\n\n    setItem<TValue = any>(key: string, value: TValue): void {\n        return storage.setItem(this.withNamespace(key), JSON.stringify(value));\n    }\n\n    removeItem(key: string): void {\n        return storage.removeItem(this.withNamespace(key));\n    }\n\n    private withNamespace(key: string): string {\n        return `${this._namespace}.${key}`;\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../../common/error';\nimport { RequestError } from '../../common/error/errors';\n\nexport default class InvalidLoginTokenError extends RequestError {\n    constructor(response: Response<InternalErrorResponseBody>) {\n        super(response, { message: response.body.title });\n\n        this.name = 'InvalidLoginTokenError';\n        this.type = 'invalid_login_token';\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { IFrameComponent } from '../common/iframe';\nimport { BrowserStorage } from '../common/storage';\nimport { parseUrl } from '../common/url';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport EmbeddedCheckoutError from './embedded-checkout-error';\nimport { EmbeddedCheckoutEventMap, EmbeddedCheckoutEventType } from './embedded-checkout-events';\nimport EmbeddedCheckoutOptions from './embedded-checkout-options';\nimport { InvalidLoginTokenError, NotEmbeddableError, NotEmbeddableErrorType } from './errors';\nimport { EmbeddedContentEvent, EmbeddedContentEventType } from './iframe-content/embedded-content-events';\nimport IframeEventListener from './iframe-event-listener';\nimport IframeEventPoster from './iframe-event-poster';\nimport LoadingIndicator from './loading-indicator';\nimport ResizableIframeCreator from './resizable-iframe-creator';\n\nconst CAN_RETRY_ALLOW_COOKIE = 'canRetryAllowCookie';\nconst IS_COOKIE_ALLOWED_KEY = 'isCookieAllowed';\n\n@bind\nexport default class EmbeddedCheckout {\n    private _iframe?: IFrameComponent;\n    private _isAttached: boolean;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _iframeCreator: ResizableIframeCreator,\n        private _messageListener: IframeEventListener<EmbeddedCheckoutEventMap>,\n        private _messagePoster: IframeEventPoster<EmbeddedContentEvent>,\n        private _loadingIndicator: LoadingIndicator,\n        private _requestSender: RequestSender,\n        private _storage: BrowserStorage,\n        private _location: Location,\n        private _options: EmbeddedCheckoutOptions\n    ) {\n        this._isAttached = false;\n\n        if (this._options.onComplete) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutComplete, this._options.onComplete);\n        }\n\n        if (this._options.onError) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutError, this._options.onError);\n        }\n\n        if (this._options.onLoad) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutLoaded, this._options.onLoad);\n        }\n\n        if (this._options.onFrameLoad) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.FrameLoaded, this._options.onFrameLoad);\n        }\n\n        if (this._options.onSignOut) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.SignedOut, this._options.onSignOut);\n        }\n\n        this._messageListener.addListener(EmbeddedCheckoutEventType.FrameLoaded, () => this._configureStyles());\n    }\n\n    attach(): Promise<this> {\n        if (this._isAttached) {\n            return Promise.resolve(this);\n        }\n\n        this._isAttached = true;\n        this._messageListener.listen();\n        this._loadingIndicator.show(this._options.containerId);\n\n        return this._allowCookie()\n            .then(() => this._attemptLogin())\n            .then(url => this._iframeCreator.createFrame(url, this._options.containerId))\n            .then(iframe => {\n                this._iframe = iframe;\n\n                this._configureStyles();\n                this._loadingIndicator.hide();\n            })\n            .catch(error => {\n                this._isAttached = false;\n\n                return this._retryAllowCookie(error)\n                    .catch(() => {\n                        this._messageListener.trigger({\n                            type: EmbeddedCheckoutEventType.FrameError,\n                            payload: error,\n                        });\n\n                        this._loadingIndicator.hide();\n\n                        throw error;\n                    });\n            })\n            .then(() => this);\n    }\n\n    detach(): void {\n        if (!this._isAttached) {\n            return;\n        }\n\n        this._isAttached = false;\n        this._messageListener.stopListen();\n\n        if (this._iframe && this._iframe.parentNode) {\n            this._iframe.parentNode.removeChild(this._iframe);\n            this._iframe.iFrameResizer.close();\n        }\n    }\n\n    private _configureStyles(): void {\n        if (!this._iframe || !this._iframe.contentWindow || !this._options.styles) {\n            return;\n        }\n\n        this._messagePoster.setTarget(this._iframe.contentWindow);\n\n        this._messagePoster.post({\n            type: EmbeddedContentEventType.StyleConfigured,\n            payload: this._options.styles,\n        });\n    }\n\n    private _attemptLogin(): Promise<string> {\n        if (!/^\\/login\\/token/.test(parseUrl(this._options.url).pathname)) {\n            return Promise.resolve(this._options.url);\n        }\n\n        return this._requestSender.post(this._options.url)\n            .then(({ body: { redirectUrl } }) => redirectUrl)\n            .catch(response => Promise.reject(new InvalidLoginTokenError(response)));\n    }\n\n    /**\n     * This workaround is required for certain browsers (namely Safari) that\n     * prevent session cookies to be set for a third party website unless the\n     * user has recently visited such website. Therefore, before we attempt to\n     * login or set an active cart in the session, we need to first redirect the\n     * user to the domain of Embedded Checkout.\n     */\n    private _allowCookie(): Promise<void> {\n        if (this._storage.getItem(IS_COOKIE_ALLOWED_KEY)) {\n            // It could be possible that the flag is set to true but the browser\n            // has already removed the permission to store cookie. In that case,\n            // we should try to redirect the user again.\n            this._storage.setItem(CAN_RETRY_ALLOW_COOKIE, true);\n\n            return Promise.resolve();\n        }\n\n        this._storage.removeItem(CAN_RETRY_ALLOW_COOKIE);\n        this._storage.setItem(IS_COOKIE_ALLOWED_KEY, true);\n\n        const { origin } = parseUrl(this._options.url);\n        const redirectUrl = `${origin}/embedded-checkout/allow-cookie?returnUrl=${encodeURIComponent(this._location.href)}`;\n\n        document.body.style.visibility = 'hidden';\n        this._location.replace(redirectUrl);\n\n        return new Promise<never>(() => {});\n    }\n\n    private _retryAllowCookie(error: EmbeddedCheckoutError): Promise<void> {\n        const canRetry = (\n            this._storage.getItem(CAN_RETRY_ALLOW_COOKIE) &&\n            error instanceof NotEmbeddableError &&\n            error.subtype === NotEmbeddableErrorType.MissingContent\n        );\n\n        if (!canRetry) {\n            return Promise.reject();\n        }\n\n        this._storage.removeItem(CAN_RETRY_ALLOW_COOKIE);\n        this._storage.removeItem(IS_COOKIE_ALLOWED_KEY);\n\n        return this._allowCookie();\n    }\n}\n","import { LoadingIndicatorStyles } from './embedded-checkout-styles';\n\nconst DEFAULT_STYLES: LoadingIndicatorStyles = {\n    size: 70,\n    color: '#d9d9d9',\n    backgroundColor: '#ffffff',\n};\n\nconst ROTATION_ANIMATION = 'embedded-checkout-loading-indicator-rotation';\n\nexport default class LoadingIndicator {\n    private _container: HTMLElement;\n    private _indicator: HTMLElement;\n    private _styles: LoadingIndicatorStyles;\n\n    constructor(\n        options?: { styles?: LoadingIndicatorStyles }\n    ) {\n        this._styles = { ...DEFAULT_STYLES, ...options && options.styles };\n\n        this._defineAnimation();\n\n        this._container = this._buildContainer();\n        this._indicator = this._buildIndicator();\n\n        this._container.appendChild(this._indicator);\n    }\n\n    show(parentId?: string): void {\n        if (parentId) {\n            const parent = document.getElementById(parentId);\n\n            if (!parent) {\n                throw new Error('Unable to attach the loading indicator because the parent ID is not valid.');\n            }\n\n            parent.appendChild(this._container);\n        }\n\n        this._container.style.visibility = 'visible';\n        this._container.style.opacity = '1';\n    }\n\n    hide(): void {\n        const handleTransitionEnd = () => {\n            this._container.style.visibility = 'hidden';\n\n            this._container.removeEventListener('transitionend', handleTransitionEnd);\n        };\n\n        this._container.addEventListener('transitionend', handleTransitionEnd);\n\n        this._container.style.opacity = '0';\n    }\n\n    private _buildContainer(): HTMLElement {\n        const container = document.createElement('div');\n\n        container.style.display = 'block';\n        container.style.bottom = '0';\n        container.style.left = '0';\n        container.style.height = '100%';\n        container.style.width = '100%';\n        container.style.position = 'absolute';\n        container.style.right = '0';\n        container.style.top = '0';\n        container.style.transition = 'all 250ms ease-out';\n        container.style.opacity = '0';\n\n        return container;\n    }\n\n    private _buildIndicator(): HTMLElement {\n        const indicator = document.createElement('div');\n\n        indicator.style.display = 'block';\n        indicator.style.width = `${this._styles.size}px`;\n        indicator.style.height = `${this._styles.size}px`;\n        indicator.style.borderRadius = `${this._styles.size}px`;\n        indicator.style.border = 'solid 1px';\n        indicator.style.borderColor = `${this._styles.backgroundColor} ${this._styles.backgroundColor} ${this._styles.color} ${this._styles.color}`;\n        indicator.style.margin = '0 auto';\n        indicator.style.position = 'absolute';\n        indicator.style.left = '0';\n        indicator.style.right = '0';\n        indicator.style.top = '50%';\n        indicator.style.transform = 'translateY(-50%) rotate(0deg)';\n        indicator.style.transformStyle = 'preserve-3d';\n        indicator.style.animation = `${ROTATION_ANIMATION} 500ms infinite cubic-bezier(0.69, 0.31, 0.56, 0.83)`;\n\n        return indicator;\n    }\n\n    private _defineAnimation(): void {\n        // In order to define CSS animation, we need to insert a stylesheet into the host frame.\n        // We only have to do it once.\n        if (document.getElementById(ROTATION_ANIMATION)) {\n            return;\n        }\n\n        const style = document.createElement('style');\n\n        style.id = ROTATION_ANIMATION;\n\n        document.head.appendChild(style);\n\n        if (style.sheet instanceof CSSStyleSheet) {\n            style.sheet.insertRule(`\n                @keyframes ${ROTATION_ANIMATION} {\n                    0% { transform: translateY(-50%) rotate(0deg); }\n                    100% { transform: translateY(-50%) rotate(360deg); }\n                }\n            `);\n        }\n    }\n}\n","import { iframeResizer, IFrameComponent } from '../common/iframe';\nimport { parseUrl } from '../common/url';\n\nimport { EmbeddedCheckoutEventType } from './embedded-checkout-events';\nimport { NotEmbeddableError, NotEmbeddableErrorType } from './errors';\nimport isIframeEvent from './is-iframe-event';\n\nexport default class ResizableIframeCreator {\n    constructor(\n        private _options?: { timeout: number }\n    ) {}\n\n    createFrame(src: string, containerId: string): Promise<IFrameComponent> {\n        const container = document.getElementById(containerId);\n        const { timeout = 60000 } = this._options || {};\n\n        if (!container) {\n            throw new NotEmbeddableError(\n                'Unable to embed the iframe because the container element could not be found.',\n                NotEmbeddableErrorType.MissingContainer\n            );\n        }\n\n        const iframe = document.createElement('iframe');\n\n        iframe.src = src;\n        iframe.style.border = 'none';\n        iframe.style.display = 'none';\n        iframe.style.width = '100%';\n        iframe.allowPaymentRequest = true;\n\n        container.appendChild(iframe);\n\n        return this._toResizableFrame(iframe, timeout)\n            .catch(error => {\n                container.removeChild(iframe);\n\n                throw error;\n            });\n    }\n\n    private _toResizableFrame(iframe: HTMLIFrameElement, timeoutInterval: number): Promise<IFrameComponent> {\n        // Can't simply listen to `load` event because it always gets triggered even if there's an error.\n        // Instead, listen to the `load` inside the iframe and let the parent frame know when it happens.\n        return new Promise((resolve, reject) => {\n            const timeout = window.setTimeout(() => {\n                reject(new NotEmbeddableError('Unable to embed the iframe because the content could not be loaded.'));\n            }, timeoutInterval);\n\n            const handleMessage = (event: MessageEvent) => {\n                if (event.origin !== parseUrl(iframe.src).origin) {\n                    return;\n                }\n\n                if (isIframeEvent(event.data, EmbeddedCheckoutEventType.FrameError)) {\n                    teardown();\n                    reject(new NotEmbeddableError(event.data.payload.message, NotEmbeddableErrorType.MissingContent));\n                }\n\n                if (isIframeEvent(event.data, EmbeddedCheckoutEventType.FrameLoaded)) {\n                    iframe.style.display = '';\n\n                    const contentId = event.data.payload && event.data.payload.contentId;\n                    const iframes = iframeResizer({\n                        scrolling: false,\n                        sizeWidth: false,\n                        heightCalculationMethod: contentId ? 'taggedElement' : 'lowestElement',\n                    }, iframe);\n\n                    teardown();\n                    resolve(iframes[iframes.length - 1]);\n                }\n            };\n\n            const teardown = () => {\n                window.removeEventListener('message', handleMessage);\n                window.clearTimeout(timeout);\n            };\n\n            window.addEventListener('message', handleMessage);\n        });\n    }\n}\n","import { IFrameComponent, IFrameOptions } from 'iframe-resizer';\n\nexport {\n    HeightCalculationMethod,\n    IFrameComponent,\n    IFrameMessageData,\n    IFrameObject,\n    IFrameOptions,\n    IFramePage,\n    IFramePageOptions,\n    IFrameResizedData,\n    IFrameScrollData,\n    PageInfo,\n    WidthCalculationMethod,\n} from 'iframe-resizer';\n\n// The reason why we are wrapping the original `iframeResizer` function imported\n// from the package is because the package sets up event listeners (window\n// resize etc...) as soon as the package is imported. Therefore, to defer the\n// side effect from happening until the function is actually being used, we are\n// importing the package inside this function. To minimise the chance of\n// importing the original package inadvertently, we are also re-exporting all of\n// its public interfaces. The re-exports do not cause any side effect because\n// they are plain TypeScript interfaces; meaning they are only used for type\n// checks rather than for code output.\nexport function iframeResizer(options: IFrameOptions, target: string | HTMLElement): IFrameComponent[] {\n    const { iframeResizer: originalIframeResizer } = require('iframe-resizer');\n\n    return originalIframeResizer(options, target);\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { BrowserStorage } from '../common/storage';\nimport { parseUrl } from '../common/url';\n\nimport EmbeddedCheckout from './embedded-checkout';\nimport { EmbeddedCheckoutEventMap } from './embedded-checkout-events';\nimport EmbeddedCheckoutOptions from './embedded-checkout-options';\nimport { EmbeddedContentEvent } from './iframe-content/embedded-content-events';\nimport IframeEventListener from './iframe-event-listener';\nimport IframeEventPoster from './iframe-event-poster';\nimport LoadingIndicator from './loading-indicator';\nimport ResizableIframeCreator from './resizable-iframe-creator';\n\nconst STORAGE_PREFIX = 'BigCommerce.EmbeddedCheckout';\n\n/**\n * Embed the checkout form in an iframe.\n *\n * @remarks\n * Once the iframe is embedded, it will automatically resize according to the\n * size of the checkout form. It will also notify the parent window when certain\n * events have occurred. i.e.: when the form is loaded and ready to be used.\n *\n * ```js\n * embedCheckout({\n *     url: 'https://checkout/url',\n *     containerId: 'container-id',\n * });\n * ```\n *\n * @param options - Options for embedding the checkout form.\n * @returns A promise that resolves to an instance of `EmbeddedCheckout`.\n */\nexport default function embedCheckout(options: EmbeddedCheckoutOptions): Promise<EmbeddedCheckout> {\n    const origin = parseUrl(options.url).origin;\n    const embeddedCheckout = new EmbeddedCheckout(\n        new ResizableIframeCreator(),\n        new IframeEventListener<EmbeddedCheckoutEventMap>(origin),\n        new IframeEventPoster<EmbeddedContentEvent>(origin),\n        new LoadingIndicator({ styles: options.styles && options.styles.loadingIndicator }),\n        createRequestSender(),\n        new BrowserStorage(STORAGE_PREFIX),\n        window.location,\n        options\n    );\n\n    return embeddedCheckout.attach();\n}\n","module.exports = require(\"@bigcommerce/bigpay-client\");","module.exports = require(\"messageformat\");","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\nexport default class TimeoutError extends RequestError<{}> {\n    constructor(response?: Response) {\n        super(response, {\n            message: 'The request has timed out or aborted.',\n        });\n\n        this.name = 'TimeoutError';\n        this.type = 'timeout';\n    }\n}\n","import { createSelector as defaultSelectorCreator } from 'reselect';\n\nimport withMemoizedCombiner from './with-memoized-combiner';\n\n/**\n * This is a decorated version of Reselect's default `createSelector` function.\n * If the return value of the combiner function is a function, it will create a\n * memorized version of that function and return it instead.\n */\nexport default withMemoizedCombiner(defaultSelectorCreator);\n","import { uniq } from 'lodash';\n\nexport default function joinIncludes(includes: string[]): string {\n    return uniq(includes).join(',');\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { cachableAction, ActionOptions } from '../common/data-store';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ConfigRequestSender } from '.';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\n\nexport default class ConfigActionCreator {\n    constructor(\n        private _configRequestSender: ConfigRequestSender\n    ) {}\n\n    @cachableAction\n    loadConfig(options?: RequestOptions & ActionOptions): Observable<LoadConfigAction> {\n        return Observable.create((observer: Observer<LoadConfigAction>) => {\n            observer.next(createAction(ConfigActionType.LoadConfigRequested));\n\n            this._configRequestSender.loadConfig(options)\n                .then(response => {\n                    observer.next(createAction(ConfigActionType.LoadConfigSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConfigActionType.LoadConfigFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport Config from './config';\n\nexport default class ConfigRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadConfig({ timeout }: RequestOptions = {}): Promise<Response<Config>> {\n        const url = '/api/storefront/checkout-settings';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Response } from '@bigcommerce/request-sender';\nimport { Observable, Observer } from 'rxjs';\n\nimport { Checkout, InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { GuestCredentials } from '../customer';\n\nimport { BillingAddressRequestSender } from '.';\nimport { BillingAddressUpdateRequestBody } from './billing-address';\nimport { BillingAddressActionType, ContinueAsGuestAction, UpdateBillingAddressAction } from './billing-address-actions';\n\nexport default class BillingAddressActionCreator {\n    constructor(\n        private _requestSender: BillingAddressRequestSender\n    ) {}\n\n    continueAsGuest(\n        credentials: GuestCredentials,\n        options?: RequestOptions\n    ): ThunkAction<ContinueAsGuestAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ContinueAsGuestAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const customer = state.customer.getCustomer();\n\n            if (customer && !customer.isGuest) {\n                throw new StandardError('Cannot continue as guest: customer is logged in.');\n            }\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            let billingAddressRequestBody;\n\n            if (!billingAddress) {\n                billingAddressRequestBody = credentials;\n            } else {\n                const { country, ...existingBillingAddressRequestBody } = billingAddress;\n\n                billingAddressRequestBody = {\n                    ...existingBillingAddressRequestBody,\n                    ...credentials,\n                };\n            }\n\n            observer.next(createAction(BillingAddressActionType.ContinueAsGuestRequested));\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.ContinueAsGuestSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.ContinueAsGuestFailed, response));\n                });\n        });\n    }\n\n    updateAddress(\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): ThunkAction<UpdateBillingAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateBillingAddressAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(BillingAddressActionType.UpdateBillingAddressRequested));\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            // If email is not present in the address provided by the client, then\n            // fall back to the stored email as it could have been set separately\n            // using a convenience method. We can't rely on billingAddress having\n            // an ID to consider that there's a preexisting email, as billingAddress\n            // object from Order doesn't have an ID.\n            const billingAddressRequestBody = {\n                ...address,\n                email: typeof address.email === 'undefined' && billingAddress ? billingAddress.email : address.email,\n            };\n\n            if (billingAddress && billingAddress.id) {\n                billingAddressRequestBody.id = billingAddress.id;\n            }\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.UpdateBillingAddressSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.UpdateBillingAddressFailed, response));\n                });\n        });\n    }\n\n    private _createOrUpdateBillingAddress(\n        checkoutId: string,\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): Promise<Response<Checkout>> {\n        if (!address.id) {\n            return this._requestSender.createAddress(checkoutId, address, options);\n        }\n\n        return this._requestSender.updateAddress(checkoutId, address, options);\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../address';\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { BillingAddressUpdateRequestBody } from './billing-address';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class BillingAddressRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createAddress(checkoutId: string, address: Partial<AddressRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: address, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateAddress(checkoutId: string, address: Partial<BillingAddressUpdateRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = address;\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nexport default class Registry<T, K extends string = string> {\n    private _factories: { [key: string]: Factory<T> };\n    private _instances: { [key: string]: T };\n    private _options: RegistryOptions;\n\n    constructor(options?: RegistryOptions) {\n        this._factories = {};\n        this._instances = {};\n        this._options = { defaultToken: 'default', ...options };\n    }\n\n    get(token?: K, cacheToken?: string): T {\n        try {\n            return this._getInstance(\n                token || this._options.defaultToken,\n                cacheToken || token || this._options.defaultToken\n            );\n        } catch (error) {\n            return this._getInstance(\n                this._options.defaultToken,\n                cacheToken || this._options.defaultToken\n            );\n        }\n    }\n\n    register(token: K, factory: Factory<T>): void {\n        if (this._hasFactory(token)) {\n            throw new InvalidArgumentError(`'${token}' is already registered.`);\n        }\n\n        this._factories[token] = factory;\n    }\n\n    protected _hasFactory(token: string): boolean {\n        return !!this._factories[token];\n    }\n\n    private _hasInstance(token: string): boolean {\n        return !!this._instances[token];\n    }\n\n    private _getInstance(token: string, cacheToken: string): T {\n        if (!this._hasInstance(cacheToken)) {\n            const factory = this._factories[token];\n\n            if (!factory) {\n                throw new InvalidArgumentError(`'${token}' is not registered.`);\n            }\n\n            this._instances[cacheToken] = factory();\n        }\n\n        return this._instances[cacheToken];\n    }\n}\n\nexport type Factory<T> = () => T;\n\nexport interface RegistryOptions {\n    defaultToken: string;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { Masterpass, MasterpassHostWindow } from './masterpass';\n\nexport default class MasterpassScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: MasterpassHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<Masterpass> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox.' : ''}masterpass.com/integration/merchant.js`)\n            .then(() => {\n                if (!this._window.masterpass) {\n                    throw new StandardError();\n                }\n\n                return this._window.masterpass;\n            });\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class RemoteCheckoutSynchronizationError extends StandardError {\n    constructor(\n        public error?: Error\n    ) {\n        super('Unable to synchronize your checkout details with a third party provider. Please try again later.');\n\n        this.name = 'RemoteCheckoutSynchronizationError';\n        this.type = 'remote_checkout_synchronization';\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeSDKCreator, GooglePayBraintreeSDK } from '../braintree';\n\nimport {\n    GooglePaymentData,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload\n} from './googlepay';\nimport { GooglePayBraintreeDataRequest, GooglePayBraintreePaymentDataRequestV1 } from './googlepay-braintree';\n\nexport default class GooglePayBraintreeInitializer implements GooglePayInitializer {\n    private _googlePaymentInstance!: GooglePayBraintreeSDK;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator\n    ) {}\n\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        if (!paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return this._braintreeSDKCreator.getGooglePaymentComponent()\n            .then(googleBraintreePaymentInstance => {\n                this._googlePaymentInstance = googleBraintreePaymentInstance;\n\n                return this._createGooglePayPayload(\n                    checkout,\n                    paymentMethod.initializationData,\n                    hasShippingAddress\n                );\n            });\n    }\n\n    teardown(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload {\n        const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token).androidPayCards[0];\n\n        return {\n            nonce: payload.nonce,\n            type: payload.type,\n            description: payload.description,\n            details: {\n                cardType: payload.details.cardType,\n                lastFour: payload.details.lastFour,\n                lastTwo: payload.details.lastTwo,\n            },\n            binData: payload.binData,\n        };\n    }\n\n    private _createGooglePayPayload(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        if (!initializationData.platformToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const googlePayBraintreePaymentDataRequest: GooglePayBraintreeDataRequest = {\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantName: initializationData.googleMerchantName,\n                merchantId: initializationData.googleMerchantId,\n            },\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.grandTotal, 2).toFixed(2),\n            },\n            cardRequirements: {\n                billingAddressRequired: true,\n                billingAddressFormat: 'FULL',\n            },\n            shippingAddressRequired: !hasShippingAddress,\n            emailRequired: true,\n            phoneNumberRequired: true,\n        };\n\n        return this._mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(\n            this._googlePaymentInstance.createPaymentDataRequest(googlePayBraintreePaymentDataRequest)\n        );\n    }\n\n    private _mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(googlePayBraintreeDataRequestV1: GooglePayBraintreePaymentDataRequestV1): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: googlePayBraintreeDataRequestV1.merchantInfo.authJwt,\n                merchantId: googlePayBraintreeDataRequestV1.merchantInfo.merchantId,\n                merchantName: googlePayBraintreeDataRequestV1.merchantInfo.merchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: googlePayBraintreeDataRequestV1.cardRequirements.allowedCardNetworks,\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: 'FULL',\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'braintree',\n                        'braintree:apiVersion': 'v1',\n                        'braintree:authorizationFingerprint': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:authorizationFingerprint'],\n                        'braintree:merchantId': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:merchantId'],\n                        'braintree:sdkVersion': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:sdkVersion'],\n                    },\n                },\n            }],\n            transactionInfo: googlePayBraintreeDataRequestV1.transactionInfo,\n            emailRequired: true,\n            shippingAddressRequired: googlePayBraintreeDataRequestV1.shippingAddressRequired,\n            shippingAddressParameters: {\n                phoneNumberRequired: googlePayBraintreeDataRequestV1.phoneNumberRequired,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { InvalidArgumentError } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\n\nimport {\n    GooglePaymentData,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload\n} from './googlepay';\n\nexport default class GooglePayStripeInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(this._mapGooglePayStripeDataRequestToGooglePayDataRequestV2(\n            checkout,\n            paymentMethod.initializationData,\n            hasShippingAddress\n        ));\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload {\n        try {\n            const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token);\n\n            return {\n                nonce: payload.id,\n                type: payload.type,\n                details: {\n                    cardType: payload.card.brand,\n                    lastFour: payload.card.last4,\n                },\n            };\n        } catch (err) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n    }\n\n    private _mapGooglePayStripeDataRequestToGooglePayDataRequestV2(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantId: initializationData.googleMerchantId,\n                merchantName: initializationData.googleMerchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: ['AMEX', 'DISCOVER', 'JCB', 'MASTERCARD', 'VISA'],\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: 'FULL',\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'stripe',\n                        'stripe:version': initializationData.stripeVersion,\n                        'stripe:publishableKey': initializationData.stripePublishableKey,\n                    },\n                },\n            }],\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.grandTotal, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { mapToInternalAddress } from '../address';\nimport { BillingAddress } from '../billing';\n\nimport { Customer } from '.';\nimport InternalCustomer from './internal-customer';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCustomer(customer: Customer, billingAddress: BillingAddress): InternalCustomer {\n    const firstName = customer.firstName || billingAddress.firstName || '';\n    const lastName = customer.lastName || billingAddress.lastName || '';\n\n    return {\n        addresses: (customer.addresses || []).map(address => mapToInternalAddress(address)),\n        customerId: customer.id,\n        isGuest: customer.isGuest,\n        storeCredit: customer.storeCredit,\n        email: customer.email || billingAddress.email || '',\n        firstName,\n        lastName,\n        name: customer.fullName || [firstName, lastName].join(' '),\n    };\n}\n","import GiftCertificate from './gift-certificate';\nimport InternalGiftCertificate from './internal-gift-certificate';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalGiftCertificate(giftCertificate: GiftCertificate): InternalGiftCertificate {\n    return {\n        code: giftCertificate.code,\n        discountedAmount: giftCertificate.used,\n        remainingBalance: giftCertificate.remaining,\n        giftCertificate: {\n            balance: giftCertificate.balance,\n            code: giftCertificate.code,\n            purchaseDate: giftCertificate.purchaseDate,\n        },\n    };\n}\n","import { filter, find, keyBy, reduce } from 'lodash';\n\nimport { mapToInternalLineItems, LineItem } from '../cart';\nimport { Checkout } from '../checkout';\nimport { AmountTransformer } from '../common/utility';\nimport { mapToInternalCoupon } from '../coupon';\nimport { HOSTED } from '../payment';\n\nimport InternalOrder, { InternalGiftCertificateList, InternalIncompleteOrder, InternalOrderPayment, InternalSocialDataList } from './internal-order';\nimport Order, { GatewayOrderPayment, GiftCertificateOrderPayment, OrderPayment, OrderPayments } from './order';\nimport { OrderMetaState } from './order-state';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalOrder(order: Order, orderMeta: OrderMetaState = {}): InternalOrder {\n    const decimalPlaces = order.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: order.orderId,\n        items: mapToInternalLineItems(order.lineItems, order.currency.decimalPlaces, 'productId'),\n        orderId: order.orderId,\n        currency: order.currency.code,\n        customerCanBeCreated: order.customerCanBeCreated,\n        payment: mapToInternalOrderPayment(order.payments, orderMeta.payment),\n        subtotal: {\n            amount: order.baseAmount,\n            integerAmount: amountTransformer.toInteger(order.baseAmount),\n        },\n        coupon: {\n            discountedAmount: reduce(order.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: order.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: order.discountAmount,\n            integerAmount: amountTransformer.toInteger(order.discountAmount),\n        },\n        token: orderMeta.orderToken,\n        callbackUrl: orderMeta.callbackUrl,\n        discountNotifications: [],\n        giftCertificate: mapToGiftCertificates(order.payments),\n        socialData: mapToInternalSocialDataList(order),\n        status: order.status,\n        hasDigitalItems: order.hasDigitalItems,\n        isDownloadable: order.isDownloadable,\n        isComplete: order.isComplete,\n        shipping: {\n            amount: order.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.shippingCostTotal),\n            amountBeforeDiscount: order.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(order.shippingCostBeforeDiscount),\n        },\n        storeCredit: {\n            amount: mapToStoreCredit(order.payments),\n        },\n        taxes: order.taxes,\n        taxTotal: {\n            amount: order.taxTotal,\n            integerAmount: amountTransformer.toInteger(order.taxTotal),\n        },\n        handling: {\n            amount: order.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: order.orderAmount,\n            integerAmount: order.orderAmountAsInteger,\n        },\n    };\n}\n\nexport function mapToInternalIncompleteOrder(checkout: Checkout): InternalIncompleteOrder {\n    const payment = find(checkout.payments, { providerType: HOSTED });\n\n    return {\n        orderId: null,\n        isComplete: false,\n        payment: !payment ? {} : {\n            id: payment.providerId,\n            gateway: payment.gatewayId,\n            status: mapToInternalPaymentStatus(payment.detail.step),\n        },\n    };\n}\n\nfunction mapToInternalPaymentStatus(status: string): string {\n    return `PAYMENT_STATUS_${status}`;\n}\n\nfunction mapToStoreCredit(payments?: OrderPayments): number {\n    const item = find(payments, { providerId: 'storecredit' });\n\n    return item ? item.amount : 0;\n}\n\nfunction mapToGiftCertificates(payments?: OrderPayments): InternalGiftCertificateList {\n    const items = filter(payments, { providerId: 'giftcertificate' }) as GiftCertificateOrderPayment[];\n\n    return {\n        totalDiscountedAmount: reduce(items, (sum, item) => item.amount + sum, 0),\n        appliedGiftCertificates: keyBy(items.map(item => ({\n            code: item.detail.code,\n            discountedAmount: item.amount,\n            remainingBalance: item.detail.remaining,\n            giftCertificate: {\n                balance: item.amount + item.detail.remaining,\n                code: item.detail.code,\n                purchaseDate: '',\n            },\n        })), 'code'),\n    };\n}\n\nfunction mapToInternalOrderPayment(payments?: OrderPayments, payment: InternalOrderPayment = {}): InternalOrderPayment {\n    const item = find(payments, isDefaultOrderPayment) as GatewayOrderPayment;\n\n    if (!item) {\n        return {};\n    }\n\n    return {\n        id: item.providerId,\n        status: mapToInternalPaymentStatus(item.detail.step),\n        helpText: item.detail.instructions,\n        returnUrl: payment.returnUrl,\n    };\n}\n\nfunction isDefaultOrderPayment(payment: OrderPayment): payment is GatewayOrderPayment {\n    return payment.providerId !== 'giftcertificate' && payment.providerId !== 'storecredit';\n}\n\nfunction mapToInternalSocialDataList(order: Order): { [itemId: string]: InternalSocialDataList } | undefined {\n    const socialDataObject: { [itemId: string]: InternalSocialDataList } = {};\n    const items = [\n        ...order.lineItems.physicalItems,\n        ...order.lineItems.digitalItems,\n    ];\n\n    items.forEach(item => {\n        socialDataObject[item.id] = mapToInternalSocialData(item);\n    });\n\n    return socialDataObject;\n}\n\nfunction mapToInternalSocialData(lineItem: LineItem): InternalSocialDataList {\n    const codes = ['fb', 'tw', 'gp'];\n\n    return codes.reduce((socialData, code) => {\n        const item = lineItem.socialMedia && lineItem.socialMedia.find(item => item.code === code);\n\n        if (!item) {\n            return socialData;\n        }\n\n        socialData[code] = {\n            name: lineItem.name,\n            description: lineItem.name,\n            image: lineItem.imageUrl,\n            url: item.link,\n            shareText: item.text,\n            sharingLink: item.link,\n            channelName: item.channel,\n            channelCode: item.code,\n        };\n\n        return socialData;\n    }, {} as InternalSocialDataList);\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalScriptLoader {\n    private _window: PaypalHostWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadPaypal(): Promise<PaypalSDK> {\n        return this._scriptLoader\n            .loadScript('//www.paypalobjects.com/api/checkout.min.js')\n            .then(() => {\n                if (!this._window.paypal) {\n                    throw new StandardError();\n                }\n\n                return this._window.paypal;\n            });\n    }\n}\n","import { ClearErrorAction, ErrorActionType } from './error-actions';\n\nexport default class ErrorActionCreator {\n    clearError(error: Error): ClearErrorAction {\n        return {\n            type: ErrorActionType.ClearError,\n            payload: error,\n        };\n    }\n}\n","export default function getEnvironment(): string {\n    try {\n        return process.env.NODE_ENV || 'development';\n    } catch (e) {\n        return 'development';\n    }\n}\n","import Logger from './logger';\n\nexport default class ConsoleLogger implements Logger {\n    constructor(\n        private _console?: Console\n    ) {}\n\n    log(...messages: any[]): void {\n        this._logToConsole('log', ...messages);\n    }\n\n    info(...messages: any[]): void {\n        this._logToConsole('info', ...messages);\n    }\n\n    warn(...messages: any[]): void {\n        this._logToConsole('warn', ...messages);\n    }\n\n    error(...messages: any[]): void {\n        this._logToConsole('error', ...messages);\n    }\n\n    debug(...messages: any[]): void {\n        this._logToConsole('debug', ...messages);\n    }\n\n    private _logToConsole(type: keyof Console, ...messages: any[]): void {\n        if (!this._console || !this._console[type]) {\n            return;\n        }\n\n        this._console[type].call(this._console, ...messages);\n    }\n}\n","import Logger from './logger';\n\nexport default class NoopLogger implements Logger {\n    log(): void {}\n\n    info(): void {}\n\n    warn(): void {}\n\n    error(): void {}\n\n    debug(): void {}\n}\n","import { getEnvironment } from '../utility';\n\nimport createLogger from './create-logger';\nimport Logger from './logger';\n\nconst logger = createLogger(getEnvironment() !== 'test');\n\nexport default function getDefaultLogger(): Logger {\n    return logger;\n}\n","import ConsoleLogger from './console-logger';\nimport Logger from './logger';\nimport NoopLogger from './noop-logger';\n\nexport default function createLogger(isEnabled = true): Logger {\n    if (!isEnabled) {\n        return new NoopLogger();\n    }\n\n    return new ConsoleLogger(console);\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ApplyCouponAction, CouponAction, CouponActionType, RemoveCouponAction } from './coupon-actions';\nimport CouponRequestSender from './coupon-request-sender';\n\nexport default class CouponActionCreator {\n    constructor(\n        private _couponRequestSender: CouponRequestSender\n    ) {}\n\n    applyCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.ApplyCouponRequested));\n\n            this._couponRequestSender.applyCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.ApplyCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.ApplyCouponFailed, response));\n                });\n        });\n    }\n\n    removeCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.RemoveCouponRequested));\n\n            this._couponRequestSender.removeCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.RemoveCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.RemoveCouponFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CheckoutIncludes, CHECKOUT_DEFAULT_INCLUDES } from '../checkout';\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nexport default class CouponRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    CheckoutIncludes.AvailableShippingOptions,\n                ]),\n            },\n            body: { couponCode },\n        });\n    }\n\n    removeCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons/${couponCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    CheckoutIncludes.AvailableShippingOptions,\n                ]),\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable ,  Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { GiftCertificateRequestSender } from '.';\nimport { ApplyGiftCertificateAction, GiftCertificateActionType, RemoveGiftCertificateAction } from './gift-certificate-actions';\n\nexport default class GiftCertificateActionCreator {\n    constructor(\n        private _giftCertificateRequestSender: GiftCertificateRequestSender\n    ) {}\n\n    applyGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<ApplyGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.applyGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.ApplyGiftCertificateFailed, response));\n                });\n        });\n    }\n\n    removeGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<RemoveGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.removeGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.RemoveGiftCertificateFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CHECKOUT_DEFAULT_INCLUDES } from '../checkout';\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nexport default class GiftCertificateRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n            body: { giftCertificateCode },\n        });\n    }\n\n    removeGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates/${giftCertificateCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { Registry } from '../common/registry';\n\nimport CustomerCredentials from './customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from './customer-request-options';\nimport {\n    CustomerStrategyActionType,\n    CustomerStrategyDeinitializeAction,\n    CustomerStrategyInitializeAction,\n    CustomerStrategySignInAction,\n    CustomerStrategySignOutAction,\n    CustomerStrategyWidgetAction,\n} from './customer-strategy-actions';\nimport { CustomerStrategy } from './strategies';\n\nexport default class CustomerStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<CustomerStrategy>\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Observable<CustomerStrategySignInAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignInAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignInRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signIn(credentials, options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignInSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignInFailed, error, meta));\n                });\n        });\n    }\n\n    signOut(options?: CustomerRequestOptions): Observable<CustomerStrategySignOutAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignOutAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignOutRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signOut(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignOutSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignOutFailed, error, meta));\n                });\n        });\n    }\n\n    initialize(options?: CustomerInitializeOptions): ThunkAction<CustomerStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CustomerStrategyInitializeAction>) => {\n            const state = store.getState();\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            if (methodId && state.customerStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(CustomerStrategyActionType.InitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.InitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.InitializeFailed, error, meta));\n                });\n        });\n    }\n\n    deinitialize(options?: CustomerRequestOptions): ThunkAction<CustomerStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CustomerStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            if (methodId && !state.customerStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(CustomerStrategyActionType.DeinitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.DeinitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.DeinitializeFailed, error, meta));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: CustomerRequestOptions): Observable<CustomerStrategyWidgetAction> {\n        return Observable.create((observer: Observer<CustomerStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(CustomerStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(CustomerStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayScriptLoader {\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadWidget(method: PaymentMethod, onPaymentReady?: () => void): Promise<Event> {\n        const {\n            config: { merchantId, testMode },\n            initializationData: { region = 'us' } = {},\n        } = method;\n\n        const url = 'https://' +\n            (region.toLowerCase() !== 'us' ? 'static-eu.' : 'static-na.') +\n            'payments-amazon.com/OffAmazonPayments/' +\n            `${region.toLowerCase()}/` +\n            (testMode ? 'sandbox/' : '') +\n            (region.toLowerCase() !== 'us' ? 'lpa/' : '') +\n            `js/Widgets.js?sellerId=${merchantId}`;\n\n        this._configureWidget(method, onPaymentReady);\n\n        return this._scriptLoader.loadScript(url);\n    }\n\n    private _configureWidget(method: PaymentMethod, onPaymentReady?: () => void): void {\n        const onLoginReady = () => {\n            if (!this._window.amazon) {\n                return;\n            }\n\n            this._window.amazon.Login.setClientId(method.initializationData.clientId);\n            this._window.amazon.Login.setUseCookie(true);\n        };\n\n        if (this._window.amazon && this._window.amazon.Login) {\n            onLoginReady();\n        } else {\n            this._window.onAmazonLoginReady = onLoginReady;\n        }\n\n        if (this._window.OffAmazonPayments && onPaymentReady) {\n            onPaymentReady();\n        } else {\n            this._window.onAmazonPaymentsReady = onPaymentReady;\n        }\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { Address, LegacyAddress } from '../../../address';\n\nimport { BraintreeDataCollector } from './braintree';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport {\n    VisaCheckoutAddress,\n    VisaCheckoutInitOptions,\n    VisaCheckoutPaymentSuccessPayload,\n    VisaCheckoutTokenizedPayload,\n} from './visacheckout';\n\nexport default class BraintreeVisaCheckoutPaymentProcessor {\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(clientToken: string, options: VisaCheckoutInitializeOptions): Promise<VisaCheckoutInitOptions> {\n        this._braintreeSDKCreator.initialize(clientToken);\n\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(visaCheckout => visaCheckout.createInitOptions({\n                settings: {\n                    locale: options.locale,\n                    shipping: {\n                        collectShipping: options.collectShipping,\n                    },\n                },\n                paymentRequest: {\n                    currencyCode: options.currencyCode,\n                    subtotal: String(options.subtotal),\n                },\n            }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    handleSuccess(payment: VisaCheckoutPaymentSuccessPayload, shipping?: Address, billing?: Address): Promise<any> {\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(braintreeVisaCheckout => Promise.all([\n                braintreeVisaCheckout.tokenize(payment),\n                this._braintreeSDKCreator.getDataCollector(),\n            ])\n            .then(([tokenizedPayload, dataCollector]) => {\n                const {\n                    shippingAddress = this._toVisaCheckoutAddress(shipping),\n                    billingAddress = this._toVisaCheckoutAddress(billing),\n                } = tokenizedPayload;\n\n                return this._postForm({\n                    ...tokenizedPayload,\n                    shippingAddress,\n                    billingAddress,\n                }, dataCollector);\n            }));\n    }\n\n    private _postForm(paymentData: VisaCheckoutTokenizedPayload, dataCollector: BraintreeDataCollector) {\n        const {\n            userData,\n            billingAddress,\n            shippingAddress,\n            details: cardInformation,\n        } = paymentData;\n        const { userEmail } = userData;\n        const { deviceData } = dataCollector;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: {\n                payment_type: paymentData.type,\n                nonce: paymentData.nonce,\n                provider: 'braintreevisacheckout',\n                action: 'set_external_checkout',\n                device_data: deviceData,\n                card_information: this._getCardInformation(cardInformation),\n                billing_address: this._getAddress(userEmail, billingAddress),\n                shipping_address: this._getAddress(userEmail, shippingAddress),\n            },\n        });\n    }\n\n    private _toVisaCheckoutAddress(address?: Address): VisaCheckoutAddress {\n        if (!address) {\n            return {};\n        }\n\n        return {\n            firstName: address.firstName,\n            lastName: address.lastName,\n            phoneNumber: address.phone,\n            streetAddress: address.address1,\n            extendedAddress: address.address2,\n            locality: address.city,\n            region: address.stateOrProvinceCode,\n            countryCode: address.countryCode,\n            postalCode: address.postalCode,\n        };\n    }\n\n    private _getAddress(email: string, address: VisaCheckoutAddress = {}): Partial<LegacyAddress> {\n        return {\n            email,\n            first_name: address.firstName,\n            last_name: address.lastName,\n            phone_number: address.phoneNumber,\n            address_line_1: address.streetAddress,\n            address_line_2: address.extendedAddress,\n            city: address.locality,\n            state: address.region,\n            country_code: address.countryCode,\n            postal_code: address.postalCode,\n        };\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string; lastTwo: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastTwo,\n        };\n    }\n}\n\nexport interface VisaCheckoutInitializeOptions {\n    locale?: string;\n    collectShipping?: boolean;\n    subtotal?: number;\n    currencyCode?: string;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport BraintreeVisaCheckoutPaymentProcessor from './braintree-visacheckout-payment-processor';\n\nexport default function createBraintreeVisaCheckoutPaymentProcessor(\n    scriptLoader: ScriptLoader,\n    requestSender: RequestSender\n) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n\n    return new BraintreeVisaCheckoutPaymentProcessor(braintreeSDKCreator, requestSender);\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { VisaCheckoutHostWindow, VisaCheckoutSDK } from './visacheckout';\n\nexport default class VisaCheckoutScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: VisaCheckoutHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<VisaCheckoutSDK> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox-' : ''}assets.secure.checkout.visa.com/checkout-widget/resources/js/integration/v1/sdk.js`)\n            .then(() => {\n                if (!this._window.V) {\n                    throw new StandardError();\n                }\n\n                return this._window.V;\n            });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\nimport { ChasePayHostWindow, JPMC } from '../chasepay/chasepay';\n\nexport default class ChasePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: ChasePayHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<JPMC> {\n        return this._scriptLoader\n            .loadScript(`//pwc${testMode ? 'psb' : ''}.chase.com/pwc/checkout/js/v20170521/list.action?type=raw&applId=PWC&channelId=CWC&version=1`)\n            .then(() => {\n                if (!this._window.JPMC) {\n                    throw new StandardError();\n                }\n\n                return this._window.JPMC;\n            });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class RemoteCheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    initializeBilling(methodName: string, params?: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/billing`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializeShipping(methodName: string, params?: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/shipping`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializePayment(methodName: string, params?: InitializePaymentOptions, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/payment`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    loadSettings(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/settings`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    signOut(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/signout`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    generateToken({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout-token';\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    trackAuthorizationEvent({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout/events/shopper-checkout-service-provider-authorization-requested';\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n\nexport interface InitializePaymentOptions {\n    authorizationToken?: string;\n    customerMessage?: string;\n    referenceId?: string;\n    useStoreCredit?: boolean;\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutRequestSender, { InitializePaymentOptions } from './remote-checkout-request-sender';\nimport { RemoteCheckoutStateData } from './remote-checkout-state';\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action<T>\n */\nexport default class RemoteCheckoutActionCreator {\n    constructor(\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender\n    ) {}\n\n    initializeBilling(methodId: string, params?: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteBillingRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeBilling(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteBillingSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemoteBillingFailed, response, { methodId }));\n                });\n        });\n    }\n\n    initializeShipping(methodId: string, params?: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteShippingRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeShipping(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteShippingSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemoteShippingFailed, response, { methodId }));\n                });\n        });\n    }\n\n    initializePayment(methodId: string, params?: InitializePaymentOptions, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemotePaymentRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializePayment(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemotePaymentSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemotePaymentFailed, response, { methodId }));\n                });\n        });\n    }\n\n    loadSettings(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.LoadRemoteSettingsRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.loadSettings(methodId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.LoadRemoteSettingsSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.LoadRemoteSettingsFailed, response, { methodId }));\n                });\n        });\n    }\n\n    signOut(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.SignOutRemoteCustomerRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.signOut(methodId, options)\n                .then(() => {\n                    observer.next(createAction(RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.SignOutRemoteCustomerFailed, response, { methodId }));\n                });\n        });\n    }\n\n    updateCheckout<K extends keyof RemoteCheckoutStateData>(methodId: K, data: Partial<RemoteCheckoutStateData[K]>): Action {\n        return createAction(RemoteCheckoutActionType.UpdateRemoteCheckout, data, { methodId });\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, from, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\n\nimport { CustomerActionType, SignInCustomerAction, SignOutCustomerAction } from './customer-actions';\nimport CustomerCredentials from './customer-credentials';\nimport CustomerRequestSender from './customer-request-sender';\n\nexport default class CustomerActionCreator {\n    constructor(\n        private _customerRequestSender: CustomerRequestSender,\n        private _checkoutActionCreator: CheckoutActionCreator\n    ) {}\n\n    signInCustomer(\n        credentials: CustomerCredentials,\n        options?: RequestOptions\n    ): ThunkAction<SignInCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignInCustomerRequested)),\n            from(this._customerRequestSender.signInCustomer(credentials, options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignInCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignInCustomerFailed, error))\n        );\n    }\n\n    signOutCustomer(\n        options?: RequestOptions\n    ): ThunkAction<SignOutCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignOutCustomerRequested)),\n            from(this._customerRequestSender.signOutCustomer(options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignOutCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignOutCustomerFailed, error))\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport CustomerCredentials from './customer-credentials';\nimport { InternalCustomerResponseBody } from './internal-customer-responses';\n\nexport default class CustomerRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    signInCustomer(credentials: CustomerCredentials, { timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.post(url, { timeout, body: credentials });\n    }\n\n    signOutCustomer({ timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.delete(url, { timeout });\n    }\n}\n","import StandardError from './standard-error';\n\nexport default class NotImplementedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Not implemented.');\n\n        this.name = 'NotImplementedError';\n        this.type = 'not_implemented';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { AmazonPayLoginButton, AmazonPayScriptLoader, AmazonPayWindow } from '../../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../../../remote-checkout';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nimport AmazonPayCustomerInitializeOptions from './amazon-pay-customer-initialize-options';\n\nexport default class AmazonPayCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const { onError = () => {} } = amazonOptions;\n                const onReady = () => {\n                    this._createSignInButton({\n                        ...amazonOptions,\n                        onError: error => {\n                            reject(error);\n                            onError(error);\n                        },\n                    });\n\n                    resolve();\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via AmazonPay, the shopper must click on \"Login with Amazon\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(options: AmazonPayCustomerInitializeOptions): AmazonPayLoginButton {\n        if (!this._paymentMethod || !this._window.OffAmazonPayments) {\n            throw new NotInitializedError(NotInitializedErrorType.CustomerNotInitialized);\n        }\n\n        if (!this._paymentMethod.config.merchantId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { initializationData } = this._paymentMethod;\n\n        return new this._window.OffAmazonPayments.Button(options.container, this._paymentMethod.config.merchantId, {\n            color: options.color || 'Gold',\n            size: options.size || 'small',\n            type: 'PwA',\n            useAmazonAddressBook: true,\n            onError: options.onError,\n            authorization: () => {\n                this._handleAuthorization(initializationData);\n            },\n        });\n    }\n\n    private _handleAuthorization(options: AuthorizationOptions): void {\n        this._remoteCheckoutRequestSender.generateToken()\n            .then(({ body }) => {\n                if (!this._window.amazon) {\n                    throw new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized);\n                }\n\n                this._window.amazon.Login.authorize({\n                    popup: false,\n                    scope: 'payments:shipping_address payments:billing_address payments:widget profile',\n                    state: `${options.tokenPrefix}${body.token}`,\n                }, options.redirectUrl);\n\n                this._remoteCheckoutRequestSender.trackAuthorizationEvent();\n            });\n    }\n}\n\ninterface AuthorizationOptions {\n    redirectUrl: string;\n    tokenPrefix: string;\n}\n","import { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { BraintreeVisaCheckoutPaymentProcessor, VisaCheckoutScriptLoader } from '../../../payment/strategies/braintree';\nimport { VisaCheckoutPaymentSuccessPayload } from '../../../payment/strategies/braintree/visacheckout';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategyActionCreator from '../../customer-strategy-action-creator';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class BraintreeVisaCheckoutCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _buttonClassName: string = 'visa-checkout-wrapper';\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    container,\n                    onError = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: true,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, initOptions]) => {\n                    const signInButton = this._createSignInButton(container, this._buttonClassName);\n\n                    visaCheckout.init(initOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (_, error) => onError(error));\n\n                    return signInButton;\n                })\n                .then(signInButton => { signInButton.style.visibility = 'visible'; });\n            })\n            .then(() => this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via VisaCheckout, the shopper must click on \"Visa Checkout\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut('braintreevisacheckout', options)\n        );\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(\n            this._customerStrategyActionCreator.widgetInteraction(() => {\n                return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                    paymentSuccessPayload,\n                    state.shippingAddress.getShippingAddress(),\n                    state.billingAddress.getBillingAddress()\n                )\n                .then(() => this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _createSignInButton(containerId: string, buttonClass: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new Error('Need a container to place the button');\n        }\n\n        return (container.querySelector('.' + buttonClass) as HTMLElement) ||\n            this._insertVisaCheckoutButton(container, buttonClass);\n    }\n\n    private _insertVisaCheckoutButton(container: Element, buttonClass: string): HTMLElement {\n        const buttonSource = 'https://secure.checkout.visa.com/wallet-services-web/xo/button.png?acceptCanadianVisaDebit=false&cobrand=true&size=154';\n        const buttonTemplate = `\n            <img\n                alt=\"Visa Checkout\"\n                class=\"v-button\"\n                role=\"button\"\n                src=\"${buttonSource}\"\n                />\n            <a class=\"v-learn v-learn-default\" style=\"text-align: right; display: block; font-size: 10px; color: #003366;\" href=\"#\" data-locale=\"en_US\">Tell Me More</a>`;\n\n        const visaCheckoutButton = document.createElement('div');\n        visaCheckoutButton.style.visibility = 'hidden';\n        visaCheckoutButton.className = buttonClass;\n        visaCheckoutButton.innerHTML = buttonTemplate;\n\n        container.appendChild(visaCheckoutButton);\n\n        return visaCheckoutButton;\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { ChasePayScriptLoader, ChasePaySuccessPayload } from '../../../payment/strategies/chasepay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class ChasePayCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _requestSender: RequestSender,\n        private _formPoster: FormPoster\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { chasepay: chasePayOptions, methodId } = options;\n\n        if (!chasePayOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.chasepay\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const cart = state.cart.getCart();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.digitalSessionId) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const { container } = chasePayOptions;\n\n                return this._chasePayScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(JPMC => {\n                        const ChasePay = JPMC.ChasePay;\n\n                        ChasePay.configure({\n                            language: storeConfig.storeProfile.storeLanguage,\n                        });\n\n                        if (ChasePay.isChasePayUp) {\n                            ChasePay.insertButtons({\n                                containers: [container],\n                            });\n                        }\n\n                        ChasePay.on(ChasePay.EventType.START_CHECKOUT, () => {\n                            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n                                .then(() => {\n                                    const state = this._store.getState();\n                                    const method = state.paymentMethods.getPaymentMethod(methodId);\n                                    const sessionId = method && method.initializationData && method.initializationData.digitalSessionId;\n\n                                    if (sessionId) {\n                                        ChasePay.startCheckout(sessionId);\n                                    }\n                                });\n                        });\n\n                        ChasePay.on(ChasePay.EventType.COMPLETE_CHECKOUT, (payload: ChasePaySuccessPayload) => {\n                            const state = this._store.getState();\n                            const method = state.paymentMethods.getPaymentMethod(methodId);\n                            const requestId = method && method.initializationData && method.initializationData.merchantRequestId;\n\n                            if (requestId) {\n                                this._setExternalCheckoutData(payload, requestId)\n                                    .then(() => {\n                                        this._reloadPage();\n                                });\n                            }\n                        });\n                    });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Chase Pay®, the shopper must click on \"Chase Pay®\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _setExternalCheckoutData(payload: ChasePaySuccessPayload, requestId: string): Promise<Response> {\n        const url = `checkout.php?provider=chasepay&action=set_external_checkout`;\n        const options = {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: {\n                sessionToken: payload.sessionToken,\n                merchantRequestId: requestId,\n            },\n            method: 'post',\n        };\n\n        return this._requestSender.sendRequest(url, options);\n    }\n\n    private _reloadPage() {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            params: {\n                fromChasePay: true,\n            },\n        });\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport CustomerActionCreator from '../../customer-action-creator';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class DefaultCustomerStrategy implements CustomerStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _customerActionCreator: CustomerActionCreator\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signInCustomer(credentials, options)\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signOutCustomer(options)\n        );\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nimport GooglePayCustomerInitializeOptions from './googlepay-customer-initialize-options';\n\nexport default class GooglePayCustomerStrategy implements CustomerStrategy {\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor,\n        private _formPoster: FormPoster\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId }  = options;\n\n        const googlePayOptions = this._getGooglePayOptions(options);\n\n        if (!methodId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._googlePayPaymentProcessor.initialize(methodId)\n            .then(() => {\n                this._walletButton = this._createSignInButton(googlePayOptions.container);\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Google Pay, the shopper must click on \"Google Pay\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const button = this._googlePayPaymentProcessor.createButton(this._handleWalletButtonClick);\n\n        container.appendChild(button);\n\n        return button;\n    }\n\n    private _getGooglePayOptions(options: CustomerInitializeOptions): GooglePayCustomerInitializeOptions {\n        if (options.methodId === 'googlepaybraintree' && options.googlepaybraintree) {\n            return options.googlepaybraintree;\n        }\n\n        if (options.methodId === 'googlepaystripe' && options.googlepaystripe) {\n            return options.googlepaystripe;\n        }\n\n        throw new InvalidArgumentError();\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n\n    private _onError(error?: Error): void {\n        if (error && error.message !== 'CANCELED') {\n            throw error;\n        }\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        return this._googlePayPaymentProcessor.displayWallet()\n            .then(paymentData => this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => {\n                if (paymentData.shippingAddress) {\n                    this._googlePayPaymentProcessor.updateShippingAddress(paymentData.shippingAddress);\n                }\n            }))\n            .then(() => this._onPaymentSelectComplete())\n            .catch(error => this._onError(error));\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotImplementedError\n} from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { getCallbackUrl, MasterpassScriptLoader } from '../../../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class MasterpassCustomerStrategy implements CustomerStrategy {\n    private _signInButton?: HTMLElement;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { masterpass: masterpassOptions, methodId } = options;\n\n        if (!masterpassOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.masterpass\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const cart = state.cart.getCart();\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                const { container } = masterpassOptions;\n\n                const payload = {\n                    checkoutId: this._paymentMethod.initializationData.checkoutId,\n                    allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n                    amount: cart.cartAmount.toString(),\n                    currency: cart.currency.code,\n                    cartId: cart.id,\n                    suppressShippingAddress: false,\n                    callbackUrl: getCallbackUrl('checkout'),\n                };\n\n                return this._masterpassScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(Masterpass => {\n                        this._signInButton = this._createSignInButton(container);\n\n                        this._signInButton.addEventListener('click', () => {\n                            Masterpass.checkout(payload);\n                        });\n                    });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        container.appendChild(button);\n\n        return button;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { NotImplementedError } from '../../../common/error/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class SquareCustomerStrategy implements CustomerStrategy {\n\n    constructor(\n        private _store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator\n    ) {}\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport Country from './country';\nimport { CountryActionType } from './country-actions';\nimport CountryRequestSender from './country-request-sender';\n\nexport default class CountryActionCreator {\n    constructor(\n        private _countryRequestSender: CountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<Action<Country[]>> {\n        return Observable.create((observer: Observer<Action<Country[]>>) => {\n            observer.next(createAction(CountryActionType.LoadCountriesRequested));\n\n            this._countryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(CountryActionType.LoadCountriesSucceeded, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CountryActionType.LoadCountriesFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { CountryResponseBody } from './country-responses';\n\nexport default class CountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/store/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { InternalOrderResponseBody } from './internal-order-responses';\nimport Order from './order';\nimport OrderParams from './order-params';\n\nexport default class OrderRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadOrder(orderId: number, { timeout, params }: RequestOptions<OrderParams> = {}): Promise<Response<Order>> {\n        const url = `/api/storefront/orders/${orderId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n        const include = [\n            'payments',\n            'lineItems.physicalItems.socialMedia',\n            'lineItems.physicalItems.options',\n            'lineItems.digitalItems.socialMedia',\n            'lineItems.digitalItems.options',\n        ];\n\n        return this._requestSender.get(url, {\n            params: {\n                include: joinIncludes([\n                    ...include,\n                    ...(params && params.include || []),\n                ]),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    submitOrder(body: InternalOrderRequestBody, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = '/internalapi/v1/checkout/order';\n\n        return this._requestSender.post(url, { body, timeout });\n    }\n\n    finalizeOrder(orderId: number, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = `/internalapi/v1/checkout/order/${orderId}`;\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, from, of, Observable, Observer } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutValidator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { FinalizeOrderAction, LoadOrderAction, LoadOrderPaymentsAction, OrderActionType, SubmitOrderAction } from './order-actions';\nimport OrderRequestBody from './order-request-body';\nimport OrderRequestSender from './order-request-sender';\nimport { SpamProtectionAction, SpamProtectionActionCreator } from './spam-protection';\n\nexport default class OrderActionCreator {\n    constructor(\n        private _orderRequestSender: OrderRequestSender,\n        private _checkoutValidator: CheckoutValidator,\n        private _spamProtectionActionCreator: SpamProtectionActionCreator\n    ) {}\n\n    loadOrder(orderId: number, options?: RequestOptions): Observable<LoadOrderAction> {\n        return new Observable((observer: Observer<LoadOrderAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderFailed, response));\n                });\n        });\n    }\n\n    // TODO: Remove when checkout does not contain unrelated order data.\n    loadOrderPayments(orderId: number, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        return new Observable((observer: Observer<LoadOrderPaymentsAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderPaymentsRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderPaymentsSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderPaymentsFailed, response));\n                });\n        });\n    }\n\n    loadCurrentOrder(options?: RequestOptions): ThunkAction<LoadOrderAction, InternalCheckoutSelectors> {\n        return store => defer(() => {\n            const orderId = this._getCurrentOrderId(store.getState());\n\n            if (!orderId) {\n                throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n            }\n\n            return this.loadOrder(orderId, options);\n        });\n    }\n\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<SubmitOrderAction | SpamProtectionAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(OrderActionType.SubmitOrderRequested)),\n            defer(() => {\n                const state = store.getState();\n                const externalSource = state.config.getExternalSource();\n                const checkout = state.checkout.getCheckout();\n                const orderMeta = state.order.getOrderMeta();\n                const storeConfig = state.config.getStoreConfig();\n                const spamProtectionToken = orderMeta && orderMeta.spamProtectionToken;\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const { isSpamProtectionEnabled } = storeConfig.checkoutSettings;\n\n                if (isSpamProtectionEnabled && !spamProtectionToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingSpamProtectionToken);\n                }\n\n                return from(\n                    this._checkoutValidator.validate(checkout, options)\n                        .then(() => this._orderRequestSender.submitOrder(this._mapToOrderRequestBody(\n                            payload,\n                            checkout.customerMessage,\n                            externalSource,\n                            spamProtectionToken\n                        ), options))\n                ).pipe(\n                    switchMap(response => concat(\n                        // TODO: Remove once we can submit orders using storefront API\n                        this.loadOrder(response.body.data.order.orderId, options),\n                        of(createAction(OrderActionType.SubmitOrderSucceeded, response.body.data, { ...response.body.meta, token: response.headers.token }))\n                    ))\n                );\n            }).pipe(\n                catchError(error => throwErrorAction(OrderActionType.SubmitOrderFailed, error))\n            )\n        );\n    }\n\n    finalizeOrder(orderId: number, options?: RequestOptions): Observable<FinalizeOrderAction | LoadOrderAction> {\n        return concat(\n            of(createAction(OrderActionType.FinalizeOrderRequested)),\n            from(this._orderRequestSender.finalizeOrder(orderId, options))\n                .pipe(\n                    switchMap(response => concat(\n                        this.loadOrder(orderId, options),\n                        of(createAction(OrderActionType.FinalizeOrderSucceeded, response.body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(OrderActionType.FinalizeOrderFailed, error))\n        );\n    }\n\n    executeSpamProtection(): ThunkAction<SpamProtectionAction> {\n        return store => {\n            const storeConfig = store.getState().config.getStoreConfig();\n\n            if (!storeConfig) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n            }\n\n            const { isSpamProtectionEnabled } = storeConfig.checkoutSettings;\n\n            if (!isSpamProtectionEnabled) {\n                return empty();\n            }\n\n            return this._spamProtectionActionCreator.execute();\n        };\n    }\n\n    private _getCurrentOrderId(state: InternalCheckoutSelectors): number | undefined {\n        const order = state.order.getOrder();\n        const checkout = state.checkout.getCheckout();\n\n        return (order && order.orderId) || (checkout && checkout.orderId);\n    }\n\n    private _mapToOrderRequestBody(\n        payload: OrderRequestBody,\n        customerMessage: string,\n        externalSource?: string,\n        spamProtectionToken?: string\n    ): InternalOrderRequestBody {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            return {\n                ...order,\n                customerMessage,\n                externalSource,\n                spamProtectionToken,\n            };\n        }\n\n        return {\n            ...order,\n            customerMessage,\n            externalSource,\n            spamProtectionToken,\n            payment: {\n                paymentData: payment.paymentData,\n                name: payment.methodId,\n                gateway: payment.gatewayId,\n            },\n        };\n    }\n}\n","export interface MutationObeserverCreator {\n    prototype: MutationObserver;\n    new(callback: MutationCallback): MutationObserver;\n}\n\nexport interface MutationObserverWindow extends Window {\n    MutationObserver: MutationObeserverCreator;\n}\n\nexport class MutationObserverFactory {\n    constructor(\n        private _window: MutationObserverWindow = window as MutationObserverWindow\n    ) {}\n\n    create(callback: MutationCallback): MutationObserver {\n        return new this._window.MutationObserver(callback);\n    }\n}\n","import { StandardError } from '../../../common/error/errors';\n\nexport default class SpamProtectionFailedError extends StandardError {\n    constructor() {\n        super('We were not able to complete our spam protection verification. Please try again.');\n\n        this.name = 'SpamProtectionFailedError';\n        this.type = 'spam_protection_failed';\n    }\n}\n","import { StandardError } from '../../../common/error/errors';\n\nexport default class SpamProtectionNotCompletedError extends StandardError {\n    constructor() {\n        super('You haven\\'t complete our spam protection verification. Please try again.');\n\n        this.name = 'SpamProtectionNotCompletedError';\n        this.type = 'spam_protection_not_completed';\n    }\n}\n","import { Observable, Subject } from 'rxjs';\n\nimport { MutationObserverFactory } from '../../common/dom/mutation-observer';\nimport { NotInitializedError, NotInitializedErrorType } from '../../common/error/errors';\n\nimport { SpamProtectionFailedError, SpamProtectionNotCompletedError } from './errors';\nimport GoogleRecaptchaScriptLoader from './google-recaptcha-script-loader';\n\nexport interface RecaptchaResult {\n    error?: Error;\n    token?: string;\n}\n\nexport default class GoogleRecaptcha {\n    private _event$?: Subject<RecaptchaResult>;\n    private _recaptcha?: ReCaptchaV2.ReCaptcha;\n\n    constructor(\n        private googleRecaptchaScriptLoader: GoogleRecaptchaScriptLoader,\n        private mutationObserverFactory: MutationObserverFactory\n    ) {}\n\n    load(containerId: string, sitekey: string): Promise<void> {\n        const event$ = new Subject<RecaptchaResult>();\n        this._event$ = event$;\n\n        return this.googleRecaptchaScriptLoader.load()\n            .then(recaptcha => {\n                recaptcha.render(containerId, {\n                    sitekey,\n                    size: 'invisible',\n                    callback: () => {\n                        event$.next({\n                            token: recaptcha.getResponse(),\n                        });\n                    },\n                    'error-callback': () => {\n                        event$.next({\n                            error: new SpamProtectionFailedError(),\n                        });\n                    },\n                });\n\n                this._recaptcha = recaptcha;\n            });\n    }\n\n    execute(): Observable<RecaptchaResult> {\n        if (!this._event$ || !this._recaptcha) {\n            throw new NotInitializedError(NotInitializedErrorType.SpamProtectionNotInitialized);\n        }\n\n        this._watchRecaptchaChallengeWindow(this._event$);\n\n        this._recaptcha.execute();\n\n        return this._event$;\n    }\n\n    private _watchRecaptchaChallengeWindow(event: Subject<RecaptchaResult>) {\n        const iframeElement = document.querySelector('iframe[title=\"recaptcha challenge\"]');\n\n        if (!iframeElement) {\n            throw new Error('Recaptcha challenge iframe not found.');\n        }\n\n        const iframeContainer = iframeElement.parentElement;\n\n        if (!iframeContainer) {\n            throw new Error('Recaptcha challenge iframe container not found.');\n        }\n\n        const container = iframeContainer.parentElement;\n\n        if (!container) {\n            throw new Error('Recaptcha challenge container not found.');\n        }\n\n        this.mutationObserverFactory.create(() => {\n            // When customer closes the Google ReCaptcha challenge window, throw SpamProtectionNotCompletedError\n            if (container.style.visibility === 'hidden') {\n                event.next({\n                    error: new SpamProtectionNotCompletedError(),\n                });\n            }\n        })\n\n        .observe(container, { attributes: true, attributeFilter: ['style'] });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nexport default class GoogleRecaptchaScriptLoader {\n    private _loadPromise?: Promise<ReCaptchaV2.ReCaptcha>;\n\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GoogleRecaptchaWindow = window\n    ) {}\n\n    load(): Promise<ReCaptchaV2.ReCaptcha> {\n        if (!this._loadPromise) {\n            this._loadPromise = this._loadScript();\n        }\n\n        return this._loadPromise;\n    }\n\n    private _loadScript(): Promise<ReCaptchaV2.ReCaptcha> {\n        const callbackName = 'initRecaptcha';\n        const params = [\n            `onload=${callbackName}`,\n            'render=explicit',\n        ].join('&');\n\n        return new Promise((resolve, reject) => {\n            this._window[callbackName] = () => resolve(this._window.grecaptcha);\n\n            this._scriptLoader.loadScript(`//www.google.com/recaptcha/api.js?${params}`)\n                .catch(error => {\n                    this._loadPromise = undefined;\n                    reject(error);\n                });\n        });\n    }\n}\n\nexport interface GoogleRecaptchaWindow extends Window {\n    grecaptcha?: ReCaptchaV2.ReCaptcha;\n    initRecaptcha?(): void;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, of, throwError, Observable, Observer } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../common/error/errors';\n\nimport GoogleRecaptcha from './google-recaptcha';\nimport { SpamProtectionAction, SpamProtectionActionType } from './spam-protection-actions';\nimport { SpamProtectionOptions } from './spam-protection-options';\n\nexport default class SpamProtectionActionCreator {\n    constructor(\n        private _googleRecaptcha: GoogleRecaptcha\n    ) {}\n\n    initialize(options: SpamProtectionOptions): ThunkAction<SpamProtectionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<SpamProtectionAction>) => {\n            const state = store.getState();\n            const config = state.config.getConfig();\n            const { containerId } = options;\n\n            if (!config) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n            }\n\n            observer.next(createAction(SpamProtectionActionType.InitializeRequested, undefined));\n\n            const recaptchaSitekey = config.storeConfig.checkoutSettings.googleRecaptchaSitekey;\n\n            return this._googleRecaptcha.load(containerId, recaptchaSitekey)\n                .then(() => {\n                    observer.next(createAction(SpamProtectionActionType.InitializeSucceeded));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(SpamProtectionActionType.InitializeFailed, error, containerId));\n                });\n        });\n    }\n\n    execute(): Observable<SpamProtectionAction> {\n        return concat(\n            of(createAction(SpamProtectionActionType.ExecuteRequested, undefined)),\n            this._googleRecaptcha.execute()\n                .pipe(take(1))\n                .pipe(switchMap(({ error, token }) => {\n                    return error ?\n                        throwError(createErrorAction(SpamProtectionActionType.SubmitFailed, error)) :\n                        of(createAction(SpamProtectionActionType.Completed, token));\n                }))\n        );\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.name = 'OrderFinalizationNotRequiredError';\n        this.type = 'order_finalization_not_required';\n    }\n}\n","enum PaymentStrategyType {\n    AFFIRM = 'affirm',\n    AFTERPAY = 'afterpay',\n    AMAZON = 'amazon',\n    CREDIT_CARD = 'creditcard',\n    CYBERSOURCE = 'cybersource',\n    KLARNA = 'klarna',\n    LEGACY = 'legacy',\n    OFFLINE = 'offline',\n    OFFSITE = 'offsite',\n    PAYPAL = 'paypal',\n    PAYPAL_EXPRESS = 'paypalexpress',\n    PAYPAL_EXPRESS_CREDIT = 'paypalexpresscredit',\n    SAGE_PAY = 'sagepay',\n    SQUARE = 'squarev2',\n    STRIPEV3 = 'stripev3',\n    NO_PAYMENT_DATA_REQUIRED = 'nopaymentdatarequired',\n    BRAINTREE = 'braintree',\n    BRAINTREE_PAYPAL = 'braintreepaypal',\n    BRAINTREE_PAYPAL_CREDIT = 'braintreepaypalcredit',\n    BRAINTREE_VISA_CHECKOUT = 'braintreevisacheckout',\n    BRAINTREE_GOOGLE_PAY = 'googlepaybraintree',\n    CHASE_PAY = 'chasepay',\n    WE_PAY = 'wepay',\n    MASTERPASS = 'masterpass',\n    STRIPE_GOOGLE_PAY = 'googlepaystripe',\n    ZIP = 'zip',\n    CONVERGE = 'converge',\n}\n\nexport default PaymentStrategyType;\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, of, Observable, Observer } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { LoadOrderPaymentsAction, OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../order';\nimport { OrderFinalizationNotRequiredError } from '../order/errors';\nimport { SpamProtectionAction } from '../order/spam-protection';\n\nimport { PaymentInitializeOptions, PaymentRequestOptions } from './payment-request-options';\nimport {\n    PaymentStrategyActionType,\n    PaymentStrategyDeinitializeAction,\n    PaymentStrategyExecuteAction,\n    PaymentStrategyFinalizeAction,\n    PaymentStrategyInitializeAction,\n    PaymentStrategyWidgetAction,\n} from './payment-strategy-actions';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport PaymentStrategyType from './payment-strategy-type';\nimport { PaymentStrategy } from './strategies';\n\nexport default class PaymentStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: PaymentStrategyRegistry,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<PaymentStrategyExecuteAction | SpamProtectionAction, InternalCheckoutSelectors> {\n        return store => concat(\n            this._orderActionCreator.executeSpamProtection()(store),\n            new Observable((observer: Observer<PaymentStrategyExecuteAction>) => {\n                const state = store.getState();\n                const { payment = {} as OrderPaymentRequestBody, useStoreCredit } = payload;\n                const meta = { methodId: payment.methodId };\n\n                let strategy: PaymentStrategy;\n\n                if (state.payment.isPaymentDataRequired(useStoreCredit)) {\n                    const method = state.paymentMethods.getPaymentMethod(payment.methodId, payment.gatewayId);\n\n                    if (!method) {\n                        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                    }\n\n                    strategy = this._strategyRegistry.getByMethod(method);\n                } else {\n                    strategy = this._strategyRegistry.get(PaymentStrategyType.NO_PAYMENT_DATA_REQUIRED);\n                }\n\n                observer.next(createAction(PaymentStrategyActionType.ExecuteRequested, undefined, meta));\n\n                strategy\n                    .execute(payload, { ...options, methodId: payment.methodId, gatewayId: payment.gatewayId })\n                    .then(() => {\n                        observer.next(createAction(PaymentStrategyActionType.ExecuteSucceeded, undefined, meta));\n                        observer.complete();\n                    })\n                    .catch(error => {\n                        observer.error(createErrorAction(PaymentStrategyActionType.ExecuteFailed, error, meta));\n                    });\n            })\n        );\n    }\n\n    finalize(options?: RequestOptions): ThunkAction<PaymentStrategyFinalizeAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentStrategyActionType.FinalizeRequested)),\n            this._loadOrderPaymentsIfNeeded(store, options),\n            defer(() => {\n                const state = store.getState();\n                const { providerId = '', gatewayId = '' } = state.payment.getPaymentId() || {};\n                const method = state.paymentMethods.getPaymentMethod(providerId, gatewayId);\n\n                if (!method) {\n                    throw new OrderFinalizationNotRequiredError();\n                }\n\n                return this._strategyRegistry.getByMethod(method)\n                    .finalize({ ...options, methodId: method.id, gatewayId: method.gateway })\n                    .then(() => createAction(PaymentStrategyActionType.FinalizeSucceeded, undefined, { methodId: method.id }));\n            })\n        ).pipe(\n            catchError(error => {\n                const state = store.getState();\n                const payment = state.payment.getPaymentId();\n\n                return throwErrorAction(PaymentStrategyActionType.FinalizeFailed, error, { methodId: payment && payment.providerId });\n            })\n        );\n    }\n\n    initialize(options: PaymentInitializeOptions): ThunkAction<PaymentStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<PaymentStrategyInitializeAction>) => {\n            const state = store.getState();\n            const { methodId, gatewayId } = options;\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            if (methodId && state.paymentStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.getByMethod(method)\n                .initialize({ ...options, methodId, gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options: PaymentRequestOptions): ThunkAction<PaymentStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<PaymentStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const { methodId, gatewayId } = options;\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            if (methodId && !state.paymentStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.getByMethod(method)\n                .deinitialize({ ...options, methodId, gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: PaymentRequestOptions): ThunkAction<PaymentStrategyWidgetAction> {\n        return () => Observable.create((observer: Observer<PaymentStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(PaymentStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(PaymentStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(PaymentStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n\n    private _loadOrderPaymentsIfNeeded(store: ReadableCheckoutStore, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        const state = store.getState();\n        const checkout = state.checkout.getCheckout();\n\n        if (checkout && checkout.orderId) {\n            return this._orderActionCreator.loadOrderPayments(checkout.orderId, options);\n        }\n\n        return empty();\n    }\n}\n","import { isEqual } from 'lodash';\n\nimport { PartialDeep } from '../common/types';\n\nimport Cart from './cart';\n\nexport default class CartComparator {\n    isEqual(cartA: Cart, cartB: Cart): boolean {\n        return isEqual(\n            this._normalize(cartA),\n            this._normalize(cartB)\n        );\n    }\n\n    private _normalize(cart: Cart): PartialDeep<Cart> {\n        return {\n            cartAmount: cart.cartAmount,\n            currency: cart.currency,\n            id: cart.id,\n            lineItems: {\n                digitalItems: cart.lineItems.digitalItems\n                    .slice()\n                    .sort((itemA, itemB) =>\n                        `${itemA.productId}${itemA.variantId}`.localeCompare(`${itemB.productId}${itemB.variantId}`)\n                    )\n                    .map(item => ({\n                        extendedSalePrice: item.extendedSalePrice,\n                        productId: item.productId,\n                        quantity: item.quantity,\n                        variantId: item.variantId,\n                    })),\n                giftCertificates: cart.lineItems.giftCertificates\n                    .slice()\n                    .sort((itemA, itemB) => `${itemA.id}`.localeCompare(`${itemB.id}`))\n                    .map(item => ({\n                        amount: item.amount,\n                        recipient: item.recipient,\n                    })),\n                physicalItems: cart.lineItems.physicalItems\n                    .slice()\n                    .sort((itemA, itemB) =>\n                        `${itemA.productId}${itemA.variantId}`.localeCompare(`${itemB.productId}${itemB.variantId}`)\n                    )\n                    .map(item => ({\n                        extendedSalePrice: item.extendedSalePrice,\n                        productId: item.productId,\n                        quantity: item.quantity,\n                        variantId: item.variantId,\n                        giftWrapping: item.giftWrapping,\n                    })),\n            },\n        };\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class CartChangedError extends StandardError {\n    constructor() {\n        super('An update to your shopping cart has been detected and your available shipping costs have been updated.');\n\n        this.name = 'CartChangedError';\n        this.type = 'cart_changed';\n    }\n}\n","import { isEqual, map } from 'lodash';\n\nimport { CartComparator } from '../cart';\nimport { CartChangedError } from '../cart/errors';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { Coupon, GiftCertificate } from '../coupon';\n\nimport Checkout from './checkout';\nimport CheckoutRequestSender from './checkout-request-sender';\n\nexport default class CheckoutValidator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    validate(checkout?: Checkout, options?: RequestOptions): Promise<void> {\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        return this._checkoutRequestSender.loadCheckout(checkout.id, options)\n            .then(response => {\n                const comparator = new CartComparator();\n\n                if (checkout.grandTotal === response.body.grandTotal\n                    && this._compareCoupons(checkout.coupons, response.body.coupons)\n                    && this._compareGiftCertificates(checkout.giftCertificates, response.body.giftCertificates)\n                    && comparator.isEqual(checkout.cart, response.body.cart)\n                ) {\n                    return;\n                }\n\n                throw new CartChangedError();\n            });\n    }\n\n    private _compareCoupons(couponsA: Coupon[], couponsB: Coupon[]): boolean {\n        return isEqual(map(couponsA, 'code'), map(couponsB, 'code'));\n    }\n\n    private _compareGiftCertificates(giftCertificatesA: GiftCertificate[], giftCertificatesB: GiftCertificate[]): boolean {\n        return isEqual(map(giftCertificatesA, 'code'), map(giftCertificatesB, 'code'));\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, from, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { OrderActionCreator } from '../order';\n\nimport Payment from './payment';\nimport { InitializeOffsitePaymentAction, PaymentActionType, SubmitPaymentAction } from './payment-actions';\nimport PaymentRequestSender from './payment-request-sender';\nimport PaymentRequestTransformer from './payment-request-transformer';\n\nexport default class PaymentActionCreator {\n    constructor(\n        private _paymentRequestSender: PaymentRequestSender,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentRequestTransformer: PaymentRequestTransformer\n    ) {}\n\n    submitPayment(payment: Payment): ThunkAction<SubmitPaymentAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentActionType.SubmitPaymentRequested)),\n            from(this._paymentRequestSender.submitPayment(\n                this._paymentRequestTransformer.transform(payment, store.getState())\n            ))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._orderActionCreator.loadCurrentOrder()(store),\n                        of(createAction(PaymentActionType.SubmitPaymentSucceeded, body))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(PaymentActionType.SubmitPaymentFailed, error))\n        );\n    }\n\n    initializeOffsitePayment(\n        methodId: string,\n        gatewayId?: string\n    ): ThunkAction<InitializeOffsitePaymentAction, InternalCheckoutSelectors> {\n        return store => {\n            const payload = this._paymentRequestTransformer.transform({ gatewayId, methodId }, store.getState());\n\n            return concat(\n                of(createAction(PaymentActionType.InitializeOffsitePaymentRequested)),\n                this._paymentRequestSender.initializeOffsitePayment(payload)\n                    .then(() => createAction(PaymentActionType.InitializeOffsitePaymentSucceeded))\n            ).pipe(\n                catchError(error => throwErrorAction(PaymentActionType.InitializeOffsitePaymentFailed, error))\n            );\n        };\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentRequestBody from './payment-request-body';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class PaymentRequestSender {\n    /**\n     * @constructor\n     * @param {BigpayClient} client\n     */\n    constructor(\n        private _client: any\n    ) {}\n\n    submitPayment(payload: PaymentRequestBody): Promise<Response> {\n        return new Promise((resolve, reject) => {\n            this._client.submitPayment(payload, (error: any, response: any) => {\n                if (error) {\n                    reject(this._transformResponse(error));\n                } else {\n                    resolve(this._transformResponse(response));\n                }\n            });\n        });\n    }\n\n    initializeOffsitePayment(payload: PaymentRequestBody): Promise<void> {\n        return new Promise(() => {\n            this._client.initializeOffsitePayment(payload);\n        });\n    }\n\n    private _transformResponse(response: any): Response {\n        return {\n            headers: {},\n            body: response.data,\n            status: response.status,\n            statusText: response.statusText,\n        };\n    }\n}\n","import { PaymentInstrument, VaultedInstrument } from './payment';\n\nexport default function isVaultedInstrument(instrument: PaymentInstrument): instrument is VaultedInstrument {\n    return Boolean((instrument as VaultedInstrument).instrumentId);\n}\n","import { pick } from 'lodash';\n\nimport { mapToInternalAddress } from '../address';\nimport { mapToInternalCart } from '../cart';\nimport InternalCheckoutSelectors from '../checkout/internal-checkout-selectors';\nimport { StandardError } from '../common/error/errors';\nimport { mapToInternalCustomer } from '../customer';\nimport { mapToInternalOrder } from '../order';\nimport { mapToInternalShippingOption } from '../shipping';\n\nimport isVaultedInstrument from './is-vaulted-instrument';\nimport Payment from './payment';\nimport PaymentMethod from './payment-method';\nimport PaymentMethodSelector from './payment-method-selector';\nimport PaymentRequestBody from './payment-request-body';\n\nexport default class PaymentRequestTransformer {\n    transform(payment: Payment, checkoutState: InternalCheckoutSelectors): PaymentRequestBody {\n        const billingAddress = checkoutState.billingAddress.getBillingAddress();\n        const checkout = checkoutState.checkout.getCheckout();\n        const customer = checkoutState.customer.getCustomer();\n        const order = checkoutState.order.getOrder();\n        const paymentMethod = this._getPaymentMethod(checkoutState.paymentMethods, payment.methodId, payment.gatewayId);\n        const shippingAddress = checkoutState.shippingAddress.getShippingAddress();\n        const consignments = checkoutState.consignments.getConsignments();\n        const shippingOption = checkoutState.consignments.getShippingOption();\n        const storeConfig = checkoutState.config.getStoreConfig();\n        const contextConfig = checkoutState.config.getContextConfig();\n        const instrumentMeta = checkoutState.instruments.getInstrumentsMeta();\n        const paymentMeta = checkoutState.paymentMethods.getPaymentMethodsMeta();\n        const orderMeta = checkoutState.order.getOrderMeta();\n        const internalCustomer = customer && billingAddress && mapToInternalCustomer(customer, billingAddress);\n\n        const authToken = instrumentMeta && payment.paymentData && isVaultedInstrument(payment.paymentData) ?\n            `${checkoutState.payment.getPaymentToken()}, ${instrumentMeta.vaultAccessToken}` :\n            checkoutState.payment.getPaymentToken();\n\n        if (!authToken) {\n            throw new StandardError();\n        }\n\n        return {\n            authToken,\n            paymentMethod,\n            customer: internalCustomer,\n            billingAddress: billingAddress && mapToInternalAddress(billingAddress),\n            shippingAddress: shippingAddress && mapToInternalAddress(shippingAddress, consignments),\n            shippingOption: shippingOption && mapToInternalShippingOption(shippingOption, true),\n            cart: checkout && mapToInternalCart(checkout),\n            order: order && mapToInternalOrder(order, orderMeta),\n            orderMeta,\n            payment: payment.paymentData,\n            quoteMeta: {\n                request: {\n                    ...paymentMeta,\n                    geoCountryCode: contextConfig && contextConfig.geoCountryCode,\n                },\n            },\n            source: 'bigcommerce-checkout-js-sdk',\n            store: pick(storeConfig && storeConfig.storeProfile, [\n                'storeHash',\n                'storeId',\n                'storeLanguage',\n                'storeName',\n            ]),\n        };\n    }\n\n    private _getPaymentMethod(\n        paymentMethodSelector: PaymentMethodSelector,\n        methodId: string,\n        gatewayId?: string\n    ): PaymentMethod | undefined {\n        const paymentMethod = paymentMethodSelector.getPaymentMethod(methodId, gatewayId);\n\n        if (!paymentMethod) {\n            return;\n        }\n\n        if (paymentMethod.method === 'multi-option' && !paymentMethod.gateway) {\n            return { ...paymentMethod, gateway: paymentMethod.id };\n        }\n\n        if (paymentMethod.initializationData && paymentMethod.initializationData.gateway) {\n            return { ...paymentMethod, id: paymentMethod.initializationData.gateway };\n        }\n\n        return paymentMethod;\n    }\n}\n","export enum OrderIncludes {\n    DigitalItemsCategories = 'lineItems.digitalItems.categories',\n    PhysicalItemsCategories = 'lineItems.physicalItems.categories',\n}\n\nexport default interface OrderParams {\n    include?: OrderIncludes[];\n}\n","import { ReadableDataStore } from '@bigcommerce/data-store';\nimport { some } from 'lodash';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { Registry } from '../common/registry';\nimport { RegistryOptions } from '../common/registry/registry';\n\nimport PaymentMethod from './payment-method';\nimport * as paymentMethodTypes from './payment-method-types';\nimport PaymentStrategyType from './payment-strategy-type';\nimport PaymentStrategy from './strategies/payment-strategy';\n\nexport default class PaymentStrategyRegistry extends Registry<PaymentStrategy, PaymentStrategyType> {\n    constructor(\n        private _store: ReadableDataStore<InternalCheckoutSelectors>,\n        options?: PaymentStrategyRegistryOptions\n    ) {\n        super(options);\n    }\n\n    getByMethod(paymentMethod?: PaymentMethod): PaymentStrategy {\n        if (!paymentMethod) {\n            return this.get();\n        }\n\n        const token = this._getToken(paymentMethod);\n        const cacheToken = paymentMethod.gateway || paymentMethod.id;\n\n        return this.get(token, cacheToken);\n    }\n\n    private _getToken(paymentMethod: PaymentMethod): PaymentStrategyType {\n        const methodId = paymentMethod.gateway || paymentMethod.id;\n\n        if (this._hasFactoryForMethod(methodId)) {\n            return methodId;\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.OFFLINE) {\n            return PaymentStrategyType.OFFLINE;\n        }\n\n        if (this._isLegacyMethod(paymentMethod)) {\n            return PaymentStrategyType.LEGACY;\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.HOSTED) {\n            return PaymentStrategyType.OFFSITE;\n        }\n\n        return PaymentStrategyType.CREDIT_CARD;\n    }\n\n    private _hasFactoryForMethod(\n        methodId: string\n    ): methodId is PaymentStrategyType {\n        return this._hasFactory(methodId);\n    }\n\n    private _isLegacyMethod(paymentMethod: PaymentMethod): boolean {\n        const config = this._store.getState().config.getStoreConfig();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        const { clientSidePaymentProviders } = config.paymentSettings;\n\n        if (!clientSidePaymentProviders || paymentMethod.gateway === 'adyen') {\n            return false;\n        }\n\n        return !some(clientSidePaymentProviders, id =>\n            paymentMethod.id === id || paymentMethod.gateway === id\n        );\n    }\n}\n\nexport interface PaymentStrategyRegistryOptions extends RegistryOptions {\n    clientSidePaymentProviders?: string[];\n}\n","import { InvalidArgumentError } from '../../common/error/errors';\n\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(', ')}.`;\n        }\n\n        super(message);\n\n        this.name = 'PaymentArgumentInvalidError';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class PaymentMethodCancelledError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Payment process was cancelled.');\n\n        this.name = 'PaymentMethodCancelledError';\n        this.type = 'payment_cancelled';\n    }\n}\n","import { LineItemCategory } from '../../../cart/line-item';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { AmountTransformer } from '../../../common/utility';\nimport { Order, OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { OrderIncludes } from '../../../order/order-params';\nimport { Consignment } from '../../../shipping';\nimport { PaymentArgumentInvalidError, PaymentMethodCancelledError, PaymentMethodInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { Affirm, AffirmAddress, AffirmDiscount, AffirmFailResponse, AffirmItem, AffirmRequestData, AffirmSuccessResponse } from './affirm';\nimport AffirmScriptLoader from './affirm-script-loader';\n\nexport default class AffirmPaymentStrategy implements PaymentStrategy {\n    private _affirm?: Affirm;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _affirmScriptLoader: AffirmScriptLoader\n    ) { }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(options.methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n                if (!paymentMethod || !paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const { config: { testMode }, clientToken: publicKey } = paymentMethod;\n\n                return this._affirmScriptLoader.load(publicKey, testMode);\n            })\n            .then(affirm => {\n                this._affirm = affirm;\n\n                return this._store.getState();\n            });\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const methodId = payload.payment && payload.payment.methodId;\n        const { useStoreCredit } = payload;\n        const { _affirm } = this;\n\n        if (!_affirm) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!methodId) {\n            throw new PaymentArgumentInvalidError(['payment.methodId']);\n        }\n\n        const requestOptions = {\n            ...options,\n            params: {\n                include: [\n                    OrderIncludes.PhysicalItemsCategories,\n                    OrderIncludes.DigitalItemsCategories,\n                ],\n            },\n        };\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit }, requestOptions))\n            .then<AffirmSuccessResponse>(() => {\n                _affirm.checkout(this._getCheckoutInformation());\n\n                return new Promise((resolve, reject) => {\n                    _affirm.checkout.open({\n                        onFail: (failObject: AffirmFailResponse) => {\n                            failObject.reason === 'canceled' ? reject(new PaymentMethodCancelledError()) : reject(new PaymentMethodInvalidError());\n                        },\n                        onSuccess: successObject => { resolve(successObject); },\n                    });\n                    _affirm.ui.error.on('close', () => {\n                        reject(new PaymentMethodCancelledError());\n                    });\n                });\n            })\n            .then(result => {\n                const paymentPayload = {\n                    methodId,\n                    paymentData: { nonce: result.checkout_token },\n                };\n\n                return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n            });\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._affirm) {\n            this._affirm = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _getCheckoutInformation(): AffirmRequestData {\n        const state = this._store.getState();\n        const config = state.config.getStoreConfig();\n        const consignments = state.consignments.getConsignments();\n        const order = state.order.getOrder();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!order) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        const amountTransformer = new AmountTransformer(order.currency.decimalPlaces);\n        const billingAddress = this._getBillingAddress();\n\n        return {\n            merchant: {\n                user_confirmation_url: config.links.checkoutLink,\n                user_cancel_url: config.links.checkoutLink,\n                user_confirmation_url_action: 'POST',\n            },\n            shipping: this._getShippingAddress() || billingAddress,\n            billing: billingAddress,\n            items: this._getItems(amountTransformer, order),\n            metadata: {\n                shipping_type: this._getShippingType(consignments),\n                mode: 'modal',\n                platform_type: 'BigCommerce',\n                platform_version: '',\n                platform_affirm: '',\n            },\n            discounts: this._getDiscounts(amountTransformer, order),\n            order_id: order.orderId ? order.orderId.toString() : '',\n            shipping_amount: amountTransformer.toInteger(order.shippingCostTotal),\n            tax_amount: amountTransformer.toInteger(order.taxTotal),\n            total: amountTransformer.toInteger(order.orderAmount),\n        };\n    }\n\n    private _getShippingType(consignments?: Consignment[]): string {\n        if (!consignments) {\n            return '';\n        }\n\n        const consignment = consignments[0];\n\n        return consignment && consignment.selectedShippingOption ?\n            consignment.selectedShippingOption.type : '';\n    }\n\n    private _getBillingAddress(): AffirmAddress {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!billingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const billingInformation = {\n            name: {\n                first: billingAddress.firstName,\n                last: billingAddress.lastName,\n                full: `${billingAddress.firstName} ${billingAddress.lastName}`,\n            },\n            address: {\n                line1: billingAddress.address1,\n                line2: billingAddress.address2,\n                city: billingAddress.city,\n                state: billingAddress.stateOrProvinceCode,\n                zipcode: billingAddress.postalCode,\n                country: billingAddress.countryCode,\n            },\n            phone_number: billingAddress.phone,\n            email: billingAddress.email,\n        };\n\n        return billingInformation;\n    }\n\n    private _getShippingAddress(): AffirmAddress | undefined {\n        const state = this._store.getState();\n        const shippingAddress = state.shippingAddress.getShippingAddress();\n\n        if (!shippingAddress) {\n            return;\n        }\n\n        const shippingInformation = {\n            name: {\n                first: shippingAddress.firstName,\n                last: shippingAddress.lastName,\n                full: `${shippingAddress.firstName} ${shippingAddress.lastName}`,\n            },\n            address: {\n                line1: shippingAddress.address1,\n                line2: shippingAddress.address2,\n                city: shippingAddress.city,\n                state: shippingAddress.stateOrProvinceCode,\n                zipcode: shippingAddress.postalCode,\n                country: shippingAddress.countryCode,\n            },\n            phone_number: shippingAddress.phone,\n        };\n\n        return shippingInformation;\n    }\n\n    private _getItems(amountTransformer: AmountTransformer, order: Order): AffirmItem[] {\n        const items: AffirmItem[] = [];\n\n        for (const item of order.lineItems.physicalItems) {\n            items.push({\n                display_name: item.name,\n                sku: item.sku,\n                unit_price: amountTransformer.toInteger(item.salePrice),\n                qty: item.quantity,\n                item_image_url: item.imageUrl,\n                item_url: item.url,\n                categories: this._getCategories(item.categories),\n            });\n        }\n\n        for (const item of order.lineItems.digitalItems) {\n            items.push({\n                display_name: item.name,\n                sku: item.sku,\n                unit_price: amountTransformer.toInteger(item.salePrice),\n                qty: item.quantity,\n                item_image_url: item.imageUrl,\n                item_url: item.url,\n                categories: this._getCategories(item.categories),\n            });\n        }\n\n        for (const item of order.lineItems.giftCertificates) {\n            items.push({\n                display_name: item.name,\n                sku: '',\n                unit_price: amountTransformer.toInteger(item.amount),\n                qty: 1,\n                item_image_url: '',\n                item_url: '',\n            });\n        }\n\n        if (order.lineItems.customItems) {\n            for (const item of order.lineItems.customItems) {\n                items.push({\n                    display_name: item.name,\n                    sku: item.sku,\n                    unit_price: amountTransformer.toInteger(item.listPrice),\n                    qty: item.quantity,\n                    item_image_url: '',\n                    item_url: '',\n                });\n            }\n        }\n\n        return items;\n    }\n\n    private _getDiscounts(amountTransformer: AmountTransformer, order: Order): AffirmDiscount {\n        const discounts: AffirmDiscount = {};\n\n        for (const line of order.coupons) {\n            if (line.discountedAmount > 0) {\n                discounts[line.code] = {\n                    discount_amount: amountTransformer.toInteger(line.discountedAmount),\n                    discount_display_name: line.displayName,\n                };\n            }\n        }\n\n        if (order.discountAmount > 0) {\n            discounts.DISCOUNTED_AMOUNT = {\n                discount_amount: amountTransformer.toInteger(order.discountAmount),\n                discount_display_name: 'discount',\n            };\n        }\n\n        return discounts;\n    }\n\n    private _getCategories(categories?: LineItemCategory[][]): string[][] {\n        if (!categories) {\n            return[[]];\n        }\n\n        return categories.map(categoryTree => categoryTree.map(category => category.name));\n    }\n}\n","/**\n * Used this approach as Affirm uses snipped for initializing. Please refer to Affirm documentation in: https://docs.affirm.com/Integrate_Affirm/Direct_API#1._Add_Affirm.js\n */\nexport default Function(`\n'use strict';\nreturn function loadAffirmJS(apiKey, scriptURL) {\n    var _affirm_config = {\n        public_api_key:  apiKey,\n        script:          scriptURL\n    };\n    (function(l,g,m,e,a,f,b){var d,c=l[m]||{},h=document.createElement(f),n=document.getElementsByTagName(f)[0],k=function(a,b,c){return function(){a[b]._.push([c,arguments])}};c[e]=k(c,e,\"set\");d=c[e];c[a]={};c[a]._=[];d._=[];c[a][b]=k(c,a,b);a=0;for(b=\"set add save post open empty reset on off trigger ready setProduct\".split(\" \");a<b.length;a++)d[b[a]]=k(c,e,b[a]);a=0;for(b=[\"get\",\"token\",\"url\",\"items\"];a<b.length;a++)d[b[a]]=function(){};h.async=!0;h.src=g[f];n.parentNode.insertBefore(h,n);delete g[f];d(g);l[m]=c})(window,_affirm_config,\"affirm\",\"checkout\",\"ui\",\"script\",\"ready\");\n}`)();\n","import { StandardError } from '../../../common/error/errors';\n\nimport { Affirm, AffirmHostWindow, AffirmScripts } from './affirm';\nimport loadAffirmJS from './affirmJs';\n\nexport default class AffirmScriptLoader {\n    constructor(\n        public _window: AffirmHostWindow = window\n    ) { }\n\n    load(apikey?: string, testMode?: boolean): Promise<Affirm> {\n        const scriptURI = this._getScriptURI(testMode);\n\n        loadAffirmJS(apikey, scriptURI);\n        if (!this._window.affirm) {\n            throw new StandardError();\n        }\n\n        return Promise.resolve(this._window.affirm);\n    }\n\n    private _getScriptURI(testMode: boolean = false): string {\n        const SCRIPTS_DEFAULT: AffirmScripts = {\n            PROD: '//cdn1.affirm.com/js/v2/affirm.js',\n            SANDBOX: '//cdn1-sandbox.affirm.com/js/v2/affirm.js',\n        };\n\n        return testMode ? SCRIPTS_DEFAULT.SANDBOX : SCRIPTS_DEFAULT.PROD;\n    }\n}\n","import { CheckoutStore, CheckoutValidator, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AfterpayScriptLoader from './afterpay-script-loader';\nimport AfterpaySdk from './afterpay-sdk';\n\nexport default class AfterpayPaymentStrategy implements PaymentStrategy {\n    private _afterpaySdk?: AfterpaySdk;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutValidator: CheckoutValidator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _afterpayScriptLoader: AfterpayScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId, options.gatewayId);\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._afterpayScriptLoader.load(paymentMethod, this._mapCountryToISO2(storeCountryName))\n            .then(afterpaySdk => {\n                this._afterpaySdk = afterpaySdk;\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._afterpaySdk) {\n            this._afterpaySdk = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paymentId = payload.payment && payload.payment.gatewayId;\n\n        if (!paymentId) {\n            throw new PaymentArgumentInvalidError(['payment.gatewayId']);\n        }\n\n        const useStoreCredit = !!payload.useStoreCredit;\n        const state = this._store.getState();\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(paymentId, { useStoreCredit })\n        )\n            .then(state => this._checkoutValidator.validate(state.checkout.getCheckout(), options))\n            .then(() => this._store.dispatch(\n                this._paymentMethodActionCreator.loadPaymentMethod(paymentId, options)\n            ))\n            .then(state => this._redirectToAfterpay(storeCountryName, state.paymentMethods.getPaymentMethod(paymentId)))\n            // Afterpay will handle the rest of the flow so return a promise that doesn't really resolve\n            .then(() => new Promise<never>(() => {}));\n    }\n\n    finalize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._remoteCheckoutActionCreator.loadSettings(options.methodId))\n            .then(state => {\n                const payment = state.payment.getPaymentId();\n                const config = state.config.getContextConfig();\n                const afterpay = state.remoteCheckout.getCheckout('afterpay');\n\n                if (!payment) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config || !config.payment.token) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!afterpay || !afterpay.settings) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const orderPayload = {\n                    useStoreCredit: afterpay.settings.useStoreCredit,\n                };\n\n                const paymentPayload = {\n                    methodId: payment.providerId,\n                    paymentData: { nonce: config.payment.token },\n                };\n\n                return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n                    .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload)));\n            });\n    }\n\n    private _redirectToAfterpay(countryName: string, paymentMethod?: PaymentMethod): void {\n        if (!this._afterpaySdk || !paymentMethod || !paymentMethod.clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._afterpaySdk.initialize({ countryCode: this._mapCountryToISO2(countryName)});\n        this._afterpaySdk.redirect({ token: paymentMethod.clientToken });\n    }\n\n    private _mapCountryToISO2(countryName: string): string {\n        switch (countryName) {\n        case 'Australia':\n            return 'AU';\n\n        case 'New Zealand':\n            return 'NZ';\n\n        case 'United States':\n            return 'US';\n\n        default:\n            return 'AU';\n        }\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AfterpaySdk from './afterpay-sdk';\nimport AfterpayWindow from './afterpay-window';\n\ninterface AfterpayScripts {\n    PROD: string;\n    SANDBOX: string;\n}\n\nconst SCRIPTS_DEFAULT: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal-sandbox.afterpay.com/afterpay-async.js',\n};\n\nconst SCRIPTS_US: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal.us-sandbox.afterpay.com/afterpay-async.js',\n};\n\n/** Class responsible for loading the Afterpay SDK */\nexport default class AfterpayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    /**\n     * Loads the appropriate Afterpay SDK depending on the payment method data.\n     * @param method the payment method data\n     */\n    load(method: PaymentMethod, countryCode: string): Promise<AfterpaySdk> {\n        const testMode = method.config.testMode || false;\n        const scriptURI = this._getScriptURI(countryCode, testMode);\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (window as AfterpayWindow).AfterPay);\n    }\n\n    private _getScriptURI(countryCode: string, testMode: boolean): string {\n        if (countryCode === 'US') {\n            return testMode ? SCRIPTS_US.SANDBOX : SCRIPTS_US.PROD;\n        }\n\n        return testMode ? SCRIPTS_DEFAULT.SANDBOX : SCRIPTS_DEFAULT.PROD;\n    }\n\n}\n","import { isEqual } from 'lodash';\n\nimport { omitPrivate } from '../common/utility';\n\nimport InternalAddress from './internal-address';\n\nexport default function isInternalAddressEqual(addressA: Partial<InternalAddress>, addressB: Partial<InternalAddress>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<InternalAddress>): Partial<InternalAddress> {\n    const ignoredKeys = ['id', 'provinceCode'];\n\n    return (Object.keys(omitPrivate(address) || {}) as Array<keyof InternalAddress>)\n        .reduce(\n            (result, key) => ignoredKeys.indexOf(key) === -1 && address[key] ?\n                { ...result, [key]: address[key] } :\n                result,\n            {}\n        );\n}\n","import isPrivate from './is-private';\nimport omitDeep from './omit-deep';\n\nexport default function omitPrivate(object: any): any {\n    return omitDeep(object, (_: any, key: string) => isPrivate(key));\n}\n","import { BillingAddress } from '../billing';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\nexport default function mapFromInternalAddress(address: InternalAddress): Address | BillingAddress {\n    return {\n        id: address.id,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.addressLine1,\n        address2: address.addressLine2,\n        city: address.city,\n        stateOrProvince: address.province,\n        stateOrProvinceCode: address.provinceCode,\n        postalCode: address.postCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import { noop } from 'lodash';\n\nimport {\n    isInternalAddressEqual,\n    mapFromInternalAddress,\n    mapToInternalAddress\n} from '../../../address';\nimport { BillingAddressActionCreator } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    RequestError\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AmazonPayConfirmationFlow from './amazon-pay-confirmation-flow';\nimport AmazonPayOrderReference from './amazon-pay-order-reference';\nimport AmazonPayPaymentInitializeOptions from './amazon-pay-payment-initialize-options';\nimport AmazonPayScriptLoader from './amazon-pay-script-loader';\nimport AmazonPayWallet, { AmazonPayWalletOptions } from './amazon-pay-wallet';\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _walletOptions?: AmazonPayPaymentInitializeOptions;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!amazonOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.amazon\" argument is not provided.');\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._walletOptions = amazonOptions;\n        this._paymentMethod = paymentMethod;\n\n        return new Promise((resolve, reject) => {\n            const onReady = () => {\n                this._createWallet(amazonOptions)\n                    .then(resolve)\n                    .catch(reject);\n            };\n\n            this._scriptLoader.loadWidget(paymentMethod, onReady)\n                .catch(reject);\n        })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._walletOptions = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n        const sellerId = this._getMerchantId();\n\n        if (!referenceId || !sellerId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload }, useStoreCredit = false } = payload;\n\n        if (options && this._paymentMethod && this._paymentMethod.config.is3dsEnabled) {\n            return this._processPaymentWith3ds(\n                sellerId,\n                referenceId,\n                paymentPayload.methodId,\n                useStoreCredit,\n                options\n            );\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { referenceId, useStoreCredit })\n        )\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                }, options)\n            ))\n            .catch(error => {\n                if (error instanceof RequestError && error.body.type === 'provider_widget_error' && this._walletOptions) {\n                    return this._createWallet(this._walletOptions)\n                        .then(() => Promise.reject(error));\n                }\n\n                return Promise.reject(error);\n            });\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _getMerchantId(): string | undefined {\n        return this._paymentMethod && this._paymentMethod.config.merchantId;\n    }\n\n    private _getOrderReferenceId(): string | undefined {\n        const state = this._store.getState();\n        const amazon = state.remoteCheckout.getCheckout('amazon');\n\n        return amazon ? amazon.referenceId : undefined;\n    }\n\n    private _createWallet(options: AmazonPayPaymentInitializeOptions): Promise<AmazonPayWallet> {\n        return new Promise((resolve, reject) => {\n            const { container, onError = noop, onPaymentSelect = noop, onReady = noop } = options;\n            const referenceId = this._getOrderReferenceId();\n            const merchantId = this._getMerchantId();\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay Wallet widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const walletOptions: AmazonPayWalletOptions = {\n                amazonOrderReferenceId: referenceId,\n                design: { designMode: 'responsive' },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onPaymentSelect: orderReference => {\n                    this._synchronizeBillingAddress()\n                        .then(() => onPaymentSelect(orderReference))\n                        .catch(onError);\n                },\n                onReady: orderReference => {\n                    resolve();\n                    onReady(orderReference);\n                },\n            };\n\n            if (!walletOptions.amazonOrderReferenceId) {\n                walletOptions.onReady = orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                };\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.Wallet(walletOptions);\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeBillingAddress(): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializeBilling(methodId, { referenceId })\n        )\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.billing && amazon.billing.address;\n                const billingAddress = state.billingAddress.getBillingAddress();\n                const internalBillingAddress = billingAddress && mapToInternalAddress(billingAddress);\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, internalBillingAddress || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._billingAddressActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            });\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n\n    private _processPaymentWith3ds(sellerId: string, referenceId: string, methodId: string, useStoreCredit: boolean, options: PaymentRequestOptions): Promise<never> {\n        return new Promise((_, reject) => {\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n            }\n\n            return this._window.OffAmazonPayments.initConfirmationFlow(\n                sellerId,\n                referenceId,\n                (confirmationFlow: AmazonPayConfirmationFlow) => {\n                    return this._store.dispatch(\n                        this._orderActionCreator.submitOrder({useStoreCredit}, options)\n                    )\n                        .then(() => this._store.dispatch(\n                            this._remoteCheckoutActionCreator.initializePayment(methodId, {\n                                referenceId,\n                                useStoreCredit,\n                            }))\n                        )\n                        .then(() => {\n                            confirmationFlow.success();\n\n                            return new Promise<never>(() => {});\n                        })\n                        .catch(error => {\n                            confirmationFlow.error();\n\n                            return reject(error);\n                        });\n                }\n            );\n        });\n    }\n}\n","export interface OverlayOptions {\n    background?: string;\n    id?: string;\n    transitionDuration?: number;\n}\n\nexport interface OverlayShowOptions {\n    onClick?(event: MouseEvent): void;\n}\n\nexport default class Overlay {\n    private _element: HTMLElement;\n    private _unregisterClick?: () => void;\n\n    constructor(options?: OverlayOptions) {\n        this._element = this._createElement(options);\n    }\n\n    show(options?: OverlayShowOptions): void {\n        if (this._element.parentElement) {\n            return;\n        }\n\n        this._registerClick(options);\n\n        document.body.appendChild(this._element);\n\n        // Fade In\n        setTimeout(() => this._element.style.opacity = '1');\n    }\n\n    remove(): void {\n        if (!this._element.parentElement) {\n            return;\n        }\n\n        if (this._unregisterClick) {\n            this._unregisterClick();\n        }\n\n        this._removeAfterTransition();\n\n        setTimeout(() => this._element.style.opacity = '0');\n    }\n\n    private _createElement(options?: OverlayOptions): HTMLElement {\n        const element = document.createElement('div');\n        const {\n            background = 'rgba(0, 0, 0, 0.8)',\n            id = null,\n            transitionDuration = 400,\n        } = options || {};\n\n        element.style.background = background;\n        element.style.display = 'block';\n        element.style.height = '100%';\n        element.style.left = '0px';\n        element.style.opacity = '0';\n        element.style.position = 'fixed';\n        element.style.top = '0px';\n        element.style.transition = `opacity ${transitionDuration}ms ease-out`;\n        element.style.width = '100%';\n        element.style.zIndex = '2147483647';\n\n        if (id) {\n            element.id = id;\n        }\n\n        return element;\n    }\n\n    private _registerClick(options?: OverlayShowOptions): void {\n        if (this._unregisterClick) {\n            this._unregisterClick();\n        }\n\n        if (options && options.onClick) {\n            const { onClick } = options;\n\n            this._element.addEventListener('click', onClick);\n\n            this._unregisterClick = () => {\n                this._element.removeEventListener('click', onClick);\n                this._unregisterClick = undefined;\n            };\n        }\n    }\n\n    private _removeAfterTransition(): void {\n        const handeTransition: (event: Event) => void = event => {\n            // NOTE: `event` is not correctly typed in this version of TS\n            if ((event as TransitionEvent).propertyName !== 'opacity') {\n                return;\n            }\n\n            if (this._element.parentElement) {\n                this._element.parentElement.removeChild(this._element);\n            }\n\n            this._element.removeEventListener('transitionend', handeTransition);\n        };\n\n        this._element.addEventListener('transitionend', handeTransition);\n    }\n}\n","export default class CancellablePromise<T> {\n    promise: Promise<T>;\n    cancel!: (reason?: any) => void;\n\n    constructor(promise: Promise<T>) {\n        const cancellable = new Promise<T>((_, reject) => {\n            this.cancel = reject;\n        });\n\n        this.promise = Promise.race([promise, cancellable]);\n    }\n}\n","import { Address } from '../../../address';\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { Overlay } from '../../../common/overlay';\nimport { CancellablePromise } from '../../../common/utility';\nimport { OrderPaymentRequestBody } from '../../../order';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport { CreditCardInstrument, NonceInstrument } from '../../payment';\n\nimport { BraintreePaypal, BraintreeRequestData } from './braintree';\nimport { BraintreePaymentInitializeOptions, BraintreeThreeDSecureOptions } from './braintree-payment-options';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default class BraintreePaymentProcessor {\n    private _threeDSecureOptions?: BraintreeThreeDSecureOptions;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _overlay: Overlay\n    ) {}\n\n    initialize(clientToken: string, options?: BraintreePaymentInitializeOptions): void {\n        this._braintreeSDKCreator.initialize(clientToken);\n        this._threeDSecureOptions = options && options.threeDSecure;\n    }\n\n    preloadPaypal(): Promise<BraintreePaypal> {\n        return this._braintreeSDKCreator.getPaypal();\n    }\n\n    tokenizeCard(payment: OrderPaymentRequestBody, billingAddress: Address): Promise<NonceInstrument> {\n        const { paymentData } = payment;\n        const requestData = this._mapToCreditCard(paymentData as CreditCardInstrument, billingAddress);\n\n        return this._braintreeSDKCreator.getClient()\n            .then(client => client.request(requestData))\n            .then(({ creditCards }) => ({\n                nonce: creditCards[0].nonce,\n            }));\n    }\n\n    paypal(amount: number, storeLanguage: string, currency: string, offerCredit: boolean): Promise<NonceInstrument> {\n        return this._braintreeSDKCreator.getPaypal()\n            .then(paypal => {\n                this._overlay.show({\n                    onClick: () => paypal.focusWindow(),\n                });\n\n                return paypal.tokenize({\n                    amount,\n                    currency,\n                    enableShippingAddress: true,\n                    flow: 'checkout',\n                    locale: storeLanguage,\n                    offerCredit,\n                    useraction: 'commit',\n                });\n            })\n            .then(response => {\n                this._overlay.remove();\n\n                return response;\n            })\n            .catch(error => {\n                this._overlay.remove();\n\n                throw error;\n            });\n    }\n\n    verifyCard(payment: OrderPaymentRequestBody, billingAddress: Address, amount: number): Promise<NonceInstrument> {\n        if (!this._threeDSecureOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { addFrame, removeFrame } = this._threeDSecureOptions;\n\n        return Promise.all([\n            this.tokenizeCard(payment, billingAddress),\n            this._braintreeSDKCreator.get3DS(),\n        ]).then(([paymentData, threeDSecure]) => {\n            const { nonce } = paymentData;\n            const cancelVerifyCard = () => threeDSecure.cancelVerifyCard()\n                .then(response => {\n                    verification.cancel(new PaymentMethodCancelledError());\n\n                    return response;\n                });\n\n            const verification = new CancellablePromise(\n                threeDSecure.verifyCard({\n                    addFrame: (error, iframe) => {\n                        addFrame(error, iframe, cancelVerifyCard);\n                    },\n                    amount,\n                    nonce,\n                    removeFrame,\n                })\n            );\n\n            return verification.promise;\n        });\n    }\n\n    appendSessionId(processedPayment: Promise<NonceInstrument>): Promise<NonceInstrument> {\n        return processedPayment\n            .then(paymentData => Promise.all([paymentData, this._braintreeSDKCreator.getDataCollector()]))\n            .then(([paymentData, { deviceData }]) => ({ ...paymentData, deviceSessionId: deviceData }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    private _mapToCreditCard(creditCard: CreditCardInstrument, billingAddress: Address): BraintreeRequestData {\n        let streetAddress = billingAddress.address1;\n\n        if (billingAddress.address2) {\n            streetAddress = ` ${billingAddress.address2}`;\n        }\n\n        return {\n            data: {\n                creditCard: {\n                    cardholderName: creditCard.ccName,\n                    number: creditCard.ccNumber,\n                    cvv: creditCard.ccCvv,\n                    expirationDate: `${creditCard.ccExpiry.month}/${creditCard.ccExpiry.year}`,\n                    options: {\n                        validate: false,\n                    },\n                    billingAddress: {\n                        countryName: billingAddress.country,\n                        postalCode: billingAddress.postalCode,\n                        streetAddress,\n                    },\n                },\n            },\n            endpoint: 'payment_methods/credit_cards',\n            method: 'post',\n        };\n    }\n}\n","import isVaultedInstrument from './is-vaulted-instrument';\nimport { CreditCardInstrument, PaymentInstrument } from './payment';\n\nexport default function isCreditCardLike(instrument: PaymentInstrument): instrument is CreditCardInstrument {\n    const card = instrument as CreditCardInstrument;\n\n    return !isVaultedInstrument(card) &&\n        typeof card.ccName === 'string' &&\n        typeof card.ccNumber === 'string' &&\n        typeof card.ccExpiry === 'object' &&\n        typeof card.ccExpiry.month === 'string' &&\n        typeof card.ccExpiry.year === 'string';\n    }\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport isCreditCardLike from '../../is-credit-card-like';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport Payment, { PaymentInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\n\nexport default class BraintreeCreditCardPaymentStrategy implements PaymentStrategy {\n    private _is3dsEnabled?: boolean;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(options.methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n                if (!paymentMethod || !paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(paymentMethod.clientToken, options.braintree);\n                this._is3dsEnabled = paymentMethod.config.is3dsEnabled;\n\n                return this._store.getState();\n            })\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(order, options)\n        )\n            .then(state =>\n                state.payment.isPaymentDataRequired(order.useStoreCredit) && payment ?\n                    this._preparePaymentData(payment) :\n                    Promise.resolve(payment as Payment)\n            )\n            .then(payment =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment(payment))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n\n    private _isUsingVaulting(paymentData: PaymentInstrument): boolean {\n        if (isCreditCardLike(paymentData)) {\n            return Boolean(paymentData.shouldSaveInstrument);\n        }\n\n        return isVaultedInstrument(paymentData);\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody): Promise<Payment> {\n        const { paymentData } = payment;\n        const state = this._store.getState();\n\n        if (paymentData && this._isUsingVaulting(paymentData)) {\n            return Promise.resolve(payment as Payment);\n        }\n\n        const order = state.order.getOrder();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!order) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrder);\n        }\n\n        if (!billingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const tokenizedCard = this._is3dsEnabled ?\n            this._braintreePaymentProcessor.verifyCard(payment, billingAddress, order.orderAmount) :\n            this._braintreePaymentProcessor.tokenizeCard(payment, billingAddress);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData }));\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError, PaymentMethodCancelledError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { BraintreeError } from './braintree';\nimport BraintreePaymentProcessor from './braintree-payment-processor';\nimport isBraintreeError from './is-braintree-error';\n\nexport default class BraintreePaypalPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor,\n        private _credit: boolean = false\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintree: braintreeOptions, methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (this._paymentMethod && this._paymentMethod.nonce) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(this._paymentMethod.clientToken, braintreeOptions);\n\n                return this._braintreePaymentProcessor.preloadPaypal();\n            })\n            .then(() => this._store.getState())\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return (payment ? this._preparePaymentData(payment, order.useStoreCredit) : Promise.resolve(payment))\n            .then(payment => Promise.all([payment, this._store.dispatch(this._orderActionCreator.submitOrder(order, options))]))\n            .then(([payment]) => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)))\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _handleError(error: BraintreeError | Error): never {\n        if (!isBraintreeError(error)) {\n            throw error;\n        }\n\n        if (error.code === 'PAYPAL_POPUP_CLOSED') {\n            throw new PaymentMethodCancelledError(error.message);\n        }\n\n        throw new StandardError(error.message);\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody, useStoreCredit?: boolean): Promise<Payment> {\n        const state = this._store.getState();\n        const grandTotal = state.checkout.getGrandTotal(useStoreCredit);\n        const config = state.config.getStoreConfig();\n\n        if (!grandTotal) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { currency, storeProfile: { storeLanguage } } = config;\n        const { method, nonce } = this._paymentMethod;\n\n        if (nonce) {\n            return Promise.resolve({ ...payment, paymentData: { nonce, method } });\n        }\n\n        const tokenizedCard = this._braintreePaymentProcessor\n            .paypal(grandTotal, storeLanguage, currency.code, this._credit);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData: { ...paymentData, method } }));\n    }\n}\n","export const CardinalSignatureValidationErrors = [100004, 1010, 1011, 1020];\n\nexport interface CardinalSDK {\n    configure(params: CardinalConfiguration): void;\n    on(params: CardinalEventType, callback: CardinalEventMap[CardinalEventType]): void;\n    off(params: CardinalEventType): void;\n    setup<K extends keyof CardinalInitializationDataMap>(initializationType: K, initializationData: CardinalInitializationDataMap[K]): void;\n    trigger(event: CardinalTriggerEvents, data?: string): Promise<CardinalBinProcessResponse | void>;\n    continue(paymentBrand: CardinalPaymentBrand, continueObject: CardinalContinue, order: CardinalPartialOrder): void;\n    start(paymentBrand: CardinalPaymentBrand, order: CardinalPartialOrder, jwt?: string): void;\n}\n\nexport interface CardinalWindow extends Window {\n    Cardinal?: CardinalSDK;\n}\n\nexport interface CardinalEventMap {\n    [CardinalEventType.SetupCompleted](setupCompleteData: CardinalSetupCompletedData): void;\n    [CardinalEventType.Validated](data: CardinalValidatedData, jwt?: string): void;\n}\n\nexport type CardinalConfiguration = Partial<{\n    logging: {\n        level: string;\n    };\n    payment: {\n        view: string;\n        framework: string;\n        displayLoading: boolean;\n    };\n}>;\n\nexport interface CardinalSetupCompletedData {\n    sessionId: string;\n    modules: CardinalModuleState[];\n}\n\nexport interface CardinalModuleState {\n    loaded: boolean;\n    module: string;\n}\n\nexport enum CardinalInitializationType {\n    Init = 'init',\n    Complete = 'complete',\n    Confirm = 'confirm',\n}\n\nexport interface CardinalInitializationDataMap {\n    [CardinalInitializationType.Init]: CardinalInitTypeData;\n    [CardinalInitializationType.Complete]: CardinalCompleteTypeData;\n    [CardinalInitializationType.Confirm]: CardinalConfirmTypeData;\n}\n\nexport interface CardinalInitTypeData {\n    jwt: string;\n}\n\nexport interface CardinalCompleteTypeData {\n    Status: string;\n}\n\nexport interface CardinalConfirmTypeData {\n    jwt: string;\n    cardinalResponseJwt: string;\n}\n\nexport interface CardinalValidatedData {\n    ActionCode?: CardinalValidatedAction;\n    ErrorDescription: string;\n    ErrorNumber: number;\n    Validated: boolean;\n    Payment?: CardinalPayment;\n}\n\nexport interface CardinalPayment {\n    ExtendedData?: CardinalCCAExtendedData;\n    ProcessorTransactionId: string;\n    Type: CardinalPaymentType;\n}\n\nexport interface CardinalBinProcessResponse {\n    Status: boolean;\n}\n\nexport interface CardinalContinue {\n    AcsUrl: string;\n    Payload: string;\n}\n\nexport interface CardinalPartialOrder {\n    OrderDetails: CardinalOrderDetails;\n    Consumer?: CardinalConsumer;\n}\n\nexport interface CardinalConsumer {\n    Email1?: string;\n    Email2?: string;\n    ShippingAddress?: CardinalAddress;\n    BillingAddress?: CardinalAddress;\n    Account?: CardinalAccount;\n}\n\nexport interface CardinalAccount {\n    AccountNumber: number;\n    ExpirationMonth: number;\n    ExpirationYear: number;\n    NameOnAccount: string;\n    CardCode: number;\n}\n\nexport interface CardinalAddress {\n    FullName?: string;\n    FirstName: string;\n    MiddleName?: string;\n    LastName: string;\n    Address1: string;\n    Address2?: string;\n    Address3?: string;\n    City: string;\n    State: string;\n    PostalCode: string;\n    CountryCode: string;\n    Phone1?: string;\n    Phone2?: string;\n}\n\nexport interface CardinalOrderDetails {\n    OrderNumber: string;\n    Amount: number;\n    CurrencyCode: string;\n    OrderDescription?: string;\n    OrderChannel: string;\n    TransactionId?: string;\n}\n\nexport type CardinalCCAExtendedData = Partial<{\n    CAVV: string;\n    ECIFlag: string;\n    PAResStatus: string;\n    SignatureVerification: string;\n    XID: string;\n    UCAFIndicator: string;\n}>;\n\nexport enum CardinalEventType {\n    SetupCompleted = 'payments.setupComplete',\n    Validated = 'payments.validated',\n}\n\nexport enum CardinalValidatedAction {\n    Success = 'SUCCESS',\n    NoAction = 'NOACTION',\n    Failure = 'FAILURE',\n    Error = 'ERROR',\n}\n\nexport enum CardinalPaymentType {\n    CCA = 'CCA',\n    Paypal = 'Paypal',\n    Wallet = 'Wallet',\n    VisaCheckout = 'VisaCheckout',\n    ApplePay = 'ApplePay',\n    DiscoverWallet = 'DiscoverWallet',\n}\n\nexport enum CardinalTriggerEvents {\n    BinProcess = 'bin.process',\n}\n\nexport enum CardinalPaymentBrand {\n    CCA = 'cca',\n}\n\nexport enum CardinalSignatureVerification {\n    Yes = 'Y',\n    No = 'N',\n}\n","import { BraintreeError } from './braintree';\n\nexport default function isBraintreeError(error: BraintreeError | Error): error is BraintreeError {\n    return error.name === 'BraintreeError';\n}\n","import { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreeVisaCheckoutPaymentProcessor from './braintree-visacheckout-payment-processor';\nimport { VisaCheckoutPaymentSuccessPayload } from './visacheckout';\nimport VisaCheckoutScriptLoader from './visacheckout-script-loader';\n\nexport default class BraintreeVisaCheckoutPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    onError = () => {},\n                    onPaymentSelect = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: false,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, visaInitOptions]) => {\n                    visaCheckout.init(visaInitOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .then(() => onPaymentSelect())\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (_, error) => onError(error));\n                });\n            })\n            .then(() => this._store.getState());\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData || !this._paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { nonce } = this._paymentMethod.initializationData;\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData: { nonce } }))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                paymentSuccessPayload,\n                state.shippingAddress.getShippingAddress(),\n                state.billingAddress.getBillingAddress()\n            )\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n}\n","import { find, some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    RequestError\n} from '../../../common/error/errors';\nimport isCreditCardLike from '../../is-credit-card-like';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\n\nimport {\n    CardinalClient,\n    CardinalOrderData,\n    CardinalSupportedPaymentInstrument\n} from './index';\n\nexport default class CardinalThreeDSecureFlow {\n    private _paymentMethod?: PaymentMethod;\n    private _clientToken?: string;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _cardinalClient: CardinalClient\n    ) {}\n\n    prepare(methodId: string): Promise<void> {\n        if (this._clientToken) {\n            return Promise.resolve();\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod || !this._paymentMethod.config) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._cardinalClient.initialize(methodId, this._paymentMethod.config.testMode);\n            })\n            .then(() => {\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._clientToken = this._paymentMethod.clientToken;\n\n                return this._cardinalClient.configure(this._clientToken);\n            });\n    }\n\n    start(payment: Payment): Promise<InternalCheckoutSelectors> {\n        if (!payment.paymentData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        if (!isCreditCardLike(payment.paymentData) && !isVaultedInstrument(payment.paymentData)) {\n            throw new InvalidArgumentError();\n        }\n\n        const paymentData = payment.paymentData;\n\n        return this._cardinalClient.runBinProcess(this._getBinNumber(paymentData))\n            .then(() => {\n                if (!this._clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                payment = {\n                    ...payment,\n                    paymentData: {\n                        ...paymentData,\n                        threeDSecure: { token: this._clientToken },\n                    },\n                };\n\n                return this._store.dispatch(this._paymentActionCreator.submitPayment(payment));\n            })\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, {code: 'three_d_secure_required'})) {\n                    return Promise.reject(error);\n                }\n\n                return this._cardinalClient.getThreeDSecureData(\n                    error.body.three_ds_result,\n                    this._getOrderData(paymentData)\n                )\n                .then(threeDSecure =>\n                    this._store.dispatch(this._paymentActionCreator.submitPayment({\n                        ...payment,\n                        paymentData: {\n                            ...paymentData,\n                            threeDSecure,\n                        },\n                    }))\n                );\n            });\n    }\n\n    private _getBinNumber(payment: CardinalSupportedPaymentInstrument): string {\n        if (isVaultedInstrument(payment)) {\n            const instruments = this._store.getState().instruments.getInstruments();\n\n            const { instrumentId } = payment;\n\n            const entry = find(instruments, { bigpayToken: instrumentId });\n\n            return entry && entry.iin || '';\n        }\n\n        return payment.ccNumber;\n    }\n\n    private _getOrderData(paymentData: CardinalSupportedPaymentInstrument): CardinalOrderData {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n        const shippingAddress = state.shippingAddress.getShippingAddress();\n        const checkout = state.checkout.getCheckout();\n        const order = state.order.getOrder();\n\n        if (!billingAddress || !billingAddress.email) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!order) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrder);\n        }\n\n        const payment: CardinalOrderData = {\n            billingAddress,\n            shippingAddress,\n            currencyCode: checkout.cart.currency.code,\n            id: order.orderId.toString(),\n            amount: checkout.cart.cartAmount,\n        };\n\n        if (isCreditCardLike(paymentData)) {\n            payment.paymentData = paymentData;\n        }\n\n        return payment;\n    }\n}\n","import { includes } from 'lodash';\n\nimport Address from '../../../address/address';\nimport BillingAddress from '../../../billing/billing-address';\nimport {\n    MissingDataError, MissingDataErrorType, NotInitializedError,\n    NotInitializedErrorType, StandardError\n} from '../../../common/error/errors';\nimport { CreditCardInstrument, ThreeDSecureToken, VaultedInstrument } from '../../payment';\nimport { ThreeDsResult } from '../../payment-response-body';\n\nimport {\n    CardinalAccount,\n    CardinalAddress,\n    CardinalConsumer,\n    CardinalEventType,\n    CardinalInitializationType,\n    CardinalPartialOrder,\n    CardinalPaymentBrand,\n    CardinalScriptLoader,\n    CardinalSignatureValidationErrors,\n    CardinalSignatureVerification,\n    CardinalSDK,\n    CardinalTriggerEvents,\n    CardinalValidatedAction,\n    CardinalValidatedData\n} from './index';\n\nexport type CardinalSupportedPaymentInstrument = CreditCardInstrument | VaultedInstrument;\n\nexport interface CardinalOrderData {\n    billingAddress: BillingAddress;\n    shippingAddress?: Address;\n    currencyCode: string;\n    id: string;\n    amount: number;\n    paymentData?: CreditCardInstrument;\n}\n\nexport default class CardinalClient {\n    private _sdk?: Promise<CardinalSDK>;\n\n    constructor(\n        private _scriptLoader: CardinalScriptLoader\n    ) {}\n\n    initialize(provider: string, testMode?: boolean): Promise<void> {\n        if (!this._sdk) {\n            this._sdk = this._scriptLoader.load(provider, testMode);\n        }\n\n        return this._sdk.then(() => {});\n    }\n\n    configure(clientToken: string): Promise<void> {\n        return this._getClientSDK()\n            .then(client => new Promise<void>((resolve, reject) => {\n                client.on(CardinalEventType.SetupCompleted, () => {\n                    client.off(CardinalEventType.SetupCompleted);\n                    client.off(CardinalEventType.Validated);\n\n                    resolve();\n                });\n\n                client.on(CardinalEventType.Validated, (data: CardinalValidatedData) => {\n                    client.off(CardinalEventType.SetupCompleted);\n                    client.off(CardinalEventType.Validated);\n\n                    switch (data.ActionCode) {\n                        case CardinalValidatedAction.Error:\n                            if (includes(CardinalSignatureValidationErrors, data.ErrorNumber)) {\n                                reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n                            }\n                            reject(new StandardError(data.ErrorDescription));\n                            break;\n                    }\n                });\n\n                client.setup(CardinalInitializationType.Init, {\n                    jwt: clientToken,\n                });\n            }));\n    }\n\n    runBinProcess(binNumber: string): Promise<void> {\n        return this._getClientSDK()\n            .then(client => client.trigger(CardinalTriggerEvents.BinProcess, binNumber).catch(() => {}))\n            .then(result => {\n                if (!result || !result.Status) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n            });\n    }\n\n    getThreeDSecureData(threeDSecureData: ThreeDsResult, orderData: CardinalOrderData): Promise<ThreeDSecureToken> {\n        return this._getClientSDK()\n            .then(client => {\n                return new Promise<ThreeDSecureToken>((resolve, reject) => {\n                    client.on(CardinalEventType.Validated, (data: CardinalValidatedData, jwt?: string) => {\n                        client.off(CardinalEventType.Validated);\n                        if (!jwt) {\n                            return reject(new StandardError(data.ErrorDescription ? data.ErrorDescription : 'An error was encountered while processing the transaction.'));\n                        }\n\n                        if (!data.ActionCode) {\n                            return resolve({ token: jwt });\n                        }\n\n                        switch (data.ActionCode) {\n                            case CardinalValidatedAction.Success:\n                                return resolve({ token: jwt });\n                            case CardinalValidatedAction.NoAction:\n                                if (data.ErrorNumber > 0) {\n                                    return reject(new StandardError(data.ErrorDescription));\n                                } else if (!data.Payment || !data.Payment.ExtendedData || data.Payment.ExtendedData.SignatureVerification !== CardinalSignatureVerification.Yes) {\n                                    return reject(new StandardError('Transaction signature could not be validated.'));\n                                }\n\n                                return resolve({ token: jwt });\n                            case CardinalValidatedAction.Failure:\n                                return reject(new StandardError('User failed authentication or an error was encountered while processing the transaction.'));\n                            case CardinalValidatedAction.Error:\n                                return reject(new StandardError(data.ErrorDescription));\n                        }\n                    });\n\n                    const continueObject = {\n                        AcsUrl: threeDSecureData.acs_url,\n                        Payload: threeDSecureData.merchant_data,\n                    };\n\n                    const partialOrder = this._mapToPartialOrder(orderData, threeDSecureData.payer_auth_request);\n\n                    client.continue(CardinalPaymentBrand.CCA, continueObject, partialOrder);\n                });\n            });\n    }\n\n    private _mapToPartialOrder(orderData: CardinalOrderData, transactionId: string): CardinalPartialOrder {\n        const consumer: CardinalConsumer = {\n            BillingAddress: this._mapToCardinalAddress(orderData.billingAddress),\n        };\n\n        if (orderData.paymentData) {\n            consumer.Account = this._mapToCardinalAccount(orderData.paymentData);\n        }\n\n        if (orderData.billingAddress.email) {\n            consumer.Email1 = orderData.billingAddress.email;\n        }\n\n        if (orderData.shippingAddress) {\n            consumer.ShippingAddress = this._mapToCardinalAddress(orderData.shippingAddress);\n        }\n\n        return  {\n            Consumer: consumer,\n            OrderDetails: {\n                OrderNumber: orderData.id,\n                Amount: orderData.amount,\n                CurrencyCode: orderData.currencyCode,\n                OrderChannel: 'S',\n                TransactionId: transactionId,\n            },\n        };\n    }\n\n    private _mapToCardinalAccount(paymentData: CreditCardInstrument): CardinalAccount {\n        return {\n            AccountNumber: Number(paymentData.ccNumber),\n            ExpirationMonth: Number(paymentData.ccExpiry.month),\n            ExpirationYear: Number(paymentData.ccExpiry.year),\n            NameOnAccount: paymentData.ccName,\n            CardCode: Number(paymentData.ccCvv),\n        };\n    }\n\n    private _mapToCardinalAddress(address: Address): CardinalAddress {\n        const cardinalAddress: CardinalAddress = {\n            FirstName: address.firstName,\n            LastName: address.lastName,\n            Address1: address.address1,\n            City: address.city,\n            State: address.stateOrProvince,\n            PostalCode: address.postalCode,\n            CountryCode: address.countryCode,\n        };\n\n        if (address.address2) {\n            cardinalAddress.Address2 = address.address2;\n        }\n\n        if (address.phone) {\n            cardinalAddress.Phone1 = address.phone;\n        }\n\n        return cardinalAddress;\n    }\n\n    private _getClientSDK(): Promise<CardinalSDK> {\n        if (!this._sdk) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._sdk;\n    }\n}\n","export enum ChasePayEventType {\n    StartCheckout = 'startCheckout',\n    CompleteCheckout = 'completeCheckout',\n    CancelCheckout = 'cancelCheckout',\n}\n\nexport interface ChasePayEventMap {\n    [ChasePayEventType.StartCheckout](digitalSessionId: string): void;\n    [ChasePayEventType.CompleteCheckout](payload: ChasePaySuccessPayload): void;\n    [ChasePayEventType.CancelCheckout](): void;\n}\n\nexport interface ChasePayHostWindow extends Window {\n    JPMC?: JPMC;\n}\n\nexport interface JPMC {\n    ChasePay: ChasePay;\n}\n\nexport interface ChasePaySuccessPayload {\n    sessionToken: string;\n}\n\nexport interface ChasePayInsertOptions {\n    color?: string;\n    containers?: string[];\n    height?: number;\n    width?: number;\n}\n\nexport interface ChasePayConfigureOptions {\n    language?: string;\n    zindex?: number;\n    sessionWarningTime?: number;\n    sessionTimeoutTime?: number;\n}\n\nexport interface ChasePay {\n    EventType: {\n        START_CHECKOUT: ChasePayEventType.StartCheckout;\n        COMPLETE_CHECKOUT: ChasePayEventType.CompleteCheckout;\n        CANCEL_CHECKOUT: ChasePayEventType.CancelCheckout;\n    };\n    isChasePayUp(): boolean;\n    insertButtons(options: ChasePayInsertOptions): void;\n    insertBrandings(options: ChasePayInsertOptions): void;\n    startCheckout(digitalSessionId?: string): void;\n    showLoadingAnimation(): void;\n    configure(options: ChasePayConfigureOptions): void;\n    on<ChasePayEventType extends keyof ChasePayEventMap>(eventType: ChasePayEventType, callback: ChasePayEventMap[ChasePayEventType]): {};\n}\n\nexport interface ChasePayInitializeOptions {\n    /**\n     * This container is used to host the chasepay branding logo.\n     * It should be an HTML element.\n     */\n    logoContainer: string;\n\n    /**\n     * This walletButton is used to set an event listener, provide an element ID if you want\n     * users to be able to launch the ChasePay wallet modal by clicking on a button.\n     * It should be an HTML element.\n     */\n    walletButton?: string;\n\n    /**\n     * A callback that gets called when the customer selects a payment option.\n     */\n    onPaymentSelect?(): void;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { CardinalSDK, CardinalWindow } from './cardinal';\n\nconst SDK_TEST_URL = 'https://songbirdstag.cardinalcommerce.com/edge/v1/songbird.js';\nconst SDK_PROD_URL = 'https://songbird.cardinalcommerce.com/edge/v1/songbird.js';\n\nexport default class CardinalScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: CardinalWindow = window\n    ) {}\n\n    load(provider: string, testMode?: boolean): Promise<CardinalSDK> {\n        const url = testMode ? SDK_TEST_URL : SDK_PROD_URL;\n\n        return this._scriptLoader\n            .loadScript(url + '?v=' + provider)\n            .then(() => {\n                if (!this._window.Cardinal) {\n                    throw new StandardError();\n                }\n\n                return this._window.Cardinal;\n            });\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { Subject } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\nimport { WepayRiskClient } from '../wepay';\n\nimport { ChasePay, ChasePayEventType, ChasePaySuccessPayload } from './chasepay';\nimport ChasePayInitializeOptions from './chasepay-initialize-options';\nimport ChasePayScriptLoader from './chasepay-script-loader';\n\nexport default class ChasePayPaymentStrategy implements PaymentStrategy {\n    private _chasePayClient?: ChasePay;\n    private _methodId!: string;\n    private _walletButton?: HTMLElement;\n    private _walletEvent$: Subject<{ type: ChasePayEventType }>;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        this._walletEvent$ = new Subject();\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        if (!options.chasepay) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.chasepay\" argument is not provided.');\n        }\n\n        const walletButton = options.chasepay.walletButton && document.getElementById(options.chasepay.walletButton);\n\n        if (walletButton) {\n            this._walletButton = walletButton;\n            this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n        }\n\n        return this._configureWallet(options.chasepay)\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._chasePayClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._getPayment()\n            .catch(error => {\n                if (error.subtype === MissingDataErrorType.MissingPayment) {\n                    return this._displayWallet()\n                        .then(() => this._getPayment());\n                }\n\n                throw error;\n            })\n            .then(payment =>\n                this._createOrder(payment, payload.useStoreCredit, options)\n            );\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _configureWallet(options: ChasePayInitializeOptions): Promise<void> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return this._chasePayScriptLoader.load(paymentMethod.config.testMode)\n            .then(({ ChasePay }) => {\n                this._chasePayClient = ChasePay;\n\n                if (options.logoContainer && document.getElementById(options.logoContainer)) {\n                    this._chasePayClient.insertBrandings({\n                        color: 'white',\n                        containers: [options.logoContainer],\n                    });\n                }\n\n                this._chasePayClient.configure({\n                    language: storeConfig.storeProfile.storeLanguage,\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CancelCheckout, () => {\n                    this._walletEvent$.next({ type: ChasePayEventType.CancelCheckout });\n\n                    if (options.onCancel) {\n                        options.onCancel();\n                    }\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CompleteCheckout, (payload: ChasePaySuccessPayload) => {\n                    this._setSessionToken(payload.sessionToken)\n                        .then(() => {\n                            this._walletEvent$.next({ type: ChasePayEventType.CompleteCheckout });\n\n                            if (options.onPaymentSelect) {\n                                options.onPaymentSelect();\n                            }\n                        });\n                });\n            });\n    }\n\n    private _displayWallet(): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n                .then(state => {\n                    const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                    if (!this._chasePayClient) {\n                        throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                    }\n\n                    if (!paymentMethod) {\n                        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                    }\n\n                    this._chasePayClient.showLoadingAnimation();\n                    this._chasePayClient.startCheckout(paymentMethod.initializationData.digitalSessionId);\n                });\n\n            // Wait for payment selection\n            return new Promise((resolve, reject) => {\n                this._walletEvent$\n                    .pipe(take(1))\n                    .subscribe((event: { type: ChasePayEventType }) => {\n                        if (event.type === ChasePayEventType.CancelCheckout) {\n                            reject(new PaymentMethodCancelledError());\n                        } else if (event.type === ChasePayEventType.CompleteCheckout) {\n                            resolve();\n                        }\n                    });\n            });\n        }, { methodId: this._methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _setSessionToken(sessionToken: string): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const merchantRequestId = paymentMethod && paymentMethod.initializationData.merchantRequestId;\n\n        return this._requestSender.post('checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: {\n                action: 'set_external_checkout',\n                provider: this._methodId,\n                sessionToken,\n                merchantRequestId,\n            },\n        })\n            // Re-hydrate checkout data\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId)),\n            ]))\n            .then(() => this._store.getState());\n    }\n\n    private _getPayment(): Promise<Payment> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n            .then(() => {\n                if (this._methodId === 'wepay') {\n                    return this._wepayRiskClient.initialize()\n                        .then(client => client.getRiskToken());\n                }\n\n                return '';\n            })\n            .then(riskToken => {\n                const state = this._store.getState();\n                const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!paymentMethod.initializationData.paymentCryptogram) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPayment);\n                }\n\n                const paymentData = {\n                    method: this._methodId,\n                    cryptogramId: paymentMethod.initializationData.paymentCryptogram,\n                    eci: paymentMethod.initializationData.eci,\n                    transactionId: btoa(paymentMethod.initializationData.reqTokenId),\n                    ccExpiry: {\n                        month: paymentMethod.initializationData.expDate.toString().substr(0, 2),\n                        year: paymentMethod.initializationData.expDate.toString().substr(2, 2),\n                    },\n                    ccNumber: paymentMethod.initializationData.accountNum,\n                    accountMask: paymentMethod.initializationData.accountMask,\n                    extraData: riskToken ? { riskToken } : undefined,\n                };\n\n                return {\n                    methodId: this._methodId,\n                    paymentData,\n                };\n            });\n    }\n\n    private _createOrder(payment: Payment, useStoreCredit?: boolean, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit }, options))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)));\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): void {\n        event.preventDefault();\n\n        this._displayWallet();\n    }\n}\n","export default interface SquarePaymentForm {\n    build(): void;\n    requestCardNonce(): void;\n    setPostalCode(postalCode: string): void;\n}\n\nexport type SquarePaymentFormConstructor = new(options: SquareFormOptions) => SquarePaymentForm;\n\nexport interface SquareFormOptions {\n    applicationId: string;\n    env: string;\n    locationId: string;\n    inputClass?: string;\n    inputStyles?: string[];\n    callbacks?: SquareFormCallbacks;\n    cardNumber: SquareFormElement;\n    cvv: SquareFormElement;\n    expirationDate: SquareFormElement;\n    postalCode: SquareFormElement;\n    masterpass: SquareFormElement;\n}\nexport interface LineItem {\n    label: string;\n    amount: string;\n    pending: boolean;\n}\n\nexport interface SquarePaymentRequest {\n    requestShippingAddress: boolean;\n    requestBillingInfo: boolean;\n    shippingContact?: Contact;\n    countryCode: string;\n    currencyCode: string;\n    lineItems?: LineItem[];\n    total: LineItem;\n}\n\nexport interface NonceGenerationError {\n    type: string;\n    message: string;\n    field: string;\n}\n\nexport interface CardData {\n    card_brand: CardBrand;\n    last_4: number;\n    exp_month: number;\n    exp_year: number;\n    billing_postal_code: string;\n    digital_wallet_type: DigitalWalletType;\n}\n\nexport interface Contact {\n    familyName: string;\n    givenName: string;\n    email: string;\n    country: string;\n    countryName: string;\n    region: string;\n    city: string;\n    addressLines: string[];\n    postalCode: string;\n    phone: string;\n}\n\nexport enum CardBrand {\n    americanExpress = 'AMERICAN_EXPRESS',\n    discover = 'DISCOVER',\n    discoverDiners = 'DISCOVER_DINERS',\n    JCB = 'JCB',\n    masterCard = 'MASTERCARD',\n    unionPay = 'CHINA_UNIONPAY',\n    unknown = 'OTHER_BRAND',\n    visa = 'VISA',\n    squareGift = 'SQUARE_GIFT_CARD',\n}\n\nexport enum DigitalWalletType {\n    applePay = 'APPLEPAY',\n    masterpass = 'MASTERPASS',\n    none = 'NONE',\n}\n\n/**\n * Configures any form element provided by Square payment.\n */\nexport interface SquareFormElement {\n    /**\n     * The ID of the container which the form element should insert into.\n     */\n    elementId: string;\n\n    /**\n     * The placeholder text to use for the form element, if provided.\n     */\n    placeholder?: string;\n}\n\nexport interface SquareFormCallbacks {\n    paymentFormLoaded?(form: SquarePaymentForm): void;\n    unsupportedBrowserDetected?(): void;\n    cardNonceResponseReceived?(\n        errors?: NonceGenerationError[],\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): void;\n    methodsSupported?(methods: { [key: string]: boolean }): void;\n    createPaymentRequest?(): void;\n}\n\nexport type SquareFormFactory = (options: SquareFormOptions) => SquarePaymentForm;\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class ConvergePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _formPoster: FormPoster\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            )\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                    return Promise.reject(error);\n                }\n\n                return new Promise(() => {\n                    this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                        PaReq: error.body.three_ds_result.payer_auth_request,\n                        TermUrl: error.body.three_ds_result.callback_url,\n                        MD: error.body.three_ds_result.merchant_data,\n                    });\n                });\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class CreditCardPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            );\n    }\n\n    finalize(_options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(_options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(_options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport { CardinalThreeDSecureFlow } from '../cardinal';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class CyberSourcePaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _threeDSecureFlow: CardinalThreeDSecureFlow\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!this._paymentMethod.config.is3dsEnabled) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._threeDSecureFlow.prepare(methodId)\n            .then(() => this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => {\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._paymentMethod.config.is3dsEnabled ?\n                    this._threeDSecureFlow.start(payment) :\n                    this._store.dispatch(this._paymentActionCreator.submitPayment(payment));\n            });\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { GooglePaymentData, PaymentMethodData } from './googlepay';\nimport GooglePayPaymentInitializeOptions from './googlepay-initialize-options';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\n\nexport default class GooglePayPaymentStrategy implements PaymentStrategy {\n    private _googlePayOptions?: GooglePayPaymentInitializeOptions;\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        return this._googlePayPaymentProcessor.initialize(this._methodId)\n            .then(() => {\n                this._googlePayOptions = this._getGooglePayOptions(options);\n\n                if (!this._googlePayOptions) {\n                    throw new InvalidArgumentError('Unable to initialize payment because \"options.googlepay\" argument is not provided.');\n                }\n\n                const walletButton = this._googlePayOptions.walletButton && document.getElementById(this._googlePayOptions.walletButton);\n\n                if (walletButton) {\n                    this._walletButton = walletButton;\n                    this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                }\n\n                return this._store.getState();\n            });\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n\n        return this._googlePayPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._googlePayOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.googlepay\" argument is not provided.');\n        }\n\n        const {\n            onError = () => {},\n            onPaymentSelect = () => {},\n        } = this._googlePayOptions;\n\n        return Promise.resolve(this._getPayment())\n            .then(payment => {\n                if (!payment.paymentData.nonce || !payment.paymentData.cardInformation) {\n                    // TODO: Find a way to share the code with _handleWalletButtonClick method\n                    return this._googlePayPaymentProcessor.displayWallet()\n                        .then(paymentData => this._paymentInstrumentSelected(paymentData))\n                        .then(() => onPaymentSelect())\n                        .then(() => this._getPayment())\n                        .catch(error => {\n                            if (error.statusCode !== 'CANCELED') {\n                                onError(error);\n                            }\n                        });\n                }\n\n                return payment;\n            })\n            .then(() =>\n                this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit: payload.useStoreCredit }, options))\n                    .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(this._getPayment())))\n            );\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _paymentInstrumentSelected(paymentData: GooglePaymentData) {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const methodId = this._methodId;\n\n        // TODO: Revisit how we deal with GooglePaymentData after receiving it from Google\n        return this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n    }\n\n    private _getGooglePayOptions(options: PaymentInitializeOptions): GooglePayPaymentInitializeOptions {\n        if (options.methodId === 'googlepaybraintree' && options.googlepaybraintree) {\n            return options.googlepaybraintree;\n        }\n\n        if (options.methodId === 'googlepaystripe' && options.googlepaystripe) {\n            return options.googlepaystripe;\n        }\n\n        throw new InvalidArgumentError();\n    }\n\n    private _getPayment(): PaymentMethodData {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const paymentData = {\n            method: this._methodId,\n            nonce: paymentMethod.initializationData.nonce,\n            cardInformation: paymentMethod.initializationData.card_information,\n        };\n\n        return {\n            methodId: this._methodId,\n            paymentData,\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<InternalCheckoutSelectors> {\n        event.preventDefault();\n\n        if (!this._methodId || !this._googlePayOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const methodId = this._methodId;\n\n        const {\n            onError = () => {},\n            onPaymentSelect = () => {},\n        } = this._googlePayOptions;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._googlePayPaymentProcessor.displayWallet()\n                .then(paymentData => this._paymentInstrumentSelected(paymentData))\n                .then(() => onPaymentSelect())\n                .catch(error => {\n                    if (error.statusCode !== 'CANCELED') {\n                        onError(error);\n                    }\n                });\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n}\n","import { includes } from 'lodash';\n\nimport { Address } from '../../../address';\nimport BillingAddress from '../../../billing/billing-address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport PaymentMethodInvalidError from '../../errors/payment-method-invalid-error';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport KlarnaCredit, { KlarnaAddress, KlarnaLoadResponse, KlarnaUpdateSessionParams } from './klarna-credit';\nimport KlarnaScriptLoader from './klarna-script-loader';\n\nexport default class KlarnaPaymentStrategy implements PaymentStrategy {\n    private _klarnaCredit?: KlarnaCredit;\n    private _unsubscribe?: (() => void);\n    private _supportedEUCountries = ['AT', 'DE', 'DK', 'FI', 'GB', 'NL', 'NO', 'SE', 'CH'];\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _klarnaScriptLoader: KlarnaScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._klarnaScriptLoader.load()\n            .then(klarnaCredit => { this._klarnaCredit = klarnaCredit; })\n            .then(() => {\n                this._unsubscribe = this._store.subscribe(\n                    state => {\n                        if (state.paymentStrategies.isInitialized(options.methodId)) {\n                            this._loadWidget(options);\n                        }\n                    },\n                    state => {\n                        const checkout = state.checkout.getCheckout();\n\n                        return checkout && checkout.grandTotal;\n                    }\n                );\n\n                return this._loadWidget(options);\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._unsubscribe) {\n            this._unsubscribe();\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload } } = payload;\n\n        return this._authorize()\n            .then(({ authorization_token: authorizationToken }) => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { authorizationToken })\n            ))\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                    // Note: API currently doesn't support using Store Credit with Klarna.\n                    // To prevent deducting customer's store credit, set it as false.\n                    useStoreCredit: false,\n                }, options)\n            ));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _loadWidget(options: PaymentInitializeOptions): Promise<KlarnaLoadResponse> {\n        if (!options.klarna) {\n            throw new InvalidArgumentError('Unable to load widget because \"options.klarna\" argument is not provided.');\n        }\n\n        const { methodId, klarna: { container, onLoad } } = options;\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise<KlarnaLoadResponse>(resolve => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!this._klarnaCredit || !paymentMethod.clientToken) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                this._klarnaCredit.init({ client_token: paymentMethod.clientToken });\n\n                this._klarnaCredit.load({ container }, response => {\n                    if (onLoad) {\n                        onLoad(response);\n                    }\n                    resolve(response);\n                });\n            }));\n    }\n\n    private _getUpdateSessionData(billingAddress: BillingAddress, shippingAddress?: Address): KlarnaUpdateSessionParams {\n        if (!includes(this._supportedEUCountries, billingAddress.countryCode)) {\n            return {};\n        }\n\n        const data: KlarnaUpdateSessionParams = {\n            billing_address: this._mapToKlarnaAddress(billingAddress, billingAddress.email),\n        };\n\n        if (shippingAddress) {\n            data.shipping_address = this._mapToKlarnaAddress(shippingAddress, billingAddress.email);\n        }\n\n        return data;\n    }\n\n    private _mapToKlarnaAddress(address: Address, email?: string): KlarnaAddress {\n        const klarnaAddress: KlarnaAddress = {\n            street_address: address.address1,\n            city: address.city,\n            country: address.countryCode,\n            given_name: address.firstName,\n            family_name: address.lastName,\n            postal_code: address.postalCode,\n            region: address.stateOrProvince,\n            email,\n        };\n\n        if (address.address2) {\n            klarnaAddress.street_address2 = address.address2;\n        }\n\n        if (address.phone) {\n            klarnaAddress.phone = address.phone;\n        }\n\n        return klarnaAddress;\n    }\n\n    private _authorize(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            const billingAddress = this._store.getState().billingAddress.getBillingAddress();\n            const shippingAddress = this._store.getState().shippingAddress.getShippingAddress();\n\n            if (!billingAddress) {\n                throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n            }\n\n            if (!this._klarnaCredit) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            const updateSessionData = this._getUpdateSessionData(billingAddress, shippingAddress);\n\n            this._klarnaCredit.authorize(updateSessionData, res => {\n                if (res.approved) {\n                    return resolve(res);\n                }\n\n                if (res.show_form) {\n                    return reject(new PaymentMethodCancelledError());\n                }\n\n                reject(new PaymentMethodInvalidError());\n            });\n        });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport KlarnaCredit from './klarna-credit';\nimport KlarnaWindow from './klarna-window';\n\nconst SDK_URL = '//credit.klarnacdn.net/lib/v1/api.js';\n\nexport default class KlarnaScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<KlarnaCredit> {\n        return this._scriptLoader.loadScript(SDK_URL)\n            .then(() => (window as KlarnaWindow).Klarna.Credit);\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class LegacyPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport getCallbackUrl from './get-callback-url';\nimport { Masterpass, MasterpassCheckoutOptions } from './masterpass';\nimport MasterpassScriptLoader from './masterpass-script-loader';\n\nexport default class MasterpassPaymentStrategy implements PaymentStrategy {\n    private _masterpassClient?: Masterpass;\n    private _paymentMethod?: PaymentMethod;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._masterpassScriptLoader.load(this._paymentMethod.config.testMode)\n            .then(masterpass => {\n                this._masterpassClient = masterpass;\n\n                if (!options.masterpass) {\n                    throw new InvalidArgumentError('Unable to initialize payment because \"options.masterpass\" argument is not provided.');\n                }\n\n                const walletButton  = options.masterpass.walletButton && document.getElementById(options.masterpass.walletButton);\n\n                if (walletButton) {\n                    this._walletButton = walletButton;\n                    this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                }\n\n                return this._store.getState();\n            });\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._masterpassClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment } = payload;\n        const order = { useStoreCredit: payload.useStoreCredit };\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData || !this._paymentMethod.initializationData.gateway) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        // TODO: Refactor the API endpoint to return nonce in the right place.\n        const paymentData = this._paymentMethod.initializationData.paymentData;\n\n        // TODO: Redirect to Masterpass if nonce has not been generated yet. And then finalise the order when the shopper is redirected back to the checkout page.\n        if (!paymentData) {\n            throw new InvalidArgumentError('Unable to proceed because \"paymentMethod.initializationData.paymentData\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData })));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: this._paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.subtotal.toFixed(2),\n            currency: storeConfig.currency.code,\n            cartId: checkout.cart.id,\n            suppressShippingAddress: false,\n            callbackUrl: getCallbackUrl('checkout'),\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event) {\n        event.preventDefault();\n\n        if (!this._masterpassClient) {\n            return;\n        }\n\n        const payload = this._createMasterpassPayload();\n        this._masterpassClient.checkout(payload);\n    }\n}\n","import { omit } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class NoPaymentDataRequiredPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options)\n        );\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class OfflinePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const action = this._orderActionCreator.submitOrder({\n            ...payload,\n            payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n        }, options);\n\n        return this._store.dispatch(action);\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class OffsitePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const orderPayload = this._shouldSubmitFullPayload(payment) ? payload : order;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.initializeOffsitePayment(payment.methodId, payment.gatewayId))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n        const status = state.payment.getPaymentStatus();\n\n        if (order && (status === paymentStatusTypes.ACKNOWLEDGE || status === paymentStatusTypes.FINALIZE)) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _shouldSubmitFullPayload(payment?: OrderPaymentRequestBody): boolean {\n        // FIXME: A temporary workaround to support offsite payment methods\n        // where their return URL needs to be provided by the core app.\n        if (!payment) {\n            return false;\n        }\n\n        return payment.gatewayId === 'adyen' || payment.methodId === 'ccavenuemars';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport { CardinalThreeDSecureFlow } from '../cardinal';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class PaypalProPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _threeDSecureFlow: CardinalThreeDSecureFlow\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!this._paymentMethod.config.is3dsEnabled) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._threeDSecureFlow.prepare(methodId)\n            .then(() => this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isPaymentAcknowledged()) {\n            return this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n                }, options)\n            );\n        }\n\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => {\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._paymentMethod.config.is3dsEnabled ?\n                    this._threeDSecureFlow.start(payment) :\n                    this._store.dispatch(this._paymentActionCreator.submitPayment(payment));\n            });\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _isPaymentAcknowledged(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nimport PaypalScriptLoader from './paypal-script-loader';\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalExpressPaymentStrategy implements PaymentStrategy {\n    private _paypalSdk?: PaypalSDK;\n    private _paymentMethod?: PaymentMethod;\n    private _useRedirectFlow: boolean = false;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _scriptLoader: PaypalScriptLoader,\n        private _window: PaypalHostWindow = window\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n        this._useRedirectFlow = (options.paypalexpress && options.paypalexpress.useRedirectFlow) === true;\n\n        if (!this._isInContextEnabled()) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._scriptLoader.loadPaypal()\n            .then(paypal => {\n                this._paypalSdk = paypal;\n\n                if (!this._paymentMethod || !this._paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._paypalSdk.checkout.setup(this._paymentMethod.config.merchantId, {\n                    button: 'paypal-button',\n                    environment: this._paymentMethod.config.testMode ? 'sandbox' : 'production',\n                });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._isInContextEnabled() && this._paypalSdk) {\n            this._paypalSdk.checkout.closeFlow();\n            this._paypalSdk = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paypal = this._paypalSdk;\n\n        if (this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n        }\n\n        if (!this._isInContextEnabled() || this._useRedirectFlow) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n                .then(state => {\n                    const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                    if (redirectUrl) {\n                        this._window.top.location.href = redirectUrl;\n                    }\n\n                    // We need to hold execution so the consumer does not redirect us somewhere else\n                    return new Promise<never>(() => {});\n                });\n        }\n\n        if (!paypal) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        paypal.checkout.initXO();\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n            .then(state => {\n                const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                if (redirectUrl) {\n                    paypal.checkout.startFlow(redirectUrl);\n                }\n\n                // We need to hold execution so the consumer does not redirect us somewhere else\n                return new Promise<never>(() => {});\n            })\n            .catch(error => {\n                paypal.checkout.closeFlow();\n\n                return Promise.reject(error);\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _isAcknowledgedOrFinalized(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE\n            || state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE;\n    }\n\n    private _isInContextEnabled(): boolean {\n        return !!(this._paymentMethod && this._paymentMethod.config.merchantId);\n    }\n}\n","import { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class SagePayPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _formPoster: any\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            )\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                    return Promise.reject(error);\n                }\n\n                return new Promise(() => {\n                    this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                        PaReq: error.body.three_ds_result.payer_auth_request,\n                        TermUrl: error.body.three_ds_result.callback_url,\n                        MD: error.body.three_ds_result.merchant_data,\n                    });\n                });\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import StandardError from './standard-error';\n\nexport default class UnsupportedBrowserError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unsupported browser error');\n\n        this.name = 'UnsupportedBrowserError';\n        this.type = 'unsupported_browser';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\nimport { omit } from 'lodash';\nimport { noop } from 'rxjs';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    StandardError,\n    TimeoutError,\n    UnsupportedBrowserError,\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { NonceInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport SquarePaymentForm, {\n    CardData,\n    Contact,\n    DigitalWalletType,\n    NonceGenerationError,\n    SquareFormElement,\n    SquareFormOptions,\n    SquarePaymentRequest\n} from './square-form';\nimport SquarePaymentInitializeOptions from './square-payment-initialize-options';\nimport SquareScriptLoader from './square-script-loader';\n\nexport default class SquarePaymentStrategy implements PaymentStrategy {\n    private _deferredRequestNonce?: DeferredPromise;\n    private _paymentForm?: SquarePaymentForm;\n    private _paymentMethod?: PaymentMethod;\n    private _squareOptions?: SquarePaymentInitializeOptions;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _scriptLoader: SquareScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n\n        this._syncPaymentMethod(methodId);\n\n        return this._scriptLoader.load()\n            .then(createSquareForm =>\n                new Promise((resolve, reject) => {\n                    this._paymentForm = createSquareForm(\n                        this._getFormOptions(options, { resolve, reject })\n                    );\n                    this._paymentForm.build();\n                }))\n            .then(() => this._store.getState());\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment } = orderRequest;\n\n        if (!payment || !payment.methodId) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        this._syncPaymentMethod(payment.methodId);\n\n        return this._getNonceInstrument(payment.methodId)\n            .then(paymentData =>\n                this._store.dispatch(this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options))\n                .then(() =>\n                    this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n                ));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _syncPaymentMethod(methodId: string): void {\n        const state = this._store.getState();\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n    }\n\n    private _getCountryCode(countryName: string) {\n        switch (countryName.toUpperCase()) {\n            case 'NEW ZELAND':\n                return 'NZ';\n            case 'AUSTRALIA':\n                return 'AU';\n            default:\n                return 'US';\n        }\n    }\n\n    private _getNonceInstrument(methodId: string): Promise<NonceInstrument> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (paymentMethod) {\n            const { initializationData } = paymentMethod;\n            if (initializationData && initializationData.paymentData.nonce) {\n                return Promise.resolve({ nonce: paymentMethod.initializationData.paymentData.nonce });\n            }\n        }\n\n        return new Promise<NonceInstrument>((resolve, reject) => {\n            if (!this._paymentForm) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            if (this._deferredRequestNonce) {\n                this._deferredRequestNonce.reject(new TimeoutError());\n            }\n\n            this._deferredRequestNonce = { resolve, reject };\n            this._paymentForm.requestCardNonce();\n        });\n    }\n\n    private _getFormOptions(options: PaymentInitializeOptions, deferred: DeferredPromise): SquareFormOptions {\n        const { square: squareOptions } = options;\n\n        if (!squareOptions || !this._paymentMethod) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.square\" argument is not provided.');\n        }\n\n        this._squareOptions = squareOptions;\n\n        return {\n            ...this._squareOptions,\n            ...this._paymentMethod.initializationData,\n            callbacks: {\n                cardNonceResponseReceived: (errors, nonce, cardData, billingContact, shippingContact) => {\n                    if (cardData && cardData.digital_wallet_type !== DigitalWalletType.none) {\n                        this._handleWalletNonceResponse(errors, nonce, cardData, billingContact, shippingContact);\n                    } else {\n                        this._handleCardNonceResponse(errors, nonce);\n                    }\n                },\n                createPaymentRequest: () => this._paymentRequestPayload(),\n                methodsSupported: methods => {\n                    const { masterpass } = squareOptions;\n\n                    if (masterpass) {\n                        this._showPaymentMethods(methods, masterpass);\n                    }\n                },\n                paymentFormLoaded: () => {\n                    deferred.resolve();\n                    this._setPostalCode();\n                },\n                unsupportedBrowserDetected: () => deferred.reject(new UnsupportedBrowserError()),\n            },\n        };\n    }\n\n    private _handleWalletNonceResponse(\n        errors?: NonceGenerationError[],\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact\n    ): void {\n        const onError = this._squareOptions && this._squareOptions.onError || noop;\n        const onPaymentSelect = this._squareOptions && this._squareOptions.onPaymentSelect || noop;\n\n        if (errors) {\n            onError(errors);\n        } else if (nonce && this._paymentMethod) {\n            this._paymentInstrumentSelected(\n                this._paymentMethod.id,\n                nonce,\n                cardData,\n                billingContact,\n                shippingContact\n            )\n                .then(onPaymentSelect)\n                .catch(onError);\n        }\n    }\n\n    private _handleCardNonceResponse(errors?: NonceGenerationError[], nonce?: string): void {\n        if (!this._deferredRequestNonce) {\n            throw new StandardError();\n        }\n\n        if (nonce && !errors) {\n            this._deferredRequestNonce.resolve({ nonce });\n\n            return;\n        }\n\n        const onError = this._squareOptions && this._squareOptions.onError || noop;\n\n        onError(errors);\n\n        this._deferredRequestNonce.reject(errors);\n    }\n\n    private _paymentInstrumentSelected(\n        methodId: string,\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): Promise<InternalCheckoutSelectors> {\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._setExternalCheckoutData(nonce, cardData, billingContact, shippingContact)\n            .then(() =>\n                Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _paymentRequestPayload(): SquarePaymentRequest {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return {\n            requestShippingAddress: true,\n            requestBillingInfo: true,\n            currencyCode: storeConfig.currency.code,\n            countryCode: this._getCountryCode(storeConfig.storeProfile.storeCountry),\n            total: {\n                label: storeConfig.storeProfile.storeName,\n                amount: String(checkout.subtotal),\n                pending: false,\n            },\n        };\n    }\n\n    private _setExternalCheckoutData(nonce?: string, cardData?: CardData, billingContact?: Contact, shippingContact?: Contact): Promise<Response<any>> {\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: {\n                nonce,\n                provider: 'squarev2',\n                action: 'set_external_checkout',\n                cardData: JSON.stringify(cardData),\n                billingContact: JSON.stringify(billingContact),\n                shippingContact: JSON.stringify(shippingContact),\n            },\n        });\n    }\n\n    private _setPostalCode(): void {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!this._paymentForm) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (billingAddress && billingAddress.postalCode) {\n            this._paymentForm.setPostalCode(billingAddress.postalCode);\n        }\n    }\n\n    private _showPaymentMethods(methods: { [key: string]: boolean }, element: SquareFormElement): void {\n        const masterpassBtn = document.getElementById(element.elementId);\n\n        if (masterpassBtn && methods.masterpass) {\n            masterpassBtn.style.display = 'inline-block';\n        }\n    }\n}\n\nexport interface DeferredPromise {\n    resolve(resolution?: NonceInstrument): void;\n    reject(reason?: any): void;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { SquareFormFactory, SquareFormOptions } from './square-form';\nimport SquareWindow from './square-window';\n\nexport default class SquareScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<SquareFormFactory> {\n        const scriptURI = '//js.squareup.com/v2/paymentform';\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (options: SquareFormOptions) =>\n                new (window as SquareWindow).SqPaymentForm(options)\n            );\n    }\n}\n","import { some } from 'lodash';\n\nimport { Address } from '../../../address';\nimport { BillingAddress } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    RequestError,\n    StandardError\n} from '../../../common/error/errors';\nimport { Customer } from '../../../customer';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport { HostedInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport {\n    StripeAddress,\n    StripeBillingDetails,\n    StripeCardElement,\n    StripeHandleCardPaymentOptions,\n    StripePaymentMethodData,\n    StripeShippingDetails,\n    StripeV3Client\n} from './stripev3';\nimport StripeV3ScriptLoader from './stripev3-script-loader';\n\nexport default class StripeV3PaymentStrategy implements PaymentStrategy {\n    private _stripeV3Client?: StripeV3Client;\n    private _cardElement?: StripeCardElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _stripeScriptLoader: StripeV3ScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const stripeOptions = options.stripev3;\n\n        if (!stripeOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.stripev3\" argument is not provided.');\n        }\n\n        const paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._stripeScriptLoader.load(paymentMethod.initializationData.stripePublishableKey)\n            .then(stripeJs => {\n                this._stripeV3Client = stripeJs;\n                const elements = this._stripeV3Client.elements();\n                const cardElement = elements.create('card', {\n                    style: stripeOptions.style,\n                });\n\n                cardElement.mount(`#${stripeOptions.containerId}`);\n\n                this._cardElement = cardElement;\n\n                return Promise.resolve(this._store.getState());\n            });\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n        const shouldSaveInstrument = Boolean(paymentData && (paymentData as HostedInstrument).shouldSaveInstrument);\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => {\n                if (paymentData && isVaultedInstrument(paymentData)) {\n                    return this._store.dispatch(this._paymentActionCreator.submitPayment({...payment, paymentData}))\n                        .catch(error => {\n                            if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                                return Promise.reject(error);\n                            }\n\n                            return this._getStripeJs().handleCardPayment(error.body.three_ds_result.token)\n                                .then(stripeResponse => {\n                                    if (stripeResponse.error || !stripeResponse.paymentIntent.id) {\n                                        throw new StandardError(stripeResponse.error && stripeResponse.error.message);\n                                    }\n\n                                    const paymentPayload = {\n                                        methodId: payment.methodId,\n                                        paymentData: {\n                                            nonce: stripeResponse.paymentIntent.id,\n                                        },\n                                    };\n\n                                    return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n                                });\n                        });\n                }\n\n                return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(payment.methodId))\n                    .then(state => {\n                        const paymentMethod = state.paymentMethods.getPaymentMethod(payment.methodId);\n                        const paymentIntent = paymentMethod && paymentMethod.clientToken;\n\n                        if (!this._cardElement) {\n                            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                        }\n\n                        return this._getStripeJs().createPaymentMethod('card', this._cardElement, this._mapStripePaymentMethodOptions())\n                            .then(stripePaymentMethod => {\n                                if (stripePaymentMethod.error || !stripePaymentMethod.paymentMethod.id) {\n                                    throw new StandardError(stripePaymentMethod.error && stripePaymentMethod.error.message);\n                                }\n\n                                if (!paymentIntent) {\n                                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                                }\n\n                                const stripeCardPaymentOptions = {\n                                    ...this._mapStripeCardPaymentOptions(shouldSaveInstrument),\n                                    payment_method: stripePaymentMethod.paymentMethod.id,\n                                };\n\n                                return this._getStripeJs().handleCardPayment(paymentIntent, stripeCardPaymentOptions);\n                            })\n                            .then(stripeResponse => {\n                                if (stripeResponse.error || !stripeResponse.paymentIntent.id) {\n                                    throw new StandardError(stripeResponse.error && stripeResponse.error.message);\n                                }\n\n                                const paymentPayload = {\n                                    methodId: payment.methodId,\n                                    paymentData: {\n                                        nonce: stripeResponse.paymentIntent.id,\n                                        shouldSaveInstrument,\n                                    },\n                                };\n\n                                return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n                            });\n                    });\n            });\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._cardElement) {\n            this._cardElement.unmount();\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _getStripeJs(): StripeV3Client {\n        if (!this._stripeV3Client) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._stripeV3Client;\n    }\n\n    private _mapStripeBillingAddress(billingAddress: BillingAddress | undefined): StripeAddress | undefined {\n        if (!billingAddress) {\n            return undefined;\n        }\n\n        return {\n            city: billingAddress.city,\n            country: billingAddress.countryCode,\n            line1: billingAddress.address1,\n            line2: billingAddress.address2,\n            postal_code: billingAddress.postalCode,\n            state: billingAddress.stateOrProvinceCode,\n        };\n    }\n\n    private _mapStripeShippingAddress(shippingAddress: Address | undefined): StripeAddress {\n        if (!shippingAddress) {\n            return { };\n        }\n\n        return {\n            city: shippingAddress.city,\n            country: shippingAddress.countryCode,\n            line1: shippingAddress.address1,\n            line2: shippingAddress.address2,\n            postal_code: shippingAddress.postalCode,\n            state: shippingAddress.stateOrProvinceCode,\n        };\n    }\n\n    private _mapStripeBillingDetails({ billingAddress, customer }: { billingAddress?: BillingAddress; customer?: Customer } = {}): StripeBillingDetails {\n        const stripeBillingDetails = {\n            address: this._mapStripeBillingAddress(billingAddress),\n        };\n\n        if (customer) {\n            return {\n                ...stripeBillingDetails,\n                email: customer.email,\n                name: `${customer.firstName} ${customer.lastName}`,\n            };\n        }\n\n        if (billingAddress) {\n            return {\n                ...stripeBillingDetails,\n                email: billingAddress.email,\n                name: `${billingAddress.firstName} ${billingAddress.lastName}`,\n            };\n        }\n\n        return {\n            name: 'Guest',\n        };\n    }\n\n    private _mapStripeShippingDetails({ shippingAddress, customer }: { shippingAddress?: Address ; customer?: Customer } = {}): StripeShippingDetails {\n        const stripeShippingDetails = {\n            address: this._mapStripeShippingAddress(shippingAddress),\n        };\n\n        if (customer) {\n            return {\n                ...stripeShippingDetails,\n                name: `${customer.firstName} ${customer.lastName}`,\n            };\n        }\n\n        if (shippingAddress) {\n            return {\n                ...stripeShippingDetails,\n                name: `${shippingAddress.firstName} ${shippingAddress.lastName}`,\n            };\n        }\n\n        return {\n            ...stripeShippingDetails,\n            name: 'Guest',\n        };\n    }\n\n    private _getCustomer(): Customer | undefined {\n        const customer = this._store.getState().customer.getCustomer();\n\n        if (customer) {\n            if (customer.firstName === '' || customer.lastName === '' || customer.email === '') {\n                return undefined;\n            }\n        }\n\n        return customer;\n    }\n\n    private _mapStripeCardPaymentOptions(shouldSaveInstrument: boolean): StripeHandleCardPaymentOptions {\n        const customer = this._getCustomer();\n        const shippingAddress = this._store.getState().shippingAddress.getShippingAddress();\n\n        const shippingDetails = {\n            shipping: this._mapStripeShippingDetails({ shippingAddress, customer }),\n        };\n\n        if (customer) {\n            return {\n                ...shippingDetails,\n                receipt_email: customer.email,\n                save_payment_method: shouldSaveInstrument,\n            };\n        } else {\n            return {\n                ...shippingDetails,\n            };\n        }\n    }\n\n    private _mapStripePaymentMethodOptions(): StripePaymentMethodData {\n        const customer = this._getCustomer();\n        const billingAddress = this._store.getState().billingAddress.getBillingAddress();\n\n        return {\n            billing_details: this._mapStripeBillingDetails({ billingAddress, customer }),\n        };\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { StripeHostWindow, StripeV3Client } from './stripev3';\n\nexport default class StripeV3ScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: StripeHostWindow = window\n    ) {}\n\n    load(publishableKey: string): Promise<StripeV3Client> {\n        return this._scriptLoader\n            .loadScript('https://js.stripe.com/v3/')\n            .then(() => {\n                if (!this._window.Stripe) {\n                    throw new StandardError();\n                }\n\n                return this._window.Stripe(publishableKey, {\n                    betas: ['payment_intent_beta_3'],\n                });\n            });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport WepayRisk from './wepay-risk';\nimport WepayWindow from './wepay-window';\n\nconst SCRIPT_SRC = '//static.wepay.com/min/js/risk.1.latest.js';\n\nexport default class WepayRiskClient {\n    private _riskClient?: WepayRisk;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    initialize(): Promise<WepayRiskClient> {\n        return this._scriptLoader\n            .loadScript(SCRIPT_SRC)\n            .then(() => this._riskClient = (window as WepayWindow).WePay.risk)\n            .then(() => this);\n    }\n\n    getRiskToken(): string {\n        if (!this._riskClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._riskClient.generate_risk_token();\n\n        return this._riskClient.get_risk_token();\n    }\n}\n","import { merge } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport CreditCardPaymentStrategy from '../credit-card/credit-card-payment-strategy';\n\nimport WepayRiskClient from './wepay-risk-client';\n\nexport default class WepayPaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        orderActionCreator: OrderActionCreator,\n        paymentActionCreator: PaymentActionCreator,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        super(store, orderActionCreator, paymentActionCreator);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._wepayRiskClient.initialize();\n\n        return super.initialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const token = this._wepayRiskClient.getRiskToken();\n        const payloadWithToken = merge({}, payload, {\n            payment: {\n                paymentData: {\n                    deviceSessionId: token,\n                },\n            },\n        });\n\n        return super.execute(payloadWithToken, options);\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class PaymentMethodDeclinedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'The selected payment method was declined. Please select another payment method.');\n\n        this.name = 'PaymentMethodDeclinedError';\n        this.type = 'payment_declined';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { ContentType, INTERNAL_USE_ONLY } from '../../../common/http-request';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentMethodCancelledError, PaymentMethodDeclinedError, PaymentMethodInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { Zip, ZipModalEvent } from './zip';\nimport ZipScriptLoader from './zip-script-loader';\n\nexport default class ZipPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _zipClient?: Zip;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _zipScriptLoader: ZipScriptLoader,\n        private _requestSender: RequestSender\n    ) { }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return this._zipScriptLoader.load()\n            .then(zip => {\n                this._zipClient = zip;\n\n                return this._store.getState();\n            });\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n        this._zipClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const { _zipClient: zipClient } = this;\n        const useStoreCredit = !!payload.useStoreCredit;\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!zipClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializePayment(payment.methodId, { useStoreCredit })\n            ))\n            .then(()  => {\n                return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(payment.methodId, options))\n                    .then(state => {\n                        this._paymentMethod = state.paymentMethods.getPaymentMethod(payment.methodId);\n\n                        if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                        }\n                    })\n                    .then(() => new Promise<string | undefined>((resolve, reject) => {\n                        zipClient.Checkout.init({\n                            onComplete: ({ checkoutId, state }) => {\n                                if (state === ZipModalEvent.CancelCheckout) {\n                                    return reject(new PaymentMethodCancelledError());\n                                }\n\n                                if (state === ZipModalEvent.CheckoutReferred && checkoutId) {\n                                    return this._prepareForReferredRegistration(payment.methodId, checkoutId)\n                                        .then(() => resolve());\n                                }\n\n                                if (state === ZipModalEvent.CheckoutApproved && checkoutId) {\n                                    return resolve(checkoutId);\n                                }\n\n                                if (state === ZipModalEvent.CheckoutDeclined) {\n                                    return reject(new PaymentMethodDeclinedError('Unfortunately your application was declined. Please select another payment method.'));\n                                }\n\n                                reject(new PaymentMethodInvalidError());\n                            },\n                            onCheckout: openModal => {\n                                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                                }\n\n                                openModal(JSON.parse(this._paymentMethod.clientToken));\n                            },\n                        });\n                    })\n                    .then(nonce => {\n                        if (nonce !== undefined) {\n                            return this._store.dispatch(this._paymentActionCreator.submitPayment({\n                                methodId: payment.methodId,\n                                paymentData: { nonce },\n                            }));\n                        }\n\n                        return this._store.getState();\n                    }\n                    ));\n            });\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _prepareForReferredRegistration(provider: string, externalId: string): Promise<Response> {\n        const url = `/api/storefront/payment/${provider}/save-external-id`;\n        const options = {\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n            body: {\n                externalId,\n                provider,\n            },\n        };\n\n        return this._requestSender.post(url, options);\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\nimport { Zip, ZipHostWindow } from '../zip/zip';\n\nexport default class ZipScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: ZipHostWindow = window\n    ) {}\n\n    load(): Promise<Zip> {\n        return this._scriptLoader\n            .loadScript(`//static.zipmoney.com.au/checkout/checkout-v1.min.js`)\n            .then(() => {\n                if (!this._window.Zip) {\n                    throw new StandardError();\n                }\n\n                return this._window.Zip;\n            });\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore, CheckoutValidator } from '../checkout';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { SpamProtectionActionCreator } from '../order/spam-protection';\nimport GoogleRecaptcha from '../order/spam-protection/google-recaptcha';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport PaymentActionCreator from './payment-action-creator';\nimport PaymentMethodActionCreator from './payment-method-action-creator';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\nimport PaymentRequestSender from './payment-request-sender';\nimport PaymentRequestTransformer from './payment-request-transformer';\nimport PaymentStrategyActionCreator from './payment-strategy-action-creator';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport PaymentStrategyType from './payment-strategy-type';\nimport { AffirmPaymentStrategy, AffirmScriptLoader } from './strategies/affirm';\nimport { AfterpayPaymentStrategy, AfterpayScriptLoader } from './strategies/afterpay';\nimport { AmazonPayPaymentStrategy, AmazonPayScriptLoader } from './strategies/amazon-pay';\nimport {\n    createBraintreePaymentProcessor,\n    createBraintreeVisaCheckoutPaymentProcessor,\n    BraintreeCreditCardPaymentStrategy,\n    BraintreePaypalPaymentStrategy,\n    BraintreeScriptLoader,\n    BraintreeSDKCreator,\n    BraintreeVisaCheckoutPaymentStrategy,\n    VisaCheckoutScriptLoader\n} from './strategies/braintree';\nimport {\n    CardinalClient,\n    CardinalScriptLoader,\n    CardinalThreeDSecureFlow,\n} from './strategies/cardinal';\nimport { ChasePayPaymentStrategy, ChasePayScriptLoader } from './strategies/chasepay';\nimport { ConvergePaymentStrategy } from './strategies/converge';\nimport { CreditCardPaymentStrategy } from './strategies/credit-card';\nimport { CyberSourcePaymentStrategy } from './strategies/cybersource/index';\nimport {\n    createGooglePayPaymentProcessor,\n    GooglePayBraintreeInitializer,\n    GooglePayPaymentStrategy,\n    GooglePayStripeInitializer\n} from './strategies/googlepay';\nimport { KlarnaPaymentStrategy, KlarnaScriptLoader } from './strategies/klarna';\nimport { LegacyPaymentStrategy } from './strategies/legacy';\nimport { MasterpassPaymentStrategy, MasterpassScriptLoader } from './strategies/masterpass';\nimport { NoPaymentDataRequiredPaymentStrategy } from './strategies/no-payment';\nimport { OfflinePaymentStrategy } from './strategies/offline';\nimport { OffsitePaymentStrategy } from './strategies/offsite';\nimport { PaypalExpressPaymentStrategy, PaypalProPaymentStrategy, PaypalScriptLoader } from './strategies/paypal';\nimport { SagePayPaymentStrategy } from './strategies/sage-pay';\nimport { SquarePaymentStrategy, SquareScriptLoader } from './strategies/square';\nimport { StripeScriptLoader, StripeV3PaymentStrategy } from './strategies/stripev3';\nimport { WepayPaymentStrategy, WepayRiskClient } from './strategies/wepay';\nimport { ZipPaymentStrategy, ZipScriptLoader } from './strategies/zip';\n\nexport default function createPaymentStrategyRegistry(\n    store: CheckoutStore,\n    paymentClient: any,\n    requestSender: RequestSender,\n    spamProtection: GoogleRecaptcha\n) {\n    const registry = new PaymentStrategyRegistry(store, { defaultToken: PaymentStrategyType.CREDIT_CARD });\n    const scriptLoader = getScriptLoader();\n    const paymentRequestTransformer = new PaymentRequestTransformer();\n    const paymentRequestSender = new PaymentRequestSender(paymentClient);\n    const billingAddressActionCreator = new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender));\n    const braintreePaymentProcessor = createBraintreePaymentProcessor(scriptLoader);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutValidator = new CheckoutValidator(checkoutRequestSender);\n    const spamProtectionActionCreator = new SpamProtectionActionCreator(spamProtection);\n    const orderActionCreator = new OrderActionCreator(new OrderRequestSender(requestSender), checkoutValidator, spamProtectionActionCreator);\n    const paymentActionCreator = new PaymentActionCreator(paymentRequestSender, orderActionCreator, paymentRequestTransformer);\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(new RemoteCheckoutRequestSender(requestSender));\n    const configActionCreator = new ConfigActionCreator(new ConfigRequestSender(requestSender));\n    const checkoutActionCreator = new CheckoutActionCreator(checkoutRequestSender, configActionCreator);\n    const paymentStrategyActionCreator = new PaymentStrategyActionCreator(registry, orderActionCreator);\n    const formPoster = createFormPoster();\n\n    registry.register(PaymentStrategyType.AFFIRM, () =>\n        new AffirmPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            new AffirmScriptLoader()\n        )\n    );\n\n    registry.register(PaymentStrategyType.AFTERPAY, () =>\n        new AfterpayPaymentStrategy(\n            store,\n            checkoutValidator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new AfterpayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.AMAZON, () =>\n        new AmazonPayPaymentStrategy(\n            store,\n            orderActionCreator,\n            billingAddressActionCreator,\n            remoteCheckoutActionCreator,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.CREDIT_CARD, () =>\n        new CreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.CYBERSOURCE, () =>\n        new CyberSourcePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new CardinalThreeDSecureFlow(\n                store,\n                paymentActionCreator,\n                paymentMethodActionCreator,\n                new CardinalClient(new CardinalScriptLoader(scriptLoader))\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.KLARNA, () =>\n        new KlarnaPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new KlarnaScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.LEGACY, () =>\n        new LegacyPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.OFFLINE, () =>\n        new OfflinePaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.OFFSITE, () =>\n        new OffsitePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL, () =>\n        new PaypalProPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new CardinalThreeDSecureFlow(\n                store,\n                paymentActionCreator,\n                paymentMethodActionCreator,\n                new CardinalClient(new CardinalScriptLoader(scriptLoader))\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL_EXPRESS, () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL_EXPRESS_CREDIT, () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.SAGE_PAY, () =>\n        new SagePayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            formPoster\n        )\n    );\n\n    registry.register(PaymentStrategyType.SQUARE, () =>\n        new SquarePaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new SquareScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.NO_PAYMENT_DATA_REQUIRED, () =>\n        new NoPaymentDataRequiredPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE, () =>\n        new BraintreeCreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_PAYPAL, () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_PAYPAL_CREDIT, () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor,\n            true\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_VISA_CHECKOUT, () =>\n        new BraintreeVisaCheckoutPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.CHASE_PAY, () =>\n        new ChasePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new ChasePayScriptLoader(scriptLoader),\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_GOOGLE_PAY, () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.WE_PAY, () =>\n        new WepayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.MASTERPASS, () =>\n        new MasterpassPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.STRIPE_GOOGLE_PAY, () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.ZIP, () =>\n        new ZipPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new ZipScriptLoader(scriptLoader),\n            requestSender\n        )\n    );\n\n    registry.register(PaymentStrategyType.CONVERGE, () =>\n        new ConvergePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            formPoster\n            )\n    );\n\n    registry.register(PaymentStrategyType.STRIPEV3, () =>\n        new StripeV3PaymentStrategy(\n            store,\n            paymentMethodActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            new StripeScriptLoader(scriptLoader)\n        )\n    );\n\n    return registry;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { Overlay } from '../../../common/overlay';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default function createBraintreePaymentProcessor(scriptLoader: ScriptLoader) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n    const overlay = new Overlay();\n\n    return new BraintreePaymentProcessor(braintreeSDKCreator, overlay);\n}\n","import { createAction, createDataStore, Action, DataStore, ReadableDataStore } from '@bigcommerce/data-store';\n\nenum ProjectionActionType {\n    Synchronize = 'SYNCHRONIZE',\n}\n\ninterface SynchronizeAction<TState> extends Action<TState> {\n    type: ProjectionActionType.Synchronize;\n    payload: TState;\n}\n\nexport interface DataStoreProjection<TTransformedState> extends ReadableDataStore<TTransformedState> {\n    notifyState(): void;\n}\n\nexport default function createDataStoreProjection<TState, TTransformedState = TState>(\n    store: DataStore<any, Action, TState>,\n    stateTransformer: (state: TState) => TTransformedState\n): DataStoreProjection<TTransformedState> {\n    const projection = createDataStore<TState | undefined, SynchronizeAction<TState>, TTransformedState>(\n        (state, action) => action.type === ProjectionActionType.Synchronize ?\n            action.payload :\n            state,\n        store.getState(),\n        { stateTransformer }\n    );\n\n    store.subscribe(state => {\n        projection.dispatch(createAction(ProjectionActionType.Synchronize, state) as SynchronizeAction<TState>);\n    }, { initial: false });\n\n    return projection;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { Address } from '../../address';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../../checkout';\nimport { addMinutes, isFuture } from '../../common/date-time';\nimport { MissingDataError, MissingDataErrorType } from '../../common/error/errors';\n\nimport { SessionContext, VaultAccessToken } from './instrument';\nimport { DeleteInstrumentAction, InstrumentActionType, LoadInstrumentsAction } from './instrument-actions';\nimport InstrumentRequestSender from './instrument-request-sender';\n\nexport default class InstrumentActionCreator {\n    constructor(\n        private _instrumentRequestSender: InstrumentRequestSender\n    ) {}\n\n    loadInstruments(): ThunkAction<LoadInstrumentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadInstrumentsAction>) => {\n            observer.next(createAction(InstrumentActionType.LoadInstrumentsRequested));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n            const shippingAddress = this._getShippingAddress(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.loadInstruments({\n                            ...session,\n                            authToken: currentToken.vaultAccessToken,\n                        },\n                        shippingAddress\n                    )\n                        .then(({ body }) => {\n                            observer.next(createAction(\n                                InstrumentActionType.LoadInstrumentsSucceeded,\n                                body,\n                                currentToken\n                            ));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(InstrumentActionType.LoadInstrumentsFailed, response));\n                });\n        });\n    }\n\n    deleteInstrument(instrumentId: string): ThunkAction<DeleteInstrumentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteInstrumentAction>) => {\n            observer.next(createAction(InstrumentActionType.DeleteInstrumentRequested, undefined, { instrumentId }));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.deleteInstrument({\n                        ...session,\n                        authToken: currentToken.vaultAccessToken,\n                    }, instrumentId)\n                        .then(({ body }) => {\n                            observer.next(createAction(InstrumentActionType.DeleteInstrumentSucceeded, body, {\n                                instrumentId,\n                                ...currentToken,\n                            }));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(InstrumentActionType.DeleteInstrumentFailed, response, { instrumentId }));\n                });\n        });\n    }\n\n    private _isValidVaultAccessToken(token: VaultAccessToken): boolean {\n        if (!token || !token.vaultAccessToken) {\n            return false;\n        }\n\n        const expiryBuffer = 2;\n        const expiry = addMinutes(new Date(token.vaultAccessExpiry), expiryBuffer);\n\n        return isFuture(expiry);\n    }\n\n    private _getCurrentAccessToken(store: ReadableCheckoutStore): VaultAccessToken | undefined {\n        const { instruments } = store.getState();\n        const meta = instruments.getInstrumentsMeta();\n\n        if (!meta) {\n            return;\n        }\n\n        return {\n            vaultAccessToken: meta.vaultAccessToken,\n            vaultAccessExpiry: meta.vaultAccessExpiry,\n        };\n    }\n\n    private _getValidAccessToken(token?: VaultAccessToken): Promise<VaultAccessToken> {\n        return token && this._isValidVaultAccessToken(token) ?\n            Promise.resolve(token) :\n            this._instrumentRequestSender.getVaultAccessToken().then(({ body }) => body);\n    }\n\n    private _getShippingAddress(store: ReadableCheckoutStore): Address | undefined {\n        const state = store.getState();\n\n        return state.shippingAddress.getShippingAddress();\n    }\n\n    private _getSessionContext(store: ReadableCheckoutStore): SessionContext {\n        const state = store.getState();\n        const config = state.config.getStoreConfig();\n        const cart = state.cart.getCart();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        const { customerId } = cart;\n        const { storeId } = config.storeProfile;\n        const { code } = config.shopperCurrency.isTransactional ? config.shopperCurrency : config.currency;\n\n        return {\n            customerId,\n            storeId,\n            currencyCode: code,\n        };\n    }\n}\n","export default function addMinutes(date: Date, amount: number): Date {\n    const newDate = new Date(date.getTime());\n\n    newDate.setMinutes(date.getMinutes() + amount);\n\n    return newDate;\n}\n","export default function isFuture(date: Date): boolean {\n    return date.valueOf() > Date.now();\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentResponse from '../payment-response';\n\nimport Instrument, { VaultAccessToken } from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InstrumentErrorResponseBody,\n    InternalInstrument,\n    InternalInstrumentsResponseBody,\n    InternalInstrumentErrorResponseBody,\n    InternalVaultAccessTokenResponseBody,\n} from './instrument-response-body';\n\nexport default class InstrumentResponseTransformer {\n    transformResponse(\n        response: PaymentResponse<InternalInstrumentsResponseBody>\n    ): Response<InstrumentsResponseBody> {\n        const { body, ...payload } = this._transformResponse(response);\n\n        return {\n            ...payload,\n            body: {\n                vaultedInstruments: this._transformVaultedInstruments(body.vaulted_instruments),\n            },\n        };\n    }\n\n    transformErrorResponse(\n        response: PaymentResponse<InternalInstrumentErrorResponseBody>\n    ): Response<InstrumentErrorResponseBody> {\n        return this._transformResponse(response);\n    }\n\n    transformVaultAccessResponse(\n        response: Response<InternalVaultAccessTokenResponseBody>\n    ): Response<VaultAccessToken> {\n        return {\n            ...response,\n            body: {\n                vaultAccessToken: response.body.data.token,\n                vaultAccessExpiry: response.body.data.expires_at,\n            },\n        };\n    }\n\n    private _transformVaultedInstruments(vaultedInstruments: InternalInstrument[] = []): Instrument[] {\n        return vaultedInstruments.map(instrument => ({\n            bigpayToken: instrument.bigpay_token,\n            defaultInstrument: instrument.default_instrument,\n            provider: instrument.provider,\n            iin: instrument.iin,\n            last4: instrument.last_4,\n            expiryMonth: instrument.expiry_month,\n            expiryYear: instrument.expiry_year,\n            brand: instrument.brand,\n            trustedShippingAddress: instrument.trusted_shipping_address,\n        }));\n    }\n\n    private _transformResponse<T>(response: PaymentResponse<T>): Response<T> {\n        const { data: body, ...payload } = response;\n\n        return {\n            ...payload,\n            body,\n        };\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { mapToInternalAddress, Address } from '../../address';\nimport { RequestOptions } from '../../common/http-request';\nimport PaymentResponse from '../payment-response';\n\nimport { InstrumentRequestContext, VaultAccessToken } from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InternalInstrumentsResponseBody,\n    InternalInstrumentErrorResponseBody,\n} from './instrument-response-body';\nimport InstrumentResponseTransformer from './instrument-response-transformer';\n\nexport default class InstrumentRequestSender {\n    private _transformer: InstrumentResponseTransformer;\n\n    constructor(\n        private _client: any,\n        private _requestSender: RequestSender\n    ) {\n        this._transformer = new InstrumentResponseTransformer();\n    }\n\n    getVaultAccessToken(\n        { timeout }: RequestOptions = {}\n    ): Promise<Response<VaultAccessToken>> {\n        const url = '/internalapi/v1/checkout/payments/vault-access-token';\n\n        return this._requestSender.get(url, { timeout }).then(response => ({\n            ...response,\n            body: {\n                vaultAccessToken: response.body.data.token,\n                vaultAccessExpiry: response.body.data.expires_at,\n            },\n        }));\n    }\n\n    loadInstruments(\n        requestContext: InstrumentRequestContext,\n        shippingAddress?: Address\n    ): Promise<Response<InstrumentsResponseBody>> {\n        return (shippingAddress) ?\n            this._loadInstrumentsWithAddress(requestContext, shippingAddress) :\n            this._loadInstruments(requestContext);\n    }\n\n    deleteInstrument(\n        requestContext: InstrumentRequestContext,\n        instrumentId: string\n    ): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            instrumentId,\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.deleteShopperInstrument(\n                payload, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) =>  errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n\n    private _loadInstruments(\n        requestContext: InstrumentRequestContext\n    ): Promise<Response<InstrumentsResponseBody>> {\n        return new Promise((resolve, reject) => {\n            this._client.loadInstruments(\n                requestContext, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) => errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n\n    private _loadInstrumentsWithAddress(\n        requestContext: InstrumentRequestContext,\n        shippingAddress: Address\n    ): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            shippingAddress: mapToInternalAddress(shippingAddress),\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.loadInstrumentsWithAddress(\n                payload, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) => errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryRequestSender from './shipping-country-request-sender';\n\nexport default class ShippingCountryActionCreator {\n    constructor(\n        private _shippingCountryRequestSender: ShippingCountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<LoadShippingCountriesAction> {\n        return Observable.create((observer: Observer<LoadShippingCountriesAction>) => {\n            observer.next(createAction(ShippingCountryActionType.LoadShippingCountriesRequested));\n\n            this._shippingCountryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(ShippingCountryActionType.LoadShippingCountriesSucceeded, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ShippingCountryActionType.LoadShippingCountriesFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\nimport { CountryResponseBody } from '../geography';\n\nexport default class ShippingCountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/shipping/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { Registry } from '../common/registry';\n\nimport { ShippingInitializeOptions, ShippingRequestOptions } from './shipping-request-options';\nimport {\n    ShippingStrategyActionType,\n    ShippingStrategyDeinitializeAction,\n    ShippingStrategyInitializeAction,\n    ShippingStrategySelectOptionAction,\n    ShippingStrategyUpdateAddressAction,\n} from './shipping-strategy-actions';\nimport { ShippingStrategy } from './strategies';\n\nexport default class ShippingStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<ShippingStrategy>\n    ) {}\n\n    updateAddress(address: Partial<AddressRequestBody>, options?: ShippingRequestOptions): ThunkAction<ShippingStrategyUpdateAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyUpdateAddressAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .updateAddress(address, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId }));\n                });\n        });\n    }\n\n    selectOption(shippingOptionId: string, options?: ShippingRequestOptions): ThunkAction<ShippingStrategySelectOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategySelectOptionAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.SelectOptionRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .selectOption(shippingOptionId, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.SelectOptionSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.SelectOptionFailed, error, { methodId }));\n                });\n        });\n    }\n\n    initialize(options?: ShippingInitializeOptions): ThunkAction<ShippingStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyInitializeAction>) => {\n            const state = store.getState();\n            const payment = state.payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n            const mergedOptions = { ...options, methodId };\n\n            if (methodId && state.shippingStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(ShippingStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(mergedOptions)\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options?: ShippingRequestOptions): ThunkAction<ShippingStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const payment = state.payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            if (methodId && !state.shippingStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(ShippingStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize({ ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\n\nimport { isInternalAddressEqual, mapFromInternalAddress } from '../../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { AmazonPayAddressBook, AmazonPayOrderReference, AmazonPayScriptLoader, AmazonPayWindow } from '../../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport ConsignmentActionCreator from '../../consignment-action-creator';\nimport { ShippingInitializeOptions, ShippingRequestOptions } from '../../shipping-request-options';\nimport { ShippingStrategyActionType } from '../../shipping-strategy-actions';\nimport ShippingStrategy from '../shipping-strategy';\n\nimport AmazonPayShippingInitializeOptions from './amazon-pay-shipping-initialize-options';\n\nexport default class AmazonPayShippingStrategy implements ShippingStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: ShippingInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const onReady = () => {\n                    this._createAddressBook(amazonOptions)\n                        .then(resolve)\n                        .catch(reject);\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    updateAddress(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n\n    private _createAddressBook(options: AmazonPayShippingInitializeOptions): Promise<AmazonPayAddressBook> {\n        return new Promise((resolve, reject) => {\n            const { container, onAddressSelect = () => {}, onError = () => {}, onReady = () => {} } = options;\n            const merchantId = this._paymentMethod && this._paymentMethod.config.merchantId;\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay AddressBook widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.AddressBook({\n                design: {\n                    designMode: 'responsive',\n                },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onAddressSelect: orderReference => {\n                    this._synchronizeShippingAddress()\n                        .then(() => onAddressSelect(orderReference))\n                        .catch(onError);\n                },\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onReady: orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                },\n            });\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeShippingAddress(): Promise<InternalCheckoutSelectors> {\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n        const amazon = this._store.getState().remoteCheckout.getCheckout('amazon');\n        const referenceId = amazon ? amazon.referenceId : undefined;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId })\n        )\n            .then(() => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializeShipping(methodId, { referenceId })\n            ))\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.shipping && amazon.shipping.address;\n                const address = state.shippingAddress.getShippingAddress();\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, address || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._consignmentActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            })\n            .then(() => this._store.dispatch(\n                createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId })\n            ))\n            .catch(error => this._store.dispatch(\n                createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId })\n            ));\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n}\n","import { AddressRequestBody } from '../../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport ConsignmentActionCreator from '../../consignment-action-creator';\nimport { ShippingRequestOptions } from '../../shipping-request-options';\nimport ShippingStrategy from '../shipping-strategy';\n\nexport default class DefaultShippingStrategy implements ShippingStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator\n    ) {}\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.updateAddress(address, options)\n        );\n    }\n\n    selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { memoize } from 'lodash';\n\nimport isPlainObject from './is-plain-object';\n\nconst cloneDeep = memoize(<T>(input: T): T => {\n    if (Array.isArray(input)) {\n        return input.map((value: T[keyof T]) => (\n            cloneDeepSafe(value)\n        )) as any;\n    }\n\n    if (isPlainObject(input)) {\n        return (Object.keys(input) as Array<keyof T>)\n            .reduce((result, key) => ({\n                ...result,\n                [key]: cloneDeepSafe(input[key]),\n            }), {}) as T;\n    }\n\n    return input;\n});\n\n// Use WeakMap as the MapCache, this allows for better garbage collection\n// There's a deprecated `clear` method in the lodash implementation\n// of MapCache, hence the `any`\ncloneDeep.cache = new WeakMap() as any;\n\n/**\n * This is a wrapper function for `cloneDeep`. We need it because `cloneDeep` is\n * a memoized function using an instance of `WeakMap` as its cache. Without this\n * wrapper, the memoized function will throw an error if it is called with a\n * non-object argument.\n */\nconst cloneDeepSafe = <T>(input: T): T => {\n    return typeof input === 'object' && input !== null ?\n        cloneDeep(input) :\n        input;\n};\n\n/**\n * Clone the return value of a function. If the result is the same as previous\n * calls, return the previous clone instead of cloning it again.\n */\nexport default function cloneResult<T extends Func>(fn: T): T {\n    return ((...args: any[]) => cloneDeepSafe(fn(...args))) as T;\n}\n\nexport type Func = (...args: any[]) => any;\n","import { createSelectorCreator, defaultMemoize } from 'reselect';\nimport * as shallowEqual from 'shallowequal';\n\nimport withMemoizedCombiner from './with-memoized-combiner';\n\nconst createShallowEqualSelector = createSelectorCreator(\n    defaultMemoize,\n    (a: any, b: any) => shallowEqual(a, b)\n);\n\nexport default withMemoizedCombiner(createShallowEqualSelector);\n","import {\n    createCheckoutStoreErrorSelectorFactory,\n    createCheckoutStoreSelectorFactory,\n    createCheckoutStoreStatusSelectorFactory,\n    CheckoutSelectors,\n    InternalCheckoutSelectors,\n} from '../checkout';\n\nexport type CheckoutSelectorsFactory = (selectors: InternalCheckoutSelectors) => CheckoutSelectors;\n\nexport function createCheckoutSelectorsFactory(): CheckoutSelectorsFactory {\n    const createCheckoutStoreSelector = createCheckoutStoreSelectorFactory();\n    const createCheckoutStoreErrorSelector = createCheckoutStoreErrorSelectorFactory();\n    const createCheckoutStoreStatusSelector = createCheckoutStoreStatusSelectorFactory();\n\n    return (selectors: InternalCheckoutSelectors) => {\n        const data = createCheckoutStoreSelector(selectors);\n        const errors = createCheckoutStoreErrorSelector(selectors);\n        const statuses = createCheckoutStoreStatusSelector(selectors);\n\n        return {\n            data,\n            errors,\n            statuses,\n        };\n    };\n}\n\nexport default function createCheckoutSelectors(selectors: InternalCheckoutSelectors): CheckoutSelectors {\n    return createCheckoutSelectorsFactory()(selectors);\n}\n","import { Address } from '../address';\nimport { BillingAddress } from '../billing';\nimport { Cart } from '../cart';\nimport { createSelector } from '../common/selector';\nimport { cloneResult as clone, memoizeOne } from '../common/utility';\nimport { StoreConfig } from '../config/config';\nimport { Coupon, GiftCertificate } from '../coupon';\nimport { Customer } from '../customer';\nimport { FormField } from '../form';\nimport { Country } from '../geography';\nimport { Order } from '../order';\nimport { PaymentMethod } from '../payment';\nimport { Instrument } from '../payment/instrument';\nimport { Consignment, ShippingOption } from '../shipping';\n\nimport Checkout from './checkout';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the state of the current checkout.\n *\n * This object has a set of methods that allow you to get a specific piece of\n * checkout information, such as shipping and billing details.\n */\nexport default interface CheckoutStoreSelector {\n    /**\n     * Gets the current checkout.\n     *\n     * @returns The current checkout if it is loaded, otherwise undefined.\n     */\n    getCheckout(): Checkout | undefined;\n\n    /**\n     * Gets the current order.\n     *\n     * @returns The current order if it is loaded, otherwise undefined.\n     */\n    getOrder(): Order | undefined;\n\n    /**\n     * Gets the checkout configuration of a store.\n     *\n     * @returns The configuration object if it is loaded, otherwise undefined.\n     */\n    getConfig(): StoreConfig | undefined;\n\n    /**\n     * Gets the shipping address of the current checkout.\n     *\n     * If the address is partially complete, it may not have shipping options\n     * associated with it.\n     *\n     * @returns The shipping address object if it is loaded, otherwise\n     * undefined.\n     */\n    getShippingAddress(): Address | undefined;\n\n    /**\n     * Gets a list of shipping options available for the shipping address.\n     *\n     * If there is no shipping address assigned to the current checkout, the\n     * list of shipping options will be empty.\n     *\n     * @returns The list of shipping options if any, otherwise undefined.\n     */\n    getShippingOptions(): ShippingOption[] | undefined;\n\n    /**\n     * Gets a list of consignments.\n     *\n     * If there are no consignments created for to the current checkout, the\n     * list will be empty.\n     *\n     * @returns The list of consignments if any, otherwise undefined.\n     */\n    getConsignments(): Consignment[] | undefined;\n\n    /**\n     * Gets the selected shipping option for the current checkout.\n     *\n     * @returns The shipping option object if there is a selected option,\n     * otherwise undefined.\n     */\n    getSelectedShippingOption(): ShippingOption | undefined;\n\n    /**\n     * Gets a list of countries available for shipping.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getShippingCountries(): Country[] | undefined;\n\n    /**\n     * Gets the billing address of an order.\n     *\n     * @returns The billing address object if it is loaded, otherwise undefined.\n     */\n    getBillingAddress(): BillingAddress | undefined;\n\n    /**\n     * Gets a list of countries available for billing.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getBillingCountries(): Country[] | undefined;\n\n    /**\n     * Gets a list of payment methods available for checkout.\n     *\n     * @returns The list of payment methods if it is loaded, otherwise undefined.\n     */\n    getPaymentMethods(): PaymentMethod[] | undefined;\n\n    /**\n     * Gets a payment method by an id.\n     *\n     * The method returns undefined if unable to find a payment method with the\n     * specified id, either because it is not available for the customer, or it\n     * is not loaded.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns The payment method object if loaded and available, otherwise,\n     * undefined.\n     */\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined;\n\n    /**\n     * Gets the payment method that is selected for checkout.\n     *\n     * @returns The payment method object if there is a selected method;\n     * undefined if otherwise.\n     */\n    getSelectedPaymentMethod(): PaymentMethod | undefined;\n\n    /**\n     * Gets the current cart.\n     *\n     * @returns The current cart object if it is loaded, otherwise undefined.\n     */\n    getCart(): Cart | undefined;\n\n    /**\n     * Gets a list of coupons that are applied to the current checkout.\n     *\n     * @returns The list of applied coupons if there is any, otherwise undefined.\n     */\n    getCoupons(): Coupon[] | undefined;\n\n    /**\n     * Gets a list of gift certificates that are applied to the current checkout.\n     *\n     * @returns The list of applied gift certificates if there is any, otherwise undefined.\n     */\n    getGiftCertificates(): GiftCertificate[] | undefined;\n\n    /**\n     * Gets the current customer.\n     *\n     * @returns The current customer object if it is loaded, otherwise\n     * undefined.\n     */\n    getCustomer(): Customer | undefined;\n\n    /**\n     * Checks if payment data is required or not.\n     *\n     * If payment data is required, customers should be prompted to enter their\n     * payment details.\n     *\n     * ```js\n     * if (state.checkout.isPaymentDataRequired()) {\n     *     // Render payment form\n     * } else {\n     *     // Render \"Payment is not required for this order\" message\n     * }\n     * ```\n     *\n     * @param useStoreCredit - If true, check whether payment data is required\n     * with store credit applied; otherwise, check without store credit.\n     * @returns True if payment data is required, otherwise false.\n     */\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean;\n\n    /**\n     * Checks if payment data is submitted or not.\n     *\n     * If payment data is already submitted using a payment method, customers\n     * should not be prompted to enter their payment details again.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns True if payment data is submitted, otherwise false.\n     */\n    isPaymentDataSubmitted(methodId: string, gatewayId?: string): boolean;\n\n    /**\n     * Gets a list of payment instruments associated with the current customer.\n     *\n     * @returns The list of payment instruments if it is loaded, otherwise undefined.\n     */\n    getInstruments(): Instrument[] | undefined;\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their billing address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of billing address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getBillingAddressFields(countryCode: string): FormField[];\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their shipping address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of shipping address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getShippingAddressFields(countryCode: string): FormField[];\n}\n\nexport type CheckoutStoreSelectorFactory = (state: InternalCheckoutSelectors) => CheckoutStoreSelector;\n\nexport function createCheckoutStoreSelectorFactory(): CheckoutStoreSelectorFactory {\n    const getCheckout = createSelector(\n        ({ checkout }: InternalCheckoutSelectors) => checkout.getCheckout,\n        getCheckout => clone(getCheckout)\n    );\n\n    const getOrder = createSelector(\n        ({ order }: InternalCheckoutSelectors) => order.getOrder,\n        getOrder => clone(getOrder)\n    );\n\n    const getConfig = createSelector(\n        ({ config }: InternalCheckoutSelectors) => config.getStoreConfig,\n        getStoreConfig => clone(getStoreConfig)\n    );\n\n    const getShippingAddress = createSelector(\n        ({ shippingAddress }: InternalCheckoutSelectors) => shippingAddress.getShippingAddress,\n        ({ config }: InternalCheckoutSelectors) => config.getContextConfig,\n        (getShippingAddress, getContextConfig) => clone(() => {\n            const shippingAddress = getShippingAddress();\n            const context = getContextConfig();\n\n            if (!shippingAddress) {\n                if (!context || !context.geoCountryCode) {\n                    return;\n                }\n\n                return {\n                    firstName: '',\n                    lastName: '',\n                    company: '',\n                    address1: '',\n                    address2: '',\n                    city: '',\n                    stateOrProvince: '',\n                    stateOrProvinceCode: '',\n                    postalCode: '',\n                    country: '',\n                    phone: '',\n                    customFields: [],\n                    countryCode: context.geoCountryCode,\n                };\n            }\n\n            return shippingAddress;\n        })\n    );\n\n    const getShippingOptions = createSelector(\n        ({ consignments }: InternalCheckoutSelectors) => consignments.getConsignments,\n        getConsignments => clone(() => {\n            const consignments = getConsignments();\n\n            if (consignments && consignments.length) {\n                return consignments[0].availableShippingOptions;\n            }\n        })\n    );\n\n    const getConsignments = createSelector(\n        ({ consignments }: InternalCheckoutSelectors) => consignments.getConsignments,\n        getConsignments => clone(getConsignments)\n    );\n\n    const getSelectedShippingOption = createSelector(\n        ({ consignments }: InternalCheckoutSelectors) => consignments.getConsignments,\n        getConsignments => clone(() => {\n            const consignments = getConsignments();\n\n            if (!consignments || !consignments.length) {\n                return;\n            }\n\n            return consignments[0].selectedShippingOption;\n        })\n    );\n\n    const getShippingCountries = createSelector(\n        ({ shippingCountries }: InternalCheckoutSelectors) => shippingCountries.getShippingCountries,\n        getShippingCountries => clone(getShippingCountries)\n    );\n\n    const getBillingAddress = createSelector(\n        ({ billingAddress }: InternalCheckoutSelectors) => billingAddress.getBillingAddress,\n        getBillingAddress => clone(getBillingAddress)\n    );\n\n    const getBillingCountries = createSelector(\n        ({ countries }: InternalCheckoutSelectors) => countries.getCountries,\n        getCountries => clone(getCountries)\n    );\n\n    const getPaymentMethods = createSelector(\n        ({ paymentMethods }: InternalCheckoutSelectors) => paymentMethods.getPaymentMethods,\n        getPaymentMethods => clone(getPaymentMethods)\n    );\n\n    const getPaymentMethod = createSelector(\n        ({ paymentMethods }: InternalCheckoutSelectors) => paymentMethods.getPaymentMethod,\n        getPaymentMethod => clone(getPaymentMethod)\n    );\n\n    const getSelectedPaymentMethod = createSelector(\n        ({ payment }: InternalCheckoutSelectors) => payment.getPaymentId,\n        ({ paymentMethods }: InternalCheckoutSelectors) => paymentMethods.getPaymentMethod,\n        (getPaymentId, getPaymentMethod) => clone(() => {\n            const payment = getPaymentId();\n\n            return payment && getPaymentMethod(payment.providerId, payment.gatewayId);\n        })\n    );\n\n    const getCart = createSelector(\n        ({ cart }: InternalCheckoutSelectors) => cart.getCart,\n        getCart => clone(getCart)\n    );\n\n    const getCoupons = createSelector(\n        ({ coupons }: InternalCheckoutSelectors) => coupons.getCoupons,\n        getCoupons => clone(getCoupons)\n    );\n\n    const getGiftCertificates = createSelector(\n        ({ giftCertificates }: InternalCheckoutSelectors) => giftCertificates.getGiftCertificates,\n        getGiftCertificates => clone(getGiftCertificates)\n    );\n\n    const getCustomer = createSelector(\n        ({ customer }: InternalCheckoutSelectors) => customer.getCustomer,\n        getCustomer => clone(getCustomer)\n    );\n\n    const isPaymentDataRequired = createSelector(\n        ({ payment }: InternalCheckoutSelectors) => payment.isPaymentDataRequired,\n        isPaymentDataRequired => clone(isPaymentDataRequired)\n    );\n\n    const isPaymentDataSubmitted = createSelector(\n        ({ payment }: InternalCheckoutSelectors) => payment.isPaymentDataSubmitted,\n        ({ paymentMethods }: InternalCheckoutSelectors) => paymentMethods.getPaymentMethod,\n        (isPaymentDataSubmitted, getPaymentMethod) => clone((methodId: string, gatewayId?: string) => {\n            return isPaymentDataSubmitted(getPaymentMethod(methodId, gatewayId));\n        })\n    );\n\n    const getInstruments = createSelector(\n        ({ instruments }: InternalCheckoutSelectors) => instruments.getInstruments,\n        getInstruments => clone(getInstruments)\n    );\n\n    const getBillingAddressFields = createSelector(\n        ({ form }: InternalCheckoutSelectors) => form.getBillingAddressFields,\n        ({ countries }: InternalCheckoutSelectors) => countries.getCountries,\n        (getBillingAddressFields, getCountries) => clone((countryCode: string) => {\n            return getBillingAddressFields(getCountries(), countryCode);\n        })\n    );\n\n    const getShippingAddressFields = createSelector(\n        ({ form }: InternalCheckoutSelectors) => form.getShippingAddressFields,\n        ({ shippingCountries }: InternalCheckoutSelectors) => shippingCountries.getShippingCountries,\n        (getShippingAddressFields, getShippingCountries) => clone((countryCode: string) => {\n            return getShippingAddressFields(getShippingCountries(), countryCode);\n        })\n    );\n\n    return memoizeOne((\n        state: InternalCheckoutSelectors\n    ): CheckoutStoreSelector => {\n        return {\n            getCheckout: getCheckout(state),\n            getOrder: getOrder(state),\n            getConfig: getConfig(state),\n            getShippingAddress: getShippingAddress(state),\n            getShippingOptions: getShippingOptions(state),\n            getConsignments: getConsignments(state),\n            getSelectedShippingOption: getSelectedShippingOption(state),\n            getShippingCountries: getShippingCountries(state),\n            getBillingAddress: getBillingAddress(state),\n            getBillingCountries: getBillingCountries(state),\n            getPaymentMethods: getPaymentMethods(state),\n            getPaymentMethod: getPaymentMethod(state),\n            getSelectedPaymentMethod: getSelectedPaymentMethod(state),\n            getCart: getCart(state),\n            getCoupons: getCoupons(state),\n            getGiftCertificates: getGiftCertificates(state),\n            getCustomer: getCustomer(state),\n            isPaymentDataRequired: isPaymentDataRequired(state),\n            isPaymentDataSubmitted: isPaymentDataSubmitted(state),\n            getInstruments: getInstruments(state),\n            getBillingAddressFields: getBillingAddressFields(state),\n            getShippingAddressFields: getShippingAddressFields(state),\n        };\n    });\n}\n","import { RequestError } from '../common/error/errors';\nimport { createSelector, createShallowEqualSelector } from '../common/selector';\nimport { Omit } from '../common/types';\nimport { memoizeOne } from '../common/utility';\n\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the error of any asynchronous checkout action, if\n * there is any.\n *\n * This object has a set of getters that would return an error if an action is\n * not executed successfully. For example, if you are unable to submit an order,\n * you can use this object to retrieve the reason for the failure.\n */\nexport default interface CheckoutStoreErrorSelector {\n    getError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load the current checkout.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCheckoutError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to update the current checkout.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateCheckoutError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to submit the current order.\n     *\n     * @returns The error object if unable to submit, otherwise undefined.\n     */\n    getSubmitOrderError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to finalize the current order.\n     *\n     * @returns The error object if unable to finalize, otherwise undefined.\n     */\n    getFinalizeOrderError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load the current order.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadOrderError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load the current cart.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCartError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load billing countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadBillingCountriesError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load shipping countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingCountriesError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load payment methods.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodsError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to load.\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodError(methodId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to initialize a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to initialize.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializePaymentError(methodId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to sign in.\n     *\n     * @returns The error object if unable to sign in, otherwise undefined.\n     */\n    getSignInError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to sign out.\n     *\n     * @returns The error object if unable to sign out, otherwise undefined.\n     */\n    getSignOutError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to initialize the customer step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeCustomerError(methodId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to load shipping options.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingOptionsError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to select a shipping option.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to select, otherwise undefined.\n     */\n    getSelectShippingOptionError(consignmentId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to continue as guest.\n     *\n     * @returns The error object if unable to continue, otherwise undefined.\n     */\n    getContinueAsGuestError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to update billing address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateBillingAddressError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to update shipping address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateShippingAddressError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to delete a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteConsignmentError(consignmentId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to update a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateConsignmentError(consignmentId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to create consignments.\n     *\n     * @returns The error object if unable to create, otherwise undefined.\n     */\n    getCreateConsignmentsError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to initialize the shipping step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeShippingError(methodId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to apply a coupon code.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyCouponError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to remove a coupon code.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveCouponError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to apply a gift certificate.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyGiftCertificateError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to remove a gift certificate.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveGiftCertificateError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to load payment instruments.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadInstrumentsError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to delete a payment instrument.\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteInstrumentError(instrumentId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to load the checkout configuration of a store.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadConfigError(): Error | undefined;\n}\n\nexport type CheckoutStoreErrorSelectorFactory = (state: InternalCheckoutSelectors) => CheckoutStoreErrorSelector;\n\nexport function createCheckoutStoreErrorSelectorFactory(): CheckoutStoreErrorSelectorFactory {\n    const getError = createShallowEqualSelector(\n        (selector: Omit<CheckoutStoreErrorSelector, 'getError'>) => selector,\n        selector => () => {\n            for (const key of Object.keys(selector) as Array<keyof Omit<CheckoutStoreErrorSelector, 'getError'>>) {\n                const error = selector[key]();\n\n                if (error) {\n                    return error;\n                }\n            }\n        }\n    );\n\n    const getSelectShippingOptionError = createSelector(\n        ({ shippingStrategies }: InternalCheckoutSelectors) => shippingStrategies.getSelectOptionError,\n        ({ consignments }: InternalCheckoutSelectors) => consignments.getUpdateShippingOptionError,\n        (getSelectOptionError, getUpdateShippingOptionError) => (consignmentId?: string) => {\n            return (\n                getSelectOptionError() ||\n                getUpdateShippingOptionError(consignmentId)\n            );\n        }\n    );\n\n    return memoizeOne((\n        state: InternalCheckoutSelectors\n    ): CheckoutStoreErrorSelector => {\n        const selector = {\n            getLoadCheckoutError: state.checkout.getLoadError,\n            getUpdateCheckoutError: state.checkout.getUpdateError,\n            getSubmitOrderError: state.paymentStrategies.getExecuteError,\n            getFinalizeOrderError: state.paymentStrategies.getFinalizeError,\n            getLoadOrderError: state.order.getLoadError,\n            getLoadCartError: state.cart.getLoadError,\n            getLoadBillingCountriesError: state.countries.getLoadError,\n            getLoadShippingCountriesError: state.shippingCountries.getLoadError,\n            getLoadPaymentMethodsError: state.paymentMethods.getLoadError,\n            getLoadPaymentMethodError: state.paymentMethods.getLoadMethodError,\n            getInitializePaymentError: state.paymentStrategies.getInitializeError,\n            getSignInError: state.customerStrategies.getSignInError,\n            getSignOutError: state.customerStrategies.getSignOutError,\n            getInitializeCustomerError: state.customerStrategies.getInitializeError,\n            getLoadShippingOptionsError: state.consignments.getLoadShippingOptionsError,\n            getSelectShippingOptionError: getSelectShippingOptionError(state),\n            getContinueAsGuestError: state.billingAddress.getContinueAsGuestError,\n            getUpdateBillingAddressError: state.billingAddress.getUpdateError,\n            getUpdateShippingAddressError: state.shippingStrategies.getUpdateAddressError,\n            getDeleteConsignmentError: state.consignments.getDeleteError,\n            getUpdateConsignmentError: state.consignments.getUpdateError,\n            getCreateConsignmentsError: state.consignments.getCreateError,\n            getInitializeShippingError: state.shippingStrategies.getInitializeError,\n            getApplyCouponError: state.coupons.getApplyError,\n            getRemoveCouponError: state.coupons.getRemoveError,\n            getApplyGiftCertificateError: state.giftCertificates.getApplyError,\n            getRemoveGiftCertificateError: state.giftCertificates.getRemoveError,\n            getLoadInstrumentsError: state.instruments.getLoadError,\n            getDeleteInstrumentError: state.instruments.getDeleteError,\n            getLoadConfigError: state.config.getLoadError,\n        };\n\n        return {\n            getError: getError(selector),\n            ...selector,\n        };\n    });\n}\n","import { createSelector, createShallowEqualSelector } from '../common/selector';\nimport { Omit } from '../common/types';\nimport { memoizeOne } from '../common/utility';\n\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for checking the statuses of various asynchronous actions related\n * to checkout.\n *\n * This object has a set of getters that return true if an action is in\n * progress. For example, you can check whether a customer is submitting an\n * order and waiting for the request to complete.\n */\nexport default interface CheckoutStoreStatusSelector {\n    /**\n     * Checks whether any checkout action is pending.\n     *\n     * @returns True if there is a pending action, otherwise false.\n     */\n    isPending(): boolean;\n\n    /**\n     * Checks whether the current checkout is loading.\n     *\n     * @returns True if the current checkout is loading, otherwise false.\n     */\n    isLoadingCheckout(): boolean;\n\n    /**\n     * Checks whether the current checkout is being updated.\n     *\n     * @returns True if the current checkout is being updated, otherwise false.\n     */\n    isUpdatingCheckout(): boolean;\n\n    /**\n     * Checks whether the current order is submitting.\n     *\n     * @returns True if the current order is submitting, otherwise false.\n     */\n    isSubmittingOrder(): boolean;\n\n    /**\n     * Checks whether the current order is finalizing.\n     *\n     * @returns True if the current order is finalizing, otherwise false.\n     */\n    isFinalizingOrder(): boolean;\n\n    /**\n     * Checks whether the current order is loading.\n     *\n     * @returns True if the current order is loading, otherwise false.\n     */\n    isLoadingOrder(): boolean;\n\n    /**\n     * Checks whether the current cart is loading.\n     *\n     * @returns True if the current cart is loading, otherwise false.\n     */\n    isLoadingCart(): boolean;\n\n    /**\n     * Checks whether billing countries are loading.\n     *\n     * @returns True if billing countries are loading, otherwise false.\n     */\n    isLoadingBillingCountries(): boolean;\n\n    /**\n     * Checks whether shipping countries are loading.\n     *\n     * @returns True if shipping countries are loading, otherwise false.\n     */\n    isLoadingShippingCountries(): boolean;\n\n    /**\n     * Checks whether payment methods are loading.\n     *\n     * @returns True if payment methods are loading, otherwise false.\n     */\n    isLoadingPaymentMethods(): boolean;\n\n    /**\n     * Checks whether a specific or any payment method is loading.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is loading.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is loading, otherwise false.\n     */\n    isLoadingPaymentMethod(methodId?: string): boolean;\n\n    /**\n     * Checks whether a specific or any payment method is initializing.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is initializing.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is initializing, otherwise false.\n     */\n    isInitializingPayment(methodId?: string): boolean;\n\n    /**\n     * Checks whether the current customer is signing in.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing in using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing in the\n     * current customer.\n     * @returns True if the customer is signing in, otherwise false.\n     */\n    isSigningIn(methodId?: string): boolean;\n\n    /**\n     * Checks whether the current customer is signing out.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing out using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing out the\n     * current customer.\n     * @returns True if the customer is signing out, otherwise false.\n     */\n    isSigningOut(methodId?: string): boolean;\n\n    /**\n     * Checks whether the customer step is initializing.\n     *\n     * If an ID is provided, the method also checks whether the customer step is\n     * initializing using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for initializing the\n     * customer step of checkout.\n     * @returns True if the customer step is initializing, otherwise false.\n     */\n    isInitializingCustomer(methodId?: string): boolean;\n\n    /**\n     * Checks whether shipping options are loading.\n     *\n     * @returns True if shipping options are loading, otherwise false.\n     */\n    isLoadingShippingOptions(): boolean;\n\n    /**\n     * Checks whether a shipping option is being selected.\n     *\n     * A consignment ID should be provided when checking if a shipping option\n     * is being selected for a specific consignment, otherwise it will check\n     * for all consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if selecting a shipping option, otherwise false.\n     */\n    isSelectingShippingOption(consignmentId?: string): boolean;\n\n    /**\n     * Checks whether the billing address is being updated.\n     *\n     * @returns True if updating their billing address, otherwise false.\n     */\n    isUpdatingBillingAddress(): boolean;\n\n    /**\n     * Checks whether the shopper is continuing out as a guest.\n     *\n     * @returns True if continuing as guest, otherwise false.\n     */\n    isContinuingAsGuest(): boolean;\n\n    /**\n     * Checks the shipping address is being updated.\n     *\n     * @returns True if updating their shipping address, otherwise false.\n     */\n    isUpdatingShippingAddress(): boolean;\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if updating consignment(s), otherwise false.\n     */\n    isUpdatingConsignment(consignmentId?: string): boolean;\n\n    /**\n     * Checks whether a given/any consignment is being deleted.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if deleting consignment(s), otherwise false.\n     */\n    isDeletingConsignment(consignmentId?: string): boolean;\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @returns True if creating consignments, otherwise false.\n     */\n    isCreatingConsignments(): boolean;\n\n    /**\n     * Checks whether the shipping step of a checkout process is initializing.\n     *\n     * If an identifier is provided, the method also checks whether the shipping\n     * step is initializing using a specific shipping method with the same\n     * identifier.\n     *\n     * @param methodId - The identifer of the initialization method to check.\n     * @returns True if the shipping step is initializing, otherwise false.\n     */\n    isInitializingShipping(methodId?: string): boolean;\n\n    /**\n     * Checks whether the current customer is applying a coupon code.\n     *\n     * @returns True if applying a coupon code, otherwise false.\n     */\n    isApplyingCoupon(): boolean;\n\n    /**\n     * Checks whether the current customer is removing a coupon code.\n     *\n     * @returns True if removing a coupon code, otherwise false.\n     */\n    isRemovingCoupon(): boolean;\n\n    /**\n     * Checks whether the current customer is applying a gift certificate.\n     *\n     * @returns True if applying a gift certificate, otherwise false.\n     */\n    isApplyingGiftCertificate(): boolean;\n\n    /**\n     * Checks whether the current customer is removing a gift certificate.\n     *\n     * @returns True if removing a gift certificate, otherwise false.\n     */\n    isRemovingGiftCertificate(): boolean;\n\n    /**\n     * Checks whether the current customer's payment instruments are loading.\n     *\n     * @returns True if payment instruments are loading, otherwise false.\n     */\n    isLoadingInstruments(): boolean;\n\n    /**\n     * Checks whether the current customer is deleting a payment instrument.\n     *\n     * @returns True if deleting a payment instrument, otherwise false.\n     */\n    isDeletingInstrument(instrumentId?: string): boolean;\n\n    /**\n     * Checks whether the checkout configuration of a store is loading.\n     *\n     * @returns True if the configuration is loading, otherwise false.\n     */\n    isLoadingConfig(): boolean;\n\n    /**\n     * Checks whether the customer step of a checkout is in a pending state.\n     *\n     * The customer step is considered to be pending if it is in the process of\n     * initializing, signing in, signing out, and/or interacting with a customer\n     * widget.\n     *\n     * @returns True if the customer step is pending, otherwise false.\n     */\n    isCustomerStepPending(): boolean;\n\n    /**\n     * Checks whether the payment step of a checkout is in a pending state.\n     *\n     * The payment step is considered to be pending if it is in the process of\n     * initializing, submitting an order, finalizing an order, and/or\n     * interacting with a payment widget.\n     *\n     * @returns True if the payment step is pending, otherwise false.\n     */\n    isPaymentStepPending(): boolean;\n}\n\nexport type CheckoutStoreStatusSelectorFactory = (state: InternalCheckoutSelectors) => CheckoutStoreStatusSelector;\n\nexport function createCheckoutStoreStatusSelectorFactory(): CheckoutStoreStatusSelectorFactory {\n    const isPending = createShallowEqualSelector(\n        (selector: Omit<CheckoutStoreStatusSelector, 'isPending'>) => selector,\n        selector => () => {\n            return (Object.keys(selector) as Array<keyof Omit<CheckoutStoreStatusSelector, 'isPending'>>)\n                .some(key => selector[key]());\n        }\n    );\n\n    const isSelectingShippingOption = createSelector(\n        ({ shippingStrategies }: InternalCheckoutSelectors) => shippingStrategies.isSelectingOption,\n        ({ consignments }: InternalCheckoutSelectors) => consignments.isUpdatingShippingOption,\n        (isSelectingOption, isUpdatingShippingOption) => (consignmentId?: string) => {\n            return (\n                isSelectingOption() ||\n                isUpdatingShippingOption(consignmentId)\n            );\n        }\n    );\n\n    const isCustomerStepPending = createSelector(\n        ({ customerStrategies }: InternalCheckoutSelectors) => customerStrategies.isInitializing,\n        ({ customerStrategies }: InternalCheckoutSelectors) => customerStrategies.isSigningIn,\n        ({ customerStrategies }: InternalCheckoutSelectors) => customerStrategies.isSigningOut,\n        ({ customerStrategies }: InternalCheckoutSelectors) => customerStrategies.isWidgetInteracting,\n        (isInitializing, isSigningIn, isSigningOut, isWidgetInteracting) => (methodId?: string) => {\n            return (\n                isInitializing(methodId) ||\n                isSigningIn(methodId) ||\n                isSigningOut(methodId) ||\n                isWidgetInteracting(methodId)\n            );\n        }\n    );\n\n    const isPaymentStepPending = createSelector(\n        ({ paymentStrategies }: InternalCheckoutSelectors) => paymentStrategies.isInitializing,\n        ({ paymentStrategies }: InternalCheckoutSelectors) => paymentStrategies.isExecuting,\n        ({ paymentStrategies }: InternalCheckoutSelectors) => paymentStrategies.isFinalizing,\n        ({ paymentStrategies }: InternalCheckoutSelectors) => paymentStrategies.isWidgetInteracting,\n        (isInitializing, isExecuting, isFinalizing, isWidgetInteracting) => (methodId?: string) => {\n            return (\n                isInitializing(methodId) ||\n                isExecuting(methodId) ||\n                isFinalizing(methodId) ||\n                isWidgetInteracting(methodId)\n            );\n        }\n    );\n\n    return memoizeOne((\n        state: InternalCheckoutSelectors\n    ): CheckoutStoreStatusSelector => {\n        const selector = {\n            isLoadingCheckout: state.checkout.isLoading,\n            isUpdatingCheckout: state.checkout.isUpdating,\n            isSubmittingOrder: state.paymentStrategies.isExecuting,\n            isFinalizingOrder: state.paymentStrategies.isFinalizing,\n            isLoadingOrder: state.order.isLoading,\n            isLoadingCart: state.cart.isLoading,\n            isLoadingBillingCountries: state.countries.isLoading,\n            isLoadingShippingCountries: state.shippingCountries.isLoading,\n            isLoadingPaymentMethods: state.paymentMethods.isLoading,\n            isLoadingPaymentMethod: state.paymentMethods.isLoadingMethod,\n            isInitializingPayment: state.paymentStrategies.isInitializing,\n            isSigningIn: state.customerStrategies.isSigningIn,\n            isSigningOut: state.customerStrategies.isSigningOut,\n            isInitializingCustomer: state.customerStrategies.isInitializing,\n            isLoadingShippingOptions: state.consignments.isLoadingShippingOptions,\n            isSelectingShippingOption: isSelectingShippingOption(state),\n            isUpdatingBillingAddress: state.billingAddress.isUpdating,\n            isContinuingAsGuest: state.billingAddress.isContinuingAsGuest,\n            isUpdatingShippingAddress: state.shippingStrategies.isUpdatingAddress,\n            isUpdatingConsignment: state.consignments.isUpdating,\n            isDeletingConsignment: state.consignments.isDeleting,\n            isCreatingConsignments: state.consignments.isCreating,\n            isInitializingShipping: state.shippingStrategies.isInitializing,\n            isApplyingCoupon: state.coupons.isApplying,\n            isRemovingCoupon: state.coupons.isRemoving,\n            isApplyingGiftCertificate: state.giftCertificates.isApplying,\n            isRemovingGiftCertificate: state.giftCertificates.isRemoving,\n            isLoadingInstruments: state.instruments.isLoading,\n            isDeletingInstrument: state.instruments.isDeleting,\n            isLoadingConfig: state.config.isLoading,\n            isCustomerStepPending: isCustomerStepPending(state),\n            isPaymentStepPending: isPaymentStepPending(state),\n        };\n\n        return {\n            isPending: isPending(selector),\n            ...selector,\n        };\n    });\n}\n","import { toSingleLine } from '../utility';\n\nexport default class ErrorMessageTransformer<TError extends Error = Error> {\n    constructor(\n        private _messageCustomizer: (type: TError) => string\n    ) {}\n\n    transform(error: TError): TError {\n        error.message = toSingleLine(this._messageCustomizer(error));\n\n        return error;\n    }\n}\n","export default function toSingleLine(input?: string) {\n    if (!input) {\n        return '';\n    }\n\n    return input.split(/(?:\\r\\n|\\n|\\r)/)\n        .map(line => line.replace(/^\\s+/gm, ''))\n        .join(' ')\n        .trim();\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { BillingAddressActionCreator, BillingAddressRequestBody } from '../billing';\nimport { createDataStoreProjection, DataStoreProjection } from '../common/data-store';\nimport { ErrorActionCreator, ErrorMessageTransformer } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\nimport { bindDecorator as bind } from '../common/utility';\nimport { ConfigActionCreator } from '../config';\nimport { CouponActionCreator, GiftCertificateActionCreator } from '../coupon';\nimport { CustomerCredentials, CustomerInitializeOptions, CustomerRequestOptions, CustomerStrategyActionCreator, GuestCredentials } from '../customer';\nimport { CountryActionCreator } from '../geography';\nimport { OrderActionCreator, OrderRequestBody } from '../order';\nimport { SpamProtectionActionCreator, SpamProtectionOptions } from '../order/spam-protection';\nimport { PaymentInitializeOptions, PaymentMethodActionCreator, PaymentRequestOptions, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator } from '../payment/instrument';\nimport { ConsignmentsRequestBody, ConsignmentActionCreator, ShippingCountryActionCreator, ShippingInitializeOptions, ShippingRequestOptions, ShippingStrategyActionCreator } from '../shipping';\nimport { ConsignmentAssignmentRequestBody, ConsignmentUpdateRequestBody } from '../shipping/consignment';\n\nimport { CheckoutRequestBody } from './checkout';\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutParams from './checkout-params';\nimport CheckoutSelectors from './checkout-selectors';\nimport CheckoutStore from './checkout-store';\nimport { createCheckoutSelectorsFactory, CheckoutSelectorsFactory } from './create-checkout-selectors';\nimport createCheckoutServiceErrorTransformer from './create-checkout-service-error-transformer';\n\n/**\n * Responsible for completing the checkout process for the current customer.\n *\n * This object can be used to collect all information that is required for\n * checkout, such as shipping and billing information. It can also be used to\n * retrieve the current checkout state and subscribe to its changes.\n */\n@bind\nexport default class CheckoutService {\n    private _storeProjection: DataStoreProjection<CheckoutSelectors>;\n    private _errorTransformer: ErrorMessageTransformer;\n    private _selectorsFactory: CheckoutSelectorsFactory;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _configActionCreator: ConfigActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _countryActionCreator: CountryActionCreator,\n        private _couponActionCreator: CouponActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _errorActionCreator: ErrorActionCreator,\n        private _giftCertificateActionCreator: GiftCertificateActionCreator,\n        private _instrumentActionCreator: InstrumentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _shippingCountryActionCreator: ShippingCountryActionCreator,\n        private _shippingStrategyActionCreator: ShippingStrategyActionCreator,\n        private _spamProtectionActionCreator: SpamProtectionActionCreator\n    ) {\n        this._errorTransformer = createCheckoutServiceErrorTransformer();\n        this._selectorsFactory = createCheckoutSelectorsFactory();\n        this._storeProjection = createDataStoreProjection(this._store, this._selectorsFactory);\n    }\n\n    /**\n     * Returns a snapshot of the current checkout state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * checkout state. You can query the state by calling any of its getter\n     * methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.data.getOrder());\n     * console.log(state.errors.getSubmitOrderError());\n     * console.log(state.statuses.isSubmittingOrder());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutSelectors {\n        return this._storeProjection.getState();\n    }\n\n    /**\n     * Notifies all subscribers with the current state.\n     *\n     * When this method gets called, the subscribers get called regardless if\n     * they have any filters applied.\n     */\n    notifyState(): void {\n        this._storeProjection.notifyState();\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the checkout state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.data.getCart();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutSelectors) => void,\n        ...filters: Array<(state: CheckoutSelectors) => any>\n    ): () => void {\n        return this._storeProjection.subscribe(subscriber, ...filters);\n    }\n\n    /**\n     * Loads the current checkout.\n     *\n     * This method can only be called if there is an active checkout. Also, it\n     * can only retrieve data that belongs to the current customer. When it is\n     * successfully executed, you can retrieve the data by calling\n     * `CheckoutStoreSelector#getCheckout`.\n     *\n     * ```js\n     * const state = await service.loadCheckout('0cfd6c06-57c3-4e29-8d7a-de55cc8a9052');\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param id - The identifier of the checkout to load, or the default checkout if not provided.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    loadCheckout(id?: string, options?: RequestOptions<CheckoutParams>): Promise<CheckoutSelectors> {\n        return this._dispatch(id ?\n            this._checkoutActionCreator.loadCheckout(id, options) :\n            this._checkoutActionCreator.loadDefaultCheckout(options)\n        );\n    }\n\n    /**\n     * Updates specific properties of the current checkout.\n     *\n     * ```js\n     * const state = await service.updateCheckout(checkout);\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param payload - The checkout properties to be updated.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    updateCheckout(payload: CheckoutRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._checkoutActionCreator.updateCheckout(payload, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads an order by an id.\n     *\n     * The method can only retrieve an order if the order belongs to the current\n     * customer. If it is successfully executed, the data can be retrieved by\n     * calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.loadOrder(123);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param orderId - The identifier of the order to load.\n     * @param options - Options for loading the order.\n     * @returns A promise that resolves to the current state.\n     */\n    loadOrder(orderId: number, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const loadCheckoutAction = this._orderActionCreator.loadOrder(orderId, options);\n        const loadConfigAction = this._configActionCreator.loadConfig(options);\n\n        return Promise.all([\n            this._dispatch(loadCheckoutAction),\n            this._dispatch(loadConfigAction, { queueId: 'config' }),\n        ])\n            .then(() => this.getState());\n    }\n\n    /**\n     * Submits an order, thereby completing a checkout process.\n     *\n     * Before you can submit an order, you must initialize the payment method\n     * chosen by the customer by calling `CheckoutService#initializePayment`.\n     *\n     * ```js\n     * await service.initializePayment({ methodId: 'braintree' });\n     * await service.submitOrder({\n     *     payment: {\n     *         methodId: 'braintree',\n     *         paymentData: {\n     *             ccExpiry: { month: 10, year: 20 },\n     *             ccName: 'BigCommerce',\n     *             ccNumber: '4111111111111111',\n     *             ccCvv: 123,\n     *         },\n     *     },\n     * });\n     * ```\n     *\n     * You are not required to include `paymentData` if the order does not\n     * require additional payment details. For example, the customer has already\n     * entered their payment details on the cart page using one of the hosted\n     * payment methods, such as PayPal. Or the customer has applied a gift\n     * certificate that exceeds the grand total amount.\n     *\n     * If the order is submitted successfully, you can retrieve the newly\n     * created order by calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.submitOrder(payload);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param payload - The request payload to submit for the current order.\n     * @param options - Options for submitting the current order.\n     * @returns A promise that resolves to the current state.\n     */\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.execute(payload, options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Finalizes the submission process for an order.\n     *\n     * This method is only required for certain hosted payment methods that\n     * require a customer to enter their credit card details on their website.\n     * You need to call this method once the customer has redirected back to\n     * checkout in order to complete the checkout process.\n     *\n     * If the method is called before order finalization is required or for a\n     * payment method that does not require order finalization, an error will be\n     * thrown. Conversely, if the method is called successfully, you should\n     * immediately redirect the customer to the order confirmation page.\n     *\n     * ```js\n     * try {\n     *     await service.finalizeOrderIfNeeded();\n     *\n     *     window.location.assign('/order-confirmation');\n     * } catch (error) {\n     *     if (error.type !== 'order_finalization_not_required') {\n     *         throw error;\n     *     }\n     * }\n     * ```\n     *\n     * @param options - Options for finalizing the current order.\n     * @returns A promise that resolves to the current state.\n     * @throws `OrderFinalizationNotRequiredError` error if order finalization\n     * is not required for the current order at the time of execution.\n     */\n    finalizeOrderIfNeeded(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.finalize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of payment methods available for checkout.\n     *\n     * If a customer enters their payment details before navigating to the\n     * checkout page (i.e.: using PayPal checkout button on the cart page), only\n     * one payment method will be available for the customer - the selected\n     * payment method. Otherwise, by default, all payment methods configured by\n     * the merchant will be available for the customer.\n     *\n     * Once the method is executed successfully, you can call\n     * `CheckoutStoreSelector#getPaymentMethods` to retrieve the list of payment\n     * methods.\n     *\n     * ```js\n     * const state = service.loadPaymentMethods();\n     *\n     * console.log(state.data.getPaymentMethods());\n     * ```\n     *\n     * @param options - Options for loading the payment methods that are\n     * available to the current customer.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethods(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethods(options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Loads a payment method by an id.\n     *\n     * This method does not work with multi-option payment providers. Due to its\n     * limitation, it is deprecated and will be removed in the future.\n     *\n     * @deprecated\n     * @internal\n     * @param methodId - The identifier for the payment method to load.\n     * @param options - Options for loading the payment method.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethod(methodId: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethod(methodId, options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Initializes the payment step of a checkout process.\n     *\n     * Before a payment method can accept payment details, it must first be\n     * initialized. Some payment methods require you to provide additional\n     * initialization options. For example, Amazon requires a container ID in\n     * order to initialize their payment widget.\n     *\n     * ```js\n     * await service.initializePayment({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'walletWidget',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * De-initializes the payment step of a checkout process.\n     *\n     * The method should be called once you no longer require a payment method\n     * to be initialized. It can perform any necessary clean-up behind the\n     * scene, i.e.: remove DOM nodes or event handlers that are attached as a\n     * result of payment initialization.\n     *\n     * ```js\n     * await service.deinitializePayment({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of countries available for billing.\n     *\n     * Once you make a successful request, you will be able to retrieve the list\n     * of countries by calling `CheckoutStoreSelector#getBillingCountries`.\n     *\n     * ```js\n     * const state = await service.loadBillingCountries();\n     *\n     * console.log(state.data.getBillingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available billing countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._countryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'billingCountries' });\n    }\n\n    /**\n     * Loads a list of countries available for shipping.\n     *\n     * The list is determined based on the shipping zones configured by a\n     * merchant. Once you make a successful call, you will be able to retrieve\n     * the list of available shipping countries by calling\n     * `CheckoutStoreSelector#getShippingCountries`.\n     *\n     * ```js\n     * const state = await service.loadShippingCountries();\n     *\n     * console.log(state.data.getShippingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available shipping countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingCountryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'shippingCountries' });\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their billing address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getBillingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadBillingAddressFields();\n     *\n     * console.log(state.data.getBillingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the billing address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadBillingCountries(options);\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their shipping address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getShippingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadShippingAddressFields();\n     *\n     * console.log(state.data.getShippingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the shipping address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadShippingCountries(options);\n    }\n\n    /**\n     * Initializes the sign-in step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, have their own sign-in flow. In\n     * order to support them, this method must be called.\n     *\n     * ```js\n     * await service.initializeCustomer({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'signInButton',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeCustomer(options?: CustomerInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * De-initializes the sign-in step of a checkout process.\n     *\n     * It should be called once you no longer want to prompt customers to sign\n     * in. It can perform any necessary clean-up behind the scene, i.e.: remove\n     * DOM nodes or event handlers that are attached as a result of customer\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeCustomer({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Continues to check out as a guest.\n     *\n     * The customer is required to provide their email address in order to\n     * continue. Once they provide their email address, it will be stored as a\n     * part of their billing address.\n     *\n     * @param credentials - The guest credentials to use.\n     * @param options - Options for continuing as a guest.\n     * @returns A promise that resolves to the current state.\n     */\n    continueAsGuest(credentials: GuestCredentials, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.continueAsGuest(credentials, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Signs into a customer's registered account.\n     *\n     * Once the customer is signed in successfully, the checkout state will be\n     * populated with information associated with the customer, such as their\n     * saved addresses. You can call `CheckoutStoreSelector#getCustomer` to\n     * retrieve the data.\n     *\n     * ```js\n     * const state = await service.signInCustomer({\n     *     email: 'foo@bar.com',\n     *     password: 'password123',\n     * });\n     *\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param credentials - The credentials to be used for signing in the customer.\n     * @param options - Options for signing in the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signInCustomer(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signIn(credentials, options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Signs out the current customer if they are previously signed in.\n     *\n     * Once the customer is successfully signed out, the checkout state will be\n     * reset automatically.\n     *\n     * ```js\n     * const state = await service.signOutCustomer();\n     *\n     * // The returned object should not contain information about the previously signed-in customer.\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param options - Options for signing out the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signOutCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signOut(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Loads a list of shipping options available for checkout.\n     *\n     * Available shipping options can only be determined once a customer\n     * provides their shipping address. If the method is executed successfully,\n     * `CheckoutStoreSelector#getShippingOptions` can be called to retrieve the\n     * list of shipping options.\n     *\n     * ```js\n     * const state = await service.loadShippingOptions();\n     *\n     * console.log(state.data.getShippingOptions());\n     * ```\n     *\n     * @param options - Options for loading the available shipping options.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingOptions(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.loadShippingOptions(options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Initializes the shipping step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, can provide shipping information to\n     * be used for checkout. In order to support them, this method must be\n     * called.\n     *\n     * ```js\n     * await service.initializeShipping({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'addressBook',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeShipping(options?: ShippingInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * De-initializes the shipping step of a checkout process.\n     *\n     * It should be called once you no longer need to collect shipping details.\n     * It can perform any necessary clean-up behind the scene, i.e.: remove DOM\n     * nodes or event handlers that are attached as a result of shipping\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeShipping({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeShipping(options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for the current address.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectShippingOption('address-id', 'shipping-option-id');\n     *\n     * console.log(state.data.getSelectedShippingOption());\n     * ```\n     *\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectShippingOption(shippingOptionId: string, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.selectOption(shippingOptionId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the shipping address for the current checkout.\n     *\n     * When a customer updates their shipping address for an order, they will\n     * see an updated list of shipping options and the cost for each option,\n     * unless no options are available. If the update is successful, you can\n     * call `CheckoutStoreSelector#getShippingAddress` to retrieve the address.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateShippingAddress(address);\n     *\n     * console.log(state.data.getShippingAddress());\n     * ```\n     *\n     * @param address - The address to be used for shipping.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateShippingAddress(address: Partial<AddressRequestBody>, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Creates consignments given a list.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddress`.\n     *\n     * When consignments are created, an updated list of shipping options will\n     * become available for each consignment, unless no options are available.\n     * If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve the updated list of\n     * consignments.'\n     *\n     * Beware that if a consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.createConsignments(consignments);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignments - The list of consignments to be created.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.createConsignments(consignments, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Deletes a consignment\n     *\n     * ```js\n     * const state = await service.deleteConsignment('55c96cda6f04c');\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The ID of the consignment to be deleted\n     * @param options - Options for the consignment delete request\n     * @returns A promise that resolves to the current state.\n     */\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.deleteConsignment(consignmentId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates a specific consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#selectShippingOption`.\n     *\n     * When a shipping address for a consignment is updated, an updated list of\n     * shipping options will become available for the consignment, unless no\n     * options are available. If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve updated list of\n     * consignments.\n     *\n     * Beware that if the updated consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateConsignment(consignment);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateConsignment(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that assigns items to be shipped to a specific address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and assigns the provided items. If no consignment matches the address, a new one\n     * will be created.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    assignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.assignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that unassigns items from a specific shipping address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and unassigns the specified items. If the consignment ends up with no line items\n     * after the unassignment, it will be deleted.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    unassignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.unassignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for a given consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddres`.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectConsignmentShippingOption(consignmentId, optionId);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The identified of the consignment to be updated.\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectConsignmentShippingOption(\n        consignmentId: string,\n        shippingOptionId: string,\n        options?: ShippingRequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateShippingOption({\n            id: consignmentId,\n            shippingOptionId,\n        }, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the billing address for the current checkout.\n     *\n     * A customer must provide their billing address before they can proceed to\n     * pay for their order.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateBillingAddress(address);\n     *\n     * console.log(state.data.getBillingAddress());\n     * ```\n     *\n     * @param address - The address to be used for billing.\n     * @param options - Options for updating the billing address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateBillingAddress(address: Partial<BillingAddressRequestBody>, options: RequestOptions = {}): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a coupon code to the current checkout.\n     *\n     * Once the coupon code gets applied, the quote for the current checkout will\n     * be adjusted accordingly. The same coupon code cannot be applied more than\n     * once.\n     *\n     * ```js\n     * await service.applyCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to apply to the current checkout.\n     * @param options - Options for applying the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    applyCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.applyCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a coupon code from the current checkout.\n     *\n     * Once the coupon code gets removed, the quote for the current checkout will\n     * be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to remove from the current checkout.\n     * @param options - Options for removing the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    removeCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.removeCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a gift certificate to the current checkout.\n     *\n     * Once the gift certificate gets applied, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.applyGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to apply to the current checkout.\n     * @param options - Options for applying the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    applyGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.applyGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a gift certificate from an order.\n     *\n     * Once the gift certificate gets removed, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to remove from the current checkout.\n     * @param options - Options for removing the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    removeGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.removeGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads a list of payment instruments associated with a customer.\n     *\n     * Once the method has been called successfully, you can retrieve the list\n     * of payment instruments by calling `CheckoutStoreSelector#getInstruments`.\n     * If the customer does not have any payment instruments on record, i.e.:\n     * credit card, you will get an empty list instead.\n     *\n     * ```js\n     * const state = service.loadInstruments();\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @returns A promise that resolves to the current state.\n     */\n    loadInstruments(): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.loadInstruments();\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Deletes a payment instrument by an id.\n     *\n     * Once an instrument gets removed, it can no longer be retrieved using\n     * `CheckoutStoreSelector#getInstruments`.\n     *\n     * ```js\n     * const state = service.deleteInstrument('123');\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns A promise that resolves to the current state.\n     */\n    deleteInstrument(instrumentId: string): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.deleteInstrument(instrumentId);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Clear errors that have been collected from previous calls.\n     *\n     * ```js\n     * const state = await service.clearError(error);\n     *\n     * console.log(state.errors.getError());\n     * ```\n     *\n     * @param error - Specific error object to clear\n     * @returns A promise that resolves to the current state.\n     */\n    clearError(error: Error): Promise<CheckoutSelectors> {\n        const action = this._errorActionCreator.clearError(error);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Initializes the spam protection for order creation.\n     *\n     * With spam protection enabled, the customer has to be verified as\n     * a human. The order creation will fail if spam protection\n     * is enabled but verification fails.\n     *\n     * ```js\n     * await service.initializeSpamProtection({\n     *     containerId: 'spamProtectionContainer',\n     * });\n     * ```\n     *\n     * @param options - Options for initializing spam protection.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeSpamProtection(options: SpamProtectionOptions): Promise<CheckoutSelectors> {\n        const action = this._spamProtectionActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'spamProtection' });\n    }\n\n    /**\n     * Dispatches an action through the data store and returns the current state\n     * once the action is dispatched.\n     *\n     * @param action - The action to dispatch.\n     * @returns A promise that resolves to the current state.\n     */\n    private _dispatch(action: Action | Observable<Action> | ThunkAction<Action>, options?: { queueId?: string }): Promise<CheckoutSelectors> {\n        return this._store.dispatch(action, options)\n            .then(() => this.getState())\n            .catch(error => {\n                throw this._errorTransformer.transform(error);\n            });\n    }\n}\n","import { ErrorMessageTransformer } from '../common/error';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../common/error/errors';\nimport { getEnvironment } from '../common/utility';\n\nexport type CheckoutServiceErrorType = MissingDataError | NotInitializedError;\nexport type CheckoutServiceErrorTransformer = ErrorMessageTransformer<CheckoutServiceErrorType | Error>;\n\nexport default function createCheckoutServiceErrorTransformer(\n    isDevelopment: boolean = getEnvironment() === 'development'\n): CheckoutServiceErrorTransformer {\n    return new ErrorMessageTransformer(error => {\n        if (!isDevelopment || !isCheckoutServiceError(error)) {\n            return error.message;\n        }\n\n        switch (error.subtype || error.type) {\n        case MissingDataErrorType.MissingConsignments:\n            return `\n                ${error.message}\n                The data could be unavailable because no shipping address has been provided.\n                To fix this, create a consignment or update the shipping address before performing\n                the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCart:\n        case MissingDataErrorType.MissingCheckout:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadCheckout\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you need to make sure \\`CheckoutService\\` is initialized\n                properly by calling \\`CheckoutService#loadCheckout\\` before performing any\n                other actions.\n            `;\n\n        case MissingDataErrorType.MissingOrder:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadOrder\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingOrderId:\n            return `\n                ${error.message}\n                The data could be unavailable because no order has been created yet. You have\n                to first create the order before you can perform the action.\n            `;\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server, or\n                configured by the merchant yet. To fix the former issue, you can try calling\n                \\`CheckoutService#loadPaymentMethods\\` before performing the same action again.\n            `;\n\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return `\n                In order to initialize the customer step of checkout, you need to call\n                \\`CheckoutService#initializeCustomer\\`. Afterwards, you should be able to\n                submit customer details.\n            `;\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the payment step of checkout, you need to call\n                \\`CheckoutService#initializePayment\\`. Afterwards, you should be able to\n                submit payment details.\n            `;\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the shipping step of checkout, you need to call\n                \\`CheckoutService#initializeShipping\\`. Afterwards, you should be able to\n                submit shipping details.\n            `;\n\n        default:\n            return error.message;\n        }\n    });\n}\n\nfunction isCheckoutServiceError(error: any): error is CheckoutServiceErrorType {\n    return !!(error.subtype || error.type);\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { createScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { ErrorActionCreator } from '../common/error';\nimport { getDefaultLogger } from '../common/log';\nimport { getEnvironment } from '../common/utility';\nimport { ConfigActionCreator, ConfigRequestSender, ConfigState } from '../config';\nimport { CouponActionCreator, CouponRequestSender, GiftCertificateActionCreator, GiftCertificateRequestSender } from '../coupon';\nimport { createCustomerStrategyRegistry, CustomerStrategyActionCreator } from '../customer';\nimport { CountryActionCreator, CountryRequestSender } from '../geography';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { createSpamProtection, SpamProtectionActionCreator } from '../order/spam-protection';\nimport { createPaymentClient, createPaymentStrategyRegistry, PaymentMethodActionCreator, PaymentMethodRequestSender, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator, InstrumentRequestSender } from '../payment/instrument';\nimport { createShippingStrategyRegistry, ConsignmentActionCreator, ConsignmentRequestSender, ShippingCountryActionCreator, ShippingCountryRequestSender, ShippingStrategyActionCreator } from '../shipping';\n\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport CheckoutService from './checkout-service';\nimport CheckoutValidator from './checkout-validator';\nimport createCheckoutStore from './create-checkout-store';\n\n/**\n * Creates an instance of `CheckoutService`.\n *\n * @remarks\n * ```js\n * const service = createCheckoutService();\n *\n * service.subscribe(state => {\n *     console.log(state);\n * });\n *\n * service.loadCheckout();\n * ```\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutService`.\n */\nexport default function createCheckoutService(options?: CheckoutServiceOptions): CheckoutService {\n    if (document.location.protocol !== 'https:') {\n        getDefaultLogger().warn('The BigCommerce Checkout SDK should not be used on a non-HTTPS page');\n    }\n\n    if (getEnvironment() !== 'production') {\n        getDefaultLogger().warn('Note that the development build is not optimized. To create a production build, set process.env.NODE_ENV to `production`.');\n    }\n\n    const config: ConfigState = {\n        meta: {\n            externalSource: options && options.externalSource,\n        },\n        errors: {},\n        statuses: {},\n    };\n    const { locale = '', shouldWarnMutation = true } = options || {};\n    const requestSender = createRequestSender({ host: options && options.host });\n    const store = createCheckoutStore({ config }, { shouldWarnMutation });\n    const paymentClient = createPaymentClient(store);\n    const orderRequestSender = new OrderRequestSender(requestSender);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const configActionCreator = new ConfigActionCreator(new ConfigRequestSender(requestSender));\n    const spamProtection = createSpamProtection(createScriptLoader());\n    const spamProtectionActionCreator = new SpamProtectionActionCreator(spamProtection);\n    const orderActionCreator = new OrderActionCreator(\n        orderRequestSender,\n        new CheckoutValidator(checkoutRequestSender),\n        spamProtectionActionCreator\n    );\n\n    return new CheckoutService(\n        store,\n        new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender)),\n        new CheckoutActionCreator(checkoutRequestSender, configActionCreator),\n        configActionCreator,\n        new ConsignmentActionCreator(new ConsignmentRequestSender(requestSender), checkoutRequestSender),\n        new CountryActionCreator(new CountryRequestSender(requestSender, { locale })),\n        new CouponActionCreator(new CouponRequestSender(requestSender)),\n        new CustomerStrategyActionCreator(createCustomerStrategyRegistry(store, requestSender)),\n        new ErrorActionCreator(),\n        new GiftCertificateActionCreator(new GiftCertificateRequestSender(requestSender)),\n        new InstrumentActionCreator(new InstrumentRequestSender(paymentClient, requestSender)),\n        orderActionCreator,\n        new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n        new PaymentStrategyActionCreator(\n            createPaymentStrategyRegistry(store, paymentClient, requestSender, spamProtection),\n            orderActionCreator\n        ),\n        new ShippingCountryActionCreator(new ShippingCountryRequestSender(requestSender, { locale })),\n        new ShippingStrategyActionCreator(createShippingStrategyRegistry(store, requestSender)),\n        spamProtectionActionCreator\n    );\n}\n\nexport interface CheckoutServiceOptions {\n    locale?: string;\n    host?: string;\n    shouldWarnMutation?: boolean;\n    externalSource?: string;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { MutationObserverFactory } from '../../common/dom/mutation-observer';\n\nimport GoogleRecaptcha from './google-recaptcha';\nimport GoogleRecaptchaScriptLoader from './google-recaptcha-script-loader';\n\nexport default function createSpamProtection(scriptLoader: ScriptLoader) {\n    return new GoogleRecaptcha(\n        new GoogleRecaptchaScriptLoader(scriptLoader),\n        new MutationObserverFactory()\n    );\n}\n","// tslint:disable-next-line:no-reference\n/// <reference path=\"../payment/bigpay-client.d.ts\" />\nimport { createClient as createBigpayClient } from '@bigcommerce/bigpay-client';\n\nimport { CheckoutStore } from '../checkout';\n\nexport default function createPaymentClient(store: CheckoutStore) {\n    const paymentClient = createBigpayClient();\n\n    store.subscribe(\n        state => {\n            const config = state.config.getStoreConfig();\n\n            if (config) {\n                paymentClient.setHost(config.paymentSettings.bigpayBaseUrl);\n            }\n        },\n        state => state.config.getStoreConfig()\n    );\n\n    return paymentClient;\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport {\n    createBraintreeVisaCheckoutPaymentProcessor,\n    BraintreeScriptLoader,\n    BraintreeSDKCreator,\n    VisaCheckoutScriptLoader\n} from '../payment/strategies/braintree';\nimport { ChasePayScriptLoader } from '../payment/strategies/chasepay';\nimport { createGooglePayPaymentProcessor, GooglePayBraintreeInitializer, GooglePayStripeInitializer } from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport CustomerActionCreator from './customer-action-creator';\nimport CustomerRequestSender from './customer-request-sender';\nimport CustomerStrategyActionCreator from './customer-strategy-action-creator';\nimport { CustomerStrategy } from './strategies';\nimport { AmazonPayCustomerStrategy } from './strategies/amazon';\nimport { BraintreeVisaCheckoutCustomerStrategy } from './strategies/braintree';\nimport { ChasePayCustomerStrategy } from './strategies/chasepay';\nimport { DefaultCustomerStrategy } from './strategies/default';\nimport { GooglePayCustomerStrategy } from './strategies/googlepay';\nimport { MasterpassCustomerStrategy } from './strategies/masterpass';\nimport { SquareCustomerStrategy } from './strategies/square';\n\nexport default function createCustomerStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<CustomerStrategy> {\n    const registry = new Registry<CustomerStrategy>();\n    const scriptLoader = getScriptLoader();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutActionCreator = new CheckoutActionCreator(\n        checkoutRequestSender,\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n    const formPoster = createFormPoster();\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutRequestSender = new RemoteCheckoutRequestSender(requestSender);\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(remoteCheckoutRequestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            remoteCheckoutRequestSender,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('braintreevisacheckout', () =>\n        new BraintreeVisaCheckoutCustomerStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            new CustomerStrategyActionCreator(registry),\n            remoteCheckoutActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('chasepay', () =>\n        new ChasePayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new ChasePayScriptLoader(scriptLoader),\n            requestSender,\n            formPoster\n        )\n    );\n\n    registry.register('squarev2', () =>\n        new SquareCustomerStrategy(\n            store,\n            new RemoteCheckoutActionCreator(remoteCheckoutRequestSender)\n        )\n    );\n\n    registry.register('masterpass', () =>\n        new MasterpassCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('googlepaybraintree', () =>\n        new GooglePayCustomerStrategy(\n            store,\n            remoteCheckoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            ),\n            formPoster\n        )\n    );\n\n    registry.register('googlepaystripe', () =>\n        new GooglePayCustomerStrategy(\n            store,\n            remoteCheckoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            ),\n            formPoster\n    )\n);\n\n    registry.register('default', () =>\n        new DefaultCustomerStrategy(\n            store,\n            new CustomerActionCreator(\n                new CustomerRequestSender(requestSender),\n                checkoutActionCreator\n            )\n        )\n    );\n\n    return registry;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport ConsignmentActionCreator from './consignment-action-creator';\nimport ConsignmentRequestSender from './consignment-request-sender';\nimport { ShippingStrategy } from './strategies';\nimport { AmazonPayShippingStrategy } from './strategies/amazon';\nimport { DefaultShippingStrategy } from './strategies/default';\n\nexport default function createShippingStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<ShippingStrategy> {\n    const registry = new Registry<ShippingStrategy>();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const consignmentRequestSender = new ConsignmentRequestSender(requestSender);\n    const consignmentActionCreator = new ConsignmentActionCreator(consignmentRequestSender, checkoutRequestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayShippingStrategy(\n            store,\n            consignmentActionCreator,\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n            new RemoteCheckoutActionCreator(new RemoteCheckoutRequestSender(requestSender)),\n            new AmazonPayScriptLoader(getScriptLoader())\n        )\n    );\n\n    registry.register('default', () =>\n        new DefaultShippingStrategy(\n            store,\n            consignmentActionCreator\n        )\n    );\n\n    return registry;\n}\n","import { EmbeddedCheckoutFrameLoadedEvent } from '../embedded-checkout-events';\n\nexport default function handleFrameLoadedEvent(message: EmbeddedCheckoutFrameLoadedEvent): void {\n    if (!message.payload || !message.payload.contentId) {\n        return;\n    }\n\n    const body = document.getElementById(message.payload.contentId);\n\n    if (!body || body.hasAttribute('data-iframe-height')) {\n        return;\n    }\n\n    body.setAttribute('data-iframe-height', '');\n}\n","export default interface CustomError extends Error {\n    message: string;\n    type: string;\n    subtype?: string;\n}\n\nexport function isCustomError(error: any): error is CustomError {\n    return (\n        typeof error.message === 'string' &&\n        typeof error.type === 'string' &&\n        (typeof error.subtype === 'string' || !error.subtype) &&\n        error instanceof Error\n    );\n}\n","import { isCustomError, CustomError } from '../../common/error/errors';\nimport { bindDecorator as bind } from '../../common/utility';\nimport EmbeddedCheckoutError from '../embedded-checkout-error';\nimport {\n    EmbeddedCheckoutCompleteEvent,\n    EmbeddedCheckoutErrorEvent,\n    EmbeddedCheckoutEvent,\n    EmbeddedCheckoutEventMap,\n    EmbeddedCheckoutEventType,\n    EmbeddedCheckoutFrameErrorEvent,\n    EmbeddedCheckoutFrameLoadedEvent,\n    EmbeddedCheckoutLoadedEvent,\n    EmbeddedCheckoutSignedOutEvent,\n} from '../embedded-checkout-events';\nimport EmbeddedCheckoutStyles from '../embedded-checkout-styles';\nimport IframeEventListener from '../iframe-event-listener';\nimport IframeEventPoster from '../iframe-event-poster';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\nimport { EmbeddedContentEventMap, EmbeddedContentEventType } from './embedded-content-events';\nimport EmbeddedContentOptions from './embedded-content-options';\n\n@bind\nexport default class IframeEmbeddedCheckoutMessenger implements EmbeddedCheckoutMessenger {\n    /**\n     * @internal\n     */\n    constructor(\n        private _messageListener: IframeEventListener<EmbeddedContentEventMap>,\n        private _messagePoster: IframeEventPoster<EmbeddedCheckoutEvent>,\n        private _untargetedMessagePoster: IframeEventPoster<EmbeddedCheckoutEvent>,\n        private _messageHandlers: EventCallbacks<EmbeddedCheckoutEventMap> = {}\n    ) {\n        this._messageListener.listen();\n    }\n\n    postComplete(): void {\n        const message: EmbeddedCheckoutCompleteEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutComplete,\n        };\n\n        this._postMessage(message);\n    }\n\n    postError(payload: Error | CustomError): void {\n        const message: EmbeddedCheckoutErrorEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutError,\n            payload: this._transformError(payload),\n        };\n\n        this._postMessage(message);\n    }\n\n    postFrameError(payload: Error | CustomError): void {\n        const message: EmbeddedCheckoutFrameErrorEvent = {\n            type: EmbeddedCheckoutEventType.FrameError,\n            payload: this._transformError(payload),\n        };\n\n        // Ideally, all messages should be targeted at a specific origin.\n        // However, for `FrameError` message, we have to post it in an\n        // untargeted fashion. This is because the error could be caused by a\n        // missing cart. That makes it not possible to determine of site origin\n        // of the parent window. Nevertheless, we still want to notify the\n        // parent window about the error.\n        this._postMessage(message, { untargeted: true });\n    }\n\n    postFrameLoaded(payload?: EmbeddedContentOptions): void {\n        const message: EmbeddedCheckoutFrameLoadedEvent = {\n            type: EmbeddedCheckoutEventType.FrameLoaded,\n            payload,\n        };\n\n        this._postMessage(message);\n    }\n\n    postLoaded(): void {\n        const message: EmbeddedCheckoutLoadedEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutLoaded,\n        };\n\n        this._postMessage(message);\n    }\n\n    postSignedOut(): void {\n        const message: EmbeddedCheckoutSignedOutEvent = {\n            type: EmbeddedCheckoutEventType.SignedOut,\n        };\n\n        this._postMessage(message);\n    }\n\n    receiveStyles(handler: (styles: EmbeddedCheckoutStyles) => void): void {\n        this._messageListener.addListener(EmbeddedContentEventType.StyleConfigured, ({ payload }) => {\n            handler(payload);\n        });\n    }\n\n    private _postMessage(message: EmbeddedCheckoutEvent, options?: { untargeted?: boolean }): void {\n        this._notifyMessageHandlers(message);\n\n        if (options && options.untargeted) {\n            return this._untargetedMessagePoster.post(message);\n        }\n\n        this._messagePoster.post(message);\n    }\n\n    private _notifyMessageHandlers(message: EmbeddedCheckoutEvent): void {\n        Object.keys(this._messageHandlers)\n            .forEach(key => {\n                const handler = this._messageHandlers[key as keyof EmbeddedCheckoutEventMap];\n\n                if (handler) {\n                    handler.call(null, message);\n                }\n            });\n    }\n\n    private _transformError(error: Error | CustomError): EmbeddedCheckoutError {\n        return {\n            message: error.message,\n            type: isCustomError(error) ? error.type : undefined,\n            subtype: isCustomError(error) ? error.subtype : undefined,\n        };\n    }\n}\n\nexport type EventCallbacks<TEventMap> = {\n    [key in keyof TEventMap]?: (event: TEventMap[key]) => void;\n};\n","import { bindDecorator as bind } from '../../common/utility';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\n\n@bind\nexport default class NoopEmbeddedCheckoutMessenger implements EmbeddedCheckoutMessenger {\n    postComplete(): void {}\n\n    postError(): void {}\n\n    postFrameError(): void {}\n\n    postFrameLoaded(): void {}\n\n    postLoaded(): void {}\n\n    postSignedOut(): void {}\n\n    receiveStyles(): void {}\n}\n","import { EmbeddedCheckoutEvent, EmbeddedCheckoutEventType } from '../embedded-checkout-events';\nimport IframeEventListener from '../iframe-event-listener';\nimport IframeEventPoster from '../iframe-event-poster';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\nimport EmbeddedCheckoutMessengerOptions from './embedded-checkout-messenger-options';\nimport { EmbeddedContentEventMap } from './embedded-content-events';\nimport handleFrameLoadedEvent from './handle-frame-loaded-event';\nimport IframeEmbeddedCheckoutMessenger from './iframe-embedded-checkout-messenger';\nimport NoopEmbeddedCheckoutMessenger from './noop-embedded-checkout-messenger';\n\n/**\n * Create an instance of `EmbeddedCheckoutMessenger`.\n *\n * @remarks\n * The object is responsible for posting messages to the parent window from the\n * iframe when certain events have occurred. For example, when the checkout\n * form is first loaded, you should notify the parent window about it.\n *\n * The iframe can only be embedded in domains that are allowed by the store.\n *\n * ```ts\n * const messenger = createEmbeddedCheckoutMessenger({\n *     parentOrigin: 'https://some/website',\n * });\n *\n * messenger.postFrameLoaded();\n * ```\n *\n * @alpha\n * Please note that this feature is currently in an early stage of development.\n * Therefore the API is unstable and not ready for public consumption.\n *\n * @param options - Options for creating `EmbeddedCheckoutMessenger`\n * @returns - An instance of `EmbeddedCheckoutMessenger`\n */\nexport default function createEmbeddedCheckoutMessenger(options: EmbeddedCheckoutMessengerOptions): EmbeddedCheckoutMessenger {\n    const parentWindow = options.parentWindow || window.parent;\n\n    // Return a No-op messenger if it is not called inside an iframe\n    if (window === parentWindow) {\n        return new NoopEmbeddedCheckoutMessenger();\n    }\n\n    return new IframeEmbeddedCheckoutMessenger(\n        new IframeEventListener<EmbeddedContentEventMap>(options.parentOrigin),\n        new IframeEventPoster<EmbeddedCheckoutEvent>(options.parentOrigin, parentWindow),\n        new IframeEventPoster<EmbeddedCheckoutEvent>('*', parentWindow),\n        { [EmbeddedCheckoutEventType.FrameLoaded]: handleFrameLoadedEvent }\n    );\n}\n","import { isObject, union } from 'lodash';\nimport * as MessageFormat from 'messageformat';\n\nimport Logger from '../common/log/logger';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport LanguageConfig, { Locales, Translations } from './language-config';\n\nconst DEFAULT_LOCALE = 'en';\nconst KEY_PREFIX = 'optimized_checkout';\n\n/**\n * Responsible for getting language strings.\n *\n * This object can be used to retrieve language strings that are most\n * appropriate for a given locale.\n *\n * The language strings provided to the object should follow [ICU\n * MessageFormat](http://userguide.icu-project.org/formatparse/messages) syntax.\n */\n@bind\nexport default class LanguageService {\n    private _locale: string;\n    private _locales: Locales;\n    private _translations: Translations;\n    private _formatters: { [key: string]: any };\n\n    /**\n     * @internal\n     */\n    constructor(\n        config: Partial<LanguageConfig>,\n        private _logger: Logger\n    ) {\n        const { locale, locales, translations } = this._transformConfig(config);\n\n        this._locale = locale;\n        this._locales = locales;\n        this._translations = translations;\n        this._formatters = {};\n    }\n\n    /**\n     * Remaps a set of language strings with a different set of keys.\n     *\n     * ```js\n     * service.mapKeys({\n     *     'new_key': 'existing_key',\n     * });\n     *\n     * console.log(service.translate('new_key'));\n     * ```\n     *\n     * @param maps - The set of language strings.\n     */\n    mapKeys(maps: { [key: string]: string }): void {\n        Object.keys(maps).forEach(key => {\n            const translationKey = `${KEY_PREFIX}.${maps[key]}`;\n\n            this._translations[`${KEY_PREFIX}.${key}`] = this._translations[translationKey];\n        });\n    }\n\n    /**\n     * Gets the preferred locale of the current customer.\n     *\n     * @returns The preferred locale code.\n     */\n    getLocale(): string {\n        return this._hasTranslations() ? this._locale : DEFAULT_LOCALE;\n    }\n\n    /**\n     * Gets a language string by a key.\n     *\n     * ```js\n     * service.translate('language_key');\n     * ```\n     *\n     * If the language string contains a placeholder, you can replace it by\n     * providing a second argument.\n     *\n     * ```js\n     * service.translate('language_key', { placeholder: 'Hello' });\n     * ```\n     *\n     * @param key - The language key.\n     * @param data - Data for replacing placeholders in the language string.\n     * @returns The translated language string.\n     */\n    translate(key: string, data: TranslationData = {}): string {\n        const prefixedKey = `${KEY_PREFIX}.${key}`;\n\n        if (typeof this._translations[prefixedKey] !== 'string') {\n            this._logger.warn(`Translation key \"${prefixedKey}\" is missing`);\n\n            return prefixedKey;\n        }\n\n        if (!this._formatters[prefixedKey]) {\n            const messageFormat = new MessageFormat(this._locales[prefixedKey]);\n\n            this._formatters[prefixedKey] = messageFormat.compile(this._translations[prefixedKey] || '');\n        }\n\n        return this._formatters[prefixedKey](this._transformData(data));\n    }\n\n    private _transformConfig(config: Partial<LanguageConfig> = {}): LanguageConfig {\n        const output: LanguageConfig = {\n            defaultTranslations: {},\n            translations: {},\n            locales: {},\n            locale: config.locale || DEFAULT_LOCALE,\n        };\n\n        const locales = config.locales || {};\n        const translations = this._flattenObject(config.translations || {});\n        const defaultTranslations = this._flattenObject(config.defaultTranslations || {});\n        const translationKeys = union(Object.keys(defaultTranslations), Object.keys(translations));\n\n        translationKeys.forEach(key => {\n            if (translations && translations[key]) {\n                output.translations[key] = translations[key];\n                output.locales[key] = locales[key] || output.locale;\n            } else {\n                output.translations[key] = defaultTranslations[key];\n                output.locales[key] = DEFAULT_LOCALE;\n            }\n        });\n\n        return output;\n    }\n\n    private _flattenObject(object: Translations, result: Translations = {}, parentKey: string = ''): Translations {\n        try {\n            Object.keys(object).forEach(key => {\n                const value = object[key];\n                const resultKey = parentKey ? `${parentKey}.${key}` : key;\n\n                if (isObject(value)) {\n                    return this._flattenObject(value as Translations, result, resultKey);\n                }\n\n                result[resultKey] = value;\n            });\n        } catch (err) {\n            this._logger.warn(`Unable to parse object: ${err}`);\n        }\n\n        return result;\n    }\n\n    private _transformData(data: TranslationData): TranslationData {\n        return Object.keys(data).reduce((result, key) => {\n            const value = data[key];\n\n            result[key] = value === null || value === undefined ? '' : value;\n\n            return result;\n        }, {} as TranslationData);\n    }\n\n    private _hasTranslations(): boolean {\n        return Object.keys(this._locales).map(key => this._locales[key])\n            .filter(code => code.split('-')[0] === this._locale.split('-')[0])\n            .length > 0;\n    }\n}\n\nexport interface TranslationData {\n    [key: string]: string | number;\n}\n","import { getDefaultLogger } from '../common/log';\n\nimport LanguageConfig from './language-config';\nimport LanguageService from './language-service';\n\n/**\n * Creates an instance of `LanguageService`.\n *\n * @remarks\n * ```js\n * const language = {{{langJson 'optimized_checkout'}}}; // `langJson` is a Handlebars helper provided by BigCommerce's Stencil template engine.\n * const service = createLanguageService(language);\n *\n * console.log(service.translate('address.city_label'));\n * ```\n *\n * @param config - A configuration object.\n * @returns An instance of `LanguageService`.\n */\nexport default function createLanguageService(config: Partial<LanguageConfig> = {}): LanguageService {\n    return new LanguageService(\n        config,\n        getDefaultLogger()\n    );\n}\n","import { InvalidArgumentError } from '../common/error/errors';\n\nimport { CurrencyConfig } from './currency';\n\nexport default class CurrencyFormatter {\n    private _decimalPlaces: number;\n    private _symbolLocation: string;\n    private _symbol: string;\n    private _thousandsSeparator: string;\n    private _decimalSeparator: string;\n\n    constructor(\n        currencySettings: CurrencyConfig\n    ) {\n        if (!currencySettings) {\n            throw new Error('Currency settings missing');\n        }\n\n        const {\n            decimalPlaces,\n            symbolLocation,\n            symbol,\n            thousandsSeparator,\n            decimalSeparator,\n        } = currencySettings;\n\n        if (\n            typeof symbolLocation !== 'string' ||\n            typeof symbol !== 'string' ||\n            typeof thousandsSeparator !== 'string' ||\n            typeof decimalSeparator !== 'string' ||\n            typeof decimalPlaces !== 'string'\n        ) {\n            throw new InvalidArgumentError('Invalid currency settings provided');\n        }\n\n        this._decimalPlaces = parseInt(decimalPlaces, 10);\n        this._symbolLocation = symbolLocation;\n        this._symbol = symbol;\n        this._thousandsSeparator = thousandsSeparator;\n        this._decimalSeparator = decimalSeparator;\n    }\n\n    format(amount?: number): string {\n        if (typeof amount !== 'number') {\n            throw new InvalidArgumentError('Invalid amount provided');\n        }\n\n        const formattedNumber = this._formatNumber(amount);\n\n        const formattedCurrency = this._formatCurrency(formattedNumber);\n\n        return amount < 0 ?\n            `-${formattedCurrency}` :\n            formattedCurrency;\n    }\n\n    private _formatNumber(amount: number): string {\n        const positiveAmount = Math.abs(amount);\n        const [ integerAmount, decimalAmount = '' ] = (this._toFixed(positiveAmount, this._decimalPlaces)).split('.');\n        const parsedIntegerAmount = integerAmount.replace(/\\B(?=(\\d{3})+(?!\\d))/g, this._thousandsSeparator);\n\n        if (this._decimalPlaces < 1) {\n            return parsedIntegerAmount;\n        }\n\n        return [\n            parsedIntegerAmount,\n            decimalAmount,\n        ].join(this._decimalSeparator);\n    }\n\n    private _formatCurrency(formattedNumber: string): string {\n        return (this._symbolLocation.toLowerCase() === 'left') ?\n            `${this._symbol}${formattedNumber}` :\n            `${formattedNumber}${this._symbol}`;\n    }\n\n    private _toFixed(value: number, precision: number): string {\n        return (+(Math.round(+(value + 'e' + precision)) + 'e' + -precision)).toFixed(precision);\n    }\n}\n","import { bindDecorator as bind } from '../common/utility';\nimport { StoreConfig } from '../config';\n\nimport CurrencyFormatter from './currency-formatter';\n\n/**\n * Responsible for formatting and converting currencies.\n */\n@bind\nexport default class CurrencyService {\n    private _customerFormatter: CurrencyFormatter;\n    private _storeFormatter: CurrencyFormatter;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _storeConfig: StoreConfig\n    ) {\n        this._customerFormatter = new CurrencyFormatter(this._storeConfig.shopperCurrency);\n        this._storeFormatter = new CurrencyFormatter(this._storeConfig.currency);\n    }\n\n    toCustomerCurrency(amount: number): string {\n        const exchangeRate = this._storeConfig.shopperCurrency.exchangeRate;\n\n        return this._customerFormatter.format(amount * exchangeRate);\n    }\n\n    toStoreCurrency(amount: number): string {\n        return this._storeFormatter.format(amount);\n    }\n}\n","import { StoreConfig } from '../config';\n\nimport CurrencyService from './currency-service';\n\n/**\n * Creates an instance of `CurrencyService`.\n *\n * @remarks\n * ```js\n * const { data } = checkoutService.getState();\n * const config = data.getConfig();\n * const checkout = data.getCheckout();\n * const currencyService = createCurrencyService(config);\n *\n * currencyService.toStoreCurrency(checkout.grandTotal);\n * currencyService.toCustomerCurrency(checkout.grandTotal);\n * ```\n *\n * @alpha\n * Please note that `CurrencyService` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param config - The config object containing the currency configuration\n * @returns an instance of `CurrencyService`.\n */\nexport default function createCurrencyService(\n    config: StoreConfig\n): CurrencyService {\n    return new CurrencyService(config);\n}\n","export { createTimeout } from '@bigcommerce/request-sender';\n\nexport { createCheckoutService } from './checkout';\nexport { createCheckoutButtonInitializer } from './checkout-buttons';\nexport { embedCheckout } from './embedded-checkout';\nexport { createEmbeddedCheckoutMessenger } from './embedded-checkout/iframe-content';\nexport { createLanguageService } from './locale';\nexport { createCurrencyService } from './currency';\n","import { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeModuleCreator, GooglePayBraintreeSDK } from '../braintree';\n\nexport type EnvironmentType = 'PRODUCTION' | 'TEST';\ntype TokenizeType = 'AndroidPayCard' | 'CreditCard';\n\nexport interface GooglePayInitializer {\n    initialize(checkout: Checkout, paymentMethod: PaymentMethod, hasShippingAddress: boolean, publishableKey?: string): Promise<GooglePayPaymentDataRequestV2>;\n    teardown(): Promise<void>;\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload;\n}\n\nexport interface GooglePayCreator extends BraintreeModuleCreator<GooglePayBraintreeSDK> {}\n\nexport interface GooglePayPaymentOptions {\n    environment: EnvironmentType;\n}\n\nexport interface GooglePayIsReadyToPayResponse {\n    result: boolean;\n    paymentMethodPresend?: boolean;\n}\n\nexport interface GooglePaySDK {\n    payments: {\n        api: {\n            PaymentsClient: new(options: GooglePayPaymentOptions) => GooglePayClient;\n        };\n    };\n}\n\nexport interface GooglePayClient {\n    isReadyToPay(options: object): Promise<GooglePayIsReadyToPayResponse>;\n    loadPaymentData(paymentDataRequest: GooglePayPaymentDataRequestV2): Promise<GooglePaymentData>;\n    createButton(options: { [key: string]: string | object }): HTMLElement;\n}\n\nexport interface GooglePayHostWindow extends Window {\n    google?: GooglePaySDK;\n}\n\nexport interface TokenizePayload {\n    nonce: string;\n    details: {\n        cardType: string;\n        lastFour: string;\n        lastTwo?: string;\n    };\n    description?: string;\n    type: TokenizeType;\n    binData?: {\n        commercial: string;\n        countryOfIssuance: string;\n        debit: string;\n        durbinRegulated: string;\n        healthcare: string;\n        issuingBank: string;\n        payroll: string;\n        prepaid: string;\n        productId: string;\n    };\n}\n\nexport interface GooglePaymentData {\n    apiVersion: number;\n    apiVersionMinor: number;\n    paymentMethodData: {\n        description: string;\n        info: {\n            cardDetails: string;\n            cardNetwork: string;\n            billingAddress: GooglePayAddress;\n        };\n        tokenizationData: {\n            token: string;\n            type: string;\n        };\n        type: string;\n    };\n    shippingAddress: GooglePayAddress;\n    email: string;\n}\n\nexport interface GooglePayAddress {\n    address1: string;\n    address2: string;\n    address3: string;\n    administrativeArea: string;\n    companyName: string;\n    countryCode: string;\n    locality: string;\n    name: string;\n    postalCode: string;\n    sortingCode: string;\n    phoneNumber: string;\n}\n\nexport interface GooglePaymentsError {\n    statusCode: string;\n    statusMessage?: string;\n}\n\nexport interface PaymentMethodData {\n    methodId: string;\n    paymentData: {\n        method: string;\n        nonce: string;\n        cardInformation: {\n            type: string;\n            number: string;\n        };\n    };\n}\n\nexport enum ButtonType {\n    Long = 'long',\n    Short = 'short',\n}\nexport enum ButtonColor {\n    Default = 'default',\n    Black = 'black',\n    White = 'white',\n}\n\nexport interface GooglePayPaymentDataRequestV2 {\n    apiVersion: number;\n    apiVersionMinor: number;\n    merchantInfo: {\n        authJwt?: string;\n        merchantId?: string;\n        merchantName?: string;\n    };\n    allowedPaymentMethods: [{\n        type: string;\n        parameters: {\n            allowedAuthMethods: string[];\n            allowedCardNetworks: string[];\n            allowPrepaidCards?: boolean;\n            billingAddressRequired?: boolean;\n            billingAddressParameters?: {\n                format?: string;\n                phoneNumberRequired?: boolean;\n            };\n        };\n        tokenizationSpecification?: {\n            type: string;\n            parameters: {\n                gateway: string;\n                gatewayMerchantId?: string;\n                'braintree:apiVersion'?: string;\n                'braintree:clientKey'?: string;\n                'braintree:merchantId'?: string;\n                'braintree:sdkVersion'?: string;\n                'braintree:authorizationFingerprint'?: string;\n                'stripe:version'?: string;\n                'stripe:publishableKey'?: string;\n            };\n        };\n    }];\n    transactionInfo: {\n        currencyCode: string;\n        totalPriceStatus: string;\n        totalPrice?: string;\n        checkoutOption?: string;\n    };\n    emailRequired?: boolean;\n    shippingAddressRequired?: boolean;\n    shippingAddressParameters?: {\n        allowedCountryCodes?: string[];\n        phoneNumberRequired?: boolean;\n    };\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../../../address';\nimport { BillingAddressActionCreator, BillingAddressUpdateRequestBody } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport { ConsignmentActionCreator } from '../../../shipping';\nimport PaymentMethodInvalidError from '../../errors/payment-method-invalid-error';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\n\nimport {\n    ButtonColor,\n    ButtonType,\n    EnvironmentType,\n    GooglePaymentData,\n    GooglePayAddress,\n    GooglePayClient,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    GooglePaySDK,\n    TokenizePayload\n} from './googlepay';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default class GooglePayPaymentProcessor {\n    private _googlePayClient?: GooglePayClient;\n    private _methodId?: string;\n    private _paymentDataRequest?: GooglePayPaymentDataRequestV2;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _googlePayScriptLoader: GooglePayScriptLoader,\n        private _googlePayInitializer: GooglePayInitializer,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _consigmentActionCreator: ConsignmentActionCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(methodId: string): Promise<void> {\n        this._methodId = methodId;\n\n        return this._configureWallet();\n    }\n\n    deinitialize(): Promise<void> {\n        return this._googlePayInitializer.teardown();\n    }\n\n    createButton(\n        onClick: (event: Event) => Promise<void>,\n        buttonType: ButtonType = ButtonType.Short,\n        buttonColor: ButtonColor = ButtonColor.Default\n    ): HTMLElement {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.createButton({\n            buttonColor,\n            buttonType,\n            onClick,\n        });\n    }\n\n    displayWallet(): Promise<GooglePaymentData> {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.loadPaymentData(this._getPaymentDataRequest());\n    }\n\n    handleSuccess(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        return this._postForm(this._googlePayInitializer.parseResponse(paymentData))\n            .then(() => this._updateBillingAddress(paymentData));\n    }\n\n    updateShippingAddress(shippingAddress: GooglePayAddress): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consigmentActionCreator.updateAddress(this._mapGooglePayAddressToShippingAddress(shippingAddress))\n        );\n    }\n\n    private _configureWallet(): Promise<void> {\n        const methodId = this._getMethodId();\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                const checkout = state.checkout.getCheckout();\n                const hasShippingAddress = !!state.shippingAddress.getShippingAddress();\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const { testMode } = paymentMethod.config;\n\n                return Promise.all([\n                    this._googlePayScriptLoader.load(),\n                    this._googlePayInitializer.initialize(checkout, paymentMethod, hasShippingAddress),\n                ]).then(([googlePay, paymentDataRequest]) => {\n                    this._googlePayClient = this._getGooglePayClient(googlePay, testMode);\n                    this._paymentDataRequest = paymentDataRequest;\n\n                    return this._googlePayClient.isReadyToPay({\n                        allowedPaymentMethods: [\n                            {\n                                type: paymentDataRequest.allowedPaymentMethods[0].type,\n                                parameters: {\n                                    allowedAuthMethods: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedAuthMethods,\n                                    allowedCardNetworks: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedCardNetworks,\n                                },\n                            },\n                        ],\n                        apiVersion: paymentDataRequest.apiVersion,\n                        apiVersionMinor: paymentDataRequest.apiVersionMinor,\n                    }).then(response => {\n                        if (response.result) {\n                            return;\n                        }\n\n                        throw new PaymentMethodInvalidError();\n                    });\n                });\n            });\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string; lastFour: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastFour,\n        };\n    }\n\n    private _getPaymentDataRequest(): GooglePayPaymentDataRequestV2 {\n        if (!this._paymentDataRequest) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._paymentDataRequest;\n    }\n\n    private _getGooglePayClient(google: GooglePaySDK, testMode?: boolean): GooglePayClient {\n        if (testMode === undefined) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const environment: EnvironmentType = testMode ? 'TEST' : 'PRODUCTION';\n\n        return new google.payments.api.PaymentsClient({ environment });\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    private _mapGooglePayAddressToBillingAddress(paymentData: GooglePaymentData, id: string): BillingAddressUpdateRequestBody {\n        return {\n            id,\n            firstName: paymentData.paymentMethodData.info.billingAddress.name.split(' ').slice(0, -1).join(' '),\n            lastName: paymentData.paymentMethodData.info.billingAddress.name.split(' ').slice(-1).join(' '),\n            company: paymentData.paymentMethodData.info.billingAddress.companyName,\n            address1: paymentData.paymentMethodData.info.billingAddress.address1,\n            address2: paymentData.paymentMethodData.info.billingAddress.address2 + paymentData.paymentMethodData.info.billingAddress.address3,\n            city: paymentData.paymentMethodData.info.billingAddress.locality,\n            stateOrProvince: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            stateOrProvinceCode: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            postalCode: paymentData.paymentMethodData.info.billingAddress.postalCode,\n            countryCode: paymentData.paymentMethodData.info.billingAddress.countryCode,\n            phone: paymentData.paymentMethodData.info.billingAddress.phoneNumber,\n            customFields: [],\n            email: paymentData.email,\n        };\n    }\n\n    private _mapGooglePayAddressToShippingAddress(address: GooglePayAddress): AddressRequestBody {\n        return {\n            firstName: address.name.split(' ').slice(0, -1).join(' '),\n            lastName: address.name.split(' ').slice(-1).join(' '),\n            company: address.companyName,\n            address1: address.address1,\n            address2: address.address2 + address.address3,\n            city: address.locality,\n            stateOrProvince: address.administrativeArea,\n            stateOrProvinceCode: address.administrativeArea,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phoneNumber,\n            customFields: [],\n        };\n    }\n\n    private _postForm(postPaymentData: TokenizePayload): Promise<Response<void>> {\n        const cardInformation = postPaymentData.details;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: {\n                payment_type: postPaymentData.type,\n                nonce: postPaymentData.nonce,\n                provider: this._getMethodId(),\n                action: 'set_external_checkout',\n                card_information: this._getCardInformation(cardInformation),\n            },\n        });\n    }\n\n    private _updateBillingAddress(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        const remoteBillingAddress = this._store.getState().billingAddress.getBillingAddress();\n\n        if (!remoteBillingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const googlePayAddressMapped = this._mapGooglePayAddressToBillingAddress(paymentData, remoteBillingAddress.id);\n\n        return this._store.dispatch(\n            this._billingAddressActionCreator.updateAddress(googlePayAddressMapped)\n        );\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { GooglePayHostWindow, GooglePaySDK } from './googlepay';\n\nexport default class GooglePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GooglePayHostWindow = window\n    ) {}\n\n    load(): Promise<GooglePaySDK> {\n        return this._scriptLoader\n            .loadScript('https://pay.google.com/gp/p/js/pay.js')\n            .then(() => {\n                if (!this._window.google) {\n                    throw new StandardError();\n                }\n\n                return this._window.google;\n            });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../../../billing';\nimport { CheckoutRequestSender, CheckoutStore } from '../../../checkout';\nimport { ConsignmentActionCreator, ConsignmentRequestSender } from '../../../shipping';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport PaymentMethodRequestSender from '../../payment-method-request-sender';\n\nimport { GooglePayInitializer } from './googlepay';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default function createGooglePayPaymentProcessor(store: CheckoutStore, initializer: GooglePayInitializer): GooglePayPaymentProcessor {\n    const requestSender = createRequestSender();\n    const scriptLoader = getScriptLoader();\n\n    return new GooglePayPaymentProcessor(\n        store,\n        new PaymentMethodActionCreator(\n            new PaymentMethodRequestSender(requestSender)\n        ),\n        new GooglePayScriptLoader(scriptLoader),\n        initializer,\n        new BillingAddressActionCreator(\n            new BillingAddressRequestSender(requestSender)\n        ),\n        new ConsignmentActionCreator(\n            new ConsignmentRequestSender(requestSender),\n            new CheckoutRequestSender(requestSender)\n        ),\n        requestSender\n    );\n}\n","import { keyBy, reduce, some } from 'lodash';\n\nimport { Checkout } from '../checkout';\nimport { AmountTransformer } from '../common/utility';\nimport { mapToInternalCoupon, mapToInternalGiftCertificate } from '../coupon';\nimport { mapToDiscountNotifications } from '../promotion';\n\nimport InternalCart from './internal-cart';\nimport mapToInternalLineItems from './map-to-internal-line-items';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCart(checkout: Checkout): InternalCart {\n    const decimalPlaces = checkout.cart.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: checkout.cart.id,\n        items: mapToInternalLineItems(checkout.cart.lineItems, decimalPlaces),\n        currency: checkout.cart.currency.code,\n        coupon: {\n            discountedAmount: reduce(checkout.cart.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: checkout.cart.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: checkout.cart.discountAmount,\n            integerAmount: amountTransformer.toInteger(checkout.cart.discountAmount),\n        },\n        discountNotifications: mapToDiscountNotifications(checkout.promotions),\n        giftCertificate: {\n            totalDiscountedAmount: reduce(checkout.giftCertificates, (sum, certificate) => {\n                return sum + certificate.used;\n            }, 0),\n            appliedGiftCertificates: keyBy(checkout.giftCertificates.map(mapToInternalGiftCertificate), 'code'),\n        },\n        shipping: {\n            amount: checkout.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.shippingCostTotal),\n            amountBeforeDiscount: checkout.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(checkout.shippingCostBeforeDiscount),\n            required: some(checkout.cart.lineItems.physicalItems, lineItem => lineItem.isShippingRequired),\n        },\n        subtotal: {\n            amount: checkout.subtotal,\n            integerAmount: amountTransformer.toInteger(checkout.subtotal),\n        },\n        storeCredit: {\n            amount: checkout.customer ? checkout.customer.storeCredit : 0,\n        },\n        taxSubtotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        taxes: checkout.taxes,\n        taxTotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        handling: {\n            amount: checkout.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: checkout.grandTotal,\n            integerAmount: amountTransformer.toInteger(checkout.grandTotal),\n        },\n    };\n}\n","import { DiscountNotification } from '../discount';\n\nimport { Promotion } from '.';\n\nexport default function mapToDiscountNotifications(promotions?: Promotion[]): DiscountNotification[] {\n    const notifications: DiscountNotification[] = [];\n\n    (promotions || []).forEach(promotion => {\n        (promotion.banners || []).forEach(banner => {\n            notifications.push({\n                placeholders: [],\n                discountType: null,\n                message: '',\n                messageHtml: banner.text,\n            });\n        });\n    });\n\n    return notifications;\n}\n"],"sourceRoot":""}