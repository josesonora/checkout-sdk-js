{"version":3,"sources":["webpack://checkoutKit/webpack/bootstrap","webpack://checkoutKit/external \"tslib\"","webpack://checkoutKit/external \"@bigcommerce/data-store\"","webpack://checkoutKit/external \"lodash\"","webpack://checkoutKit/external \"rxjs\"","webpack://checkoutKit/./src/shipping/consignment-actions.ts","webpack://checkoutKit/./src/checkout/checkout-actions.ts","webpack://checkoutKit/./src/common/error/errors/missing-data-error.ts","webpack://checkoutKit/./src/customer/customer-strategy-actions.ts","webpack://checkoutKit/./src/payment/payment-strategy-actions.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-actions.ts","webpack://checkoutKit/./src/coupon/coupon-actions.ts","webpack://checkoutKit/./src/order/order-actions.ts","webpack://checkoutKit/./src/common/error/errors/standard-error.ts","webpack://checkoutKit/./src/billing/billing-address-actions.ts","webpack://checkoutKit/./src/coupon/gift-certificate-actions.ts","webpack://checkoutKit/./src/payment/payment-method-actions.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-actions.ts","webpack://checkoutKit/./src/payment/instrument/instrument-actions.ts","webpack://checkoutKit/external \"rxjs/operators\"","webpack://checkoutKit/./src/embedded-checkout/embedded-checkout-events.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-actions.ts","webpack://checkoutKit/./src/common/error/error-action-creator.ts","webpack://checkoutKit/./src/geography/country-action-creator.ts","webpack://checkoutKit/./src/geography/country-request-sender.ts","webpack://checkoutKit/./src/payment/payment-strategy-type.ts","webpack://checkoutKit/./src/order/errors/order-finalization-not-required-error.ts","webpack://checkoutKit/./src/payment/payment-strategy-action-creator.ts","webpack://checkoutKit/./src/cart/errors/cart-changed-error.ts","webpack://checkoutKit/./src/checkout/checkout-validator.ts","webpack://checkoutKit/./src/payment/is-vaulted-instrument.ts","webpack://checkoutKit/./src/payment/payment-action-creator.ts","webpack://checkoutKit/./src/payment/payment-request-sender.ts","webpack://checkoutKit/./src/payment/payment-strategy-registry.ts","webpack://checkoutKit/./src/payment/errors/payment-argument-invalid-error.ts","webpack://checkoutKit/./src/payment/strategies/afterpay/afterpay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/afterpay/afterpay-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/amazon-pay/amazon-pay-payment-strategy.ts","webpack://checkoutKit/./src/common/overlay/overlay.ts","webpack://checkoutKit/./src/payment/errors/payment-method-cancelled-error.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-credit-card-payment-strategy.ts","webpack://checkoutKit/./src/payment/is-credit-card-like.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-paypal-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay.ts","webpack://checkoutKit/./src/payment/strategies/braintree/is-braintree-error.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-visacheckout-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/square/square-form.ts","webpack://checkoutKit/./src/payment/strategies/credit-card/credit-card-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/klarna/klarna-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/klarna/klarna-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/legacy/legacy-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/masterpass-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/no-payment/no-payment-data-required-strategy.ts","webpack://checkoutKit/./src/payment/strategies/offline/offline-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/offsite/offsite-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-pro-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-express-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/sage-pay/sage-pay-payment-strategy.ts","webpack://checkoutKit/./src/common/error/errors/unsupported-browser-error.ts","webpack://checkoutKit/./src/payment/strategies/square/square-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/square/square-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/wepay/wepay-risk-client.ts","webpack://checkoutKit/./src/payment/strategies/wepay/wepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/create-payment-strategy-registry.ts","webpack://checkoutKit/./src/payment/strategies/braintree/create-braintree-payment-processor.ts","webpack://checkoutKit/./src/payment/instrument/instrument-action-creator.ts","webpack://checkoutKit/./src/common/date-time/add-minutes.ts","webpack://checkoutKit/./src/common/date-time/is-future.ts","webpack://checkoutKit/./src/payment/instrument/instrument-response-transformer.ts","webpack://checkoutKit/./src/payment/instrument/instrument-request-sender.ts","webpack://checkoutKit/./src/checkout/checkout-store-selector.ts","webpack://checkoutKit/./src/checkout/checkout-store-error-selector.ts","webpack://checkoutKit/./src/checkout/checkout-store-status-selector.ts","webpack://checkoutKit/./src/checkout/create-checkout-selectors.ts","webpack://checkoutKit/./src/common/error/error-message-transformer.ts","webpack://checkoutKit/./src/checkout/checkout-service.ts","webpack://checkoutKit/./src/checkout/create-checkout-service-error-transformer.ts","webpack://checkoutKit/./src/checkout/create-checkout-service.ts","webpack://checkoutKit/./src/payment/create-payment-client.ts","webpack://checkoutKit/./src/checkout/index.ts","webpack://checkoutKit/./src/common/error/errors/request-error.ts","webpack://checkoutKit/./src/config/config-actions.ts","webpack://checkoutKit/./src/common/selector/selector-decorator.ts","webpack://checkoutKit/./src/common/http-request/content-type.ts","webpack://checkoutKit/./src/geography/country-actions.ts","webpack://checkoutKit/./src/shipping/shipping-country-actions.ts","webpack://checkoutKit/external \"@bigcommerce/request-sender\"","webpack://checkoutKit/./src/payment/payment-status-types.ts","webpack://checkoutKit/external \"@bigcommerce/script-loader\"","webpack://checkoutKit/./src/payment/payment-strategy-state.ts","webpack://checkoutKit/./src/common/error/clear-error-reducer.ts","webpack://checkoutKit/./src/checkout/checkout-default-includes.ts","webpack://checkoutKit/./src/common/utility/is-equal.ts","webpack://checkoutKit/./src/customer/customer-actions.ts","webpack://checkoutKit/./src/payment/payment-actions.ts","webpack://checkoutKit/./src/common/error/errors/invalid-argument-error.ts","webpack://checkoutKit/./src/payment/payment-method-types.ts","webpack://checkoutKit/./src/cart/amount-transformer.ts","webpack://checkoutKit/./src/embedded-checkout/is-iframe-event.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-error-selector.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-status-selector.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-selectors.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-initializer.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/checkout-button-method-type.ts","webpack://checkoutKit/./src/common/dom/is-element-id.ts","webpack://checkoutKit/./src/common/dom/set-unique-element-id.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-strategy-action-creator.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/braintree/braintree-paypal-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/googlepay/googlepay-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/masterpass/masterpass-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/paypal/paypal-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-initializer.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-registry.ts","webpack://checkoutKit/./src/checkout-buttons/index.ts","webpack://checkoutKit/./src/checkout/checkout-params.ts","webpack://checkoutKit/external \"@bigcommerce/form-poster\"","webpack://checkoutKit/./src/cart/map-to-internal-line-items.ts","webpack://checkoutKit/external \"local-storage-fallback\"","webpack://checkoutKit/./src/common/error/throw-error-action.ts","webpack://checkoutKit/./src/payment/errors/payment-method-invalid-error.ts","webpack://checkoutKit/./src/common/utility/cache-key-resolver.ts","webpack://checkoutKit/./src/common/utility/bind-decorator.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-event-poster.ts","webpack://checkoutKit/./src/checkout/create-action-transformer.ts","webpack://checkoutKit/./src/checkout/checkout-selector.ts","webpack://checkoutKit/./src/checkout/checkout-reducer.ts","webpack://checkoutKit/./src/cart/map-gift-certificate-to-internal-line-item.ts","webpack://checkoutKit/./src/cart/map-to-internal-line-item.ts","webpack://checkoutKit/./src/billing/billing-address-selector.ts","webpack://checkoutKit/./src/config/config-selector.ts","webpack://checkoutKit/./src/form/form-selector.ts","webpack://checkoutKit/./src/geography/country-selector.ts","webpack://checkoutKit/./src/payment/payment-selector.ts","webpack://checkoutKit/./src/payment/payment-method-selector.ts","webpack://checkoutKit/./src/payment/payment-strategy-selector.ts","webpack://checkoutKit/./src/payment/instrument/instrument-selector.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-selector.ts","webpack://checkoutKit/./src/checkout/create-internal-checkout-selectors.ts","webpack://checkoutKit/./src/common/utility/set-prototype-of.ts","webpack://checkoutKit/./src/common/utility/is-private.ts","webpack://checkoutKit/./src/common/utility/omit-deep.ts","webpack://checkoutKit/./src/common/error/error-actions.ts","webpack://checkoutKit/./src/payment/payment-method-action-creator.ts","webpack://checkoutKit/./src/payment/payment-method-request-sender.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/embedded-content-events.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-event-listener.ts","webpack://checkoutKit/./src/common/http-request/internal-api-headers.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-selector.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-reducer.ts","webpack://checkoutKit/./src/embedded-checkout/errors/not-embeddable-error.ts","webpack://checkoutKit/./src/common/storage/browser-storage.ts","webpack://checkoutKit/./src/embedded-checkout/errors/invalid-login-token-error.ts","webpack://checkoutKit/./src/embedded-checkout/embedded-checkout.ts","webpack://checkoutKit/./src/embedded-checkout/loading-indicator.ts","webpack://checkoutKit/./src/embedded-checkout/resizable-iframe-creator.ts","webpack://checkoutKit/./src/embedded-checkout/embed-checkout.ts","webpack://checkoutKit/./src/embedded-checkout/index.ts","webpack://checkoutKit/./src/cart/map-to-internal-cart.ts","webpack://checkoutKit/./src/promotion/map-to-discount-notifications.ts","webpack://checkoutKit/./src/checkout/checkout-action-creator.ts","webpack://checkoutKit/./src/shipping/consignment-action-creator.ts","webpack://checkoutKit/./src/shipping/consignment-request-sender.ts","webpack://checkoutKit/./src/shipping/map-to-internal-shipping-option.ts","webpack://checkoutKit/./src/common/error/errors/unrecoverable-error.ts","webpack://checkoutKit/./src/common/error/errors/map-from-internal-error-response.ts","webpack://checkoutKit/./src/common/error/errors/map-from-payment-error-response.ts","webpack://checkoutKit/./src/common/error/request-error-factory.ts","webpack://checkoutKit/./src/common/error/errors/map-from-storefront-error-response.ts","webpack://checkoutKit/./src/billing/billing-address-reducer.ts","webpack://checkoutKit/./src/config/config-reducer.ts","webpack://checkoutKit/./src/geography/country-reducer.ts","webpack://checkoutKit/./src/payment/payment-reducer.ts","webpack://checkoutKit/./src/payment/payment-method-reducer.ts","webpack://checkoutKit/./src/payment/payment-strategy-reducer.ts","webpack://checkoutKit/./src/payment/instrument/instrument-reducer.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-reducer.ts","webpack://checkoutKit/./src/checkout/create-checkout-store.ts","webpack://checkoutKit/./src/common/error/create-request-error-factory.ts","webpack://checkoutKit/./src/checkout/create-checkout-store-reducer.ts","webpack://checkoutKit/./src/checkout/errors/checkout-not-available-error.ts","webpack://checkoutKit/./src/checkout/checkout-request-sender.ts","webpack://checkoutKit/./src/address/is-address-equal.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-sdk-creator.ts","webpack://checkoutKit/./src/coupon/map-to-internal-coupon.ts","webpack://checkoutKit/external \"iframe-resizer\"","webpack://checkoutKit/./src/address/map-to-internal-address.ts","webpack://checkoutKit/./src/billing/is-billing-address-like.ts","webpack://checkoutKit/./src/common/http-request/join-includes.ts","webpack://checkoutKit/./src/common/error/errors/not-initialized-error.ts","webpack://checkoutKit/./src/common/url/parse-url.ts","webpack://checkoutKit/./src/common/action/cachable-action-decorator.ts","webpack://checkoutKit/./src/common/action/is-action-options.ts","webpack://checkoutKit/./src/common/action/cache-action.ts","webpack://checkoutKit/./src/common/utility/create-freeze-proxy.ts","webpack://checkoutKit/./src/customer/customer-strategy-action-creator.ts","webpack://checkoutKit/./src/customer/customer-action-creator.ts","webpack://checkoutKit/./src/customer/customer-request-sender.ts","webpack://checkoutKit/./src/cart/cart-selector.ts","webpack://checkoutKit/./src/coupon/coupon-selector.ts","webpack://checkoutKit/./src/customer/customer-selector.ts","webpack://checkoutKit/./src/customer/customer-strategy-selector.ts","webpack://checkoutKit/./src/coupon/gift-certificate-selector.ts","webpack://checkoutKit/./src/shipping/shipping-address-selector.ts","webpack://checkoutKit/./src/shipping/shipping-country-selector.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-selector.ts","webpack://checkoutKit/./src/shipping/consignment-selector.ts","webpack://checkoutKit/./src/order/order-selector.ts","webpack://checkoutKit/./src/cart/cart-reducer.ts","webpack://checkoutKit/./src/shipping/consignment-reducer.ts","webpack://checkoutKit/./src/coupon/coupon-reducer.ts","webpack://checkoutKit/./src/customer/customer-reducer.ts","webpack://checkoutKit/./src/coupon/gift-certificate-reducer.ts","webpack://checkoutKit/./src/order/order-reducer.ts","webpack://checkoutKit/./src/common/utility/merge-or-push.ts","webpack://checkoutKit/./src/shipping/shipping-country-reducer.ts","webpack://checkoutKit/./src/customer/map-to-internal-customer.ts","webpack://checkoutKit/./src/coupon/map-to-internal-gift-certificate.ts","webpack://checkoutKit/./src/order/map-to-internal-order.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-state.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-reducer.ts","webpack://checkoutKit/./src/customer/customer-strategy-state.ts","webpack://checkoutKit/./src/customer/customer-strategy-reducer.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/get-callback-url.ts","webpack://checkoutKit/./src/common/utility/omit-private.ts","webpack://checkoutKit/./src/common/utility/get-environment.ts","webpack://checkoutKit/./src/order/order-request-sender.ts","webpack://checkoutKit/./src/order/order-action-creator.ts","webpack://checkoutKit/./src/cart/cart-comparator.ts","webpack://checkoutKit/./src/common/utility/to-single-line.ts","webpack://checkoutKit/./src/coupon/coupon-action-creator.ts","webpack://checkoutKit/./src/coupon/coupon-request-sender.ts","webpack://checkoutKit/./src/coupon/gift-certificate-action-creator.ts","webpack://checkoutKit/./src/coupon/gift-certificate-request-sender.ts","webpack://checkoutKit/./src/common/utility/cancellable-promise.ts","webpack://checkoutKit/./src/address/is-internal-address-equal.ts","webpack://checkoutKit/./src/address/map-from-internal-address.ts","webpack://checkoutKit/./src/shipping/shipping-country-action-creator.ts","webpack://checkoutKit/./src/shipping/shipping-country-request-sender.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-action-creator.ts","webpack://checkoutKit/./src/common/error/errors/not-implemented-error.ts","webpack://checkoutKit/./src/customer/strategies/amazon/amazon-pay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/braintree/braintree-visacheckout-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/chasepay/chasepay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/default/default-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/googlepay/googlepay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/masterpass/masterpass-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/square/square-customer-strategy.ts","webpack://checkoutKit/./src/customer/create-customer-strategy-registry.ts","webpack://checkoutKit/./src/shipping/strategies/amazon/amazon-pay-shipping-strategy.ts","webpack://checkoutKit/./src/shipping/strategies/default/default-shipping-strategy.ts","webpack://checkoutKit/./src/shipping/create-shipping-strategy-registry.ts","webpack://checkoutKit/external \"@bigcommerce/bigpay-client\"","webpack://checkoutKit/external \"messageformat\"","webpack://checkoutKit/./src/common/error/errors/timeout-error.ts","webpack://checkoutKit/./src/config/config-action-creator.ts","webpack://checkoutKit/./src/config/config-request-sender.ts","webpack://checkoutKit/./src/billing/billing-address-action-creator.ts","webpack://checkoutKit/./src/billing/billing-address-request-sender.ts","webpack://checkoutKit/./src/common/registry/registry.ts","webpack://checkoutKit/./src/common/http-request/to-form-url-encoded.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/masterpass-script-loader.ts","webpack://checkoutKit/./src/remote-checkout/errors/remote-checkout-synchronization-error.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-braintree-initializer.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-stripe-initializer.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-script-loader.ts","webpack://checkoutKit/external \"iframe-resizer/js/iframeResizer.contentWindow\"","webpack://checkoutKit/./src/embedded-checkout/iframe-content/handle-frame-loaded-event.ts","webpack://checkoutKit/./src/common/error/errors/custom-error.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/iframe-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/noop-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/create-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/locale/language-service.ts","webpack://checkoutKit/./src/locale/create-language-service.ts","webpack://checkoutKit/./src/currency/currency-formatter.ts","webpack://checkoutKit/./src/currency/currency-service.ts","webpack://checkoutKit/./src/currency/create-currency-service.ts","webpack://checkoutKit/./src/index.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/create-googlepay-payment-processor.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-request-sender.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-action-creator.ts","webpack://checkoutKit/./src/payment/strategies/amazon-pay/amazon-pay-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/braintree/visacheckout-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay-script-loader.ts","webpack://checkoutKit/./src/common/log/console-logger.ts","webpack://checkoutKit/./src/common/log/noop-logger.ts","webpack://checkoutKit/./src/common/log/get-default-logger.ts","webpack://checkoutKit/./src/common/log/create-logger.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-visacheckout-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/braintree/create-braintree-visacheckout-payment-processor.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","ConsignmentActionType","__webpack_exports__","CheckoutActionType","MissingDataErrorType","MissingDataError","_super","subtype","_this","this","type","MissingBillingAddress","MissingCart","MissingConsignments","MissingCheckout","MissingCheckoutConfig","MissingOrderConfig","MissingOrder","MissingOrderId","MissingPayment","MissingPaymentMethod","getErrorMessage","tslib__WEBPACK_IMPORTED_MODULE_0__","_standard_error__WEBPACK_IMPORTED_MODULE_1__","CustomerStrategyActionType","PaymentStrategyActionType","ShippingStrategyActionType","CouponActionType","OrderActionType","StandardError","message","_utility__WEBPACK_IMPORTED_MODULE_1__","_newTarget","Error","captureStackTrace","stack","BillingAddressActionType","GiftCertificateActionType","PaymentMethodActionType","CheckoutButtonActionType","InstrumentActionType","EmbeddedCheckoutEventType","RemoteCheckoutActionType","ErrorActionCreator","clearError","error","error_actions","ClearError","payload","CountryActionCreator","_countryRequestSender","loadCountries","options","external_rxjs_","observer","next","data_store_","country_actions","LoadCountriesRequested","then","response","LoadCountriesSucceeded","body","data","complete","catch","LoadCountriesFailed","CountryRequestSender","_requestSender","_config","_a","timeout","headers","Accept-Language","locale","PaymentStrategyType","OrderFinalizationNotRequiredError","external_tslib_","standard_error","payment_strategy_type","PaymentStrategyActionCreator","_strategyRegistry","_orderActionCreator","execute","store","strategy","state","getState","payment","useStoreCredit","meta","methodId","isPaymentDataRequired","method","paymentMethods","getPaymentMethod","gatewayId","missing_data_error","getByMethod","NO_PAYMENT_DATA_REQUIRED","payment_strategy_actions","ExecuteRequested","undefined","ExecuteSucceeded","ExecuteFailed","finalize","FinalizeRequested","_loadOrderPaymentsIfNeeded","getPaymentId","order_finalization_not_required_error","providerId","id","gateway","FinalizeSucceeded","pipe","operators_","throw_error_action","FinalizeFailed","initialize","paymentStrategies","isInitialized","InitializeRequested","InitializeSucceeded","InitializeFailed","deinitialize","DeinitializeRequested","DeinitializeSucceeded","DeinitializeFailed","widgetInteraction","WidgetInteractionStarted","WidgetInteractionFinished","WidgetInteractionFailed","checkout","getCheckout","orderId","loadOrderPayments","CartChangedError","CheckoutValidator","_checkoutRequestSender","validate","loadCheckout","comparator","cart_comparator","grandTotal","_compareCoupons","coupons","_compareGiftCertificates","giftCertificates","isEqual","cart","cart_changed_error","couponsA","couponsB","external_lodash_","giftCertificatesA","giftCertificatesB","isVaultedInstrument","instrument","Boolean","instrumentId","PaymentActionCreator","_paymentRequestSender","submitPayment","payment_actions","SubmitPaymentRequested","_getPaymentRequestBody","loadCurrentOrder","SubmitPaymentSucceeded","SubmitPaymentFailed","initializeOffsitePayment","InitializeOffsitePaymentRequested","InitializeOffsitePaymentSucceeded","InitializeOffsitePaymentFailed","billingAddress","getBillingAddress","customer","getCustomer","order","getOrder","paymentMethod","_getPaymentMethod","shippingAddress","getShippingAddress","consignments","getConsignments","shippingOption","getShippingOption","storeConfig","config","getStoreConfig","contextConfig","getContextConfig","instrumentMeta","instruments","getInstrumentsMeta","paymentMeta","getPaymentMethodsMeta","orderMeta","getOrderMeta","internalCustomer","map_to_internal_customer","authToken","paymentData","getPaymentToken","vaultAccessToken","map_to_internal_address","map_to_internal_shipping_option","map_to_internal_cart","map_to_internal_order","quoteMeta","request","geoCountryCode","source","storeProfile","paymentMethodSelector","initializationData","PaymentRequestSender","_client","Promise","resolve","reject","_transformResponse","status","statusText","PaymentStrategyRegistry","_store","token","_getToken","cacheToken","_hasFactoryForMethod","payment_method_types","OFFLINE","_isLegacyMethod","LEGACY","OFFSITE","CREDIT_CARD","_hasFactory","clientSidePaymentProviders","paymentSettings","registry_registry","PaymentArgumentInvalidError","invalidFields","join","invalid_argument_error","AfterpayPaymentStrategy","_checkoutValidator","_paymentActionCreator","_paymentMethodActionCreator","_remoteCheckoutActionCreator","_afterpayScriptLoader","storeCountryName","storeCountry","load","_mapCountryToISO2","afterpaySdk","_afterpaySdk","paymentId","payment_argument_invalid_error","dispatch","initializePayment","loadPaymentMethod","_displayModal","loadSettings","afterpay","remoteCheckout","settings","not_initialized_error","PaymentNotInitialized","orderPayload","paymentPayload","nonce","submitOrder","countryName","clientToken","countryCode","display","SCRIPTS_DEFAULT","SCRIPTS_US","AfterpayScriptLoader","_scriptLoader","testMode","scriptURI","_getScriptURI","loadScript","window","AfterPay","AmazonPayPaymentStrategy","_billingAddressActionCreator","_window","amazonOptions","amazon","_walletOptions","_paymentMethod","loadWidget","_createWallet","referenceId","_getOrderReferenceId","_b","request_error","_getMerchantId","merchantId","container","onError","onPaymentSelect","_c","onReady","document","getElementById","OffAmazonPayments","walletOptions","amazonOrderReferenceId","design","designMode","scope","sellerId","orderReference","_synchronizeBillingAddress","_updateOrderReference","widget","Widgets","Wallet","remote_checkout_synchronization_error","initializeBilling","remoteAddress","billing","address","internalBillingAddress","is_internal_address_equal","updateAddress","map_from_internal_address","updateCheckout","getAmazonOrderReferenceId","Overlay","_element","_createElement","show","parentElement","_registerClick","appendChild","setTimeout","style","opacity","remove","_unregisterClick","_removeAfterTransition","element","createElement","background","_d","transitionDuration","height","left","position","top","transition","width","zIndex","onClick","onClick_1","addEventListener","removeEventListener","handeTransition","event","propertyName","removeChild","PaymentMethodCancelledError","BraintreePaymentProcessor","_braintreeSDKCreator","_overlay","_threeDSecureOptions","threeDSecure","preloadPaypal","getPaypal","tokenizeCard","requestData","_mapToCreditCard","getClient","client","creditCards","paypal","amount","storeLanguage","currency","offerCredit","focusWindow","tokenize","enableShippingAddress","flow","useraction","verifyCard","addFrame","removeFrame","all","get3DS","cancelVerifyCard","verification","cancel","payment_method_cancelled_error","cancellable_promise","iframe","promise","appendSessionId","processedPayment","getDataCollector","deviceData","deviceSessionId","teardown","creditCard","streetAddress","address1","address2","cardholderName","ccName","number","ccNumber","cvv","ccCvv","expirationDate","ccExpiry","month","year","country","postalCode","endpoint","BraintreeCreditCardPaymentStrategy","_braintreePaymentProcessor","braintree","_is3dsEnabled","is3dsEnabled","_handleError","orderRequest","_preparePaymentData","_isUsingVaulting","card","shouldSaveInstrument","tokenizedCard","orderAmount","ChasePayEventType","BraintreePaypalPaymentStrategy","_credit","braintreeOptions","isBraintreeError","code","getGrandTotal","BraintreeVisaCheckoutPaymentStrategy","_checkoutActionCreator","_paymentStrategyActionCreator","_braintreeVisaCheckoutPaymentProcessor","_visaCheckoutScriptLoader","visaCheckoutOptions","braintreevisacheckout","initOptions","collectShipping","subtotal","currencyCode","visaCheckout","visaInitOptions","init","on","paymentSuccessPayload","_paymentInstrumentSelected","handleSuccess","loadCurrentCheckout","queueId","CardBrand","DigitalWalletType","chasepay_payment_strategy","ChasePayPaymentStrategy","_chasePayScriptLoader","_wepayRiskClient","_walletEvent$","_methodId","chasepay","walletButton","_walletButton","_handleWalletButtonClick","_configureWallet","_chasePayClient","_getPayment","_displayWallet","_createOrder","ChasePay","logoContainer","insertBrandings","color","containers","configure","language","CancelCheckout","onCancel","CompleteCheckout","_setSessionToken","sessionToken","showLoadingAnimation","startCheckout","digitalSessionId","subscribe","merchantRequestId","post","Accept","Content-Type","to_form_url_encoded","action","provider","getRiskToken","riskToken","paymentCryptogram","cryptogramId","eci","transactionId","btoa","reqTokenId","expDate","toString","substr","accountNum","accountMask","extraData","preventDefault","bind_decorator","CreditCardPaymentStrategy","googlepay_payment_strategy","GooglePayPaymentStrategy","_googlePayPaymentProcessor","_googlePayOptions","_getGooglePayOptions","cardInformation","displayWallet","statusCode","googlepaybraintree","googlepaystripe","card_information","KlarnaPaymentStrategy","_klarnaScriptLoader","klarnaCredit","_klarnaCredit","_unsubscribe","_loadWidget","_authorize","authorizationToken","authorization_token","klarna","onLoad","updateSessionData","_getUpdateSessionData","client_token","show_form","payment_method_invalid_error","billing_address","__mapToKlarnaAddress","email","shipping_address","street_address","city","given_name","firstName","family_name","lastName","postal_code","region","stateOrProvince","authorize","res","approved","KlarnaScriptLoader","Klarna","Credit","LegacyPaymentStrategy","masterpass_payment_strategy","MasterpassPaymentStrategy","_masterpassScriptLoader","masterpass","_masterpassClient","_createMasterpassPayload","checkoutId","allowedCardTypes","toFixed","cartId","suppressShippingAddress","callbackUrl","get_callback_url","NoPaymentDataRequiredPaymentStrategy","OfflinePaymentStrategy","OffsitePaymentStrategy","_shouldSubmitFullPayload","getPaymentStatus","payment_status_types","finalizeOrder","PaypalProPaymentStrategy","_isPaymentAcknowledged","PaypalExpressPaymentStrategy","_useRedirectFlow","paypalexpress","useRedirectFlow","_isInContextEnabled","loadPaypal","_paypalSdk","setup","button","environment","closeFlow","_isAcknowledgedOrFinalized","redirectUrl","getPaymentRedirectUrl","location","href","initXO","startFlow","SagePayPaymentStrategy","_formPoster","errors","postForm","three_ds_result","acs_url","PaReq","payer_auth_request","TermUrl","callback_url","MD","merchant_data","UnsupportedBrowserError","SquarePaymentStrategy","_syncPaymentMethod","createSquareForm","_paymentForm","_getFormOptions","build","_getNonceInstrument","_getCountryCode","toUpperCase","_deferredRequestNonce","timeout_error","requestCardNonce","deferred","squareOptions","square","_squareOptions","callbacks","cardNonceResponseReceived","cardData","billingContact","shippingContact","digital_wallet_type","none","_handleWalletNonceResponse","_handleCardNonceResponse","createPaymentRequest","_paymentRequestPayload","methodsSupported","methods","_showPaymentMethods","paymentFormLoaded","_setPostalCode","unsupportedBrowserDetected","unsupported_browser_error","_setExternalCheckoutData","requestShippingAddress","requestBillingInfo","total","label","storeName","String","pending","JSON","stringify","setPostalCode","masterpassBtn","elementId","SquareScriptLoader","SqPaymentForm","WepayRiskClient","_riskClient","WePay","risk","generate_risk_token","get_risk_token","WepayPaymentStrategy","orderActionCreator","paymentActionCreator","payloadWithToken","credit_card_payment_strategy","createPaymentStrategyRegistry","paymentClient","requestSender","registry","payment_strategy_registry","defaultToken","scriptLoader","script_loader_","billingAddressActionCreator","billing_address_action_creator","billing_address_request_sender","braintreePaymentProcessor","braintreeScriptLoader","braintree_script_loader","braintreeSDKCreator","braintree_sdk_creator","overlay","overlay_overlay","braintree_payment_processor","createBraintreePaymentProcessor","checkoutRequestSender","checkout_request_sender","checkoutValidator","checkout_validator","order_action_creator","order_request_sender","payment_action_creator","payment_request_sender","paymentMethodActionCreator","payment_method_action_creator","payment_method_request_sender","remoteCheckoutActionCreator","remote_checkout_action_creator","remote_checkout_request_sender","configActionCreator","config_action_creator","config_request_sender","checkoutActionCreator","checkout_action_creator","paymentStrategyActionCreator","payment_strategy_action_creator","register","AFTERPAY","afterpay_payment_strategy","afterpay_script_loader","AMAZON","amazon_pay_payment_strategy","amazon_pay_script_loader","KLARNA","klarna_payment_strategy","klarna_script_loader","legacy_payment_strategy","offline_payment_strategy","offsite_payment_strategy","PAYPAL","paypal_pro_payment_strategy","PAYPAL_EXPRESS","paypal_express_payment_strategy","paypal_script_loader","PAYPAL_EXPRESS_CREDIT","SAGE_PAY","sage_pay_payment_strategy","form_poster_","SQUARE","square_payment_strategy","square_script_loader","no_payment_data_required_strategy","BRAINTREE","braintree_credit_card_payment_strategy","BRAINTREE_PAYPAL","braintree_paypal_payment_strategy","BRAINTREE_PAYPAL_CREDIT","BRAINTREE_VISA_CHECKOUT","braintree_visacheckout_payment_strategy","create_braintree_visacheckout_payment_processor","visacheckout_script_loader","CHASE_PAY","chasepay_script_loader","wepay_risk_client","BRAINTREE_GOOGLE_PAY","create_googlepay_payment_processor","googlepay_braintree_initializer","WE_PAY","wepay_payment_strategy","MASTERPASS","masterpass_script_loader","STRIPE_GOOGLE_PAY","googlepay_stripe_initializer","InstrumentActionCreator","_instrumentRequestSender","loadInstruments","instrument_actions","LoadInstrumentsRequested","session","_getSessionContext","_getCurrentAccessToken","_getShippingAddress","_getValidAccessToken","currentToken","LoadInstrumentsSucceeded","LoadInstrumentsFailed","deleteInstrument","DeleteInstrumentRequested","DeleteInstrumentSucceeded","DeleteInstrumentFailed","_isValidVaultAccessToken","date","newDate","valueOf","Date","now","isFuture","vaultAccessExpiry","getTime","setMinutes","getMinutes","getVaultAccessToken","getCart","customerId","storeId","InstrumentResponseTransformer","transformResponse","vaultedInstruments","_transformVaultedInstruments","vaulted_instruments","transformErrorResponse","transformVaultAccessResponse","expires_at","map","bigpayToken","bigpay_token","defaultInstrument","default_instrument","iin","last4","last_4","expiryMonth","expiry_month","expiryYear","expiry_year","brand","trustedShippingAddress","trusted_shipping_address","InstrumentRequestSender","_transformer","instrument_response_transformer","requestContext","_loadInstrumentsWithAddress","_loadInstruments","deleteShopperInstrument","errorResponse","loadInstrumentsWithAddress","checkout_store_selector","CheckoutStoreSelector","selectors","_billingAddress","_cart","_checkout","_consignments","_countries","countries","_coupons","_customer","_form","form","_giftCertificates","_instruments","_order","_payment","_paymentMethods","_shippingAddress","_shippingCountries","shippingCountries","getConfig","context","company","stateOrProvinceCode","phone","customFields","getShippingOptions","length","availableShippingOptions","getSelectedShippingOption","selectedShippingOption","getShippingCountries","getBillingCountries","getCountries","getPaymentMethods","getSelectedPaymentMethod","getCoupons","getGiftCertificates","isPaymentDataSubmitted","getInstruments","getBillingAddressFields","getShippingAddressFields","selector_decorator","checkout_store_error_selector","CheckoutStoreErrorSelector","_customerStrategies","customerStrategies","_paymentStrategies","_shippingStrategies","shippingStrategies","getError","getLoadCheckoutError","getSubmitOrderError","getFinalizeOrderError","getLoadOrderError","getLoadCartError","getLoadBillingCountriesError","getLoadShippingCountriesError","getLoadPaymentMethodsError","getLoadPaymentMethodError","getInitializePaymentError","getLoadShippingOptionsError","getSelectShippingOptionError","getSignInError","getSignOutError","getInitializeCustomerError","getUpdateShippingAddressError","getUpdateBillingAddressError","getContinueAsGuestError","getUpdateConsignmentError","getCreateConsignmentsError","getDeleteConsignmentError","getInitializeShippingError","getApplyCouponError","getRemoveCouponError","getApplyGiftCertificateError","getRemoveGiftCertificateError","getLoadInstrumentsError","getDeleteInstrumentError","getLoadConfigError","getLoadError","getUpdateCheckoutError","getUpdateError","getExecuteError","getFinalizeError","getLoadMethodError","getInitializeError","consignmentId","getSelectOptionError","getUpdateShippingOptionError","getUpdateAddressError","getDeleteError","getCreateError","getApplyError","getRemoveError","checkout_store_status_selector","CheckoutStoreStatusSelector","isPending","isLoadingCheckout","isSubmittingOrder","isFinalizingOrder","isLoadingOrder","isLoadingCart","isLoadingBillingCountries","isLoadingShippingCountries","isLoadingPaymentMethods","isLoadingPaymentMethod","isInitializingPayment","isLoadingShippingOptions","isSelectingShippingOption","isSigningIn","isSigningOut","isInitializingCustomer","isUpdatingBillingAddress","isContinuingAsGuest","isUpdatingShippingAddress","isUpdatingConsignment","isCreatingConsignments","isDeletingConsignment","isInitializingShipping","isApplyingCoupon","isRemovingCoupon","isApplyingGiftCertificate","isRemovingGiftCertificate","isLoadingInstruments","isDeletingInstrument","isLoadingConfig","isCustomerStepPending","isPaymentStepPending","isLoading","isUpdatingCheckout","isUpdating","isExecuting","isFinalizing","isLoadingMethod","isInitializing","isSelectingOption","isUpdatingShippingOption","isUpdatingAddress","isDeleting","isCreating","isApplying","isRemoving","isWidgetInteracting","createCheckoutSelectors","statuses","ErrorMessageTransformer","_messageCustomizer","transform","to_single_line","CheckoutService","_configActionCreator","_consignmentActionCreator","_countryActionCreator","_couponActionCreator","_customerStrategyActionCreator","_errorActionCreator","_giftCertificateActionCreator","_instrumentActionCreator","_shippingCountryActionCreator","_shippingStrategyActionCreator","isDevelopment","_state","_errorTransformer","get_environment","error_message_transformer","isCheckoutServiceError","CustomerNotInitialized","ShippingNotInitialized","notifyState","subscriber","filters","_i","arguments","apply","concat","filter","_dispatch","loadDefaultCheckout","loadOrder","loadCheckoutAction","loadConfigAction","loadConfig","finalizeOrderIfNeeded","loadPaymentMethods","deinitializePayment","loadBillingCountries","loadShippingCountries","loadBillingAddressFields","loadShippingAddressFields","initializeCustomer","deinitializeCustomer","continueAsGuest","credentials","signInCustomer","signIn","signOutCustomer","signOut","loadShippingOptions","initializeShipping","deinitializeShipping","selectShippingOption","shippingOptionId","selectOption","updateShippingAddress","createConsignments","deleteConsignment","updateConsignment","consignment","assignItemsToAddress","assignItemsByAddress","unassignItemsToAddress","unassignItemsByAddress","selectConsignmentShippingOption","updateShippingOption","updateBillingAddress","applyCoupon","removeCoupon","applyGiftCertificate","removeGiftCertificate","createCheckoutService","protocol","get_default_logger","warn","externalSource","shouldWarnMutation","request_sender_","host","create_checkout_store","bigpay_client_","setHost","bigpayBaseUrl","createPaymentClient","orderRequestSender","checkout_service","consignment_action_creator","consignment_request_sender","country_action_creator","country_request_sender","coupon_action_creator","coupon_request_sender","customer_strategy_action_creator","create_customer_strategy_registry","error_action_creator","gift_certificate_action_creator","gift_certificate_request_sender","instrument_action_creator","instrument_request_sender","shipping_country_action_creator","shipping_country_request_sender","shipping_strategy_action_creator","create_shipping_strategy_registry","DEFAULT_RESPONSE","RequestError","ConfigActionType","selectorDecorator","target","decoratedTarget","class_1","getOwnPropertyNames","forEach","descriptor","getOwnPropertyDescriptor","resolver","_utility__WEBPACK_IMPORTED_MODULE_2__","memoizedMethod","lodash__WEBPACK_IMPORTED_MODULE_1__","args","getKey","_utility__WEBPACK_IMPORTED_MODULE_3__","cachedValue","getUsedCount","newValue","_utility__WEBPACK_IMPORTED_MODULE_4__","keyFilter","_utility__WEBPACK_IMPORTED_MODULE_5__","cache","set","selectorMethodDecorator","ContentType","CountryActionType","ShippingCountryActionType","ACKNOWLEDGE","FINALIZE","DEFAULT_STATE","clearErrorReducer","_utility__WEBPACK_IMPORTED_MODULE_0__","_error_actions__WEBPACK_IMPORTED_MODULE_1__","isClearErrorAction","objectA","objectB","Array","isArray","index","length_1","isArrayEqual","isDateEqual","RegExp","isRegExpEqual","keysA","keys","keysB","length_2","isObjectEqual","CustomerActionType","PaymentActionType","InvalidArgumentError","HOSTED","AmountTransformer","_dp","toInteger","Math","floor","pow","isIframeEvent","checkout_button_error_selector","CheckoutButtonErrorSelector","_checkoutButton","checkoutButton","getInitializeButtonError","getDeinitializeButtonError","getDeinitializeError","checkout_button_status_selector","CheckoutButtonStatusSelector","isInitializingButton","isDeinitializingButton","isDeinitializing","createCheckoutButtonSelectors","CheckoutButtonMethodType","CheckoutButtonInitializer","_buttonStrategyActionCreator","initializeButton","containerIds","containerId","test","selector","idPrefix","querySelectorAll","slice","setUniqueElementId","deinitializeButton","CheckoutButtonStrategyActionCreator","_registry","checkout_button_actions","InitializeButtonRequested","useCache","InitializeButtonSucceeded","InitializeButtonFailed","DeinitializeButtonRequested","DeinitializeButtonSucceeded","DeinitializeButtonFailed","checkout_button_method_type","BraintreePaypalButtonStrategy","_paypalScriptLoader","_offerCredit","paypalOptions","braintreepaypalcredit","braintreepaypal","getPaypalCheckout","paypalCheckout","_paypalCheckout","allowedSources","disallowedSources","allowCredit","push","FUNDING","CREDIT","Button","render","env","commit","shouldProcessPayment","funding","allowed","disallowed","shape","_setupPayment","onPaymentError","onAuthorize","_tokenizePayment","onAuthorizeError","addresses","CheckoutButtonNotInitialized","createPayment","shippingAddressEditable","shippingAddressOverride","_mapToBraintreeAddress","tokenizePayment","payment_type","device_data","_mapToLegacyShippingAddress","_mapToLegacyBillingAddress","details","recipientName","split","first_name","last_name","phone_number","address_line_1","line1","address_line_2","line2","country_code","googlepay_button_strategy","GooglePayButtonStrategy","_getMethodId","_createSignInButton","parentNode","googlePayButton","createButton","_onPaymentSelectComplete","_onError","masterpass_button_strategy","MasterpassButtonStrategy","_signInButton","buttonContainer","src","cartAmount","PaypalButtonStrategy","_host","clientId","actions","X-API-INTERNAL","internal_api_headers","paymentID","payerID","payerId","payerInfo","payer","payer_info","createCheckoutButtonInitializer","formPoster","checkout_button_initializer","checkout_button_strategy_action_creator","braintree_paypal_button_strategy","GOOGLEPAY_BRAINTREE","GOOGLEPAY_STRIPE","PAYPALEXPRESS","paypal_button_strategy","createCheckoutButtonRegistry","CheckoutIncludes","mapToInternalLineItems","_map_gift_certificate_to_internal_line_item__WEBPACK_IMPORTED_MODULE_0__","_map_to_internal_line_item__WEBPACK_IMPORTED_MODULE_1__","itemMap","decimalPlaces","idKey","reduce","result","item","mapToInternalLineItemType","throwErrorAction","_bigcommerce_data_store__WEBPACK_IMPORTED_MODULE_0__","rxjs__WEBPACK_IMPORTED_MODULE_1__","PaymentMethodInvalidError","_is_equal__WEBPACK_IMPORTED_MODULE_0__","CacheKeyResolver","_lastId","_maps","_resolveMap","parentMaps","cacheKey","usedCount","_generateKey","isMatched","parentMaps_1","maps","bindDecorator","bindMethodDecorator","bindClassDecorator","boundMethod","_common_url__WEBPACK_IMPORTED_MODULE_0__","IframeEventPoster","targetOrigin","_targetWindow","_targetOrigin","origin","postMessage","setTarget","createActionTransformer","requestErrorFactory","action$","rxjs_operators__WEBPACK_IMPORTED_MODULE_2__","every","isResponse","detail","createError","CheckoutSelector","storeCredit","max","loadError","updateError","_common_selector__WEBPACK_IMPORTED_MODULE_1__","checkoutReducer","_bigcommerce_data_store__WEBPACK_IMPORTED_MODULE_1__","dataReducer","errorsReducer","_common_error__WEBPACK_IMPORTED_MODULE_4__","statusesReducer","reducer","_checkout_actions__WEBPACK_IMPORTED_MODULE_9__","LoadCheckoutSucceeded","UpdateCheckoutSucceeded","_billing__WEBPACK_IMPORTED_MODULE_3__","UpdateBillingAddressSucceeded","_coupon__WEBPACK_IMPORTED_MODULE_5__","ApplyCouponSucceeded","RemoveCouponSucceeded","_shipping__WEBPACK_IMPORTED_MODULE_8__","CreateConsignmentsSucceeded","UpdateConsignmentSucceeded","DeleteConsignmentSucceeded","UpdateShippingOptionSucceeded","_coupon__WEBPACK_IMPORTED_MODULE_6__","ApplyGiftCertificateSucceeded","RemoveGiftCertificateSucceeded","lodash__WEBPACK_IMPORTED_MODULE_2__","_order__WEBPACK_IMPORTED_MODULE_7__","SubmitOrderSucceeded","LoadCheckoutRequested","LoadCheckoutFailed","UpdateCheckoutRequested","UpdateCheckoutFailed","mapGiftCertificateToInternalLineItem","___WEBPACK_IMPORTED_MODULE_0__","amountTransformer","imageUrl","amountAfterDiscount","discount","integerAmount","integerAmountAfterDiscount","integerDiscount","quantity","sender","recipient","attributes","variantId","mapToInternalLineItem","_amount_transformer__WEBPACK_IMPORTED_MODULE_0__","extendedListPrice","extendedSalePrice","discountAmount","downloadsPageUrl","downloadPageUrl","categoryNames","productId","option","addedByPromotion","billing_address_selector","BillingAddressSelector","continueAsGuestError","config_selector","ConfigSelector","getExternalSource","form_selector","FormSelector","selectedCountry","formFields","shippingAddressFields","field","_processField","billingAddressFields","_processCountry","_processProvince","_processsPostCode","items","default","fieldType","itemtype","subdivisions","required","hasPostalCodes","country_selector","CountrySelector","payment_selector","PaymentSelector","internalPayment","_getInternalPayment","_getHostedPayment","_getGatewayPayment","replace","step","payments","providerType","payment_method_selector","PaymentMethodSelector","loadMethodId","loadMethodError","payment_strategy_selector","PaymentStrategySelector","payment_strategy_state","initializeMethodId","initializeError","executeMethodId","executeError","finalizeMethodId","finalizeError","getWidgetInteractingError","widgetInteractionMethodId","widgetInteractionError","InstrumentSelector","failedInstrument","deleteError","deletingInstrument","remote_checkout_selector","RemoteCheckoutSelector","_remoteCheckout","createInternalCheckoutSelectors","cart_selector","checkout_button_selector","coupon_selector","customer_selector","customer_strategy_selector","gift_certificate_selector","instrument_selector","shipping_address_selector","shipping_country_selector","shipping_strategy_selector","consignment_selector","checkout_selector","order_selector","create_freeze_proxy","setPrototypeOf","__proto__","isPrivate","indexOf","omitDeep","lodash__WEBPACK_IMPORTED_MODULE_0__","predicate","ErrorActionType","PaymentMethodActionCreator","rxjs__WEBPACK_IMPORTED_MODULE_2__","_payment_method_actions__WEBPACK_IMPORTED_MODULE_4__","LoadPaymentMethodsRequested","sessionHash","LoadPaymentMethodsSucceeded","LoadPaymentMethodsFailed","LoadPaymentMethodRequested","LoadPaymentMethodSucceeded","LoadPaymentMethodFailed","_common_action__WEBPACK_IMPORTED_MODULE_3__","_common_http_request__WEBPACK_IMPORTED_MODULE_0__","_common_http_request__WEBPACK_IMPORTED_MODULE_1__","PaymentMethodRequestSender","JsonV1","url","EmbeddedContentEventType","IframeEventListener","sourceOrigin","_sourceOrigin","_common_url__WEBPACK_IMPORTED_MODULE_1__","_isListening","_listeners","listen","_handleMessage","stopListen","addListener","listener","listeners","removeListener","splice","trigger","_is_iframe_event__WEBPACK_IMPORTED_MODULE_3__","_common_utility__WEBPACK_IMPORTED_MODULE_2__","INTERNAL_USE_ONLY","CheckoutButtonSelector","initializedContainers","deinitializeError","_common_selector__WEBPACK_IMPORTED_MODULE_2__","DEFAULT_DATA_STATE","DEFAULT_ERROR_STATE","DEFAULT_STATUS_STATE","checkoutButtonReducer","_checkout_button_actions__WEBPACK_IMPORTED_MODULE_2__","NotEmbeddableErrorType","BrowserStorage","_namespace","getItem","rawValue","external_local_storage_fallback_default","a","withNamespace","parse","removeItem","getItemOnce","setItem","InvalidLoginTokenError","title","NotEmbeddableError","UnknownError","EmbeddedCheckout","_iframeCreator","_messageListener","_messagePoster","_loadingIndicator","_storage","_location","_options","_isAttached","onComplete","embedded_checkout_events","CheckoutComplete","CheckoutError","CheckoutLoaded","onFrameLoad","FrameLoaded","onSignOut","SignedOut","_configureStyles","attach","_allowCookie","_attemptLogin","createFrame","_iframe","hide","_retryAllowCookie","FrameError","detach","iFrameResizer","close","contentWindow","styles","embedded_content_events","StyleConfigured","parse_url","pathname","invalid_login_token_error","encodeURIComponent","visibility","not_embeddable_error","MissingContent","DEFAULT_STYLES","size","backgroundColor","ROTATION_ANIMATION","LoadingIndicator","_styles","_defineAnimation","_container","_buildContainer","_indicator","_buildIndicator","parentId","parent_1","handleTransitionEnd","bottom","right","indicator","borderRadius","border","borderColor","margin","transformStyle","animation","head","sheet","CSSStyleSheet","insertRule","ResizableIframeCreator","MissingContainer","allowPaymentRequest","_toResizableFrame","timeoutInterval","handleMessage","is_iframe_event","contentId","iframes","external_iframe_resizer_","scrolling","sizeWidth","heightCalculationMethod","clearTimeout","STORAGE_PREFIX","embedCheckout","embedded_checkout","resizable_iframe_creator","iframe_event_listener","iframe_event_poster","loading_indicator","loadingIndicator","browser_storage","mapToInternalCart","promotions","notifications","amount_transformer","map_to_internal_line_items","lineItems","coupon","discountedAmount","sum","map_to_internal_coupon","discountNotifications","promotion","banners","banner","placeholders","discountType","messageHtml","text","giftCertificate","totalDiscountedAmount","certificate","used","appliedGiftCertificates","map_to_internal_gift_certificate","shipping","shippingCostTotal","amountBeforeDiscount","shippingCostBeforeDiscount","integerAmountBeforeDiscount","physicalItems","lineItem","isShippingRequired","taxSubtotal","taxTotal","taxes","handling","handlingCostTotal","CheckoutActionCreator","_checkout_actions__WEBPACK_IMPORTED_MODULE_7__","rxjs_operators__WEBPACK_IMPORTED_MODULE_3__","_common_error_errors__WEBPACK_IMPORTED_MODULE_5__","_common_error_errors__WEBPACK_IMPORTED_MODULE_6__","ConsignmentActionCreator","_consignmentRequestSender","_common_error_errors__WEBPACK_IMPORTED_MODULE_4__","existingConsignment","getConsignmentByAddress","_removeLineItems","_createOrUpdateConsignment","_addLineItems","consignmentUpdateBody","consignmentMeta","_consignment_actions__WEBPACK_IMPORTED_MODULE_6__","UpdateShippingOptionRequested","UpdateShippingOptionFailed","LoadShippingOptionsRequested","params","include","_checkout_checkout_params__WEBPACK_IMPORTED_MODULE_3__","AvailableShippingOptions","LoadShippingOptionsSucceeded","LoadShippingOptionsFailed","_getConsignmentRequestBody","CreateConsignmentsRequested","CreateConsignmentsFailed","UpdateConsignmentRequested","UpdateConsignmentFailed","DeleteConsignmentRequested","DeleteConsignmentFailed","_isUpdateConsignmentRequest","itemId","_hydrateLineItems","lineItemIds","existingItem","sharedItem","find","DEFAULT_PARAMS","ConsignmentRequestSender","put","delete","mapToInternalShippingOption","isSelected","description","price","cost","selected","isRecommended","transitTime","UnrecoverableError","joinErrors","map_from_payment_error_response_joinErrors","PAYMENT_ERROR_CODES","RequestErrorFactory","_factoryMethods","mapFromInternalErrorResponse","mapFromStorefrontErrorResponse","mapFromPaymentErrorResponse","factoryMethod","_getType","_isStorefrontErrorResponseBody","_isInternalErrorResponseBody","internalType","storefrontErrorResponse","internalErrorResponse","billingAddressReducer","clear_error_reducer","billing_address_actions","ContinueAsGuestSucceeded","checkout_actions","order_actions","LoadOrderSucceeded","UpdateBillingAddressRequested","UpdateBillingAddressFailed","ContinueAsGuestRequested","ContinueAsGuestFailed","config_reducer_DEFAULT_STATE","configReducer","config_reducer_dataReducer","config_reducer_errorsReducer","config_reducer_statusesReducer","config_actions","LoadConfigSucceeded","LoadConfigFailed","LoadConfigRequested","country_reducer_DEFAULT_STATE","countryReducer","country_reducer_dataReducer","country_reducer_errorsReducer","country_reducer_statusesReducer","paymentReducer","payment_reducer_dataReducer","payment_method_reducer_DEFAULT_STATE","paymentMethodReducer","payment_method_reducer_dataReducer","payment_method_reducer_errorsReducer","metaReducer","payment_method_reducer_statusesReducer","payment_method_actions","merge_or_push","paymentStrategyReducer","payment_strategy_reducer_dataReducer","payment_strategy_reducer_errorsReducer","payment_strategy_reducer_statusesReducer","deinitializeMethodId","instrument_reducer_DEFAULT_STATE","instrumentReducer","instrument_reducer_dataReducer","instrument_reducer_errorsReducer","instrument_reducer_metaReducer","instrument_reducer_statusesReducer","remote_checkout_reducer_DEFAULT_STATE","remoteCheckoutReducer","remote_checkout_reducer_dataReducer","remote_checkout_actions","InitializeRemoteBillingSucceeded","InitializeRemoteShippingSucceeded","LoadRemoteSettingsSucceeded","UpdateRemoteCheckout","createCheckoutStore","initialState","factory","actionTransformer","create_action_transformer","request_error_factory","unrecoverable_error","cart_reducer","checkout_reducer","checkout_button_reducer","consignment_reducer","coupon_reducer","customer_reducer","customer_strategy_reducer","gift_certificate_reducer","order_reducer","shipping_country_reducer","shipping_strategy_reducer","stateTransformer","create_internal_checkout_selectors","CheckoutNotAvailableError","checkout_request_sender_CheckoutRequestSender","CheckoutRequestSender","content_type","join_includes","checkout_default_includes","checkout_not_available_error","isAddressEqual","addressA","addressB","normalize","_common_error_errors__WEBPACK_IMPORTED_MODULE_0__","BraintreeScriptLoader","loadClient","load3DS","loadDataCollector","dataCollector","loadPaypalCheckout","loadVisaCheckout","loadGooglePayment","googlePayment","BraintreeSDKCreator","_braintreeScriptLoader","_dataCollectors","_clientToken","_common_error_errors__WEBPACK_IMPORTED_MODULE_1__","authorization","_paypal","_3ds","cached","kount","getVisaCheckout","_visaCheckout","getGooglePaymentComponent","_googlePay","_teardown","mod","mapToInternalCoupon","couponTypes","displayName","couponType","mapToInternalAddress","addressId","isBillingAddressLike","addressLine1","addressLine2","province","provinceCode","postCode","joinIncludes","includes","NotInitializedErrorType","NotInitializedError","parseUrl","_error_errors__WEBPACK_IMPORTED_MODULE_0__","anchor","hash","hostname","port","search","cachableActionDecorator","memoizedMethods","WeakMap","decorateMethod","param","lastArg","fn","instanceMethods","cache_key_resolver","createFreezeProxies","createFreezeProxy","trap","proxy","iteratee","getPrototypeOf","traversePrototypeOf","charAt","createProxy","_customer_strategy_actions__WEBPACK_IMPORTED_MODULE_2__","CustomerStrategyActionCreator","SignInRequested","SignInSucceeded","SignInFailed","SignOutRequested","SignOutSucceeded","SignOutFailed","_common_error__WEBPACK_IMPORTED_MODULE_3__","_customer_actions__WEBPACK_IMPORTED_MODULE_4__","CustomerActionCreator","_customerRequestSender","SignInCustomerRequested","SignInCustomerSucceeded","SignInCustomerFailed","SignOutCustomerRequested","SignOutCustomerSucceeded","SignOutCustomerFailed","CustomerRequestSender","CartSelector","CouponSelector","_coupon","removeCouponError","applyCouponError","CustomerSelector","CustomerStrategySelector","signInMethodId","signInError","signOutMethodId","signOutError","getWidgetInteractionError","GiftCertificateSelector","_giftCertificate","removeGiftCertificateError","applyGiftCertificateError","ShippingAddressSelector","ShippingCountrySelector","ShippingStrategySelector","updateAddressMethodId","updateAddressError","selectOptionMethodId","selectOptionError","ConsignmentSelector","getConsignmentById","_address__WEBPACK_IMPORTED_MODULE_2__","loadShippingOptionsError","getUnassignedItems","assignedLineItemIds","itemIds","getItemAssignmentError","updateShippingOptionError","isAssigningItems","_common_selector__WEBPACK_IMPORTED_MODULE_3__","OrderSelector","cartReducer","_billing_billing_address_actions__WEBPACK_IMPORTED_MODULE_2__","_checkout__WEBPACK_IMPORTED_MODULE_3__","_shipping_consignment_actions__WEBPACK_IMPORTED_MODULE_7__","_coupon_coupon_actions__WEBPACK_IMPORTED_MODULE_5__","_coupon_gift_certificate_actions__WEBPACK_IMPORTED_MODULE_6__","consignmentReducer","_checkout__WEBPACK_IMPORTED_MODULE_2__","_coupon__WEBPACK_IMPORTED_MODULE_4__","_customer__WEBPACK_IMPORTED_MODULE_5__","couponReducer","_coupon_actions__WEBPACK_IMPORTED_MODULE_5__","_order__WEBPACK_IMPORTED_MODULE_4__","ApplyCouponRequested","ApplyCouponFailed","RemoveCouponRequested","RemoveCouponFailed","customerReducer","giftCertificateReducer","_shipping_consignment_actions__WEBPACK_IMPORTED_MODULE_4__","_gift_certificate_actions__WEBPACK_IMPORTED_MODULE_6__","ApplyGiftCertificateRequested","ApplyGiftCertificateFailed","RemoveGiftCertificateRequested","RemoveGiftCertificateFailed","orderReducer","_order_actions__WEBPACK_IMPORTED_MODULE_4__","LoadOrderPaymentsSucceeded","FinalizeOrderSucceeded","orderToken","LoadOrderRequested","LoadOrderPaymentsRequested","LoadOrderFailed","LoadOrderPaymentsFailed","mergeOrPush","array","newArray","shippingCountryReducer","_common_error__WEBPACK_IMPORTED_MODULE_2__","_shipping_country_actions__WEBPACK_IMPORTED_MODULE_3__","LoadShippingCountriesSucceeded","LoadShippingCountriesRequested","LoadShippingCountriesFailed","mapToInternalCustomer","_address__WEBPACK_IMPORTED_MODULE_0__","isGuest","fullName","mapToInternalGiftCertificate","remainingBalance","remaining","balance","purchaseDate","mapToInternalOrder","_cart__WEBPACK_IMPORTED_MODULE_1__","_cart__WEBPACK_IMPORTED_MODULE_2__","_coupon__WEBPACK_IMPORTED_MODULE_3__","customerCanBeCreated","mapToInteralOrderPayment","baseAmount","socialData","mapToInternalSocialDataList","hasDigitalItems","isDownloadable","isComplete","mapToStoreCredit","orderAmountAsInteger","mapToInternalPaymentStatus","isDefaultOrderPayment","helpText","instructions","returnUrl","socialDataObject","digitalItems","socialMedia","image","link","shareText","sharingLink","channelName","channel","channelCode","shippingStrategyReducer","shipping_strategy_actions","UpdateAddressRequested","UpdateAddressSucceeded","UpdateAddressFailed","SelectOptionRequested","SelectOptionSucceeded","SelectOptionFailed","customerStrategyReducer","customer_strategy_actions","getCallbackUrl","omitPrivate","_is_private__WEBPACK_IMPORTED_MODULE_0__","_omit_deep__WEBPACK_IMPORTED_MODULE_1__","getEnvironment","process","NODE_ENV","e","OrderRequestSender","OrderActionCreator","_orderRequestSender","_order_actions__WEBPACK_IMPORTED_MODULE_6__","_getCurrentOrderId","SubmitOrderRequested","_mapToOrderRequestBody","customerMessage","SubmitOrderFailed","FinalizeOrderRequested","FinalizeOrderFailed","CartComparator","cartA","cartB","_normalize","sort","itemA","itemB","localeCompare","giftWrapping","toSingleLine","input","line","trim","_common_error_errors__WEBPACK_IMPORTED_MODULE_2__","_coupon_actions__WEBPACK_IMPORTED_MODULE_3__","CouponActionCreator","_couponRequestSender","_checkout__WEBPACK_IMPORTED_MODULE_0__","_checkout__WEBPACK_IMPORTED_MODULE_1__","_common_http_request__WEBPACK_IMPORTED_MODULE_2__","_common_http_request__WEBPACK_IMPORTED_MODULE_3__","CouponRequestSender","couponCode","_gift_certificate_actions__WEBPACK_IMPORTED_MODULE_3__","GiftCertificateActionCreator","_giftCertificateRequestSender","GiftCertificateRequestSender","giftCertificateCode","CancellablePromise","cancellable","race","isInternalAddressEqual","ignoredKeys","mapFromInternalAddress","_shipping_country_actions__WEBPACK_IMPORTED_MODULE_2__","ShippingCountryActionCreator","_shippingCountryRequestSender","ShippingCountryRequestSender","ShippingStrategyActionCreator","_shipping_strategy_actions__WEBPACK_IMPORTED_MODULE_3__","mergedOptions","NotImplementedError","AmazonPayCustomerStrategy","_remoteCheckoutRequestSender","not_implemented_error","useAmazonAddressBook","_handleAuthorization","generateToken","Login","popup","tokenPrefix","trackAuthorizationEvent","BraintreeVisaCheckoutCustomerStrategy","_buttonClassName","signInButton","buttonClass","querySelector","_insertVisaCheckoutButton","visaCheckoutButton","className","innerHTML","ChasePayCustomerStrategy","chasePayOptions","JPMC","isChasePayUp","insertButtons","EventType","START_CHECKOUT","sessionId","COMPLETE_CHECKOUT","requestId","_reloadPage","sendRequest","fromChasePay","DefaultCustomerStrategy","_customerActionCreator","googlepay_customer_strategy","GooglePayCustomerStrategy","googlePayOptions","MasterpassCustomerStrategy","masterpassOptions","Masterpass","SquareCustomerStrategy","createCustomerStrategyRegistry","remoteCheckoutRequestSender","amazon_pay_customer_strategy","braintree_visacheckout_customer_strategy","chasepay_customer_strategy","square_customer_strategy","masterpass_customer_strategy","default_customer_strategy","customer_action_creator","customer_request_sender","AmazonPayShippingStrategy","_createAddressBook","optionId","onAddressSelect","AddressBook","_synchronizeShippingAddress","DefaultShippingStrategy","createShippingStrategyRegistry","consignmentRequestSender","consignmentActionCreator","amazon_pay_shipping_strategy","default_shipping_strategy","TimeoutError","ConfigActionCreator","_configRequestSender","_config_actions__WEBPACK_IMPORTED_MODULE_4__","ConfigRequestSender","BillingAddressActionCreator","_common_error_errors__WEBPACK_IMPORTED_MODULE_3__","billingAddressRequestBody","existingBillingAddressRequestBody","_billing_address_actions__WEBPACK_IMPORTED_MODULE_5__","_createOrUpdateBillingAddress","createAddress","BillingAddressRequestSender","Registry","_factories","_instances","_getInstance","_error_errors__WEBPACK_IMPORTED_MODULE_1__","_hasInstance","toFormUrlEncoded","MasterpassScriptLoader","RemoteCheckoutSynchronizationError","GooglePayBraintreeInitializer","hasShippingAddress","googleBraintreePaymentInstance","_googlePaymentInstance","_createGooglePayPayload","parseResponse","paymentMethodData","tokenizationData","androidPayCards","cardType","lastFour","lastTwo","binData","platformToken","googlePayBraintreePaymentDataRequest","merchantInfo","authJwt","merchantName","googleMerchantName","googleMerchantId","transactionInfo","totalPriceStatus","totalPrice","cardRequirements","billingAddressRequired","billingAddressFormat","shippingAddressRequired","emailRequired","phoneNumberRequired","_mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2","createPaymentDataRequest","googlePayBraintreeDataRequestV1","apiVersion","apiVersionMinor","allowedPaymentMethods","parameters","allowedAuthMethods","allowedCardNetworks","billingAddressParameters","format","tokenizationSpecification","braintree:apiVersion","braintree:authorizationFingerprint","paymentMethodTokenizationParameters","braintree:merchantId","braintree:sdkVersion","shippingAddressParameters","GooglePayStripeInitializer","_mapGooglePayStripeDataRequestToGooglePayDataRequestV2","err","stripe:version","stripeVersion","stripe:publishableKey","stripePublishableKey","PaypalScriptLoader","handleFrameLoadedEvent","hasAttribute","setAttribute","isCustomError","IframeEmbeddedCheckoutMessenger","_untargetedMessagePoster","_messageHandlers","postComplete","_postMessage","postError","_transformError","postFrameError","untargeted","postFrameLoaded","postLoaded","postSignedOut","receiveStyles","handler","_notifyMessageHandlers","NoopEmbeddedCheckoutMessenger","createEmbeddedCheckoutMessenger","parentWindow","parent","noop_embedded_checkout_messenger","iframe_embedded_checkout_messenger","parentOrigin","LanguageService","_logger","_transformConfig","locales","translations","_locale","_locales","_translations","_formatters","mapKeys","translationKey","KEY_PREFIX","getLocale","_hasTranslations","translate","prefixedKey","messageFormat","external_messageformat_","compile","_transformData","output","defaultTranslations","_flattenObject","parentKey","resultKey","createLanguageService","language_service","CurrencyFormatter","currencySettings","symbolLocation","symbol","thousandsSeparator","decimalSeparator","_decimalPlaces","parseInt","_symbolLocation","_symbol","_thousandsSeparator","_decimalSeparator","formattedNumber","_formatNumber","formattedCurrency","_formatCurrency","positiveAmount","abs","_toFixed","decimalAmount","parsedIntegerAmount","toLowerCase","precision","round","CurrencyService","_storeConfig","_customerFormatter","currency_formatter","shopperCurrency","_storeFormatter","toCustomerCurrency","exchangeRate","toStoreCurrency","createCurrencyService","currency_service","checkout_buttons","ButtonType","ButtonColor","GooglePayPaymentProcessor","_googlePayScriptLoader","_googlePayInitializer","_consigmentActionCreator","buttonType","buttonColor","Short","Default","_googlePayClient","loadPaymentData","_getPaymentDataRequest","_postForm","_updateBillingAddress","_mapGooglePayAddressToShippingAddress","googlePay","paymentDataRequest","_getGooglePayClient","_paymentDataRequest","isReadyToPay","_getCardInformation","google","api","PaymentsClient","_mapGooglePayAddressToBillingAddress","info","companyName","address3","locality","administrativeArea","phoneNumber","postPaymentData","remoteBillingAddress","googlePayAddressMapped","GooglePayScriptLoader","createGooglePayPaymentProcessor","initializer","googlepay_payment_processor","googlepay_script_loader","RemoteCheckoutRequestSender","methodName","_remote_checkout_actions__WEBPACK_IMPORTED_MODULE_2__","RemoteCheckoutActionCreator","InitializeRemoteBillingRequested","InitializeRemoteBillingFailed","InitializeRemoteShippingRequested","InitializeRemoteShippingFailed","InitializeRemotePaymentRequested","InitializeRemotePaymentSucceeded","InitializeRemotePaymentFailed","LoadRemoteSettingsRequested","LoadRemoteSettingsFailed","SignOutRemoteCustomerRequested","SignOutRemoteCustomerSucceeded","SignOutRemoteCustomerFailed","AmazonPayScriptLoader","onPaymentReady","_configureWidget","onLoginReady","setClientId","setUseCookie","onAmazonLoginReady","onAmazonPaymentsReady","VisaCheckoutScriptLoader","V","ChasePayScriptLoader","ConsoleLogger","_console","log","messages","_logToConsole","debug","NoopLogger","getDefaultLogger","isEnabled","logger","console_logger","console","noop_logger","BraintreeVisaCheckoutPaymentProcessor","createInitOptions","paymentRequest","braintreeVisaCheckout","tokenizedPayload","_toVisaCheckoutAddress","userData","userEmail","_getAddress","extendedAddress","createBraintreeVisaCheckoutPaymentProcessor","braintree_visacheckout_payment_processor"],"mappings":"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","file":"checkout-sdk.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 191);\n","module.exports = require(\"tslib\");","module.exports = require(\"@bigcommerce/data-store\");","module.exports = require(\"lodash\");","module.exports = require(\"rxjs\");","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nimport { ConsignmentMeta } from './consignment';\n\nexport enum ConsignmentActionType {\n    CreateConsignmentsRequested = 'CREATE_CONSIGNMENTS_REQUESTED',\n    CreateConsignmentsSucceeded = 'CREATE_CONSIGNMENTS_SUCCEEDED',\n    CreateConsignmentsFailed = 'CREATE_CONSIGNMENTS_FAILED',\n\n    UpdateConsignmentRequested = 'UPDATE_CONSIGNMENT_REQUESTED',\n    UpdateConsignmentSucceeded = 'UPDATE_CONSIGNMENT_SUCCEEDED',\n    UpdateConsignmentFailed = 'UPDATE_CONSIGNMENT_FAILED',\n\n    DeleteConsignmentRequested = 'DELETE_CONSIGNMENT_REQUESTED',\n    DeleteConsignmentSucceeded = 'DELETE_CONSIGNMENT_SUCCEEDED',\n    DeleteConsignmentFailed = 'DELETE_CONSIGNMENT_FAILED',\n\n    UpdateShippingOptionRequested = 'UPDATE_SHIPPING_OPTION_REQUESTED',\n    UpdateShippingOptionSucceeded = 'UPDATE_SHIPPING_OPTION_SUCCEEDED',\n    UpdateShippingOptionFailed = 'UPDATE_SHIPPING_OPTION_FAILED',\n\n    LoadShippingOptionsRequested = 'LOAD_SHIPPING_OPTIONS_REQUESTED',\n    LoadShippingOptionsSucceeded = 'LOAD_SHIPPING_OPTIONS_SUCCEEDED',\n    LoadShippingOptionsFailed = 'LOAD_SHIPPING_OPTIONS_FAILED',\n}\n\nexport type ConsignmentAction =\n    CreateConsignmentsAction |\n    UpdateConsignmentAction |\n    DeleteConsignmentAction |\n    UpdateShippingOptionAction |\n    LoadShippingOptionsAction;\n\nexport type CreateConsignmentsAction =\n    CreateConsignmentsRequestedAction |\n    CreateConsignmentsSucceededAction |\n    CreateConsignmentsFailedAction;\n\nexport type UpdateConsignmentAction =\n    UpdateConsignmentRequestedAction |\n    UpdateConsignmentSucceededAction |\n    UpdateConsignmentFailedAction;\n\nexport type DeleteConsignmentAction =\n    DeleteConsignmentRequestedAction |\n    DeleteConsignmentSucceededAction |\n    DeleteConsignmentFailedAction;\n\nexport type UpdateShippingOptionAction =\n    UpdateShippingOptionRequestedAction |\n    UpdateShippingOptionSucceededAction |\n    UpdateShippingOptionFailedAction;\n\nexport type LoadShippingOptionsAction =\n    LoadShippingOptionsRequestedAction |\n    LoadShippingOptionsSucceededAction |\n    LoadShippingOptionsFailedAction;\n\nexport interface CreateConsignmentsRequestedAction extends Action {\n    type: ConsignmentActionType.CreateConsignmentsRequested;\n}\n\nexport interface CreateConsignmentsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.CreateConsignmentsSucceeded;\n}\n\nexport interface CreateConsignmentsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.CreateConsignmentsFailed;\n}\n\nexport interface UpdateConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentRequested;\n}\n\nexport interface UpdateConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentSucceeded;\n}\n\nexport interface UpdateConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentFailed;\n}\n\nexport interface DeleteConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentRequested;\n}\n\nexport interface DeleteConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentSucceeded;\n}\n\nexport interface DeleteConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentFailed;\n}\n\nexport interface UpdateShippingOptionRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionRequested;\n}\n\nexport interface UpdateShippingOptionSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionSucceeded;\n}\n\nexport interface UpdateShippingOptionFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionFailed;\n}\n\nexport interface LoadShippingOptionsRequestedAction extends Action {\n    type: ConsignmentActionType.LoadShippingOptionsRequested;\n}\n\nexport interface LoadShippingOptionsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.LoadShippingOptionsSucceeded;\n}\n\nexport interface LoadShippingOptionsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.LoadShippingOptionsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadConfigAction } from '../config/config-actions';\n\nimport Checkout from './checkout';\n\nexport enum CheckoutActionType {\n    LoadCheckoutRequested = 'LOAD_CHECKOUT_REQUESTED',\n    LoadCheckoutSucceeded = 'LOAD_CHECKOUT_SUCCEEDED',\n    LoadCheckoutFailed = 'LOAD_CHECKOUT_FAILED',\n\n    UpdateCheckoutRequested = 'UPDATE_CHECKOUT_REQUESTED',\n    UpdateCheckoutSucceeded = 'UPDATE_CHECKOUT_SUCCEEDED',\n    UpdateCheckoutFailed = 'UPDATE_CHECKOUT_FAILED',\n}\n\nexport type CheckoutAction = LoadCheckoutAction | UpdateCheckoutAction;\n\nexport type LoadCheckoutAction =\n    LoadCheckoutRequestedAction |\n    LoadCheckoutSucceededAction |\n    LoadCheckoutFailedAction |\n    LoadConfigAction;\n\nexport type UpdateCheckoutAction =\n    UpdateCheckoutRequestedAction |\n    UpdateCheckoutSucceededAction |\n    UpdateCheckoutFailedAction;\n\nexport interface LoadCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.LoadCheckoutRequested;\n}\n\nexport interface LoadCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.LoadCheckoutSucceeded;\n}\n\nexport interface LoadCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.LoadCheckoutFailed;\n}\n\nexport interface UpdateCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.UpdateCheckoutRequested;\n}\n\nexport interface UpdateCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.UpdateCheckoutSucceeded;\n}\n\nexport interface UpdateCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.UpdateCheckoutFailed;\n}\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentMethod,\n}\n\nexport default class MissingDataError extends StandardError {\n    constructor(\n        public subtype: MissingDataErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n    case MissingDataErrorType.MissingBillingAddress:\n        return 'Unable to proceed because billing address data is unavailable.';\n\n    case MissingDataErrorType.MissingCart:\n        return 'Unable to proceed because cart data is unavailable.';\n\n    case MissingDataErrorType.MissingConsignments:\n        return 'Unable to proceed because consignments data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckout:\n        return 'Unable to proceed because checkout data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckoutConfig:\n    case MissingDataErrorType.MissingOrderConfig:\n        return 'Unable to proceed because configuration data is unavailable.';\n\n    case MissingDataErrorType.MissingOrder:\n        return 'Unable to proceed because order data is unavailable.';\n\n    case MissingDataErrorType.MissingOrderId:\n        return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n    case MissingDataErrorType.MissingPayment:\n        return 'Unable to proceed because payment data is unavailable.';\n\n    case MissingDataErrorType.MissingPaymentMethod:\n        return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n    default:\n        return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum CustomerStrategyActionType {\n    SignInFailed = 'CUSTOMER_STRATEGY_SIGN_IN_FAILED',\n    SignInRequested = 'CUSTOMER_STRATEGY_SIGN_IN_REQUESTED',\n    SignInSucceeded = 'CUSTOMER_STRATEGY_SIGN_IN_SUCCEEDED',\n    SignOutFailed = 'CUSTOMER_STRATEGY_SIGN_OUT_FAILED',\n    SignOutRequested = 'CUSTOMER_STRATEGY_SIGN_OUT_REQUESTED',\n    SignOutSucceeded = 'CUSTOMER_STRATEGY_SIGN_OUT_SUCCEEDED',\n    InitializeFailed = 'CUSTOMER_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'CUSTOMER_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'CUSTOMER_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'CUSTOMER_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'CUSTOMER_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'CUSTOMER_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type CustomerStrategyAction =\n    CustomerStrategySignInAction |\n    CustomerStrategySignOutAction |\n    CustomerStrategyInitializeAction |\n    CustomerStrategyDeinitializeAction |\n    CustomerStrategyWidgetAction;\n\nexport type CustomerStrategySignInAction =\n    SignInRequestedAction |\n    SignInSucceededAction |\n    SignInFailedAction;\n\nexport type CustomerStrategySignOutAction =\n    SignOutRequestedAction |\n    SignOutSucceededAction |\n    SignOutFailedAction;\n\nexport type CustomerStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type CustomerStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type CustomerStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface SignInRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignInRequested;\n}\n\nexport interface SignInSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignInSucceeded;\n}\n\nexport interface SignInFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignInFailed;\n}\n\nexport interface SignOutRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignOutRequested;\n}\n\nexport interface SignOutSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignOutSucceeded;\n}\n\nexport interface SignOutFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignOutFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderPaymentsAction } from '../order';\n\nexport enum PaymentStrategyActionType {\n    ExecuteFailed = 'PAYMENT_STRATEGY_EXECUTE_FAILED',\n    ExecuteRequested = 'PAYMENT_STRATEGY_EXECUTE_REQUESTED',\n    ExecuteSucceeded = 'PAYMENT_STRATEGY_EXECUTE_SUCCEEDED',\n    FinalizeFailed = 'PAYMENT_STRATEGY_FINALIZE_FAILED',\n    FinalizeRequested = 'PAYMENT_STRATEGY_FINALIZE_REQUESTED',\n    FinalizeSucceeded = 'PAYMENT_STRATEGY_FINALIZE_SUCCEEDED',\n    InitializeFailed = 'PAYMENT_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'PAYMENT_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'PAYMENT_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'PAYMENT_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'PAYMENT_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'PAYMENT_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type PaymentStrategyAction =\n    PaymentStrategyExecuteAction |\n    PaymentStrategyFinalizeAction |\n    PaymentStrategyInitializeAction |\n    PaymentStrategyDeinitializeAction |\n    PaymentStrategyWidgetAction;\n\nexport type PaymentStrategyExecuteAction =\n    ExecuteRequestedAction |\n    ExecuteSucceededAction |\n    ExecuteFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyFinalizeAction =\n    FinalizeRequestedAction |\n    FinalizeSucceededAction |\n    FinalizeFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type PaymentStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type PaymentStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface ExecuteRequestedAction extends Action {\n    type: PaymentStrategyActionType.ExecuteRequested;\n}\n\nexport interface ExecuteSucceededAction extends Action {\n    type: PaymentStrategyActionType.ExecuteSucceeded;\n}\n\nexport interface ExecuteFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.ExecuteFailed;\n}\n\nexport interface FinalizeRequestedAction extends Action {\n    type: PaymentStrategyActionType.FinalizeRequested;\n}\n\nexport interface FinalizeSucceededAction extends Action {\n    type: PaymentStrategyActionType.FinalizeSucceeded;\n}\n\nexport interface FinalizeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.FinalizeFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ShippingStrategyActionType {\n    UpdateAddressFailed = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_FAILED',\n    UpdateAddressRequested = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_REQUESTED',\n    UpdateAddressSucceeded = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_SUCCEEDED',\n    SelectOptionFailed = 'SHIPPING_STRATEGY_SELECT_OPTION_FAILED',\n    SelectOptionRequested = 'SHIPPING_STRATEGY_SELECT_OPTION_REQUESTED',\n    SelectOptionSucceeded = 'SHIPPING_STRATEGY_SELECT_OPTION_SUCCEEDED',\n    InitializeFailed = 'SHIPPING_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'SHIPPING_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'SHIPPING_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'SHIPPING_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'SHIPPING_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'SHIPPING_STRATEGY_DEINITIALIZE_SUCCEEDED',\n}\n\nexport type ShippingStrategyAction =\n    ShippingStrategyUpdateAddressAction |\n    ShippingStrategySelectOptionAction |\n    ShippingStrategyInitializeAction |\n    ShippingStrategyDeinitializeAction;\n\nexport type ShippingStrategyUpdateAddressAction =\n    UpdateAddressRequestedAction |\n    UpdateAddressSucceededAction |\n    UpdateAddressFailedAction;\n\nexport type ShippingStrategySelectOptionAction =\n    SelectOptionRequestedAction |\n    SelectOptionSucceededAction |\n    SelectOptionFailedAction;\n\nexport type ShippingStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type ShippingStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport interface UpdateAddressRequestedAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressRequested;\n}\n\nexport interface UpdateAddressSucceededAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressSucceeded;\n}\n\nexport interface UpdateAddressFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.UpdateAddressFailed;\n}\n\nexport interface SelectOptionRequestedAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionRequested;\n}\n\nexport interface SelectOptionSucceededAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionSucceeded;\n}\n\nexport interface SelectOptionFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.SelectOptionFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.DeinitializeFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum CouponActionType {\n    ApplyCouponRequested = 'APPLY_COUPON_REQUESTED',\n    ApplyCouponSucceeded = 'APPLY_COUPON_SUCCEEDED',\n    ApplyCouponFailed = 'APPLY_COUPON_FAILED',\n\n    RemoveCouponRequested = 'REMOVE_COUPON_REQUESTED',\n    RemoveCouponSucceeded = 'REMOVE_COUPON_SUCCEEDED',\n    RemoveCouponFailed = 'REMOVE_COUPON_FAILED',\n}\n\nexport type CouponAction =\n    ApplyCouponAction |\n    RemoveCouponAction;\n\nexport type ApplyCouponAction =\n    ApplyCouponRequestedAction |\n    ApplyCouponSucceededAction |\n    ApplyCouponFailedAction;\n\nexport type RemoveCouponAction =\n    RemoveCouponRequestedAction |\n    RemoveCouponSucceededAction |\n    RemoveCouponFailedAction;\n\nexport interface ApplyCouponRequestedAction extends Action {\n    type: CouponActionType.ApplyCouponRequested;\n}\n\nexport interface ApplyCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.ApplyCouponSucceeded;\n}\n\nexport interface ApplyCouponFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: CouponActionType.ApplyCouponFailed;\n}\n\nexport interface RemoveCouponRequestedAction extends Action {\n    type: CouponActionType.RemoveCouponRequested;\n}\n\nexport interface RemoveCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.RemoveCouponSucceeded;\n}\n\nexport interface RemoveCouponFailedAction extends Action<RequestError> {\n    type: CouponActionType.RemoveCouponFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { InternalOrderResponseData } from './internal-order-responses';\nimport Order from './order';\n\nexport enum OrderActionType {\n    LoadOrderRequested = 'LOAD_ORDER_REQUESTED',\n    LoadOrderSucceeded = 'LOAD_ORDER_SUCCEEDED',\n    LoadOrderFailed = 'LOAD_ORDER_FAILED',\n\n    LoadOrderPaymentsRequested = 'LOAD_ORDER_PAYMENTS_REQUESTED',\n    LoadOrderPaymentsSucceeded = 'LOAD_ORDER_PAYMENTS_SUCCEEDED',\n    LoadOrderPaymentsFailed = 'LOAD_ORDER_PAYMENTS_FAILED',\n\n    SubmitOrderRequested = 'SUBMIT_ORDER_REQUESTED',\n    SubmitOrderSucceeded = 'SUBMIT_ORDER_SUCCEEDED',\n    SubmitOrderFailed = 'SUBMIT_ORDER_FAILED',\n\n    FinalizeOrderRequested = 'FINALIZE_ORDER_REQUESTED',\n    FinalizeOrderSucceeded = 'FINALIZE_ORDER_SUCCEEDED',\n    FinalizeOrderFailed = 'FINALIZE_ORDER_FAILED',\n}\n\nexport type OrderAction = LoadOrderAction |\n    LoadOrderPaymentsAction |\n    SubmitOrderAction |\n    FinalizeOrderAction;\n\nexport type LoadOrderPaymentsAction = LoadOrderPaymentsRequestedAction |\n    LoadOrderPaymentsSucceededAction |\n    LoadOrderPaymentsFailedAction;\n\nexport type LoadOrderAction =\n    LoadOrderRequestedAction |\n    LoadOrderSucceededAction |\n    LoadOrderFailedAction;\n\nexport type SubmitOrderAction =\n    SubmitOrderRequestedAction |\n    SubmitOrderSucceededAction |\n    SubmitOrderFailedAction |\n    LoadOrderAction;\n\nexport type FinalizeOrderAction =\n    FinalizeOrderRequestedAction |\n    FinalizeOrderSucceededAction |\n    FinalizeOrderFailedAction |\n    LoadOrderAction;\n\nexport interface LoadOrderRequestedAction extends Action {\n    type: OrderActionType.LoadOrderRequested;\n}\n\nexport interface LoadOrderSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderSucceeded;\n}\n\nexport interface LoadOrderFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderFailed;\n}\n\nexport interface LoadOrderPaymentsRequestedAction extends Action {\n    type: OrderActionType.LoadOrderPaymentsRequested;\n}\n\nexport interface LoadOrderPaymentsSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderPaymentsSucceeded;\n}\n\nexport interface LoadOrderPaymentsFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderPaymentsFailed;\n}\n\nexport interface SubmitOrderRequestedAction extends Action {\n    type: OrderActionType.SubmitOrderRequested;\n}\n\nexport interface SubmitOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.SubmitOrderSucceeded;\n}\n\nexport interface SubmitOrderFailedAction extends Action<Error> {\n    type: OrderActionType.SubmitOrderFailed;\n}\n\nexport interface FinalizeOrderRequestedAction extends Action {\n    type: OrderActionType.FinalizeOrderRequested;\n}\n\nexport interface FinalizeOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.FinalizeOrderSucceeded;\n}\n\nexport interface FinalizeOrderFailedAction extends Action<Error> {\n    type: OrderActionType.FinalizeOrderFailed;\n}\n","import { setPrototypeOf } from '../../utility';\n\nimport CustomError from './custom-error';\n\nexport default class StandardError extends Error implements CustomError {\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = (new Error(this.message)).stack;\n        }\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum BillingAddressActionType {\n    UpdateBillingAddressRequested = 'UPDATE_BILLING_ADDRESS_REQUESTED',\n    UpdateBillingAddressSucceeded = 'UPDATE_BILLING_ADDRESS_SUCCEEDED',\n    UpdateBillingAddressFailed = 'UPDATE_BILLING_ADDRESS_FAILED',\n\n    ContinueAsGuestRequested = 'CONTINUE_AS_GUEST_REQUESTED',\n    ContinueAsGuestSucceeded = 'CONTINUE_AS_GUEST_SUCCEEDED',\n    ContinueAsGuestFailed = 'CONTINUE_AS_GUEST_FAILED',\n}\n\nexport type BillingAddressAction =\n    ContinueAsGuestAction |\n    UpdateBillingAddressAction;\n\nexport type UpdateBillingAddressAction =\n    UpdateBillingAddressRequested |\n    UpdateBillingAddressSucceeded |\n    UpdateBillingAddressFailed;\n\nexport type ContinueAsGuestAction =\n    ContinueAsGuestRequested |\n    ContinueAsGuestSucceeded |\n    ContinueAsGuestFailed;\n\nexport interface UpdateBillingAddressRequested extends Action {\n    type: BillingAddressActionType.UpdateBillingAddressRequested;\n}\n\nexport interface UpdateBillingAddressSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.UpdateBillingAddressSucceeded;\n}\n\nexport interface UpdateBillingAddressFailed extends Action<Error> {\n    type: BillingAddressActionType.UpdateBillingAddressFailed;\n}\n\nexport interface ContinueAsGuestRequested extends Action {\n    type: BillingAddressActionType.ContinueAsGuestRequested;\n}\n\nexport interface ContinueAsGuestSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.ContinueAsGuestSucceeded;\n}\n\nexport interface ContinueAsGuestFailed extends Action<Error> {\n    type: BillingAddressActionType.ContinueAsGuestFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum GiftCertificateActionType {\n    ApplyGiftCertificateRequested = 'APPLY_GIFT_CERTIFICATE_REQUESTED',\n    ApplyGiftCertificateSucceeded = 'APPLY_GIFT_CERTIFICATE_SUCCEEDED',\n    ApplyGiftCertificateFailed = 'APPLY_GIFT_CERTIFICATE_FAILED',\n\n    RemoveGiftCertificateRequested = 'REMOVE_GIFT_CERTIFICATE_REQUESTED',\n    RemoveGiftCertificateSucceeded = 'REMOVE_GIFT_CERTIFICATE_SUCCEEDED',\n    RemoveGiftCertificateFailed = 'REMOVE_GIFT_CERTIFICATE_FAILED',\n}\n\nexport type GiftCertificateAction =\n    ApplyGiftCertificateAction |\n    RemoveGiftCertificateAction;\n\nexport type ApplyGiftCertificateAction =\n    ApplyGiftCertificateRequestedAction |\n    ApplyGiftCertificateSucceededAction |\n    ApplyGiftCertificateFailedAction;\n\nexport type RemoveGiftCertificateAction =\n    RemoveGiftCertificateRequestedAction |\n    RemoveGiftCertificateSucceededAction |\n    RemoveGiftCertificateFailedAction;\n\nexport interface ApplyGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.ApplyGiftCertificateRequested;\n}\n\nexport interface ApplyGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.ApplyGiftCertificateSucceeded;\n}\n\nexport interface ApplyGiftCertificateFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.ApplyGiftCertificateFailed;\n}\n\nexport interface RemoveGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.RemoveGiftCertificateRequested;\n}\n\nexport interface RemoveGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.RemoveGiftCertificateSucceeded;\n}\n\nexport interface RemoveGiftCertificateFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.RemoveGiftCertificateFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport enum PaymentMethodActionType {\n    LoadPaymentMethodRequested = 'LOAD_PAYMENT_METHOD_REQUESTED',\n    LoadPaymentMethodSucceeded = 'LOAD_PAYMENT_METHOD_SUCCEEDED',\n    LoadPaymentMethodFailed = 'LOAD_PAYMENT_METHOD_FAILED',\n\n    LoadPaymentMethodsRequested = 'LOAD_PAYMENT_METHODS_REQUESTED',\n    LoadPaymentMethodsSucceeded = 'LOAD_PAYMENT_METHODS_SUCCEEDED',\n    LoadPaymentMethodsFailed = 'LOAD_PAYMENT_METHODS_FAILED',\n}\n\nexport type PaymentMethodAction = LoadPaymentMethodAction | LoadPaymentMethodsAction;\n\nexport type LoadPaymentMethodAction =\n    LoadPaymentMethodRequestedAction |\n    LoadPaymentMethodSucceededAction |\n    LoadPaymentMethodFailedAction;\n\nexport type LoadPaymentMethodsAction =\n    LoadPaymentMethodsRequestedAction |\n    LoadPaymentMethodsSucceededAction |\n    LoadPaymentMethodsFailedAction;\n\nexport interface LoadPaymentMethodRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodRequested;\n}\n\nexport interface LoadPaymentMethodSucceededAction extends Action<PaymentMethod> {\n    type: PaymentMethodActionType.LoadPaymentMethodSucceeded;\n}\n\nexport interface LoadPaymentMethodFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodFailed;\n}\n\nexport interface LoadPaymentMethodsRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodsRequested;\n}\n\nexport interface LoadPaymentMethodsSucceededAction extends Action<PaymentMethod[], PaymentMethodMeta> {\n    type: PaymentMethodActionType.LoadPaymentMethodsSucceeded;\n}\n\nexport interface LoadPaymentMethodsFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadPaymentMethodAction } from '../payment';\n\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport enum CheckoutButtonActionType {\n    InitializeButtonFailed = 'INITIALIZE_BUTTON_FAILED',\n    InitializeButtonRequested = 'INITIALIZE_BUTTON_REQUESTED',\n    InitializeButtonSucceeded = 'INITIALIZE_BUTTON_SUCCEEDED',\n\n    DeinitializeButtonFailed = 'DEINITIALIZE_BUTTON_FAILED',\n    DeinitializeButtonRequested = 'DEINITIALIZE_BUTTON_REQUESTED',\n    DeinitializeButtonSucceeded = 'DEINITIALIZE_BUTTON_SUCCEEDED',\n}\n\nexport type CheckoutButtonAction = InitializeButtonAction | DeinitializeButtonAction;\n\nexport type InitializeButtonAction =\n    InitializeButtonRequestedAction |\n    InitializeButtonSucceededAction |\n    InitializeButtonFailedAction |\n    LoadPaymentMethodAction;\n\nexport type DeinitializeButtonAction =\n    DeinitializeButtonRequestedAction |\n    DeinitializeButtonSucceededAction |\n    DeinitializeButtonFailedAction;\n\nexport interface CheckoutButtonActionMeta {\n    methodId: CheckoutButtonMethodType;\n}\n\nexport interface InitializeButtonActionMeta extends CheckoutButtonActionMeta {\n    containerId: string;\n}\n\nexport interface InitializeButtonRequestedAction extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonRequested;\n}\n\nexport interface InitializeButtonSucceededAction extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonSucceeded;\n}\n\nexport interface InitializeButtonFailedAction extends Action<Error, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonFailed;\n}\n\nexport interface DeinitializeButtonRequestedAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonRequested;\n}\n\nexport interface DeinitializeButtonSucceededAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonSucceeded;\n}\n\nexport interface DeinitializeButtonFailedAction extends Action<Error, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { InstrumentsResponseBody } from './instrument-response-body';\n\nexport enum InstrumentActionType {\n    LoadInstrumentsRequested = 'LOAD_INSTRUMENTS_REQUESTED',\n    LoadInstrumentsSucceeded = 'LOAD_INSTRUMENTS_SUCCEEDED',\n    LoadInstrumentsFailed = 'LOAD_INSTRUMENTS_FAILED',\n\n    DeleteInstrumentRequested = 'DELETE_INSTRUMENT_REQUESTED',\n    DeleteInstrumentSucceeded = 'DELETE_INSTRUMENT_SUCCEEDED',\n    DeleteInstrumentFailed = 'DELETE_INSTRUMENT_FAILED',\n}\n\nexport type InstrumentAction =\n    LoadInstrumentsAction |\n    DeleteInstrumentAction;\n\nexport type LoadInstrumentsAction =\n    LoadInstrumentsRequestedAction |\n    LoadInstrumentsSucceededAction |\n    LoadInstrumentsFailedAction;\n\nexport type DeleteInstrumentAction =\n    DeleteInstrumentRequestedAction |\n    DeleteInstrumentSucceededAction |\n    DeleteInstrumentFailedAction;\n\nexport interface LoadInstrumentsRequestedAction extends Action {\n    type: InstrumentActionType.LoadInstrumentsRequested;\n}\n\nexport interface LoadInstrumentsSucceededAction extends Action<InstrumentsResponseBody> {\n    type: InstrumentActionType.LoadInstrumentsSucceeded;\n}\n\nexport interface LoadInstrumentsFailedAction extends Action<Error> {\n    type: InstrumentActionType.LoadInstrumentsFailed;\n}\n\nexport interface DeleteInstrumentRequestedAction extends Action {\n    type: InstrumentActionType.DeleteInstrumentRequested;\n}\n\nexport interface DeleteInstrumentSucceededAction extends Action<InstrumentsResponseBody> {\n    type: InstrumentActionType.DeleteInstrumentSucceeded;\n}\n\nexport interface DeleteInstrumentFailedAction extends Action<Error> {\n    type: InstrumentActionType.DeleteInstrumentFailed;\n}\n","module.exports = require(\"rxjs/operators\");","import EmbeddedCheckoutError from './embedded-checkout-error';\nimport EmbeddedContentOptions from './iframe-content/embedded-content-options';\n\nexport enum EmbeddedCheckoutEventType {\n    CheckoutComplete = 'CHECKOUT_COMPLETE',\n    CheckoutError = 'CHECKOUT_ERROR',\n    CheckoutLoaded = 'CHECKOUT_LOADED',\n    FrameError = 'FRAME_ERROR',\n    FrameLoaded = 'FRAME_LOADED',\n    SignedOut = 'SIGNED_OUT',\n}\n\nexport interface EmbeddedCheckoutEventMap {\n    [EmbeddedCheckoutEventType.CheckoutComplete]: EmbeddedCheckoutCompleteEvent;\n    [EmbeddedCheckoutEventType.CheckoutError]: EmbeddedCheckoutErrorEvent;\n    [EmbeddedCheckoutEventType.CheckoutLoaded]: EmbeddedCheckoutLoadedEvent;\n    [EmbeddedCheckoutEventType.FrameError]: EmbeddedCheckoutFrameErrorEvent;\n    [EmbeddedCheckoutEventType.FrameLoaded]: EmbeddedCheckoutFrameLoadedEvent;\n    [EmbeddedCheckoutEventType.SignedOut]: EmbeddedCheckoutSignedOutEvent;\n}\n\nexport type EmbeddedCheckoutEvent = (\n    EmbeddedCheckoutCompleteEvent |\n    EmbeddedCheckoutErrorEvent |\n    EmbeddedCheckoutFrameErrorEvent |\n    EmbeddedCheckoutFrameLoadedEvent |\n    EmbeddedCheckoutLoadedEvent |\n    EmbeddedCheckoutSignedOutEvent\n);\n\nexport interface EmbeddedCheckoutCompleteEvent {\n    type: EmbeddedCheckoutEventType.CheckoutComplete;\n}\n\nexport interface EmbeddedCheckoutErrorEvent {\n    type: EmbeddedCheckoutEventType.CheckoutError;\n    payload: EmbeddedCheckoutError;\n}\n\nexport interface EmbeddedCheckoutLoadedEvent {\n    type: EmbeddedCheckoutEventType.CheckoutLoaded;\n}\n\nexport interface EmbeddedCheckoutFrameErrorEvent {\n    type: EmbeddedCheckoutEventType.FrameError;\n    payload: EmbeddedCheckoutError;\n}\n\nexport interface EmbeddedCheckoutFrameLoadedEvent {\n    type: EmbeddedCheckoutEventType.FrameLoaded;\n    payload?: EmbeddedContentOptions;\n}\n\nexport interface EmbeddedCheckoutSignedOutEvent {\n    type: EmbeddedCheckoutEventType.SignedOut;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { AmazonPayRemoteCheckout } from './methods';\n\nexport enum RemoteCheckoutActionType {\n    InitializeRemoteBillingRequested = 'INITIALIZE_REMOTE_BILLING_REQUESTED',\n    InitializeRemoteBillingSucceeded = 'INITIALIZE_REMOTE_BILLING_SUCCEEDED',\n    InitializeRemoteBillingFailed = 'INITIALIZE_REMOTE_BILLING_FAILED',\n\n    InitializeRemoteShippingRequested = 'INITIALIZE_REMOTE_SHIPPING_REQUESTED',\n    InitializeRemoteShippingSucceeded = 'INITIALIZE_REMOTE_SHIPPING_SUCCEEDED',\n    InitializeRemoteShippingFailed = 'INITIALIZE_REMOTE_SHIPPING_FAILED',\n\n    InitializeRemotePaymentRequested = 'INITIALIZE_REMOTE_PAYMENT_REQUESTED',\n    InitializeRemotePaymentSucceeded = 'INITIALIZE_REMOTE_PAYMENT_SUCCEEDED',\n    InitializeRemotePaymentFailed = 'INITIALIZE_REMOTE_PAYMENT_FAILED',\n\n    LoadRemoteSettingsRequested = 'LOAD_REMOTE_SETTINGS_REQUESTED',\n    LoadRemoteSettingsSucceeded = 'LOAD_REMOTE_SETTINGS_SUCCEEDED',\n    LoadRemoteSettingsFailed = 'LOAD_REMOTE_SETTINGS_FAILED',\n\n    SignOutRemoteCustomerRequested = 'SIGN_OUT_REMOTE_CUSTOMER_REQUESTED',\n    SignOutRemoteCustomerSucceeded = 'SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED',\n    SignOutRemoteCustomerFailed = 'SIGN_OUT_REMOTE_CUSTOMER_FAILED',\n\n    UpdateRemoteCheckout = 'UPDATE_REMOTE_CHECKOUT',\n}\n\nexport type RemoteCheckoutAction = InitializeRemoteBillingAction |\n    InitializeRemoteShippingAction |\n    InitializeRemotePaymentAction |\n    SignOutRemoteCustomerAction |\n    LoadRemoteSettingsAction |\n    UpdateRemoteCheckoutAction;\n\nexport type InitializeRemoteBillingAction = InitializeRemoteBillingSucceededAction |\n    InitializeRemoteBillingFailedAction |\n    InitializeRemoteBillingRequestedAction;\n\nexport interface InitializeRemoteBillingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingSucceeded;\n}\n\nexport interface InitializeRemoteBillingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingFailed;\n}\n\nexport interface InitializeRemoteBillingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingRequested;\n}\n\nexport type InitializeRemoteShippingAction = InitializeRemoteShippingSucceededAction |\n    InitializeRemoteShippingFailedAction |\n    InitializeRemoteShippingRequestedAction;\n\nexport interface InitializeRemoteShippingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingSucceeded;\n}\n\nexport interface InitializeRemoteShippingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingFailed;\n}\n\nexport interface InitializeRemoteShippingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingRequested;\n}\n\nexport type InitializeRemotePaymentAction = InitializeRemotePaymentSucceededAction |\n    InitializeRemotePaymentFailedAction |\n    InitializeRemotePaymentRequestedAction;\n\nexport interface InitializeRemotePaymentSucceededAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentSucceeded;\n}\n\nexport interface InitializeRemotePaymentFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentFailed;\n}\n\nexport interface InitializeRemotePaymentRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentRequested;\n}\n\nexport type SignOutRemoteCustomerAction = SignOutRemoteCustomerSucceededAction |\n    SignOutRemoteCustomerFailedAction |\n    SignOutRemoteCustomerRequestedAction;\n\nexport interface SignOutRemoteCustomerSucceededAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded;\n}\n\nexport interface SignOutRemoteCustomerFailedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerFailed;\n}\n\nexport interface SignOutRemoteCustomerRequestedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerRequested;\n}\n\nexport type LoadRemoteSettingsAction = LoadRemoteSettingsSucceededAction |\n    LoadRemoteSettingsRequestedAction |\n    LoadRemoteSettingsFailedAction;\n\nexport interface LoadRemoteSettingsSucceededAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsSucceeded;\n}\n\nexport interface LoadRemoteSettingsRequestedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsRequested;\n}\n\nexport interface LoadRemoteSettingsFailedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsFailed;\n}\n\nexport interface UpdateRemoteCheckoutAction extends Action {\n    type: RemoteCheckoutActionType.UpdateRemoteCheckout;\n}\n","import { ClearErrorAction, ErrorActionType } from './error-actions';\n\nexport default class ErrorActionCreator {\n    clearError(error: Error): ClearErrorAction {\n        return {\n            type: ErrorActionType.ClearError,\n            payload: error,\n        };\n    }\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport Country from './country';\nimport { CountryActionType } from './country-actions';\nimport CountryRequestSender from './country-request-sender';\n\nexport default class CountryActionCreator {\n    constructor(\n        private _countryRequestSender: CountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<Action<Country[]>> {\n        return Observable.create((observer: Observer<Action<Country[]>>) => {\n            observer.next(createAction(CountryActionType.LoadCountriesRequested));\n\n            this._countryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(CountryActionType.LoadCountriesSucceeded, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CountryActionType.LoadCountriesFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { CountryResponseBody } from './country-responses';\n\nexport default class CountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/store/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","enum PaymentStrategyType {\n    AFTERPAY = 'afterpay',\n    AMAZON = 'amazon',\n    CREDIT_CARD = 'creditcard',\n    KLARNA = 'klarna',\n    LEGACY = 'legacy',\n    OFFLINE = 'offline',\n    OFFSITE = 'offsite',\n    PAYPAL = 'paypal',\n    PAYPAL_EXPRESS = 'paypalexpress',\n    PAYPAL_EXPRESS_CREDIT = 'paypalexpresscredit',\n    SAGE_PAY = 'sagepay',\n    SQUARE = 'squarev2',\n    NO_PAYMENT_DATA_REQUIRED = 'nopaymentdatarequired',\n    BRAINTREE = 'braintree',\n    BRAINTREE_PAYPAL = 'braintreepaypal',\n    BRAINTREE_PAYPAL_CREDIT = 'braintreepaypalcredit',\n    BRAINTREE_VISA_CHECKOUT = 'braintreevisacheckout',\n    BRAINTREE_GOOGLE_PAY = 'googlepaybraintree',\n    CHASE_PAY = 'chasepay',\n    WE_PAY = 'wepay',\n    MASTERPASS = 'masterpass',\n    STRIPE_GOOGLE_PAY = 'googlepaystripe',\n}\n\nexport default PaymentStrategyType;\n","import { StandardError } from '../../common/error/errors';\n\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.type = 'order_finalization_not_required';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, of, Observable, Observer } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { LoadOrderPaymentsAction, OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../order';\nimport { OrderFinalizationNotRequiredError } from '../order/errors';\n\nimport { PaymentInitializeOptions, PaymentRequestOptions } from './payment-request-options';\nimport {\n    PaymentStrategyActionType,\n    PaymentStrategyDeinitializeAction,\n    PaymentStrategyExecuteAction,\n    PaymentStrategyFinalizeAction,\n    PaymentStrategyInitializeAction,\n    PaymentStrategyWidgetAction,\n} from './payment-strategy-actions';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport PaymentStrategyType from './payment-strategy-type';\nimport { PaymentStrategy } from './strategies';\n\nexport default class PaymentStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: PaymentStrategyRegistry,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<PaymentStrategyExecuteAction, InternalCheckoutSelectors> {\n        return store => new Observable((observer: Observer<PaymentStrategyExecuteAction>) => {\n            const state = store.getState();\n            const { payment = {} as OrderPaymentRequestBody, useStoreCredit } = payload;\n            const meta = { methodId: payment.methodId };\n\n            let strategy: PaymentStrategy;\n\n            if (state.payment.isPaymentDataRequired(useStoreCredit)) {\n                const method = state.paymentMethods.getPaymentMethod(payment.methodId, payment.gatewayId);\n\n                if (!method) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                strategy = this._strategyRegistry.getByMethod(method);\n            } else {\n                strategy = this._strategyRegistry.get(PaymentStrategyType.NO_PAYMENT_DATA_REQUIRED);\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.ExecuteRequested, undefined, meta));\n\n            strategy\n                .execute(payload, { ...options, methodId: payment.methodId, gatewayId: payment.gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.ExecuteSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.ExecuteFailed, error, meta));\n                });\n        });\n    }\n\n    finalize(options?: RequestOptions): ThunkAction<PaymentStrategyFinalizeAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentStrategyActionType.FinalizeRequested)),\n            this._loadOrderPaymentsIfNeeded(store, options),\n            defer(() => {\n                const state = store.getState();\n                const payment = state.payment.getPaymentId();\n\n                if (!payment) {\n                    throw new OrderFinalizationNotRequiredError();\n                }\n\n                const method = state.paymentMethods.getPaymentMethod(payment.providerId, payment.gatewayId);\n\n                if (!method) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._strategyRegistry.getByMethod(method)\n                    .finalize({ ...options, methodId: method.id, gatewayId: method.gateway })\n                    .then(() => createAction(PaymentStrategyActionType.FinalizeSucceeded, undefined, { methodId: payment.providerId }));\n            })\n        ).pipe(\n            catchError(error => {\n                const state = store.getState();\n                const payment = state.payment.getPaymentId();\n\n                return throwErrorAction(PaymentStrategyActionType.FinalizeFailed, error, { methodId: payment && payment.providerId });\n            })\n        );\n    }\n\n    initialize(options: PaymentInitializeOptions): ThunkAction<PaymentStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<PaymentStrategyInitializeAction>) => {\n            const state = store.getState();\n            const { methodId, gatewayId } = options;\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            if (methodId && state.paymentStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.getByMethod(method)\n                .initialize({ ...options, methodId, gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options: PaymentRequestOptions): ThunkAction<PaymentStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<PaymentStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const { methodId, gatewayId } = options;\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            if (methodId && !state.paymentStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.getByMethod(method)\n                .deinitialize({ ...options, methodId, gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: PaymentRequestOptions): ThunkAction<PaymentStrategyWidgetAction> {\n        return store => Observable.create((observer: Observer<PaymentStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(PaymentStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(PaymentStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(PaymentStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n\n    private _loadOrderPaymentsIfNeeded(store: ReadableCheckoutStore, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        const state = store.getState();\n        const checkout = state.checkout.getCheckout();\n\n        if (checkout && checkout.orderId) {\n            return this._orderActionCreator.loadOrderPayments(checkout.orderId, options);\n        }\n\n        return empty();\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class CartChangedError extends StandardError {\n    constructor() {\n        super('An update to your shopping cart has been detected and your available shipping costs have been updated.');\n\n        this.type = 'cart_changed';\n    }\n}\n","import { isEqual, map } from 'lodash';\n\nimport { CartComparator } from '../cart';\nimport { CartChangedError } from '../cart/errors';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { Coupon, GiftCertificate } from '../coupon';\n\nimport Checkout from './checkout';\nimport CheckoutRequestSender from './checkout-request-sender';\n\nexport default class CheckoutValidator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    validate(checkout?: Checkout, options?: RequestOptions): Promise<void> {\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        return this._checkoutRequestSender.loadCheckout(checkout.id, options)\n            .then(response => {\n                const comparator = new CartComparator();\n\n                if (checkout.grandTotal === response.body.grandTotal\n                    && this._compareCoupons(checkout.coupons, response.body.coupons)\n                    && this._compareGiftCertificates(checkout.giftCertificates, response.body.giftCertificates)\n                    && comparator.isEqual(checkout.cart, response.body.cart)\n                ) {\n                    return;\n                }\n\n                throw new CartChangedError();\n            });\n    }\n\n    private _compareCoupons(couponsA: Coupon[], couponsB: Coupon[]): boolean {\n        return isEqual(map(couponsA, 'code'), map(couponsB, 'code'));\n    }\n\n    private _compareGiftCertificates(giftCertificatesA: GiftCertificate[], giftCertificatesB: GiftCertificate[]): boolean {\n        return isEqual(map(giftCertificatesA, 'code'), map(giftCertificatesB, 'code'));\n    }\n}\n","import { PaymentInstrument, VaultedInstrument } from './payment';\n\nexport default function isVaultedInstrument(instrument: PaymentInstrument): instrument is VaultedInstrument {\n    return Boolean((instrument as VaultedInstrument).instrumentId);\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { pick } from 'lodash';\nimport { concat, from, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { mapToInternalAddress } from '../address';\nimport { mapToInternalCart } from '../cart';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { StandardError } from '../common/error/errors';\nimport { mapToInternalCustomer } from '../customer';\nimport { mapToInternalOrder, OrderActionCreator } from '../order';\nimport { mapToInternalShippingOption } from '../shipping';\n\nimport isVaultedInstrument from './is-vaulted-instrument';\nimport Payment from './payment';\nimport { InitializeOffsitePaymentAction, PaymentActionType, SubmitPaymentAction } from './payment-actions';\nimport PaymentMethod from './payment-method';\nimport PaymentMethodSelector from './payment-method-selector';\nimport PaymentRequestBody from './payment-request-body';\nimport PaymentRequestSender from './payment-request-sender';\n\nexport default class PaymentActionCreator {\n    constructor(\n        private _paymentRequestSender: PaymentRequestSender,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    submitPayment(payment: Payment): ThunkAction<SubmitPaymentAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentActionType.SubmitPaymentRequested)),\n            from(this._paymentRequestSender.submitPayment(\n                this._getPaymentRequestBody(payment, store.getState())\n            ))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._orderActionCreator.loadCurrentOrder()(store),\n                        of(createAction(PaymentActionType.SubmitPaymentSucceeded, body))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(PaymentActionType.SubmitPaymentFailed, error))\n        );\n    }\n\n    initializeOffsitePayment(\n        methodId: string,\n        gatewayId?: string\n    ): ThunkAction<InitializeOffsitePaymentAction, InternalCheckoutSelectors> {\n        return store => {\n            const payload = this._getPaymentRequestBody({ gatewayId, methodId }, store.getState());\n\n            return concat(\n                of(createAction(PaymentActionType.InitializeOffsitePaymentRequested)),\n                this._paymentRequestSender.initializeOffsitePayment(payload)\n                    .then(() => createAction(PaymentActionType.InitializeOffsitePaymentSucceeded))\n            ).pipe(\n                catchError(error => throwErrorAction(PaymentActionType.InitializeOffsitePaymentFailed, error))\n            );\n        };\n    }\n\n    private _getPaymentRequestBody(payment: Payment, state: InternalCheckoutSelectors): PaymentRequestBody {\n        const billingAddress = state.billingAddress.getBillingAddress();\n        const checkout = state.checkout.getCheckout();\n        const customer = state.customer.getCustomer();\n        const order = state.order.getOrder();\n        const paymentMethod = this._getPaymentMethod(state.paymentMethods, payment.methodId, payment.gatewayId);\n        const shippingAddress = state.shippingAddress.getShippingAddress();\n        const consignments = state.consignments.getConsignments();\n        const shippingOption = state.consignments.getShippingOption();\n        const storeConfig = state.config.getStoreConfig();\n        const contextConfig = state.config.getContextConfig();\n        const instrumentMeta = state.instruments.getInstrumentsMeta();\n        const paymentMeta = state.paymentMethods.getPaymentMethodsMeta();\n        const orderMeta = state.order.getOrderMeta();\n        const internalCustomer = customer && billingAddress && mapToInternalCustomer(customer, billingAddress);\n\n        const authToken = instrumentMeta && payment.paymentData && isVaultedInstrument(payment.paymentData) ?\n            `${state.payment.getPaymentToken()}, ${instrumentMeta.vaultAccessToken}` :\n            state.payment.getPaymentToken();\n\n        if (!authToken) {\n            throw new StandardError();\n        }\n\n        return {\n            authToken,\n            paymentMethod,\n            customer: internalCustomer,\n            billingAddress: billingAddress && mapToInternalAddress(billingAddress),\n            shippingAddress: shippingAddress && mapToInternalAddress(shippingAddress, consignments),\n            shippingOption: shippingOption && mapToInternalShippingOption(shippingOption, true),\n            cart: checkout && mapToInternalCart(checkout),\n            order: order && mapToInternalOrder(order, orderMeta),\n            orderMeta,\n            payment: payment.paymentData,\n            quoteMeta: {\n                request: {\n                    ...paymentMeta,\n                    geoCountryCode: contextConfig && contextConfig.geoCountryCode,\n                },\n            },\n            source: 'bigcommerce-checkout-js-sdk',\n            store: pick(storeConfig && storeConfig.storeProfile, [\n                'storeHash',\n                'storeId',\n                'storeLanguage',\n                'storeName',\n            ]),\n        };\n    }\n\n    private _getPaymentMethod(\n        paymentMethodSelector: PaymentMethodSelector,\n        methodId: string,\n        gatewayId?: string\n    ): PaymentMethod | undefined {\n        const paymentMethod = paymentMethodSelector.getPaymentMethod(methodId, gatewayId);\n\n        if (!paymentMethod) {\n            return;\n        }\n\n        if (paymentMethod.method === 'multi-option' && !paymentMethod.gateway) {\n            return { ...paymentMethod, gateway: paymentMethod.id };\n        }\n\n        if (paymentMethod.initializationData && paymentMethod.initializationData.gateway) {\n            return { ...paymentMethod, id: paymentMethod.initializationData.gateway };\n        }\n\n        return paymentMethod;\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentRequestBody from './payment-request-body';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class PaymentRequestSender {\n    /**\n     * @constructor\n     * @param {BigpayClient} client\n     */\n    constructor(\n        private _client: any\n    ) {}\n\n    submitPayment(payload: PaymentRequestBody): Promise<Response> {\n        return new Promise((resolve, reject) => {\n            this._client.submitPayment(payload, (error: any, response: any) => {\n                if (error) {\n                    reject(this._transformResponse(error));\n                } else {\n                    resolve(this._transformResponse(response));\n                }\n            });\n        });\n    }\n\n    initializeOffsitePayment(payload: PaymentRequestBody): Promise<void> {\n        return new Promise(() => {\n            this._client.initializeOffsitePayment(payload);\n        });\n    }\n\n    private _transformResponse(response: any): Response {\n        return {\n            headers: {},\n            body: response.data,\n            status: response.status,\n            statusText: response.statusText,\n        };\n    }\n}\n","import { ReadableDataStore } from '@bigcommerce/data-store';\nimport { some } from 'lodash';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { Registry } from '../common/registry';\nimport { RegistryOptions } from '../common/registry/registry';\n\nimport PaymentMethod from './payment-method';\nimport * as paymentMethodTypes from './payment-method-types';\nimport PaymentStrategyType from './payment-strategy-type';\nimport PaymentStrategy from './strategies/payment-strategy';\n\nexport default class PaymentStrategyRegistry extends Registry<PaymentStrategy, PaymentStrategyType> {\n    constructor(\n        private _store: ReadableDataStore<InternalCheckoutSelectors>,\n        options?: PaymentStrategyRegistryOptions\n    ) {\n        super(options);\n    }\n\n    getByMethod(paymentMethod?: PaymentMethod): PaymentStrategy {\n        if (!paymentMethod) {\n            return this.get();\n        }\n\n        const token = this._getToken(paymentMethod);\n        const cacheToken = paymentMethod.gateway || paymentMethod.id;\n\n        return this.get(token, cacheToken);\n    }\n\n    private _getToken(paymentMethod: PaymentMethod): PaymentStrategyType {\n        const methodId = paymentMethod.gateway || paymentMethod.id;\n\n        if (this._hasFactoryForMethod(methodId)) {\n            return methodId;\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.OFFLINE) {\n            return PaymentStrategyType.OFFLINE;\n        }\n\n        if (this._isLegacyMethod(paymentMethod)) {\n            return PaymentStrategyType.LEGACY;\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.HOSTED) {\n            return PaymentStrategyType.OFFSITE;\n        }\n\n        return PaymentStrategyType.CREDIT_CARD;\n    }\n\n    private _hasFactoryForMethod(\n        methodId: string\n    ): methodId is PaymentStrategyType {\n        return this._hasFactory(methodId);\n    }\n\n    private _isLegacyMethod(paymentMethod: PaymentMethod): boolean {\n        const config = this._store.getState().config.getStoreConfig();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        const { clientSidePaymentProviders } = config.paymentSettings;\n\n        if (!clientSidePaymentProviders || paymentMethod.gateway === 'adyen') {\n            return false;\n        }\n\n        return !some(clientSidePaymentProviders, id =>\n            paymentMethod.id === id || paymentMethod.gateway === id\n        );\n    }\n}\n\nexport interface PaymentStrategyRegistryOptions extends RegistryOptions {\n    clientSidePaymentProviders?: string[];\n}\n","import { InvalidArgumentError } from '../../common/error/errors';\n\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(', ')}.`;\n        }\n\n        super(message);\n    }\n}\n","import { CheckoutStore, CheckoutValidator, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AfterpayScriptLoader from './afterpay-script-loader';\nimport AfterpaySdk from './afterpay-sdk';\n\nexport default class AfterpayPaymentStrategy implements PaymentStrategy {\n    private _afterpaySdk?: AfterpaySdk;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutValidator: CheckoutValidator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _afterpayScriptLoader: AfterpayScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId, options.gatewayId);\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._afterpayScriptLoader.load(paymentMethod, this._mapCountryToISO2(storeCountryName))\n            .then(afterpaySdk => {\n                this._afterpaySdk = afterpaySdk;\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._afterpaySdk) {\n            this._afterpaySdk = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paymentId = payload.payment && payload.payment.gatewayId;\n\n        if (!paymentId) {\n            throw new PaymentArgumentInvalidError(['payment.gatewayId']);\n        }\n\n        const useStoreCredit = !!payload.useStoreCredit;\n        const state = this._store.getState();\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(paymentId, { useStoreCredit })\n        )\n            .then(state => this._checkoutValidator.validate(state.checkout.getCheckout(), options))\n            .then(() => this._store.dispatch(\n                this._paymentMethodActionCreator.loadPaymentMethod(paymentId, options)\n            ))\n            .then(state => this._displayModal(storeCountryName, state.paymentMethods.getPaymentMethod(paymentId)))\n            // Afterpay will handle the rest of the flow so return a promise that doesn't really resolve\n            .then(() => new Promise<never>(() => {}));\n    }\n\n    finalize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._remoteCheckoutActionCreator.loadSettings(options.methodId))\n            .then(state => {\n                const payment = state.payment.getPaymentId();\n                const config = state.config.getContextConfig();\n                const afterpay = state.remoteCheckout.getCheckout('afterpay');\n\n                if (!payment) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config || !config.payment.token) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!afterpay || !afterpay.settings) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const orderPayload = {\n                    useStoreCredit: afterpay.settings.useStoreCredit,\n                };\n\n                const paymentPayload = {\n                    methodId: payment.providerId,\n                    paymentData: { nonce: config.payment.token },\n                };\n\n                return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n                    .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload)));\n            });\n    }\n\n    private _displayModal(countryName: string, paymentMethod?: PaymentMethod): void {\n        if (!this._afterpaySdk || !paymentMethod || !paymentMethod.clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._afterpaySdk.initialize({ countryCode: this._mapCountryToISO2(countryName)});\n        this._afterpaySdk.display({ token: paymentMethod.clientToken });\n    }\n\n    private _mapCountryToISO2(countryName: string): string {\n        switch (countryName) {\n        case 'Australia':\n            return 'AU';\n\n        case 'New Zealand':\n            return 'NZ';\n\n        case 'United States':\n            return 'US';\n\n        default:\n            return 'AU';\n        }\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AfterpaySdk from './afterpay-sdk';\nimport AfterpayWindow from './afterpay-window';\n\ninterface AfterpayScripts {\n    PROD: string;\n    SANDBOX: string;\n}\n\nconst SCRIPTS_DEFAULT: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal-sandbox.afterpay.com/afterpay-async.js',\n};\n\nconst SCRIPTS_US: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal.us-sandbox.afterpay.com/afterpay-async.js',\n};\n\n/** Class responsible for loading the Afterpay SDK */\nexport default class AfterpayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    /**\n     * Loads the appropriate Afterpay SDK depending on the payment method data.\n     * @param method the payment method data\n     */\n    load(method: PaymentMethod, countryCode: string): Promise<AfterpaySdk> {\n        const testMode = method.config.testMode || false;\n        const scriptURI = this._getScriptURI(countryCode, testMode);\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (window as AfterpayWindow).AfterPay);\n    }\n\n    private _getScriptURI(countryCode: string, testMode: boolean): string {\n        if (countryCode === 'US') {\n            return testMode ? SCRIPTS_US.SANDBOX : SCRIPTS_US.PROD;\n        }\n\n        return testMode ? SCRIPTS_DEFAULT.SANDBOX : SCRIPTS_DEFAULT.PROD;\n    }\n\n}\n","import { noop } from 'lodash';\n\nimport { isInternalAddressEqual, mapFromInternalAddress, mapToInternalAddress } from '../../../address';\nimport { BillingAddressActionCreator } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AmazonPayOrderReference from './amazon-pay-order-reference';\nimport AmazonPayPaymentInitializeOptions from './amazon-pay-payment-initialize-options';\nimport AmazonPayScriptLoader from './amazon-pay-script-loader';\nimport AmazonPayWallet, { AmazonPayWalletOptions } from './amazon-pay-wallet';\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _walletOptions?: AmazonPayPaymentInitializeOptions;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!amazonOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.amazon\" argument is not provided.');\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._walletOptions = amazonOptions;\n        this._paymentMethod = paymentMethod;\n\n        return new Promise((resolve, reject) => {\n            const onReady = () => {\n                this._createWallet(amazonOptions)\n                    .then(resolve)\n                    .catch(reject);\n            };\n\n            this._scriptLoader.loadWidget(paymentMethod, onReady)\n                .catch(reject);\n        })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._walletOptions = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n\n        if (!referenceId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload }, useStoreCredit = false } = payload;\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { referenceId, useStoreCredit })\n        )\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                }, options)\n            ))\n            .catch(error => {\n                if (error instanceof RequestError && error.body.type === 'provider_widget_error' && this._walletOptions) {\n                    return this._createWallet(this._walletOptions)\n                        .then(() => Promise.reject(error));\n                }\n\n                return Promise.reject(error);\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _getMerchantId(): string | undefined {\n        return this._paymentMethod && this._paymentMethod.config.merchantId;\n    }\n\n    private _getOrderReferenceId(): string | undefined {\n        const state = this._store.getState();\n        const amazon = state.remoteCheckout.getCheckout('amazon');\n\n        return amazon ? amazon.referenceId : undefined;\n    }\n\n    private _createWallet(options: AmazonPayPaymentInitializeOptions): Promise<AmazonPayWallet> {\n        return new Promise((resolve, reject) => {\n            const { container, onError = noop, onPaymentSelect = noop, onReady = noop } = options;\n            const referenceId = this._getOrderReferenceId();\n            const merchantId = this._getMerchantId();\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay Wallet widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const walletOptions: AmazonPayWalletOptions = {\n                amazonOrderReferenceId: referenceId,\n                design: { designMode: 'responsive' },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onPaymentSelect: orderReference => {\n                    this._synchronizeBillingAddress()\n                        .then(() => onPaymentSelect(orderReference))\n                        .catch(onError);\n                },\n                onReady: orderReference => {\n                    resolve();\n                    onReady(orderReference);\n                },\n            };\n\n            if (!walletOptions.amazonOrderReferenceId) {\n                walletOptions.onReady = orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                };\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.Wallet(walletOptions);\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeBillingAddress(): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializeBilling(methodId, { referenceId })\n        )\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.billing && amazon.billing.address;\n                const billingAddress = state.billingAddress.getBillingAddress();\n                const internalBillingAddress = billingAddress && mapToInternalAddress(billingAddress);\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, internalBillingAddress || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._billingAddressActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            });\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n}\n","export interface OverlayOptions {\n    background?: string;\n    id?: string;\n    transitionDuration?: number;\n}\n\nexport interface OverlayShowOptions {\n    onClick?(event: MouseEvent): void;\n}\n\nexport default class Overlay {\n    private _element: HTMLElement;\n    private _unregisterClick?: () => void;\n\n    constructor(options?: OverlayOptions) {\n        this._element = this._createElement(options);\n    }\n\n    show(options?: OverlayShowOptions): void {\n        if (this._element.parentElement) {\n            return;\n        }\n\n        this._registerClick(options);\n\n        document.body.appendChild(this._element);\n\n        // Fade In\n        setTimeout(() => this._element.style.opacity = '1');\n    }\n\n    remove(): void {\n        if (!this._element.parentElement) {\n            return;\n        }\n\n        if (this._unregisterClick) {\n            this._unregisterClick();\n        }\n\n        this._removeAfterTransition();\n\n        setTimeout(() => this._element.style.opacity = '0');\n    }\n\n    private _createElement(options?: OverlayOptions): HTMLElement {\n        const element = document.createElement('div');\n        const {\n            background = 'rgba(0, 0, 0, 0.8)',\n            id = null,\n            transitionDuration = 400,\n        } = options || {};\n\n        element.style.background = background;\n        element.style.display = 'block';\n        element.style.height = '100%';\n        element.style.left = '0px';\n        element.style.opacity = '0';\n        element.style.position = 'fixed';\n        element.style.top = '0px';\n        element.style.transition = `opacity ${transitionDuration}ms ease-out`;\n        element.style.width = '100%';\n        element.style.zIndex = '2147483647';\n\n        if (id) {\n            element.id = id;\n        }\n\n        return element;\n    }\n\n    private _registerClick(options?: OverlayShowOptions): void {\n        if (this._unregisterClick) {\n            this._unregisterClick();\n        }\n\n        if (options && options.onClick) {\n            const { onClick } = options;\n\n            this._element.addEventListener('click', onClick);\n\n            this._unregisterClick = () => {\n                this._element.removeEventListener('click', onClick);\n                this._unregisterClick = undefined;\n            };\n        }\n    }\n\n    private _removeAfterTransition(): void {\n        const handeTransition: (event: Event) => void = event => {\n            // NOTE: `event` is not correctly typed in this version of TS\n            if ((event as TransitionEvent).propertyName !== 'opacity') {\n                return;\n            }\n\n            if (this._element.parentElement) {\n                this._element.parentElement.removeChild(this._element);\n            }\n\n            this._element.removeEventListener('transitionend', handeTransition);\n        };\n\n        this._element.addEventListener('transitionend', handeTransition);\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class PaymentMethodCancelledError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Payment process was cancelled.');\n\n        this.type = 'payment_cancelled';\n    }\n}\n","import { Address } from '../../../address';\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { Overlay } from '../../../common/overlay';\nimport { CancellablePromise } from '../../../common/utility';\nimport { OrderPaymentRequestBody } from '../../../order';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport { CreditCardInstrument, NonceInstrument } from '../../payment';\n\nimport { BraintreePaypal, BraintreeRequestData } from './braintree';\nimport { BraintreePaymentInitializeOptions, BraintreeThreeDSecureOptions } from './braintree-payment-options';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default class BraintreePaymentProcessor {\n    private _threeDSecureOptions?: BraintreeThreeDSecureOptions;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _overlay: Overlay\n    ) {}\n\n    initialize(clientToken: string, options?: BraintreePaymentInitializeOptions): void {\n        this._braintreeSDKCreator.initialize(clientToken);\n        this._threeDSecureOptions = options && options.threeDSecure;\n    }\n\n    preloadPaypal(): Promise<BraintreePaypal> {\n        return this._braintreeSDKCreator.getPaypal();\n    }\n\n    tokenizeCard(payment: OrderPaymentRequestBody, billingAddress: Address): Promise<NonceInstrument> {\n        const { paymentData } = payment;\n        const requestData = this._mapToCreditCard(paymentData as CreditCardInstrument, billingAddress);\n\n        return this._braintreeSDKCreator.getClient()\n            .then(client => client.request(requestData))\n            .then(({ creditCards }) => ({\n                nonce: creditCards[0].nonce,\n            }));\n    }\n\n    paypal(amount: number, storeLanguage: string, currency: string, offerCredit: boolean): Promise<NonceInstrument> {\n        return this._braintreeSDKCreator.getPaypal()\n            .then(paypal => {\n                this._overlay.show({\n                    onClick: () => paypal.focusWindow(),\n                });\n\n                return paypal.tokenize({\n                    amount,\n                    currency,\n                    enableShippingAddress: true,\n                    flow: 'checkout',\n                    locale: storeLanguage,\n                    offerCredit,\n                    useraction: 'commit',\n                });\n            })\n            .then(response => {\n                this._overlay.remove();\n\n                return response;\n            })\n            .catch(error => {\n                this._overlay.remove();\n\n                throw error;\n            });\n    }\n\n    verifyCard(payment: OrderPaymentRequestBody, billingAddress: Address, amount: number): Promise<NonceInstrument> {\n        if (!this._threeDSecureOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { addFrame, removeFrame } = this._threeDSecureOptions;\n\n        return Promise.all([\n            this.tokenizeCard(payment, billingAddress),\n            this._braintreeSDKCreator.get3DS(),\n        ]).then(([paymentData, threeDSecure]) => {\n            const { nonce } = paymentData;\n            const cancelVerifyCard = () => threeDSecure.cancelVerifyCard()\n                .then(response => {\n                    verification.cancel(new PaymentMethodCancelledError());\n\n                    return response;\n                });\n\n            const verification = new CancellablePromise(\n                threeDSecure.verifyCard({\n                    addFrame: (error, iframe) => {\n                        addFrame(error, iframe, cancelVerifyCard);\n                    },\n                    amount,\n                    nonce,\n                    removeFrame,\n                })\n            );\n\n            return verification.promise;\n        });\n    }\n\n    appendSessionId(processedPayment: Promise<NonceInstrument>): Promise<NonceInstrument> {\n        return processedPayment\n            .then(paymentData => Promise.all([paymentData, this._braintreeSDKCreator.getDataCollector()]))\n            .then(([paymentData, { deviceData }]) => ({ ...paymentData, deviceSessionId: deviceData }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    private _mapToCreditCard(creditCard: CreditCardInstrument, billingAddress: Address): BraintreeRequestData {\n        let streetAddress = billingAddress.address1;\n\n        if (billingAddress.address2) {\n            streetAddress = ` ${billingAddress.address2}`;\n        }\n\n        return {\n            data: {\n                creditCard: {\n                    cardholderName: creditCard.ccName,\n                    number: creditCard.ccNumber,\n                    cvv: creditCard.ccCvv,\n                    expirationDate: `${creditCard.ccExpiry.month}/${creditCard.ccExpiry.year}`,\n                    options: {\n                        validate: false,\n                    },\n                    billingAddress: {\n                        countryName: billingAddress.country,\n                        postalCode: billingAddress.postalCode,\n                        streetAddress,\n                    },\n                },\n            },\n            endpoint: 'payment_methods/credit_cards',\n            method: 'post',\n        };\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport isCreditCardLike from '../../is-credit-card-like';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport Payment, { PaymentInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\n\nexport default class BraintreeCreditCardPaymentStrategy implements PaymentStrategy {\n    private _is3dsEnabled?: boolean;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(options.methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n                if (!paymentMethod || !paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(paymentMethod.clientToken, options.braintree);\n                this._is3dsEnabled = paymentMethod.config.is3dsEnabled;\n\n                return this._store.getState();\n            })\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(order, options)\n        )\n            .then(state =>\n                state.payment.isPaymentDataRequired(order.useStoreCredit) && payment ?\n                    this._preparePaymentData(payment) :\n                    Promise.resolve(payment as Payment)\n            )\n            .then(payment =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment(payment))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n\n    private _isUsingVaulting(paymentData: PaymentInstrument): boolean {\n        if (isCreditCardLike(paymentData)) {\n            return Boolean(paymentData.shouldSaveInstrument);\n        }\n\n        return isVaultedInstrument(paymentData);\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody): Promise<Payment> {\n        const { paymentData } = payment;\n        const state = this._store.getState();\n\n        if (paymentData && this._isUsingVaulting(paymentData)) {\n            return Promise.resolve(payment as Payment);\n        }\n\n        const order = state.order.getOrder();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!order) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrder);\n        }\n\n        if (!billingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const tokenizedCard = this._is3dsEnabled ?\n            this._braintreePaymentProcessor.verifyCard(payment, billingAddress, order.orderAmount) :\n            this._braintreePaymentProcessor.tokenizeCard(payment, billingAddress);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData }));\n    }\n}\n","import isVaultedInstrument from './is-vaulted-instrument';\nimport { CreditCardInstrument, PaymentInstrument } from './payment';\n\nexport default function isCreditCardLike(instrument: PaymentInstrument): instrument is CreditCardInstrument {\n    const card = instrument as CreditCardInstrument;\n\n    return !isVaultedInstrument(card) &&\n        typeof card.ccName === 'string' &&\n        typeof card.ccNumber === 'string' &&\n        typeof card.ccExpiry === 'object' &&\n        typeof card.ccExpiry.month === 'string' &&\n        typeof card.ccExpiry.year === 'string';\n    }\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError, PaymentMethodCancelledError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { BraintreeError } from './braintree';\nimport BraintreePaymentProcessor from './braintree-payment-processor';\nimport isBraintreeError from './is-braintree-error';\n\nexport default class BraintreePaypalPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor,\n        private _credit: boolean = false\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintree: braintreeOptions, methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (this._paymentMethod && this._paymentMethod.nonce) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(this._paymentMethod.clientToken, braintreeOptions);\n\n                return this._braintreePaymentProcessor.preloadPaypal();\n            })\n            .then(() => this._store.getState())\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return (payment ? this._preparePaymentData(payment, order.useStoreCredit) : Promise.resolve(payment))\n            .then(payment => Promise.all([payment, this._store.dispatch(this._orderActionCreator.submitOrder(order, options))]))\n            .then(([payment]) => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)))\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _handleError(error: BraintreeError | Error): never {\n        if (!isBraintreeError(error)) {\n            throw error;\n        }\n\n        if (error.code === 'PAYPAL_POPUP_CLOSED') {\n            throw new PaymentMethodCancelledError(error.message);\n        }\n\n        throw new StandardError(error.message);\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody, useStoreCredit?: boolean): Promise<Payment> {\n        const state = this._store.getState();\n        const grandTotal = state.checkout.getGrandTotal(useStoreCredit);\n        const config = state.config.getStoreConfig();\n\n        if (!grandTotal) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { currency, storeProfile: { storeLanguage } } = config;\n        const { method, nonce } = this._paymentMethod;\n\n        if (nonce) {\n            return Promise.resolve({ ...payment, paymentData: { nonce, method } });\n        }\n\n        const tokenizedCard = this._braintreePaymentProcessor\n            .paypal(grandTotal, storeLanguage, currency.code, this._credit);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData: { ...paymentData, method } }));\n    }\n}\n","export enum ChasePayEventType {\n    StartCheckout = 'startCheckout',\n    CompleteCheckout = 'completeCheckout',\n    CancelCheckout = 'cancelCheckout',\n}\n\nexport interface ChasePayEventMap {\n    [ChasePayEventType.StartCheckout](digitalSessionId: string): void;\n    [ChasePayEventType.CompleteCheckout](payload: ChasePaySuccessPayload): void;\n    [ChasePayEventType.CancelCheckout](): void;\n}\n\nexport interface ChasePayHostWindow extends Window {\n    JPMC?: JPMC;\n}\n\nexport interface JPMC {\n    ChasePay: ChasePay;\n}\n\nexport interface ChasePaySuccessPayload {\n    sessionToken: string;\n}\n\nexport interface ChasePayInsertOptions {\n    color?: string;\n    containers?: string[];\n    height?: number;\n    width?: number;\n}\n\nexport interface ChasePayConfigureOptions {\n    language?: string;\n    zindex?: number;\n    sessionWarningTime?: number;\n    sessionTimeoutTime?: number;\n}\n\nexport interface ChasePay {\n    EventType: {\n        START_CHECKOUT: ChasePayEventType.StartCheckout;\n        COMPLETE_CHECKOUT: ChasePayEventType.CompleteCheckout;\n        CANCEL_CHECKOUT: ChasePayEventType.CancelCheckout;\n    };\n    isChasePayUp(): boolean;\n    insertButtons(options: ChasePayInsertOptions): void;\n    insertBrandings(options: ChasePayInsertOptions): void;\n    startCheckout(digitalSessionId?: string): void;\n    showLoadingAnimation(): void;\n    configure(options: ChasePayConfigureOptions): void;\n    on<ChasePayEventType extends keyof ChasePayEventMap>(eventType: ChasePayEventType, callback: ChasePayEventMap[ChasePayEventType]): {};\n}\n\nexport interface ChasePayInitializeOptions {\n    /**\n     * This container is used to host the chasepay branding logo.\n     * It should be an HTML element.\n     */\n    logoContainer: string;\n\n    /**\n     * This walletButton is used to set an event listener, provide an element ID if you want\n     * users to be able to launch the ChasePay wallet modal by clicking on a button.\n     * It should be an HTML element.\n     */\n    walletButton?: string;\n\n    /**\n     * A callback that gets called when the customer selects a payment option.\n     */\n    onPaymentSelect?(): void;\n}\n","import { BraintreeError } from './braintree';\n\nexport default function isBraintreeError(error: BraintreeError | Error): error is BraintreeError {\n    return error.name === 'BraintreeError';\n}\n","import { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreeVisaCheckoutPaymentProcessor from './braintree-visacheckout-payment-processor';\nimport { VisaCheckoutPaymentSuccessPayload } from './visacheckout';\nimport VisaCheckoutScriptLoader from './visacheckout-script-loader';\n\nexport default class BraintreeVisaCheckoutPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    onError = () => {},\n                    onPaymentSelect = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: false,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, visaInitOptions]) => {\n                    visaCheckout.init(visaInitOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .then(() => onPaymentSelect())\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (payment, error) => onError(error));\n                });\n            })\n            .then(() => this._store.getState());\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData || !this._paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { nonce } = this._paymentMethod.initializationData;\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData: { nonce } }))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                paymentSuccessPayload,\n                state.shippingAddress.getShippingAddress(),\n                state.billingAddress.getBillingAddress()\n            )\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { Subject } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { toFormUrlEncoded } from '../../../common/http-request';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\nimport { WepayRiskClient } from '../wepay';\n\nimport { ChasePay, ChasePayEventType, ChasePaySuccessPayload } from './chasepay';\nimport ChasePayInitializeOptions from './chasepay-initialize-options';\nimport ChasePayScriptLoader from './chasepay-script-loader';\n\nexport default class ChasePayPaymentStrategy implements PaymentStrategy {\n    private _chasePayClient?: ChasePay;\n    private _methodId!: string;\n    private _walletButton?: HTMLElement;\n    private _walletEvent$: Subject<{ type: ChasePayEventType }>;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        this._walletEvent$ = new Subject();\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        if (!options.chasepay) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.chasepay\" argument is not provided.');\n        }\n\n        const walletButton = options.chasepay.walletButton && document.getElementById(options.chasepay.walletButton);\n\n        if (walletButton) {\n            this._walletButton = walletButton;\n            this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n        }\n\n        return this._configureWallet(options.chasepay)\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._chasePayClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._getPayment()\n            .catch(error => {\n                if (error.subtype === MissingDataErrorType.MissingPayment) {\n                    return this._displayWallet()\n                        .then(() => this._getPayment());\n                }\n\n                throw error;\n            })\n            .then(payment =>\n                this._createOrder(payment, payload.useStoreCredit, options)\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _configureWallet(options: ChasePayInitializeOptions): Promise<void> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return this._chasePayScriptLoader.load(paymentMethod.config.testMode)\n            .then(({ ChasePay }) => {\n                this._chasePayClient = ChasePay;\n\n                if (options.logoContainer && document.getElementById(options.logoContainer)) {\n                    this._chasePayClient.insertBrandings({\n                        color: 'white',\n                        containers: [options.logoContainer],\n                    });\n                }\n\n                this._chasePayClient.configure({\n                    language: storeConfig.storeProfile.storeLanguage,\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CancelCheckout, () => {\n                    this._walletEvent$.next({ type: ChasePayEventType.CancelCheckout });\n\n                    if (options.onCancel) {\n                        options.onCancel();\n                    }\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CompleteCheckout, (payload: ChasePaySuccessPayload) => {\n                    this._setSessionToken(payload.sessionToken)\n                        .then(() => {\n                            this._walletEvent$.next({ type: ChasePayEventType.CompleteCheckout });\n\n                            if (options.onPaymentSelect) {\n                                options.onPaymentSelect();\n                            }\n                        });\n                });\n            });\n    }\n\n    private _displayWallet(): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n                .then(state => {\n                    const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                    if (!this._chasePayClient) {\n                        throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                    }\n\n                    if (!paymentMethod) {\n                        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                    }\n\n                    this._chasePayClient.showLoadingAnimation();\n                    this._chasePayClient.startCheckout(paymentMethod.initializationData.digitalSessionId);\n                });\n\n            // Wait for payment selection\n            return new Promise((resolve, reject) => {\n                this._walletEvent$\n                    .pipe(take(1))\n                    .subscribe((event: { type: ChasePayEventType }) => {\n                        if (event.type === ChasePayEventType.CancelCheckout) {\n                            reject(new PaymentMethodCancelledError());\n                        } else if (event.type === ChasePayEventType.CompleteCheckout) {\n                            resolve();\n                        }\n                    });\n            });\n        }, { methodId: this._methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _setSessionToken(sessionToken: string): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const merchantRequestId = paymentMethod && paymentMethod.initializationData.merchantRequestId;\n\n        return this._requestSender.post('checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: toFormUrlEncoded({\n                action: 'set_external_checkout',\n                provider: this._methodId,\n                sessionToken,\n                merchantRequestId,\n            }),\n        })\n            // Re-hydrate checkout data\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId)),\n            ]))\n            .then(() => this._store.getState());\n    }\n\n    private _getPayment(): Promise<Payment> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n            .then(() => {\n                if (this._methodId === 'wepay') {\n                    return this._wepayRiskClient.initialize()\n                        .then(client => client.getRiskToken());\n                }\n\n                return '';\n            })\n            .then(riskToken => {\n                const state = this._store.getState();\n                const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!paymentMethod.initializationData.paymentCryptogram) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPayment);\n                }\n\n                const paymentData = {\n                    method: this._methodId,\n                    cryptogramId: paymentMethod.initializationData.paymentCryptogram,\n                    eci: paymentMethod.initializationData.eci,\n                    transactionId: btoa(paymentMethod.initializationData.reqTokenId),\n                    ccExpiry: {\n                        month: paymentMethod.initializationData.expDate.toString().substr(0, 2),\n                        year: paymentMethod.initializationData.expDate.toString().substr(2, 2),\n                    },\n                    ccNumber: paymentMethod.initializationData.accountNum,\n                    accountMask: paymentMethod.initializationData.accountMask,\n                    extraData: riskToken ? { riskToken } : undefined,\n                };\n\n                return {\n                    methodId: this._methodId,\n                    paymentData,\n                };\n            });\n    }\n\n    private _createOrder(payment: Payment, useStoreCredit?: boolean, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit }, options))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)));\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): void {\n        event.preventDefault();\n\n        this._displayWallet();\n    }\n}\n","export default interface SquarePaymentForm {\n    build(): void;\n    requestCardNonce(): void;\n    setPostalCode(postalCode: string): void;\n}\n\nexport interface SquarePaymentFormConstructor {\n    new(options: SquareFormOptions): SquarePaymentForm;\n}\n\nexport interface SquareFormOptions {\n    applicationId: string;\n    env: string;\n    locationId: string;\n    inputClass?: string;\n    inputStyles?: string[];\n    callbacks?: SquareFormCallbacks;\n    cardNumber: SquareFormElement;\n    cvv: SquareFormElement;\n    expirationDate: SquareFormElement;\n    postalCode: SquareFormElement;\n    masterpass: SquareFormElement;\n}\nexport interface LineItem {\n    label: string;\n    amount: string;\n    pending: boolean;\n}\n\nexport interface SquarePaymentRequest {\n    requestShippingAddress: boolean;\n    requestBillingInfo: boolean;\n    shippingContact?: Contact;\n    countryCode: string;\n    currencyCode: string;\n    lineItems?: LineItem[];\n    total: LineItem;\n}\n\nexport interface NonceGenerationError {\n    type: string;\n    message: string;\n    field: string;\n}\n\nexport interface CardData {\n    card_brand: CardBrand;\n    last_4: number;\n    exp_month: number;\n    exp_year: number;\n    billing_postal_code: string;\n    digital_wallet_type: DigitalWalletType;\n}\n\nexport interface Contact {\n    familyName: string;\n    givenName: string;\n    email: string;\n    country: string;\n    countryName: string;\n    region: string;\n    city: string;\n    addressLines: string[];\n    postalCode: string;\n    phone: string;\n}\n\nexport enum CardBrand {\n    americanExpress = 'AMERICAN_EXPRESS',\n    discover = 'DISCOVER',\n    discoverDiners = 'DISCOVER_DINERS',\n    JCB = 'JCB',\n    masterCard = 'MASTERCARD',\n    unionPay = 'CHINA_UNIONPAY',\n    unknown = 'OTHER_BRAND',\n    visa = 'VISA',\n    squareGift = 'SQUARE_GIFT_CARD',\n}\n\nexport enum DigitalWalletType {\n    applePay = 'APPLEPAY',\n    masterpass = 'MASTERPASS',\n    none = 'NONE',\n}\n\n/**\n * Configures any form element provided by Square payment.\n */\nexport interface SquareFormElement {\n    /**\n     * The ID of the container which the form element should insert into.\n     */\n    elementId: string;\n\n    /**\n     * The placeholder text to use for the form element, if provided.\n     */\n    placeholder?: string;\n}\n\nexport interface SquareFormCallbacks {\n    paymentFormLoaded?(form: SquarePaymentForm): void;\n    unsupportedBrowserDetected?(): void;\n    cardNonceResponseReceived?(\n        errors?: NonceGenerationError[],\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): void;\n    methodsSupported?(methods: { [key: string]: boolean }): void;\n    createPaymentRequest?(): void;\n}\n\nexport type SquareFormFactory = (options: SquareFormOptions) => SquarePaymentForm;\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class CreditCardPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { GooglePaymentData, PaymentMethodData } from './googlepay';\nimport GooglePayPaymentInitializeOptions from './googlepay-initialize-options';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\n\nexport default class GooglePayPaymentStrategy implements PaymentStrategy {\n    private _googlePayOptions?: GooglePayPaymentInitializeOptions;\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        return this._googlePayPaymentProcessor.initialize(this._methodId)\n            .then(() => {\n                this._googlePayOptions = this._getGooglePayOptions(options);\n\n                if (!this._googlePayOptions) {\n                    throw new InvalidArgumentError('Unable to initialize payment because \"options.googlepay\" argument is not provided.');\n                }\n\n                const walletButton = this._googlePayOptions.walletButton && document.getElementById(this._googlePayOptions.walletButton);\n\n                if (walletButton) {\n                    this._walletButton = walletButton;\n                    this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                }\n\n                return this._store.getState();\n            });\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n\n        return this._googlePayPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._googlePayOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.googlepay\" argument is not provided.');\n        }\n\n        const {\n            onError = () => {},\n            onPaymentSelect = () => {},\n        } = this._googlePayOptions;\n\n        return Promise.resolve(this._getPayment())\n            .then(payment => {\n                if (!payment.paymentData.nonce || !payment.paymentData.cardInformation) {\n                    // TODO: Find a way to share the code with _handleWalletButtonClick method\n                    return this._googlePayPaymentProcessor.displayWallet()\n                        .then(paymentData => this._paymentInstrumentSelected(paymentData))\n                        .then(() => onPaymentSelect())\n                        .then(() => this._getPayment())\n                        .catch(error => {\n                            if (error.statusCode !== 'CANCELED') {\n                                onError(error);\n                            }\n                        });\n                }\n\n                return payment;\n            })\n            .then(payment =>\n                this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit: payload.useStoreCredit }, options))\n                    .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(this._getPayment())))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _paymentInstrumentSelected(paymentData: GooglePaymentData) {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const methodId = this._methodId;\n\n        // TODO: Revisit how we deal with GooglePaymentData after receiving it from Google\n        return this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n    }\n\n    private _getGooglePayOptions(options: PaymentInitializeOptions): GooglePayPaymentInitializeOptions {\n        if (options.methodId === 'googlepaybraintree' && options.googlepaybraintree) {\n            return options.googlepaybraintree;\n        }\n\n        if (options.methodId === 'googlepaystripe' && options.googlepaystripe) {\n            return options.googlepaystripe;\n        }\n\n        throw new InvalidArgumentError();\n    }\n\n    private _getPayment(): PaymentMethodData {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const paymentData = {\n            method: this._methodId,\n            nonce: paymentMethod.initializationData.nonce,\n            cardInformation: paymentMethod.initializationData.card_information,\n        };\n\n        return {\n            methodId: this._methodId,\n            paymentData,\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<InternalCheckoutSelectors> {\n        event.preventDefault();\n\n        if (!this._methodId || !this._googlePayOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const methodId = this._methodId;\n\n        const {\n            onError = () => {},\n            onPaymentSelect = () => {},\n        } = this._googlePayOptions;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._googlePayPaymentProcessor.displayWallet()\n                .then(paymentData => this._paymentInstrumentSelected(paymentData))\n                .then(() => onPaymentSelect())\n                .catch(error => {\n                    if (error.statusCode !== 'CANCELED') {\n                        onError(error);\n                    }\n                });\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n}\n","import { Address } from '../../../address';\nimport BillingAddress from '../../../billing/billing-address';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport PaymentMethodInvalidError from '../../errors/payment-method-invalid-error';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport KlarnaCredit, {KlarnaAddress, KlarnaLoadResponse, KlarnaUpdateSessionParams} from './klarna-credit';\nimport KlarnaScriptLoader from './klarna-script-loader';\n\nexport default class KlarnaPaymentStrategy implements PaymentStrategy {\n    private _klarnaCredit?: KlarnaCredit;\n    private _unsubscribe?: (() => void);\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _klarnaScriptLoader: KlarnaScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._klarnaScriptLoader.load()\n            .then(klarnaCredit => { this._klarnaCredit = klarnaCredit; })\n            .then(() => {\n                this._unsubscribe = this._store.subscribe(\n                    state => {\n                        if (state.paymentStrategies.isInitialized(options.methodId)) {\n                            this._loadWidget(options);\n                        }\n                    },\n                    state => {\n                        const checkout = state.checkout.getCheckout();\n\n                        return checkout && checkout.grandTotal;\n                    }\n                );\n\n                return this._loadWidget(options);\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._unsubscribe) {\n            this._unsubscribe();\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload } } = payload;\n\n        return this._authorize()\n            .then(({ authorization_token: authorizationToken }) => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { authorizationToken })\n            ))\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                    // Note: API currently doesn't support using Store Credit with Klarna.\n                    // To prevent deducting customer's store credit, set it as false.\n                    useStoreCredit: false,\n                }, options)\n            ));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _loadWidget(options: PaymentInitializeOptions): Promise<KlarnaLoadResponse> {\n        if (!options.klarna) {\n            throw new InvalidArgumentError('Unable to load widget because \"options.klarna\" argument is not provided.');\n        }\n\n        const { methodId, klarna: { container, onLoad } } = options;\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise<KlarnaLoadResponse>((resolve, reject) => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                const billingAddress = state.billingAddress.getBillingAddress();\n                const shippingAddress = state.shippingAddress.getShippingAddress();\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!billingAddress) {\n                    throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n                }\n\n                if (!this._klarnaCredit || !paymentMethod.clientToken) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const updateSessionData = this._getUpdateSessionData(billingAddress, shippingAddress);\n\n                this._klarnaCredit.init({ client_token: paymentMethod.clientToken });\n\n                this._klarnaCredit.load({ container }, updateSessionData, response => {\n                    if (onLoad) {\n                        onLoad(response);\n                    }\n\n                    if (!response.show_form) {\n                        reject(new PaymentMethodInvalidError());\n                    } else {\n                        resolve(response);\n                    }\n                });\n            }));\n    }\n\n    private _getUpdateSessionData(billingAddress: BillingAddress, shippingAddress?: Address): KlarnaUpdateSessionParams | {} {\n        if (billingAddress.countryCode === 'US') {\n            return {};\n        }\n\n        const data = {} as KlarnaUpdateSessionParams;\n\n        data.billing_address = this.__mapToKlarnaAddress(billingAddress, billingAddress.email);\n\n        if (shippingAddress) {\n            data.shipping_address = this.__mapToKlarnaAddress(shippingAddress, billingAddress.email);\n        }\n\n        return data;\n    }\n\n    private __mapToKlarnaAddress(address: BillingAddress | Address, email?: string): KlarnaAddress {\n        return {\n            street_address: address.address1,\n            city: address.city,\n            country: address.countryCode,\n            given_name: address.firstName,\n            family_name: address.lastName,\n            postal_code: address.postalCode,\n            region: address.stateOrProvince,\n            email,\n        };\n    }\n\n    private _authorize(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            if (!this._klarnaCredit) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            this._klarnaCredit.authorize({}, res => {\n                if (res.approved) {\n                    return resolve(res);\n                }\n\n                if (res.show_form) {\n                    return reject(new PaymentMethodCancelledError());\n                }\n\n                reject(new PaymentMethodInvalidError());\n            });\n        });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport KlarnaCredit from './klarna-credit';\nimport KlarnaWindow from './klarna-window';\n\nconst SDK_URL = '//credit.klarnacdn.net/lib/v1/api.js';\n\nexport default class KlarnaScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<KlarnaCredit> {\n        return this._scriptLoader.loadScript(SDK_URL)\n            .then(() => (window as KlarnaWindow).Klarna.Credit);\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class LegacyPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport getCallbackUrl from './get-callback-url';\nimport { Masterpass, MasterpassCheckoutOptions } from './masterpass';\nimport MasterpassScriptLoader from './masterpass-script-loader';\n\nexport default class MasterpassPaymentStrategy implements PaymentStrategy {\n    private _masterpassClient?: Masterpass;\n    private _paymentMethod?: PaymentMethod;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._masterpassScriptLoader.load(this._paymentMethod.config.testMode)\n            .then(masterpass => {\n                this._masterpassClient = masterpass;\n\n                if (!options.masterpass) {\n                    throw new InvalidArgumentError('Unable to initialize payment because \"options.masterpass\" argument is not provided.');\n                }\n\n                const walletButton  = options.masterpass.walletButton && document.getElementById(options.masterpass.walletButton);\n\n                if (walletButton) {\n                    this._walletButton = walletButton;\n                    this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                }\n\n                return this._store.getState();\n            });\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._masterpassClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment } = payload;\n        const order = { useStoreCredit: payload.useStoreCredit };\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData || !this._paymentMethod.initializationData.gateway) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        // TODO: Refactor the API endpoint to return nonce in the right place.\n        const paymentData = this._paymentMethod.initializationData.paymentData;\n\n        // TODO: Redirect to Masterpass if nonce has not been generated yet. And then finalise the order when the shopper is redirected back to the checkout page.\n        if (!paymentData) {\n            throw new InvalidArgumentError('Unable to proceed because \"paymentMethod.initializationData.paymentData\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData })));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: this._paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.subtotal.toFixed(2),\n            currency: storeConfig.currency.code,\n            cartId: checkout.cart.id,\n            suppressShippingAddress: false,\n            callbackUrl: getCallbackUrl('checkout'),\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event) {\n        event.preventDefault();\n\n        if (!this._masterpassClient) {\n            return;\n        }\n\n        const payload = this._createMasterpassPayload();\n        this._masterpassClient.checkout(payload);\n    }\n}\n","import { omit } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class NoPaymentDataRequiredPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options)\n        );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class OfflinePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const action = this._orderActionCreator.submitOrder({\n            ...payload,\n            payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n        }, options);\n\n        return this._store.dispatch(action);\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class OffsitePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const orderPayload = this._shouldSubmitFullPayload(payment) ? payload : order;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.initializeOffsitePayment(payment.methodId, payment.gatewayId))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n        const status = state.payment.getPaymentStatus();\n\n        if (order && (status === paymentStatusTypes.ACKNOWLEDGE || status === paymentStatusTypes.FINALIZE)) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _shouldSubmitFullPayload(payment?: OrderPaymentRequestBody): boolean {\n        // FIXME: A temporary workaround to support offsite payment methods\n        // where their return URL needs to be provided by the core app.\n        if (!payment) {\n            return false;\n        }\n\n        return payment.gatewayId === 'adyen' || payment.methodId === 'ccavenuemars';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\n\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class PaypalProPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isPaymentAcknowledged()) {\n            return this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n                }, options)\n            );\n        }\n\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _isPaymentAcknowledged(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nimport PaypalScriptLoader from './paypal-script-loader';\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalExpressPaymentStrategy implements PaymentStrategy {\n    private _paypalSdk?: PaypalSDK;\n    private _paymentMethod?: PaymentMethod;\n    private _useRedirectFlow: boolean = false;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _scriptLoader: PaypalScriptLoader,\n        private _window: PaypalHostWindow = window\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n        this._useRedirectFlow = (options.paypalexpress && options.paypalexpress.useRedirectFlow) === true;\n\n        if (!this._isInContextEnabled()) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._scriptLoader.loadPaypal()\n            .then(paypal => {\n                this._paypalSdk = paypal;\n\n                if (!this._paymentMethod || !this._paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._paypalSdk.checkout.setup(this._paymentMethod.config.merchantId, {\n                    button: 'paypal-button',\n                    environment: this._paymentMethod.config.testMode ? 'sandbox' : 'production',\n                });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._isInContextEnabled() && this._paypalSdk) {\n            this._paypalSdk.checkout.closeFlow();\n            this._paypalSdk = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paypal = this._paypalSdk;\n\n        if (this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n        }\n\n        if (!this._isInContextEnabled() || this._useRedirectFlow) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n                .then(state => {\n                    const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                    if (redirectUrl) {\n                        this._window.top.location.href = redirectUrl;\n                    }\n\n                    // We need to hold execution so the consumer does not redirect us somewhere else\n                    return new Promise<never>(() => {});\n                });\n        }\n\n        if (!paypal) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        paypal.checkout.initXO();\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n            .then(state => {\n                const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                if (redirectUrl) {\n                    paypal.checkout.startFlow(redirectUrl);\n                }\n\n                // We need to hold execution so the consumer does not redirect us somewhere else\n                return new Promise<never>(() => {});\n            })\n            .catch(error => {\n                paypal.checkout.closeFlow();\n\n                return Promise.reject(error);\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _isAcknowledgedOrFinalized(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE\n            || state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE;\n    }\n\n    private _isInContextEnabled(): boolean {\n        return !!(this._paymentMethod && this._paymentMethod.config.merchantId);\n    }\n}\n","import { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class SagePayPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _formPoster: any\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            )\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                    return Promise.reject(error);\n                }\n\n                return new Promise(() => {\n                    this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                        PaReq: error.body.three_ds_result.payer_auth_request,\n                        TermUrl: error.body.three_ds_result.callback_url,\n                        MD: error.body.three_ds_result.merchant_data,\n                    });\n                });\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import StandardError from './standard-error';\n\nexport default class UnsupportedBrowserError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unsupported browser error');\n\n        this.type = 'unsupported_browser';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\nimport { omit } from 'lodash';\nimport { noop } from 'rxjs';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    StandardError,\n    TimeoutError,\n    UnsupportedBrowserError,\n} from '../../../common/error/errors';\nimport { toFormUrlEncoded } from '../../../common/http-request';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { NonceInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport SquarePaymentForm, {\n    CardData,\n    Contact,\n    DigitalWalletType,\n    NonceGenerationError,\n    SquareFormElement,\n    SquareFormOptions,\n    SquarePaymentRequest\n} from './square-form';\nimport SquarePaymentInitializeOptions from './square-payment-initialize-options';\nimport SquareScriptLoader from './square-script-loader';\n\nexport default class SquarePaymentStrategy implements PaymentStrategy {\n    private _deferredRequestNonce?: DeferredPromise;\n    private _paymentForm?: SquarePaymentForm;\n    private _paymentMethod?: PaymentMethod;\n    private _squareOptions?: SquarePaymentInitializeOptions;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _scriptLoader: SquareScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n\n        this._syncPaymentMethod(methodId);\n\n        return this._scriptLoader.load()\n            .then(createSquareForm =>\n                new Promise((resolve, reject) => {\n                    this._paymentForm = createSquareForm(\n                        this._getFormOptions(options, { resolve, reject })\n                    );\n                    this._paymentForm.build();\n                }))\n            .then(() => this._store.getState());\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment } = orderRequest;\n\n        if (!payment || !payment.methodId) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        this._syncPaymentMethod(payment.methodId);\n\n        return this._getNonceInstrument(payment.methodId)\n            .then(paymentData =>\n                this._store.dispatch(this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options))\n                .then(() =>\n                    this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n                ));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _syncPaymentMethod(methodId: string): void {\n        const state = this._store.getState();\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n    }\n\n    private _getCountryCode(countryName: string) {\n        switch (countryName.toUpperCase()) {\n            case 'NEW ZELAND':\n                return 'NZ';\n            case 'AUSTRALIA':\n                return 'AU';\n            default:\n                return 'US';\n        }\n    }\n\n    private _getNonceInstrument(methodId: string): Promise<NonceInstrument> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (paymentMethod) {\n            const { initializationData } = paymentMethod;\n            if (initializationData && initializationData.paymentData.nonce) {\n                return Promise.resolve({ nonce: paymentMethod.initializationData.paymentData.nonce });\n            }\n        }\n\n        return new Promise<NonceInstrument>((resolve, reject) => {\n            if (!this._paymentForm) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            if (this._deferredRequestNonce) {\n                this._deferredRequestNonce.reject(new TimeoutError());\n            }\n\n            this._deferredRequestNonce = { resolve, reject };\n            this._paymentForm.requestCardNonce();\n        });\n    }\n\n    private _getFormOptions(options: PaymentInitializeOptions, deferred: DeferredPromise): SquareFormOptions {\n        const { square: squareOptions } = options;\n\n        if (!squareOptions || !this._paymentMethod) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.square\" argument is not provided.');\n        }\n\n        this._squareOptions = squareOptions;\n\n        return {\n            ...this._squareOptions,\n            ...this._paymentMethod.initializationData,\n            callbacks: {\n                cardNonceResponseReceived: (errors, nonce, cardData, billingContact, shippingContact) => {\n                    if (cardData && cardData.digital_wallet_type !== DigitalWalletType.none) {\n                        this._handleWalletNonceResponse(errors, nonce, cardData, billingContact, shippingContact);\n                    } else {\n                        this._handleCardNonceResponse(errors, nonce);\n                    }\n                },\n                createPaymentRequest: () => this._paymentRequestPayload(),\n                methodsSupported: methods => {\n                    const { masterpass } = squareOptions;\n\n                    if (masterpass) {\n                        this._showPaymentMethods(methods, masterpass);\n                    }\n                },\n                paymentFormLoaded: () => {\n                    deferred.resolve();\n                    this._setPostalCode();\n                },\n                unsupportedBrowserDetected: () => deferred.reject(new UnsupportedBrowserError()),\n            },\n        };\n    }\n\n    private _handleWalletNonceResponse(\n        errors?: NonceGenerationError[],\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact\n    ): void {\n        const onError = this._squareOptions && this._squareOptions.onError || noop;\n        const onPaymentSelect = this._squareOptions && this._squareOptions.onPaymentSelect || noop;\n\n        if (errors) {\n            onError(errors);\n        } else if (nonce && this._paymentMethod) {\n            this._paymentInstrumentSelected(\n                this._paymentMethod.id,\n                nonce,\n                cardData,\n                billingContact,\n                shippingContact\n            )\n                .then(onPaymentSelect)\n                .catch(onError);\n        }\n    }\n\n    private _handleCardNonceResponse(errors?: NonceGenerationError[], nonce?: string): void {\n        if (!this._deferredRequestNonce) {\n            throw new StandardError();\n        }\n\n        if (nonce && !errors) {\n            this._deferredRequestNonce.resolve({ nonce });\n\n            return;\n        }\n\n        const onError = this._squareOptions && this._squareOptions.onError || noop;\n\n        onError(errors);\n\n        this._deferredRequestNonce.reject(errors);\n    }\n\n    private _paymentInstrumentSelected(\n        methodId: string,\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): Promise<InternalCheckoutSelectors> {\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._setExternalCheckoutData(nonce, cardData, billingContact, shippingContact)\n            .then(() =>\n                Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _paymentRequestPayload(): SquarePaymentRequest {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return {\n            requestShippingAddress: true,\n            requestBillingInfo: true,\n            currencyCode: storeConfig.currency.code,\n            countryCode: this._getCountryCode(storeConfig.storeProfile.storeCountry),\n            total: {\n                label: storeConfig.storeProfile.storeName,\n                amount: String(checkout.subtotal),\n                pending: false,\n            },\n        };\n    }\n\n    private _setExternalCheckoutData(nonce?: string, cardData?: CardData, billingContact?: Contact, shippingContact?: Contact): Promise<Response<any>> {\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: toFormUrlEncoded({\n                nonce,\n                provider: 'squarev2',\n                action: 'set_external_checkout',\n                cardData: JSON.stringify(cardData),\n                billingContact: JSON.stringify(billingContact),\n                shippingContact: JSON.stringify(shippingContact),\n            }),\n        });\n    }\n\n    private _setPostalCode(): void {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!this._paymentForm) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (billingAddress && billingAddress.postalCode) {\n            this._paymentForm.setPostalCode(billingAddress.postalCode);\n        }\n    }\n\n    private _showPaymentMethods(methods: { [key: string]: boolean }, element: SquareFormElement): void {\n        const masterpassBtn = document.getElementById(element.elementId);\n\n        if (masterpassBtn && methods.masterpass) {\n            masterpassBtn.style.display = 'inline-block';\n        }\n    }\n}\n\nexport interface DeferredPromise {\n    resolve(resolution?: NonceInstrument): void;\n    reject(reason?: any): void;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { SquareFormFactory, SquareFormOptions } from './square-form';\nimport SquareWindow from './square-window';\n\nexport default class SquareScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<SquareFormFactory> {\n        const scriptURI = '//js.squareup.com/v2/paymentform';\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (options: SquareFormOptions) =>\n                new (window as SquareWindow).SqPaymentForm(options)\n            );\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport WepayRisk from './wepay-risk';\nimport WepayWindow from './wepay-window';\n\nconst SCRIPT_SRC = '//static.wepay.com/min/js/risk.1.latest.js';\n\nexport default class WepayRiskClient {\n    private _riskClient?: WepayRisk;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    initialize(): Promise<WepayRiskClient> {\n        return this._scriptLoader\n            .loadScript(SCRIPT_SRC)\n            .then(() => this._riskClient = (window as WepayWindow).WePay.risk)\n            .then(() => this);\n    }\n\n    getRiskToken(): string {\n        if (!this._riskClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._riskClient.generate_risk_token();\n\n        return this._riskClient.get_risk_token();\n    }\n}\n","import { merge } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport CreditCardPaymentStrategy from '../credit-card/credit-card-payment-strategy';\n\nimport WepayRiskClient from './wepay-risk-client';\n\nexport default class WepayPaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        orderActionCreator: OrderActionCreator,\n        paymentActionCreator: PaymentActionCreator,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        super(store, orderActionCreator, paymentActionCreator);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._wepayRiskClient.initialize();\n\n        return super.initialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const token = this._wepayRiskClient.getRiskToken();\n        const payloadWithToken = merge({}, payload, {\n            payment: {\n                paymentData: {\n                    deviceSessionId: token,\n                },\n            },\n        });\n\n        return super.execute(payloadWithToken, options);\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore, CheckoutValidator } from '../checkout';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport PaymentActionCreator from './payment-action-creator';\nimport PaymentMethodActionCreator from './payment-method-action-creator';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\nimport PaymentRequestSender from './payment-request-sender';\nimport PaymentStrategyActionCreator from './payment-strategy-action-creator';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport PaymentStrategyType from './payment-strategy-type';\nimport { AfterpayPaymentStrategy, AfterpayScriptLoader } from './strategies/afterpay';\nimport { AmazonPayPaymentStrategy, AmazonPayScriptLoader } from './strategies/amazon-pay';\nimport {\n    createBraintreePaymentProcessor,\n    createBraintreeVisaCheckoutPaymentProcessor,\n    BraintreeCreditCardPaymentStrategy,\n    BraintreePaypalPaymentStrategy,\n    BraintreeScriptLoader,\n    BraintreeSDKCreator,\n    BraintreeVisaCheckoutPaymentStrategy,\n    VisaCheckoutScriptLoader\n} from './strategies/braintree';\nimport { ChasePayPaymentStrategy, ChasePayScriptLoader } from './strategies/chasepay';\nimport { CreditCardPaymentStrategy } from './strategies/credit-card';\nimport {\n    createGooglePayPaymentProcessor,\n    GooglePayBraintreeInitializer,\n    GooglePayPaymentStrategy,\n    GooglePayStripeInitializer\n} from './strategies/googlepay';\nimport { KlarnaPaymentStrategy, KlarnaScriptLoader } from './strategies/klarna';\nimport { LegacyPaymentStrategy } from './strategies/legacy';\nimport { MasterpassPaymentStrategy, MasterpassScriptLoader } from './strategies/masterpass';\nimport { NoPaymentDataRequiredPaymentStrategy } from './strategies/no-payment';\nimport { OfflinePaymentStrategy } from './strategies/offline';\nimport { OffsitePaymentStrategy } from './strategies/offsite';\nimport { PaypalExpressPaymentStrategy, PaypalProPaymentStrategy, PaypalScriptLoader } from './strategies/paypal';\nimport { SagePayPaymentStrategy } from './strategies/sage-pay';\nimport { SquarePaymentStrategy, SquareScriptLoader } from './strategies/square';\nimport { WepayPaymentStrategy, WepayRiskClient } from './strategies/wepay';\n\nexport default function createPaymentStrategyRegistry(\n    store: CheckoutStore,\n    paymentClient: any,\n    requestSender: RequestSender\n) {\n    const registry = new PaymentStrategyRegistry(store, { defaultToken: PaymentStrategyType.CREDIT_CARD });\n    const scriptLoader = getScriptLoader();\n    const billingAddressActionCreator = new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender));\n    const braintreePaymentProcessor = createBraintreePaymentProcessor(scriptLoader);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutValidator = new CheckoutValidator(checkoutRequestSender);\n    const orderActionCreator = new OrderActionCreator(new OrderRequestSender(requestSender), checkoutValidator);\n    const paymentActionCreator = new PaymentActionCreator(new PaymentRequestSender(paymentClient), orderActionCreator);\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(new RemoteCheckoutRequestSender(requestSender));\n    const configActionCreator = new ConfigActionCreator(new ConfigRequestSender(requestSender));\n    const checkoutActionCreator = new CheckoutActionCreator(checkoutRequestSender, configActionCreator);\n    const paymentStrategyActionCreator = new PaymentStrategyActionCreator(registry, orderActionCreator);\n\n    registry.register(PaymentStrategyType.AFTERPAY, () =>\n        new AfterpayPaymentStrategy(\n            store,\n            checkoutValidator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new AfterpayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.AMAZON, () =>\n        new AmazonPayPaymentStrategy(\n            store,\n            orderActionCreator,\n            billingAddressActionCreator,\n            remoteCheckoutActionCreator,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.CREDIT_CARD, () =>\n        new CreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.KLARNA, () =>\n        new KlarnaPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new KlarnaScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.LEGACY, () =>\n        new LegacyPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.OFFLINE, () =>\n        new OfflinePaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.OFFSITE, () =>\n        new OffsitePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL, () =>\n        new PaypalProPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL_EXPRESS, () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL_EXPRESS_CREDIT, () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.SAGE_PAY, () =>\n        new SagePayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            createFormPoster()\n        )\n    );\n\n    registry.register(PaymentStrategyType.SQUARE, () =>\n        new SquarePaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new SquareScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.NO_PAYMENT_DATA_REQUIRED, () =>\n        new NoPaymentDataRequiredPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE, () =>\n        new BraintreeCreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_PAYPAL, () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_PAYPAL_CREDIT, () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor,\n            true\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_VISA_CHECKOUT, () =>\n        new BraintreeVisaCheckoutPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.CHASE_PAY, () =>\n        new ChasePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new ChasePayScriptLoader(scriptLoader),\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_GOOGLE_PAY, () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.WE_PAY, () =>\n        new WepayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.MASTERPASS, () =>\n        new MasterpassPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.STRIPE_GOOGLE_PAY, () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            )\n        )\n    );\n\n    return registry;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { Overlay } from '../../../common/overlay';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default function createBraintreePaymentProcessor(scriptLoader: ScriptLoader) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n    const overlay = new Overlay();\n\n    return new BraintreePaymentProcessor(braintreeSDKCreator, overlay);\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { Address } from '../../address';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../../checkout';\nimport { addMinutes, isFuture } from '../../common/date-time';\nimport { MissingDataError, MissingDataErrorType } from '../../common/error/errors';\n\nimport { SessionContext, VaultAccessToken } from './instrument';\nimport { DeleteInstrumentAction, InstrumentActionType, LoadInstrumentsAction } from './instrument-actions';\nimport InstrumentRequestSender from './instrument-request-sender';\n\nexport default class InstrumentActionCreator {\n    constructor(\n        private _instrumentRequestSender: InstrumentRequestSender\n    ) {}\n\n    loadInstruments(): ThunkAction<LoadInstrumentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadInstrumentsAction>) => {\n            observer.next(createAction(InstrumentActionType.LoadInstrumentsRequested));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n            const shippingAddress = this._getShippingAddress(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.loadInstruments({\n                            ...session,\n                            authToken: currentToken.vaultAccessToken,\n                        },\n                        shippingAddress\n                    )\n                        .then(({ body }) => {\n                            observer.next(createAction(\n                                InstrumentActionType.LoadInstrumentsSucceeded,\n                                body,\n                                currentToken\n                            ));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(InstrumentActionType.LoadInstrumentsFailed, response));\n                });\n        });\n    }\n\n    deleteInstrument(instrumentId: string): ThunkAction<DeleteInstrumentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteInstrumentAction>) => {\n            observer.next(createAction(InstrumentActionType.DeleteInstrumentRequested, undefined, { instrumentId }));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.deleteInstrument({\n                        ...session,\n                        authToken: currentToken.vaultAccessToken,\n                    }, instrumentId)\n                        .then(({ body }) => {\n                            observer.next(createAction(InstrumentActionType.DeleteInstrumentSucceeded, body, {\n                                instrumentId,\n                                ...currentToken,\n                            }));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(InstrumentActionType.DeleteInstrumentFailed, response, { instrumentId }));\n                });\n        });\n    }\n\n    private _isValidVaultAccessToken(token: VaultAccessToken): boolean {\n        if (!token || !token.vaultAccessToken) {\n            return false;\n        }\n\n        const expiryBuffer = 2;\n        const expiry = addMinutes(new Date(token.vaultAccessExpiry), expiryBuffer);\n\n        return isFuture(expiry);\n    }\n\n    private _getCurrentAccessToken(store: ReadableCheckoutStore): VaultAccessToken | undefined {\n        const { instruments } = store.getState();\n        const meta = instruments.getInstrumentsMeta();\n\n        if (!meta) {\n            return;\n        }\n\n        return {\n            vaultAccessToken: meta.vaultAccessToken,\n            vaultAccessExpiry: meta.vaultAccessExpiry,\n        };\n    }\n\n    private _getValidAccessToken(token?: VaultAccessToken): Promise<VaultAccessToken> {\n        return token && this._isValidVaultAccessToken(token) ?\n            Promise.resolve(token) :\n            this._instrumentRequestSender.getVaultAccessToken().then(({ body }) => body);\n    }\n\n    private _getShippingAddress(store: ReadableCheckoutStore): Address | undefined {\n        const state = store.getState();\n\n        return state.shippingAddress.getShippingAddress();\n    }\n\n    private _getSessionContext(store: ReadableCheckoutStore): SessionContext {\n        const state = store.getState();\n        const config = state.config.getStoreConfig();\n        const cart = state.cart.getCart();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        const { customerId } = cart;\n        const { storeId } = config.storeProfile;\n\n        return {\n            customerId,\n            storeId,\n        };\n    }\n}\n","export default function addMinutes(date: Date, amount: number): Date {\n    const newDate = new Date(date.getTime());\n\n    newDate.setMinutes(date.getMinutes() + amount);\n\n    return newDate;\n}\n","export default function isFuture(date: Date): boolean {\n    return date.valueOf() > Date.now();\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentResponse from '../payment-response';\n\nimport Instrument, { VaultAccessToken } from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InstrumentErrorResponseBody,\n    InternalInstrument,\n    InternalInstrumentsResponseBody,\n    InternalInstrumentErrorResponseBody,\n    InternalVaultAccessTokenResponseBody,\n} from './instrument-response-body';\n\nexport default class InstrumentResponseTransformer {\n    transformResponse(\n        response: PaymentResponse<InternalInstrumentsResponseBody>\n    ): Response<InstrumentsResponseBody> {\n        const { body, ...payload } = this._transformResponse(response);\n\n        return {\n            ...payload,\n            body: {\n                vaultedInstruments: this._transformVaultedInstruments(body.vaulted_instruments),\n            },\n        };\n    }\n\n    transformErrorResponse(\n        response: PaymentResponse<InternalInstrumentErrorResponseBody>\n    ): Response<InstrumentErrorResponseBody> {\n        return this._transformResponse(response);\n    }\n\n    transformVaultAccessResponse(\n        response: Response<InternalVaultAccessTokenResponseBody>\n    ): Response<VaultAccessToken> {\n        return {\n            ...response,\n            body: {\n                vaultAccessToken: response.body.data.token,\n                vaultAccessExpiry: response.body.data.expires_at,\n            },\n        };\n    }\n\n    private _transformVaultedInstruments(vaultedInstruments: InternalInstrument[] = []): Instrument[] {\n        return vaultedInstruments.map(instrument => ({\n            bigpayToken: instrument.bigpay_token,\n            defaultInstrument: instrument.default_instrument,\n            provider: instrument.provider,\n            iin: instrument.iin,\n            last4: instrument.last_4,\n            expiryMonth: instrument.expiry_month,\n            expiryYear: instrument.expiry_year,\n            brand: instrument.brand,\n            trustedShippingAddress: instrument.trusted_shipping_address,\n        }));\n    }\n\n    private _transformResponse<T>(response: PaymentResponse<T>): Response<T> {\n        const { data: body, ...payload } = response;\n\n        return {\n            ...payload,\n            body,\n        };\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { mapToInternalAddress, Address } from '../../address';\nimport { RequestOptions } from '../../common/http-request';\nimport PaymentResponse from '../payment-response';\n\nimport { InstrumentRequestContext, VaultAccessToken } from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InternalInstrumentsResponseBody,\n    InternalInstrumentErrorResponseBody,\n} from './instrument-response-body';\nimport InstrumentResponseTransformer from './instrument-response-transformer';\n\nexport default class InstrumentRequestSender {\n    private _transformer: InstrumentResponseTransformer;\n\n    constructor(\n        private _client: any,\n        private _requestSender: RequestSender\n    ) {\n        this._transformer = new InstrumentResponseTransformer();\n    }\n\n    getVaultAccessToken(\n        { timeout }: RequestOptions = {}\n    ): Promise<Response<VaultAccessToken>> {\n        const url = '/internalapi/v1/checkout/payments/vault-access-token';\n\n        return this._requestSender.get(url, { timeout }).then(response => ({\n            ...response,\n            body: {\n                vaultAccessToken: response.body.data.token,\n                vaultAccessExpiry: response.body.data.expires_at,\n            },\n        }));\n    }\n\n    loadInstruments(\n        requestContext: InstrumentRequestContext,\n        shippingAddress?: Address\n    ): Promise<Response<InstrumentsResponseBody>> {\n        return (shippingAddress) ?\n            this._loadInstrumentsWithAddress(requestContext, shippingAddress) :\n            this._loadInstruments(requestContext);\n    }\n\n    deleteInstrument(\n        requestContext: InstrumentRequestContext,\n        instrumentId: string\n    ): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            instrumentId,\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.deleteShopperInstrument(\n                payload, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) =>  errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n\n    private _loadInstruments(\n        requestContext: InstrumentRequestContext\n    ): Promise<Response<InstrumentsResponseBody>> {\n        return new Promise((resolve, reject) => {\n            this._client.loadInstruments(\n                requestContext, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) => errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n\n    private _loadInstrumentsWithAddress(\n        requestContext: InstrumentRequestContext,\n        shippingAddress: Address\n    ): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            shippingAddress: mapToInternalAddress(shippingAddress),\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.loadInstrumentsWithAddress(\n                payload, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) => errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n}\n","import { Address } from '../address';\nimport { BillingAddress, BillingAddressSelector } from '../billing';\nimport { Cart, CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { StoreConfig } from '../config/config';\nimport { Coupon, CouponSelector, GiftCertificate, GiftCertificateSelector } from '../coupon';\nimport { Customer, CustomerSelector } from '../customer';\nimport { FormField, FormSelector } from '../form';\nimport { Country, CountrySelector } from '../geography';\nimport { Order, OrderSelector } from '../order';\nimport { PaymentMethod, PaymentMethodSelector, PaymentSelector } from '../payment';\nimport { Instrument, InstrumentSelector } from '../payment/instrument';\nimport {\n    Consignment,\n    ConsignmentSelector,\n    ShippingAddressSelector,\n    ShippingCountrySelector,\n    ShippingOption,\n} from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the state of the current checkout.\n *\n * This object has a set of methods that allow you to get a specific piece of\n * checkout information, such as shipping and billing details.\n */\n@selector\nexport default class CheckoutStoreSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customer: CustomerSelector;\n    private _form: FormSelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _payment: PaymentSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _shippingAddress: ShippingAddressSelector;\n    private _shippingCountries: ShippingCountrySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customer = selectors.customer;\n        this._form = selectors.form;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._payment = selectors.payment;\n        this._paymentMethods = selectors.paymentMethods;\n        this._shippingAddress = selectors.shippingAddress;\n        this._shippingCountries = selectors.shippingCountries;\n    }\n\n    /**\n     * Gets the current checkout.\n     *\n     * @returns The current checkout if it is loaded, otherwise undefined.\n     */\n    getCheckout(): Checkout | undefined {\n        return this._checkout.getCheckout();\n    }\n\n    /**\n     * Gets the current order.\n     *\n     * @returns The current order if it is loaded, otherwise undefined.\n     */\n    getOrder(): Order | undefined {\n        return this._order.getOrder();\n    }\n\n    /**\n     * Gets the checkout configuration of a store.\n     *\n     * @returns The configuration object if it is loaded, otherwise undefined.\n     */\n    getConfig(): StoreConfig | undefined {\n        return this._config.getStoreConfig();\n    }\n\n    /**\n     * Gets the shipping address of the current checkout.\n     *\n     * If the address is partially complete, it may not have shipping options\n     * associated with it.\n     *\n     * @returns The shipping address object if it is loaded, otherwise\n     * undefined.\n     */\n    getShippingAddress(): Address | undefined {\n        const shippingAddress = this._shippingAddress.getShippingAddress();\n        const context = this._config.getContextConfig();\n\n        if (!shippingAddress) {\n            if (!context || !context.geoCountryCode) {\n                return;\n            }\n\n            return {\n                firstName: '',\n                lastName: '',\n                company: '',\n                address1: '',\n                address2: '',\n                city: '',\n                stateOrProvince: '',\n                stateOrProvinceCode: '',\n                postalCode: '',\n                country: '',\n                phone: '',\n                customFields: [],\n                countryCode: context.geoCountryCode,\n            };\n        }\n\n        return shippingAddress;\n    }\n\n    /**\n     * Gets a list of shipping options available for the shipping address.\n     *\n     * If there is no shipping address assigned to the current checkout, the\n     * list of shipping options will be empty.\n     *\n     * @returns The list of shipping options if any, otherwise undefined.\n     */\n    getShippingOptions(): ShippingOption[] | undefined {\n        const consignments = this._consignments.getConsignments();\n\n        if (consignments && consignments.length) {\n            return consignments[0].availableShippingOptions;\n        }\n\n        return;\n    }\n\n    /**\n     * Gets a list of consignments.\n     *\n     * If there are no consignments created for to the current checkout, the\n     * list will be empty.\n     *\n     * @returns The list of consignments if any, otherwise undefined.\n     */\n    getConsignments(): Consignment[] | undefined {\n        return this._consignments.getConsignments();\n    }\n\n    /**\n     * Gets the selected shipping option for the current checkout.\n     *\n     * @returns The shipping option object if there is a selected option,\n     * otherwise undefined.\n     */\n    getSelectedShippingOption(): ShippingOption | undefined {\n        const consignments = this._consignments.getConsignments();\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return consignments[0].selectedShippingOption;\n    }\n\n    /**\n     * Gets a list of countries available for shipping.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getShippingCountries(): Country[] | undefined {\n        return this._shippingCountries.getShippingCountries();\n    }\n\n    /**\n     * Gets the billing address of an order.\n     *\n     * @returns The billing address object if it is loaded, otherwise undefined.\n     */\n    getBillingAddress(): BillingAddress | undefined {\n        return this._billingAddress.getBillingAddress();\n    }\n\n    /**\n     * Gets a list of countries available for billing.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getBillingCountries(): Country[] | undefined {\n        return this._countries.getCountries();\n    }\n\n    /**\n     * Gets a list of payment methods available for checkout.\n     *\n     * @returns The list of payment methods if it is loaded, otherwise undefined.\n     */\n    getPaymentMethods(): PaymentMethod[] | undefined {\n        return this._paymentMethods.getPaymentMethods();\n    }\n\n    /**\n     * Gets a payment method by an id.\n     *\n     * The method returns undefined if unable to find a payment method with the\n     * specified id, either because it is not available for the customer, or it\n     * is not loaded.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns The payment method object if loaded and available, otherwise,\n     * undefined.\n     */\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined {\n        return this._paymentMethods.getPaymentMethod(methodId, gatewayId);\n    }\n\n    /**\n     * Gets the payment method that is selected for checkout.\n     *\n     * @returns The payment method object if there is a selected method;\n     * undefined if otherwise.\n     */\n    getSelectedPaymentMethod(): PaymentMethod | undefined {\n        const payment = this._payment.getPaymentId();\n\n        return payment && this._paymentMethods.getPaymentMethod(payment.providerId, payment.gatewayId);\n    }\n\n    /**\n     * Gets the current cart.\n     *\n     * @returns The current cart object if it is loaded, otherwise undefined.\n     */\n    getCart(): Cart | undefined {\n        return this._cart.getCart();\n    }\n\n    /**\n     * Gets a list of coupons that are applied to the current checkout.\n     *\n     * @returns The list of applied coupons if there is any, otherwise undefined.\n     */\n    getCoupons(): Coupon[] | undefined {\n        return this._coupons.getCoupons();\n    }\n\n    /**\n     * Gets a list of gift certificates that are applied to the current checkout.\n     *\n     * @returns The list of applied gift certificates if there is any, otherwise undefined.\n     */\n    getGiftCertificates(): GiftCertificate[] | undefined {\n        return this._giftCertificates.getGiftCertificates();\n    }\n\n    /**\n     * Gets the current customer.\n     *\n     * @returns The current customer object if it is loaded, otherwise\n     * undefined.\n     */\n    getCustomer(): Customer | undefined {\n        return this._customer.getCustomer();\n    }\n\n    /**\n     * Checks if payment data is required or not.\n     *\n     * If payment data is required, customers should be prompted to enter their\n     * payment details.\n     *\n     * ```js\n     * if (state.checkout.isPaymentDataRequired()) {\n     *     // Render payment form\n     * } else {\n     *     // Render \"Payment is not required for this order\" message\n     * }\n     * ```\n     *\n     * @param useStoreCredit - If true, check whether payment data is required\n     * with store credit applied; otherwise, check without store credit.\n     * @returns True if payment data is required, otherwise false.\n     */\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean {\n        return this._payment.isPaymentDataRequired(useStoreCredit);\n    }\n\n    /**\n     * Checks if payment data is submitted or not.\n     *\n     * If payment data is already submitted using a payment method, customers\n     * should not be prompted to enter their payment details again.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns True if payment data is submitted, otherwise false.\n     */\n    isPaymentDataSubmitted(methodId: string, gatewayId?: string): boolean {\n        return this._payment.isPaymentDataSubmitted(this.getPaymentMethod(methodId, gatewayId));\n    }\n\n    /**\n     * Gets a list of payment instruments associated with the current customer.\n     *\n     * @returns The list of payment instruments if it is loaded, otherwise undefined.\n     */\n    getInstruments(): Instrument[] | undefined {\n        return this._instruments.getInstruments();\n    }\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their billing address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of billing address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getBillingAddressFields(countryCode: string): FormField[] {\n        return this._form.getBillingAddressFields(this.getBillingCountries(), countryCode);\n    }\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their shipping address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of shipping address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getShippingAddressFields(countryCode: string): FormField[] {\n        return this._form.getShippingAddressFields(this.getShippingCountries(), countryCode);\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { RequestError } from '../common/error/errors';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerStrategySelector } from '../customer';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { ConsignmentSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the error of any asynchronous checkout action, if\n * there is any.\n *\n * This object has a set of getters that would return an error if an action is\n * not executed successfully. For example, if you are unable to submit an order,\n * you can use this object to retrieve the reason for the failure.\n */\n@selector\nexport default class CheckoutStoreErrorSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customerStrategies: CustomerStrategySelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _paymentStrategies: PaymentStrategySelector;\n    private _shippingCountries: ShippingCountrySelector;\n    private _shippingStrategies: ShippingStrategySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customerStrategies = selectors.customerStrategies;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._paymentMethods = selectors.paymentMethods;\n        this._paymentStrategies = selectors.paymentStrategies;\n        this._shippingCountries = selectors.shippingCountries;\n        this._shippingStrategies = selectors.shippingStrategies;\n    }\n\n    /**\n     * Gets the error of any checkout action that has failed.\n     *\n     * @returns The error object if unable to perform any checkout action,\n     * otherwise undefined.\n     */\n    getError(): Error | undefined {\n        // tslint:disable-next-line:cyclomatic-complexity\n        return this.getLoadCheckoutError() ||\n            this.getSubmitOrderError() ||\n            this.getFinalizeOrderError() ||\n            this.getLoadOrderError() ||\n            this.getLoadCartError() ||\n            this.getLoadBillingCountriesError() ||\n            this.getLoadShippingCountriesError() ||\n            this.getLoadPaymentMethodsError() ||\n            this.getLoadPaymentMethodError() ||\n            this.getInitializePaymentError() ||\n            this.getLoadShippingOptionsError() ||\n            this.getSelectShippingOptionError() ||\n            this.getSignInError() ||\n            this.getSignOutError() ||\n            this.getInitializeCustomerError() ||\n            this.getUpdateShippingAddressError() ||\n            this.getUpdateBillingAddressError() ||\n            this.getContinueAsGuestError() ||\n            this.getUpdateConsignmentError() ||\n            this.getCreateConsignmentsError() ||\n            this.getDeleteConsignmentError() ||\n            this.getInitializeShippingError() ||\n            this.getApplyCouponError() ||\n            this.getRemoveCouponError() ||\n            this.getApplyGiftCertificateError() ||\n            this.getRemoveGiftCertificateError() ||\n            this.getLoadInstrumentsError() ||\n            this.getDeleteInstrumentError() ||\n            this.getLoadConfigError();\n    }\n\n    /**\n     * Returns an error if unable to load the current checkout.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCheckoutError(): Error | undefined {\n        return this._checkout.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to update the current checkout.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateCheckoutError(): Error | undefined {\n        return this._checkout.getUpdateError();\n    }\n\n    /**\n     * Returns an error if unable to submit the current order.\n     *\n     * @returns The error object if unable to submit, otherwise undefined.\n     */\n    getSubmitOrderError(): Error | undefined {\n        return this._paymentStrategies.getExecuteError();\n    }\n\n    /**\n     * Returns an error if unable to finalize the current order.\n     *\n     * @returns The error object if unable to finalize, otherwise undefined.\n     */\n    getFinalizeOrderError(): Error | undefined {\n        return this._paymentStrategies.getFinalizeError();\n    }\n\n    /**\n     * Returns an error if unable to load the current order.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadOrderError(): Error | undefined {\n        return this._order.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load the current cart.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCartError(): Error | undefined {\n        return this._cart.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load billing countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadBillingCountriesError(): Error | undefined {\n        return this._countries.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load shipping countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingCountriesError(): Error | undefined {\n        return this._shippingCountries.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load payment methods.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodsError(): Error | undefined {\n        return this._paymentMethods.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to load.\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodError(methodId?: string): Error | undefined {\n        return this._paymentMethods.getLoadMethodError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to initialize a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to initialize.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializePaymentError(methodId?: string): Error | undefined {\n        return this._paymentStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to sign in.\n     *\n     * @returns The error object if unable to sign in, otherwise undefined.\n     */\n    getSignInError(): Error | undefined {\n        return this._customerStrategies.getSignInError();\n    }\n\n    /**\n     * Returns an error if unable to sign out.\n     *\n     * @returns The error object if unable to sign out, otherwise undefined.\n     */\n    getSignOutError(): Error | undefined {\n        return this._customerStrategies.getSignOutError();\n    }\n\n    /**\n     * Returns an error if unable to initialize the customer step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeCustomerError(methodId?: string): Error | undefined {\n        return this._customerStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to load shipping options.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingOptionsError(): Error | undefined {\n        return this._consignments.getLoadShippingOptionsError();\n    }\n\n    /**\n     * Returns an error if unable to select a shipping option.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to select, otherwise undefined.\n     */\n    getSelectShippingOptionError(consignmentId?: string): Error | undefined {\n        return this._shippingStrategies.getSelectOptionError() ||\n            this._consignments.getUpdateShippingOptionError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to continue as guest.\n     *\n     * @returns The error object if unable to continue, otherwise undefined.\n     */\n    getContinueAsGuestError(): Error | undefined {\n        return this._billingAddress.getContinueAsGuestError();\n    }\n\n    /**\n     * Returns an error if unable to update billing address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateBillingAddressError(): Error | undefined {\n        return this._billingAddress.getUpdateError();\n    }\n\n    /**\n     * Returns an error if unable to update shipping address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateShippingAddressError(): Error | undefined {\n        return this._shippingStrategies.getUpdateAddressError();\n    }\n\n    /**\n     * Returns an error if unable to delete a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteConsignmentError(consignmentId?: string): Error | undefined {\n        return this._consignments.getDeleteError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to update a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateConsignmentError(consignmentId?: string): Error | undefined {\n        return this._consignments.getUpdateError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to create consignments.\n     *\n     * @returns The error object if unable to create, otherwise undefined.\n     */\n    getCreateConsignmentsError(): Error | undefined {\n        return this._consignments.getCreateError();\n    }\n\n    /**\n     * Returns an error if unable to initialize the shipping step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeShippingError(methodId?: string): Error | undefined {\n        return this._shippingStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to apply a coupon code.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyCouponError(): RequestError | undefined {\n        return this._coupons.getApplyError();\n    }\n\n    /**\n     * Returns an error if unable to remove a coupon code.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveCouponError(): RequestError | undefined {\n        return this._coupons.getRemoveError();\n    }\n\n    /**\n     * Returns an error if unable to apply a gift certificate.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyGiftCertificateError(): RequestError | undefined {\n        return this._giftCertificates.getApplyError();\n    }\n\n    /**\n     * Returns an error if unable to remove a gift certificate.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveGiftCertificateError(): RequestError | undefined {\n        return this._giftCertificates.getRemoveError();\n    }\n\n    /**\n     * Returns an error if unable to load payment instruments.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadInstrumentsError(): Error | undefined {\n        return this._instruments.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to delete a payment instrument.\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteInstrumentError(instrumentId?: string): Error | undefined {\n        return this._instruments.getDeleteError(instrumentId);\n    }\n\n    /**\n     * Returns an error if unable to load the checkout configuration of a store.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadConfigError(): Error | undefined {\n        return this._config.getLoadError();\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerStrategySelector } from '../customer';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { ConsignmentSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for checking the statuses of various asynchronous actions related\n * to checkout.\n *\n * This object has a set of getters that return true if an action is in\n * progress. For example, you can check whether a customer is submitting an\n * order and waiting for the request to complete.\n */\n@selector\nexport default class CheckoutStoreStatusSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customerStrategies: CustomerStrategySelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _paymentStrategies: PaymentStrategySelector;\n    private _shippingCountries: ShippingCountrySelector;\n    private _shippingStrategies: ShippingStrategySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customerStrategies = selectors.customerStrategies;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._paymentMethods = selectors.paymentMethods;\n        this._paymentStrategies = selectors.paymentStrategies;\n        this._shippingCountries = selectors.shippingCountries;\n        this._shippingStrategies = selectors.shippingStrategies;\n    }\n\n    /**\n     * Checks whether any checkout action is pending.\n     *\n     * @returns True if there is a pending action, otherwise false.\n     */\n    isPending(): boolean {\n        // tslint:disable-next-line:cyclomatic-complexity\n        return this.isLoadingCheckout() ||\n            this.isSubmittingOrder() ||\n            this.isFinalizingOrder() ||\n            this.isLoadingOrder() ||\n            this.isLoadingCart() ||\n            this.isLoadingBillingCountries() ||\n            this.isLoadingShippingCountries() ||\n            this.isLoadingPaymentMethods() ||\n            this.isLoadingPaymentMethod() ||\n            this.isInitializingPayment() ||\n            this.isLoadingShippingOptions() ||\n            this.isSelectingShippingOption() ||\n            this.isSigningIn() ||\n            this.isSigningOut() ||\n            this.isInitializingCustomer() ||\n            this.isUpdatingBillingAddress() ||\n            this.isContinuingAsGuest() ||\n            this.isUpdatingShippingAddress() ||\n            this.isUpdatingConsignment() ||\n            this.isCreatingConsignments() ||\n            this.isDeletingConsignment() ||\n            this.isInitializingShipping() ||\n            this.isApplyingCoupon() ||\n            this.isRemovingCoupon() ||\n            this.isApplyingGiftCertificate() ||\n            this.isRemovingGiftCertificate() ||\n            this.isLoadingInstruments() ||\n            this.isDeletingInstrument() ||\n            this.isLoadingConfig() ||\n            this.isCustomerStepPending() ||\n            this.isPaymentStepPending();\n    }\n\n    /**\n     * Checks whether the current checkout is loading.\n     *\n     * @returns True if the current checkout is loading, otherwise false.\n     */\n    isLoadingCheckout(): boolean {\n        return this._checkout.isLoading();\n    }\n\n    /**\n     * Checks whether the current checkout is being updated.\n     *\n     * @returns True if the current checkout is being updated, otherwise false.\n     */\n    isUpdatingCheckout(): boolean {\n        return this._checkout.isUpdating();\n    }\n\n    /**\n     * Checks whether the current order is submitting.\n     *\n     * @returns True if the current order is submitting, otherwise false.\n     */\n    isSubmittingOrder(): boolean {\n        return this._paymentStrategies.isExecuting();\n    }\n\n    /**\n     * Checks whether the current order is finalizing.\n     *\n     * @returns True if the current order is finalizing, otherwise false.\n     */\n    isFinalizingOrder(): boolean {\n        return this._paymentStrategies.isFinalizing();\n    }\n\n    /**\n     * Checks whether the current order is loading.\n     *\n     * @returns True if the current order is loading, otherwise false.\n     */\n    isLoadingOrder(): boolean {\n        return this._order.isLoading();\n    }\n\n    /**\n     * Checks whether the current cart is loading.\n     *\n     * @returns True if the current cart is loading, otherwise false.\n     */\n    isLoadingCart(): boolean {\n        return this._cart.isLoading();\n    }\n\n    /**\n     * Checks whether billing countries are loading.\n     *\n     * @returns True if billing countries are loading, otherwise false.\n     */\n    isLoadingBillingCountries(): boolean {\n        return this._countries.isLoading();\n    }\n\n    /**\n     * Checks whether shipping countries are loading.\n     *\n     * @returns True if shipping countries are loading, otherwise false.\n     */\n    isLoadingShippingCountries(): boolean {\n        return this._shippingCountries.isLoading();\n    }\n\n    /**\n     * Checks whether payment methods are loading.\n     *\n     * @returns True if payment methods are loading, otherwise false.\n     */\n    isLoadingPaymentMethods(): boolean {\n        return this._paymentMethods.isLoading();\n    }\n\n    /**\n     * Checks whether a specific or any payment method is loading.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is loading.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is loading, otherwise false.\n     */\n    isLoadingPaymentMethod(methodId?: string): boolean {\n        return this._paymentMethods.isLoadingMethod(methodId);\n    }\n\n    /**\n     * Checks whether a specific or any payment method is initializing.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is initializing.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is initializing, otherwise false.\n     */\n    isInitializingPayment(methodId?: string): boolean {\n        return this._paymentStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is signing in.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing in using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing in the\n     * current customer.\n     * @returns True if the customer is signing in, otherwise false.\n     */\n    isSigningIn(methodId?: string): boolean {\n        return this._customerStrategies.isSigningIn(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is signing out.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing out using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing out the\n     * current customer.\n     * @returns True if the customer is signing out, otherwise false.\n     */\n    isSigningOut(methodId?: string): boolean {\n        return this._customerStrategies.isSigningOut(methodId);\n    }\n\n    /**\n     * Checks whether the customer step is initializing.\n     *\n     * If an ID is provided, the method also checks whether the customer step is\n     * initializing using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for initializing the\n     * customer step of checkout.\n     * @returns True if the customer step is initializing, otherwise false.\n     */\n    isInitializingCustomer(methodId?: string): boolean {\n        return this._customerStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether shipping options are loading.\n     *\n     * @returns True if shipping options are loading, otherwise false.\n     */\n    isLoadingShippingOptions(): boolean {\n        return this._consignments.isLoadingShippingOptions();\n    }\n\n    /**\n     * Checks whether a shipping option is being selected.\n     *\n     * A consignment ID should be provided when checking if a shipping option\n     * is being selected for a specific consignment, otherwise it will check\n     * for all consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if selecting a shipping option, otherwise false.\n     */\n    isSelectingShippingOption(consignmentId?: string): boolean {\n        return this._shippingStrategies.isSelectingOption() ||\n            this._consignments.isUpdatingShippingOption(consignmentId);\n    }\n\n    /**\n     * Checks whether the billing address is being updated.\n     *\n     * @returns True if updating their billing address, otherwise false.\n     */\n    isUpdatingBillingAddress(): boolean {\n        return this._billingAddress.isUpdating();\n    }\n\n    /**\n     * Checks whether the shopper is continuing out as a guest.\n     *\n     * @returns True if continuing as guest, otherwise false.\n     */\n    isContinuingAsGuest(): boolean {\n        return this._billingAddress.isContinuingAsGuest();\n    }\n\n    /**\n     * Checks the shipping address is being updated.\n     *\n     * @returns True if updating their shipping address, otherwise false.\n     */\n    isUpdatingShippingAddress(): boolean {\n        return this._shippingStrategies.isUpdatingAddress();\n    }\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if updating consignment(s), otherwise false.\n     */\n    isUpdatingConsignment(consignmentId?: string): boolean {\n        return this._consignments.isUpdating(consignmentId);\n    }\n\n    /**\n     * Checks whether a given/any consignment is being deleted.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if deleting consignment(s), otherwise false.\n     */\n    isDeletingConsignment(consignmentId?: string): boolean {\n        return this._consignments.isDeleting(consignmentId);\n    }\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @returns True if creating consignments, otherwise false.\n     */\n    isCreatingConsignments(): boolean {\n        return this._consignments.isCreating();\n    }\n\n    /**\n     * Checks whether the shipping step of a checkout process is initializing.\n     *\n     * If an identifier is provided, the method also checks whether the shipping\n     * step is initializing using a specific shipping method with the same\n     * identifier.\n     *\n     * @param methodId - The identifer of the initialization method to check.\n     * @returns True if the shipping step is initializing, otherwise false.\n     */\n    isInitializingShipping(methodId?: string) {\n        return this._shippingStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is applying a coupon code.\n     *\n     * @returns True if applying a coupon code, otherwise false.\n     */\n    isApplyingCoupon(): boolean {\n        return this._coupons.isApplying();\n    }\n\n    /**\n     * Checks whether the current customer is removing a coupon code.\n     *\n     * @returns True if removing a coupon code, otherwise false.\n     */\n    isRemovingCoupon(): boolean {\n        return this._coupons.isRemoving();\n    }\n\n    /**\n     * Checks whether the current customer is applying a gift certificate.\n     *\n     * @returns True if applying a gift certificate, otherwise false.\n     */\n    isApplyingGiftCertificate(): boolean {\n        return this._giftCertificates.isApplying();\n    }\n\n    /**\n     * Checks whether the current customer is removing a gift certificate.\n     *\n     * @returns True if removing a gift certificate, otherwise false.\n     */\n    isRemovingGiftCertificate(): boolean {\n        return this._giftCertificates.isRemoving();\n    }\n\n    /**\n     * Checks whether the current customer's payment instruments are loading.\n     *\n     * @returns True if payment instruments are loading, otherwise false.\n     */\n    isLoadingInstruments(): boolean {\n        return this._instruments.isLoading();\n    }\n\n    /**\n     * Checks whether the current customer is deleting a payment instrument.\n     *\n     * @returns True if deleting a payment instrument, otherwise false.\n     */\n    isDeletingInstrument(instrumentId?: string): boolean {\n        return this._instruments.isDeleting(instrumentId);\n    }\n\n    /**\n     * Checks whether the checkout configuration of a store is loading.\n     *\n     * @returns True if the configuration is loading, otherwise false.\n     */\n    isLoadingConfig(): boolean {\n        return this._config.isLoading();\n    }\n\n    /**\n     * Checks whether the customer step of a checkout is in a pending state.\n     *\n     * The customer step is considered to be pending if it is in the process of\n     * initializing, signing in, signing out, and/or interacting with a customer\n     * widget.\n     *\n     * @returns True if the customer step is pending, otherwise false.\n     */\n    isCustomerStepPending(): boolean {\n        return this._customerStrategies.isInitializing() ||\n            this._customerStrategies.isSigningIn() ||\n            this._customerStrategies.isSigningOut() ||\n            this._customerStrategies.isWidgetInteracting();\n    }\n\n    /**\n     * Checks whether the payment step of a checkout is in a pending state.\n     *\n     * The payment step is considered to be pending if it is in the process of\n     * initializing, submitting an order, finalizing an order, and/or\n     * interacting with a payment widget.\n     *\n     * @returns True if the payment step is pending, otherwise false.\n     */\n    isPaymentStepPending(): boolean {\n        return this._paymentStrategies.isInitializing() ||\n            this._paymentStrategies.isExecuting() ||\n            this._paymentStrategies.isFinalizing() ||\n            this._paymentStrategies.isWidgetInteracting();\n    }\n}\n","import {\n    CheckoutSelectors,\n    CheckoutStoreErrorSelector,\n    CheckoutStoreSelector,\n    CheckoutStoreStatusSelector,\n    InternalCheckoutSelectors,\n} from '../checkout';\n\nexport default function createCheckoutSelectors(selectors: InternalCheckoutSelectors): CheckoutSelectors {\n    const data = new CheckoutStoreSelector(selectors);\n    const errors = new CheckoutStoreErrorSelector(selectors);\n    const statuses = new CheckoutStoreStatusSelector(selectors);\n\n    return {\n        data,\n        errors,\n        statuses,\n    };\n}\n","import { toSingleLine } from '../utility';\n\nexport default class ErrorMessageTransformer<TError extends Error = Error> {\n    constructor(\n        private _messageCustomizer: (type: TError) => string\n    ) {}\n\n    transform(error: TError): TError {\n        error.message = toSingleLine(this._messageCustomizer(error));\n\n        return error;\n    }\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { BillingAddressActionCreator, BillingAddressRequestBody } from '../billing';\nimport { ErrorActionCreator, ErrorMessageTransformer } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\nimport { CouponActionCreator, GiftCertificateActionCreator } from '../coupon';\nimport { CustomerCredentials, CustomerInitializeOptions, CustomerRequestOptions, CustomerStrategyActionCreator, GuestCredentials } from '../customer';\nimport { CountryActionCreator } from '../geography';\nimport { OrderActionCreator, OrderRequestBody } from '../order';\nimport { PaymentInitializeOptions, PaymentMethodActionCreator, PaymentRequestOptions, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator } from '../payment/instrument';\nimport { ConsignmentsRequestBody, ConsignmentActionCreator, ShippingCountryActionCreator, ShippingInitializeOptions, ShippingRequestOptions, ShippingStrategyActionCreator } from '../shipping';\nimport { ConsignmentAssignmentRequestBody, ConsignmentUpdateRequestBody } from '../shipping/consignment';\n\nimport { CheckoutRequestBody } from './checkout';\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutParams from './checkout-params';\nimport CheckoutSelectors from './checkout-selectors';\nimport CheckoutStore from './checkout-store';\nimport createCheckoutSelectors from './create-checkout-selectors';\nimport createCheckoutServiceErrorTransformer from './create-checkout-service-error-transformer';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for completing the checkout process for the current customer.\n *\n * This object can be used to collect all information that is required for\n * checkout, such as shipping and billing information. It can also be used to\n * retrieve the current checkout state and subscribe to its changes.\n */\nexport default class CheckoutService {\n    private _state: CheckoutSelectors;\n    private _errorTransformer: ErrorMessageTransformer;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _configActionCreator: ConfigActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _countryActionCreator: CountryActionCreator,\n        private _couponActionCreator: CouponActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _errorActionCreator: ErrorActionCreator,\n        private _giftCertificateActionCreator: GiftCertificateActionCreator,\n        private _instrumentActionCreator: InstrumentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _shippingCountryActionCreator: ShippingCountryActionCreator,\n        private _shippingStrategyActionCreator: ShippingStrategyActionCreator\n    ) {\n        this._state = createCheckoutSelectors(this._store.getState());\n        this._errorTransformer = createCheckoutServiceErrorTransformer();\n\n        this._store.subscribe(state => {\n            this._state = createCheckoutSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current checkout state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * checkout state. You can query the state by calling any of its getter\n     * methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.data.getOrder());\n     * console.log(state.errors.getSubmitOrderError());\n     * console.log(state.statuses.isSubmittingOrder());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutSelectors {\n        return this._state;\n    }\n\n    /**\n     * Notifies all subscribers with the current state.\n     *\n     * When this method gets called, the subscribers get called regardless if\n     * they have any filters applied.\n     */\n    notifyState(): void {\n        this._store.notifyState();\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the checkout state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.data.getCart();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutSelectors) => void,\n        ...filters: Array<(state: CheckoutSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            ...filters.map(filter => (state: InternalCheckoutSelectors) => filter(createCheckoutSelectors(state)))\n        );\n    }\n\n    /**\n     * Loads the current checkout.\n     *\n     * This method can only be called if there is an active checkout. Also, it\n     * can only retrieve data that belongs to the current customer. When it is\n     * successfully executed, you can retrieve the data by calling\n     * `CheckoutStoreSelector#getCheckout`.\n     *\n     * ```js\n     * const state = await service.loadCheckout('0cfd6c06-57c3-4e29-8d7a-de55cc8a9052');\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param id - The identifier of the checkout to load, or the default checkout if not provided.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    loadCheckout(id?: string, options?: RequestOptions<CheckoutParams>): Promise<CheckoutSelectors> {\n        return this._dispatch(id ?\n            this._checkoutActionCreator.loadCheckout(id, options) :\n            this._checkoutActionCreator.loadDefaultCheckout(options)\n        );\n    }\n\n    /**\n     * Updates specific properties of the current checkout.\n     *\n     * ```js\n     * const state = await service.updateCheckout(checkout);\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param payload - The checkout properties to be updated.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    updateCheckout(payload: CheckoutRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._checkoutActionCreator.updateCheckout(payload, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads an order by an id.\n     *\n     * The method can only retrieve an order if the order belongs to the current\n     * customer. If it is successfully executed, the data can be retrieved by\n     * calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.loadOrder(123);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param orderId - The identifier of the order to load.\n     * @param options - Options for loading the order.\n     * @returns A promise that resolves to the current state.\n     */\n    loadOrder(orderId: number, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const loadCheckoutAction = this._orderActionCreator.loadOrder(orderId, options);\n        const loadConfigAction = this._configActionCreator.loadConfig(options);\n\n        return Promise.all([\n            this._dispatch(loadCheckoutAction),\n            this._dispatch(loadConfigAction, { queueId: 'config' }),\n        ])\n            .then(() => this.getState());\n    }\n\n    /**\n     * Submits an order, thereby completing a checkout process.\n     *\n     * Before you can submit an order, you must initialize the payment method\n     * chosen by the customer by calling `CheckoutService#initializePayment`.\n     *\n     * ```js\n     * await service.initializePayment({ methodId: 'braintree' });\n     * await service.submitOrder({\n     *     payment: {\n     *         methodId: 'braintree',\n     *         paymentData: {\n     *             ccExpiry: { month: 10, year: 20 },\n     *             ccName: 'BigCommerce',\n     *             ccNumber: '4111111111111111',\n     *             ccCvv: 123,\n     *         },\n     *     },\n     * });\n     * ```\n     *\n     * You are not required to include `paymentData` if the order does not\n     * require additional payment details. For example, the customer has already\n     * entered their payment details on the cart page using one of the hosted\n     * payment methods, such as PayPal. Or the customer has applied a gift\n     * certificate that exceeds the grand total amount.\n     *\n     * If the order is submitted successfully, you can retrieve the newly\n     * created order by calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.submitOrder(payload);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param payload - The request payload to submit for the current order.\n     * @param options - Options for submitting the current order.\n     * @returns A promise that resolves to the current state.\n     */\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.execute(payload, options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Finalizes the submission process for an order.\n     *\n     * This method is only required for certain hosted payment methods that\n     * require a customer to enter their credit card details on their website.\n     * You need to call this method once the customer has redirected back to\n     * checkout in order to complete the checkout process.\n     *\n     * If the method is called before order finalization is required or for a\n     * payment method that does not require order finalization, an error will be\n     * thrown. Conversely, if the method is called successfully, you should\n     * immediately redirect the customer to the order confirmation page.\n     *\n     * ```js\n     * try {\n     *     await service.finalizeOrderIfNeeded();\n     *\n     *     window.location.assign('/order-confirmation');\n     * } catch (error) {\n     *     if (error.type !== 'order_finalization_not_required') {\n     *         throw error;\n     *     }\n     * }\n     * ```\n     *\n     * @param options - Options for finalizing the current order.\n     * @returns A promise that resolves to the current state.\n     * @throws `OrderFinalizationNotRequiredError` error if order finalization\n     * is not required for the current order at the time of execution.\n     */\n    finalizeOrderIfNeeded(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.finalize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of payment methods available for checkout.\n     *\n     * If a customer enters their payment details before navigating to the\n     * checkout page (i.e.: using PayPal checkout button on the cart page), only\n     * one payment method will be available for the customer - the selected\n     * payment method. Otherwise, by default, all payment methods configured by\n     * the merchant will be available for the customer.\n     *\n     * Once the method is executed successfully, you can call\n     * `CheckoutStoreSelector#getPaymentMethods` to retrieve the list of payment\n     * methods.\n     *\n     * ```js\n     * const state = service.loadPaymentMethods();\n     *\n     * console.log(state.data.getPaymentMethods());\n     * ```\n     *\n     * @param options - Options for loading the payment methods that are\n     * available to the current customer.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethods(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethods(options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Loads a payment method by an id.\n     *\n     * This method does not work with multi-option payment providers. Due to its\n     * limitation, it is deprecated and will be removed in the future.\n     *\n     * @deprecated\n     * @internal\n     * @param methodId - The identifier for the payment method to load.\n     * @param options - Options for loading the payment method.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethod(methodId: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethod(methodId, options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Initializes the payment step of a checkout process.\n     *\n     * Before a payment method can accept payment details, it must first be\n     * initialized. Some payment methods require you to provide additional\n     * initialization options. For example, Amazon requires a container ID in\n     * order to initialize their payment widget.\n     *\n     * ```js\n     * await service.initializePayment({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'walletWidget',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * De-initializes the payment step of a checkout process.\n     *\n     * The method should be called once you no longer require a payment method\n     * to be initialized. It can perform any necessary clean-up behind the\n     * scene, i.e.: remove DOM nodes or event handlers that are attached as a\n     * result of payment initialization.\n     *\n     * ```js\n     * await service.deinitializePayment({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of countries available for billing.\n     *\n     * Once you make a successful request, you will be able to retrieve the list\n     * of countries by calling `CheckoutStoreSelector#getBillingCountries`.\n     *\n     * ```js\n     * const state = await service.loadBillingCountries();\n     *\n     * console.log(state.data.getBillingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available billing countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._countryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'billingCountries' });\n    }\n\n    /**\n     * Loads a list of countries available for shipping.\n     *\n     * The list is determined based on the shipping zones configured by a\n     * merchant. Once you make a successful call, you will be able to retrieve\n     * the list of available shipping countries by calling\n     * `CheckoutStoreSelector#getShippingCountries`.\n     *\n     * ```js\n     * const state = await service.loadShippingCountries();\n     *\n     * console.log(state.data.getShippingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available shipping countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingCountryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'shippingCountries' });\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their billing address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getBillingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadBillingAddressFields();\n     *\n     * console.log(state.data.getBillingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the billing address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadBillingCountries(options);\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their shipping address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getShippingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadShippingAddressFields();\n     *\n     * console.log(state.data.getShippingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the shipping address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadShippingCountries(options);\n    }\n\n    /**\n     * Initializes the sign-in step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, have their own sign-in flow. In\n     * order to support them, this method must be called.\n     *\n     * ```js\n     * await service.initializeCustomer({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'signInButton',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeCustomer(options?: CustomerInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * De-initializes the sign-in step of a checkout process.\n     *\n     * It should be called once you no longer want to prompt customers to sign\n     * in. It can perform any necessary clean-up behind the scene, i.e.: remove\n     * DOM nodes or event handlers that are attached as a result of customer\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeCustomer({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Continues to check out as a guest.\n     *\n     * The customer is required to provide their email address in order to\n     * continue. Once they provide their email address, it will be stored as a\n     * part of their billing address.\n     *\n     * @param credentials - The guest credentials to use.\n     * @param options - Options for continuing as a guest.\n     * @returns A promise that resolves to the current state.\n     */\n    continueAsGuest(credentials: GuestCredentials, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.continueAsGuest(credentials, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Signs into a customer's registered account.\n     *\n     * Once the customer is signed in successfully, the checkout state will be\n     * populated with information associated with the customer, such as their\n     * saved addresses. You can call `CheckoutStoreSelector#getCustomer` to\n     * retrieve the data.\n     *\n     * ```js\n     * const state = await service.signInCustomer({\n     *     email: 'foo@bar.com',\n     *     password: 'password123',\n     * });\n     *\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param credentials - The credentials to be used for signing in the customer.\n     * @param options - Options for signing in the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signInCustomer(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signIn(credentials, options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Signs out the current customer if they are previously signed in.\n     *\n     * Once the customer is successfully signed out, the checkout state will be\n     * reset automatically.\n     *\n     * ```js\n     * const state = await service.signOutCustomer();\n     *\n     * // The returned object should not contain information about the previously signed-in customer.\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param options - Options for signing out the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signOutCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signOut(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Loads a list of shipping options available for checkout.\n     *\n     * Available shipping options can only be determined once a customer\n     * provides their shipping address. If the method is executed successfully,\n     * `CheckoutStoreSelector#getShippingOptions` can be called to retrieve the\n     * list of shipping options.\n     *\n     * ```js\n     * const state = await service.loadShippingOptions();\n     *\n     * console.log(state.data.getShippingOptions());\n     * ```\n     *\n     * @param options - Options for loading the available shipping options.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingOptions(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.loadShippingOptions(options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Initializes the shipping step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, can provide shipping information to\n     * be used for checkout. In order to support them, this method must be\n     * called.\n     *\n     * ```js\n     * await service.initializeShipping({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'addressBook',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeShipping(options?: ShippingInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * De-initializes the shipping step of a checkout process.\n     *\n     * It should be called once you no longer need to collect shipping details.\n     * It can perform any necessary clean-up behind the scene, i.e.: remove DOM\n     * nodes or event handlers that are attached as a result of shipping\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeShipping({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeShipping(options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for the current address.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectShippingOption('address-id', 'shipping-option-id');\n     *\n     * console.log(state.data.getSelectedShippingOption());\n     * ```\n     *\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectShippingOption(shippingOptionId: string, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.selectOption(shippingOptionId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the shipping address for the current checkout.\n     *\n     * When a customer updates their shipping address for an order, they will\n     * see an updated list of shipping options and the cost for each option,\n     * unless no options are available. If the update is successful, you can\n     * call `CheckoutStoreSelector#getShippingAddress` to retrieve the address.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateShippingAddress(address);\n     *\n     * console.log(state.data.getShippingAddress());\n     * ```\n     *\n     * @param address - The address to be used for shipping.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateShippingAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Creates consignments given a list.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddress`.\n     *\n     * When consignments are created, an updated list of shipping options will\n     * become available for each consignment, unless no options are available.\n     * If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve the updated list of\n     * consignments.'\n     *\n     * Beware that if a consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.createConsignments(consignments);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignments - The list of consignments to be created.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.createConsignments(consignments, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Deletes a consignment\n     *\n     * ```js\n     * const state = await service.deleteConsignment('55c96cda6f04c');\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The ID of the consignment to be deleted\n     * @param options - Options for the consignment delete request\n     * @returns A promise that resolves to the current state.\n     */\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.deleteConsignment(consignmentId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates a specific consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#selectShippingOption`.\n     *\n     * When a shipping address for a consignment is updated, an updated list of\n     * shipping options will become available for the consignment, unless no\n     * options are available. If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve updated list of\n     * consignments.\n     *\n     * Beware that if the updated consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateConsignment(consignment);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateConsignment(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that assigns items to be shipped to a specific address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and assigns the provided items. If no consignment matches the address, a new one\n     * will be created.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    assignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.assignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that unassigns items from a specific shipping address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and unassigns the specified items. If the consignment ends up with no line items\n     * after the unassignment, it will be deleted.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    unassignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.unassignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for a given consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddres`.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectConsignmentShippingOption(consignmentId, optionId);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The identified of the consignment to be updated.\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectConsignmentShippingOption(\n        consignmentId: string,\n        shippingOptionId: string,\n        options?: ShippingRequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateShippingOption({\n            id: consignmentId,\n            shippingOptionId,\n        }, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the billing address for the current checkout.\n     *\n     * A customer must provide their billing address before they can proceed to\n     * pay for their order.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateBillingAddress(address);\n     *\n     * console.log(state.data.getBillingAddress());\n     * ```\n     *\n     * @param address - The address to be used for billing.\n     * @param options - Options for updating the billing address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateBillingAddress(address: BillingAddressRequestBody, options: RequestOptions = {}): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a coupon code to the current checkout.\n     *\n     * Once the coupon code gets applied, the quote for the current checkout will\n     * be adjusted accordingly. The same coupon code cannot be applied more than\n     * once.\n     *\n     * ```js\n     * await service.applyCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to apply to the current checkout.\n     * @param options - Options for applying the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    applyCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.applyCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a coupon code from the current checkout.\n     *\n     * Once the coupon code gets removed, the quote for the current checkout will\n     * be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to remove from the current checkout.\n     * @param options - Options for removing the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    removeCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.removeCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a gift certificate to the current checkout.\n     *\n     * Once the gift certificate gets applied, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.applyGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to apply to the current checkout.\n     * @param options - Options for applying the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    applyGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.applyGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a gift certificate from an order.\n     *\n     * Once the gift certificate gets removed, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to remove from the current checkout.\n     * @param options - Options for removing the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    removeGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.removeGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads a list of payment instruments associated with a customer.\n     *\n     * Once the method has been called successfully, you can retrieve the list\n     * of payment instruments by calling `CheckoutStoreSelector#getInstruments`.\n     * If the customer does not have any payment instruments on record, i.e.:\n     * credit card, you will get an empty list instead.\n     *\n     * ```js\n     * const state = service.loadInstruments();\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @returns A promise that resolves to the current state.\n     */\n    loadInstruments(): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.loadInstruments();\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Deletes a payment instrument by an id.\n     *\n     * Once an instrument gets removed, it can no longer be retrieved using\n     * `CheckoutStoreSelector#getInstruments`.\n     *\n     * ```js\n     * const state = service.deleteInstrument('123');\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns A promise that resolves to the current state.\n     */\n    deleteInstrument(instrumentId: string): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.deleteInstrument(instrumentId);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Clear errors that have been collected from previous calls.\n     *\n     * ```js\n     * const state = await service.clearError(error);\n     *\n     * console.log(state.errors.getError());\n     * ```\n     *\n     * @param error - Specific error object to clear\n     * @returns A promise that resolves to the current state.\n     */\n    clearError(error: Error): Promise<CheckoutSelectors> {\n        const action = this._errorActionCreator.clearError(error);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Dispatches an action through the data store and returns the current state\n     * once the action is dispatched.\n     *\n     * @param action - The action to dispatch.\n     * @returns A promise that resolves to the current state.\n     */\n    private _dispatch(action: Action | Observable<Action> | ThunkAction<Action>, options?: { queueId?: string }): Promise<CheckoutSelectors> {\n        return this._store.dispatch(action, options)\n            .then(() => this.getState())\n            .catch(error => {\n                throw this._errorTransformer.transform(error);\n            });\n    }\n}\n","import { ErrorMessageTransformer } from '../common/error';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../common/error/errors';\nimport { getEnvironment } from '../common/utility';\n\nexport type CheckoutServiceErrorType = MissingDataError | NotInitializedError;\nexport type CheckoutServiceErrorTransformer = ErrorMessageTransformer<CheckoutServiceErrorType | Error>;\n\nexport default function createCheckoutServiceErrorTransformer(\n    isDevelopment: boolean = getEnvironment() === 'development'\n): CheckoutServiceErrorTransformer {\n    return new ErrorMessageTransformer(error => {\n        if (!isDevelopment || !isCheckoutServiceError(error)) {\n            return error.message;\n        }\n\n        switch (error.subtype || error.type) {\n        case MissingDataErrorType.MissingConsignments:\n            return `\n                ${error.message}\n                The data could be unavailable because no shipping address has been provided.\n                To fix this, create a consignment or update the shipping address before performing\n                the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCart:\n        case MissingDataErrorType.MissingCheckout:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadCheckout\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you need to make sure \\`CheckoutService\\` is initialized\n                properly by calling \\`CheckoutService#loadCheckout\\` before performing any\n                other actions.\n            `;\n\n        case MissingDataErrorType.MissingOrder:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadOrder\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingOrderId:\n            return `\n                ${error.message}\n                The data could be unavailable because no order has been created yet. You have\n                to first create the order before you can perform the action.\n            `;\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server, or\n                configured by the merchant yet. To fix the former issue, you can try calling\n                \\`CheckoutService#loadPaymentMethods\\` before performing the same action again.\n            `;\n\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return `\n                In order to initialize the customer step of checkout, you need to call\n                \\`CheckoutService#initializeCustomer\\`. Afterwards, you should be able to\n                submit customer details.\n            `;\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the payment step of checkout, you need to call\n                \\`CheckoutService#initializePayment\\`. Afterwards, you should be able to\n                submit payment details.\n            `;\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the shipping step of checkout, you need to call\n                \\`CheckoutService#initializeShipping\\`. Afterwards, you should be able to\n                submit shipping details.\n            `;\n\n        default:\n            return error.message;\n        }\n    });\n}\n\nfunction isCheckoutServiceError(error: any): error is CheckoutServiceErrorType {\n    return !!(error.subtype || error.type);\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { ErrorActionCreator } from '../common/error';\nimport { getDefaultLogger } from '../common/log';\nimport { getEnvironment } from '../common/utility';\nimport { ConfigActionCreator, ConfigRequestSender, ConfigState } from '../config';\nimport { CouponActionCreator, CouponRequestSender, GiftCertificateActionCreator, GiftCertificateRequestSender } from '../coupon';\nimport { createCustomerStrategyRegistry, CustomerStrategyActionCreator } from '../customer';\nimport { CountryActionCreator, CountryRequestSender } from '../geography';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { createPaymentClient, createPaymentStrategyRegistry, PaymentMethodActionCreator, PaymentMethodRequestSender, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator, InstrumentRequestSender } from '../payment/instrument';\nimport { createShippingStrategyRegistry, ConsignmentActionCreator, ConsignmentRequestSender, ShippingCountryActionCreator, ShippingCountryRequestSender, ShippingStrategyActionCreator } from '../shipping';\n\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport CheckoutService from './checkout-service';\nimport CheckoutValidator from './checkout-validator';\nimport createCheckoutStore from './create-checkout-store';\n\n/**\n * Creates an instance of `CheckoutService`.\n *\n * @remarks\n * ```js\n * const service = createCheckoutService();\n *\n * service.subscribe(state => {\n *     console.log(state);\n * });\n *\n * service.loadCheckout();\n * ```\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutService`.\n */\nexport default function createCheckoutService(options?: CheckoutServiceOptions): CheckoutService {\n    if (document.location.protocol !== 'https:') {\n        getDefaultLogger().warn('The BigCommerce Checkout SDK should not be used on a non-HTTPS page');\n    }\n\n    if (getEnvironment() !== 'production') {\n        getDefaultLogger().warn('Note that the development build is not optimized. To create a production build, set process.env.NODE_ENV to `production`.');\n    }\n\n    const config: ConfigState = {\n        meta: {\n            externalSource: options && options.externalSource,\n        },\n        errors: {},\n        statuses: {},\n    };\n    const { locale = '', shouldWarnMutation = true } = options || {};\n    const requestSender = createRequestSender({ host: options && options.host });\n    const store = createCheckoutStore({ config }, { shouldWarnMutation });\n    const paymentClient = createPaymentClient(store);\n    const orderRequestSender = new OrderRequestSender(requestSender);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const configActionCreator = new ConfigActionCreator(new ConfigRequestSender(requestSender));\n    const orderActionCreator = new OrderActionCreator(orderRequestSender, new CheckoutValidator(checkoutRequestSender));\n\n    return new CheckoutService(\n        store,\n        new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender)),\n        new CheckoutActionCreator(checkoutRequestSender, configActionCreator),\n        configActionCreator,\n        new ConsignmentActionCreator(new ConsignmentRequestSender(requestSender), checkoutRequestSender),\n        new CountryActionCreator(new CountryRequestSender(requestSender, { locale })),\n        new CouponActionCreator(new CouponRequestSender(requestSender)),\n        new CustomerStrategyActionCreator(createCustomerStrategyRegistry(store, requestSender)),\n        new ErrorActionCreator(),\n        new GiftCertificateActionCreator(new GiftCertificateRequestSender(requestSender)),\n        new InstrumentActionCreator(new InstrumentRequestSender(paymentClient, requestSender)),\n        orderActionCreator,\n        new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n        new PaymentStrategyActionCreator(\n            createPaymentStrategyRegistry(store, paymentClient, requestSender),\n            orderActionCreator\n        ),\n        new ShippingCountryActionCreator(new ShippingCountryRequestSender(requestSender, { locale })),\n        new ShippingStrategyActionCreator(createShippingStrategyRegistry(store, requestSender))\n    );\n}\n\nexport interface CheckoutServiceOptions {\n    locale?: string;\n    host?: string;\n    shouldWarnMutation?: boolean;\n    externalSource?: string;\n}\n","// tslint:disable-next-line:no-reference\n/// <reference path=\"../payment/bigpay-client.d.ts\" />\nimport { createClient as createBigpayClient } from '@bigcommerce/bigpay-client';\n\nimport { CheckoutStore } from '../checkout';\n\nexport default function createPaymentClient(store: CheckoutStore) {\n    const paymentClient = createBigpayClient();\n\n    store.subscribe(\n        state => {\n            const config = state.config.getStoreConfig();\n\n            if (config) {\n                paymentClient.setHost(config.paymentSettings.bigpayBaseUrl);\n            }\n        },\n        state => state.config.getStoreConfig()\n    );\n\n    return paymentClient;\n}\n","export * from './checkout-actions';\n\nexport { default as Checkout, CheckoutPayment } from './checkout';\nexport { default as CHECKOUT_DEFAULT_INCLUDES } from './checkout-default-includes';\nexport { default as CheckoutActionCreator } from './checkout-action-creator';\nexport { default as CheckoutParams, CheckoutIncludes } from './checkout-params';\nexport { default as checkoutReducer } from './checkout-reducer';\nexport { default as CheckoutRequestSender } from './checkout-request-sender';\nexport { default as CheckoutSelector } from './checkout-selector';\nexport { default as CheckoutSelectors } from './checkout-selectors';\nexport { default as CheckoutService } from './checkout-service';\nexport { default as CheckoutState } from './checkout-state';\nexport { default as CheckoutStoreErrorSelector } from './checkout-store-error-selector';\nexport { default as CheckoutStoreSelector } from './checkout-store-selector';\nexport { default as CheckoutStoreState } from './checkout-store-state';\nexport { default as CheckoutStoreStatusSelector } from './checkout-store-status-selector';\nexport { default as CheckoutStore, CheckoutStoreOptions, ReadableCheckoutStore } from './checkout-store';\nexport { default as CheckoutValidator } from './checkout-validator';\nexport { default as InternalCheckoutSelectors } from './internal-checkout-selectors';\n\nexport { default as createActionTransformer } from './create-action-transformer';\nexport { default as createCheckoutService } from './create-checkout-service';\nexport { default as createCheckoutStore } from './create-checkout-store';\nexport { default as createCheckoutSelectors } from './create-checkout-selectors';\nexport { default as createInternalCheckoutSelectors } from './create-internal-checkout-selectors';\n","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n};\n\nexport default class RequestError<TBody = any> extends StandardError {\n    body: TBody | {};\n    headers: { [key: string]: any; };\n    errors: Array<{ code: string, message?: string }>;\n    status: number;\n\n    constructor(\n        response?: Response<TBody | {}>,\n        { message, errors }: {\n            message?: string;\n            errors?: Array<{ code: string, message?: string }>,\n        } = {}\n    ) {\n        const { body, headers, status } = response || DEFAULT_RESPONSE;\n\n        super(message || 'An unexpected error has occurred.');\n\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.errors = errors || [];\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport Config from './config';\n\nexport enum ConfigActionType {\n    LoadConfigRequested = 'LOAD_CONFIG_REQUESTED',\n    LoadConfigSucceeded = 'LOAD_CONFIG_SUCCEEDED',\n    LoadConfigFailed = 'LOAD_CONFIG_FAILED',\n}\n\nexport type LoadConfigAction =\n    LoadConfigRequestedAction |\n    LoadConfigSucceededAction |\n    LoadConfigFailedAction;\n\nexport interface LoadConfigRequestedAction extends Action {\n    type: ConfigActionType.LoadConfigRequested;\n}\n\nexport interface LoadConfigSucceededAction extends Action<Config> {\n    type: ConfigActionType.LoadConfigSucceeded;\n}\n\nexport interface LoadConfigFailedAction extends Action<Error> {\n    type: ConfigActionType.LoadConfigFailed;\n}\n","import { memoize } from 'lodash';\n\nimport { bindDecorator, isEqual, isPrivate, CacheKeyResolver } from '../utility';\n\n/**\n * Decorates a class by patching all of its methods to cache their return values\n * and return them if they are called again with the same set of parameters. The\n * decorator also binds all the methods to the calling instance so it can be\n * destructed.\n */\nexport default function selectorDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                selectorMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\nfunction selectorMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let resolver = new CacheKeyResolver();\n    let method = descriptor.value;\n    let memoizedMethod = memoize(method, (...args) => resolver.getKey(...args));\n\n    return bindDecorator(target, key, {\n        get() {\n            const value = ((...args: any[]) => {\n                const cachedValue = memoizedMethod.call(this, ...args);\n\n                if (resolver.getUsedCount(...args) === 1) {\n                    return cachedValue;\n                }\n\n                const newValue = method.call(this, ...args);\n\n                if (isEqual(newValue, cachedValue, { keyFilter: key => !isPrivate(key) })) {\n                    return cachedValue;\n                }\n\n                memoizedMethod.cache.set(resolver.getKey(...args), newValue);\n\n                return newValue;\n            }) as T;\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n        set(value) {\n            resolver = new CacheKeyResolver();\n            method = value;\n            memoizedMethod = memoize(method, (...args) => resolver.getKey(...args));\n        },\n    });\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\ntype Method = (...args: any[]) => any;\n","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","import { Action } from '@bigcommerce/data-store';\n\nimport Country from './country';\n\nexport enum CountryActionType {\n    LoadCountriesRequested = 'LOAD_COUNTRIES_REQUESTED',\n    LoadCountriesSucceeded = 'LOAD_COUNTRIES_SUCCEEDED',\n    LoadCountriesFailed = 'LOAD_COUNTRIES_FAILED',\n}\n\nexport type LoadCountriesAction =\n    LoadCountriesRequestedAction |\n    LoadCountriesSucceededAction |\n    LoadCountriesFailedAction;\n\nexport interface LoadCountriesRequestedAction extends Action {\n    type: CountryActionType.LoadCountriesRequested;\n}\n\nexport interface LoadCountriesSucceededAction extends Action<Country[]> {\n    type: CountryActionType.LoadCountriesSucceeded;\n}\n\nexport interface LoadCountriesFailedAction extends Action<Error> {\n    type: CountryActionType.LoadCountriesFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Country } from '../geography';\n\nexport enum ShippingCountryActionType {\n    LoadShippingCountriesRequested = 'LOAD_SHIPPING_COUNTRIES_REQUESTED',\n    LoadShippingCountriesSucceeded = 'LOAD_SHIPPING_COUNTRIES_SUCCEEDED',\n    LoadShippingCountriesFailed = 'LOAD_SHIPPING_COUNTRIES_FAILED',\n}\n\nexport type LoadShippingCountriesAction = LoadShippingCountriesRequestedAction |\n    LoadShippingCountriesSucceededAction |\n    LoadShippingCountriesFailedAction;\n\nexport interface LoadShippingCountriesRequestedAction extends Action {\n    type: ShippingCountryActionType.LoadShippingCountriesRequested;\n}\n\nexport interface LoadShippingCountriesSucceededAction extends Action<Country[]> {\n    type: ShippingCountryActionType.LoadShippingCountriesSucceeded;\n}\n\nexport interface LoadShippingCountriesFailedAction extends Action<Error> {\n    type: ShippingCountryActionType.LoadShippingCountriesFailed;\n}\n","module.exports = require(\"@bigcommerce/request-sender\");","export const ACKNOWLEDGE = 'ACKNOWLEDGE';\nexport const FINALIZE = 'FINALIZE';\nexport const INITIALIZE = 'INITIALIZE';\n","module.exports = require(\"@bigcommerce/script-loader\");","export default interface PaymentStrategyState {\n    data: PaymentStrategyDataState;\n    errors: PaymentStrategyErrorsState;\n    statuses: PaymentStrategyStatusesState;\n}\n\nexport interface PaymentStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean,\n    };\n}\n\nexport interface PaymentStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    executeError?: Error;\n    executeMethodId?: string;\n    finalizeError?: Error;\n    finalizeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface PaymentStrategyStatusesState {\n    deinitializeMethodId?: string;\n    executeMethodId?: string;\n    finalizeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isExecuting?: boolean;\n    isFinalizing?: boolean;\n    isInitializing?: boolean;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: PaymentStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { omitDeep } from '../utility';\n\nimport { ClearErrorAction, ErrorActionType } from './error-actions';\n\nexport default function clearErrorReducer<TState extends { [key: string]: any }, TAction extends Action>(\n    state: TState,\n    action: TAction\n): TState | undefined {\n    if (isClearErrorAction(action)) {\n        return omitDeep(state, value => value === action.payload);\n    }\n\n    return state;\n}\n\nfunction isClearErrorAction(action: Action): action is ClearErrorAction {\n    return action.type === ErrorActionType.ClearError;\n}\n","const CHECKOUT_DEFAULT_INCLUDES = [\n    'cart.lineItems.physicalItems.options',\n    'cart.lineItems.digitalItems.options',\n    'customer',\n    'payments',\n    'promotions.banners',\n];\n\nexport default CHECKOUT_DEFAULT_INCLUDES;\n","export interface CompareOptions {\n    keyFilter?(key: string): boolean;\n}\n\nexport default function isEqual(objectA: any, objectB: any, options?: CompareOptions): boolean {\n    if (objectA === objectB) {\n        return true;\n    }\n\n    if (objectA && objectB && typeof objectA === 'object' && typeof objectB === 'object') {\n        if (Array.isArray(objectA) && Array.isArray(objectB)) {\n            return isArrayEqual(objectA, objectB, options);\n        }\n\n        if (Array.isArray(objectA) || Array.isArray(objectB)) {\n            return false;\n        }\n\n        if ((objectA instanceof Date) && (objectB instanceof Date)) {\n            return isDateEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof Date) || (objectB instanceof Date)) {\n            return false;\n        }\n\n        if ((objectA instanceof RegExp) && (objectB instanceof RegExp)) {\n            return isRegExpEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof RegExp) || (objectB instanceof RegExp)) {\n            return false;\n        }\n\n        return isObjectEqual(objectA, objectB, options);\n    }\n\n    return objectA === objectB;\n}\n\nfunction isRegExpEqual(objectA: RegExp, objectB: RegExp): boolean {\n    return objectA.toString() === objectB.toString();\n}\n\nfunction isDateEqual(objectA: Date, objectB: Date): boolean {\n    return objectA.getTime() === objectB.getTime();\n}\n\nfunction isArrayEqual(objectA: any[], objectB: any[], options?: CompareOptions): boolean {\n    if (objectA.length !== objectB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = objectA.length; index < length; index++) {\n        if (!isEqual(objectA[index], objectB[index], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction isObjectEqual(\n    objectA: { [key: string]: any },\n    objectB: { [key: string]: any },\n    options?: CompareOptions\n): boolean {\n    const filter = options && options.keyFilter;\n    const keysA = filter ? Object.keys(objectA).filter(filter) : Object.keys(objectA);\n    const keysB = filter ? Object.keys(objectB).filter(filter) : Object.keys(objectB);\n\n    if (keysA.length !== keysB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = keysA.length; index < length; index++) {\n        const key = keysA[index];\n\n        if (!objectB.hasOwnProperty(key)) {\n            return false;\n        }\n\n        if (!isEqual(objectA[key], objectB[key], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadCheckoutAction } from '../checkout';\n\nimport { InternalCustomerResponseData } from './internal-customer-responses';\n\nexport enum CustomerActionType {\n    SignInCustomerRequested = 'SIGN_IN_CUSTOMER_REQUESTED',\n    SignInCustomerSucceeded = 'SIGN_IN_CUSTOMER_SUCCEEDED',\n    SignInCustomerFailed = 'SIGN_IN_CUSTOMER_FAILED',\n\n    SignOutCustomerRequested = 'SIGN_OUT_CUSTOMER_REQUESTED',\n    SignOutCustomerSucceeded = 'SIGN_OUT_CUSTOMER_SUCCEEDED',\n    SignOutCustomerFailed = 'SIGN_OUT_CUSTOMER_FAILED',\n}\n\nexport type CustomerAction =\n    SignInCustomerAction |\n    SignOutCustomerAction;\n\nexport type SignInCustomerAction =\n    SignInCustomerRequestedAction |\n    SignInCustomerSucceededAction |\n    SignInCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport type SignOutCustomerAction =\n    SignOutCustomerRequestedAction |\n    SignOutCustomerSucceededAction |\n    SignOutCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport interface SignInCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignInCustomerRequested;\n}\n\nexport interface SignInCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignInCustomerSucceeded;\n}\n\nexport interface SignInCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignInCustomerFailed;\n}\n\nexport interface SignOutCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignOutCustomerRequested;\n}\n\nexport interface SignOutCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignOutCustomerSucceeded;\n}\n\nexport interface SignOutCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignOutCustomerFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderAction } from '../order';\n\nimport PaymentResponseBody from './payment-response-body';\n\nexport enum PaymentActionType {\n    SubmitPaymentRequested = 'SUBMIT_PAYMENT_REQUESTED',\n    SubmitPaymentSucceeded = 'SUBMIT_PAYMENT_SUCCEEDED',\n    SubmitPaymentFailed = 'SUBMIT_PAYMENT_FAILED',\n\n    InitializeOffsitePaymentRequested = 'INITIALIZE_OFFSITE_PAYMENT_REQUESTED',\n    InitializeOffsitePaymentSucceeded = 'INITIALIZE_OFFSITE_PAYMENT_SUCCEEDED',\n    InitializeOffsitePaymentFailed = 'INITIALIZE_OFFSITE_PAYMENT_FAILED',\n}\n\nexport type PaymentAction = SubmitPaymentAction |\n    InitializeOffsitePaymentAction;\n\nexport type SubmitPaymentAction =\n    SubmitPaymentRequestedAction |\n    SubmitPaymentSucceededAction |\n    SubmitPaymentFailedAction |\n    LoadOrderAction;\n\nexport type InitializeOffsitePaymentAction =\n    InitializeOffsitePaymentRequestedAction |\n    InitializeOffsitePaymentSucceededAction |\n    InitializeOffsitePaymentFailedAction;\n\nexport interface SubmitPaymentRequestedAction extends Action {\n    type: PaymentActionType.SubmitPaymentRequested;\n}\n\nexport interface SubmitPaymentSucceededAction extends Action<PaymentResponseBody> {\n    type: PaymentActionType.SubmitPaymentSucceeded;\n}\n\nexport interface SubmitPaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.SubmitPaymentFailed;\n}\n\nexport interface InitializeOffsitePaymentRequestedAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentRequested;\n}\n\nexport interface InitializeOffsitePaymentSucceededAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentSucceeded;\n}\n\nexport interface InitializeOffsitePaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.InitializeOffsitePaymentFailed;\n}\n","import StandardError from './standard-error';\n\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.type = 'invalid_argument';\n    }\n}\n","export const HOSTED = 'PAYMENT_TYPE_HOSTED';\nexport const OFFLINE = 'PAYMENT_TYPE_OFFLINE';\n","export default class AmountTransformer {\n    constructor(private _dp: number) {}\n\n    toInteger(amount: number): number {\n        return Math.floor(amount * Math.pow(10, this._dp));\n    }\n}\n","import IframeEvent from './iframe-event';\n\nexport default function isIframeEvent<TEvent extends IframeEvent<TType>, TType extends string>(\n    object: any,\n    type: TType\n): object is TEvent {\n    return object.type === type;\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonErrorSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    getInitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getInitializeError(methodId);\n    }\n\n    getDeinitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getDeinitializeError(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonStatusSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    isInitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isInitializing(methodId);\n    }\n\n    isDeinitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isDeinitializing(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\n\nimport CheckoutButtonErrorSelector from './checkout-button-error-selector';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStatusSelector from './checkout-button-status-selector';\n\nexport default function createCheckoutButtonSelectors(selectors: InternalCheckoutSelectors): CheckoutButtonSelectors {\n    const errors = new CheckoutButtonErrorSelector(selectors);\n    const statuses = new CheckoutButtonStatusSelector(selectors);\n\n    return {\n        errors,\n        statuses,\n    };\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../checkout';\nimport { isElementId, setUniqueElementId } from '../common/dom';\n\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonSelectors from './create-checkout-button-selectors';\n\nexport default class CheckoutButtonInitializer {\n    private _state: CheckoutButtonSelectors;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _buttonStrategyActionCreator: CheckoutButtonStrategyActionCreator\n    ) {\n        this._state = createCheckoutButtonSelectors(this._store.getState());\n\n        this._store.subscribe(state => {\n            this._state = createCheckoutButtonSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * state. You can query the state by calling any of its getter methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.errors.getInitializeButtonError());\n     * console.log(state.statuses.isInitializingButton());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutButtonSelectors {\n        return this._state;\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the current state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.statuses.isInitializingButton());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.errors.getInitializeButtonError();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.errors.getInitializeButtonError())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutButtonSelectors) => void,\n        ...filters: Array<(state: CheckoutButtonSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            state => state.checkoutButton.getState(),\n            ...filters.map(filter => (state: InternalCheckoutSelectors) => filter(createCheckoutButtonSelectors(state)))\n        );\n    }\n\n    /**\n     * Initializes the checkout button of a payment method.\n     *\n     * When the checkout button is initialized, it will be inserted into the DOM,\n     * ready to be interacted with by the customer.\n     *\n     * ```js\n     * initializer.initializeButton({\n     *     methodId: 'braintreepaypal',\n     *     containerId: 'checkoutButton',\n     *     braintreepaypal: {\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeButton(options: CheckoutButtonInitializeOptions): Promise<CheckoutButtonSelectors> {\n        const containerIds = isElementId(options.containerId) ?\n            [options.containerId] :\n            setUniqueElementId(options.containerId, `${options.methodId}-container`);\n\n        return Promise.all(\n            containerIds.map(containerId => {\n                const action = this._buttonStrategyActionCreator.initialize({ ...options, containerId });\n                const queueId = `checkoutButtonStrategy:${options.methodId}:${containerId}`;\n\n                return this._store.dispatch(action, { queueId });\n            })\n        )\n            .then(() => this.getState());\n    }\n\n    /**\n     * De-initializes the checkout button by performing any necessary clean-ups.\n     *\n     * ```js\n     * await service.deinitializeButton({\n     *     methodId: 'braintreepaypal',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeButton(options: CheckoutButtonOptions): Promise<CheckoutButtonSelectors> {\n        const action = this._buttonStrategyActionCreator.deinitialize(options);\n        const queueId = `checkoutButtonStrategy:${options.methodId}`;\n\n        return this._store.dispatch(action, { queueId })\n            .then(() => this.getState());\n    }\n}\n","enum CheckoutButtonMethodType {\n    BRAINTREE_PAYPAL = 'braintreepaypal',\n    BRAINTREE_PAYPAL_CREDIT = 'braintreepaypalcredit',\n    GOOGLEPAY_BRAINTREE = 'googlepaybraintree',\n    GOOGLEPAY_STRIPE = 'googlepaystripe',\n    MASTERPASS = 'masterpass',\n    PAYPALEXPRESS = 'paypalexpress',\n}\n\nexport default CheckoutButtonMethodType;\n","export default function isElementId(id: string): boolean {\n    return /^\\w[\\w\\-\\:\\.]*$/.test(id);\n}\n","import { uniqueId } from 'lodash';\n\nimport { InvalidArgumentError } from '../error/errors';\n\nexport default function setUniqueElementId(selector: string, idPrefix: string): string[] {\n    const containers = document.querySelectorAll(selector);\n\n    if (!containers.length) {\n        throw new InvalidArgumentError(`Unable to find any element with the specified selector: ${selector}`);\n    }\n\n    return Array.prototype.slice.call(containers)\n        .map((container: HTMLElement) => {\n            if (!container.id) {\n                container.id = uniqueId(idPrefix);\n            }\n\n            return container.id;\n        });\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator } from '../payment';\n\nimport { CheckoutButtonActionType, DeinitializeButtonAction, InitializeButtonAction } from './checkout-button-actions';\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport { CheckoutButtonStrategy } from './strategies';\n\nexport default class CheckoutButtonStrategyActionCreator {\n    constructor(\n        private _registry: Registry<CheckoutButtonStrategy>,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): ThunkAction<InitializeButtonAction, InternalCheckoutSelectors> {\n        return store => {\n            const meta = { methodId: options.methodId, containerId: options.containerId };\n\n            if (store.getState().checkoutButton.isInitialized(options.methodId, options.containerId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(CheckoutButtonActionType.InitializeButtonRequested, undefined, meta)),\n                this._paymentMethodActionCreator.loadPaymentMethod(options.methodId, { timeout: options.timeout, useCache: true }),\n                defer(() => this._registry.get(options.methodId).initialize(options)\n                    .then(() => createAction(CheckoutButtonActionType.InitializeButtonSucceeded, undefined, meta)))\n            ).pipe(\n                catchError(error => throwErrorAction(CheckoutButtonActionType.InitializeButtonFailed, error, meta))\n            );\n        };\n    }\n\n    deinitialize(options: CheckoutButtonOptions): ThunkAction<DeinitializeButtonAction, InternalCheckoutSelectors> {\n        return store => {\n            const meta = { methodId: options.methodId };\n\n            if (!store.getState().checkoutButton.isInitialized(options.methodId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(CheckoutButtonActionType.DeinitializeButtonRequested, undefined, meta)),\n                defer(() => this._registry.get(options.methodId).deinitialize()\n                    .then(() => createAction(CheckoutButtonActionType.DeinitializeButtonSucceeded, undefined, meta)))\n            ).pipe(\n                catchError(error => throwErrorAction(CheckoutButtonActionType.DeinitializeButtonFailed, error, meta))\n            );\n        };\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { Address, LegacyAddress } from '../../../address';\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { PaymentMethod } from '../../../payment';\nimport { BraintreeAddress, BraintreeError, BraintreePaypalCheckout, BraintreeSDKCreator, BraintreeTokenizePayload } from '../../../payment/strategies/braintree';\nimport { PaypalAuthorizeData, PaypalScriptLoader } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\n\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class BraintreePaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paypalCheckout?: BraintreePaypalCheckout;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _offerCredit: boolean = false\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = (this._offerCredit ? options.braintreepaypalcredit : options.braintreepaypal) || {};\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paymentMethod || !paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return Promise.all([\n            this._braintreeSDKCreator.getPaypalCheckout(),\n            this._paypalScriptLoader.loadPaypal(),\n        ])\n            .then(([paypalCheckout, paypal]) => {\n                this._paypalCheckout = paypalCheckout;\n\n                const allowedSources = [];\n                const disallowedSources = [];\n\n                if (paypalOptions.allowCredit) {\n                    allowedSources.push(paypal.FUNDING.CREDIT);\n                } else {\n                    disallowedSources.push(paypal.FUNDING.CREDIT);\n                }\n\n                return paypal.Button.render({\n                    env: paymentMethod.config.testMode ? 'sandbox' : 'production',\n                    commit: paypalOptions.shouldProcessPayment ? true : false,\n                    funding: {\n                        allowed: allowedSources,\n                        disallowed: disallowedSources,\n                    },\n                    style: {\n                        shape: 'rect',\n                        label: this._offerCredit ? 'credit' : undefined,\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: () => this._setupPayment(paypalOptions.onPaymentError),\n                    onAuthorize: data => this._tokenizePayment(data, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, options.containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paypalCheckout = undefined;\n        this._paymentMethod = undefined;\n\n        this._braintreeSDKCreator.teardown();\n\n        return Promise.resolve();\n    }\n\n    private _setupPayment(onError?: (error: BraintreeError | StandardError) => void): Promise<string> {\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const checkout = state.checkout.getCheckout();\n                const config = state.config.getStoreConfig();\n                const customer = state.customer.getCustomer();\n                const address = customer && customer.addresses && customer.addresses[0];\n\n                if (!this._paypalCheckout) {\n                    throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                return this._paypalCheckout.createPayment({\n                    flow: 'checkout',\n                    enableShippingAddress: true,\n                    shippingAddressEditable: false,\n                    shippingAddressOverride: address ? this._mapToBraintreeAddress(address) : undefined,\n                    amount: checkout.grandTotal,\n                    currency: config.currency.code,\n                    offerCredit: this._offerCredit,\n                });\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        shouldProcessPayment?: boolean,\n        onError?: (error: BraintreeError | StandardError) => void\n    ): Promise<BraintreeTokenizePayload> {\n        if (!this._paypalCheckout || !this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return Promise.all([\n            this._paypalCheckout.tokenizePayment(data),\n            this._braintreeSDKCreator.getDataCollector({ paypal: true }),\n        ])\n            .then(([payload, { deviceData }]) => {\n                this._formPoster.postForm('/checkout.php', {\n                    payment_type: 'paypal',\n                    provider: methodId,\n                    action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                    nonce: payload.nonce,\n                    device_data: deviceData,\n                    shipping_address: JSON.stringify(this._mapToLegacyShippingAddress(payload)),\n                    billing_address: JSON.stringify(this._mapToLegacyBillingAddress(payload)),\n                });\n\n                return payload;\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _mapToLegacyShippingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const shippingAddress = payload.details.shippingAddress;\n        const recipientName = shippingAddress && shippingAddress.recipientName || '';\n        const [firstName, lastName] = recipientName.split(' ');\n\n        return {\n            email: payload.details.email,\n            first_name: firstName,\n            last_name: lastName,\n            phone_number: shippingAddress && shippingAddress.phone || payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToLegacyBillingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const billingAddress = payload.details.billingAddress;\n        const shippingAddress = payload.details.shippingAddress;\n\n        if (billingAddress) {\n            return {\n                email: payload.details.email,\n                first_name: billingAddress.firstName || payload.details.firstName,\n                last_name: billingAddress.lastName || payload.details.lastName,\n                phone_number: billingAddress.phone || payload.details.phone,\n                address_line_1: billingAddress.line1,\n                address_line_2: billingAddress.line2,\n                city: billingAddress.city,\n                state: billingAddress.state,\n                country_code: billingAddress.countryCode,\n                postal_code: billingAddress.postalCode,\n            };\n        }\n\n        return {\n            email: payload.details.email,\n            first_name: payload.details.firstName,\n            last_name: payload.details.lastName,\n            phone_number: payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToBraintreeAddress(address: Address): BraintreeAddress {\n        return {\n            line1: address.address1,\n            line2: address.address2,\n            city: address.city,\n            state: address.stateOrProvinceCode,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phone,\n            recipientName: `${address.firstName} ${address.lastName}`,\n        };\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class GooglePayButtonStrategy implements CheckoutButtonStrategy {\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _formPoster: FormPoster,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        this._methodId = methodId;\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(() => this._googlePayPaymentProcessor.initialize(this._getMethodId()))\n            .then(() => {\n                this._walletButton = this._createSignInButton(containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.getElementById(containerId);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const googlePayButton = this._googlePayPaymentProcessor.createButton(this._handleWalletButtonClick);\n\n        container.appendChild(googlePayButton);\n\n        return googlePayButton;\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        return this._googlePayPaymentProcessor.displayWallet()\n            .then(paymentData => this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => {\n                if (paymentData.shippingAddress) {\n                    this._googlePayPaymentProcessor.updateShippingAddress(paymentData.shippingAddress);\n                }\n            }))\n            .then(() => this._onPaymentSelectComplete())\n            .catch(error => this._onError(error));\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n\n    private _onError(error?: Error): void {\n        if (error && error.message !== 'CANCELED') {\n            throw error;\n        }\n    }\n}\n","import { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType\n} from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { getCallbackUrl, Masterpass, MasterpassCheckoutOptions, MasterpassScriptLoader } from '../../../payment/strategies/masterpass';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\n\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class MasterpassButtonStrategy implements CheckoutButtonStrategy {\n    private _masterpassClient?: Masterpass;\n    private _methodId?: string;\n    private _signInButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        this._methodId = methodId;\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod || !paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._masterpassScriptLoader.load(paymentMethod.config.testMode);\n            })\n            .then(masterpass => {\n                this._masterpassClient = masterpass;\n                this._signInButton = this._createSignInButton(containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.removeEventListener('click', this._handleWalletButtonClick);\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return Promise.resolve();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const buttonContainer = document.getElementById(containerId);\n\n        if (!buttonContainer) {\n            throw new Error('Need a container to place the button');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        buttonContainer.appendChild(button);\n\n        button.addEventListener('click', this._handleWalletButtonClick);\n\n        return button;\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const paymentMethod = this._methodId ? state.paymentMethods.getPaymentMethod(this._methodId) : null;\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.cart.cartAmount.toString(),\n            currency: checkout.cart.currency.code,\n            cartId: checkout.cart.id,\n            suppressShippingAddress: false,\n            callbackUrl: getCallbackUrl('cart'),\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(): void {\n        if (!this._masterpassClient) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        this._masterpassClient.checkout(this._createMasterpassPayload());\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { INTERNAL_USE_ONLY } from '../../../common/http-request';\nimport { PaymentMethod } from '../../../payment';\nimport { PaypalActions, PaypalAuthorizeData, PaypalClientToken } from '../../../payment/strategies/paypal';\nimport { PaypalScriptLoader } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class PaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _host: string = ''\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = options.paypal;\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paypalOptions) {\n            throw new InvalidArgumentError();\n        }\n\n        return this._paypalScriptLoader.loadPaypal()\n            .then(paypal => {\n                if (!paymentMethod || !paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const merchantId = paymentMethod.config.merchantId;\n                const env = paymentMethod.config.testMode ? 'sandbox' : 'production';\n                const clientToken: PaypalClientToken = { [env]: paypalOptions.clientId };\n\n                const allowedSources = [];\n                const disallowedSources = [];\n\n                if (paypalOptions.allowCredit) {\n                    allowedSources.push(paypal.FUNDING.CREDIT);\n                } else {\n                    disallowedSources.push(paypal.FUNDING.CREDIT);\n                }\n\n                return paypal.Button.render({\n                    env,\n                    client: clientToken,\n                    commit: paypalOptions.shouldProcessPayment,\n                    funding: {\n                        allowed: allowedSources,\n                        disallowed: disallowedSources,\n                    },\n                    style: {\n                        shape: 'rect',\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: (data, actions) => this._setupPayment(merchantId, actions, paypalOptions.onPaymentError),\n                    onAuthorize: (data, actions) => this._tokenizePayment(data, actions, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, options.containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve();\n    }\n\n    private _setupPayment(merchantId: string, actions?: PaypalActions, onError?: (error: StandardError) => void): Promise<string> {\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const cart = state.cart.getCart();\n                const cartId = cart ? cart.id : '';\n\n                return actions.request.post(`${this._host}/api/storefront/payment/paypalexpress`, { merchantId, cartId }, {\n                    headers: {\n                        'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                    },\n                });\n            })\n            .then(res => res.id)\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        actions?: PaypalActions,\n        shouldProcessPayment?: boolean,\n        onError?: (error: StandardError) => void\n    ): Promise<void> {\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!data.paymentID || !data.payerID) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return actions.payment.get(data.paymentID).then(payload => {\n            this._formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                paymentId: data.paymentID,\n                payerId: data.payerID,\n                payerInfo: JSON.stringify(payload.payer.payer_info),\n            });\n        });\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { createCheckoutStore } from '../checkout';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\n\nimport CheckoutButtonInitializer from './checkout-button-initializer';\nimport CheckoutButtonInitializerOptions from './checkout-button-initializer-options';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonRegistry from './create-checkout-button-registry';\n\n/**\n * Creates an instance of `CheckoutButtonInitializer`.\n *\n * @remarks\n * ```js\n * const initializer = createCheckoutButtonInitializer();\n *\n * initializer.initializeButton({\n *     methodId: 'braintreepaypal',\n *     braintreepaypal: {\n *         container: '#checkoutButton',\n *     },\n * });\n * ```\n *\n * @alpha\n * Please note that `CheckoutButtonInitializer` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutButtonInitializer`.\n */\nexport default function createCheckoutButtonInitializer(\n    options?: CheckoutButtonInitializerOptions\n): CheckoutButtonInitializer {\n    const host = options && options.host;\n    const store = createCheckoutStore();\n    const requestSender = createRequestSender({ host });\n    const formPoster = createFormPoster({ host });\n\n    return new CheckoutButtonInitializer(\n        store,\n        new CheckoutButtonStrategyActionCreator(\n            createCheckoutButtonRegistry(store, requestSender, formPoster, host),\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender))\n        )\n    );\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { BraintreeScriptLoader, BraintreeSDKCreator } from '../payment/strategies/braintree';\nimport { createGooglePayPaymentProcessor, GooglePayBraintreeInitializer, GooglePayStripeInitializer } from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { PaypalScriptLoader } from '../payment/strategies/paypal';\n\nimport { CheckoutButtonMethodType, CheckoutButtonStrategy } from './strategies';\nimport { BraintreePaypalButtonStrategy } from './strategies/braintree';\nimport { GooglePayButtonStrategy } from './strategies/googlepay';\nimport { MasterpassButtonStrategy } from './strategies/masterpass';\nimport { PaypalButtonStrategy } from './strategies/paypal';\n\nexport default function createCheckoutButtonRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender,\n    formPoster: FormPoster,\n    host?: string\n): Registry<CheckoutButtonStrategy, CheckoutButtonMethodType> {\n    const registry = new Registry<CheckoutButtonStrategy, CheckoutButtonMethodType>();\n    const scriptLoader = getScriptLoader();\n    const checkoutActionCreator = new CheckoutActionCreator(\n        new CheckoutRequestSender(requestSender),\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            formPoster\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL_CREDIT, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            formPoster,\n            true\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.MASTERPASS, () =>\n        new MasterpassButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        ));\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_BRAINTREE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_STRIPE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.PAYPALEXPRESS, () =>\n        new PaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new PaypalScriptLoader(scriptLoader),\n            formPoster,\n            host\n        )\n    );\n\n    return registry;\n}\n","export { default as createCheckoutButtonInitializer } from './create-checkout-button-initializer';\nexport { default as checkoutButtonReducer } from './checkout-button-reducer';\nexport { default as CheckoutButtonSelector } from './checkout-button-selector';\nexport { default as CheckoutButtonState } from './checkout-button-state';\n\nexport { CheckoutButtonOptions, CheckoutButtonInitializeOptions } from './checkout-button-options';\n","export enum CheckoutIncludes {\n    AvailableShippingOptions = 'consignments.availableShippingOptions',\n    PhysicalItemsCategoryNames = 'cart.lineItems.physicalItems.categoryNames',\n    DigitalItemsCategoryNames = 'cart.lineItems.digitalItems.categoryNames',\n}\n\nexport default interface CheckoutParams {\n    include?: CheckoutIncludes[];\n}\n","module.exports = require(\"@bigcommerce/form-poster\");","import InternalLineItem from './internal-line-item';\nimport { LineItem } from './line-item';\nimport LineItemMap from './line-item-map';\nimport mapGiftCertificateToInternalLineItem from './map-gift-certificate-to-internal-line-item';\nimport mapToInternalLineItem from './map-to-internal-line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItems(\n    itemMap: LineItemMap,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem[] {\n    return (Object.keys(itemMap) as Array<keyof LineItemMap>)\n        .reduce((result, key) => [\n            ...result,\n            ...(itemMap[key] as LineItem[]).map((item: any) => {\n                if (key === 'giftCertificates') {\n                    return mapGiftCertificateToInternalLineItem(item, decimalPlaces);\n                }\n\n                return mapToInternalLineItem(\n                    item,\n                    mapToInternalLineItemType(key),\n                    decimalPlaces,\n                    idKey\n                );\n            }),\n        ], [] as InternalLineItem[]);\n}\n\nfunction mapToInternalLineItemType(type: string): string {\n    switch (type) {\n        case 'physicalItems':\n            return 'ItemPhysicalEntity';\n\n        case 'digitalItems':\n            return 'ItemDigitalEntity';\n\n        case 'giftCertificates':\n            return 'ItemGiftCertificateEntity';\n\n        default:\n            return '';\n    }\n}\n","module.exports = require(\"local-storage-fallback\");","import { createErrorAction, Action } from '@bigcommerce/data-store';\nimport { concat, of, throwError, Observable } from 'rxjs';\n\nexport default function throwErrorAction<TPayload, TMeta, TType extends string>(\n    type: TType,\n    error?: TPayload,\n    meta?: TMeta\n): Observable<Action<TPayload, TMeta, TType>> {\n    if (isErrorAction(error)) {\n        return concat(of(error), throwError(createErrorAction(type, error.payload, meta)));\n    }\n\n    return throwError(createErrorAction(type, error, meta));\n}\n\nfunction isErrorAction(action: any): action is Action {\n    return action && action.type && action.error;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { RequestError } from '../../common/error/errors';\n\nexport default class PaymentMethodInvalidError extends RequestError {\n    constructor(response?: Response) {\n        super(response, { message: 'There is a problem processing your payment. Please try again later.' });\n\n        this.type = 'payment_method_invalid';\n    }\n}\n","import isEqual from './is-equal';\n\nexport default class CacheKeyResolver {\n    private _lastId = 0;\n    private _maps: CacheKeyMap[] = [];\n\n    getKey(...args: any[]): string {\n        const { index, map, parentMaps } = this._resolveMap(...args);\n\n        if (map && map.cacheKey) {\n            map.usedCount++;\n\n            return map.cacheKey;\n        }\n\n        return this._generateKey(parentMaps, args.slice(index));\n    }\n\n    getUsedCount(...args: any[]): number {\n        const { map } = this._resolveMap(...args);\n\n        return map ? map.usedCount : 0;\n    }\n\n    private _resolveMap(...args: any[]): ResolveResult {\n        let index = 0;\n        let parentMaps = this._maps;\n\n        while (parentMaps.length) {\n            let isMatched = false;\n\n            for (const map of parentMaps) {\n                if (!isEqual(map.value, args[index])) {\n                    continue;\n                }\n\n                if ((args.length === 0 || index === args.length - 1) && map.cacheKey) {\n                    return { index, map, parentMaps };\n                }\n\n                isMatched = true;\n                parentMaps = map.maps;\n                index++;\n\n                break;\n            }\n\n            if (!isMatched) {\n                break;\n            }\n        }\n\n        return { index, parentMaps };\n    }\n\n    private _generateKey(maps: CacheKeyMap[], args: any[]): string {\n        let index = 0;\n        let parentMaps = maps;\n        let map!: CacheKeyMap;\n\n        do {\n            map = {\n                usedCount: 1,\n                value: args[index],\n                maps: [],\n            };\n\n            parentMaps.push(map);\n\n            parentMaps = map.maps;\n            index++;\n        } while (index < args.length);\n\n        map.cacheKey = `${++this._lastId}`;\n\n        return map.cacheKey;\n    }\n}\n\ninterface CacheKeyMap {\n    maps: CacheKeyMap[];\n    value: any;\n    usedCount: number;\n    cacheKey?: string;\n}\n\ninterface ResolveResult {\n    index: number;\n    parentMaps: CacheKeyMap[];\n    map?: CacheKeyMap;\n}\n","/**\n * Decorates a class or a method by binding all its prototype methods or itself\n * to the calling instance respectively.\n */\nexport default function bindDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T>;\nexport default function bindDecorator<T extends Constructor<object>>(target: T): T;\nexport default function bindDecorator(target: any, key?: any, descriptor?: any): any {\n    if (!key || !descriptor) {\n        return bindClassDecorator(target);\n    }\n\n    return bindMethodDecorator(target, key, descriptor);\n}\n\n/**\n * Decorates a class by binding all its prototype methods to the calling\n * instance.\n */\nexport function bindClassDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                bindMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\n/**\n * Decorates a method by binding it to the calling instance.\n */\nexport function bindMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let method: T = descriptor.value;\n\n    return {\n        get() {\n            const boundMethod = method.bind(this);\n\n            Object.defineProperty(this, key, {\n                ...descriptor,\n                value: boundMethod,\n            });\n\n            return boundMethod;\n        },\n        set(value) {\n            method = value;\n        },\n    };\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\nexport type Method = (...args: any[]) => any;\n","import { parseUrl } from '../common/url';\n\nexport default class IframeEventPoster<TEvent> {\n    private _targetOrigin: string;\n\n    constructor(\n        targetOrigin: string,\n        private _targetWindow?: Window\n    ) {\n        this._targetOrigin = targetOrigin === '*' ? '*' : parseUrl(targetOrigin).origin;\n    }\n\n    post(event: TEvent): void {\n        if (window === this._targetWindow) {\n            return;\n        }\n\n        if (!this._targetWindow) {\n            throw new Error('Unable to post message becauset target window is not set.');\n        }\n\n        this._targetWindow.postMessage(event, this._targetOrigin);\n    }\n\n    setTarget(window: Window) {\n        this._targetWindow = window;\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\nimport { from, Observable, Subscribable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { RequestErrorFactory } from '../common/error';\n\nexport default function createActionTransformer(\n    requestErrorFactory: RequestErrorFactory\n): (action: Subscribable<Action>) => Observable<Action> {\n    return action$ => from(action$).pipe(catchError<Action, never>(action => {\n        if (action instanceof Error || action.payload instanceof Error) {\n            throw action;\n        }\n\n        if (isResponse(action.payload)) {\n            const message = action.payload.body && action.payload.body.detail;\n\n            throw { ...action, payload: requestErrorFactory.createError(action.payload, message) };\n        }\n\n        throw action;\n    }));\n}\n\nfunction isResponse(object: any) {\n    if (!object || typeof object !== 'object') {\n        return false;\n    }\n\n    return ['body', 'headers', 'status', 'statusText'].every(key =>\n        object.hasOwnProperty(key)\n    );\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector } from '../customer';\nimport { ConsignmentSelector } from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutState from './checkout-state';\n\n@selector\nexport default class CheckoutSelector {\n    constructor(\n        private _checkout: CheckoutState,\n        private _billingAddress: BillingAddressSelector,\n        private _cart: CartSelector,\n        private _consignments: ConsignmentSelector,\n        private _coupons: CouponSelector,\n        private _customer: CustomerSelector,\n        private _giftCertificates: GiftCertificateSelector\n    ) {}\n\n    getCheckout(): Checkout | undefined {\n        const { data } = this._checkout;\n        const billingAddress = this._billingAddress.getBillingAddress();\n        const cart = this._cart.getCart();\n        const customer = this._customer.getCustomer();\n        const consignments = this._consignments.getConsignments() || [];\n        const coupons = this._coupons.getCoupons() || [];\n        const giftCertificates = this._giftCertificates.getGiftCertificates() || [];\n\n        if (!data || !cart || !customer) {\n            return;\n        }\n\n        return {\n            ...data,\n            billingAddress,\n            cart,\n            customer,\n            consignments,\n            coupons,\n            giftCertificates,\n        };\n    }\n\n    getGrandTotal(useStoreCredit?: boolean): number | undefined {\n        const checkout = this.getCheckout();\n\n        if (!checkout) {\n            return;\n        }\n\n        const grandTotal = checkout.grandTotal || 0;\n        const storeCredit = checkout.customer.storeCredit || 0;\n\n        return useStoreCredit ? Math.max(grandTotal - storeCredit, 0) : grandTotal;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._checkout.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return this._checkout.statuses.isLoading === true;\n    }\n\n    getUpdateError(): Error | undefined {\n        return this._checkout.errors.updateError;\n    }\n\n    isUpdating(): boolean {\n        return this._checkout.statuses.isUpdating === true;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport { clearErrorReducer } from '../common/error';\nimport { CouponAction, CouponActionType, GiftCertificateAction, GiftCertificateActionType } from '../coupon';\nimport { OrderAction, OrderActionType } from '../order';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport { CheckoutAction, CheckoutActionType } from './checkout-actions';\nimport CheckoutState, { CheckoutDataState, CheckoutErrorsState, CheckoutStatusesState } from './checkout-state';\n\nconst DEFAULT_STATE: CheckoutState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function checkoutReducer(\n    state: CheckoutState = DEFAULT_STATE,\n    action: Action\n): CheckoutState {\n    const reducer = combineReducers<CheckoutState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutDataState | undefined,\n    action: CheckoutAction | BillingAddressAction | ConsignmentAction | CouponAction | GiftCertificateAction | OrderAction\n): CheckoutDataState | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload\n            ? omit({ ...data, ...action.payload }, ['billingAddress', 'cart', 'consignments', 'customer', 'coupons', 'giftCertifcates'])\n            : data;\n\n    case OrderActionType.SubmitOrderSucceeded:\n        return action.payload && data\n            ? { ...data, orderId: action.payload.order.orderId }\n            : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CheckoutErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | OrderAction\n): CheckoutErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return {\n            ...errors,\n            loadError: undefined,\n        };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return {\n            ...errors,\n            loadError: action.payload,\n        };\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return {\n            ...errors,\n            updateError: undefined,\n        };\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n        return {\n            ...errors,\n            updateError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | OrderAction\n): CheckoutStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return {\n            ...statuses,\n            isLoading: true,\n        };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return {\n            ...statuses,\n            isLoading: false,\n        };\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n        return {\n            ...statuses,\n            isUpdating: true,\n        };\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return {\n            ...statuses,\n            isUpdating: false,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import InternalLineItem from './internal-line-item';\nimport { GiftCertificateItem } from './line-item';\n\nimport { AmountTransformer } from '.';\n\nexport default function mapGiftCertificateToInternalLineItem(\n    item: GiftCertificateItem,\n    decimalPlaces: number\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: item.id,\n        imageUrl: '',\n        name: item.name,\n        amount: item.amount,\n        amountAfterDiscount: item.amount,\n        discount: 0,\n        integerAmount: amountTransformer.toInteger(item.amount),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.amount),\n        integerDiscount: 0,\n        quantity: 1,\n        sender: item.sender,\n        recipient: item.recipient,\n        type: 'ItemGiftCertificateEntity',\n        attributes: [],\n        variantId: null,\n    };\n}\n","import AmountTransformer from './amount-transformer';\nimport InternalLineItem from './internal-line-item';\nimport { DigitalItem, LineItem } from './line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItem(\n    item: LineItem,\n    type: string,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: (item[idKey] as string | number),\n        imageUrl: item.imageUrl,\n        amount: item.extendedListPrice,\n        amountAfterDiscount: item.extendedSalePrice,\n        discount: item.discountAmount,\n        integerAmount: amountTransformer.toInteger(item.extendedListPrice),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.extendedSalePrice),\n        integerDiscount: amountTransformer.toInteger(item.discountAmount),\n        downloadsPageUrl: (item as DigitalItem).downloadPageUrl,\n        name: item.name,\n        quantity: item.quantity,\n        brand: item.brand,\n        categoryNames: item.categoryNames,\n        variantId: item.variantId,\n        productId: item.productId,\n        attributes: (item.options || []).map(option => ({\n            name: option.name,\n            value: option.value,\n        })),\n        addedByPromotion: item.addedByPromotion,\n        type,\n    };\n}\n","import { selector } from '../common/selector';\n\nimport BillingAddress from './billing-address';\nimport BillingAddressState from './billing-address-state';\n\n@selector\nexport default class BillingAddressSelector {\n    constructor(\n        private _billingAddress: BillingAddressState\n    ) {}\n\n    getBillingAddress(): BillingAddress | undefined {\n        return this._billingAddress.data;\n    }\n\n    getUpdateError(): Error | undefined {\n        return this._billingAddress.errors.updateError;\n    }\n\n    getContinueAsGuestError(): Error | undefined {\n        return this._billingAddress.errors.continueAsGuestError;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._billingAddress.errors.loadError;\n    }\n\n    isUpdating(): boolean {\n        return !!this._billingAddress.statuses.isUpdating;\n    }\n\n    isContinuingAsGuest(): boolean {\n        return !!this._billingAddress.statuses.isContinuingAsGuest;\n    }\n\n    isLoading(): boolean {\n        return !!this._billingAddress.statuses.isLoading;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Config, { ContextConfig, StoreConfig } from './config';\nimport ConfigState from './config-state';\n\n@selector\nexport default class ConfigSelector {\n    constructor(\n        private _config: ConfigState\n    ) {}\n\n    getConfig(): Config | undefined {\n        return this._config.data;\n    }\n\n    getStoreConfig(): StoreConfig | undefined {\n        return this._config.data && this._config.data.storeConfig;\n    }\n\n    getContextConfig(): ContextConfig | undefined {\n        return this._config.data && this._config.data.context;\n    }\n\n    getExternalSource(): string | undefined {\n        return this._config.meta && this._config.meta.externalSource;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._config.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._config.statuses.isLoading;\n    }\n}\n","import { find } from 'lodash';\n\nimport { selector } from '../common/selector';\nimport { ConfigState } from '../config';\nimport { Country } from '../geography';\n\nimport FormField from './form-field';\n\n@selector\nexport default class FormSelector {\n    constructor(\n        private _config: ConfigState\n    ) {}\n\n    getShippingAddressFields(countries: Country[] = [], countryCode: string): FormField[] {\n        const selectedCountry = find(countries, { code: countryCode });\n        const fields = this._config.data ? this._config.data.storeConfig.formFields.shippingAddressFields : [];\n\n        return fields.map((field: any) => this._processField(field, countries, selectedCountry));\n    }\n\n    getBillingAddressFields(countries: Country[] = [], countryCode: string): FormField[] {\n        const selectedCountry = find(countries, { code: countryCode });\n        const fields = this._config.data ? this._config.data.storeConfig.formFields.billingAddressFields : [];\n\n        return fields.map((field: any) => this._processField(field, countries, selectedCountry));\n    }\n\n    private _processField(field: FormField, countries: Country[], selectedCountry?: Country): FormField {\n        if (field.name === 'countryCode') {\n            return this._processCountry(field, countries, selectedCountry);\n        }\n\n        if (field.name === 'stateOrProvince') {\n            return this._processProvince(field, selectedCountry);\n        }\n\n        if (field.name === 'postalCode') {\n            return this._processsPostCode(field, selectedCountry);\n        }\n\n        return field;\n    }\n\n    private _processCountry(field: FormField, countries: Country[] = [], country?: Country): FormField {\n        if (!countries.length) {\n            return field;\n        }\n\n        const { code = '' } = country || {};\n        const items = countries.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            options: { items },\n            default: code,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    private _processProvince(field: FormField, country?: Country): FormField {\n        const { subdivisions = [] } = country || {};\n\n        if (!subdivisions.length) {\n            return {\n                ...field,\n                required: false,\n            };\n        }\n\n        const items = subdivisions.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            name: 'stateOrProvinceCode',\n            options: { items },\n            required: true,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    private _processsPostCode(field: FormField, country?: Country): FormField {\n        const { hasPostalCodes = [] } = country || {};\n\n        if (hasPostalCodes === undefined) {\n            return field;\n        }\n\n        return { ...field, required: Boolean(hasPostalCodes) };\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Country from './country';\nimport CountryState from './country-state';\n\n@selector\nexport default class CountrySelector {\n    constructor(\n        private _countries: CountryState\n    ) {}\n\n    getCountries(): Country[] | undefined {\n        return this._countries.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._countries.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._countries.statuses.isLoading;\n    }\n}\n","import { find } from 'lodash';\n\nimport { CheckoutPayment, CheckoutSelector } from '../checkout';\nimport { selector } from '../common/selector';\nimport { GatewayOrderPayment, InternalOrderPayment, OrderSelector } from '../order';\n\nimport PaymentMethod from './payment-method';\nimport { HOSTED } from './payment-method-types';\nimport { ACKNOWLEDGE, FINALIZE } from './payment-status-types';\n\n@selector\nexport default class PaymentSelector {\n    constructor(\n        private _checkout: CheckoutSelector,\n        private _order: OrderSelector\n    ) {}\n\n    getPaymentId(): { providerId: string, gatewayId?: string } | undefined {\n        const internalPayment = this._getInternalPayment();\n\n        if (internalPayment && internalPayment.id) {\n            return {\n                providerId: internalPayment.id,\n                gatewayId: internalPayment.gateway,\n            };\n        }\n\n        const payment = this._getHostedPayment() || this._getGatewayPayment();\n\n        if (payment && payment.providerId) {\n            return {\n                providerId: payment.providerId,\n                gatewayId: payment.gatewayId,\n            };\n        }\n    }\n\n    getPaymentStatus(): string | undefined {\n        const internalPayment = this._getInternalPayment();\n\n        if (internalPayment && internalPayment.status) {\n            return internalPayment.status.replace('PAYMENT_STATUS_', '');\n        }\n\n        const payment = this._getHostedPayment() || this._getGatewayPayment();\n\n        if (payment) {\n            return payment.detail.step;\n        }\n    }\n\n    getPaymentToken(): string | undefined {\n        const meta = this._order.getOrderMeta();\n\n        return meta && meta.token;\n    }\n\n    getPaymentRedirectUrl(): string | undefined {\n        const payment = this._getInternalPayment();\n\n        return payment && payment.redirectUrl;\n    }\n\n    isPaymentDataRequired(useStoreCredit: boolean = false): boolean {\n        const grandTotal = this._checkout.getGrandTotal(useStoreCredit);\n\n        return grandTotal ? grandTotal > 0 : false;\n    }\n\n    isPaymentDataSubmitted(paymentMethod?: PaymentMethod): boolean {\n        if (paymentMethod && paymentMethod.nonce) {\n            return true;\n        }\n\n        return this.getPaymentStatus() === ACKNOWLEDGE || this.getPaymentStatus() === FINALIZE;\n    }\n\n    private _getInternalPayment(): InternalOrderPayment | undefined {\n        const meta = this._order.getOrderMeta();\n\n        return meta && meta.payment;\n    }\n\n    private _getGatewayPayment(): GatewayOrderPayment | undefined {\n        const order = this._order.getOrder();\n\n        return find(order && order.payments, ({ providerId }) =>\n            providerId !== 'giftcertificate' && providerId !== 'storecredit'\n        ) as GatewayOrderPayment;\n    }\n\n    private _getHostedPayment(): CheckoutPayment | undefined {\n        const checkout = this._checkout.getCheckout();\n\n        return find(checkout && checkout.payments, ({ providerType }) =>\n            providerType === HOSTED\n        );\n    }\n}\n","import { find } from 'lodash';\n\nimport { selector } from '../common/selector';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState from './payment-method-state';\n\n@selector\nexport default class PaymentMethodSelector {\n    constructor(\n        private _paymentMethods: PaymentMethodState\n    ) {}\n\n    getPaymentMethods(): PaymentMethod[] | undefined {\n        return this._paymentMethods.data;\n    }\n\n    getPaymentMethodsMeta(): PaymentMethodMeta | undefined {\n        return this._paymentMethods.meta;\n    }\n\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined {\n        return gatewayId ?\n            find(this._paymentMethods.data, { id: methodId, gateway: gatewayId }) :\n            find(this._paymentMethods.data, { id: methodId });\n    }\n\n    getLoadError(): Error | undefined {\n        return this._paymentMethods.errors && this._paymentMethods.errors.loadError;\n    }\n\n    getLoadMethodError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentMethods.errors.loadMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentMethods.errors.loadMethodError;\n    }\n\n    isLoading(): boolean {\n        return !!this._paymentMethods.statuses.isLoading;\n    }\n\n    isLoadingMethod(methodId?: string): boolean {\n        if (methodId && this._paymentMethods.statuses.loadMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentMethods.statuses.isLoadingMethod;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport PaymentStrategyState, { DEFAULT_STATE } from './payment-strategy-state';\n\n@selector\nexport default class PaymentStrategySelector {\n    constructor(\n        private _paymentStrategies: PaymentStrategyState = DEFAULT_STATE\n    ) {}\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.initializeError;\n    }\n\n    getExecuteError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.executeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.executeError;\n    }\n\n    getFinalizeError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.finalizeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.finalizeError;\n    }\n\n    getWidgetInteractingError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.widgetInteractionMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.widgetInteractionError;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isInitializing;\n    }\n\n    isInitialized(methodId: string): boolean {\n        return !!(\n            this._paymentStrategies.data[methodId] &&\n            this._paymentStrategies.data[methodId].isInitialized\n        );\n    }\n\n    isExecuting(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.executeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isExecuting;\n    }\n\n    isFinalizing(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.finalizeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isFinalizing;\n    }\n\n    isWidgetInteracting(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.widgetInteractionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isWidgetInteracting;\n    }\n}\n","import Instrument from './instrument';\nimport InstrumentState, { InstrumentMeta } from './instrument-state';\n\nexport default class InstrumentSelector {\n    constructor(\n        private _instruments: InstrumentState\n    ) {}\n\n    getInstruments(): Instrument[] | undefined {\n        return this._instruments.data;\n    }\n\n    getInstrumentsMeta(): InstrumentMeta | undefined {\n        return this._instruments.meta;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._instruments.errors && this._instruments.errors.loadError;\n    }\n\n    getDeleteError(instrumentId?: string): Error | undefined {\n        if (!this._instruments.errors || (instrumentId && this._instruments.errors.failedInstrument !== instrumentId)) {\n            return;\n        }\n\n        return this._instruments.errors.deleteError;\n    }\n\n    isLoading(): boolean {\n        return !!(this._instruments.statuses && this._instruments.statuses.isLoading);\n    }\n\n    isDeleting(instrumentId?: string): boolean {\n        if (!this._instruments.statuses || (instrumentId && this._instruments.statuses.deletingInstrument !== instrumentId)) {\n            return false;\n        }\n\n        return !!this._instruments.statuses.isDeleting;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport RemoteCheckoutState, { RemoteCheckoutStateData } from './remote-checkout-state';\n\n@selector\nexport default class RemoteCheckoutSelector {\n    constructor(\n        private _remoteCheckout: RemoteCheckoutState\n    ) {}\n\n    getCheckout<TMethodId extends keyof RemoteCheckoutStateData>(\n        methodId: TMethodId\n    ): RemoteCheckoutStateData[TMethodId] | undefined {\n        return this._remoteCheckout.data[methodId];\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { CheckoutButtonSelector } from '../checkout-buttons';\nimport { createFreezeProxies } from '../common/utility';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector, CustomerStrategySelector } from '../customer';\nimport { FormSelector } from '../form';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentSelector } from '../payment';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { RemoteCheckoutSelector } from '../remote-checkout';\nimport { ConsignmentSelector, ShippingAddressSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default function createInternalCheckoutSelectors(state: CheckoutStoreState, options: CheckoutStoreOptions = {}): InternalCheckoutSelectors {\n    const billingAddress = new BillingAddressSelector(state.billingAddress);\n    const cart = new CartSelector(state.cart);\n    const checkoutButton = new CheckoutButtonSelector(state.checkoutButton);\n    const config = new ConfigSelector(state.config);\n    const countries = new CountrySelector(state.countries);\n    const coupons = new CouponSelector(state.coupons);\n    const customer = new CustomerSelector(state.customer);\n    const customerStrategies = new CustomerStrategySelector(state.customerStrategies);\n    const form = new FormSelector(state.config);\n    const giftCertificates = new GiftCertificateSelector(state.giftCertificates);\n    const instruments = new InstrumentSelector(state.instruments);\n    const paymentMethods = new PaymentMethodSelector(state.paymentMethods);\n    const paymentStrategies = new PaymentStrategySelector(state.paymentStrategies);\n    const shippingAddress = new ShippingAddressSelector(state.consignments);\n    const remoteCheckout = new RemoteCheckoutSelector(state.remoteCheckout);\n    const shippingCountries = new ShippingCountrySelector(state.shippingCountries);\n    const shippingStrategies = new ShippingStrategySelector(state.shippingStrategies);\n\n    // Compose selectors\n    const consignments = new ConsignmentSelector(state.consignments, cart);\n    const checkout = new CheckoutSelector(state.checkout, billingAddress, cart, consignments, coupons, customer, giftCertificates);\n    const order = new OrderSelector(state.order, billingAddress, coupons);\n    const payment = new PaymentSelector(checkout, order);\n\n    const selectors = {\n        billingAddress,\n        cart,\n        checkout,\n        checkoutButton,\n        config,\n        consignments,\n        countries,\n        coupons,\n        customer,\n        customerStrategies,\n        form,\n        giftCertificates,\n        instruments,\n        order,\n        payment,\n        paymentMethods,\n        paymentStrategies,\n        remoteCheckout,\n        shippingAddress,\n        shippingCountries,\n        shippingStrategies,\n    };\n\n    return options.shouldWarnMutation ? createFreezeProxies(selectors) : selectors;\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","export default function isPrivate(key: string): boolean {\n    return `${key}`.indexOf('$$') === 0 || `${key}`.indexOf('_') === 0;\n}\n","import { isPlainObject, omitBy, transform } from 'lodash';\n\nexport default function omitDeep(object: any, predicate: (value: any, key: string) => boolean): any {\n    if (Array.isArray(object)) {\n        return object.map(value => omitDeep(value, predicate));\n    }\n\n    if (isPlainObject(object)) {\n        return transform(omitBy(object, predicate), (result, value, key) => {\n            result[key] = omitDeep(value, predicate);\n        }, {});\n    }\n\n    return object;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ErrorActionType {\n    ClearError = 'CLEAR_ERROR',\n}\n\nexport type ErrorAction = ClearErrorAction;\n\nexport interface ClearErrorAction extends Action {\n    type: ErrorActionType.ClearError;\n    payload: Error;\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { cachableAction, ActionOptions } from '../common/action';\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadPaymentMethodsAction, LoadPaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\n\nexport default class PaymentMethodActionCreator {\n    constructor(\n        private _requestSender: PaymentMethodRequestSender\n    ) {}\n\n    loadPaymentMethods(options?: RequestOptions): Observable<LoadPaymentMethodsAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodsAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsRequested));\n\n            this._requestSender.loadPaymentMethods(options)\n                .then(response => {\n                    const meta = {\n                        deviceSessionId: response.headers['x-device-session-id'],\n                        sessionHash: response.headers['x-session-hash'],\n                    };\n\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsSucceeded, response.body, meta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodsFailed, response));\n                });\n        });\n    }\n\n    @cachableAction\n    loadPaymentMethod(methodId: string, options?: RequestOptions & ActionOptions): Observable<LoadPaymentMethodAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodRequested, undefined, { methodId }));\n\n            this._requestSender.loadPaymentMethod(methodId, options)\n                .then(response => {\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodSucceeded, response.body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodFailed, response, { methodId }));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport PaymentMethod from './payment-method';\n\nexport default class PaymentMethodRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadPaymentMethods({ timeout }: RequestOptions = {}): Promise<Response<PaymentMethod[]>> {\n        const url = '/api/storefront/payments';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n\n    loadPaymentMethod(methodId: string, { timeout }: RequestOptions = {}): Promise<Response<PaymentMethod>> {\n        const url = `/api/storefront/payments/${methodId}`;\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import EmbeddedCheckoutStyles from '../embedded-checkout-styles';\n\nexport enum EmbeddedContentEventType {\n    StyleConfigured = 'STYLE_CONFIGURED',\n}\n\nexport interface EmbeddedContentEventMap {\n    [EmbeddedContentEventType.StyleConfigured]: EmbeddedContentStyleConfiguredEvent;\n}\n\nexport type EmbeddedContentEvent = (\n    EmbeddedContentStyleConfiguredEvent\n);\n\nexport interface EmbeddedContentStyleConfiguredEvent {\n    type: EmbeddedContentEventType.StyleConfigured;\n    payload: EmbeddedCheckoutStyles;\n}\n","import { parseUrl } from '../common/url';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport { IframeEventMap } from './iframe-event';\nimport isIframeEvent from './is-iframe-event';\n\nexport default class IframeEventListener<TEventMap extends IframeEventMap<keyof TEventMap>> {\n    private _isListening: boolean;\n    private _listeners: EventListeners<TEventMap>;\n    private _sourceOrigin: string;\n\n    constructor(\n        sourceOrigin: string\n    ) {\n        this._sourceOrigin = parseUrl(sourceOrigin).origin;\n        this._isListening = false;\n        this._listeners = {};\n    }\n\n    listen(): void {\n        if (this._isListening) {\n            return;\n        }\n\n        this._isListening = true;\n\n        window.addEventListener('message', this._handleMessage);\n    }\n\n    stopListen(): void {\n        if (!this._isListening) {\n            return;\n        }\n\n        this._isListening = false;\n\n        window.removeEventListener('message', this._handleMessage);\n    }\n\n    addListener<TType extends keyof TEventMap>(type: TType, listener: (event: TEventMap[TType]) => void): void {\n        let listeners = this._listeners[type];\n\n        if (!listeners) {\n            this._listeners[type] = listeners = [];\n        }\n\n        listeners.push(listener);\n    }\n\n    removeListener<TType extends keyof TEventMap>(type: TType, listener: (event: TEventMap[TType]) => void): void {\n        const listeners = this._listeners[type];\n\n        if (!listeners) {\n            return;\n        }\n\n        const index = listeners.indexOf(listener);\n\n        if (index >= 0) {\n            listeners.splice(index, 1);\n        }\n    }\n\n    trigger<TType extends keyof TEventMap>(event: TEventMap[TType]): void {\n        const listeners = this._listeners[event.type];\n\n        if (!listeners) {\n            return;\n        }\n\n        listeners.forEach(listener => listener(event));\n    }\n\n    @bind\n    private _handleMessage(event: MessageEvent): void {\n        if ((event.origin !== this._sourceOrigin) || !isIframeEvent(event.data, event.data.type)) {\n            return;\n        }\n\n        this.trigger(event.data);\n    }\n}\n\ntype EventListeners<TEventMap> = {\n    [key in keyof TEventMap]?: Array<(event: TEventMap[keyof TEventMap]) => void>;\n};\n","export const INTERNAL_USE_ONLY = 'This API endpoint is for internal use only and may change in the future';\n","import { find, some, values } from 'lodash';\n\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonState from './checkout-button-state';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonSelector {\n    constructor(\n        private _checkoutButton: CheckoutButtonState\n    ) {}\n\n    getState(): CheckoutButtonState {\n        return this._checkoutButton;\n    }\n\n    isInitializing(methodId?: CheckoutButtonMethodType): boolean {\n        if (methodId) {\n            const method = this._checkoutButton.statuses[methodId];\n\n            return (method && method.isInitializing) === true;\n        }\n\n        return some(this._checkoutButton.statuses, { isInitializing: true });\n    }\n\n    isInitialized(methodId: CheckoutButtonMethodType, containerId?: string): boolean {\n        const method = this._checkoutButton.data[methodId];\n\n        if (!method) {\n            return false;\n        }\n\n        if (!containerId) {\n            return some(method.initializedContainers, isInitialized => isInitialized === true);\n        }\n\n        return method.initializedContainers[containerId] === true;\n    }\n\n    isDeinitializing(methodId?: CheckoutButtonMethodType): boolean {\n        if (methodId) {\n            const method = this._checkoutButton.statuses[methodId];\n\n            return (method && method.isDeinitializing) === true;\n        }\n\n        return some(this._checkoutButton.statuses, { isDeinitializing: true });\n    }\n\n    getInitializeError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        const method = methodId ?\n            this._checkoutButton.errors[methodId] :\n            find(values(this._checkoutButton.errors), method => !!(method && method.initializeError));\n\n        return method && method.initializeError;\n    }\n\n    getDeinitializeError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        const method = methodId ?\n            this._checkoutButton.errors[methodId] :\n            find(values(this._checkoutButton.errors), method => !!(method && method.deinitializeError));\n\n        return method && method.deinitializeError;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutButtonAction, CheckoutButtonActionType } from './checkout-button-actions';\nimport CheckoutButtonState, { CheckoutButtonDataState, CheckoutButtonErrorsState, CheckoutButtonStatusesState } from './checkout-button-state';\n\nconst DEFAULT_STATE: CheckoutButtonState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n\nconst DEFAULT_DATA_STATE: CheckoutButtonDataState = { initializedContainers: {} };\nconst DEFAULT_ERROR_STATE: CheckoutButtonErrorsState = {};\nconst DEFAULT_STATUS_STATE: CheckoutButtonStatusesState = {};\n\nexport default function checkoutButtonReducer(\n    state: CheckoutButtonState = DEFAULT_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<CheckoutButtonState>({\n        data: combineReducers({\n            [action.meta.methodId]: dataReducer,\n        }),\n        errors: combineReducers({\n            [action.meta.methodId]: errorsReducer,\n        }),\n        statuses: combineReducers({\n            [action.meta.methodId]: statusesReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutButtonDataState = DEFAULT_DATA_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonDataState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        if (!action.meta || !action.meta.containerId) {\n            return data;\n        }\n\n        return {\n            ...data,\n            initializedContainers: {\n                ...data.initializedContainers,\n                [action.meta.containerId]: true,\n            },\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return {\n            ...data,\n            initializedContainers: {},\n        };\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CheckoutButtonErrorsState = DEFAULT_ERROR_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonErrorsState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n        };\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutButtonStatusesState = DEFAULT_STATUS_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonStatusesState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n        };\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport enum NotEmbeddableErrorType {\n    MissingContainer = 'missing_container',\n    MissingContent = 'missing_content',\n    UnknownError = 'unknown_error',\n}\n\nexport default class NotEmbeddableError extends StandardError {\n    constructor(\n        message?: string,\n        public subtype: NotEmbeddableErrorType = NotEmbeddableErrorType.UnknownError\n    ) {\n        super(message || 'Unable to embed the checkout form.');\n\n        this.type = 'not_embeddable';\n    }\n}\n","import { default as storage } from 'local-storage-fallback';\n\nexport default class BrowserStorage {\n    constructor(\n        private _namespace: string\n    ) {}\n\n    getItem<TValue = any>(key: string): TValue | null {\n        const rawValue = storage.getItem(this.withNamespace(key));\n\n        if (rawValue === null) {\n            return null;\n        }\n\n        try {\n            return JSON.parse(rawValue);\n        } catch (error) {\n            // Clean up invalid values\n            this.removeItem(this.withNamespace(key));\n\n            return null;\n        }\n    }\n\n    getItemOnce<TValue = any>(key: string): TValue | null {\n        const value = this.getItem(key);\n\n        this.removeItem(key);\n\n        return value;\n    }\n\n    setItem<TValue = any>(key: string, value: TValue): void {\n        return storage.setItem(this.withNamespace(key), JSON.stringify(value));\n    }\n\n    removeItem(key: string): void {\n        return storage.removeItem(this.withNamespace(key));\n    }\n\n    private withNamespace(key: string): string {\n        return `${this._namespace}.${key}`;\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../../common/error';\nimport { RequestError } from '../../common/error/errors';\n\nexport default class InvalidLoginTokenError extends RequestError {\n    constructor(response: Response<InternalErrorResponseBody>) {\n        super(response, { message: response.body.title });\n\n        this.type = 'invalid_login_token';\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { IFrameComponent } from 'iframe-resizer';\n\nimport { BrowserStorage } from '../common/storage';\nimport { parseUrl } from '../common/url';\n\nimport EmbeddedCheckoutError from './embedded-checkout-error';\nimport { EmbeddedCheckoutEventMap, EmbeddedCheckoutEventType } from './embedded-checkout-events';\nimport EmbeddedCheckoutOptions from './embedded-checkout-options';\nimport { InvalidLoginTokenError, NotEmbeddableError, NotEmbeddableErrorType } from './errors';\nimport { EmbeddedContentEvent, EmbeddedContentEventType } from './iframe-content/embedded-content-events';\nimport IframeEventListener from './iframe-event-listener';\nimport IframeEventPoster from './iframe-event-poster';\nimport LoadingIndicator from './loading-indicator';\nimport ResizableIframeCreator from './resizable-iframe-creator';\n\nconst CAN_RETRY_ALLOW_COOKIE = 'canRetryAllowCookie';\nconst IS_COOKIE_ALLOWED_KEY = 'isCookieAllowed';\n\nexport default class EmbeddedCheckout {\n    private _iframe?: IFrameComponent;\n    private _isAttached: boolean;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _iframeCreator: ResizableIframeCreator,\n        private _messageListener: IframeEventListener<EmbeddedCheckoutEventMap>,\n        private _messagePoster: IframeEventPoster<EmbeddedContentEvent>,\n        private _loadingIndicator: LoadingIndicator,\n        private _requestSender: RequestSender,\n        private _storage: BrowserStorage,\n        private _location: Location,\n        private _options: EmbeddedCheckoutOptions\n    ) {\n        this._isAttached = false;\n\n        if (this._options.onComplete) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutComplete, this._options.onComplete);\n        }\n\n        if (this._options.onError) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutError, this._options.onError);\n        }\n\n        if (this._options.onLoad) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutLoaded, this._options.onLoad);\n        }\n\n        if (this._options.onFrameLoad) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.FrameLoaded, this._options.onFrameLoad);\n        }\n\n        if (this._options.onSignOut) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.SignedOut, this._options.onSignOut);\n        }\n\n        this._messageListener.addListener(EmbeddedCheckoutEventType.FrameLoaded, () => this._configureStyles());\n    }\n\n    attach(): Promise<this> {\n        if (this._isAttached) {\n            return Promise.resolve(this);\n        }\n\n        this._isAttached = true;\n        this._messageListener.listen();\n        this._loadingIndicator.show(this._options.containerId);\n\n        return this._allowCookie()\n            .then(() => this._attemptLogin())\n            .then(url => this._iframeCreator.createFrame(url, this._options.containerId))\n            .then(iframe => {\n                this._iframe = iframe;\n\n                this._configureStyles();\n                this._loadingIndicator.hide();\n            })\n            .catch(error => {\n                this._isAttached = false;\n\n                return this._retryAllowCookie(error)\n                    .catch(() => {\n                        this._messageListener.trigger({\n                            type: EmbeddedCheckoutEventType.FrameError,\n                            payload: error,\n                        });\n\n                        this._loadingIndicator.hide();\n\n                        throw error;\n                    });\n            })\n            .then(() => this);\n    }\n\n    detach(): void {\n        if (!this._isAttached) {\n            return;\n        }\n\n        this._isAttached = false;\n        this._messageListener.stopListen();\n\n        if (this._iframe && this._iframe.parentNode) {\n            this._iframe.parentNode.removeChild(this._iframe);\n            this._iframe.iFrameResizer.close();\n        }\n    }\n\n    private _configureStyles(): void {\n        if (!this._iframe || !this._iframe.contentWindow || !this._options.styles) {\n            return;\n        }\n\n        this._messagePoster.setTarget(this._iframe.contentWindow);\n\n        this._messagePoster.post({\n            type: EmbeddedContentEventType.StyleConfigured,\n            payload: this._options.styles,\n        });\n    }\n\n    private _attemptLogin(): Promise<string> {\n        if (!/^\\/login\\/token/.test(parseUrl(this._options.url).pathname)) {\n            return Promise.resolve(this._options.url);\n        }\n\n        return this._requestSender.post(this._options.url)\n            .then(({ body: { redirectUrl } }) => redirectUrl)\n            .catch(response => Promise.reject(new InvalidLoginTokenError(response)));\n    }\n\n    /**\n     * This workaround is required for certain browsers (namely Safari) that\n     * prevent session cookies to be set for a third party website unless the\n     * user has recently visited such website. Therefore, before we attempt to\n     * login or set an active cart in the session, we need to first redirect the\n     * user to the domain of Embedded Checkout.\n     */\n    private _allowCookie(): Promise<void> {\n        if (this._storage.getItem(IS_COOKIE_ALLOWED_KEY)) {\n            // It could be possible that the flag is set to true but the browser\n            // has already removed the permission to store cookie. In that case,\n            // we should try to redirect the user again.\n            this._storage.setItem(CAN_RETRY_ALLOW_COOKIE, true);\n\n            return Promise.resolve();\n        }\n\n        this._storage.removeItem(CAN_RETRY_ALLOW_COOKIE);\n        this._storage.setItem(IS_COOKIE_ALLOWED_KEY, true);\n\n        const { origin } = parseUrl(this._options.url);\n        const redirectUrl = `${origin}/embedded-checkout/allow-cookie?returnUrl=${encodeURIComponent(this._location.href)}`;\n\n        document.body.style.visibility = 'hidden';\n        this._location.replace(redirectUrl);\n\n        return new Promise<never>(() => {});\n    }\n\n    private _retryAllowCookie(error: EmbeddedCheckoutError): Promise<void> {\n        const canRetry = (\n            this._storage.getItem(CAN_RETRY_ALLOW_COOKIE) &&\n            error instanceof NotEmbeddableError &&\n            error.subtype === NotEmbeddableErrorType.MissingContent\n        );\n\n        if (!canRetry) {\n            return Promise.reject();\n        }\n\n        this._storage.removeItem(CAN_RETRY_ALLOW_COOKIE);\n        this._storage.removeItem(IS_COOKIE_ALLOWED_KEY);\n\n        return this._allowCookie();\n    }\n}\n","import { LoadingIndicatorStyles } from './embedded-checkout-styles';\n\nconst DEFAULT_STYLES: LoadingIndicatorStyles = {\n    size: 70,\n    color: '#d9d9d9',\n    backgroundColor: '#ffffff',\n};\n\nconst ROTATION_ANIMATION = 'embedded-checkout-loading-indicator-rotation';\n\nexport default class LoadingIndicator {\n    private _container: HTMLElement;\n    private _indicator: HTMLElement;\n    private _styles: LoadingIndicatorStyles;\n\n    constructor(\n        options?: { styles?: LoadingIndicatorStyles }\n    ) {\n        this._styles = { ...DEFAULT_STYLES, ...options && options.styles };\n\n        this._defineAnimation();\n\n        this._container = this._buildContainer();\n        this._indicator = this._buildIndicator();\n\n        this._container.appendChild(this._indicator);\n    }\n\n    show(parentId?: string): void {\n        if (parentId) {\n            const parent = document.getElementById(parentId);\n\n            if (!parent) {\n                throw new Error('Unable to attach the loading indicator because the parent ID is not valid.');\n            }\n\n            parent.appendChild(this._container);\n        }\n\n        this._container.style.visibility = 'visible';\n        this._container.style.opacity = '1';\n    }\n\n    hide(): void {\n        const handleTransitionEnd = () => {\n            this._container.style.visibility = 'hidden';\n\n            this._container.removeEventListener('transitionend', handleTransitionEnd);\n        };\n\n        this._container.addEventListener('transitionend', handleTransitionEnd);\n\n        this._container.style.opacity = '0';\n    }\n\n    private _buildContainer(): HTMLElement {\n        const container = document.createElement('div');\n\n        container.style.display = 'block';\n        container.style.bottom = '0';\n        container.style.left = '0';\n        container.style.height = '100%';\n        container.style.width = '100%';\n        container.style.position = 'absolute';\n        container.style.right = '0';\n        container.style.top = '0';\n        container.style.transition = 'all 250ms ease-out';\n        container.style.opacity = '0';\n\n        return container;\n    }\n\n    private _buildIndicator(): HTMLElement {\n        const indicator = document.createElement('div');\n\n        indicator.style.display = 'block';\n        indicator.style.width = `${this._styles.size}px`;\n        indicator.style.height = `${this._styles.size}px`;\n        indicator.style.borderRadius = `${this._styles.size}px`;\n        indicator.style.border = 'solid 1px';\n        indicator.style.borderColor = `${this._styles.backgroundColor} ${this._styles.backgroundColor} ${this._styles.color} ${this._styles.color}`;\n        indicator.style.margin = '0 auto';\n        indicator.style.position = 'absolute';\n        indicator.style.left = '0';\n        indicator.style.right = '0';\n        indicator.style.top = '50%';\n        indicator.style.transform = 'translateY(-50%) rotate(0deg)';\n        indicator.style.transformStyle = 'preserve-3d';\n        indicator.style.animation = `${ROTATION_ANIMATION} 500ms infinite cubic-bezier(0.69, 0.31, 0.56, 0.83)`;\n\n        return indicator;\n    }\n\n    private _defineAnimation(): void {\n        // In order to define CSS animation, we need to insert a stylesheet into the host frame.\n        // We only have to do it once.\n        if (document.getElementById(ROTATION_ANIMATION)) {\n            return;\n        }\n\n        const style = document.createElement('style');\n\n        style.id = ROTATION_ANIMATION;\n\n        document.head.appendChild(style);\n\n        if (style.sheet instanceof CSSStyleSheet) {\n            style.sheet.insertRule(`\n                @keyframes ${ROTATION_ANIMATION} {\n                    0% { transform: translateY(-50%) rotate(0deg); }\n                    100% { transform: translateY(-50%) rotate(360deg); }\n                }\n            `);\n        }\n    }\n}\n","import { iframeResizer, IFrameComponent } from 'iframe-resizer';\n\nimport { parseUrl } from '../common/url';\n\nimport { EmbeddedCheckoutEventType } from './embedded-checkout-events';\nimport { NotEmbeddableError, NotEmbeddableErrorType } from './errors';\nimport isIframeEvent from './is-iframe-event';\n\nexport default class ResizableIframeCreator {\n    constructor(\n        private _options?: { timeout: number }\n    ) {}\n\n    createFrame(src: string, containerId: string): Promise<IFrameComponent> {\n        const container = document.getElementById(containerId);\n        const { timeout = 60000 } = this._options || {};\n\n        if (!container) {\n            throw new NotEmbeddableError(\n                'Unable to embed the iframe because the container element could not be found.',\n                NotEmbeddableErrorType.MissingContainer\n            );\n        }\n\n        const iframe = document.createElement('iframe');\n\n        iframe.src = src;\n        iframe.style.border = 'none';\n        iframe.style.display = 'none';\n        iframe.style.width = '100%';\n        iframe.allowPaymentRequest = true;\n\n        container.appendChild(iframe);\n\n        return this._toResizableFrame(iframe, timeout)\n            .catch(error => {\n                container.removeChild(iframe);\n\n                throw error;\n            });\n    }\n\n    private _toResizableFrame(iframe: HTMLIFrameElement, timeoutInterval: number): Promise<IFrameComponent> {\n        // Can't simply listen to `load` event because it always gets triggered even if there's an error.\n        // Instead, listen to the `load` inside the iframe and let the parent frame know when it happens.\n        return new Promise((resolve, reject) => {\n            const timeout = window.setTimeout(() => {\n                reject(new NotEmbeddableError('Unable to embed the iframe because the content could not be loaded.'));\n            }, timeoutInterval);\n\n            const handleMessage = (event: MessageEvent) => {\n                if (event.origin !== parseUrl(iframe.src).origin) {\n                    return;\n                }\n\n                if (isIframeEvent(event.data, EmbeddedCheckoutEventType.FrameError)) {\n                    teardown();\n                    reject(new NotEmbeddableError(event.data.payload.message, NotEmbeddableErrorType.MissingContent));\n                }\n\n                if (isIframeEvent(event.data, EmbeddedCheckoutEventType.FrameLoaded)) {\n                    iframe.style.display = '';\n\n                    const contentId = event.data.payload && event.data.payload.contentId;\n                    const iframes = iframeResizer({\n                        scrolling: false,\n                        sizeWidth: false,\n                        heightCalculationMethod: contentId ? 'taggedElement' : 'lowestElement',\n                    }, iframe);\n\n                    teardown();\n                    resolve(iframes[iframes.length - 1]);\n                }\n            };\n\n            const teardown = () => {\n                window.removeEventListener('message', handleMessage);\n                window.clearTimeout(timeout);\n            };\n\n            window.addEventListener('message', handleMessage);\n        });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { BrowserStorage } from '../common/storage';\nimport { parseUrl } from '../common/url';\n\nimport EmbeddedCheckout from './embedded-checkout';\nimport { EmbeddedCheckoutEventMap } from './embedded-checkout-events';\nimport EmbeddedCheckoutOptions from './embedded-checkout-options';\nimport { EmbeddedContentEvent } from './iframe-content/embedded-content-events';\nimport IframeEventListener from './iframe-event-listener';\nimport IframeEventPoster from './iframe-event-poster';\nimport LoadingIndicator from './loading-indicator';\nimport ResizableIframeCreator from './resizable-iframe-creator';\n\nconst STORAGE_PREFIX = 'BigCommerce.EmbeddedCheckout';\n\n/**\n * Embed the checkout form in an iframe.\n *\n * @remarks\n * Once the iframe is embedded, it will automatically resize according to the\n * size of the checkout form. It will also notify the parent window when certain\n * events have occurred. i.e.: when the form is loaded and ready to be used.\n *\n * ```js\n * embedCheckout({\n *     url: 'https://checkout/url',\n *     containerId: 'container-id',\n * });\n * ```\n *\n * @param options - Options for embedding the checkout form.\n * @returns A promise that resolves to an instance of `EmbeddedCheckout`.\n */\nexport default function embedCheckout(options: EmbeddedCheckoutOptions): Promise<EmbeddedCheckout> {\n    const origin = parseUrl(options.url).origin;\n    const embeddedCheckout = new EmbeddedCheckout(\n        new ResizableIframeCreator(),\n        new IframeEventListener<EmbeddedCheckoutEventMap>(origin),\n        new IframeEventPoster<EmbeddedContentEvent>(origin),\n        new LoadingIndicator({ styles: options.styles && options.styles.loadingIndicator }),\n        createRequestSender(),\n        new BrowserStorage(STORAGE_PREFIX),\n        window.location,\n        options\n    );\n\n    return embeddedCheckout.attach();\n}\n","export { default as embedCheckout } from './embed-checkout';\n","import { keyBy, reduce, some } from 'lodash';\n\nimport { Checkout } from '../checkout';\nimport { mapToInternalCoupon, mapToInternalGiftCertificate } from '../coupon';\nimport { mapToDiscountNotifications } from '../promotion';\n\nimport { AmountTransformer } from '.';\nimport InternalCart from './internal-cart';\nimport mapToInternalLineItems from './map-to-internal-line-items';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCart(checkout: Checkout): InternalCart {\n    const decimalPlaces = checkout.cart.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: checkout.cart.id,\n        items: mapToInternalLineItems(checkout.cart.lineItems, decimalPlaces),\n        currency: checkout.cart.currency.code,\n        coupon: {\n            discountedAmount: reduce(checkout.cart.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: checkout.cart.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: checkout.cart.discountAmount,\n            integerAmount: amountTransformer.toInteger(checkout.cart.discountAmount),\n        },\n        discountNotifications: mapToDiscountNotifications(checkout.promotions),\n        giftCertificate: {\n            totalDiscountedAmount: reduce(checkout.giftCertificates, (sum, certificate) => {\n                return sum + certificate.used;\n            }, 0),\n            appliedGiftCertificates: keyBy(checkout.giftCertificates.map(mapToInternalGiftCertificate), 'code'),\n        },\n        shipping: {\n            amount: checkout.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.shippingCostTotal),\n            amountBeforeDiscount: checkout.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(checkout.shippingCostBeforeDiscount),\n            required: some(checkout.cart.lineItems.physicalItems, lineItem => lineItem.isShippingRequired),\n        },\n        subtotal: {\n            amount: checkout.subtotal,\n            integerAmount: amountTransformer.toInteger(checkout.subtotal),\n        },\n        storeCredit: {\n            amount: checkout.customer ? checkout.customer.storeCredit : 0,\n        },\n        taxSubtotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        taxes: checkout.taxes,\n        taxTotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        handling: {\n            amount: checkout.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: checkout.grandTotal,\n            integerAmount: amountTransformer.toInteger(checkout.grandTotal),\n        },\n    };\n}\n","import { DiscountNotification } from '../discount';\n\nimport { Promotion } from '.';\n\nexport default function mapToDiscountNotifications(promotions?: Promotion[]): DiscountNotification[] {\n    const notifications: DiscountNotification[] = [];\n\n    (promotions || []).forEach(promotion => {\n        (promotion.banners || []).forEach(banner => {\n            notifications.push({\n                placeholders: [],\n                discountType: null,\n                message: '',\n                messageHtml: banner.text,\n            });\n        });\n    });\n\n    return notifications;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, merge, of, Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\n\nimport { CheckoutRequestBody } from './checkout';\nimport { CheckoutActionType, LoadCheckoutAction, UpdateCheckoutAction } from './checkout-actions';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default class CheckoutActionCreator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender,\n        private _configActionCreator: ConfigActionCreator\n    ) {}\n\n    loadCheckout(id: string, options?: RequestOptions): Observable<LoadCheckoutAction> {\n        return concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            merge(\n                this._configActionCreator.loadConfig({ ...options, useCache: true }),\n                defer(() => this._checkoutRequestSender.loadCheckout(id, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body)))\n            )\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    loadDefaultCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            this._configActionCreator.loadConfig(),\n            defer(() => {\n                const state = store.getState();\n                const context = state.config.getContextConfig();\n\n                if (!context || !context.checkoutId) {\n                    throw new StandardError('Unable to load checkout: no cart is available');\n                }\n\n                return this._checkoutRequestSender.loadCheckout(context.checkoutId, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body));\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    updateCheckout(\n        body: CheckoutRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateCheckoutAction, InternalCheckoutSelectors> {\n        return store => new Observable(observer => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CheckoutActionType.UpdateCheckoutRequested));\n\n            this._checkoutRequestSender.updateCheckout(checkout.id, body, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CheckoutActionType.UpdateCheckoutSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CheckoutActionType.UpdateCheckoutFailed, response));\n                });\n        });\n    }\n\n    loadCurrentCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            return this.loadCheckout(checkout.id, options);\n        };\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { Cart } from '../cart';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { CheckoutIncludes } from '../checkout/checkout-params';\nimport CheckoutRequestSender from '../checkout/checkout-request-sender';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport Consignment, {\n    ConsignmentsRequestBody,\n    ConsignmentAssignmentRequestBody,\n    ConsignmentCreateRequestBody,\n    ConsignmentLineItem,\n    ConsignmentRequestBody,\n    ConsignmentShippingOptionRequestBody,\n    ConsignmentUpdateRequestBody\n} from './consignment';\nimport {\n    ConsignmentActionType,\n    CreateConsignmentsAction,\n    DeleteConsignmentAction,\n    LoadShippingOptionsAction,\n    UpdateConsignmentAction,\n    UpdateShippingOptionAction,\n} from './consignment-actions';\nimport ConsignmentRequestSender from './consignment-request-sender';\n\nexport default class ConsignmentActionCreator {\n    constructor(\n        private _consignmentRequestSender: ConsignmentRequestSender,\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    unassignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            if (!existingConsignment) {\n                throw new InvalidArgumentError('No consignment found for the specified address');\n            }\n\n            const lineItems = this._removeLineItems(\n                consignment.lineItems,\n                existingConsignment,\n                state.cart.getCart()\n            );\n\n            if (!lineItems.length) {\n                return this.deleteConsignment(existingConsignment.id, options)(store);\n            }\n\n            return this.updateConsignment({\n                id: existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems,\n            }, options)(store);\n        };\n    }\n\n    assignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            return this._createOrUpdateConsignment({\n                id: existingConsignment && existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems: this._addLineItems(\n                    consignment.lineItems,\n                    existingConsignment,\n                    state.cart.getCart()\n                ),\n            }, options)(store);\n        };\n    }\n\n    selectShippingOption(\n        id: string,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n            const consignments = state.consignments.getConsignments();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (!consignments || !consignments.length) {\n                throw new MissingDataError(MissingDataErrorType.MissingConsignments);\n            }\n\n            const consignmentUpdateBody = {\n                id: consignments[0].id,\n                shippingOptionId: id,\n            };\n\n            const consignmentMeta = {\n                id: consignments[0].id,\n            };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignmentUpdateBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(\n                        ConsignmentActionType.UpdateShippingOptionSucceeded,\n                        body,\n                        consignmentMeta\n                    ));\n\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(\n                        ConsignmentActionType.UpdateShippingOptionFailed,\n                        response,\n                        consignmentMeta\n                    ));\n                });\n        });\n    }\n\n    loadShippingOptions(options?: RequestOptions): ThunkAction<LoadShippingOptionsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadShippingOptionsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.LoadShippingOptionsRequested));\n\n            this._checkoutRequestSender.loadCheckout(checkout.id, {\n                ...options,\n                params: {\n                    include: [CheckoutIncludes.AvailableShippingOptions],\n                },\n            })\n            .then(({ body }) => {\n                observer.next(createAction(ConsignmentActionType.LoadShippingOptionsSucceeded, body));\n                observer.complete();\n            })\n            .catch(response => {\n                observer.error(createErrorAction(ConsignmentActionType.LoadShippingOptionsFailed, response));\n            });\n        });\n    }\n\n    updateAddress(\n        address: AddressRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const consignment = this._getConsignmentRequestBody(address, store);\n            const consignments = store.getState().consignments.getConsignments();\n\n            if (consignments && consignments.length) {\n                (consignment as ConsignmentUpdateRequestBody).id = consignments[0].id;\n            }\n\n            return this._createOrUpdateConsignment(consignment, options)(store);\n        };\n    }\n\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CreateConsignmentsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.CreateConsignmentsRequested));\n\n            this._consignmentRequestSender.createConsignments(checkout.id, consignments, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.CreateConsignmentsSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.CreateConsignmentsFailed, response));\n                });\n        });\n    }\n\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n            const consignmentMeta = { id: consignmentId };\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.DeleteConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.deleteConsignment(checkout.id, consignmentId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.DeleteConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.DeleteConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    updateShippingOption(\n        consignment: ConsignmentShippingOptionRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateShippingOptionSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateShippingOptionFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    private _createOrUpdateConsignment(\n        consignment: ConsignmentCreateRequestBody | ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (this._isUpdateConsignmentRequest(consignment)) {\n                return this.updateConsignment(consignment, options)(store);\n            }\n\n            return this.createConsignments([consignment], options)(store);\n        };\n    }\n\n    private _getConsignmentRequestBody(\n        shippingAddress: AddressRequestBody,\n        store: ReadableCheckoutStore\n    ): ConsignmentRequestBody {\n        const state = store.getState();\n        const cart = state.cart.getCart();\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return {\n            shippingAddress,\n            lineItems: (cart.lineItems && cart.lineItems.physicalItems || [])\n                .map(item => ({\n                    itemId: item.id,\n                    quantity: item.quantity,\n                })\n            ),\n        };\n    }\n\n    private _removeLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return this._hydrateLineItems(consignment.lineItemIds, cart).map(existingItem => {\n            const sharedItem = lineItems.find(lineItem => lineItem.itemId === existingItem.itemId);\n\n            return {\n                ...existingItem,\n                quantity: sharedItem ? (existingItem.quantity - sharedItem.quantity) : existingItem.quantity,\n            };\n        }).filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _addLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment?: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!consignment) {\n            return lineItems;\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return lineItems\n            .concat(this._hydrateLineItems(consignment.lineItemIds, cart))\n            .filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _hydrateLineItems(lineItemIds: string[], cart: Cart): ConsignmentLineItem[] {\n        return lineItemIds.map(itemId => {\n            const item = cart.lineItems.physicalItems.find(lineItem => lineItem.id === itemId );\n\n            return {\n                itemId,\n                quantity: item ? item.quantity : 0,\n            };\n        });\n    }\n\n    private _isUpdateConsignmentRequest(\n        request: ConsignmentRequestBody\n    ): request is ConsignmentUpdateRequestBody {\n        const updateRequest = request as ConsignmentUpdateRequestBody;\n\n        return !!updateRequest.id;\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { ConsignmentsRequestBody, ConsignmentUpdateRequestBody } from './consignment';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'consignments.availableShippingOptions',\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class ConsignmentRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createConsignments(checkoutId: string, consignments: ConsignmentsRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: consignments, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateConsignment(checkoutId: string, consignment: ConsignmentUpdateRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = consignment;\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n\n    deleteConsignment(checkoutId: string, consignmentId: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${consignmentId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, { params: DEFAULT_PARAMS, headers, timeout });\n    }\n}\n","import InternalShippingOption from './internal-shipping-option';\nimport ShippingOption from './shipping-option';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalShippingOption(option: ShippingOption, isSelected: boolean): InternalShippingOption {\n    return {\n        description: option.description,\n        module: option.type,\n        price: option.cost,\n        id: option.id,\n        selected: isSelected,\n        isRecommended: option.isRecommended,\n        imageUrl: option.imageUrl,\n        transitTime: option.transitTime,\n    };\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\nexport default class UnrecoverableError extends RequestError {\n    constructor(response: Response, message?: string) {\n        super(response, {\n            message: message || 'An unexpected error has occurred. The checkout process cannot continue as a result.',\n        });\n\n        this.type = 'unrecoverable';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromInternalErrorResponse(\n    response: Response<InternalErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || body.detail || body.title || message,\n        errors: errors.length ?\n            errors.map(message => ({ code: body.type, message })) :\n            [{ code: body.type, message: body.detail || body.title }],\n    });\n}\n\nfunction joinErrors(errors: string[]): string | undefined {\n    return errors.reduce((result: string[], error) => {\n        if (error) {\n            return [...result, error];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { PaymentErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromPaymentErrorResponse(\n    response: Response<PaymentErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || message,\n        errors,\n    });\n}\n\nfunction joinErrors(errors: Array<{ code: string, message?: string }>): string | undefined {\n    if (!Array.isArray(errors)) {\n        return;\n    }\n\n    return errors.reduce((result: string[], error) => {\n        if (error && error.message) {\n            return [...result, error.message];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n\nexport const PAYMENT_ERROR_CODES = [\n    'payment',\n    'transaction_declined',\n];\n","import { Response } from '@bigcommerce/request-sender';\nimport { last } from 'lodash';\n\nimport ErrorResponseBody, {\n    InternalErrorResponseBody,\n    StorefrontErrorResponseBody\n} from './error-response-body';\nimport { RequestError, TimeoutError } from './errors';\nimport mapFromInternalErrorResponse from './errors/map-from-internal-error-response';\nimport mapFromPaymentErrorResponse, { PAYMENT_ERROR_CODES } from './errors/map-from-payment-error-response';\nimport mapFromStorefrontErrorResponse from './errors/map-from-storefront-error-response';\n\nexport default class RequestErrorFactory {\n    private _factoryMethods: { [key: string]: ErrorFactoryMethod } = {};\n\n    constructor() {\n        this.register('default', (response, message) => new RequestError(response, { message }));\n        this.register('internal', (response, message) => mapFromInternalErrorResponse(response, message));\n        this.register('storefront', (response, message) => mapFromStorefrontErrorResponse(response, message));\n        this.register('payment', (response, message) => mapFromPaymentErrorResponse(response, message));\n        this.register('timeout', response => new TimeoutError(response));\n    }\n\n    register(type: string, factoryMethod: ErrorFactoryMethod): void {\n        this._factoryMethods[type] = factoryMethod;\n    }\n\n    createError(response: Response, message?: string): RequestError {\n        const factoryMethod = this._factoryMethods[this._getType(response)] || this._factoryMethods.default;\n\n        return factoryMethod(response, message);\n    }\n\n    private _getType(response: Response<ErrorResponseBody>): string {\n        if (response.status === 0) {\n            return 'timeout';\n        }\n\n        if (this._isStorefrontErrorResponseBody(response.body)) {\n            return 'storefront';\n        }\n\n        if (this._isInternalErrorResponseBody(response.body)) {\n            const internalType = last(response.body.type.split('/'));\n\n            return internalType && this._factoryMethods[internalType] ?\n                internalType :\n                'internal';\n        }\n\n        const error = last(response.body && response.body.errors);\n\n        if (error && PAYMENT_ERROR_CODES.indexOf(error.code) !== -1) {\n            return 'payment';\n        }\n\n        return error && error.code ? error.code : 'payment';\n    }\n\n    private _isStorefrontErrorResponseBody(\n        errorResponse: ErrorResponseBody\n    ): errorResponse is StorefrontErrorResponseBody {\n        const storefrontErrorResponse = errorResponse as StorefrontErrorResponseBody;\n\n        return !this._isInternalErrorResponseBody(errorResponse) &&\n            typeof storefrontErrorResponse.title === 'string' &&\n            typeof storefrontErrorResponse.type === 'string' &&\n            typeof storefrontErrorResponse.status === 'number' &&\n            typeof storefrontErrorResponse.detail === 'string';\n    }\n\n    private _isInternalErrorResponseBody(\n        errorResponse: ErrorResponseBody\n    ): errorResponse is InternalErrorResponseBody {\n        const internalErrorResponse = errorResponse as InternalErrorResponseBody;\n\n        return typeof internalErrorResponse.errors === 'object' &&\n            typeof internalErrorResponse.title === 'string' &&\n            typeof internalErrorResponse.type === 'string' &&\n            typeof internalErrorResponse.status === 'number';\n    }\n}\n\nexport type ErrorFactoryMethod = (response: Response, message?: string) => RequestError;\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { StorefrontErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromStorefrontErrorResponse(\n    response: Response<StorefrontErrorResponseBody>,\n    message?: string\n): RequestError<StorefrontErrorResponseBody> {\n    const { body } = response;\n\n    return new RequestError(response, {\n        message: message || body.detail || body.title,\n        errors: [{\n            code: body.code || body.type,\n            message: body.detail || body.title,\n        }],\n    });\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport BillingAddress from './billing-address';\nimport { BillingAddressAction, BillingAddressActionType } from './billing-address-actions';\nimport BillingAddressState, { BillingAddressErrorsState, BillingAddressStatusesState } from './billing-address-state';\n\nconst DEFAULT_STATE: BillingAddressState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function billingAddressReducer(\n    state: BillingAddressState = DEFAULT_STATE,\n    action: Action\n): BillingAddressState {\n    const reducer = combineReducers<BillingAddressState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: BillingAddress | undefined,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddress | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return action.payload ? action.payload.billingAddress : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: BillingAddressErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...errors, loadError: action.payload };\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return { ...errors, updateError: undefined };\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n        return { ...errors, updateError: action.payload };\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return { ...errors, continueAsGuestError: undefined };\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n        return { ...errors, continueAsGuestError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: BillingAddressStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...statuses, isLoading: false };\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n        return { ...statuses, isUpdating: true };\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return { ...statuses, isUpdating: false };\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n        return { ...statuses, isContinuingAsGuest: true };\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return { ...statuses, isContinuingAsGuest: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport Config from './config';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\nimport ConfigState, { ConfigErrorsState, ConfigStatusesState } from './config-state';\n\nconst DEFAULT_STATE: ConfigState = {\n    meta: {},\n    errors: {},\n    statuses: {},\n};\n\nexport default function configReducer(\n    state: ConfigState = DEFAULT_STATE,\n    action: Action\n): ConfigState {\n    const reducer = combineReducers<ConfigState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Config | undefined,\n    action: LoadConfigAction\n): Config | undefined {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return action.payload ? action.payload : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConfigErrorsState = DEFAULT_STATE.errors,\n    action: LoadConfigAction\n): ConfigErrorsState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case ConfigActionType.LoadConfigFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConfigStatusesState = DEFAULT_STATE.statuses,\n    action: LoadConfigAction\n): ConfigStatusesState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigRequested:\n        return { ...statuses, isLoading: true };\n\n    case ConfigActionType.LoadConfigSucceeded:\n    case ConfigActionType.LoadConfigFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport Country from './country';\nimport { CountryActionType, LoadCountriesAction } from './country-actions';\nimport CountryState, { CountryErrorsState, CountryStatusesState } from './country-state';\n\nconst DEFAULT_STATE: CountryState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function countryReducer(\n    state: CountryState = DEFAULT_STATE,\n    action: Action\n): CountryState {\n    const reducer = combineReducers<CountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadCountriesAction\n): Country[] | undefined {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesSucceeded:\n        return action.payload || [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadCountriesAction\n): CountryErrorsState {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesRequested:\n    case CountryActionType.LoadCountriesSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case CountryActionType.LoadCountriesFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadCountriesAction\n): CountryStatusesState {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesRequested:\n        return { ...statuses, isLoading: true };\n\n    case CountryActionType.LoadCountriesSucceeded:\n    case CountryActionType.LoadCountriesFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { PaymentAction, PaymentActionType } from './payment-actions';\nimport PaymentResponseBody from './payment-response-body';\nimport PaymentState from './payment-state';\n\nexport default function paymentReducer(state: PaymentState = {}, action: PaymentAction): PaymentState {\n    const reducer = combineReducers<PaymentState, PaymentAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: PaymentResponseBody | undefined, action: PaymentAction): PaymentResponseBody | undefined {\n    switch (action.type) {\n    case PaymentActionType.SubmitPaymentSucceeded:\n        return action.payload;\n\n    default:\n        return data;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { mergeOrPush } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport { PaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { PaymentMethodErrorsState, PaymentMethodStatusesState } from './payment-method-state';\n\nconst DEFAULT_STATE: PaymentMethodState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function paymentMethodReducer(\n    state: PaymentMethodState = DEFAULT_STATE,\n    action: Action\n): PaymentMethodState {\n    const reducer = combineReducers<PaymentMethodState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentMethod[] | undefined,\n    action: PaymentMethodAction\n): PaymentMethod[] | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return action.payload ?\n            mergeOrPush(data || [], action.payload, {\n                id: action.payload.id,\n                gateway: action.payload.gateway,\n            }) :\n            data;\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return action.payload ? action.payload : [];\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: PaymentMethodMeta | undefined,\n    action: PaymentMethodAction\n): PaymentMethodMeta | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return action.meta ? { ...meta, ...action.meta } : meta;\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: PaymentMethodErrorsState = DEFAULT_STATE.errors,\n    action: PaymentMethodAction\n): PaymentMethodErrorsState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return { ...errors, loadError: action.payload };\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return {\n            ...errors,\n            loadMethodId: undefined,\n            loadMethodError: undefined,\n        };\n\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return {\n            ...errors,\n            loadMethodId: action.meta.methodId,\n            loadMethodError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentMethodStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentMethodAction\n): PaymentMethodStatusesState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n        return { ...statuses, isLoading: true };\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return { ...statuses, isLoading: false };\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n        return {\n            ...statuses,\n            isLoadingMethod: true,\n            loadMethodId: action.meta.methodId,\n        };\n\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return {\n            ...statuses,\n            isLoadingMethod: false,\n            loadMethodId: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport { PaymentStrategyAction, PaymentStrategyActionType } from './payment-strategy-actions';\nimport PaymentStrategyState, { DEFAULT_STATE, PaymentStrategyDataState, PaymentStrategyErrorsState, PaymentStrategyStatusesState } from './payment-strategy-state';\n\nexport default function paymentStrategyReducer(\n    state: PaymentStrategyState = DEFAULT_STATE,\n    action: Action\n): PaymentStrategyState {\n    const reducer = combineReducers<PaymentStrategyState, PaymentStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentStrategyDataState = DEFAULT_STATE.data,\n    action: PaymentStrategyAction\n): PaymentStrategyDataState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        };\n\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        };\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: PaymentStrategyErrorsState = DEFAULT_STATE.errors,\n    action: PaymentStrategyAction\n): PaymentStrategyErrorsState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.ExecuteRequested:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return {\n            ...errors,\n            executeError: undefined,\n            executeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.ExecuteFailed:\n        return {\n            ...errors,\n            executeError: action.payload,\n            executeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.FinalizeRequested:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return {\n            ...errors,\n            finalizeError: undefined,\n            finalizeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.FinalizeFailed:\n        return {\n            ...errors,\n            finalizeError: action.payload,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n        return {\n            ...errors,\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n        return {\n            ...errors,\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentStrategyAction\n): PaymentStrategyStatusesState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.InitializeFailed:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.ExecuteRequested:\n        return {\n            ...statuses,\n            isExecuting: true,\n            executeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.ExecuteFailed:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return {\n            ...statuses,\n            isExecuting: false,\n            executeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.FinalizeRequested:\n        return {\n            ...statuses,\n            isFinalizing: true,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.FinalizeFailed:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return {\n            ...statuses,\n            isFinalizing: false,\n            finalizeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    return {\n        ...statuses,\n        isWidgetInteracting: true,\n        widgetInteractionMethodId: action.meta.methodId,\n     };\n\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n     return {\n        ...statuses,\n        isWidgetInteracting: false,\n        widgetInteractionMethodId: undefined,\n     };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../../common/error';\n\nimport Instrument from './instrument';\nimport { InstrumentAction, InstrumentActionType } from './instrument-actions';\nimport InstrumentState, { InstrumentErrorState, InstrumentMeta, InstrumentStatusState } from './instrument-state';\n\nconst DEFAULT_STATE = {\n    data: [],\n    errors: {},\n    statuses: {},\n};\n\nexport default function instrumentReducer(\n    state: InstrumentState = DEFAULT_STATE,\n    action: Action\n): InstrumentState {\n    const reducer = combineReducers<InstrumentState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Instrument[] = DEFAULT_STATE.data,\n    action: InstrumentAction\n): Instrument[] {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n        return action.payload ? action.payload.vaultedInstruments : [];\n\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return data.filter(instrument =>\n            instrument.bigpayToken !== action.meta.instrumentId\n        );\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: InstrumentMeta | undefined,\n    action: InstrumentAction\n): InstrumentMeta | undefined {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return { ...meta, ...action.meta };\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: InstrumentErrorState = DEFAULT_STATE.errors,\n    action: InstrumentAction\n): InstrumentErrorState {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsRequested:\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case InstrumentActionType.DeleteInstrumentRequested:\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return {\n            ...errors,\n            deleteError: undefined,\n            failedInstrument: undefined,\n        };\n\n    case InstrumentActionType.LoadInstrumentsFailed:\n        return { ...errors, loadError: action.payload };\n\n    case InstrumentActionType.DeleteInstrumentFailed:\n        return {\n            ...errors,\n            deleteError: action.payload,\n            failedInstrument: action.meta.instrumentId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: InstrumentStatusState = DEFAULT_STATE.statuses,\n    action: InstrumentAction\n): InstrumentStatusState {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsRequested:\n        return { ...statuses, isLoading: true };\n\n    case InstrumentActionType.DeleteInstrumentRequested:\n        return {\n            ...statuses,\n            isDeleting: true,\n            deletingInstrument: action.meta.instrumentId,\n        };\n\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n    case InstrumentActionType.LoadInstrumentsFailed:\n        return { ...statuses, isLoading: false };\n\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n    case InstrumentActionType.DeleteInstrumentFailed:\n        return {\n            ...statuses,\n            isDeleting: false,\n            deletingInstrument: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport RemoteCheckout from './remote-checkout';\nimport { RemoteCheckoutAction, RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutState, { RemoteCheckoutStateData } from './remote-checkout-state';\n\nconst DEFAULT_STATE: RemoteCheckoutState = {\n    data: {},\n};\n\nexport default function remoteCheckoutReducer(\n    state: RemoteCheckoutState = DEFAULT_STATE,\n    action: RemoteCheckoutAction\n): RemoteCheckoutState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<RemoteCheckoutState>({\n        data: combineReducers<RemoteCheckoutStateData>({\n            [action.meta.methodId]: dataReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: RemoteCheckout = DEFAULT_STATE.data,\n    action: RemoteCheckoutAction\n): RemoteCheckout {\n    switch (action.type) {\n    case RemoteCheckoutActionType.InitializeRemoteBillingSucceeded:\n        return action.payload ? { ...data, billing: action.payload.billing } : data;\n\n    case RemoteCheckoutActionType.InitializeRemoteShippingSucceeded:\n        return action.payload ? { ...data, shipping: action.payload.shipping } : data;\n\n    case RemoteCheckoutActionType.LoadRemoteSettingsSucceeded:\n        return { ...data, settings: action.payload };\n\n    case RemoteCheckoutActionType.UpdateRemoteCheckout:\n        return { ...data, ...action.payload };\n\n    default:\n        return data;\n    }\n}\n","import { createDataStore } from '@bigcommerce/data-store';\n\nimport { createRequestErrorFactory } from '../common/error';\n\nimport CheckoutStore, { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport createActionTransformer from './create-action-transformer';\nimport createCheckoutStoreReducer from './create-checkout-store-reducer';\nimport createInternalCheckoutSelectors from './create-internal-checkout-selectors';\n\nexport default function createCheckoutStore(\n    initialState: Partial<CheckoutStoreState> = {},\n    options?: CheckoutStoreOptions\n): CheckoutStore {\n    const actionTransformer = createActionTransformer(createRequestErrorFactory());\n    const stateTransformer = (state: CheckoutStoreState) => createInternalCheckoutSelectors(state);\n\n    return createDataStore(\n        createCheckoutStoreReducer(),\n        initialState,\n        { actionTransformer, stateTransformer, ...options }\n    );\n}\n","import { PaymentMethodInvalidError } from '../../payment/errors';\n\nimport { UnrecoverableError } from './errors';\nimport RequestErrorFactory from './request-error-factory';\n\nexport default function createRequestErrorFactory(): RequestErrorFactory {\n    const factory = new RequestErrorFactory();\n\n    const unrecoverableErrorTypes = [\n        'catalog_only',\n        'empty_cart',\n        'invalid_order_id',\n        'invalid_order_token',\n        'missing_order_token',\n        'missing_provider_token',\n        'missing_shipping_method',\n        'order_completion_error',\n        'order_could_not_be_finalized_error',\n        'order_create_failed',\n        'provider_fatal_error',\n        'provider_setup_error',\n        'stock_too_low',\n    ];\n\n    unrecoverableErrorTypes.forEach(type => {\n        factory.register(type, (response, message) => new UnrecoverableError(response, message));\n    });\n\n    factory.register('invalid_payment_provider', response => new PaymentMethodInvalidError(response));\n    factory.register('payment_config_not_found', response => new PaymentMethodInvalidError(response));\n\n    return factory;\n}\n","import { combineReducers, Action, Reducer } from '@bigcommerce/data-store';\n\nimport { billingAddressReducer } from '../billing';\nimport { cartReducer } from '../cart';\nimport { checkoutButtonReducer } from '../checkout-buttons';\nimport { configReducer } from '../config';\nimport { couponReducer, giftCertificateReducer } from '../coupon';\nimport { customerReducer, customerStrategyReducer } from '../customer';\nimport { countryReducer } from '../geography';\nimport { orderReducer } from '../order';\nimport { paymentMethodReducer, paymentReducer, paymentStrategyReducer } from '../payment';\nimport { instrumentReducer } from '../payment/instrument';\nimport { remoteCheckoutReducer } from '../remote-checkout';\nimport { consignmentReducer, shippingCountryReducer, shippingStrategyReducer } from '../shipping';\n\nimport checkoutReducer from './checkout-reducer';\nimport CheckoutStoreState from './checkout-store-state';\n\nexport default function createCheckoutStoreReducer(): Reducer<CheckoutStoreState, Action> {\n    return combineReducers({\n        billingAddress: billingAddressReducer,\n        cart: cartReducer,\n        checkout: checkoutReducer,\n        checkoutButton: checkoutButtonReducer,\n        config: configReducer,\n        consignments: consignmentReducer,\n        countries: countryReducer,\n        coupons: couponReducer,\n        customer: customerReducer,\n        customerStrategies: customerStrategyReducer,\n        giftCertificates: giftCertificateReducer,\n        instruments: instrumentReducer,\n        order: orderReducer,\n        payment: paymentReducer,\n        paymentMethods: paymentMethodReducer,\n        paymentStrategies: paymentStrategyReducer,\n        remoteCheckout: remoteCheckoutReducer,\n        shippingCountries: shippingCountryReducer,\n        shippingStrategies: shippingStrategyReducer,\n    });\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../../common/error';\nimport { RequestError } from '../../common/error/errors';\n\nexport default class CheckoutNotAvailableError extends RequestError {\n    constructor(response: Response<InternalErrorResponseBody>) {\n        super(response, { message: response.body.title });\n\n        this.type = 'checkout_not_available';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nimport Checkout, { CheckoutRequestBody } from './checkout';\nimport CHECKOUT_DEFAULT_INCLUDES from './checkout-default-includes';\nimport CheckoutParams from './checkout-params';\nimport { CheckoutNotAvailableError } from './errors';\n\nexport default class CheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadCheckout(id: string, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.get(url, {\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    ...(params && params.include || []),\n                ]),\n            },\n            headers,\n            timeout,\n        }).catch(error => {\n            if (error.status >= 400 && error.status < 500) {\n                throw new CheckoutNotAvailableError(error);\n            }\n\n            throw error;\n        });\n    }\n\n    updateCheckout(id: string, body: CheckoutRequestBody, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, {\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    ...(params && params.include || []),\n                ]),\n            },\n            body,\n            headers,\n            timeout,\n        });\n    }\n}\n","import { identity, isEqual, pickBy } from 'lodash';\n\nimport Address from './address';\n\nexport default function isAddressEqual(addressA: Partial<Address>, addressB: Partial<Address>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<Address>): Partial<Address> {\n    return pickBy({\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.address1,\n        address2: address.address2,\n        city: address.city,\n        stateOrProvince: address.stateOrProvince,\n        countryCode: address.countryCode,\n        postalCode: address.postalCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    }, identity);\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { GooglePayCreator } from '../googlepay';\n\nimport {\n    BraintreeClientCreator,\n    BraintreeDataCollectorCreator,\n    BraintreeHostWindow,\n    BraintreePaypalCheckoutCreator,\n    BraintreePaypalCreator,\n    BraintreeThreeDSecureCreator,\n    BraintreeVisaCheckoutCreator,\n} from './braintree';\n\nexport default class BraintreeScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: BraintreeHostWindow = window\n    ) {}\n\n    loadClient(): Promise<BraintreeClientCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/client.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.client) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.client;\n            });\n    }\n\n    load3DS(): Promise<BraintreeThreeDSecureCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/three-d-secure.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.threeDSecure) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.threeDSecure;\n            });\n    }\n\n    loadDataCollector(): Promise<BraintreeDataCollectorCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/data-collector.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.dataCollector) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.dataCollector;\n            });\n    }\n\n    loadPaypal(): Promise<BraintreePaypalCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/paypal.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypal) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.paypal;\n            });\n    }\n\n    loadPaypalCheckout(): Promise<BraintreePaypalCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/paypal-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypalCheckout) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.paypalCheckout;\n            });\n    }\n\n    loadVisaCheckout(): Promise<BraintreeVisaCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/visa-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.visaCheckout) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.visaCheckout;\n            });\n    }\n\n    loadGooglePayment(): Promise<GooglePayCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/google-payment.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.googlePayment) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.googlePayment;\n            });\n    }\n}\n","import { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport {\n    BraintreeClient,\n    BraintreeDataCollector,\n    BraintreeModule,\n    BraintreePaypal,\n    BraintreePaypalCheckout,\n    BraintreeThreeDSecure,\n    BraintreeVisaCheckout,\n    GooglePayBraintreeSDK,\n} from './braintree';\nimport BraintreeScriptLoader from './braintree-script-loader';\n\nexport default class BraintreeSDKCreator {\n    private _client?: Promise<BraintreeClient>;\n    private _3ds?: Promise<BraintreeThreeDSecure>;\n    private _paypal?: Promise<BraintreePaypal>;\n    private _paypalCheckout?: Promise<BraintreePaypalCheckout>;\n    private _clientToken?: string;\n    private _visaCheckout?: Promise<BraintreeVisaCheckout>;\n    private _dataCollectors: {\n        default?: Promise<BraintreeDataCollector>,\n        paypal?: Promise<BraintreeDataCollector>,\n    } = {};\n    private _googlePay?: Promise<GooglePayBraintreeSDK>;\n\n    constructor(\n        private _braintreeScriptLoader: BraintreeScriptLoader\n    ) {}\n\n    initialize(clientToken: string) {\n        this._clientToken = clientToken;\n    }\n\n    getClient(): Promise<BraintreeClient> {\n        if (!this._clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!this._client) {\n            this._client = this._braintreeScriptLoader.loadClient()\n                .then(client => client.create({ authorization: this._clientToken }));\n        }\n\n        return this._client;\n    }\n\n    getPaypal(): Promise<BraintreePaypal> {\n        if (!this._paypal) {\n            this._paypal = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypal(),\n            ])\n            .then(([client, paypal]) => paypal.create({ client }));\n        }\n\n        return this._paypal;\n    }\n\n    getPaypalCheckout(): Promise<BraintreePaypalCheckout> {\n        if (!this._paypalCheckout) {\n            this._paypalCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypalCheckout(),\n            ])\n                .then(([client, paypalCheckout]) => paypalCheckout.create({ client }));\n        }\n\n        return this._paypalCheckout;\n    }\n\n    get3DS(): Promise<BraintreeThreeDSecure> {\n        if (!this._3ds) {\n            this._3ds = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.load3DS(),\n            ])\n            .then(([client, threeDSecure]) => threeDSecure.create({ client }));\n        }\n\n        return this._3ds;\n    }\n\n    getDataCollector(options?: { paypal: boolean }): Promise<BraintreeDataCollector> {\n        const cacheKey = options && options.paypal ? 'paypal' : 'default';\n        let cached = this._dataCollectors[cacheKey];\n\n        if (!cached) {\n            cached = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadDataCollector(),\n            ])\n            .then(([client, dataCollector]) => dataCollector.create({ client, kount: true, ...options }))\n            .catch(error => {\n                if (error && error.code === 'DATA_COLLECTOR_KOUNT_NOT_ENABLED') {\n                    return { deviceData: undefined, teardown: () => Promise.resolve() };\n                }\n\n                throw error;\n            });\n\n            this._dataCollectors[cacheKey] = cached;\n        }\n\n        return cached;\n    }\n\n    getVisaCheckout(): Promise<BraintreeVisaCheckout> {\n        if (!this._visaCheckout) {\n            this._visaCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadVisaCheckout(),\n            ])\n            .then(([client, visaCheckout]) => visaCheckout.create({ client }));\n        }\n\n        return this._visaCheckout;\n    }\n\n    getGooglePaymentComponent(): Promise<GooglePayBraintreeSDK> {\n        if (!this._googlePay) {\n            this._googlePay = Promise.all ([\n                this.getClient(),\n                this._braintreeScriptLoader.loadGooglePayment(),\n            ])\n                .then(([client, googlePay]) => googlePay.create({ client }));\n        }\n\n        return this._googlePay;\n    }\n\n    teardown(): Promise<void> {\n        return Promise.all([\n            this._teardown(this._3ds),\n            this._teardown(this._dataCollectors.default),\n            this._teardown(this._dataCollectors.paypal),\n            this._teardown(this._visaCheckout),\n            this._teardown(this._googlePay),\n        ]).then(() => {\n            this._3ds = undefined;\n            this._visaCheckout = undefined;\n            this._dataCollectors = {};\n            this._googlePay = undefined;\n        });\n    }\n\n    private _teardown(module?: Promise<BraintreeModule>) {\n        return module ?\n            module.then(mod => mod.teardown()) :\n            Promise.resolve();\n    }\n}\n","import Coupon from './coupon';\nimport InternalCoupon from './internal-coupon';\n\nconst couponTypes = [\n    'per_item_discount',\n    'percentage_discount',\n    'per_total_discount',\n    'shipping_discount',\n    'free_shipping',\n];\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCoupon(coupon: Coupon): InternalCoupon {\n    return {\n        code: coupon.code,\n        discount: coupon.displayName,\n        discountType: couponTypes.indexOf(coupon.couponType),\n    };\n}\n","module.exports = require(\"iframe-resizer\");","import { isBillingAddressLike } from '../billing';\nimport BillingAddress from '../billing/billing-address';\nimport { Consignment } from '../shipping';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalAddress(address: Address | BillingAddress, consignments?: Consignment[]): InternalAddress {\n    let addressId;\n\n    if (isBillingAddressLike(address)) {\n        addressId = address.id;\n    } else if (consignments && consignments.length) {\n        addressId = consignments[0].id;\n    }\n\n    return {\n        id: addressId,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        addressLine1: address.address1,\n        addressLine2: address.address2,\n        city: address.city,\n        province: address.stateOrProvince,\n        provinceCode: address.stateOrProvinceCode,\n        postCode: address.postalCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import Address from '../address/address';\n\nimport BillingAddress from './billing-address';\n\nexport default function isBillingAddressLike(address: Address): address is BillingAddress {\n    const billingAddress = address as BillingAddress;\n\n    return typeof billingAddress.id !== 'undefined';\n}\n","import { uniq } from 'lodash';\n\nexport default function joinIncludes(includes: string[]): string {\n    return uniq(includes).join(',');\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n}\n\nexport default class NotInitializedError extends StandardError {\n    constructor(\n        public subtype: NotInitializedErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n    case NotInitializedErrorType.CustomerNotInitialized:\n        return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.PaymentNotInitialized:\n        return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.ShippingNotInitialized:\n        return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n    default:\n        return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nimport Url from './url';\n\nexport default function parseUrl(url: string): Url {\n    if (!/^(https?:)?\\/\\//.test(url)) {\n        throw new InvalidArgumentError('The provided URL must be absolute.');\n    }\n\n    // new URL() is not supported in IE11, use anchor tag instead\n    const anchor = document.createElement('a');\n\n    anchor.href = url;\n\n    return {\n        hash: anchor.hash,\n        hostname: anchor.hostname,\n        href: anchor.href,\n        origin: anchor.origin,\n        pathname: anchor.pathname,\n        port: anchor.port,\n        protocol: anchor.protocol,\n        search: anchor.search,\n    };\n}\n","import cacheAction from './cache-action';\nimport isActionOptions from './is-action-options';\n\nexport default function cachableActionDecorator<TMethod extends (...args: any[]) => any>(\n    target: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<TMethod>\n): TypedPropertyDescriptor<TMethod> {\n    const memoizedMethods = new WeakMap<object, { [key: string]: TMethod }>();\n\n    function decorateMethod(this: object, method: TMethod): TMethod {\n        return ((...args: any[]) => {\n            const lastArg = args[args.length - 1];\n            const { useCache } = isActionOptions(lastArg) ? lastArg : { useCache: false };\n\n            if (!useCache) {\n                return method.call(this, ...args);\n            }\n\n            const instanceMethods = memoizedMethods.get(this) || {};\n\n            if (!memoizedMethods.get(this)) {\n                memoizedMethods.set(this, instanceMethods);\n            }\n\n            if (!instanceMethods[key]) {\n                instanceMethods[key] = cacheAction(method);\n            }\n\n            return instanceMethods[key].call(this, ...args);\n        }) as TMethod;\n    }\n\n    return {\n        get() {\n            if (typeof descriptor.value !== 'function') {\n                return descriptor.value;\n            }\n\n            const value = decorateMethod.call(this, descriptor.value);\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n    };\n}\n","import ActionOptions from './action-options';\n\nexport default function isActionOptions(param: any): param is ActionOptions {\n    return param && typeof param.useCache === 'boolean';\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { memoize } from 'lodash';\nimport { from, Observable } from 'rxjs';\nimport { shareReplay } from 'rxjs/operators';\n\nimport { CacheKeyResolver } from '../utility';\n\nexport default function cacheAction<TFunction extends CreateActionFn>(\n    fn: TFunction\n): TFunction {\n    const resolver = new CacheKeyResolver();\n\n    function decoratedFn(this: any, ...args: any[]) {\n        const action = fn.call(this, ...args);\n\n        if (action instanceof Observable) {\n            return from(action).pipe(shareReplay());\n        }\n\n        if (typeof action === 'function') {\n            return memoize(store => from(action(store)).pipe(shareReplay()));\n        }\n\n        return action;\n    }\n\n    return memoize(\n        decoratedFn as TFunction,\n        (...args) => resolver.getKey(...args)\n    );\n}\n\ntype CreateActionFn = (...args: any[]) => Observable<Action> | ThunkAction<Action> | Action;\n","import { deepFreeze } from '@bigcommerce/data-store';\n\n// tslint:disable-next-line:ban-types\ntype FunctionProperties<T> = { [K in keyof T]: T[K] extends Function ? T[K] : never };\n\nexport default function createFreezeProxy<T extends object>(target: T): T {\n    return createProxy(target, (target, name) =>\n        (...args: any[]) => deepFreeze(target[name].call(target, ...args))\n    );\n}\n\nexport function createFreezeProxies<T extends { [key: string]: object }>(map: T): T {\n    return Object.keys(map)\n        .reduce((result, key) => {\n            result[key] = createFreezeProxy(map[key]);\n\n            return result;\n        }, {} as T);\n}\n\nfunction createProxy<T extends object>(target: T, trap: (target: FunctionProperties<T>, name: keyof FunctionProperties<T>, proxy: T) => any): T {\n    const proxy = Object.create(target);\n\n    traversePrototypeOf(target, prototype => {\n        Object.getOwnPropertyNames(prototype)\n            .forEach(name => {\n                if (name === 'constructor' || typeof proxy[name] !== 'function' || name.charAt(0) === '_') {\n                    return;\n                }\n\n                proxy[name] = trap(target as FunctionProperties<T>, name as keyof T, proxy);\n            });\n    });\n\n    return proxy;\n}\n\nfunction traversePrototypeOf(target: object, iteratee: (prototype: object) => void): void {\n    let prototype = Object.getPrototypeOf(target);\n\n    while (prototype) {\n        iteratee(prototype);\n\n        prototype = Object.getPrototypeOf(prototype);\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { Registry } from '../common/registry';\n\nimport CustomerCredentials from './customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from './customer-request-options';\nimport {\n    CustomerStrategyActionType,\n    CustomerStrategyDeinitializeAction,\n    CustomerStrategyInitializeAction,\n    CustomerStrategySignInAction,\n    CustomerStrategySignOutAction,\n    CustomerStrategyWidgetAction,\n} from './customer-strategy-actions';\nimport { CustomerStrategy } from './strategies';\n\nexport default class CustomerStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<CustomerStrategy>\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Observable<CustomerStrategySignInAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignInAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignInRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signIn(credentials, options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignInSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignInFailed, error, meta));\n                });\n        });\n    }\n\n    signOut(options?: CustomerRequestOptions): Observable<CustomerStrategySignOutAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignOutAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignOutRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signOut(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignOutSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignOutFailed, error, meta));\n                });\n        });\n    }\n\n    initialize(options?: CustomerInitializeOptions): ThunkAction<CustomerStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CustomerStrategyInitializeAction>) => {\n            const state = store.getState();\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            if (methodId && state.customerStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(CustomerStrategyActionType.InitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.InitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.InitializeFailed, error, meta));\n                });\n        });\n    }\n\n    deinitialize(options?: CustomerRequestOptions): ThunkAction<CustomerStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CustomerStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            if (methodId && !state.customerStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(CustomerStrategyActionType.DeinitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.DeinitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.DeinitializeFailed, error, meta));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: CustomerRequestOptions): Observable<CustomerStrategyWidgetAction> {\n        return Observable.create((observer: Observer<CustomerStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(CustomerStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(CustomerStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, from, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\n\nimport { CustomerActionType, SignInCustomerAction, SignOutCustomerAction } from './customer-actions';\nimport CustomerCredentials from './customer-credentials';\nimport CustomerRequestSender from './customer-request-sender';\n\nexport default class CustomerActionCreator {\n    constructor(\n        private _customerRequestSender: CustomerRequestSender,\n        private _checkoutActionCreator: CheckoutActionCreator\n    ) {}\n\n    signInCustomer(\n        credentials: CustomerCredentials,\n        options?: RequestOptions\n    ): ThunkAction<SignInCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignInCustomerRequested)),\n            from(this._customerRequestSender.signInCustomer(credentials, options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignInCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignInCustomerFailed, error))\n        );\n    }\n\n    signOutCustomer(\n        options?: RequestOptions\n    ): ThunkAction<SignOutCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignOutCustomerRequested)),\n            from(this._customerRequestSender.signOutCustomer(options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignOutCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignOutCustomerFailed, error))\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport CustomerCredentials from './customer-credentials';\nimport { InternalCustomerResponseBody } from './internal-customer-responses';\n\nexport default class CustomerRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    signInCustomer(credentials: CustomerCredentials, { timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.post(url, { timeout, body: credentials });\n    }\n\n    signOutCustomer({ timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.delete(url, { timeout });\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Cart from './cart';\nimport CartState from './cart-state';\n\n@selector\nexport default class CartSelector {\n    constructor(\n        private _cart: CartState\n    ) {}\n\n    getCart(): Cart | undefined {\n        return this._cart.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._cart.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._cart.statuses.isLoading;\n    }\n}\n","import { RequestError } from '../common/error/errors';\nimport { selector } from '../common/selector';\n\nimport Coupon from './coupon';\nimport CouponState from './coupon-state';\n\n@selector\nexport default class CouponSelector {\n    constructor(\n        private _coupon: CouponState\n    ) {}\n\n    getCoupons(): Coupon[] | undefined {\n        return this._coupon.data;\n    }\n\n    getRemoveError(): RequestError | undefined {\n        return this._coupon.errors.removeCouponError;\n    }\n\n    getApplyError(): RequestError | undefined {\n        return this._coupon.errors.applyCouponError;\n    }\n\n    isApplying(): boolean {\n        return !!this._coupon.statuses.isApplyingCoupon;\n    }\n\n    isRemoving(): boolean {\n        return !!this._coupon.statuses.isRemovingCoupon;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Customer from './customer';\nimport CustomerState from './customer-state';\n\n@selector\nexport default class CustomerSelector {\n    constructor(\n        private _customer: CustomerState\n    ) {}\n\n    getCustomer(): Customer | undefined {\n        return this._customer.data;\n    }\n}\n","import CustomerStrategyState from './customer-strategy-state';\n\nexport default class CustomerStrategySelector {\n    constructor(\n        private _customerStrategies: CustomerStrategyState\n    ) {}\n\n    getSignInError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.signInMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.signInError;\n    }\n\n    getSignOutError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.signOutMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.signOutError;\n    }\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.initializeError;\n    }\n\n    getWidgetInteractionError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.widgetInteractionMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.widgetInteractionError;\n    }\n\n    isSigningIn(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.signInMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isSigningIn;\n    }\n\n    isSigningOut(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.signOutMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isSigningOut;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isInitializing;\n    }\n\n    isInitialized(methodId: string): boolean {\n        return !!(\n            this._customerStrategies.data[methodId] &&\n            this._customerStrategies.data[methodId].isInitialized\n        );\n    }\n\n    isWidgetInteracting(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.widgetInteractionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isWidgetInteracting;\n    }}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\nimport { selector } from '../common/selector';\n\nimport GiftCertificate from './gift-certificate';\nimport GiftCertificateState from './gift-certificate-state';\n\n@selector\nexport default class GiftCertificateSelector {\n    constructor(\n        private _giftCertificate: GiftCertificateState\n    ) {}\n\n    getGiftCertificates(): GiftCertificate[] | undefined {\n        return this._giftCertificate.data;\n    }\n\n    getRemoveError(): RequestError<StorefrontErrorResponseBody> | undefined {\n        return this._giftCertificate.errors.removeGiftCertificateError;\n    }\n\n    getApplyError(): RequestError<StorefrontErrorResponseBody> | undefined {\n        return this._giftCertificate.errors.applyGiftCertificateError;\n    }\n\n    isApplying(): boolean {\n        return !!this._giftCertificate.statuses.isApplyingGiftCertificate;\n    }\n\n    isRemoving(): boolean {\n        return !!this._giftCertificate.statuses.isRemovingGiftCertificate;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport { Address } from '../address';\n\nimport ConsignmentState from './consignment-state';\n\n@selector\nexport default class ShippingAddressSelector {\n    constructor(\n        private _consignments: ConsignmentState\n    ) {}\n\n    getShippingAddress(): Address | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments[0]) {\n            return;\n        }\n\n        return consignments[0].shippingAddress;\n    }\n}\n","import { selector } from '../common/selector';\nimport { Country } from '../geography';\n\nimport ShippingCountryState from './shipping-country-state';\n\n@selector\nexport default class ShippingCountrySelector {\n    constructor(\n        private _shippingCountries: ShippingCountryState\n    ) {}\n\n    getShippingCountries(): Country[] | undefined {\n        return this._shippingCountries.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._shippingCountries.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._shippingCountries.statuses.isLoading;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport ShippingStrategyState from './shipping-strategy-state';\n\n@selector\nexport default class ShippingStrategySelector {\n    constructor(\n        private _shippingStrategies: ShippingStrategyState\n    ) {}\n\n    getUpdateAddressError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.updateAddressMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.updateAddressError;\n    }\n\n    getSelectOptionError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.selectOptionMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.selectOptionError;\n    }\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.initializeError;\n    }\n\n    isUpdatingAddress(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.updateAddressMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isUpdatingAddress;\n    }\n\n    isSelectingOption(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.selectOptionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isSelectingOption;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isInitializing;\n    }\n\n    isInitialized(methodId: string): boolean {\n        return !!(\n            this._shippingStrategies.data[methodId] &&\n            this._shippingStrategies.data[methodId].isInitialized\n        );\n    }\n}\n","import { find } from 'lodash';\n\nimport { isAddressEqual, AddressRequestBody } from '../address';\nimport { CartSelector, PhysicalItem } from '../cart';\nimport { selector } from '../common/selector';\n\nimport Consignment from './consignment';\nimport ConsignmentState from './consignment-state';\nimport ShippingOption from './shipping-option';\n\n@selector\nexport default class ConsignmentSelector {\n    constructor(\n        private _consignments: ConsignmentState,\n        private _cart: CartSelector\n    ) {}\n\n    getConsignments(): Consignment[] | undefined {\n        return this._consignments.data;\n    }\n\n    getConsignmentById(id: string): Consignment | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return find(consignments, { id });\n    }\n\n    getConsignmentByAddress(address: AddressRequestBody): Consignment | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return find(consignments, consignment =>\n            isAddressEqual(consignment.shippingAddress, address)\n        );\n    }\n\n    getShippingOption(): ShippingOption | undefined {\n        const consignments = this._consignments.data;\n\n        if (consignments && consignments.length) {\n            return consignments[0].selectedShippingOption;\n        }\n    }\n\n    getLoadError(): Error | undefined {\n        return this._consignments.errors.loadError;\n    }\n\n    getCreateError(): Error | undefined {\n        return this._consignments.errors.createError;\n    }\n\n    getLoadShippingOptionsError(): Error | undefined {\n        return this._consignments.errors.loadShippingOptionsError;\n    }\n\n    getUnassignedItems(): PhysicalItem[] {\n        const cart = this._cart.getCart();\n\n        if (!cart) {\n            return [];\n        }\n\n        const assignedLineItemIds = (this.getConsignments() || []).reduce(\n            (itemIds, consignment) => itemIds.concat(consignment.lineItemIds),\n            [] as string[]\n        );\n\n        return (cart.lineItems.physicalItems || []).filter(\n            item => assignedLineItemIds.indexOf(item.id as string) < 0\n        );\n    }\n\n    getUpdateError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.updateError[consignmentId];\n        }\n\n        return find(this._consignments.errors.updateError);\n    }\n\n    getDeleteError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.deleteError[consignmentId];\n        }\n\n        return find(this._consignments.errors.deleteError);\n    }\n\n    getItemAssignmentError(address: AddressRequestBody): Error | undefined {\n        const consignment = this.getConsignmentByAddress(address);\n\n        return consignment ? this.getUpdateError(consignment.id) : this.getCreateError();\n    }\n\n    getUpdateShippingOptionError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.updateShippingOptionError[consignmentId];\n        }\n\n        return find(this._consignments.errors.updateShippingOptionError);\n    }\n\n    isLoading(): boolean {\n        return this._consignments.statuses.isLoading === true;\n    }\n\n    isLoadingShippingOptions(): boolean {\n        return this._consignments.statuses.isLoadingShippingOptions === true;\n    }\n\n    isCreating(): boolean {\n        return this._consignments.statuses.isCreating === true;\n    }\n\n    isUpdating(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isUpdating[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isUpdating) === true;\n    }\n\n    isDeleting(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isDeleting[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isDeleting) === true;\n    }\n\n    isAssigningItems(address: AddressRequestBody): boolean {\n        const consignment = this.getConsignmentByAddress(address);\n\n        return consignment ? this.isUpdating(consignment.id) : this.isCreating();\n    }\n\n    isUpdatingShippingOption(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isUpdatingShippingOption[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isUpdatingShippingOption) === true;\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { selector } from '../common/selector';\nimport { CouponSelector } from '../coupon';\n\nimport Order from './order';\nimport OrderState, { OrderMetaState } from './order-state';\n\n@selector\nexport default class OrderSelector {\n    constructor(\n        private _order: OrderState,\n        private _billingAddress: BillingAddressSelector,\n        private _coupons: CouponSelector\n    ) {}\n\n    getOrder(): Order | undefined {\n        const { data } = this._order;\n        const billingAddress = this._billingAddress.getBillingAddress();\n        const coupons = this._coupons.getCoupons() || [];\n\n        if (!data || !billingAddress) {\n            return;\n        }\n\n        return {\n            ...data,\n            billingAddress,\n            coupons,\n        };\n    }\n\n    getOrderMeta(): OrderMetaState | undefined {\n        return this._order.meta;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._order.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._order.statuses.isLoading;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing/billing-address-actions';\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { CouponAction, CouponActionType } from '../coupon/coupon-actions';\nimport { GiftCertificateAction, GiftCertificateActionType } from '../coupon/gift-certificate-actions';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport Cart from './cart';\nimport CartState, { CartErrorsState, CartStatusesState } from './cart-state';\n\nconst DEFAULT_STATE: CartState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function cartReducer(\n    state: CartState = DEFAULT_STATE,\n    action: Action\n): CartState {\n    const reducer = combineReducers<CartState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Cart | undefined,\n    action: BillingAddressAction | CheckoutAction | ConsignmentAction | CouponAction | GiftCertificateAction\n): Cart | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload ? { ...data, ...action.payload.cart } : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CartStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction\n): CartStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n\nfunction errorsReducer(\n    errors: CartErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction\n): CartErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { CouponAction, CouponActionType } from '../coupon';\nimport { CustomerAction, CustomerActionType } from '../customer';\n\nimport Consignment from './consignment';\nimport { ConsignmentAction, ConsignmentActionType } from './consignment-actions';\nimport ConsignmentState, { ConsignmentErrorsState, ConsignmentStatusesState } from './consignment-state';\n\nconst DEFAULT_STATE: ConsignmentState = {\n    errors: {\n        updateShippingOptionError: {},\n        updateError: {},\n        deleteError: {},\n    },\n    statuses: {\n        isUpdating: {},\n        isUpdatingShippingOption: {},\n        isDeleting: {},\n    },\n};\n\nexport default function consignmentReducer(\n    state: ConsignmentState = DEFAULT_STATE,\n    action: Action\n): ConsignmentState {\n    const reducer = combineReducers<ConsignmentState, ConsignmentAction | CheckoutAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Consignment[] | undefined,\n    action: ConsignmentAction | CheckoutAction | CouponAction | CustomerAction\n): Consignment[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n        return action.payload ? action.payload.consignments : data;\n\n    case CustomerActionType.SignOutCustomerSucceeded:\n        return [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConsignmentErrorsState = DEFAULT_STATE.errors,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return { ...errors, loadError: action.payload };\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n        return { ...errors, createError: undefined };\n\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return { ...errors, createError: action.payload };\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            errors.updateError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            errors.updateError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            errors.deleteError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            errors.deleteError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        if (action.meta) {\n            errors.updateShippingOptionError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            errors.updateShippingOptionError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConsignmentStatusesState = DEFAULT_STATE.statuses,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return { ...statuses, isLoadingShippingOptions: true };\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...statuses, isLoading: false };\n\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return { ...statuses, isLoadingShippingOptions: false };\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n        return { ...statuses, isCreating: true };\n\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return { ...statuses, isCreating: false };\n\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            statuses.isUpdating[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            statuses.isUpdating[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            statuses.isDeleting[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            statuses.isDeleting[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n        if (action.meta) {\n            statuses.isUpdatingShippingOption[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            statuses.isUpdatingShippingOption[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport Coupon from './coupon';\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport CouponState, { CouponErrorsState, CouponStatusesState } from './coupon-state';\n\nconst DEFAULT_STATE: CouponState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function couponReducer(\n    state: CouponState = DEFAULT_STATE,\n    action: Action\n): CouponState {\n    const reducer = combineReducers<CouponState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Coupon[] | undefined,\n    action: CouponAction | CheckoutAction | OrderAction\n): Coupon[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return action.payload ? action.payload.coupons : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CouponErrorsState = {},\n    action: CouponAction\n): CouponErrorsState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n    case CouponActionType.ApplyCouponSucceeded:\n        return { ...errors, applyCouponError: undefined };\n\n    case CouponActionType.ApplyCouponFailed:\n        return { ...errors, applyCouponError: action.payload };\n\n    case CouponActionType.RemoveCouponRequested:\n    case CouponActionType.RemoveCouponSucceeded:\n        return { ...errors, removeCouponError: undefined };\n\n    case CouponActionType.RemoveCouponFailed:\n        return { ...errors, removeCouponError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CouponStatusesState = {},\n    action: CouponAction\n): CouponStatusesState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n        return { ...statuses, isApplyingCoupon: true };\n\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.ApplyCouponFailed:\n        return { ...statuses, isApplyingCoupon: false };\n\n    case CouponActionType.RemoveCouponRequested:\n        return { ...statuses, isRemovingCoupon: true };\n\n    case CouponActionType.RemoveCouponSucceeded:\n    case CouponActionType.RemoveCouponFailed:\n        return { ...statuses, isRemovingCoupon: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\n\nimport Customer from './customer';\nimport CustomerState from './customer-state';\n\nconst DEFAULT_STATE: CustomerState = {};\n\nexport default function customerReducer(\n    state: CustomerState = DEFAULT_STATE,\n    action: CheckoutAction\n): CustomerState {\n    const reducer = combineReducers<CustomerState, CheckoutAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Customer | undefined,\n    action: CheckoutAction\n): Customer | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return action.payload ? { ...data, ...action.payload.customer } : data;\n\n    default:\n        return data;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport GiftCertificate from './gift-certificate';\nimport { GiftCertificateAction, GiftCertificateActionType } from './gift-certificate-actions';\nimport GiftCertificateState, { GiftCertificateErrorsState, GiftCertificateStatusesState } from './gift-certificate-state';\n\nconst DEFAULT_STATE: GiftCertificateState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function giftCertificateReducer(\n    state: GiftCertificateState = DEFAULT_STATE,\n    action: Action\n): GiftCertificateState {\n    const reducer = combineReducers<GiftCertificateState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: GiftCertificate[] | undefined,\n    action: CheckoutAction | GiftCertificateAction | ConsignmentAction | CouponAction\n): GiftCertificate[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload ? action.payload.giftCertificates : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: GiftCertificateErrorsState = DEFAULT_STATE.errors,\n    action: GiftCertificateAction\n): GiftCertificateErrorsState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        return { ...errors, applyGiftCertificateError: undefined };\n\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return { ...errors, applyGiftCertificateError: action.payload };\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return { ...errors, removeGiftCertificateError: undefined };\n\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return { ...errors, removeGiftCertificateError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: GiftCertificateStatusesState = DEFAULT_STATE.statuses,\n    action: GiftCertificateAction\n): GiftCertificateStatusesState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n        return { ...statuses, isApplyingGiftCertificate: true };\n\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return { ...statuses, isApplyingGiftCertificate: false };\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n        return { ...statuses, isRemovingGiftCertificate: true };\n\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return { ...statuses, isRemovingGiftCertificate: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport { OrderAction, OrderActionType } from './order-actions';\nimport OrderState, { OrderDataState, OrderErrorsState, OrderMetaState, OrderStatusesState } from './order-state';\n\nconst DEFAULT_STATE: OrderState = {\n    errors: {},\n    meta: {},\n    statuses: {},\n};\n\nexport default function orderReducer(\n    state: OrderState = DEFAULT_STATE,\n    action: Action\n): OrderState {\n    const reducer = combineReducers<OrderState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: OrderDataState | undefined,\n    action: OrderAction\n): OrderDataState | undefined {\n    switch (action.type) {\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n        return action.payload\n            ? omit({ ...data, ...action.payload }, ['billingAddress', 'coupons'])\n            : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: OrderMetaState | undefined,\n    action: OrderAction\n): OrderMetaState | undefined {\n    switch (action.type) {\n    case OrderActionType.FinalizeOrderSucceeded:\n    case OrderActionType.SubmitOrderSucceeded:\n        return action.payload ? {\n            ...meta,\n            ...action.meta,\n            callbackUrl: action.payload.order.callbackUrl,\n            orderToken: action.payload.order.token,\n            payment: action.payload.order && action.payload.order.payment,\n        } : meta;\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: OrderErrorsState = DEFAULT_STATE.errors,\n    action: OrderAction\n): OrderErrorsState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return { ...errors, loadError: undefined };\n\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: OrderStatusesState = DEFAULT_STATE.statuses,\n    action: OrderAction\n): OrderStatusesState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return { ...statuses, isLoading: true };\n\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { assign, findIndex, isPlainObject, pickBy } from 'lodash';\n\nimport { PartialDeep } from '../types';\n\n/**\n * Push an item to an array if it doesn't exist in the array. Otherwise, merge\n * with the existing item in the array. This function always returns a new array.\n */\nexport default function mergeOrPush<T>(\n    array: T[],\n    item: T,\n    predicate: ((item: T) => boolean) | PartialDeep<T>\n): T[] {\n    const index = findIndex(array, typeof predicate === 'object' ? pickBy(predicate) : predicate);\n    const newArray = [...array];\n\n    if (index === -1) {\n        newArray.push(item);\n    } else {\n        newArray[index] = isPlainObject(item) ? assign({}, array[index], item) : item;\n    }\n\n    return newArray;\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { Country } from '../geography';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryState, { ShippingCountryErrorsState, ShippingCountryStatusesState } from './shipping-country-state';\n\nconst DEFAULT_STATE: ShippingCountryState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function shippingCountryReducer(\n    state: ShippingCountryState = DEFAULT_STATE,\n    action: Action\n): ShippingCountryState {\n    const reducer = combineReducers<ShippingCountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadShippingCountriesAction\n): Country[] | undefined {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return action.payload || [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ShippingCountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadShippingCountriesAction\n): ShippingCountryErrorsState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingCountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadShippingCountriesAction\n): ShippingCountryStatusesState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n        return { ...statuses, isLoading: true };\n\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { mapToInternalAddress } from '../address';\nimport { BillingAddress } from '../billing';\n\nimport { Customer } from '.';\nimport InternalCustomer from './internal-customer';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCustomer(customer: Customer, billingAddress: BillingAddress): InternalCustomer {\n    const firstName = customer.firstName || billingAddress.firstName || '';\n    const lastName = customer.lastName || billingAddress.lastName || '';\n\n    return {\n        addresses: (customer.addresses || []).map(address => mapToInternalAddress(address)),\n        customerId: customer.id,\n        isGuest: customer.isGuest,\n        storeCredit: customer.storeCredit,\n        email: customer.email || billingAddress.email || '',\n        firstName,\n        lastName,\n        name: customer.fullName || [firstName, lastName].join(' '),\n    };\n}\n","import GiftCertificate from './gift-certificate';\nimport InternalGiftCertificate from './internal-gift-certificate';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalGiftCertificate(giftCertificate: GiftCertificate): InternalGiftCertificate {\n    return {\n        code: giftCertificate.code,\n        discountedAmount: giftCertificate.used,\n        remainingBalance: giftCertificate.remaining,\n        giftCertificate: {\n            balance: giftCertificate.balance,\n            code: giftCertificate.code,\n            purchaseDate: giftCertificate.purchaseDate,\n        },\n    };\n}\n","import { filter, find, keyBy, reduce } from 'lodash';\n\nimport { AmountTransformer, LineItem } from '../cart';\nimport { mapToInternalLineItems } from '../cart';\nimport { Checkout } from '../checkout';\nimport { mapToInternalCoupon } from '../coupon';\nimport { HOSTED } from '../payment';\n\nimport InternalOrder, { InternalGiftCertificateList, InternalIncompleteOrder, InternalOrderPayment, InternalSocialDataList } from './internal-order';\nimport Order, { GatewayOrderPayment, GiftCertificateOrderPayment, OrderPayment, OrderPayments } from './order';\nimport { OrderMetaState } from './order-state';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalOrder(order: Order, orderMeta: OrderMetaState = {}): InternalOrder {\n    const decimalPlaces = order.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: order.orderId,\n        items: mapToInternalLineItems(order.lineItems, order.currency.decimalPlaces, 'productId'),\n        orderId: order.orderId,\n        currency: order.currency.code,\n        customerCanBeCreated: order.customerCanBeCreated,\n        payment: mapToInteralOrderPayment(order.payments, orderMeta.payment),\n        subtotal: {\n            amount: order.baseAmount,\n            integerAmount: amountTransformer.toInteger(order.baseAmount),\n        },\n        coupon: {\n            discountedAmount: reduce(order.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: order.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: order.discountAmount,\n            integerAmount: amountTransformer.toInteger(order.discountAmount),\n        },\n        token: orderMeta.orderToken,\n        callbackUrl: orderMeta.callbackUrl,\n        discountNotifications: [],\n        giftCertificate: mapToGiftCertificates(order.payments),\n        socialData: mapToInternalSocialDataList(order),\n        status: order.status,\n        hasDigitalItems: order.hasDigitalItems,\n        isDownloadable: order.isDownloadable,\n        isComplete: order.isComplete,\n        shipping: {\n            amount: order.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.shippingCostTotal),\n            amountBeforeDiscount: order.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(order.shippingCostBeforeDiscount),\n        },\n        storeCredit: {\n            amount: mapToStoreCredit(order.payments),\n        },\n        taxes: order.taxes,\n        taxTotal: {\n            amount: order.taxTotal,\n            integerAmount: amountTransformer.toInteger(order.taxTotal),\n        },\n        handling: {\n            amount: order.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: order.orderAmount,\n            integerAmount: order.orderAmountAsInteger,\n        },\n    };\n}\n\nexport function mapToInternalIncompleteOrder(checkout: Checkout): InternalIncompleteOrder {\n    const payment = find(checkout.payments, { providerType: HOSTED });\n\n    return {\n        orderId: null,\n        isComplete: false,\n        payment: !payment ? {} : {\n            id: payment.providerId,\n            gateway: payment.gatewayId,\n            status: mapToInternalPaymentStatus(payment.detail.step),\n        },\n    };\n}\n\nfunction mapToInternalPaymentStatus(status: string): string {\n    return `PAYMENT_STATUS_${status}`;\n}\n\nfunction mapToStoreCredit(payments?: OrderPayments): number {\n    const item = find(payments, { providerId: 'storecredit' });\n\n    return item ? item.amount : 0;\n}\n\nfunction mapToGiftCertificates(payments?: OrderPayments): InternalGiftCertificateList {\n    const items = filter(payments, { providerId: 'giftcertificate' }) as GiftCertificateOrderPayment[];\n\n    return {\n        totalDiscountedAmount: reduce(items, (sum, item) => item.amount + sum, 0),\n        appliedGiftCertificates: keyBy(items.map(item => ({\n            code: item.detail.code,\n            discountedAmount: item.amount,\n            remainingBalance: item.detail.remaining,\n            giftCertificate: {\n                balance: item.amount + item.detail.remaining,\n                code: item.detail.code,\n                purchaseDate: '',\n            },\n        })), 'code'),\n    };\n}\n\nfunction mapToInteralOrderPayment(payments?: OrderPayments, payment: InternalOrderPayment = {}): InternalOrderPayment {\n    const item = find(payments, isDefaultOrderPayment) as GatewayOrderPayment;\n\n    if (!item) {\n        return {};\n    }\n\n    return {\n        id: item.providerId,\n        status: mapToInternalPaymentStatus(item.detail.step),\n        helpText: item.detail.instructions,\n        returnUrl: payment.returnUrl,\n    };\n}\n\nfunction isDefaultOrderPayment(payment: OrderPayment): payment is GatewayOrderPayment {\n    return payment.providerId !== 'giftcertificate' && payment.providerId !== 'storecredit';\n}\n\nfunction mapToInternalSocialDataList(order: Order): { [itemId: string]: InternalSocialDataList } | undefined {\n    const socialDataObject: { [itemId: string]: InternalSocialDataList } = {};\n    const items = [\n        ...order.lineItems.physicalItems,\n        ...order.lineItems.digitalItems,\n    ];\n\n    items.forEach(item => {\n        socialDataObject[item.id] = mapToInternalSocialData(item);\n    });\n\n    return socialDataObject;\n}\n\nfunction mapToInternalSocialData(lineItem: LineItem): InternalSocialDataList {\n    const codes = ['fb', 'tw', 'gp'];\n\n    return codes.reduce((socialData, code) => {\n        const item = lineItem.socialMedia && lineItem.socialMedia.find(item => item.code === code);\n\n        if (!item) {\n            return socialData;\n        }\n\n        socialData[code] = {\n            name: lineItem.name,\n            description: lineItem.name,\n            image: lineItem.imageUrl,\n            url: item.link,\n            shareText: item.text,\n            sharingLink: item.link,\n            channelName: item.channel,\n            channelCode: item.code,\n        };\n\n        return socialData;\n    }, {} as InternalSocialDataList);\n}\n","export default interface ShippingStrategyState {\n    data: ShippingStrategyDataState;\n    errors: ShippingStrategyErrorsState;\n    statuses: ShippingStrategyStatusesState;\n}\n\nexport interface ShippingStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean,\n    };\n}\n\nexport interface ShippingStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    updateAddressError?: Error;\n    updateAddressMethodId?: string;\n    selectOptionError?: Error;\n    selectOptionMethodId?: string;\n}\n\nexport interface ShippingStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isUpdatingAddress?: boolean;\n    isSelectingOption?: boolean;\n    updateAddressMethodId?: string;\n    selectOptionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: ShippingStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport { ShippingStrategyAction, ShippingStrategyActionType } from './shipping-strategy-actions';\nimport ShippingStrategyState, { DEFAULT_STATE, ShippingStrategyDataState, ShippingStrategyErrorsState, ShippingStrategyStatusesState } from './shipping-strategy-state';\n\nexport default function shippingStrategyReducer(\n    state: ShippingStrategyState = DEFAULT_STATE,\n    action: Action\n): ShippingStrategyState {\n    const reducer = combineReducers<ShippingStrategyState, ShippingStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: ShippingStrategyDataState = DEFAULT_STATE.data,\n    action: ShippingStrategyAction\n): ShippingStrategyDataState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        };\n\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        };\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: ShippingStrategyErrorsState = DEFAULT_STATE.errors,\n    action: ShippingStrategyAction\n): ShippingStrategyErrorsState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return {\n            ...errors,\n            updateAddressError: undefined,\n            updateAddressMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n        return {\n            ...errors,\n            updateAddressError: action.payload,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return {\n            ...errors,\n            selectOptionError: undefined,\n            selectOptionMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n        return {\n            ...errors,\n            selectOptionError: action.payload,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: ShippingStrategyAction\n): ShippingStrategyStatusesState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.InitializeFailed:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n        return {\n            ...statuses,\n            isUpdatingAddress: true,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return {\n            ...statuses,\n            isUpdatingAddress: false,\n            updateAddressMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n        return {\n            ...statuses,\n            isSelectingOption: true,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return {\n            ...statuses,\n            isSelectingOption: false,\n            selectOptionMethodId: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","export default interface CustomerStrategyState {\n    data: CustomerStrategyDataState;\n    errors: CustomerStrategyErrorsState;\n    statuses: CustomerStrategyStatusesState;\n}\n\nexport interface CustomerStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean,\n    };\n}\n\nexport interface CustomerStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    signInError?: Error;\n    signInMethodId?: string;\n    signOutError?: Error;\n    signOutMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface CustomerStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isSigningIn?: boolean;\n    isSigningOut?: boolean;\n    signInMethodId?: string;\n    signOutMethodId?: string;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: CustomerStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport { CustomerStrategyAction, CustomerStrategyActionType } from './customer-strategy-actions';\nimport CustomerStrategyState, { CustomerStrategyDataState, CustomerStrategyErrorsState, CustomerStrategyStatusesState, DEFAULT_STATE } from './customer-strategy-state';\n\nexport default function customerStrategyReducer(\n    state: CustomerStrategyState = DEFAULT_STATE,\n    action: Action\n): CustomerStrategyState {\n    const reducer = combineReducers<CustomerStrategyState, CustomerStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CustomerStrategyDataState = DEFAULT_STATE.data,\n    action: CustomerStrategyAction\n): CustomerStrategyDataState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        };\n\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        };\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CustomerStrategyErrorsState = DEFAULT_STATE.errors,\n    action: CustomerStrategyAction\n): CustomerStrategyErrorsState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignInRequested:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return {\n            ...errors,\n            signInError: undefined,\n            signInMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignInFailed:\n        return {\n            ...errors,\n            signInError: action.payload,\n            signInMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignOutRequested:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return {\n            ...errors,\n            signOutError: undefined,\n            signOutMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignOutFailed:\n        return {\n            ...errors,\n            signOutError: action.payload,\n            signOutMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n        return {\n            ...errors,\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n        return {\n            ...errors,\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CustomerStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: CustomerStrategyAction\n): CustomerStrategyStatusesState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.InitializeFailed:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignInRequested:\n        return {\n            ...statuses,\n            isSigningIn: true,\n            signInMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignInFailed:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return {\n            ...statuses,\n            isSigningIn: false,\n            signInMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignOutRequested:\n        return {\n            ...statuses,\n            isSigningOut: true,\n            signOutMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignOutFailed:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return {\n            ...statuses,\n            isSigningOut: false,\n            signOutMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n        return {\n            ...statuses,\n            isWidgetInteracting: true,\n            widgetInteractionMethodId: action.meta.methodId,\n         };\n\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n         return {\n            ...statuses,\n            isWidgetInteracting: false,\n            widgetInteractionMethodId: undefined,\n         };\n\n    default:\n        return statuses;\n    }\n}\n","export default function getCallbackUrl(origin: string): string {\n    return `${window.location.origin}/checkout.php?action=set_external_checkout&provider=masterpass&gateway=stripe&origin=${origin}`;\n}\n","import isPrivate from './is-private';\nimport omitDeep from './omit-deep';\n\nexport default function omitPrivate(object: any): any {\n    return omitDeep(object, (value: any, key: string) => isPrivate(key));\n}\n","export default function getEnvironment(): string {\n    try {\n        return process.env.NODE_ENV || 'development';\n    } catch (e) {\n        return 'development';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { InternalOrderResponseBody } from './internal-order-responses';\nimport Order from './order';\n\nexport default class OrderRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadOrder(orderId: number, { timeout }: RequestOptions = {}): Promise<Response<Order>> {\n        const url = `/api/storefront/orders/${orderId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n        const params = {\n            include: [\n                'payments',\n                'lineItems.physicalItems.socialMedia',\n                'lineItems.physicalItems.options',\n                'lineItems.digitalItems.socialMedia',\n                'lineItems.digitalItems.options',\n            ].join(','),\n        };\n\n        return this._requestSender.get(url, {\n            params,\n            headers,\n            timeout,\n        });\n    }\n\n    submitOrder(body: InternalOrderRequestBody, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = '/internalapi/v1/checkout/order';\n\n        return this._requestSender.post(url, { body, timeout });\n    }\n\n    finalizeOrder(orderId: number, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = `/internalapi/v1/checkout/order/${orderId}`;\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, from, of, Observable, Observer } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutValidator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { FinalizeOrderAction, LoadOrderAction, LoadOrderPaymentsAction, OrderActionType, SubmitOrderAction } from './order-actions';\nimport OrderRequestBody from './order-request-body';\nimport OrderRequestSender from './order-request-sender';\n\nexport default class OrderActionCreator {\n    constructor(\n        private _orderRequestSender: OrderRequestSender,\n        private _checkoutValidator: CheckoutValidator\n    ) {}\n\n    loadOrder(orderId: number, options?: RequestOptions): Observable<LoadOrderAction> {\n        return new Observable((observer: Observer<LoadOrderAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderFailed, response));\n                });\n        });\n    }\n\n    // TODO: Remove when checkout does not contain unrelated order data.\n    loadOrderPayments(orderId: number, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        return new Observable((observer: Observer<LoadOrderPaymentsAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderPaymentsRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderPaymentsSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderPaymentsFailed, response));\n                });\n        });\n    }\n\n    loadCurrentOrder(options?: RequestOptions): ThunkAction<LoadOrderAction, InternalCheckoutSelectors> {\n        return store => defer(() => {\n            const orderId = this._getCurrentOrderId(store.getState());\n\n            if (!orderId) {\n                throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n            }\n\n            return this.loadOrder(orderId, options);\n        });\n    }\n\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<SubmitOrderAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(OrderActionType.SubmitOrderRequested)),\n            defer(() => {\n                const state = store.getState();\n                const externalSource = state.config.getExternalSource();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                return from(\n                    this._checkoutValidator.validate(checkout, options)\n                        .then(() => this._orderRequestSender.submitOrder(this._mapToOrderRequestBody(payload, checkout.customerMessage, externalSource), options))\n                ).pipe(\n                    switchMap(response => concat(\n                        // TODO: Remove once we can submit orders using storefront API\n                        this.loadOrder(response.body.data.order.orderId, options),\n                        of(createAction(OrderActionType.SubmitOrderSucceeded, response.body.data, { ...response.body.meta, token: response.headers.token }))\n                    ))\n                );\n            }).pipe(\n                catchError(error => throwErrorAction(OrderActionType.SubmitOrderFailed, error))\n            )\n        );\n    }\n\n    finalizeOrder(orderId: number, options?: RequestOptions): Observable<FinalizeOrderAction | LoadOrderAction> {\n        return concat(\n            of(createAction(OrderActionType.FinalizeOrderRequested)),\n            from(this._orderRequestSender.finalizeOrder(orderId, options))\n                .pipe(\n                    switchMap(response => concat(\n                        this.loadOrder(orderId, options),\n                        of(createAction(OrderActionType.FinalizeOrderSucceeded, response.body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(OrderActionType.FinalizeOrderFailed, error))\n        );\n    }\n\n    private _getCurrentOrderId(state: InternalCheckoutSelectors): number | undefined {\n        const order = state.order.getOrder();\n        const checkout = state.checkout.getCheckout();\n\n        return (order && order.orderId) || (checkout && checkout.orderId);\n    }\n\n    private _mapToOrderRequestBody(payload: OrderRequestBody, customerMessage: string, externalSource?: string): InternalOrderRequestBody {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            return {\n                ...order,\n                customerMessage,\n                externalSource,\n            };\n        }\n\n        return {\n            ...order,\n            customerMessage,\n            externalSource,\n            payment: {\n                paymentData: payment.paymentData,\n                name: payment.methodId,\n                gateway: payment.gatewayId,\n            },\n        };\n    }\n}\n","import { isEqual } from 'lodash';\n\nimport { PartialDeep } from '../common/types';\n\nimport Cart from './cart';\n\nexport default class CartComparator {\n    isEqual(cartA: Cart, cartB: Cart): boolean {\n        return isEqual(\n            this._normalize(cartA),\n            this._normalize(cartB)\n        );\n    }\n\n    private _normalize(cart: Cart): PartialDeep<Cart> {\n        return {\n            cartAmount: cart.cartAmount,\n            currency: cart.currency,\n            id: cart.id,\n            lineItems: {\n                digitalItems: cart.lineItems.digitalItems\n                    .slice()\n                    .sort((itemA, itemB) =>\n                        `${itemA.productId}${itemA.variantId}`.localeCompare(`${itemB.productId}${itemB.variantId}`)\n                    )\n                    .map(item => ({\n                        extendedSalePrice: item.extendedSalePrice,\n                        productId: item.productId,\n                        quantity: item.quantity,\n                        variantId: item.variantId,\n                    })),\n                giftCertificates: cart.lineItems.giftCertificates\n                    .slice()\n                    .sort((itemA, itemB) => `${itemA.id}`.localeCompare(`${itemB.id}`))\n                    .map(item => ({\n                        amount: item.amount,\n                        recipient: item.recipient,\n                    })),\n                physicalItems: cart.lineItems.physicalItems\n                    .slice()\n                    .sort((itemA, itemB) =>\n                        `${itemA.productId}${itemA.variantId}`.localeCompare(`${itemB.productId}${itemB.variantId}`)\n                    )\n                    .map(item => ({\n                        extendedSalePrice: item.extendedSalePrice,\n                        productId: item.productId,\n                        quantity: item.quantity,\n                        variantId: item.variantId,\n                        giftWrapping: item.giftWrapping,\n                    })),\n            },\n        };\n    }\n}\n","export default function toSingleLine(input?: string) {\n    if (!input) {\n        return '';\n    }\n\n    return input.split(/(?:\\r\\n|\\n|\\r)/)\n        .map(line => line.replace(/^\\s+/gm, ''))\n        .join(' ')\n        .trim();\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ApplyCouponAction, CouponAction, CouponActionType, RemoveCouponAction } from './coupon-actions';\nimport CouponRequestSender from './coupon-request-sender';\n\nexport default class CouponActionCreator {\n    constructor(\n        private _couponRequestSender: CouponRequestSender\n    ) {}\n\n    applyCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.ApplyCouponRequested));\n\n            this._couponRequestSender.applyCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.ApplyCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.ApplyCouponFailed, response));\n                });\n        });\n    }\n\n    removeCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.RemoveCouponRequested));\n\n            this._couponRequestSender.removeCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.RemoveCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.RemoveCouponFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CheckoutIncludes, CHECKOUT_DEFAULT_INCLUDES } from '../checkout';\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nexport default class CouponRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    CheckoutIncludes.AvailableShippingOptions,\n                ]),\n            },\n            body: { couponCode },\n        });\n    }\n\n    removeCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons/${couponCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    CheckoutIncludes.AvailableShippingOptions,\n                ]),\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable ,  Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { GiftCertificateRequestSender } from '.';\nimport { ApplyGiftCertificateAction, GiftCertificateActionType, RemoveGiftCertificateAction } from './gift-certificate-actions';\n\nexport default class GiftCertificateActionCreator {\n    constructor(\n        private _giftCertificateRequestSender: GiftCertificateRequestSender\n    ) {}\n\n    applyGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<ApplyGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.applyGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.ApplyGiftCertificateFailed, response));\n                });\n        });\n    }\n\n    removeGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<RemoveGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.removeGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.RemoveGiftCertificateFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CHECKOUT_DEFAULT_INCLUDES } from '../checkout';\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nexport default class GiftCertificateRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n            body: { giftCertificateCode },\n        });\n    }\n\n    removeGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates/${giftCertificateCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n        });\n    }\n}\n","export default class CancellablePromise<T> {\n    promise: Promise<T>;\n    cancel!: (reason?: any) => void;\n\n    constructor(promise: Promise<T>) {\n        const cancellable = new Promise<T>((resolve, reject) => {\n            this.cancel = reject;\n        });\n\n        this.promise = Promise.race([promise, cancellable]);\n    }\n}\n","import { isEqual } from 'lodash';\n\nimport { omitPrivate } from '../common/utility';\n\nimport InternalAddress from './internal-address';\n\nexport default function isInternalAddressEqual(addressA: Partial<InternalAddress>, addressB: Partial<InternalAddress>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<InternalAddress>): Partial<InternalAddress> {\n    const ignoredKeys = ['id', 'provinceCode'];\n\n    return (Object.keys(omitPrivate(address) || {}) as Array<keyof InternalAddress>)\n        .reduce(\n            (result, key) => ignoredKeys.indexOf(key) === -1 && address[key] ?\n                { ...result, [key]: address[key] } :\n                result,\n            {}\n        );\n}\n","import { BillingAddress } from '../billing';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\nexport default function mapFromInternalAddress(address: InternalAddress): Address | BillingAddress {\n    return {\n        id: address.id,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.addressLine1,\n        address2: address.addressLine2,\n        city: address.city,\n        stateOrProvince: address.province,\n        stateOrProvinceCode: address.provinceCode,\n        postalCode: address.postCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryRequestSender from './shipping-country-request-sender';\n\nexport default class ShippingCountryActionCreator {\n    constructor(\n        private _shippingCountryRequestSender: ShippingCountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<LoadShippingCountriesAction> {\n        return Observable.create((observer: Observer<LoadShippingCountriesAction>) => {\n            observer.next(createAction(ShippingCountryActionType.LoadShippingCountriesRequested));\n\n            this._shippingCountryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(ShippingCountryActionType.LoadShippingCountriesSucceeded, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ShippingCountryActionType.LoadShippingCountriesFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\nimport { CountryResponseBody } from '../geography';\n\nexport default class ShippingCountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/shipping/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { Registry } from '../common/registry';\n\nimport { ShippingInitializeOptions, ShippingRequestOptions } from './shipping-request-options';\nimport {\n    ShippingStrategyActionType,\n    ShippingStrategyDeinitializeAction,\n    ShippingStrategyInitializeAction,\n    ShippingStrategySelectOptionAction,\n    ShippingStrategyUpdateAddressAction,\n} from './shipping-strategy-actions';\nimport { ShippingStrategy } from './strategies';\n\nexport default class ShippingStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<ShippingStrategy>\n    ) {}\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): ThunkAction<ShippingStrategyUpdateAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyUpdateAddressAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .updateAddress(address, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId }));\n                });\n        });\n    }\n\n    selectOption(shippingOptionId: string, options?: ShippingRequestOptions): ThunkAction<ShippingStrategySelectOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategySelectOptionAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.SelectOptionRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .selectOption(shippingOptionId, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.SelectOptionSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.SelectOptionFailed, error, { methodId }));\n                });\n        });\n    }\n\n    initialize(options?: ShippingInitializeOptions): ThunkAction<ShippingStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyInitializeAction>) => {\n            const state = store.getState();\n            const payment = state.payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n            const mergedOptions = { ...options, methodId };\n\n            if (methodId && state.shippingStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(ShippingStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(mergedOptions)\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options?: ShippingRequestOptions): ThunkAction<ShippingStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const payment = state.payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            if (methodId && !state.shippingStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(ShippingStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize({ ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n}\n","import StandardError from './standard-error';\n\nexport default class NotImplementedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Not implemented.');\n\n        this.type = 'not_implemented';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors} from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { AmazonPayLoginButton, AmazonPayScriptLoader, AmazonPayWindow } from '../../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nimport AmazonPayCustomerInitializeOptions from './amazon-pay-customer-initialize-options';\n\nexport default class AmazonPayCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const { onError = () => {} } = amazonOptions;\n                const onReady = () => {\n                    this._createSignInButton({\n                        ...amazonOptions,\n                        onError: error => {\n                            reject(error);\n                            onError(error);\n                        },\n                    });\n\n                    resolve();\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via AmazonPay, the shopper must click on \"Login with Amazon\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(options: AmazonPayCustomerInitializeOptions): AmazonPayLoginButton {\n        if (!this._paymentMethod || !this._window.OffAmazonPayments) {\n            throw new NotInitializedError(NotInitializedErrorType.CustomerNotInitialized);\n        }\n\n        if (!this._paymentMethod.config.merchantId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { initializationData } = this._paymentMethod;\n\n        return new this._window.OffAmazonPayments.Button(options.container, this._paymentMethod.config.merchantId, {\n            color: options.color || 'Gold',\n            size: options.size || 'small',\n            type: 'PwA',\n            useAmazonAddressBook: true,\n            onError: options.onError,\n            authorization: () => {\n                this._handleAuthorization(initializationData);\n            },\n        });\n    }\n\n    private _handleAuthorization(options: AuthorizationOptions): void {\n        this._remoteCheckoutRequestSender.generateToken()\n            .then(({ body }) => {\n                if (!this._window.amazon) {\n                    throw new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized);\n                }\n\n                this._window.amazon.Login.authorize({\n                    popup: false,\n                    scope: 'payments:shipping_address payments:billing_address payments:widget profile',\n                    state: `${options.tokenPrefix}${body.token}`,\n                }, options.redirectUrl);\n\n                this._remoteCheckoutRequestSender.trackAuthorizationEvent();\n            });\n    }\n}\n\ninterface AuthorizationOptions {\n    redirectUrl: string;\n    tokenPrefix: string;\n}\n","import { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { BraintreeVisaCheckoutPaymentProcessor } from '../../../payment/strategies/braintree';\nimport { VisaCheckoutScriptLoader } from '../../../payment/strategies/braintree';\nimport { VisaCheckoutPaymentSuccessPayload } from '../../../payment/strategies/braintree/visacheckout';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategyActionCreator from '../../customer-strategy-action-creator';\n\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class BraintreeVisaCheckoutCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _buttonClassName: string = 'visa-checkout-wrapper';\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    container,\n                    onError = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: true,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, initOptions]) => {\n                    const signInButton = this._createSignInButton(container, this._buttonClassName);\n\n                    visaCheckout.init(initOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (payment, error) => onError(error));\n\n                    return signInButton;\n                })\n                .then(signInButton => { signInButton.style.visibility = 'visible'; });\n            })\n            .then(() => this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via VisaCheckout, the shopper must click on \"Visa Checkout\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut('braintreevisacheckout', options)\n        );\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(\n            this._customerStrategyActionCreator.widgetInteraction(() => {\n                return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                    paymentSuccessPayload,\n                    state.shippingAddress.getShippingAddress(),\n                    state.billingAddress.getBillingAddress()\n                )\n                .then(() => this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _createSignInButton(containerId: string, buttonClass: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new Error('Need a container to place the button');\n        }\n\n        return (container.querySelector('.' + buttonClass) as HTMLElement) ||\n            this._insertVisaCheckoutButton(container, buttonClass);\n    }\n\n    private _insertVisaCheckoutButton(container: Element, buttonClass: string): HTMLElement {\n        const buttonSource = 'https://secure.checkout.visa.com/wallet-services-web/xo/button.png?acceptCanadianVisaDebit=false&cobrand=true&size=154';\n        const buttonTemplate = `\n            <img\n                alt=\"Visa Checkout\"\n                class=\"v-button\"\n                role=\"button\"\n                src=\"${buttonSource}\"\n                />\n            <a class=\"v-learn v-learn-default\" style=\"text-align: right; display: block; font-size: 10px; color: #003366;\" href=\"#\" data-locale=\"en_US\">Tell Me More</a>`;\n\n        const visaCheckoutButton = document.createElement('div');\n        visaCheckoutButton.style.visibility = 'hidden';\n        visaCheckoutButton.className = buttonClass;\n        visaCheckoutButton.innerHTML = buttonTemplate;\n\n        container.appendChild(visaCheckoutButton);\n\n        return visaCheckoutButton;\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { toFormUrlEncoded } from '../../../common/http-request';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { ChasePayScriptLoader, ChasePaySuccessPayload } from '../../../payment/strategies/chasepay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\n\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class ChasePayCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _requestSender: RequestSender,\n        private _formPoster: FormPoster\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { chasepay: chasePayOptions, methodId } = options;\n\n        if (!chasePayOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.chasepay\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const cart = state.cart.getCart();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.digitalSessionId) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const { container } = chasePayOptions;\n\n                return this._chasePayScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(JPMC => {\n                        const ChasePay = JPMC.ChasePay;\n\n                        ChasePay.configure({\n                            language: storeConfig.storeProfile.storeLanguage,\n                        });\n\n                        if (ChasePay.isChasePayUp) {\n                            ChasePay.insertButtons({\n                                containers: [container],\n                            });\n                        }\n\n                        ChasePay.on(ChasePay.EventType.START_CHECKOUT, () => {\n                            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n                                .then(() => {\n                                    const state = this._store.getState();\n                                    const method = state.paymentMethods.getPaymentMethod(methodId);\n                                    const sessionId = method && method.initializationData && method.initializationData.digitalSessionId;\n\n                                    if (sessionId) {\n                                        ChasePay.startCheckout(sessionId);\n                                    }\n                                });\n                        });\n\n                        ChasePay.on(ChasePay.EventType.COMPLETE_CHECKOUT, (payload: ChasePaySuccessPayload) => {\n                            const state = this._store.getState();\n                            const method = state.paymentMethods.getPaymentMethod(methodId);\n                            const requestId = method && method.initializationData && method.initializationData.merchantRequestId;\n\n                            if (requestId) {\n                                this._setExternalCheckoutData(payload, requestId)\n                                    .then(() => {\n                                        this._reloadPage();\n                                });\n                            }\n                        });\n                    });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Chase Pay®, the shopper must click on \"Chase Pay®\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _setExternalCheckoutData(payload: ChasePaySuccessPayload, requestId: string): Promise<Response> {\n        const url = `checkout.php?provider=chasepay&action=set_external_checkout`;\n        const options = {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: toFormUrlEncoded({\n                sessionToken: payload.sessionToken,\n                merchantRequestId: requestId,\n            }),\n            method: 'post',\n        };\n\n        return this._requestSender.sendRequest(url, options);\n    }\n\n    private _reloadPage() {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            params: {\n                fromChasePay: true,\n            },\n        });\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport CustomerActionCreator from '../../customer-action-creator';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\n\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class DefaultCustomerStrategy implements CustomerStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _customerActionCreator: CustomerActionCreator\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signInCustomer(credentials, options)\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signOutCustomer(options)\n        );\n    }\n\n    initialize(options?: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nimport GooglePayCustomerInitializeOptions from './googlepay-customer-initialize-options';\n\nexport default class GooglePayCustomerStrategy implements CustomerStrategy {\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor,\n        private _formPoster: FormPoster\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId }  = options;\n\n        const googlePayOptions = this._getGooglePayOptions(options);\n\n        if (!methodId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._googlePayPaymentProcessor.initialize(methodId)\n            .then(() => {\n                this._walletButton = this._createSignInButton(googlePayOptions.container);\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Google Pay, the shopper must click on \"Google Pay\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const button = this._googlePayPaymentProcessor.createButton(this._handleWalletButtonClick);\n\n        container.appendChild(button);\n\n        return button;\n    }\n\n    private _getGooglePayOptions(options: CustomerInitializeOptions): GooglePayCustomerInitializeOptions {\n        if (options.methodId === 'googlepaybraintree' && options.googlepaybraintree) {\n            return options.googlepaybraintree;\n        }\n\n        if (options.methodId === 'googlepaystripe' && options.googlepaystripe) {\n            return options.googlepaystripe;\n        }\n\n        throw new InvalidArgumentError();\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n\n    private _onError(error?: Error): void {\n        if (error && error.message !== 'CANCELED') {\n            throw error;\n        }\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        return this._googlePayPaymentProcessor.displayWallet()\n            .then(paymentData => this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => {\n                if (paymentData.shippingAddress) {\n                    this._googlePayPaymentProcessor.updateShippingAddress(paymentData.shippingAddress);\n                }\n            }))\n            .then(() => this._onPaymentSelectComplete())\n            .catch(error => this._onError(error));\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotImplementedError\n} from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { getCallbackUrl, MasterpassScriptLoader } from '../../../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\n\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class MasterpassCustomerStrategy implements CustomerStrategy {\n    private _signInButton?: HTMLElement;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { masterpass: masterpassOptions, methodId } = options;\n\n        if (!masterpassOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.masterpass\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const cart = state.cart.getCart();\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                const { container } = masterpassOptions;\n\n                const payload = {\n                    checkoutId: this._paymentMethod.initializationData.checkoutId,\n                    allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n                    amount: cart.cartAmount.toString(),\n                    currency: cart.currency.code,\n                    cartId: cart.id,\n                    suppressShippingAddress: false,\n                    callbackUrl: getCallbackUrl('checkout'),\n                };\n\n                return this._masterpassScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(Masterpass => {\n                        this._signInButton = this._createSignInButton(container);\n\n                        this._signInButton.addEventListener('click', () => {\n                            Masterpass.checkout(payload);\n                        });\n                    });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        container.appendChild(button);\n\n        return button;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { NotImplementedError} from '../../../common/error/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\n\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class SquareCustomerStrategy implements CustomerStrategy {\n\n    constructor(\n        private _store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    initialize(options?: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport {\n    createBraintreeVisaCheckoutPaymentProcessor,\n    BraintreeScriptLoader,\n    BraintreeSDKCreator,\n    VisaCheckoutScriptLoader\n} from '../payment/strategies/braintree';\nimport { ChasePayScriptLoader } from '../payment/strategies/chasepay';\nimport { createGooglePayPaymentProcessor, GooglePayBraintreeInitializer, GooglePayStripeInitializer } from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport CustomerActionCreator from './customer-action-creator';\nimport CustomerRequestSender from './customer-request-sender';\nimport CustomerStrategyActionCreator from './customer-strategy-action-creator';\nimport { CustomerStrategy } from './strategies';\nimport { AmazonPayCustomerStrategy } from './strategies/amazon';\nimport { BraintreeVisaCheckoutCustomerStrategy } from './strategies/braintree';\nimport { ChasePayCustomerStrategy } from './strategies/chasepay';\nimport { DefaultCustomerStrategy } from './strategies/default';\nimport { GooglePayCustomerStrategy } from './strategies/googlepay';\nimport { MasterpassCustomerStrategy } from './strategies/masterpass';\nimport { SquareCustomerStrategy } from './strategies/square';\n\nexport default function createCustomerStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<CustomerStrategy> {\n    const registry = new Registry<CustomerStrategy>();\n    const scriptLoader = getScriptLoader();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutActionCreator = new CheckoutActionCreator(\n        checkoutRequestSender,\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n    const formPoster = createFormPoster();\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutRequestSender = new RemoteCheckoutRequestSender(requestSender);\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(remoteCheckoutRequestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            remoteCheckoutRequestSender,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('braintreevisacheckout', () =>\n        new BraintreeVisaCheckoutCustomerStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            new CustomerStrategyActionCreator(registry),\n            remoteCheckoutActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('chasepay', () =>\n        new ChasePayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new ChasePayScriptLoader(scriptLoader),\n            requestSender,\n            formPoster\n        )\n    );\n\n    registry.register('squarev2', () =>\n        new SquareCustomerStrategy(\n            store,\n            new RemoteCheckoutActionCreator(remoteCheckoutRequestSender)\n        )\n    );\n\n    registry.register('masterpass', () =>\n        new MasterpassCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('googlepaybraintree', () =>\n        new GooglePayCustomerStrategy(\n            store,\n            remoteCheckoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            ),\n            formPoster\n        )\n    );\n\n    registry.register('googlepaystripe', () =>\n        new GooglePayCustomerStrategy(\n            store,\n            remoteCheckoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            ),\n            formPoster\n    )\n);\n\n    registry.register('default', () =>\n        new DefaultCustomerStrategy(\n            store,\n            new CustomerActionCreator(\n                new CustomerRequestSender(requestSender),\n                checkoutActionCreator\n            )\n        )\n    );\n\n    return registry;\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\n\nimport { isInternalAddressEqual, mapFromInternalAddress, AddressRequestBody } from '../../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { AmazonPayAddressBook, AmazonPayOrderReference, AmazonPayScriptLoader, AmazonPayWindow } from '../../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport ConsignmentActionCreator from '../../consignment-action-creator';\nimport { ShippingInitializeOptions, ShippingRequestOptions } from '../../shipping-request-options';\nimport { ShippingStrategyActionType } from '../../shipping-strategy-actions';\nimport ShippingStrategy from '../shipping-strategy';\n\nimport AmazonPayShippingInitializeOptions from './amazon-pay-shipping-initialize-options';\n\nexport default class AmazonPayShippingStrategy implements ShippingStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: ShippingInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const onReady = () => {\n                    this._createAddressBook(amazonOptions)\n                        .then(resolve)\n                        .catch(reject);\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n\n    private _createAddressBook(options: AmazonPayShippingInitializeOptions): Promise<AmazonPayAddressBook> {\n        return new Promise((resolve, reject) => {\n            const { container, onAddressSelect = () => {}, onError = () => {}, onReady = () => {} } = options;\n            const merchantId = this._paymentMethod && this._paymentMethod.config.merchantId;\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay AddressBook widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.AddressBook({\n                design: {\n                    designMode: 'responsive',\n                },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onAddressSelect: orderReference => {\n                    this._synchronizeShippingAddress()\n                        .then(() => onAddressSelect(orderReference))\n                        .catch(onError);\n                },\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onReady: orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                },\n            });\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeShippingAddress(): Promise<InternalCheckoutSelectors> {\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n        const amazon = this._store.getState().remoteCheckout.getCheckout('amazon');\n        const referenceId = amazon ? amazon.referenceId : undefined;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId })\n        )\n            .then(() => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializeShipping(methodId, { referenceId })\n            ))\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.shipping && amazon.shipping.address;\n                const address = state.shippingAddress.getShippingAddress();\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, address || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._consignmentActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            })\n            .then(() => this._store.dispatch(\n                createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId })\n            ))\n            .catch(error => this._store.dispatch(\n                createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId })\n            ));\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n}\n","import { AddressRequestBody } from '../../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport ConsignmentActionCreator from '../../consignment-action-creator';\nimport { ShippingRequestOptions } from '../../shipping-request-options';\n\nimport ShippingStrategy from '../shipping-strategy';\n\nexport default class DefaultShippingStrategy implements ShippingStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator\n    ) {}\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.updateAddress(address, options)\n        );\n    }\n\n    selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n\n    initialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport ConsignmentActionCreator from './consignment-action-creator';\nimport ConsignmentRequestSender from './consignment-request-sender';\nimport { ShippingStrategy } from './strategies';\nimport { AmazonPayShippingStrategy } from './strategies/amazon';\nimport { DefaultShippingStrategy } from './strategies/default';\n\nexport default function createShippingStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<ShippingStrategy> {\n    const registry = new Registry<ShippingStrategy>();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const consignmentRequestSender = new ConsignmentRequestSender(requestSender);\n    const consignmentActionCreator = new ConsignmentActionCreator(consignmentRequestSender, checkoutRequestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayShippingStrategy(\n            store,\n            consignmentActionCreator,\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n            new RemoteCheckoutActionCreator(new RemoteCheckoutRequestSender(requestSender)),\n            new AmazonPayScriptLoader(getScriptLoader())\n        )\n    );\n\n    registry.register('default', () =>\n        new DefaultShippingStrategy(\n            store,\n            consignmentActionCreator\n        )\n    );\n\n    return registry;\n}\n","module.exports = require(\"@bigcommerce/bigpay-client\");","module.exports = require(\"messageformat\");","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\nexport default class TimeoutError extends RequestError<{}> {\n    constructor(response?: Response) {\n        super(response, {\n            message: 'The request has timed out or aborted.',\n        });\n\n        this.type = 'timeout';\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { cachableAction, ActionOptions } from '../common/action';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ConfigRequestSender } from '.';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\n\nexport default class ConfigActionCreator {\n    constructor(\n        private _configRequestSender: ConfigRequestSender\n    ) {}\n\n    @cachableAction\n    loadConfig(options?: RequestOptions & ActionOptions): Observable<LoadConfigAction> {\n        return Observable.create((observer: Observer<LoadConfigAction>) => {\n            observer.next(createAction(ConfigActionType.LoadConfigRequested));\n\n            this._configRequestSender.loadConfig(options)\n                .then(response => {\n                    observer.next(createAction(ConfigActionType.LoadConfigSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConfigActionType.LoadConfigFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport Config from './config';\n\nexport default class ConfigRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadConfig({ timeout }: RequestOptions = {}): Promise<Response<Config>> {\n        const url = '/api/storefront/checkout-settings';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Response } from '@bigcommerce/request-sender';\nimport { Observable, Observer } from 'rxjs';\n\nimport { Checkout, InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { GuestCredentials } from '../customer';\n\nimport { BillingAddressRequestSender } from '.';\nimport { BillingAddressUpdateRequestBody } from './billing-address';\nimport { BillingAddressActionType, ContinueAsGuestAction, UpdateBillingAddressAction } from './billing-address-actions';\n\nexport default class BillingAddressActionCreator {\n    constructor(\n        private _requestSender: BillingAddressRequestSender\n    ) {}\n\n    continueAsGuest(\n        credentials: GuestCredentials,\n        options?: RequestOptions\n    ): ThunkAction<ContinueAsGuestAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ContinueAsGuestAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const customer = state.customer.getCustomer();\n\n            if (customer && !customer.isGuest) {\n                throw new StandardError('Cannot continue as guest: customer is logged in.');\n            }\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            let billingAddressRequestBody;\n\n            if (!billingAddress) {\n                billingAddressRequestBody = credentials;\n            } else {\n                const { country, ...existingBillingAddressRequestBody } = billingAddress;\n\n                billingAddressRequestBody = {\n                    ...existingBillingAddressRequestBody,\n                    ...credentials,\n                };\n            }\n\n            observer.next(createAction(BillingAddressActionType.ContinueAsGuestRequested));\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.ContinueAsGuestSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.ContinueAsGuestFailed, response));\n                });\n        });\n    }\n\n    updateAddress(\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): ThunkAction<UpdateBillingAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateBillingAddressAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(BillingAddressActionType.UpdateBillingAddressRequested));\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            // If email is not present in the address provided by the client, then\n            // fall back to the stored email as it could have been set separately\n            // using a convenience method. We can't rely on billingAddress having\n            // an ID to consider that there's a preexisting email, as billingAddress\n            // object from Order doesn't have an ID.\n            const billingAddressRequestBody = {\n                ...address,\n                email: typeof address.email === 'undefined' && billingAddress ? billingAddress.email : address.email,\n            };\n\n            if (billingAddress && billingAddress.id) {\n                billingAddressRequestBody.id = billingAddress.id;\n            }\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.UpdateBillingAddressSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.UpdateBillingAddressFailed, response));\n                });\n        });\n    }\n\n    private _createOrUpdateBillingAddress(\n        checkoutId: string,\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): Promise<Response<Checkout>> {\n        if (!address.id) {\n            return this._requestSender.createAddress(checkoutId, address, options);\n        }\n\n        return this._requestSender.updateAddress(checkoutId, address, options);\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../address';\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { BillingAddressUpdateRequestBody } from './billing-address';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class BillingAddressRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createAddress(checkoutId: string, address: Partial<AddressRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: address, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateAddress(checkoutId: string, address: Partial<BillingAddressUpdateRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = address;\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nexport default class Registry<T, K extends string = string> {\n    private _factories: { [key: string]: Factory<T> };\n    private _instances: { [key: string]: T };\n    private _options: RegistryOptions;\n\n    constructor(options?: RegistryOptions) {\n        this._factories = {};\n        this._instances = {};\n        this._options = { defaultToken: 'default', ...options };\n    }\n\n    get(token?: K, cacheToken?: string): T {\n        try {\n            return this._getInstance(\n                token || this._options.defaultToken,\n                cacheToken || token || this._options.defaultToken\n            );\n        } catch (error) {\n            return this._getInstance(\n                this._options.defaultToken,\n                cacheToken || this._options.defaultToken\n            );\n        }\n    }\n\n    register(token: K, factory: Factory<T>): void {\n        if (this._hasFactory(token)) {\n            throw new InvalidArgumentError(`'${token}' is already registered.`);\n        }\n\n        this._factories[token] = factory;\n    }\n\n    protected _hasFactory(token: string): boolean {\n        return !!this._factories[token];\n    }\n\n    private _hasInstance(token: string): boolean {\n        return !!this._instances[token];\n    }\n\n    private _getInstance(token: string, cacheToken: string): T {\n        if (!this._hasInstance(cacheToken)) {\n            const factory = this._factories[token];\n\n            if (!factory) {\n                throw new InvalidArgumentError(`'${token}' is not registered.`);\n            }\n\n            this._instances[cacheToken] = factory();\n        }\n\n        return this._instances[cacheToken];\n    }\n}\n\nexport type Factory<T> = () => T;\n\nexport interface RegistryOptions {\n    defaultToken: string;\n}\n","export default function toFormUrlEncoded(data: { [key: string]: object | string | undefined }): string {\n    return Object.keys(data)\n        .filter(key => data[key] !== undefined)\n        .map(key => {\n            const value = data[key];\n\n            if (typeof value === 'string') {\n                return `${key}=${encodeURIComponent(value)}`;\n            }\n\n            return `${key}=${encodeURIComponent(JSON.stringify(value) || '')}`;\n        })\n        .join('&');\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { Masterpass, MasterpassHostWindow } from './masterpass';\n\nexport default class MasterpassScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: MasterpassHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<Masterpass> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox.' : ''}masterpass.com/integration/merchant.js`)\n            .then(() => {\n                if (!this._window.masterpass) {\n                    throw new StandardError();\n                }\n\n                return this._window.masterpass;\n            });\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class RemoteCheckoutSynchronizationError extends StandardError {\n    constructor(\n        public error?: Error\n    ) {\n        super('Unable to synchronize your checkout details with a third party provider. Please try again later.');\n\n        this.type = 'remote_checkout_synchronization';\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeSDKCreator, GooglePayBraintreeSDK } from '../braintree';\n\nimport {\n    GooglePaymentData,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload\n} from './googlepay';\nimport { GooglePayBraintreeDataRequest, GooglePayBraintreePaymentDataRequestV1 } from './googlepay-braintree';\n\nexport default class GooglePayBraintreeInitializer implements GooglePayInitializer {\n    private _googlePaymentInstance!: GooglePayBraintreeSDK;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator\n    ) {}\n\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        if (!paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return this._braintreeSDKCreator.getGooglePaymentComponent()\n            .then(googleBraintreePaymentInstance => {\n                this._googlePaymentInstance = googleBraintreePaymentInstance;\n\n                return this._createGooglePayPayload(\n                    checkout,\n                    paymentMethod.initializationData,\n                    hasShippingAddress\n                );\n            });\n    }\n\n    teardown(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload {\n        const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token).androidPayCards[0];\n\n        return {\n            nonce: payload.nonce,\n            type: payload.type,\n            description: payload.description,\n            details: {\n                cardType: payload.details.cardType,\n                lastFour: payload.details.lastFour,\n                lastTwo: payload.details.lastTwo,\n            },\n            binData: payload.binData,\n        };\n    }\n\n    private _createGooglePayPayload(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        if (!initializationData.platformToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const googlePayBraintreePaymentDataRequest: GooglePayBraintreeDataRequest = {\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantName: initializationData.googleMerchantName,\n                merchantId: initializationData.googleMerchantId,\n            },\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.grandTotal, 2).toFixed(2),\n            },\n            cardRequirements: {\n                billingAddressRequired: true,\n                billingAddressFormat: 'FULL',\n            },\n            shippingAddressRequired: !hasShippingAddress,\n            emailRequired: true,\n            phoneNumberRequired: true,\n        };\n\n        return this._mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(\n            this._googlePaymentInstance.createPaymentDataRequest(googlePayBraintreePaymentDataRequest)\n        );\n    }\n\n    private _mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(googlePayBraintreeDataRequestV1: GooglePayBraintreePaymentDataRequestV1): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: googlePayBraintreeDataRequestV1.merchantInfo.authJwt,\n                merchantId: googlePayBraintreeDataRequestV1.merchantInfo.merchantId,\n                merchantName: googlePayBraintreeDataRequestV1.merchantInfo.merchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: googlePayBraintreeDataRequestV1.cardRequirements.allowedCardNetworks,\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: 'FULL',\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'braintree',\n                        'braintree:apiVersion': 'v1',\n                        'braintree:authorizationFingerprint': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:authorizationFingerprint'],\n                        'braintree:merchantId': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:merchantId'],\n                        'braintree:sdkVersion': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:sdkVersion'],\n                    },\n                },\n            }],\n            transactionInfo: googlePayBraintreeDataRequestV1.transactionInfo,\n            emailRequired: true,\n            shippingAddressRequired: googlePayBraintreeDataRequestV1.shippingAddressRequired,\n            shippingAddressParameters: {\n                phoneNumberRequired: googlePayBraintreeDataRequestV1.phoneNumberRequired,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { InvalidArgumentError } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\n\nimport {\n    GooglePaymentData,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload\n} from './googlepay';\n\nexport default class GooglePayStripeInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(this._mapGooglePayStripeDataRequestToGooglePayDataRequestV2(\n            checkout,\n            paymentMethod.initializationData,\n            hasShippingAddress\n        ));\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload {\n        try {\n            const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token);\n\n            return {\n                nonce: payload.id,\n                type: payload.type,\n                details: {\n                    cardType: payload.card.brand,\n                    lastFour: payload.card.last4,\n                },\n            };\n        } catch (err) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n    }\n\n    private _mapGooglePayStripeDataRequestToGooglePayDataRequestV2(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantId: initializationData.googleMerchantId,\n                merchantName: initializationData.googleMerchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: ['AMEX', 'DISCOVER', 'JCB', 'MASTERCARD', 'VISA'],\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: 'FULL',\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'stripe',\n                        'stripe:version': initializationData.stripeVersion,\n                        'stripe:publishableKey': initializationData.stripePublishableKey,\n                    },\n                },\n            }],\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.grandTotal, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalScriptLoader {\n    private _window: PaypalHostWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadPaypal(): Promise<PaypalSDK> {\n        return this._scriptLoader\n            .loadScript('//www.paypalobjects.com/api/checkout.min.js')\n            .then(() => {\n                if (!this._window.paypal) {\n                    throw new StandardError();\n                }\n\n                return this._window.paypal;\n            });\n    }\n}\n","module.exports = require(\"iframe-resizer/js/iframeResizer.contentWindow\");","import { EmbeddedCheckoutFrameLoadedEvent } from '../embedded-checkout-events';\n\nexport default function handleFrameLoadedEvent(message: EmbeddedCheckoutFrameLoadedEvent): void {\n    if (!message.payload || !message.payload.contentId) {\n        return;\n    }\n\n    const body = document.getElementById(message.payload.contentId);\n\n    if (!body || body.hasAttribute('data-iframe-height')) {\n        return;\n    }\n\n    body.setAttribute('data-iframe-height', '');\n}\n","export default interface CustomError extends Error {\n    message: string;\n    type: string;\n    subtype?: string;\n}\n\nexport function isCustomError(error: any): error is CustomError {\n    return (\n        typeof error.message === 'string' &&\n        typeof error.type === 'string' &&\n        (typeof error.subtype === 'string' || !error.subtype) &&\n        error instanceof Error\n    );\n}\n","import { isCustomError, CustomError } from '../../common/error/errors';\nimport EmbeddedCheckoutError from '../embedded-checkout-error';\nimport {\n    EmbeddedCheckoutCompleteEvent,\n    EmbeddedCheckoutErrorEvent,\n    EmbeddedCheckoutEvent,\n    EmbeddedCheckoutEventMap,\n    EmbeddedCheckoutEventType,\n    EmbeddedCheckoutFrameErrorEvent,\n    EmbeddedCheckoutFrameLoadedEvent,\n    EmbeddedCheckoutLoadedEvent,\n    EmbeddedCheckoutSignedOutEvent,\n} from '../embedded-checkout-events';\nimport EmbeddedCheckoutStyles from '../embedded-checkout-styles';\nimport IframeEventListener from '../iframe-event-listener';\nimport IframeEventPoster from '../iframe-event-poster';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\nimport { EmbeddedContentEventMap, EmbeddedContentEventType } from './embedded-content-events';\nimport EmbeddedContentOptions from './embedded-content-options';\n\nexport default class IframeEmbeddedCheckoutMessenger implements EmbeddedCheckoutMessenger {\n    /**\n     * @internal\n     */\n    constructor(\n        private _messageListener: IframeEventListener<EmbeddedContentEventMap>,\n        private _messagePoster: IframeEventPoster<EmbeddedCheckoutEvent>,\n        private _untargetedMessagePoster: IframeEventPoster<EmbeddedCheckoutEvent>,\n        private _messageHandlers: EventCallbacks<EmbeddedCheckoutEventMap> = {}\n    ) {\n        this._messageListener.listen();\n    }\n\n    postComplete(): void {\n        const message: EmbeddedCheckoutCompleteEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutComplete,\n        };\n\n        this._postMessage(message);\n    }\n\n    postError(payload: Error | CustomError): void {\n        const message: EmbeddedCheckoutErrorEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutError,\n            payload: this._transformError(payload),\n        };\n\n        this._postMessage(message);\n    }\n\n    postFrameError(payload: Error | CustomError): void {\n        const message: EmbeddedCheckoutFrameErrorEvent = {\n            type: EmbeddedCheckoutEventType.FrameError,\n            payload: this._transformError(payload),\n        };\n\n        // Ideally, all messages should be targeted at a specific origin.\n        // However, for `FrameError` message, we have to post it in an\n        // untargeted fashion. This is because the error could be caused by a\n        // missing cart. That makes it not possible to determine of site origin\n        // of the parent window. Nevertheless, we still want to notify the\n        // parent window about the error.\n        this._postMessage(message, { untargeted: true });\n    }\n\n    postFrameLoaded(payload?: EmbeddedContentOptions): void {\n        const message: EmbeddedCheckoutFrameLoadedEvent = {\n            type: EmbeddedCheckoutEventType.FrameLoaded,\n            payload,\n        };\n\n        this._postMessage(message);\n    }\n\n    postLoaded(): void {\n        const message: EmbeddedCheckoutLoadedEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutLoaded,\n        };\n\n        this._postMessage(message);\n    }\n\n    postSignedOut(): void {\n        const message: EmbeddedCheckoutSignedOutEvent = {\n            type: EmbeddedCheckoutEventType.SignedOut,\n        };\n\n        this._postMessage(message);\n    }\n\n    receiveStyles(handler: (styles: EmbeddedCheckoutStyles) => void): void {\n        this._messageListener.addListener(EmbeddedContentEventType.StyleConfigured, ({ payload }) => {\n            handler(payload);\n        });\n    }\n\n    private _postMessage(message: EmbeddedCheckoutEvent, options?: { untargeted?: boolean }): void {\n        this._notifyMessageHandlers(message);\n\n        if (options && options.untargeted) {\n            return this._untargetedMessagePoster.post(message);\n        }\n\n        this._messagePoster.post(message);\n    }\n\n    private _notifyMessageHandlers(message: EmbeddedCheckoutEvent): void {\n        Object.keys(this._messageHandlers)\n            .forEach(key => {\n                const handler = this._messageHandlers[key as keyof EmbeddedCheckoutEventMap];\n\n                if (handler) {\n                    handler.call(null, message);\n                }\n            });\n    }\n\n    private _transformError(error: Error | CustomError): EmbeddedCheckoutError {\n        return {\n            message: error.message,\n            type: isCustomError(error) ? error.type : undefined,\n            subtype: isCustomError(error) ? error.subtype : undefined,\n        };\n    }\n}\n\nexport type EventCallbacks<TEventMap> = {\n    [key in keyof TEventMap]?: (event: TEventMap[key]) => void;\n};\n","import EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\n\nexport default class NoopEmbeddedCheckoutMessenger implements EmbeddedCheckoutMessenger {\n    postComplete(): void {}\n\n    postError(): void {}\n\n    postFrameError(): void {}\n\n    postFrameLoaded(): void {}\n\n    postLoaded(): void {}\n\n    postSignedOut(): void {}\n\n    receiveStyles(): void {}\n}\n","import { EmbeddedCheckoutEvent, EmbeddedCheckoutEventType } from '../embedded-checkout-events';\nimport IframeEventListener from '../iframe-event-listener';\nimport IframeEventPoster from '../iframe-event-poster';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\nimport EmbeddedCheckoutMessengerOptions from './embedded-checkout-messenger-options';\nimport { EmbeddedContentEventMap } from './embedded-content-events';\nimport handleFrameLoadedEvent from './handle-frame-loaded-event';\nimport IframeEmbeddedCheckoutMessenger from './iframe-embedded-checkout-messenger';\nimport NoopEmbeddedCheckoutMessenger from './noop-embedded-checkout-messenger';\n\n/**\n * Create an instance of `EmbeddedCheckoutMessenger`.\n *\n * @remarks\n * The object is responsible for posting messages to the parent window from the\n * iframe when certain events have occurred. For example, when the checkout\n * form is first loaded, you should notify the parent window about it.\n *\n * The iframe can only be embedded in domains that are allowed by the store.\n *\n * ```ts\n * const messenger = createEmbeddedCheckoutMessenger({\n *     parentOrigin: 'https://some/website',\n * });\n *\n * messenger.postFrameLoaded();\n * ```\n *\n * @alpha\n * Please note that this feature is currently in an early stage of development.\n * Therefore the API is unstable and not ready for public consumption.\n *\n * @param options - Options for creating `EmbeddedCheckoutMessenger`\n * @returns - An instance of `EmbeddedCheckoutMessenger`\n */\nexport default function createEmbeddedCheckoutMessenger(options: EmbeddedCheckoutMessengerOptions): EmbeddedCheckoutMessenger {\n    const parentWindow = options.parentWindow || window.parent;\n\n    // Return a No-op messenger if it is not called inside an iframe\n    if (window === parentWindow) {\n        return new NoopEmbeddedCheckoutMessenger();\n    }\n\n    return new IframeEmbeddedCheckoutMessenger(\n        new IframeEventListener<EmbeddedContentEventMap>(options.parentOrigin),\n        new IframeEventPoster<EmbeddedCheckoutEvent>(options.parentOrigin, parentWindow),\n        new IframeEventPoster<EmbeddedCheckoutEvent>('*', parentWindow),\n        { [EmbeddedCheckoutEventType.FrameLoaded]: handleFrameLoadedEvent }\n    );\n}\n","import { isObject, union } from 'lodash';\nimport * as MessageFormat from 'messageformat';\n\nimport Logger from '../common/log/logger';\n\nimport LanguageConfig, { Locales, Translations } from './language-config';\n\nconst DEFAULT_LOCALE = 'en';\nconst KEY_PREFIX = 'optimized_checkout';\n\n/**\n * Responsible for getting language strings.\n *\n * This object can be used to retrieve language strings that are most\n * appropriate for a given locale.\n *\n * The language strings provided to the object should follow [ICU\n * MessageFormat](http://userguide.icu-project.org/formatparse/messages) syntax.\n */\nexport default class LanguageService {\n    private _locale: string;\n    private _locales: Locales;\n    private _translations: Translations;\n    private _formatters: { [key: string]: any };\n\n    /**\n     * @internal\n     */\n    constructor(\n        config: Partial<LanguageConfig>,\n        private _logger: Logger\n    ) {\n        const { locale, locales, translations } = this._transformConfig(config);\n\n        this._locale = locale;\n        this._locales = locales;\n        this._translations = translations;\n        this._formatters = {};\n    }\n\n    /**\n     * Remaps a set of language strings with a different set of keys.\n     *\n     * ```js\n     * service.mapKeys({\n     *     'new_key': 'existing_key',\n     * });\n     *\n     * console.log(service.translate('new_key'));\n     * ```\n     *\n     * @param maps - The set of language strings.\n     */\n    mapKeys(maps: { [key: string]: string }): void {\n        Object.keys(maps).forEach(key => {\n            const translationKey = `${KEY_PREFIX}.${maps[key]}`;\n\n            this._translations[`${KEY_PREFIX}.${key}`] = this._translations[translationKey];\n        });\n    }\n\n    /**\n     * Gets the preferred locale of the current customer.\n     *\n     * @returns The preferred locale code.\n     */\n    getLocale(): string {\n        return this._hasTranslations() ? this._locale : DEFAULT_LOCALE;\n    }\n\n    /**\n     * Gets a language string by a key.\n     *\n     * ```js\n     * service.translate('language_key');\n     * ```\n     *\n     * If the language string contains a placeholder, you can replace it by\n     * providing a second argument.\n     *\n     * ```js\n     * service.translate('language_key', { placeholder: 'Hello' });\n     * ```\n     *\n     * @param key - The language key.\n     * @param data - Data for replacing placeholders in the language string.\n     * @returns The translated language string.\n     */\n    translate(key: string, data: TranslationData = {}): string {\n        const prefixedKey = `${KEY_PREFIX}.${key}`;\n\n        if (typeof this._translations[prefixedKey] !== 'string') {\n            this._logger.warn(`Translation key \"${prefixedKey}\" is missing`);\n\n            return prefixedKey;\n        }\n\n        if (!this._formatters[prefixedKey]) {\n            const messageFormat = new MessageFormat(this._locales[prefixedKey]);\n\n            this._formatters[prefixedKey] = messageFormat.compile(this._translations[prefixedKey] || '');\n        }\n\n        return this._formatters[prefixedKey](this._transformData(data));\n    }\n\n    private _transformConfig(config: Partial<LanguageConfig> = {}): LanguageConfig {\n        const output: LanguageConfig = {\n            defaultTranslations: {},\n            translations: {},\n            locales: {},\n            locale: config.locale || DEFAULT_LOCALE,\n        };\n\n        const locales = config.locales || {};\n        const translations = this._flattenObject(config.translations || {});\n        const defaultTranslations = this._flattenObject(config.defaultTranslations || {});\n        const translationKeys = union(Object.keys(defaultTranslations), Object.keys(translations));\n\n        translationKeys.forEach(key => {\n            if (translations && translations[key]) {\n                output.translations[key] = translations[key];\n                output.locales[key] = locales[key] || output.locale;\n            } else {\n                output.translations[key] = defaultTranslations[key];\n                output.locales[key] = DEFAULT_LOCALE;\n            }\n        });\n\n        return output;\n    }\n\n    private _flattenObject(object: Translations, result: Translations = {}, parentKey: string = ''): Translations {\n        try {\n            Object.keys(object).forEach(key => {\n                const value = object[key];\n                const resultKey = parentKey ? `${parentKey}.${key}` : key;\n\n                if (isObject(value)) {\n                    return this._flattenObject(value as Translations, result, resultKey);\n                }\n\n                result[resultKey] = value;\n            });\n        } catch (err) {\n            this._logger.warn(`Unable to parse object: ${err}`);\n        }\n\n        return result;\n    }\n\n    private _transformData(data: TranslationData): TranslationData {\n        return Object.keys(data).reduce((result, key) => {\n            const value = data[key];\n\n            result[key] = value === null || value === undefined ? '' : value;\n\n            return result;\n        }, {} as TranslationData);\n    }\n\n    private _hasTranslations(): boolean {\n        return Object.keys(this._locales).map(key => this._locales[key])\n            .filter(code => code.split('-')[0] === this._locale.split('-')[0])\n            .length > 0;\n    }\n}\n\nexport interface TranslationData {\n    [key: string]: string | number;\n}\n","import { getDefaultLogger } from '../common/log';\n\nimport LanguageConfig from './language-config';\nimport LanguageService from './language-service';\n\n/**\n * Creates an instance of `LanguageService`.\n *\n * @remarks\n * ```js\n * const language = {{{langJson 'optimized_checkout'}}}; // `langJson` is a Handlebars helper provided by BigCommerce's Stencil template engine.\n * const service = createLanguageService(language);\n *\n * console.log(service.translate('address.city_label'));\n * ```\n *\n * @param config - A configuration object.\n * @returns An instance of `LanguageService`.\n */\nexport default function createLanguageService(config: Partial<LanguageConfig> = {}): LanguageService {\n    return new LanguageService(\n        config,\n        getDefaultLogger()\n    );\n}\n","import { InvalidArgumentError } from '../common/error/errors';\n\nimport { CurrencyConfig } from './currency';\n\nexport default class CurrencyFormatter {\n    private _decimalPlaces: number;\n    private _symbolLocation: string;\n    private _symbol: string;\n    private _thousandsSeparator: string;\n    private _decimalSeparator: string;\n\n    constructor(\n        currencySettings: CurrencyConfig\n    ) {\n        if (!currencySettings) {\n            throw new Error('Currency settings missing');\n        }\n\n        const {\n            decimalPlaces,\n            symbolLocation,\n            symbol,\n            thousandsSeparator,\n            decimalSeparator,\n        } = currencySettings;\n\n        if (\n            typeof symbolLocation !== 'string' ||\n            typeof symbol !== 'string' ||\n            typeof thousandsSeparator !== 'string' ||\n            typeof decimalSeparator !== 'string' ||\n            typeof decimalPlaces !== 'string'\n        ) {\n            throw new InvalidArgumentError('Invalid currency settings provided');\n        }\n\n        this._decimalPlaces = parseInt(decimalPlaces, 10);\n        this._symbolLocation = symbolLocation;\n        this._symbol = symbol;\n        this._thousandsSeparator = thousandsSeparator;\n        this._decimalSeparator = decimalSeparator;\n    }\n\n    format(amount?: number): string {\n        if (typeof amount !== 'number') {\n            throw new InvalidArgumentError('Invalid amount provided');\n        }\n\n        const formattedNumber = this._formatNumber(amount);\n\n        const formattedCurrency = this._formatCurrency(formattedNumber);\n\n        return amount < 0 ?\n            `-${formattedCurrency}` :\n            formattedCurrency;\n    }\n\n    private _formatNumber(amount: number): string {\n        const positiveAmount = Math.abs(amount);\n        const [ integerAmount, decimalAmount = '' ] = (this._toFixed(positiveAmount, this._decimalPlaces)).split('.');\n        const parsedIntegerAmount = integerAmount.replace(/\\B(?=(\\d{3})+(?!\\d))/g, this._thousandsSeparator);\n\n        if (this._decimalPlaces < 1) {\n            return parsedIntegerAmount;\n        }\n\n        return [\n            parsedIntegerAmount,\n            decimalAmount,\n        ].join(this._decimalSeparator);\n    }\n\n    private _formatCurrency(formattedNumber: string): string {\n        return (this._symbolLocation.toLowerCase() === 'left') ?\n            `${this._symbol}${formattedNumber}` :\n            `${formattedNumber}${this._symbol}`;\n    }\n\n    private _toFixed(value: number, precision: number): string {\n        return (+(Math.round(+(value + 'e' + precision)) + 'e' + -precision)).toFixed(precision);\n    }\n}\n","import { StoreConfig } from '../config';\n\nimport CurrencyFormatter from './currency-formatter';\n\n/**\n * Responsible for formatting and converting currencies.\n */\nexport default class CurrencyService {\n    private _customerFormatter: CurrencyFormatter;\n    private _storeFormatter: CurrencyFormatter;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _storeConfig: StoreConfig\n    ) {\n        this._customerFormatter = new CurrencyFormatter(this._storeConfig.shopperCurrency);\n        this._storeFormatter = new CurrencyFormatter(this._storeConfig.currency);\n    }\n\n    toCustomerCurrency(amount: number): string {\n        const exchangeRate = this._storeConfig.shopperCurrency.exchangeRate;\n\n        return this._customerFormatter.format(amount * exchangeRate);\n    }\n\n    toStoreCurrency(amount: number): string {\n        return this._storeFormatter.format(amount);\n    }\n}\n","import { StoreConfig } from '../config';\n\nimport CurrencyService from './currency-service';\n\n/**\n * Creates an instance of `CurrencyService`.\n *\n * @remarks\n * ```js\n * const { data } = checkoutService.getState();\n * const config = data.getConfig();\n * const checkout = data.getCheckout();\n * const currencyService = createCurrencyService(config);\n *\n * currencyService.toStoreCurrency(checkout.grandTotal);\n * currencyService.toCustomerCurrency(checkout.grandTotal);\n * ```\n *\n * @alpha\n * Please note that `CurrencyService` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param config - The config object containing the currency configuration\n * @returns an instance of `CurrencyService`.\n */\nexport default function createCurrencyService(\n    config: StoreConfig\n): CurrencyService {\n    return new CurrencyService(config);\n}\n","export { createTimeout } from '@bigcommerce/request-sender';\n\nexport { createCheckoutService } from './checkout';\nexport { createCheckoutButtonInitializer } from './checkout-buttons';\nexport { embedCheckout } from './embedded-checkout';\nexport { createEmbeddedCheckoutMessenger } from './embedded-checkout/iframe-content';\nexport { createLanguageService } from './locale';\nexport { createCurrencyService } from './currency';\n","import { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeModuleCreator, GooglePayBraintreeSDK } from '../braintree';\n\nexport type EnvironmentType = 'PRODUCTION' | 'TEST';\ntype TokenizeType = 'AndroidPayCard' | 'CreditCard';\n\nexport interface GooglePayInitializer {\n    initialize(checkout: Checkout, paymentMethod: PaymentMethod, hasShippingAddress: boolean, publishableKey?: string): Promise<GooglePayPaymentDataRequestV2>;\n    teardown(): Promise<void>;\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload;\n}\n\nexport interface GooglePayCreator extends BraintreeModuleCreator<GooglePayBraintreeSDK> {}\n\nexport interface GooglePayPaymentOptions {\n    environment: EnvironmentType;\n}\n\nexport interface GooglePayIsReadyToPayResponse {\n    result: boolean;\n    paymentMethodPresend?: boolean;\n}\n\nexport interface GooglePaySDK {\n    payments: {\n        api: {\n            PaymentsClient: {\n                new(options: GooglePayPaymentOptions): GooglePayClient;\n            },\n        },\n    };\n}\n\nexport interface GooglePayClient {\n    isReadyToPay(options: object): Promise<GooglePayIsReadyToPayResponse>;\n    loadPaymentData(paymentDataRequest: GooglePayPaymentDataRequestV2): Promise<GooglePaymentData>;\n    createButton(options: { [key: string]: string | object }): HTMLElement;\n}\n\nexport interface GooglePayHostWindow extends Window {\n    google?: GooglePaySDK;\n}\n\nexport interface TokenizePayload {\n    nonce: string;\n    details: {\n        cardType: string;\n        lastFour: string;\n        lastTwo?: string;\n    };\n    description?: string;\n    type: TokenizeType;\n    binData?: {\n        commercial: string;\n        countryOfIssuance: string;\n        debit: string;\n        durbinRegulated: string;\n        healthcare: string;\n        issuingBank: string;\n        payroll: string;\n        prepaid: string;\n        productId: string;\n    };\n}\n\nexport interface GooglePaymentData {\n    apiVersion: number;\n    apiVersionMinor: number;\n    paymentMethodData: {\n        description: string;\n        info: {\n            cardDetails: string;\n            cardNetwork: string;\n            billingAddress: GooglePayAddress;\n        };\n        tokenizationData: {\n            token: string;\n            type: string;\n        }\n        type: string;\n    };\n    shippingAddress: GooglePayAddress;\n    email: string;\n}\n\nexport interface GooglePayAddress {\n    address1: string;\n    address2: string;\n    address3: string;\n    administrativeArea: string;\n    companyName: string;\n    countryCode: string;\n    locality: string;\n    name: string;\n    postalCode: string;\n    sortingCode: string;\n    phoneNumber: string;\n}\n\nexport interface GooglePaymentsError {\n    statusCode: string;\n    statusMessage?: string;\n}\n\nexport interface PaymentMethodData {\n    methodId: string;\n    paymentData: {\n        method: string,\n        nonce: string,\n        cardInformation: {\n            type: string,\n            number: string,\n        },\n    };\n}\n\nexport enum ButtonType {\n    Long = 'long',\n    Short = 'short',\n}\nexport enum ButtonColor {\n    Default = 'default',\n    Black = 'black',\n    White = 'white',\n}\n\nexport interface GooglePayPaymentDataRequestV2 {\n    apiVersion: number;\n    apiVersionMinor: number;\n    merchantInfo: {\n        authJwt?: string;\n        merchantId?: string;\n        merchantName?: string;\n    };\n    allowedPaymentMethods: [{\n        type: string;\n        parameters: {\n            allowedAuthMethods: string[];\n            allowedCardNetworks: string[];\n            allowPrepaidCards?: boolean;\n            billingAddressRequired?: boolean;\n            billingAddressParameters?: {\n                format?: string;\n                phoneNumberRequired?: boolean;\n            };\n        },\n        tokenizationSpecification?: {\n            type: string;\n            parameters: {\n                gateway: string;\n                gatewayMerchantId?: string;\n                'braintree:apiVersion'?: string;\n                'braintree:clientKey'?: string;\n                'braintree:merchantId'?: string;\n                'braintree:sdkVersion'?: string;\n                'braintree:authorizationFingerprint'?: string;\n                'stripe:version'?: string;\n                'stripe:publishableKey'?: string;\n            };\n        };\n    }];\n    transactionInfo: {\n        currencyCode: string;\n        totalPriceStatus: string;\n        totalPrice?: string;\n        checkoutOption?: string;\n    };\n    emailRequired?: boolean;\n    shippingAddressRequired?: boolean;\n    shippingAddressParameters?: {\n        allowedCountryCodes?: string[];\n        phoneNumberRequired?: boolean;\n    };\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../../../address';\nimport { BillingAddressActionCreator, BillingAddressUpdateRequestBody } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { toFormUrlEncoded } from '../../../common/http-request/';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport { ConsignmentActionCreator } from '../../../shipping';\nimport PaymentMethodInvalidError from '../../errors/payment-method-invalid-error';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\n\nimport {\n    ButtonColor,\n    ButtonType,\n    EnvironmentType,\n    GooglePaymentData,\n    GooglePayAddress,\n    GooglePayClient,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    GooglePaySDK,\n    TokenizePayload\n} from './googlepay';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default class GooglePayPaymentProcessor {\n    private _googlePayClient?: GooglePayClient;\n    private _methodId?: string;\n    private _paymentDataRequest?: GooglePayPaymentDataRequestV2;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _googlePayScriptLoader: GooglePayScriptLoader,\n        private _googlePayInitializer: GooglePayInitializer,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _consigmentActionCreator: ConsignmentActionCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(methodId: string): Promise<void> {\n        this._methodId = methodId;\n\n        return this._configureWallet();\n    }\n\n    deinitialize(): Promise<void> {\n        return this._googlePayInitializer.teardown();\n    }\n\n    createButton(\n        onClick: (event: Event) => Promise<void>,\n        buttonType: ButtonType = ButtonType.Short,\n        buttonColor: ButtonColor = ButtonColor.Default\n    ): HTMLElement {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.createButton({\n            buttonColor,\n            buttonType,\n            onClick,\n        });\n    }\n\n    displayWallet(): Promise<GooglePaymentData> {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.loadPaymentData(this._getPaymentDataRequest());\n    }\n\n    handleSuccess(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        return this._postForm(this._googlePayInitializer.parseResponse(paymentData))\n            .then(() => this._updateBillingAddress(paymentData));\n    }\n\n    updateShippingAddress(shippingAddress: GooglePayAddress): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consigmentActionCreator.updateAddress(this._mapGooglePayAddressToShippingAddress(shippingAddress))\n        );\n    }\n\n    private _configureWallet(): Promise<void> {\n        const methodId = this._getMethodId();\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                const checkout = state.checkout.getCheckout();\n                const hasShippingAddress = !!state.shippingAddress.getShippingAddress();\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const { testMode } = paymentMethod.config;\n\n                return Promise.all([\n                    this._googlePayScriptLoader.load(),\n                    this._googlePayInitializer.initialize(checkout, paymentMethod, hasShippingAddress),\n                ]).then(([googlePay, paymentDataRequest]) => {\n                    this._googlePayClient = this._getGooglePayClient(googlePay, testMode);\n                    this._paymentDataRequest = paymentDataRequest;\n\n                    return this._googlePayClient.isReadyToPay({\n                        allowedPaymentMethods: [\n                            {\n                                type: paymentDataRequest.allowedPaymentMethods[0].type,\n                                parameters: {\n                                    allowedAuthMethods: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedAuthMethods,\n                                    allowedCardNetworks: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedCardNetworks,\n                                },\n                            },\n                        ],\n                        apiVersion: paymentDataRequest.apiVersion,\n                        apiVersionMinor: paymentDataRequest.apiVersionMinor,\n                    }).then(response => {\n                        if (response.result) {\n                            return;\n                        }\n\n                        throw new PaymentMethodInvalidError();\n                    });\n                });\n            });\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string, lastFour: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastFour,\n        };\n    }\n\n    private _getPaymentDataRequest(): GooglePayPaymentDataRequestV2 {\n        if (!this._paymentDataRequest) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._paymentDataRequest;\n    }\n\n    private _getGooglePayClient(google: GooglePaySDK, testMode?: boolean): GooglePayClient {\n        if (testMode === undefined) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const environment: EnvironmentType = testMode ? 'TEST' : 'PRODUCTION';\n\n        return new google.payments.api.PaymentsClient({ environment });\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    private _mapGooglePayAddressToBillingAddress(paymentData: GooglePaymentData, id: string): BillingAddressUpdateRequestBody {\n        return {\n            id,\n            firstName: paymentData.paymentMethodData.info.billingAddress.name.split(' ').slice(0, -1).join(' '),\n            lastName: paymentData.paymentMethodData.info.billingAddress.name.split(' ').slice(-1).join(' '),\n            company: paymentData.paymentMethodData.info.billingAddress.companyName,\n            address1: paymentData.paymentMethodData.info.billingAddress.address1,\n            address2: paymentData.paymentMethodData.info.billingAddress.address2 + paymentData.paymentMethodData.info.billingAddress.address3,\n            city: paymentData.paymentMethodData.info.billingAddress.locality,\n            stateOrProvince: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            stateOrProvinceCode: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            postalCode: paymentData.paymentMethodData.info.billingAddress.postalCode,\n            countryCode: paymentData.paymentMethodData.info.billingAddress.countryCode,\n            phone: paymentData.paymentMethodData.info.billingAddress.phoneNumber,\n            customFields: [],\n            email: paymentData.email,\n        };\n    }\n\n    private _mapGooglePayAddressToShippingAddress(address: GooglePayAddress): AddressRequestBody {\n        return {\n            firstName: address.name.split(' ').slice(0, -1).join(' '),\n            lastName: address.name.split(' ').slice(-1).join(' '),\n            company: address.companyName,\n            address1: address.address1,\n            address2: address.address2 + address.address3,\n            city: address.locality,\n            stateOrProvince: address.administrativeArea,\n            stateOrProvinceCode: address.administrativeArea,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phoneNumber,\n            customFields: [],\n        };\n    }\n\n    private _postForm(postPaymentData: TokenizePayload): Promise<Response<void>> {\n        const cardInformation = postPaymentData.details;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: toFormUrlEncoded({\n                payment_type: postPaymentData.type,\n                nonce: postPaymentData.nonce,\n                provider: this._getMethodId(),\n                action: 'set_external_checkout',\n                card_information: this._getCardInformation(cardInformation),\n            }),\n        });\n    }\n\n    private _updateBillingAddress(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        const remoteBillingAddress = this._store.getState().billingAddress.getBillingAddress();\n\n        if (!remoteBillingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const googlePayAddressMapped = this._mapGooglePayAddressToBillingAddress(paymentData, remoteBillingAddress.id);\n\n        return this._store.dispatch(\n            this._billingAddressActionCreator.updateAddress(googlePayAddressMapped)\n        );\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { GooglePayHostWindow, GooglePaySDK } from './googlepay';\n\nexport default class GooglePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GooglePayHostWindow = window\n    ) {}\n\n    load(): Promise<GooglePaySDK> {\n        return this._scriptLoader\n            .loadScript('https://pay.google.com/gp/p/js/pay.js')\n            .then(() => {\n                if (!this._window.google) {\n                    throw new StandardError();\n                }\n\n                return this._window.google;\n            });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../../../billing';\nimport { CheckoutRequestSender, CheckoutStore } from '../../../checkout';\nimport { ConsignmentActionCreator, ConsignmentRequestSender } from '../../../shipping';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport PaymentMethodRequestSender from '../../payment-method-request-sender';\n\nimport { GooglePayInitializer } from './googlepay';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default function createGooglePayPaymentProcessor(store: CheckoutStore, initializer: GooglePayInitializer): GooglePayPaymentProcessor {\n    const requestSender = createRequestSender();\n    const scriptLoader = getScriptLoader();\n\n    return new GooglePayPaymentProcessor(\n        store,\n        new PaymentMethodActionCreator(\n            new PaymentMethodRequestSender(requestSender)\n        ),\n        new GooglePayScriptLoader(scriptLoader),\n        initializer,\n        new BillingAddressActionCreator(\n            new BillingAddressRequestSender(requestSender)\n        ),\n        new ConsignmentActionCreator(\n            new ConsignmentRequestSender(requestSender),\n            new CheckoutRequestSender(requestSender)\n        ),\n        requestSender\n    );\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class RemoteCheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    initializeBilling(methodName: string, params?: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/billing`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializeShipping(methodName: string, params?: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/shipping`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializePayment(methodName: string, params?: InitializePaymentOptions, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/payment`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    loadSettings(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/settings`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    signOut(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/signout`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    generateToken({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout-token';\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    trackAuthorizationEvent({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout/events/shopper-checkout-service-provider-authorization-requested';\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n\nexport interface InitializePaymentOptions {\n    authorizationToken?: string;\n    customerMessage?: string;\n    referenceId?: string;\n    useStoreCredit?: boolean;\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutRequestSender, { InitializePaymentOptions } from './remote-checkout-request-sender';\nimport { RemoteCheckoutStateData } from './remote-checkout-state';\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action<T>\n */\nexport default class RemoteCheckoutActionCreator {\n    constructor(\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender\n    ) {}\n\n    initializeBilling(methodId: string, params?: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteBillingRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeBilling(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteBillingSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemoteBillingFailed, response, { methodId }));\n                });\n        });\n    }\n\n    initializeShipping(methodId: string, params?: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteShippingRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeShipping(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteShippingSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemoteShippingFailed, response, { methodId }));\n                });\n        });\n    }\n\n    initializePayment(methodId: string, params?: InitializePaymentOptions, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemotePaymentRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializePayment(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemotePaymentSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemotePaymentFailed, response, { methodId }));\n                });\n        });\n    }\n\n    loadSettings(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.LoadRemoteSettingsRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.loadSettings(methodId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.LoadRemoteSettingsSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.LoadRemoteSettingsFailed, response, { methodId }));\n                });\n        });\n    }\n\n    signOut(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.SignOutRemoteCustomerRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.signOut(methodId, options)\n                .then(() => {\n                    observer.next(createAction(RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.SignOutRemoteCustomerFailed, response, { methodId }));\n                });\n        });\n    }\n\n    updateCheckout<K extends keyof RemoteCheckoutStateData>(methodId: K, data: Partial<RemoteCheckoutStateData[K]>): Action {\n        return createAction(RemoteCheckoutActionType.UpdateRemoteCheckout, data, { methodId });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayScriptLoader {\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadWidget(method: PaymentMethod, onPaymentReady?: () => void): Promise<Event> {\n        const {\n            config: { merchantId, testMode },\n            initializationData: { region = 'us' } = {},\n        } = method;\n\n        const url = 'https://' +\n            (region.toLowerCase() !== 'us' ? 'static-eu.' : 'static-na.') +\n            'payments-amazon.com/OffAmazonPayments/' +\n            `${region.toLowerCase()}/` +\n            (testMode ? 'sandbox/' : '') +\n            (region.toLowerCase() !== 'us' ? 'lpa/' : '') +\n            `js/Widgets.js?sellerId=${merchantId}`;\n\n        this._configureWidget(method, onPaymentReady);\n\n        return this._scriptLoader.loadScript(url);\n    }\n\n    private _configureWidget(method: PaymentMethod, onPaymentReady?: () => void): void {\n        const onLoginReady = () => {\n            if (!this._window.amazon) {\n                return;\n            }\n\n            this._window.amazon.Login.setClientId(method.initializationData.clientId);\n            this._window.amazon.Login.setUseCookie(true);\n        };\n\n        if (this._window.amazon && this._window.amazon.Login) {\n            onLoginReady();\n        } else {\n            this._window.onAmazonLoginReady = onLoginReady;\n        }\n\n        if (this._window.OffAmazonPayments && onPaymentReady) {\n            onPaymentReady();\n        } else {\n            this._window.onAmazonPaymentsReady = onPaymentReady;\n        }\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { VisaCheckoutHostWindow, VisaCheckoutSDK } from './visacheckout';\n\nexport default class VisaCheckoutScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: VisaCheckoutHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<VisaCheckoutSDK> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox-' : ''}assets.secure.checkout.visa.com/checkout-widget/resources/js/integration/v1/sdk.js`)\n            .then(() => {\n                if (!this._window.V) {\n                    throw new StandardError();\n                }\n\n                return this._window.V;\n            });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { ChasePayHostWindow, JPMC } from '../chasepay/chasepay';\n\nexport default class ChasePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: ChasePayHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<JPMC> {\n        return this._scriptLoader\n            .loadScript(`//pwc${testMode ? 'psb' : ''}.chase.com/pwc/checkout/js/v20170521/list.action?type=raw&applId=PWC&channelId=CWC&version=1`)\n            .then(() => {\n                if (!this._window.JPMC) {\n                    throw new StandardError();\n                }\n\n                return this._window.JPMC;\n            });\n    }\n}\n","import Logger from './logger';\n\nexport default class ConsoleLogger implements Logger {\n    constructor(\n        private _console?: Console\n    ) {}\n\n    log(...messages: any[]): void {\n        this._logToConsole('log', ...messages);\n    }\n\n    info(...messages: any[]): void {\n        this._logToConsole('info', ...messages);\n    }\n\n    warn(...messages: any[]): void {\n        this._logToConsole('warn', ...messages);\n    }\n\n    error(...messages: any[]): void {\n        this._logToConsole('error', ...messages);\n    }\n\n    debug(...messages: any[]): void {\n        this._logToConsole('debug', ...messages);\n    }\n\n    private _logToConsole(type: keyof Console, ...messages: any[]): void {\n        if (!this._console || !this._console[type]) {\n            return;\n        }\n\n        this._console[type].call(this._console, ...messages);\n    }\n}\n","import Logger from './logger';\n\nexport default class NoopLogger implements Logger {\n    log(): void {}\n\n    info(): void {}\n\n    warn(): void {}\n\n    error(): void {}\n\n    debug(): void {}\n}\n","import { getEnvironment } from '../utility';\n\nimport createLogger from './create-logger';\nimport Logger from './logger';\n\nconst logger = createLogger(getEnvironment() !== 'test');\n\nexport default function getDefaultLogger(): Logger {\n    return logger;\n}\n","import ConsoleLogger from './console-logger';\nimport Logger from './logger';\nimport NoopLogger from './noop-logger';\n\nexport default function createLogger(isEnabled = true): Logger {\n    if (!isEnabled) {\n        return new NoopLogger();\n    }\n\n    return new ConsoleLogger(console);\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { Address, LegacyAddress } from '../../../address';\nimport { toFormUrlEncoded } from '../../../common/http-request';\n\nimport { BraintreeDataCollector } from './braintree';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport {\n    VisaCheckoutAddress,\n    VisaCheckoutInitOptions,\n    VisaCheckoutPaymentSuccessPayload,\n    VisaCheckoutTokenizedPayload,\n} from './visacheckout';\n\nexport default class BraintreeVisaCheckoutPaymentProcessor {\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(clientToken: string, options: VisaCheckoutInitializeOptions): Promise<VisaCheckoutInitOptions> {\n        this._braintreeSDKCreator.initialize(clientToken);\n\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(visaCheckout => visaCheckout.createInitOptions({\n                settings: {\n                    locale: options.locale,\n                    shipping: {\n                        collectShipping: options.collectShipping,\n                    },\n                },\n                paymentRequest: {\n                    currencyCode: options.currencyCode,\n                    subtotal: String(options.subtotal),\n                },\n            }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    handleSuccess(payment: VisaCheckoutPaymentSuccessPayload, shipping?: Address, billing?: Address): Promise<any> {\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(braintreeVisaCheckout => Promise.all([\n                braintreeVisaCheckout.tokenize(payment),\n                this._braintreeSDKCreator.getDataCollector(),\n            ])\n            .then(([tokenizedPayload, dataCollector]) => {\n                const {\n                    shippingAddress = this._toVisaCheckoutAddress(shipping),\n                    billingAddress = this._toVisaCheckoutAddress(billing),\n                } = tokenizedPayload;\n\n                return this._postForm({\n                    ...tokenizedPayload,\n                    shippingAddress,\n                    billingAddress,\n                }, dataCollector);\n            }));\n    }\n\n    private _postForm(paymentData: VisaCheckoutTokenizedPayload, dataCollector: BraintreeDataCollector) {\n        const {\n            userData,\n            billingAddress,\n            shippingAddress,\n            details: cardInformation,\n        } = paymentData;\n        const { userEmail } = userData;\n        const { deviceData } = dataCollector;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: toFormUrlEncoded({\n                payment_type: paymentData.type,\n                nonce: paymentData.nonce,\n                provider: 'braintreevisacheckout',\n                action: 'set_external_checkout',\n                device_data: deviceData,\n                card_information: this._getCardInformation(cardInformation),\n                billing_address: this._getAddress(userEmail, billingAddress),\n                shipping_address: this._getAddress(userEmail, shippingAddress),\n            }),\n        });\n    }\n\n    private _toVisaCheckoutAddress(address?: Address): VisaCheckoutAddress {\n        if (!address) {\n            return {};\n        }\n\n        return {\n            firstName: address.firstName,\n            lastName: address.lastName,\n            phoneNumber: address.phone,\n            streetAddress: address.address1,\n            extendedAddress: address.address2,\n            locality: address.city,\n            region: address.stateOrProvinceCode,\n            countryCode: address.countryCode,\n            postalCode: address.postalCode,\n        };\n    }\n\n    private _getAddress(email: string, address: VisaCheckoutAddress = {}): Partial<LegacyAddress> {\n        return {\n            email,\n            first_name: address.firstName,\n            last_name: address.lastName,\n            phone_number: address.phoneNumber,\n            address_line_1: address.streetAddress,\n            address_line_2: address.extendedAddress,\n            city: address.locality,\n            state: address.region,\n            country_code: address.countryCode,\n            postal_code: address.postalCode,\n        };\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string, lastTwo: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastTwo,\n        };\n    }\n}\n\nexport interface VisaCheckoutInitializeOptions {\n    locale?: string;\n    collectShipping?: boolean;\n    subtotal?: number;\n    currencyCode?: string;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport BraintreeVisaCheckoutPaymentProcessor from './braintree-visacheckout-payment-processor';\n\nexport default function createBraintreeVisaCheckoutPaymentProcessor(\n    scriptLoader: ScriptLoader,\n    requestSender: RequestSender\n) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n\n    return new BraintreeVisaCheckoutPaymentProcessor(braintreeSDKCreator, requestSender);\n}\n"],"sourceRoot":""}