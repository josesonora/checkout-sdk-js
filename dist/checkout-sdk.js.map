{"version":3,"sources":["webpack://checkoutKit/webpack/bootstrap","webpack://checkoutKit/external \"tslib\"","webpack://checkoutKit/external \"@bigcommerce/data-store\"","webpack://checkoutKit/external \"lodash\"","webpack://checkoutKit/external \"rxjs\"","webpack://checkoutKit/./src/shipping/consignment-actions.ts","webpack://checkoutKit/./src/checkout/checkout-actions.ts","webpack://checkoutKit/./src/common/error/errors/missing-data-error.ts","webpack://checkoutKit/./src/customer/customer-strategy-actions.ts","webpack://checkoutKit/./src/payment/payment-strategy-actions.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-actions.ts","webpack://checkoutKit/./src/coupon/coupon-actions.ts","webpack://checkoutKit/./src/common/error/errors/standard-error.ts","webpack://checkoutKit/./src/order/order-actions.ts","webpack://checkoutKit/./src/billing/billing-address-actions.ts","webpack://checkoutKit/./src/coupon/gift-certificate-actions.ts","webpack://checkoutKit/./src/payment/payment-method-actions.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-actions.ts","webpack://checkoutKit/external \"rxjs/operators\"","webpack://checkoutKit/./src/payment/instrument/instrument-actions.ts","webpack://checkoutKit/./src/embedded-checkout/embedded-checkout-events.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-actions.ts","webpack://checkoutKit/./src/common/error/error-action-creator.ts","webpack://checkoutKit/./src/geography/country-action-creator.ts","webpack://checkoutKit/./src/geography/country-request-sender.ts","webpack://checkoutKit/./src/payment/payment-strategy-type.ts","webpack://checkoutKit/./src/order/errors/order-finalization-not-required-error.ts","webpack://checkoutKit/./src/payment/payment-strategy-action-creator.ts","webpack://checkoutKit/./src/cart/errors/cart-changed-error.ts","webpack://checkoutKit/./src/checkout/checkout-validator.ts","webpack://checkoutKit/./src/payment/is-vaulted-instrument.ts","webpack://checkoutKit/./src/payment/payment-action-creator.ts","webpack://checkoutKit/./src/payment/payment-request-sender.ts","webpack://checkoutKit/./src/payment/payment-strategy-registry.ts","webpack://checkoutKit/./src/payment/errors/payment-argument-invalid-error.ts","webpack://checkoutKit/./src/payment/errors/payment-method-cancelled-error.ts","webpack://checkoutKit/./src/payment/strategies/affirm/affirm-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/affirm/affirmJs.ts","webpack://checkoutKit/./src/payment/strategies/affirm/affirm-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/afterpay/afterpay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/afterpay/afterpay-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/amazon-pay/amazon-pay-payment-strategy.ts","webpack://checkoutKit/./src/common/overlay/overlay.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-credit-card-payment-strategy.ts","webpack://checkoutKit/./src/payment/is-credit-card-like.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-paypal-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay.ts","webpack://checkoutKit/./src/payment/strategies/braintree/is-braintree-error.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-visacheckout-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/cybersource/cybersource.ts","webpack://checkoutKit/./src/payment/strategies/converge/converge-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/credit-card/credit-card-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/cybersource/cybersource-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/cybersource/cybersource-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/cybersource/cybersource-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/cybersource/cybersource-threedsecure-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/square/square-form.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/klarna/klarna-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/klarna/klarna-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/legacy/legacy-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/masterpass-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/no-payment/no-payment-data-required-strategy.ts","webpack://checkoutKit/./src/payment/strategies/offline/offline-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/offsite/offsite-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-pro-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-express-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/sage-pay/sage-pay-payment-strategy.ts","webpack://checkoutKit/./src/common/error/errors/unsupported-browser-error.ts","webpack://checkoutKit/./src/payment/strategies/square/square-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/square/square-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/wepay/wepay-risk-client.ts","webpack://checkoutKit/./src/payment/strategies/wepay/wepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/zip/zip-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/zip/zip-script-loader.ts","webpack://checkoutKit/./src/payment/create-payment-strategy-registry.ts","webpack://checkoutKit/./src/payment/strategies/braintree/create-braintree-payment-processor.ts","webpack://checkoutKit/./src/payment/instrument/instrument-action-creator.ts","webpack://checkoutKit/./src/common/date-time/add-minutes.ts","webpack://checkoutKit/./src/common/date-time/is-future.ts","webpack://checkoutKit/./src/payment/instrument/instrument-response-transformer.ts","webpack://checkoutKit/./src/payment/instrument/instrument-request-sender.ts","webpack://checkoutKit/./src/checkout/checkout-store-selector.ts","webpack://checkoutKit/./src/checkout/checkout-store-error-selector.ts","webpack://checkoutKit/./src/checkout/checkout-store-status-selector.ts","webpack://checkoutKit/./src/checkout/create-checkout-selectors.ts","webpack://checkoutKit/./src/common/error/error-message-transformer.ts","webpack://checkoutKit/./src/checkout/checkout-service.ts","webpack://checkoutKit/./src/checkout/create-checkout-service-error-transformer.ts","webpack://checkoutKit/./src/checkout/create-checkout-service.ts","webpack://checkoutKit/./src/payment/create-payment-client.ts","webpack://checkoutKit/./src/checkout/index.ts","webpack://checkoutKit/./src/common/error/errors/request-error.ts","webpack://checkoutKit/./src/config/config-actions.ts","webpack://checkoutKit/./src/common/selector/selector-decorator.ts","webpack://checkoutKit/./src/common/http-request/content-type.ts","webpack://checkoutKit/./src/geography/country-actions.ts","webpack://checkoutKit/./src/shipping/shipping-country-actions.ts","webpack://checkoutKit/external \"@bigcommerce/request-sender\"","webpack://checkoutKit/./src/payment/payment-status-types.ts","webpack://checkoutKit/external \"@bigcommerce/script-loader\"","webpack://checkoutKit/./src/payment/payment-strategy-state.ts","webpack://checkoutKit/./src/common/error/clear-error-reducer.ts","webpack://checkoutKit/./src/checkout/checkout-default-includes.ts","webpack://checkoutKit/./src/common/utility/is-equal.ts","webpack://checkoutKit/./src/customer/customer-actions.ts","webpack://checkoutKit/./src/payment/payment-actions.ts","webpack://checkoutKit/./src/common/error/errors/invalid-argument-error.ts","webpack://checkoutKit/./src/payment/payment-method-types.ts","webpack://checkoutKit/./src/cart/amount-transformer.ts","webpack://checkoutKit/./src/embedded-checkout/is-iframe-event.ts","webpack://checkoutKit/./src/payment/errors/payment-method-invalid-error.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-error-selector.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-status-selector.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-selectors.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-initializer.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/checkout-button-method-type.ts","webpack://checkoutKit/./src/common/dom/is-element-id.ts","webpack://checkoutKit/./src/common/dom/set-unique-element-id.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-strategy-action-creator.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/braintree/braintree-paypal-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/googlepay/googlepay-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/masterpass/masterpass-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/paypal/paypal-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-initializer.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-registry.ts","webpack://checkoutKit/./src/checkout-buttons/index.ts","webpack://checkoutKit/./src/checkout/checkout-params.ts","webpack://checkoutKit/external \"@bigcommerce/form-poster\"","webpack://checkoutKit/./src/cart/map-to-internal-line-items.ts","webpack://checkoutKit/external \"local-storage-fallback\"","webpack://checkoutKit/./src/common/error/throw-error-action.ts","webpack://checkoutKit/./src/common/utility/cache-key-resolver.ts","webpack://checkoutKit/./src/common/utility/bind-decorator.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-event-poster.ts","webpack://checkoutKit/./src/checkout/create-action-transformer.ts","webpack://checkoutKit/./src/checkout/checkout-selector.ts","webpack://checkoutKit/./src/checkout/checkout-reducer.ts","webpack://checkoutKit/./src/cart/map-gift-certificate-to-internal-line-item.ts","webpack://checkoutKit/./src/cart/map-to-internal-line-item.ts","webpack://checkoutKit/./src/billing/billing-address-selector.ts","webpack://checkoutKit/./src/config/config-selector.ts","webpack://checkoutKit/./src/form/form-selector.ts","webpack://checkoutKit/./src/geography/country-selector.ts","webpack://checkoutKit/./src/payment/payment-selector.ts","webpack://checkoutKit/./src/payment/payment-method-selector.ts","webpack://checkoutKit/./src/payment/payment-strategy-selector.ts","webpack://checkoutKit/./src/payment/instrument/instrument-selector.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-selector.ts","webpack://checkoutKit/./src/checkout/create-internal-checkout-selectors.ts","webpack://checkoutKit/./src/common/utility/set-prototype-of.ts","webpack://checkoutKit/./src/common/utility/is-private.ts","webpack://checkoutKit/./src/common/utility/omit-deep.ts","webpack://checkoutKit/./src/common/error/error-actions.ts","webpack://checkoutKit/./src/payment/payment-method-action-creator.ts","webpack://checkoutKit/./src/payment/payment-method-request-sender.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/embedded-content-events.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-event-listener.ts","webpack://checkoutKit/./src/common/http-request/internal-api-headers.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-selector.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-reducer.ts","webpack://checkoutKit/./src/embedded-checkout/errors/not-embeddable-error.ts","webpack://checkoutKit/./src/common/storage/browser-storage.ts","webpack://checkoutKit/./src/embedded-checkout/errors/invalid-login-token-error.ts","webpack://checkoutKit/./src/embedded-checkout/embedded-checkout.ts","webpack://checkoutKit/./src/embedded-checkout/loading-indicator.ts","webpack://checkoutKit/./src/embedded-checkout/resizable-iframe-creator.ts","webpack://checkoutKit/./src/embedded-checkout/embed-checkout.ts","webpack://checkoutKit/./src/embedded-checkout/index.ts","webpack://checkoutKit/./src/cart/map-to-internal-cart.ts","webpack://checkoutKit/./src/promotion/map-to-discount-notifications.ts","webpack://checkoutKit/./src/checkout/checkout-action-creator.ts","webpack://checkoutKit/./src/shipping/consignment-action-creator.ts","webpack://checkoutKit/./src/shipping/consignment-request-sender.ts","webpack://checkoutKit/./src/shipping/map-to-internal-shipping-option.ts","webpack://checkoutKit/./src/common/error/errors/unrecoverable-error.ts","webpack://checkoutKit/./src/common/error/errors/map-from-internal-error-response.ts","webpack://checkoutKit/./src/common/error/errors/map-from-payment-error-response.ts","webpack://checkoutKit/./src/common/error/request-error-factory.ts","webpack://checkoutKit/./src/common/error/errors/map-from-storefront-error-response.ts","webpack://checkoutKit/./src/billing/billing-address-reducer.ts","webpack://checkoutKit/./src/config/config-reducer.ts","webpack://checkoutKit/./src/geography/country-reducer.ts","webpack://checkoutKit/./src/payment/payment-reducer.ts","webpack://checkoutKit/./src/payment/payment-method-reducer.ts","webpack://checkoutKit/./src/payment/payment-strategy-reducer.ts","webpack://checkoutKit/./src/payment/instrument/instrument-reducer.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-reducer.ts","webpack://checkoutKit/./src/checkout/create-checkout-store.ts","webpack://checkoutKit/./src/common/error/create-request-error-factory.ts","webpack://checkoutKit/./src/checkout/create-checkout-store-reducer.ts","webpack://checkoutKit/./src/checkout/errors/checkout-not-available-error.ts","webpack://checkoutKit/./src/checkout/checkout-request-sender.ts","webpack://checkoutKit/./src/address/is-address-equal.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-sdk-creator.ts","webpack://checkoutKit/./src/coupon/map-to-internal-coupon.ts","webpack://checkoutKit/external \"iframe-resizer\"","webpack://checkoutKit/./src/address/map-to-internal-address.ts","webpack://checkoutKit/./src/billing/is-billing-address-like.ts","webpack://checkoutKit/./src/common/http-request/join-includes.ts","webpack://checkoutKit/./src/common/error/errors/not-initialized-error.ts","webpack://checkoutKit/./src/common/url/parse-url.ts","webpack://checkoutKit/./src/common/action/cachable-action-decorator.ts","webpack://checkoutKit/./src/common/action/is-action-options.ts","webpack://checkoutKit/./src/common/action/cache-action.ts","webpack://checkoutKit/./src/common/utility/create-freeze-proxy.ts","webpack://checkoutKit/./src/customer/customer-strategy-action-creator.ts","webpack://checkoutKit/./src/customer/customer-action-creator.ts","webpack://checkoutKit/./src/customer/customer-request-sender.ts","webpack://checkoutKit/./src/cart/cart-selector.ts","webpack://checkoutKit/./src/coupon/coupon-selector.ts","webpack://checkoutKit/./src/customer/customer-selector.ts","webpack://checkoutKit/./src/customer/customer-strategy-selector.ts","webpack://checkoutKit/./src/coupon/gift-certificate-selector.ts","webpack://checkoutKit/./src/shipping/shipping-address-selector.ts","webpack://checkoutKit/./src/shipping/shipping-country-selector.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-selector.ts","webpack://checkoutKit/./src/shipping/consignment-selector.ts","webpack://checkoutKit/./src/order/order-selector.ts","webpack://checkoutKit/./src/cart/cart-reducer.ts","webpack://checkoutKit/./src/shipping/consignment-reducer.ts","webpack://checkoutKit/./src/coupon/coupon-reducer.ts","webpack://checkoutKit/./src/customer/customer-reducer.ts","webpack://checkoutKit/./src/coupon/gift-certificate-reducer.ts","webpack://checkoutKit/./src/order/order-reducer.ts","webpack://checkoutKit/./src/common/utility/merge-or-push.ts","webpack://checkoutKit/./src/shipping/shipping-country-reducer.ts","webpack://checkoutKit/./src/customer/map-to-internal-customer.ts","webpack://checkoutKit/./src/coupon/map-to-internal-gift-certificate.ts","webpack://checkoutKit/./src/order/map-to-internal-order.ts","webpack://checkoutKit/./src/customer/customer-strategy-state.ts","webpack://checkoutKit/./src/customer/customer-strategy-reducer.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-state.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-reducer.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/get-callback-url.ts","webpack://checkoutKit/./src/common/utility/omit-private.ts","webpack://checkoutKit/./src/common/utility/get-environment.ts","webpack://checkoutKit/./src/order/order-request-sender.ts","webpack://checkoutKit/./src/order/order-action-creator.ts","webpack://checkoutKit/./src/cart/cart-comparator.ts","webpack://checkoutKit/./src/common/utility/to-single-line.ts","webpack://checkoutKit/./src/coupon/coupon-action-creator.ts","webpack://checkoutKit/./src/coupon/coupon-request-sender.ts","webpack://checkoutKit/./src/coupon/gift-certificate-action-creator.ts","webpack://checkoutKit/./src/coupon/gift-certificate-request-sender.ts","webpack://checkoutKit/./src/common/utility/cancellable-promise.ts","webpack://checkoutKit/./src/address/is-internal-address-equal.ts","webpack://checkoutKit/./src/address/map-from-internal-address.ts","webpack://checkoutKit/./src/shipping/shipping-country-action-creator.ts","webpack://checkoutKit/./src/shipping/shipping-country-request-sender.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-action-creator.ts","webpack://checkoutKit/./src/common/error/errors/not-implemented-error.ts","webpack://checkoutKit/./src/customer/strategies/amazon/amazon-pay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/braintree/braintree-visacheckout-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/chasepay/chasepay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/default/default-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/googlepay/googlepay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/masterpass/masterpass-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/square/square-customer-strategy.ts","webpack://checkoutKit/./src/customer/create-customer-strategy-registry.ts","webpack://checkoutKit/./src/shipping/strategies/amazon/amazon-pay-shipping-strategy.ts","webpack://checkoutKit/./src/shipping/strategies/default/default-shipping-strategy.ts","webpack://checkoutKit/./src/shipping/create-shipping-strategy-registry.ts","webpack://checkoutKit/external \"@bigcommerce/bigpay-client\"","webpack://checkoutKit/external \"rxjs/index\"","webpack://checkoutKit/external \"messageformat\"","webpack://checkoutKit/./src/common/error/errors/timeout-error.ts","webpack://checkoutKit/./src/config/config-action-creator.ts","webpack://checkoutKit/./src/config/config-request-sender.ts","webpack://checkoutKit/./src/billing/billing-address-action-creator.ts","webpack://checkoutKit/./src/billing/billing-address-request-sender.ts","webpack://checkoutKit/./src/common/registry/registry.ts","webpack://checkoutKit/./src/common/http-request/to-form-url-encoded.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/masterpass-script-loader.ts","webpack://checkoutKit/./src/remote-checkout/errors/remote-checkout-synchronization-error.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-braintree-initializer.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-stripe-initializer.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-script-loader.ts","webpack://checkoutKit/external \"iframe-resizer/js/iframeResizer.contentWindow\"","webpack://checkoutKit/./src/embedded-checkout/iframe-content/handle-frame-loaded-event.ts","webpack://checkoutKit/./src/common/error/errors/custom-error.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/iframe-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/noop-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/create-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/locale/language-service.ts","webpack://checkoutKit/./src/locale/create-language-service.ts","webpack://checkoutKit/./src/currency/currency-formatter.ts","webpack://checkoutKit/./src/currency/currency-service.ts","webpack://checkoutKit/./src/currency/create-currency-service.ts","webpack://checkoutKit/./src/index.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/create-googlepay-payment-processor.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-request-sender.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-action-creator.ts","webpack://checkoutKit/./src/payment/strategies/amazon-pay/amazon-pay-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/braintree/visacheckout-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay-script-loader.ts","webpack://checkoutKit/./src/common/log/console-logger.ts","webpack://checkoutKit/./src/common/log/noop-logger.ts","webpack://checkoutKit/./src/common/log/get-default-logger.ts","webpack://checkoutKit/./src/common/log/create-logger.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-visacheckout-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/braintree/create-braintree-visacheckout-payment-processor.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","ConsignmentActionType","__webpack_exports__","CheckoutActionType","MissingDataErrorType","MissingDataError","_super","subtype","_this","this","type","MissingBillingAddress","MissingCart","MissingConsignments","MissingCheckout","MissingCheckoutConfig","MissingOrderConfig","MissingOrder","MissingOrderId","MissingPayment","MissingPaymentMethod","MissingShippingAddress","getErrorMessage","tslib__WEBPACK_IMPORTED_MODULE_0__","_standard_error__WEBPACK_IMPORTED_MODULE_1__","CustomerStrategyActionType","PaymentStrategyActionType","ShippingStrategyActionType","CouponActionType","StandardError","message","_utility__WEBPACK_IMPORTED_MODULE_1__","_newTarget","Error","captureStackTrace","stack","OrderActionType","BillingAddressActionType","GiftCertificateActionType","PaymentMethodActionType","CheckoutButtonActionType","InstrumentActionType","EmbeddedCheckoutEventType","RemoteCheckoutActionType","ErrorActionCreator","clearError","error","error_actions","ClearError","payload","CountryActionCreator","_countryRequestSender","loadCountries","options","external_rxjs_","observer","next","data_store_","country_actions","LoadCountriesRequested","then","response","LoadCountriesSucceeded","body","data","complete","catch","LoadCountriesFailed","CountryRequestSender","_requestSender","_config","_a","timeout","headers","Accept-Language","locale","PaymentStrategyType","OrderFinalizationNotRequiredError","external_tslib_","standard_error","payment_strategy_type","PaymentStrategyActionCreator","_strategyRegistry","_orderActionCreator","execute","store","strategy","state","getState","payment","useStoreCredit","meta","methodId","isPaymentDataRequired","method","paymentMethods","getPaymentMethod","gatewayId","missing_data_error","getByMethod","NO_PAYMENT_DATA_REQUIRED","payment_strategy_actions","ExecuteRequested","undefined","ExecuteSucceeded","ExecuteFailed","finalize","FinalizeRequested","_loadOrderPaymentsIfNeeded","getPaymentId","order_finalization_not_required_error","providerId","id","gateway","FinalizeSucceeded","pipe","operators_","throw_error_action","FinalizeFailed","initialize","paymentStrategies","isInitialized","InitializeRequested","InitializeSucceeded","InitializeFailed","deinitialize","DeinitializeRequested","DeinitializeSucceeded","DeinitializeFailed","widgetInteraction","WidgetInteractionStarted","WidgetInteractionFinished","WidgetInteractionFailed","checkout","getCheckout","orderId","loadOrderPayments","CartChangedError","CheckoutValidator","_checkoutRequestSender","validate","loadCheckout","comparator","cart_comparator","grandTotal","_compareCoupons","coupons","_compareGiftCertificates","giftCertificates","isEqual","cart","cart_changed_error","couponsA","couponsB","external_lodash_","giftCertificatesA","giftCertificatesB","isVaultedInstrument","instrument","Boolean","instrumentId","PaymentActionCreator","_paymentRequestSender","submitPayment","payment_actions","SubmitPaymentRequested","_getPaymentRequestBody","loadCurrentOrder","SubmitPaymentSucceeded","SubmitPaymentFailed","initializeOffsitePayment","InitializeOffsitePaymentRequested","InitializeOffsitePaymentSucceeded","InitializeOffsitePaymentFailed","billingAddress","getBillingAddress","customer","getCustomer","order","getOrder","paymentMethod","_getPaymentMethod","shippingAddress","getShippingAddress","consignments","getConsignments","shippingOption","getShippingOption","storeConfig","config","getStoreConfig","contextConfig","getContextConfig","instrumentMeta","instruments","getInstrumentsMeta","paymentMeta","getPaymentMethodsMeta","orderMeta","getOrderMeta","internalCustomer","map_to_internal_customer","authToken","paymentData","getPaymentToken","vaultAccessToken","map_to_internal_address","map_to_internal_shipping_option","map_to_internal_cart","map_to_internal_order","quoteMeta","request","geoCountryCode","source","storeProfile","paymentMethodSelector","initializationData","PaymentRequestSender","_client","Promise","resolve","reject","_transformResponse","status","statusText","PaymentStrategyRegistry","_store","token","_getToken","cacheToken","_hasFactoryForMethod","payment_method_types","OFFLINE","_isLegacyMethod","LEGACY","OFFSITE","CREDIT_CARD","_hasFactory","clientSidePaymentProviders","paymentSettings","registry_registry","PaymentArgumentInvalidError","invalidFields","join","invalid_argument_error","PaymentMethodCancelledError","AffirmPaymentStrategy","_paymentActionCreator","_paymentMethodActionCreator","_affirmScriptLoader","dispatch","loadPaymentMethod","clientToken","testMode","publicKey","load","affirm","_affirm","not_initialized_error","PaymentNotInitialized","payment_argument_invalid_error","submitOrder","_getCheckoutInformation","open","onFail","failObject","reason","payment_method_cancelled_error","payment_method_invalid_error","onSuccess","successObject","ui","on","result","paymentPayload","nonce","checkout_token","consignment","selectedShippingOption","merchant","user_confirmation_url","links","checkoutLink","user_cancel_url","user_confirmation_url_action","shipping","_getShippingAddress","billing","_getBillingAddress","items","_getItems","discounts","_getDiscounts","metadata","shipping_type","order_id","toString","shipping_amount","shippingCostTotal","tax_amount","taxTotal","total","orderAmount","first","firstName","last","lastName","full","address","line1","address1","line2","address2","city","stateOrProvinceCode","zipcode","postalCode","country","countryCode","phone_number","phone","email","getCart","_i","lineItems","physicalItems","length","item","push","display_name","sku","unit_price","salePrice","qty","quantity","item_image_url","imageUrl","item_url","url","_b","_c","digitalItems","customItems","_d","_e","listPrice","_f","_g","amount","line","code","discount_amount","discountedAmount","discount_display_name","displayName","affirmJs","Function","AffirmScriptLoader","_window","window","apikey","scriptURI","_getScriptURI","AfterpayPaymentStrategy","_checkoutValidator","_remoteCheckoutActionCreator","_afterpayScriptLoader","storeCountryName","storeCountry","_mapCountryToISO2","afterpaySdk","_afterpaySdk","paymentId","initializePayment","_displayModal","loadSettings","afterpay","remoteCheckout","settings","orderPayload","countryName","display","SCRIPTS_DEFAULT","SCRIPTS_US","AfterpayScriptLoader","_scriptLoader","loadScript","AfterPay","AmazonPayPaymentStrategy","_billingAddressActionCreator","amazonOptions","amazon","_walletOptions","_paymentMethod","loadWidget","_createWallet","referenceId","_getOrderReferenceId","request_error","_getMerchantId","merchantId","container","onError","onPaymentSelect","onReady","document","getElementById","OffAmazonPayments","walletOptions","amazonOrderReferenceId","design","designMode","scope","sellerId","orderReference","_synchronizeBillingAddress","_updateOrderReference","widget","Widgets","Wallet","remote_checkout_synchronization_error","initializeBilling","remoteAddress","internalBillingAddress","is_internal_address_equal","updateAddress","map_from_internal_address","updateCheckout","getAmazonOrderReferenceId","Overlay","_element","_createElement","show","parentElement","_registerClick","appendChild","setTimeout","style","opacity","remove","_unregisterClick","_removeAfterTransition","element","createElement","background","transitionDuration","height","left","position","top","transition","width","zIndex","onClick","onClick_1","addEventListener","removeEventListener","handeTransition","event","propertyName","removeChild","BraintreePaymentProcessor","_braintreeSDKCreator","_overlay","_threeDSecureOptions","threeDSecure","preloadPaypal","getPaypal","tokenizeCard","requestData","_mapToCreditCard","getClient","client","creditCards","paypal","storeLanguage","currency","offerCredit","focusWindow","tokenize","enableShippingAddress","flow","useraction","verifyCard","addFrame","removeFrame","all","get3DS","cancelVerifyCard","verification","cancel","cancellable_promise","iframe","promise","appendSessionId","processedPayment","getDataCollector","deviceData","deviceSessionId","teardown","creditCard","streetAddress","cardholderName","ccName","number","ccNumber","cvv","ccCvv","expirationDate","ccExpiry","month","year","endpoint","BraintreeCreditCardPaymentStrategy","_braintreePaymentProcessor","braintree","_is3dsEnabled","is3dsEnabled","_handleError","orderRequest","_preparePaymentData","_isUsingVaulting","card","shouldSaveInstrument","tokenizedCard","ChasePayEventType","BraintreePaypalPaymentStrategy","_credit","braintreeOptions","isBraintreeError","getGrandTotal","BraintreeVisaCheckoutPaymentStrategy","_checkoutActionCreator","_paymentStrategyActionCreator","_braintreeVisaCheckoutPaymentProcessor","_visaCheckoutScriptLoader","visaCheckoutOptions","braintreevisacheckout","initOptions","collectShipping","subtotal","currencyCode","visaCheckout","visaInitOptions","init","paymentSuccessPayload","_paymentInstrumentSelected","handleSuccess","loadCurrentCheckout","queueId","CardinalEventType","CardinalInitializationType","CardinalValidatedAction","PaymentType","CardinalTriggerEvents","CardinalPaymentBrand","CardinalPaymentStep","CardinalEventAction","chasepay_payment_strategy","ChasePayPaymentStrategy","_chasePayScriptLoader","_wepayRiskClient","_walletEvent$","_methodId","chasepay","walletButton","_walletButton","_handleWalletButtonClick","_configureWallet","_chasePayClient","_getPayment","_displayWallet","_createOrder","ChasePay","logoContainer","insertBrandings","color","containers","configure","language","CancelCheckout","onCancel","CompleteCheckout","_setSessionToken","sessionToken","showLoadingAnimation","startCheckout","digitalSessionId","subscribe","merchantRequestId","post","Accept","Content-Type","to_form_url_encoded","action","provider","getRiskToken","riskToken","paymentCryptogram","cryptogramId","eci","transactionId","btoa","reqTokenId","expDate","substr","accountNum","accountMask","extraData","preventDefault","bind_decorator","ConvergePaymentStrategy","_formPoster","errors","postForm","three_ds_result","acs_url","PaReq","payer_auth_request","TermUrl","callback_url","MD","merchant_data","getPaymentStatus","payment_status_types","finalizeOrder","CreditCardPaymentStrategy","CyberSourcePaymentProcessor","CyberSourcePaymentStrategy","_threeDSecurePaymentProcessor","_paymentProcessor","_processor","CyberSourceScriptLoader","Cardinal","cybersource","CardBrand","DigitalWalletType","CyberSourceThreeDSecurePaymentProcessor","_cyberSourceScriptLoader","_isSetupCompleted","_cardinalEvent$","index_","_Cardinal","logging","level","SetupCompleted","setupCompletedData","_resolveSetupEvent","Validated","jwt","ActionCode","SUCCCESS","_resolveAuthorizationPromise","NOACTION","ErrorNumber","_rejectAuthorizationPromise","ERROR","FAILURE","ErrorDescription","_rejectSetupEvent","setup","Init","step","SETUP","trigger","BIN_PROCCESS","Status","_addThreeDSecureData","session","_cardinalSessionId","continueObject","AcsUrl","Payload","partialOrder","OrderDetails","TransactionId","continue","CCA","AUTHORIZATION","OK","googlepay_payment_strategy","GooglePayPaymentStrategy","_googlePayPaymentProcessor","_googlePayOptions","_getGooglePayOptions","cardInformation","displayWallet","statusCode","googlepaybraintree","googlepaystripe","card_information","KlarnaPaymentStrategy","_klarnaScriptLoader","_supportedEUCountries","klarnaCredit","_klarnaCredit","_unsubscribe","_loadWidget","_authorize","authorizationToken","authorization_token","klarna","onLoad","updateSessionData","_getUpdateSessionData","client_token","show_form","billing_address","_mapToKlarnaAddress","shipping_address","street_address","given_name","family_name","postal_code","region","stateOrProvince","authorize","res","approved","KlarnaScriptLoader","Klarna","Credit","LegacyPaymentStrategy","masterpass_payment_strategy","MasterpassPaymentStrategy","_masterpassScriptLoader","masterpass","_masterpassClient","_createMasterpassPayload","checkoutId","allowedCardTypes","toFixed","cartId","suppressShippingAddress","callbackUrl","get_callback_url","NoPaymentDataRequiredPaymentStrategy","OfflinePaymentStrategy","OffsitePaymentStrategy","_shouldSubmitFullPayload","PaypalProPaymentStrategy","_isPaymentAcknowledged","PaypalExpressPaymentStrategy","_useRedirectFlow","paypalexpress","useRedirectFlow","_isInContextEnabled","loadPaypal","_paypalSdk","button","environment","closeFlow","_isAcknowledgedOrFinalized","redirectUrl","getPaymentRedirectUrl","location","href","initXO","startFlow","SagePayPaymentStrategy","UnsupportedBrowserError","SquarePaymentStrategy","_syncPaymentMethod","createSquareForm","_paymentForm","_getFormOptions","build","_getNonceInstrument","_getCountryCode","toUpperCase","_deferredRequestNonce","timeout_error","requestCardNonce","deferred","squareOptions","square","_squareOptions","callbacks","cardNonceResponseReceived","cardData","billingContact","shippingContact","digital_wallet_type","none","_handleWalletNonceResponse","_handleCardNonceResponse","createPaymentRequest","_paymentRequestPayload","methodsSupported","methods","_showPaymentMethods","paymentFormLoaded","_setPostalCode","unsupportedBrowserDetected","unsupported_browser_error","_setExternalCheckoutData","requestShippingAddress","requestBillingInfo","label","storeName","String","pending","JSON","stringify","setPostalCode","masterpassBtn","elementId","SquareScriptLoader","SqPaymentForm","WepayRiskClient","_riskClient","WePay","risk","generate_risk_token","get_risk_token","WepayPaymentStrategy","orderActionCreator","paymentActionCreator","payloadWithToken","credit_card_payment_strategy","ZipPaymentStrategy","_zipScriptLoader","zip","_zipClient","zipClient","Checkout","onComplete","onCheckout","openModal","parse","ZipScriptLoader","Zip","createPaymentStrategyRegistry","paymentClient","requestSender","registry","payment_strategy_registry","defaultToken","scriptLoader","script_loader_","billingAddressActionCreator","billing_address_action_creator","billing_address_request_sender","braintreePaymentProcessor","braintreeScriptLoader","braintree_script_loader","braintreeSDKCreator","braintree_sdk_creator","overlay","overlay_overlay","braintree_payment_processor","createBraintreePaymentProcessor","checkoutRequestSender","checkout_request_sender","checkoutValidator","checkout_validator","order_action_creator","order_request_sender","payment_action_creator","payment_request_sender","paymentMethodActionCreator","payment_method_action_creator","payment_method_request_sender","remoteCheckoutActionCreator","remote_checkout_action_creator","remote_checkout_request_sender","configActionCreator","config_action_creator","config_request_sender","checkoutActionCreator","checkout_action_creator","paymentStrategyActionCreator","payment_strategy_action_creator","formPoster","form_poster_","register","AFFIRM","affirm_payment_strategy","affirm_script_loader","AFTERPAY","afterpay_payment_strategy","afterpay_script_loader","AMAZON","amazon_pay_payment_strategy","amazon_pay_script_loader","CYBERSOURCE","cybersource_payment_strategy","cybersource_threedsecure_payment_processor","cybersource_script_loader","cybersource_payment_processor","KLARNA","klarna_payment_strategy","klarna_script_loader","legacy_payment_strategy","offline_payment_strategy","offsite_payment_strategy","PAYPAL","paypal_pro_payment_strategy","PAYPAL_EXPRESS","paypal_express_payment_strategy","paypal_script_loader","PAYPAL_EXPRESS_CREDIT","SAGE_PAY","sage_pay_payment_strategy","SQUARE","square_payment_strategy","square_script_loader","no_payment_data_required_strategy","BRAINTREE","braintree_credit_card_payment_strategy","BRAINTREE_PAYPAL","braintree_paypal_payment_strategy","BRAINTREE_PAYPAL_CREDIT","BRAINTREE_VISA_CHECKOUT","braintree_visacheckout_payment_strategy","create_braintree_visacheckout_payment_processor","visacheckout_script_loader","CHASE_PAY","chasepay_script_loader","wepay_risk_client","BRAINTREE_GOOGLE_PAY","create_googlepay_payment_processor","googlepay_braintree_initializer","WE_PAY","wepay_payment_strategy","MASTERPASS","masterpass_script_loader","STRIPE_GOOGLE_PAY","googlepay_stripe_initializer","ZIP","zip_payment_strategy","zip_script_loader","CONVERGE","converge_payment_strategy","InstrumentActionCreator","_instrumentRequestSender","loadInstruments","instrument_actions","LoadInstrumentsRequested","_getSessionContext","_getCurrentAccessToken","_getValidAccessToken","currentToken","LoadInstrumentsSucceeded","LoadInstrumentsFailed","deleteInstrument","DeleteInstrumentRequested","DeleteInstrumentSucceeded","DeleteInstrumentFailed","_isValidVaultAccessToken","date","newDate","valueOf","Date","now","isFuture","vaultAccessExpiry","getTime","setMinutes","getMinutes","getVaultAccessToken","customerId","storeId","InstrumentResponseTransformer","transformResponse","vaultedInstruments","_transformVaultedInstruments","vaulted_instruments","transformErrorResponse","transformVaultAccessResponse","expires_at","map","bigpayToken","bigpay_token","defaultInstrument","default_instrument","iin","last4","last_4","expiryMonth","expiry_month","expiryYear","expiry_year","brand","trustedShippingAddress","trusted_shipping_address","InstrumentRequestSender","_transformer","instrument_response_transformer","requestContext","_loadInstrumentsWithAddress","_loadInstruments","deleteShopperInstrument","errorResponse","loadInstrumentsWithAddress","checkout_store_selector","CheckoutStoreSelector","selectors","_billingAddress","_cart","_checkout","_consignments","_countries","countries","_coupons","_customer","_form","form","_giftCertificates","_instruments","_order","_payment","_paymentMethods","_shippingAddress","_shippingCountries","shippingCountries","getConfig","context","company","customFields","getShippingOptions","availableShippingOptions","getSelectedShippingOption","getShippingCountries","getBillingCountries","getCountries","getPaymentMethods","getSelectedPaymentMethod","getCoupons","getGiftCertificates","isPaymentDataSubmitted","getInstruments","getBillingAddressFields","getShippingAddressFields","selector_decorator","checkout_store_error_selector","CheckoutStoreErrorSelector","_customerStrategies","customerStrategies","_paymentStrategies","_shippingStrategies","shippingStrategies","getError","getLoadCheckoutError","getSubmitOrderError","getFinalizeOrderError","getLoadOrderError","getLoadCartError","getLoadBillingCountriesError","getLoadShippingCountriesError","getLoadPaymentMethodsError","getLoadPaymentMethodError","getInitializePaymentError","getLoadShippingOptionsError","getSelectShippingOptionError","getSignInError","getSignOutError","getInitializeCustomerError","getUpdateShippingAddressError","getUpdateBillingAddressError","getContinueAsGuestError","getUpdateConsignmentError","getCreateConsignmentsError","getDeleteConsignmentError","getInitializeShippingError","getApplyCouponError","getRemoveCouponError","getApplyGiftCertificateError","getRemoveGiftCertificateError","getLoadInstrumentsError","getDeleteInstrumentError","getLoadConfigError","getLoadError","getUpdateCheckoutError","getUpdateError","getExecuteError","getFinalizeError","getLoadMethodError","getInitializeError","consignmentId","getSelectOptionError","getUpdateShippingOptionError","getUpdateAddressError","getDeleteError","getCreateError","getApplyError","getRemoveError","checkout_store_status_selector","CheckoutStoreStatusSelector","isPending","isLoadingCheckout","isSubmittingOrder","isFinalizingOrder","isLoadingOrder","isLoadingCart","isLoadingBillingCountries","isLoadingShippingCountries","isLoadingPaymentMethods","isLoadingPaymentMethod","isInitializingPayment","isLoadingShippingOptions","isSelectingShippingOption","isSigningIn","isSigningOut","isInitializingCustomer","isUpdatingBillingAddress","isContinuingAsGuest","isUpdatingShippingAddress","isUpdatingConsignment","isCreatingConsignments","isDeletingConsignment","isInitializingShipping","isApplyingCoupon","isRemovingCoupon","isApplyingGiftCertificate","isRemovingGiftCertificate","isLoadingInstruments","isDeletingInstrument","isLoadingConfig","isCustomerStepPending","isPaymentStepPending","isLoading","isUpdatingCheckout","isUpdating","isExecuting","isFinalizing","isLoadingMethod","isInitializing","isSelectingOption","isUpdatingShippingOption","isUpdatingAddress","isDeleting","isCreating","isApplying","isRemoving","isWidgetInteracting","createCheckoutSelectors","statuses","ErrorMessageTransformer","_messageCustomizer","transform","to_single_line","CheckoutService","_configActionCreator","_consignmentActionCreator","_countryActionCreator","_couponActionCreator","_customerStrategyActionCreator","_errorActionCreator","_giftCertificateActionCreator","_instrumentActionCreator","_shippingCountryActionCreator","_shippingStrategyActionCreator","isDevelopment","_state","_errorTransformer","get_environment","error_message_transformer","isCheckoutServiceError","CustomerNotInitialized","ShippingNotInitialized","notifyState","subscriber","filters","arguments","apply","concat","filter","_dispatch","loadDefaultCheckout","loadOrder","loadCheckoutAction","loadConfigAction","loadConfig","finalizeOrderIfNeeded","loadPaymentMethods","deinitializePayment","loadBillingCountries","loadShippingCountries","loadBillingAddressFields","loadShippingAddressFields","initializeCustomer","deinitializeCustomer","continueAsGuest","credentials","signInCustomer","signIn","signOutCustomer","signOut","loadShippingOptions","initializeShipping","deinitializeShipping","selectShippingOption","shippingOptionId","selectOption","updateShippingAddress","createConsignments","deleteConsignment","updateConsignment","assignItemsToAddress","assignItemsByAddress","unassignItemsToAddress","unassignItemsByAddress","selectConsignmentShippingOption","updateShippingOption","updateBillingAddress","applyCoupon","removeCoupon","applyGiftCertificate","removeGiftCertificate","createCheckoutService","protocol","get_default_logger","warn","externalSource","shouldWarnMutation","request_sender_","host","create_checkout_store","bigpay_client_","setHost","bigpayBaseUrl","createPaymentClient","orderRequestSender","checkout_service","consignment_action_creator","consignment_request_sender","country_action_creator","country_request_sender","coupon_action_creator","coupon_request_sender","customer_strategy_action_creator","create_customer_strategy_registry","error_action_creator","gift_certificate_action_creator","gift_certificate_request_sender","instrument_action_creator","instrument_request_sender","shipping_country_action_creator","shipping_country_request_sender","shipping_strategy_action_creator","create_shipping_strategy_registry","DEFAULT_RESPONSE","RequestError","ConfigActionType","selectorDecorator","target","decoratedTarget","class_1","getOwnPropertyNames","forEach","descriptor","getOwnPropertyDescriptor","resolver","_utility__WEBPACK_IMPORTED_MODULE_2__","memoizedMethod","lodash__WEBPACK_IMPORTED_MODULE_1__","args","getKey","_utility__WEBPACK_IMPORTED_MODULE_3__","cachedValue","getUsedCount","newValue","_utility__WEBPACK_IMPORTED_MODULE_4__","keyFilter","_utility__WEBPACK_IMPORTED_MODULE_5__","cache","set","selectorMethodDecorator","ContentType","CountryActionType","ShippingCountryActionType","ACKNOWLEDGE","FINALIZE","DEFAULT_STATE","clearErrorReducer","_utility__WEBPACK_IMPORTED_MODULE_0__","_error_actions__WEBPACK_IMPORTED_MODULE_1__","isClearErrorAction","objectA","objectB","Array","isArray","index","length_1","isArrayEqual","isDateEqual","RegExp","isRegExpEqual","keysA","keys","keysB","length_2","isObjectEqual","CustomerActionType","PaymentActionType","InvalidArgumentError","HOSTED","AmountTransformer","_dp","toInteger","Math","floor","pow","isIframeEvent","PaymentMethodInvalidError","checkout_button_error_selector","CheckoutButtonErrorSelector","_checkoutButton","checkoutButton","getInitializeButtonError","getDeinitializeButtonError","getDeinitializeError","checkout_button_status_selector","CheckoutButtonStatusSelector","isInitializingButton","isDeinitializingButton","isDeinitializing","createCheckoutButtonSelectors","CheckoutButtonMethodType","CheckoutButtonInitializer","_buttonStrategyActionCreator","initializeButton","containerIds","containerId","test","selector","idPrefix","querySelectorAll","slice","setUniqueElementId","deinitializeButton","CheckoutButtonStrategyActionCreator","_registry","checkout_button_actions","InitializeButtonRequested","useCache","InitializeButtonSucceeded","InitializeButtonFailed","DeinitializeButtonRequested","DeinitializeButtonSucceeded","DeinitializeButtonFailed","checkout_button_method_type","BraintreePaypalButtonStrategy","_paypalScriptLoader","_offerCredit","paypalOptions","braintreepaypalcredit","braintreepaypal","getPaypalCheckout","paypalCheckout","_paypalCheckout","allowedSources","disallowedSources","allowCredit","FUNDING","CREDIT","Button","render","env","commit","shouldProcessPayment","funding","allowed","disallowed","shape","_setupPayment","onPaymentError","onAuthorize","_tokenizePayment","onAuthorizeError","addresses","CheckoutButtonNotInitialized","createPayment","shippingAddressEditable","shippingAddressOverride","_mapToBraintreeAddress","tokenizePayment","payment_type","device_data","_mapToLegacyShippingAddress","_mapToLegacyBillingAddress","details","recipientName","split","first_name","last_name","address_line_1","address_line_2","country_code","googlepay_button_strategy","GooglePayButtonStrategy","_getMethodId","_createSignInButton","parentNode","googlePayButton","createButton","_onPaymentSelectComplete","_onError","masterpass_button_strategy","MasterpassButtonStrategy","_signInButton","buttonContainer","src","cartAmount","PaypalButtonStrategy","_host","clientId","actions","X-API-INTERNAL","internal_api_headers","paymentID","payerID","payerId","payerInfo","payer","payer_info","createCheckoutButtonInitializer","checkout_button_initializer","checkout_button_strategy_action_creator","braintree_paypal_button_strategy","GOOGLEPAY_BRAINTREE","GOOGLEPAY_STRIPE","PAYPALEXPRESS","paypal_button_strategy","createCheckoutButtonRegistry","CheckoutIncludes","mapToInternalLineItems","_map_gift_certificate_to_internal_line_item__WEBPACK_IMPORTED_MODULE_0__","_map_to_internal_line_item__WEBPACK_IMPORTED_MODULE_1__","itemMap","decimalPlaces","idKey","reduce","mapToInternalLineItemType","throwErrorAction","_bigcommerce_data_store__WEBPACK_IMPORTED_MODULE_0__","rxjs__WEBPACK_IMPORTED_MODULE_1__","_is_equal__WEBPACK_IMPORTED_MODULE_0__","CacheKeyResolver","_lastId","_maps","_resolveMap","parentMaps","cacheKey","usedCount","_generateKey","isMatched","parentMaps_1","maps","bindDecorator","bindMethodDecorator","bindClassDecorator","boundMethod","_common_url__WEBPACK_IMPORTED_MODULE_0__","IframeEventPoster","targetOrigin","_targetWindow","_targetOrigin","origin","postMessage","setTarget","createActionTransformer","requestErrorFactory","action$","rxjs_operators__WEBPACK_IMPORTED_MODULE_2__","every","isResponse","detail","createError","CheckoutSelector","storeCredit","max","loadError","updateError","_common_selector__WEBPACK_IMPORTED_MODULE_1__","checkoutReducer","_bigcommerce_data_store__WEBPACK_IMPORTED_MODULE_1__","dataReducer","errorsReducer","_common_error__WEBPACK_IMPORTED_MODULE_4__","statusesReducer","reducer","_checkout_actions__WEBPACK_IMPORTED_MODULE_9__","LoadCheckoutSucceeded","UpdateCheckoutSucceeded","_billing__WEBPACK_IMPORTED_MODULE_3__","UpdateBillingAddressSucceeded","_coupon__WEBPACK_IMPORTED_MODULE_5__","ApplyCouponSucceeded","RemoveCouponSucceeded","_shipping__WEBPACK_IMPORTED_MODULE_8__","CreateConsignmentsSucceeded","UpdateConsignmentSucceeded","DeleteConsignmentSucceeded","UpdateShippingOptionSucceeded","_coupon__WEBPACK_IMPORTED_MODULE_6__","ApplyGiftCertificateSucceeded","RemoveGiftCertificateSucceeded","lodash__WEBPACK_IMPORTED_MODULE_2__","_order__WEBPACK_IMPORTED_MODULE_7__","SubmitOrderSucceeded","LoadCheckoutRequested","LoadCheckoutFailed","UpdateCheckoutRequested","UpdateCheckoutFailed","mapGiftCertificateToInternalLineItem","___WEBPACK_IMPORTED_MODULE_0__","amountTransformer","amountAfterDiscount","discount","integerAmount","integerAmountAfterDiscount","integerDiscount","sender","recipient","attributes","variantId","mapToInternalLineItem","_amount_transformer__WEBPACK_IMPORTED_MODULE_0__","extendedListPrice","extendedSalePrice","discountAmount","downloadsPageUrl","downloadPageUrl","categoryNames","productId","option","addedByPromotion","billing_address_selector","BillingAddressSelector","continueAsGuestError","config_selector","ConfigSelector","getExternalSource","form_selector","FormSelector","selectedCountry","formFields","shippingAddressFields","field","_processField","billingAddressFields","_processCountry","_processProvince","_processsPostCode","default","fieldType","itemtype","subdivisions","required","hasPostalCodes","country_selector","CountrySelector","payment_selector","PaymentSelector","internalPayment","_getInternalPayment","_getHostedPayment","_getGatewayPayment","replace","payments","providerType","payment_method_selector","PaymentMethodSelector","loadMethodId","loadMethodError","payment_strategy_selector","PaymentStrategySelector","payment_strategy_state","initializeMethodId","initializeError","executeMethodId","executeError","finalizeMethodId","finalizeError","getWidgetInteractingError","widgetInteractionMethodId","widgetInteractionError","InstrumentSelector","failedInstrument","deleteError","deletingInstrument","remote_checkout_selector","RemoteCheckoutSelector","_remoteCheckout","createInternalCheckoutSelectors","cart_selector","checkout_button_selector","coupon_selector","customer_selector","customer_strategy_selector","gift_certificate_selector","instrument_selector","shipping_address_selector","shipping_country_selector","shipping_strategy_selector","consignment_selector","checkout_selector","order_selector","create_freeze_proxy","setPrototypeOf","__proto__","isPrivate","indexOf","omitDeep","lodash__WEBPACK_IMPORTED_MODULE_0__","predicate","ErrorActionType","PaymentMethodActionCreator","rxjs__WEBPACK_IMPORTED_MODULE_2__","_payment_method_actions__WEBPACK_IMPORTED_MODULE_4__","LoadPaymentMethodsRequested","sessionHash","LoadPaymentMethodsSucceeded","LoadPaymentMethodsFailed","LoadPaymentMethodRequested","LoadPaymentMethodSucceeded","LoadPaymentMethodFailed","_common_action__WEBPACK_IMPORTED_MODULE_3__","_common_http_request__WEBPACK_IMPORTED_MODULE_0__","_common_http_request__WEBPACK_IMPORTED_MODULE_1__","PaymentMethodRequestSender","JsonV1","EmbeddedContentEventType","IframeEventListener","sourceOrigin","_sourceOrigin","_common_url__WEBPACK_IMPORTED_MODULE_1__","_isListening","_listeners","listen","_handleMessage","stopListen","addListener","listener","listeners","removeListener","splice","_is_iframe_event__WEBPACK_IMPORTED_MODULE_3__","_common_utility__WEBPACK_IMPORTED_MODULE_2__","INTERNAL_USE_ONLY","CheckoutButtonSelector","initializedContainers","deinitializeError","_common_selector__WEBPACK_IMPORTED_MODULE_2__","DEFAULT_DATA_STATE","DEFAULT_ERROR_STATE","DEFAULT_STATUS_STATE","checkoutButtonReducer","_checkout_button_actions__WEBPACK_IMPORTED_MODULE_2__","NotEmbeddableErrorType","BrowserStorage","_namespace","getItem","rawValue","external_local_storage_fallback_default","a","withNamespace","removeItem","getItemOnce","setItem","InvalidLoginTokenError","title","NotEmbeddableError","UnknownError","EmbeddedCheckout","_iframeCreator","_messageListener","_messagePoster","_loadingIndicator","_storage","_location","_options","_isAttached","embedded_checkout_events","CheckoutComplete","CheckoutError","CheckoutLoaded","onFrameLoad","FrameLoaded","onSignOut","SignedOut","_configureStyles","attach","_allowCookie","_attemptLogin","createFrame","_iframe","hide","_retryAllowCookie","FrameError","detach","iFrameResizer","close","contentWindow","styles","embedded_content_events","StyleConfigured","parse_url","pathname","invalid_login_token_error","encodeURIComponent","visibility","not_embeddable_error","MissingContent","DEFAULT_STYLES","size","backgroundColor","ROTATION_ANIMATION","LoadingIndicator","_styles","_defineAnimation","_container","_buildContainer","_indicator","_buildIndicator","parentId","parent_1","handleTransitionEnd","bottom","right","indicator","borderRadius","border","borderColor","margin","transformStyle","animation","head","sheet","CSSStyleSheet","insertRule","ResizableIframeCreator","MissingContainer","allowPaymentRequest","_toResizableFrame","timeoutInterval","handleMessage","is_iframe_event","contentId","iframes","external_iframe_resizer_","scrolling","sizeWidth","heightCalculationMethod","clearTimeout","STORAGE_PREFIX","embedCheckout","embedded_checkout","resizable_iframe_creator","iframe_event_listener","iframe_event_poster","loading_indicator","loadingIndicator","browser_storage","mapToInternalCart","promotions","notifications","amount_transformer","map_to_internal_line_items","coupon","sum","map_to_internal_coupon","discountNotifications","promotion","banners","banner","placeholders","discountType","messageHtml","text","giftCertificate","totalDiscountedAmount","certificate","used","appliedGiftCertificates","map_to_internal_gift_certificate","amountBeforeDiscount","shippingCostBeforeDiscount","integerAmountBeforeDiscount","lineItem","isShippingRequired","taxSubtotal","taxes","handling","handlingCostTotal","CheckoutActionCreator","_checkout_actions__WEBPACK_IMPORTED_MODULE_7__","rxjs_operators__WEBPACK_IMPORTED_MODULE_3__","_common_error_errors__WEBPACK_IMPORTED_MODULE_5__","_common_error_errors__WEBPACK_IMPORTED_MODULE_6__","ConsignmentActionCreator","_consignmentRequestSender","_common_error_errors__WEBPACK_IMPORTED_MODULE_4__","existingConsignment","getConsignmentByAddress","_removeLineItems","_createOrUpdateConsignment","_addLineItems","consignmentUpdateBody","consignmentMeta","_consignment_actions__WEBPACK_IMPORTED_MODULE_6__","UpdateShippingOptionRequested","UpdateShippingOptionFailed","LoadShippingOptionsRequested","params","include","_checkout_checkout_params__WEBPACK_IMPORTED_MODULE_3__","AvailableShippingOptions","LoadShippingOptionsSucceeded","LoadShippingOptionsFailed","_getConsignmentRequestBody","CreateConsignmentsRequested","CreateConsignmentsFailed","UpdateConsignmentRequested","UpdateConsignmentFailed","DeleteConsignmentRequested","DeleteConsignmentFailed","_isUpdateConsignmentRequest","itemId","_hydrateLineItems","lineItemIds","existingItem","sharedItem","find","DEFAULT_PARAMS","ConsignmentRequestSender","put","delete","mapToInternalShippingOption","isSelected","description","price","cost","selected","isRecommended","transitTime","UnrecoverableError","joinErrors","map_from_payment_error_response_joinErrors","RequestErrorFactory","_factoryMethods","mapFromInternalErrorResponse","mapFromStorefrontErrorResponse","mapFromPaymentErrorResponse","factoryMethod","_getType","_isStorefrontErrorResponseBody","_isInternalErrorResponseBody","internalType","storefrontErrorResponse","internalErrorResponse","billingAddressReducer","clear_error_reducer","billing_address_actions","ContinueAsGuestSucceeded","checkout_actions","order_actions","LoadOrderSucceeded","UpdateBillingAddressRequested","UpdateBillingAddressFailed","ContinueAsGuestRequested","ContinueAsGuestFailed","config_reducer_DEFAULT_STATE","configReducer","config_reducer_dataReducer","config_reducer_errorsReducer","config_reducer_statusesReducer","config_actions","LoadConfigSucceeded","LoadConfigFailed","LoadConfigRequested","country_reducer_DEFAULT_STATE","countryReducer","country_reducer_dataReducer","country_reducer_errorsReducer","country_reducer_statusesReducer","paymentReducer","payment_reducer_dataReducer","payment_method_reducer_DEFAULT_STATE","paymentMethodReducer","payment_method_reducer_dataReducer","payment_method_reducer_errorsReducer","metaReducer","payment_method_reducer_statusesReducer","payment_method_actions","merge_or_push","paymentStrategyReducer","payment_strategy_reducer_dataReducer","payment_strategy_reducer_errorsReducer","payment_strategy_reducer_statusesReducer","deinitializeMethodId","instrument_reducer_DEFAULT_STATE","instrumentReducer","instrument_reducer_dataReducer","instrument_reducer_errorsReducer","instrument_reducer_metaReducer","instrument_reducer_statusesReducer","remote_checkout_reducer_DEFAULT_STATE","remoteCheckoutReducer","remote_checkout_reducer_dataReducer","remote_checkout_actions","InitializeRemoteBillingSucceeded","InitializeRemoteShippingSucceeded","LoadRemoteSettingsSucceeded","UpdateRemoteCheckout","createCheckoutStore","initialState","factory","actionTransformer","create_action_transformer","request_error_factory","unrecoverable_error","cart_reducer","checkout_reducer","checkout_button_reducer","consignment_reducer","coupon_reducer","customer_reducer","customer_strategy_reducer","gift_certificate_reducer","order_reducer","shipping_country_reducer","shipping_strategy_reducer","stateTransformer","create_internal_checkout_selectors","CheckoutNotAvailableError","checkout_request_sender_CheckoutRequestSender","CheckoutRequestSender","content_type","join_includes","checkout_default_includes","checkout_not_available_error","isAddressEqual","addressA","addressB","normalize","_common_error_errors__WEBPACK_IMPORTED_MODULE_0__","BraintreeScriptLoader","loadClient","load3DS","loadDataCollector","dataCollector","loadPaypalCheckout","loadVisaCheckout","loadGooglePayment","googlePayment","BraintreeSDKCreator","_braintreeScriptLoader","_dataCollectors","_clientToken","_common_error_errors__WEBPACK_IMPORTED_MODULE_1__","authorization","_paypal","_3ds","cached","kount","getVisaCheckout","_visaCheckout","getGooglePaymentComponent","_googlePay","_teardown","mod","mapToInternalCoupon","couponTypes","couponType","mapToInternalAddress","addressId","isBillingAddressLike","addressLine1","addressLine2","province","provinceCode","postCode","joinIncludes","includes","NotInitializedErrorType","NotInitializedError","parseUrl","_error_errors__WEBPACK_IMPORTED_MODULE_0__","anchor","hash","hostname","port","search","cachableActionDecorator","memoizedMethods","WeakMap","decorateMethod","param","lastArg","fn","instanceMethods","cache_key_resolver","createFreezeProxies","createFreezeProxy","trap","proxy","iteratee","getPrototypeOf","traversePrototypeOf","charAt","createProxy","_customer_strategy_actions__WEBPACK_IMPORTED_MODULE_2__","CustomerStrategyActionCreator","SignInRequested","SignInSucceeded","SignInFailed","SignOutRequested","SignOutSucceeded","SignOutFailed","_common_error__WEBPACK_IMPORTED_MODULE_3__","_customer_actions__WEBPACK_IMPORTED_MODULE_4__","CustomerActionCreator","_customerRequestSender","SignInCustomerRequested","SignInCustomerSucceeded","SignInCustomerFailed","SignOutCustomerRequested","SignOutCustomerSucceeded","SignOutCustomerFailed","CustomerRequestSender","CartSelector","CouponSelector","_coupon","removeCouponError","applyCouponError","CustomerSelector","CustomerStrategySelector","signInMethodId","signInError","signOutMethodId","signOutError","getWidgetInteractionError","GiftCertificateSelector","_giftCertificate","removeGiftCertificateError","applyGiftCertificateError","ShippingAddressSelector","ShippingCountrySelector","ShippingStrategySelector","updateAddressMethodId","updateAddressError","selectOptionMethodId","selectOptionError","ConsignmentSelector","getConsignmentById","_address__WEBPACK_IMPORTED_MODULE_2__","loadShippingOptionsError","getUnassignedItems","assignedLineItemIds","itemIds","getItemAssignmentError","updateShippingOptionError","isAssigningItems","_common_selector__WEBPACK_IMPORTED_MODULE_3__","OrderSelector","cartReducer","_billing_billing_address_actions__WEBPACK_IMPORTED_MODULE_2__","_checkout__WEBPACK_IMPORTED_MODULE_3__","_shipping_consignment_actions__WEBPACK_IMPORTED_MODULE_7__","_coupon_coupon_actions__WEBPACK_IMPORTED_MODULE_5__","_coupon_gift_certificate_actions__WEBPACK_IMPORTED_MODULE_6__","consignmentReducer","_checkout__WEBPACK_IMPORTED_MODULE_2__","_coupon__WEBPACK_IMPORTED_MODULE_4__","_customer__WEBPACK_IMPORTED_MODULE_5__","couponReducer","_coupon_actions__WEBPACK_IMPORTED_MODULE_5__","_order__WEBPACK_IMPORTED_MODULE_4__","ApplyCouponRequested","ApplyCouponFailed","RemoveCouponRequested","RemoveCouponFailed","customerReducer","giftCertificateReducer","_shipping_consignment_actions__WEBPACK_IMPORTED_MODULE_4__","_gift_certificate_actions__WEBPACK_IMPORTED_MODULE_6__","ApplyGiftCertificateRequested","ApplyGiftCertificateFailed","RemoveGiftCertificateRequested","RemoveGiftCertificateFailed","orderReducer","_order_actions__WEBPACK_IMPORTED_MODULE_4__","LoadOrderPaymentsSucceeded","FinalizeOrderSucceeded","orderToken","LoadOrderRequested","LoadOrderPaymentsRequested","LoadOrderFailed","LoadOrderPaymentsFailed","mergeOrPush","array","newArray","shippingCountryReducer","_common_error__WEBPACK_IMPORTED_MODULE_2__","_shipping_country_actions__WEBPACK_IMPORTED_MODULE_3__","LoadShippingCountriesSucceeded","LoadShippingCountriesRequested","LoadShippingCountriesFailed","mapToInternalCustomer","_address__WEBPACK_IMPORTED_MODULE_0__","isGuest","fullName","mapToInternalGiftCertificate","remainingBalance","remaining","balance","purchaseDate","mapToInternalOrder","_cart__WEBPACK_IMPORTED_MODULE_1__","_cart__WEBPACK_IMPORTED_MODULE_2__","_coupon__WEBPACK_IMPORTED_MODULE_3__","customerCanBeCreated","mapToInteralOrderPayment","baseAmount","socialData","mapToInternalSocialDataList","hasDigitalItems","isDownloadable","isComplete","mapToStoreCredit","orderAmountAsInteger","mapToInternalPaymentStatus","isDefaultOrderPayment","helpText","instructions","returnUrl","socialDataObject","socialMedia","image","link","shareText","sharingLink","channelName","channel","channelCode","customerStrategyReducer","customer_strategy_actions","shippingStrategyReducer","shipping_strategy_actions","UpdateAddressRequested","UpdateAddressSucceeded","UpdateAddressFailed","SelectOptionRequested","SelectOptionSucceeded","SelectOptionFailed","getCallbackUrl","omitPrivate","_is_private__WEBPACK_IMPORTED_MODULE_0__","_omit_deep__WEBPACK_IMPORTED_MODULE_1__","getEnvironment","process","NODE_ENV","e","OrderRequestSender","OrderActionCreator","_orderRequestSender","_order_actions__WEBPACK_IMPORTED_MODULE_6__","_getCurrentOrderId","SubmitOrderRequested","_mapToOrderRequestBody","customerMessage","SubmitOrderFailed","FinalizeOrderRequested","FinalizeOrderFailed","CartComparator","cartA","cartB","_normalize","sort","itemA","itemB","localeCompare","giftWrapping","toSingleLine","input","trim","_common_error_errors__WEBPACK_IMPORTED_MODULE_2__","_coupon_actions__WEBPACK_IMPORTED_MODULE_3__","CouponActionCreator","_couponRequestSender","_checkout__WEBPACK_IMPORTED_MODULE_0__","_checkout__WEBPACK_IMPORTED_MODULE_1__","_common_http_request__WEBPACK_IMPORTED_MODULE_2__","_common_http_request__WEBPACK_IMPORTED_MODULE_3__","CouponRequestSender","couponCode","_gift_certificate_actions__WEBPACK_IMPORTED_MODULE_3__","GiftCertificateActionCreator","_giftCertificateRequestSender","GiftCertificateRequestSender","giftCertificateCode","CancellablePromise","cancellable","race","isInternalAddressEqual","ignoredKeys","mapFromInternalAddress","_shipping_country_actions__WEBPACK_IMPORTED_MODULE_2__","ShippingCountryActionCreator","_shippingCountryRequestSender","ShippingCountryRequestSender","ShippingStrategyActionCreator","_shipping_strategy_actions__WEBPACK_IMPORTED_MODULE_3__","mergedOptions","NotImplementedError","AmazonPayCustomerStrategy","_remoteCheckoutRequestSender","not_implemented_error","useAmazonAddressBook","_handleAuthorization","generateToken","Login","popup","tokenPrefix","trackAuthorizationEvent","BraintreeVisaCheckoutCustomerStrategy","_buttonClassName","signInButton","buttonClass","querySelector","_insertVisaCheckoutButton","visaCheckoutButton","className","innerHTML","ChasePayCustomerStrategy","chasePayOptions","JPMC","isChasePayUp","insertButtons","EventType","START_CHECKOUT","sessionId","COMPLETE_CHECKOUT","requestId","_reloadPage","sendRequest","fromChasePay","DefaultCustomerStrategy","_customerActionCreator","googlepay_customer_strategy","GooglePayCustomerStrategy","googlePayOptions","MasterpassCustomerStrategy","masterpassOptions","Masterpass","SquareCustomerStrategy","createCustomerStrategyRegistry","remoteCheckoutRequestSender","amazon_pay_customer_strategy","braintree_visacheckout_customer_strategy","chasepay_customer_strategy","square_customer_strategy","masterpass_customer_strategy","default_customer_strategy","customer_action_creator","customer_request_sender","AmazonPayShippingStrategy","_createAddressBook","optionId","onAddressSelect","AddressBook","_synchronizeShippingAddress","DefaultShippingStrategy","createShippingStrategyRegistry","consignmentRequestSender","consignmentActionCreator","amazon_pay_shipping_strategy","default_shipping_strategy","TimeoutError","ConfigActionCreator","_configRequestSender","_config_actions__WEBPACK_IMPORTED_MODULE_4__","ConfigRequestSender","BillingAddressActionCreator","_common_error_errors__WEBPACK_IMPORTED_MODULE_3__","billingAddressRequestBody","existingBillingAddressRequestBody","_billing_address_actions__WEBPACK_IMPORTED_MODULE_5__","_createOrUpdateBillingAddress","createAddress","BillingAddressRequestSender","Registry","_factories","_instances","_getInstance","_error_errors__WEBPACK_IMPORTED_MODULE_1__","_hasInstance","toFormUrlEncoded","MasterpassScriptLoader","RemoteCheckoutSynchronizationError","GooglePayBraintreeInitializer","hasShippingAddress","googleBraintreePaymentInstance","_googlePaymentInstance","_createGooglePayPayload","parseResponse","paymentMethodData","tokenizationData","androidPayCards","cardType","lastFour","lastTwo","binData","platformToken","googlePayBraintreePaymentDataRequest","merchantInfo","authJwt","merchantName","googleMerchantName","googleMerchantId","transactionInfo","totalPriceStatus","totalPrice","cardRequirements","billingAddressRequired","billingAddressFormat","shippingAddressRequired","emailRequired","phoneNumberRequired","_mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2","createPaymentDataRequest","googlePayBraintreeDataRequestV1","apiVersion","apiVersionMinor","allowedPaymentMethods","parameters","allowedAuthMethods","allowedCardNetworks","billingAddressParameters","format","tokenizationSpecification","braintree:apiVersion","braintree:authorizationFingerprint","paymentMethodTokenizationParameters","braintree:merchantId","braintree:sdkVersion","shippingAddressParameters","GooglePayStripeInitializer","_mapGooglePayStripeDataRequestToGooglePayDataRequestV2","err","stripe:version","stripeVersion","stripe:publishableKey","stripePublishableKey","PaypalScriptLoader","handleFrameLoadedEvent","hasAttribute","setAttribute","isCustomError","IframeEmbeddedCheckoutMessenger","_untargetedMessagePoster","_messageHandlers","postComplete","_postMessage","postError","_transformError","postFrameError","untargeted","postFrameLoaded","postLoaded","postSignedOut","receiveStyles","handler","_notifyMessageHandlers","NoopEmbeddedCheckoutMessenger","createEmbeddedCheckoutMessenger","parentWindow","parent","noop_embedded_checkout_messenger","iframe_embedded_checkout_messenger","parentOrigin","LanguageService","_logger","_transformConfig","locales","translations","_locale","_locales","_translations","_formatters","mapKeys","translationKey","KEY_PREFIX","getLocale","_hasTranslations","translate","prefixedKey","messageFormat","external_messageformat_","compile","_transformData","output","defaultTranslations","_flattenObject","parentKey","resultKey","createLanguageService","language_service","CurrencyFormatter","currencySettings","symbolLocation","symbol","thousandsSeparator","decimalSeparator","_decimalPlaces","parseInt","_symbolLocation","_symbol","_thousandsSeparator","_decimalSeparator","formattedNumber","_formatNumber","formattedCurrency","_formatCurrency","positiveAmount","abs","_toFixed","decimalAmount","parsedIntegerAmount","toLowerCase","precision","round","CurrencyService","_storeConfig","_customerFormatter","currency_formatter","shopperCurrency","_storeFormatter","toCustomerCurrency","exchangeRate","toStoreCurrency","createCurrencyService","currency_service","checkout_buttons","ButtonType","ButtonColor","GooglePayPaymentProcessor","_googlePayScriptLoader","_googlePayInitializer","_consigmentActionCreator","buttonType","buttonColor","Short","Default","_googlePayClient","loadPaymentData","_getPaymentDataRequest","_postForm","_updateBillingAddress","_mapGooglePayAddressToShippingAddress","googlePay","paymentDataRequest","_getGooglePayClient","_paymentDataRequest","isReadyToPay","_getCardInformation","google","api","PaymentsClient","_mapGooglePayAddressToBillingAddress","info","companyName","address3","locality","administrativeArea","phoneNumber","postPaymentData","remoteBillingAddress","googlePayAddressMapped","GooglePayScriptLoader","createGooglePayPaymentProcessor","initializer","googlepay_payment_processor","googlepay_script_loader","RemoteCheckoutRequestSender","methodName","_remote_checkout_actions__WEBPACK_IMPORTED_MODULE_2__","RemoteCheckoutActionCreator","InitializeRemoteBillingRequested","InitializeRemoteBillingFailed","InitializeRemoteShippingRequested","InitializeRemoteShippingFailed","InitializeRemotePaymentRequested","InitializeRemotePaymentSucceeded","InitializeRemotePaymentFailed","LoadRemoteSettingsRequested","LoadRemoteSettingsFailed","SignOutRemoteCustomerRequested","SignOutRemoteCustomerSucceeded","SignOutRemoteCustomerFailed","AmazonPayScriptLoader","onPaymentReady","_configureWidget","onLoginReady","setClientId","setUseCookie","onAmazonLoginReady","onAmazonPaymentsReady","VisaCheckoutScriptLoader","V","ChasePayScriptLoader","ConsoleLogger","_console","log","messages","_logToConsole","debug","NoopLogger","getDefaultLogger","isEnabled","logger","console_logger","console","noop_logger","BraintreeVisaCheckoutPaymentProcessor","createInitOptions","paymentRequest","braintreeVisaCheckout","tokenizedPayload","_toVisaCheckoutAddress","userData","userEmail","_getAddress","extendedAddress","createBraintreeVisaCheckoutPaymentProcessor","braintree_visacheckout_payment_processor"],"mappings":"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","file":"checkout-sdk.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 192);\n","module.exports = require(\"tslib\");","module.exports = require(\"@bigcommerce/data-store\");","module.exports = require(\"lodash\");","module.exports = require(\"rxjs\");","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nimport { ConsignmentMeta } from './consignment';\n\nexport enum ConsignmentActionType {\n    CreateConsignmentsRequested = 'CREATE_CONSIGNMENTS_REQUESTED',\n    CreateConsignmentsSucceeded = 'CREATE_CONSIGNMENTS_SUCCEEDED',\n    CreateConsignmentsFailed = 'CREATE_CONSIGNMENTS_FAILED',\n\n    UpdateConsignmentRequested = 'UPDATE_CONSIGNMENT_REQUESTED',\n    UpdateConsignmentSucceeded = 'UPDATE_CONSIGNMENT_SUCCEEDED',\n    UpdateConsignmentFailed = 'UPDATE_CONSIGNMENT_FAILED',\n\n    DeleteConsignmentRequested = 'DELETE_CONSIGNMENT_REQUESTED',\n    DeleteConsignmentSucceeded = 'DELETE_CONSIGNMENT_SUCCEEDED',\n    DeleteConsignmentFailed = 'DELETE_CONSIGNMENT_FAILED',\n\n    UpdateShippingOptionRequested = 'UPDATE_SHIPPING_OPTION_REQUESTED',\n    UpdateShippingOptionSucceeded = 'UPDATE_SHIPPING_OPTION_SUCCEEDED',\n    UpdateShippingOptionFailed = 'UPDATE_SHIPPING_OPTION_FAILED',\n\n    LoadShippingOptionsRequested = 'LOAD_SHIPPING_OPTIONS_REQUESTED',\n    LoadShippingOptionsSucceeded = 'LOAD_SHIPPING_OPTIONS_SUCCEEDED',\n    LoadShippingOptionsFailed = 'LOAD_SHIPPING_OPTIONS_FAILED',\n}\n\nexport type ConsignmentAction =\n    CreateConsignmentsAction |\n    UpdateConsignmentAction |\n    DeleteConsignmentAction |\n    UpdateShippingOptionAction |\n    LoadShippingOptionsAction;\n\nexport type CreateConsignmentsAction =\n    CreateConsignmentsRequestedAction |\n    CreateConsignmentsSucceededAction |\n    CreateConsignmentsFailedAction;\n\nexport type UpdateConsignmentAction =\n    UpdateConsignmentRequestedAction |\n    UpdateConsignmentSucceededAction |\n    UpdateConsignmentFailedAction;\n\nexport type DeleteConsignmentAction =\n    DeleteConsignmentRequestedAction |\n    DeleteConsignmentSucceededAction |\n    DeleteConsignmentFailedAction;\n\nexport type UpdateShippingOptionAction =\n    UpdateShippingOptionRequestedAction |\n    UpdateShippingOptionSucceededAction |\n    UpdateShippingOptionFailedAction;\n\nexport type LoadShippingOptionsAction =\n    LoadShippingOptionsRequestedAction |\n    LoadShippingOptionsSucceededAction |\n    LoadShippingOptionsFailedAction;\n\nexport interface CreateConsignmentsRequestedAction extends Action {\n    type: ConsignmentActionType.CreateConsignmentsRequested;\n}\n\nexport interface CreateConsignmentsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.CreateConsignmentsSucceeded;\n}\n\nexport interface CreateConsignmentsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.CreateConsignmentsFailed;\n}\n\nexport interface UpdateConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentRequested;\n}\n\nexport interface UpdateConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentSucceeded;\n}\n\nexport interface UpdateConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentFailed;\n}\n\nexport interface DeleteConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentRequested;\n}\n\nexport interface DeleteConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentSucceeded;\n}\n\nexport interface DeleteConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentFailed;\n}\n\nexport interface UpdateShippingOptionRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionRequested;\n}\n\nexport interface UpdateShippingOptionSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionSucceeded;\n}\n\nexport interface UpdateShippingOptionFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionFailed;\n}\n\nexport interface LoadShippingOptionsRequestedAction extends Action {\n    type: ConsignmentActionType.LoadShippingOptionsRequested;\n}\n\nexport interface LoadShippingOptionsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.LoadShippingOptionsSucceeded;\n}\n\nexport interface LoadShippingOptionsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.LoadShippingOptionsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadConfigAction } from '../config/config-actions';\n\nimport Checkout from './checkout';\n\nexport enum CheckoutActionType {\n    LoadCheckoutRequested = 'LOAD_CHECKOUT_REQUESTED',\n    LoadCheckoutSucceeded = 'LOAD_CHECKOUT_SUCCEEDED',\n    LoadCheckoutFailed = 'LOAD_CHECKOUT_FAILED',\n\n    UpdateCheckoutRequested = 'UPDATE_CHECKOUT_REQUESTED',\n    UpdateCheckoutSucceeded = 'UPDATE_CHECKOUT_SUCCEEDED',\n    UpdateCheckoutFailed = 'UPDATE_CHECKOUT_FAILED',\n}\n\nexport type CheckoutAction = LoadCheckoutAction | UpdateCheckoutAction;\n\nexport type LoadCheckoutAction =\n    LoadCheckoutRequestedAction |\n    LoadCheckoutSucceededAction |\n    LoadCheckoutFailedAction |\n    LoadConfigAction;\n\nexport type UpdateCheckoutAction =\n    UpdateCheckoutRequestedAction |\n    UpdateCheckoutSucceededAction |\n    UpdateCheckoutFailedAction;\n\nexport interface LoadCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.LoadCheckoutRequested;\n}\n\nexport interface LoadCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.LoadCheckoutSucceeded;\n}\n\nexport interface LoadCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.LoadCheckoutFailed;\n}\n\nexport interface UpdateCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.UpdateCheckoutRequested;\n}\n\nexport interface UpdateCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.UpdateCheckoutSucceeded;\n}\n\nexport interface UpdateCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.UpdateCheckoutFailed;\n}\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentMethod,\n    MissingShippingAddress,\n}\n\nexport default class MissingDataError extends StandardError {\n    constructor(\n        public subtype: MissingDataErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n    case MissingDataErrorType.MissingBillingAddress:\n        return 'Unable to proceed because billing address data is unavailable.';\n\n    case MissingDataErrorType.MissingCart:\n        return 'Unable to proceed because cart data is unavailable.';\n\n    case MissingDataErrorType.MissingConsignments:\n        return 'Unable to proceed because consignments data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckout:\n        return 'Unable to proceed because checkout data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckoutConfig:\n    case MissingDataErrorType.MissingOrderConfig:\n        return 'Unable to proceed because configuration data is unavailable.';\n\n    case MissingDataErrorType.MissingOrder:\n        return 'Unable to proceed because order data is unavailable.';\n\n    case MissingDataErrorType.MissingOrderId:\n        return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n    case MissingDataErrorType.MissingPayment:\n        return 'Unable to proceed because payment data is unavailable.';\n\n    case MissingDataErrorType.MissingPaymentMethod:\n        return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n    case MissingDataErrorType.MissingShippingAddress:\n        return 'Unable to proceed because shipping address data is unavailable.';\n\n    default:\n        return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum CustomerStrategyActionType {\n    SignInFailed = 'CUSTOMER_STRATEGY_SIGN_IN_FAILED',\n    SignInRequested = 'CUSTOMER_STRATEGY_SIGN_IN_REQUESTED',\n    SignInSucceeded = 'CUSTOMER_STRATEGY_SIGN_IN_SUCCEEDED',\n    SignOutFailed = 'CUSTOMER_STRATEGY_SIGN_OUT_FAILED',\n    SignOutRequested = 'CUSTOMER_STRATEGY_SIGN_OUT_REQUESTED',\n    SignOutSucceeded = 'CUSTOMER_STRATEGY_SIGN_OUT_SUCCEEDED',\n    InitializeFailed = 'CUSTOMER_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'CUSTOMER_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'CUSTOMER_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'CUSTOMER_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'CUSTOMER_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'CUSTOMER_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type CustomerStrategyAction =\n    CustomerStrategySignInAction |\n    CustomerStrategySignOutAction |\n    CustomerStrategyInitializeAction |\n    CustomerStrategyDeinitializeAction |\n    CustomerStrategyWidgetAction;\n\nexport type CustomerStrategySignInAction =\n    SignInRequestedAction |\n    SignInSucceededAction |\n    SignInFailedAction;\n\nexport type CustomerStrategySignOutAction =\n    SignOutRequestedAction |\n    SignOutSucceededAction |\n    SignOutFailedAction;\n\nexport type CustomerStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type CustomerStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type CustomerStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface SignInRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignInRequested;\n}\n\nexport interface SignInSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignInSucceeded;\n}\n\nexport interface SignInFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignInFailed;\n}\n\nexport interface SignOutRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignOutRequested;\n}\n\nexport interface SignOutSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignOutSucceeded;\n}\n\nexport interface SignOutFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignOutFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderPaymentsAction } from '../order';\n\nexport enum PaymentStrategyActionType {\n    ExecuteFailed = 'PAYMENT_STRATEGY_EXECUTE_FAILED',\n    ExecuteRequested = 'PAYMENT_STRATEGY_EXECUTE_REQUESTED',\n    ExecuteSucceeded = 'PAYMENT_STRATEGY_EXECUTE_SUCCEEDED',\n    FinalizeFailed = 'PAYMENT_STRATEGY_FINALIZE_FAILED',\n    FinalizeRequested = 'PAYMENT_STRATEGY_FINALIZE_REQUESTED',\n    FinalizeSucceeded = 'PAYMENT_STRATEGY_FINALIZE_SUCCEEDED',\n    InitializeFailed = 'PAYMENT_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'PAYMENT_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'PAYMENT_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'PAYMENT_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'PAYMENT_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'PAYMENT_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type PaymentStrategyAction =\n    PaymentStrategyExecuteAction |\n    PaymentStrategyFinalizeAction |\n    PaymentStrategyInitializeAction |\n    PaymentStrategyDeinitializeAction |\n    PaymentStrategyWidgetAction;\n\nexport type PaymentStrategyExecuteAction =\n    ExecuteRequestedAction |\n    ExecuteSucceededAction |\n    ExecuteFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyFinalizeAction =\n    FinalizeRequestedAction |\n    FinalizeSucceededAction |\n    FinalizeFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type PaymentStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type PaymentStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface ExecuteRequestedAction extends Action {\n    type: PaymentStrategyActionType.ExecuteRequested;\n}\n\nexport interface ExecuteSucceededAction extends Action {\n    type: PaymentStrategyActionType.ExecuteSucceeded;\n}\n\nexport interface ExecuteFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.ExecuteFailed;\n}\n\nexport interface FinalizeRequestedAction extends Action {\n    type: PaymentStrategyActionType.FinalizeRequested;\n}\n\nexport interface FinalizeSucceededAction extends Action {\n    type: PaymentStrategyActionType.FinalizeSucceeded;\n}\n\nexport interface FinalizeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.FinalizeFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ShippingStrategyActionType {\n    UpdateAddressFailed = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_FAILED',\n    UpdateAddressRequested = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_REQUESTED',\n    UpdateAddressSucceeded = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_SUCCEEDED',\n    SelectOptionFailed = 'SHIPPING_STRATEGY_SELECT_OPTION_FAILED',\n    SelectOptionRequested = 'SHIPPING_STRATEGY_SELECT_OPTION_REQUESTED',\n    SelectOptionSucceeded = 'SHIPPING_STRATEGY_SELECT_OPTION_SUCCEEDED',\n    InitializeFailed = 'SHIPPING_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'SHIPPING_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'SHIPPING_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'SHIPPING_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'SHIPPING_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'SHIPPING_STRATEGY_DEINITIALIZE_SUCCEEDED',\n}\n\nexport type ShippingStrategyAction =\n    ShippingStrategyUpdateAddressAction |\n    ShippingStrategySelectOptionAction |\n    ShippingStrategyInitializeAction |\n    ShippingStrategyDeinitializeAction;\n\nexport type ShippingStrategyUpdateAddressAction =\n    UpdateAddressRequestedAction |\n    UpdateAddressSucceededAction |\n    UpdateAddressFailedAction;\n\nexport type ShippingStrategySelectOptionAction =\n    SelectOptionRequestedAction |\n    SelectOptionSucceededAction |\n    SelectOptionFailedAction;\n\nexport type ShippingStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type ShippingStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport interface UpdateAddressRequestedAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressRequested;\n}\n\nexport interface UpdateAddressSucceededAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressSucceeded;\n}\n\nexport interface UpdateAddressFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.UpdateAddressFailed;\n}\n\nexport interface SelectOptionRequestedAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionRequested;\n}\n\nexport interface SelectOptionSucceededAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionSucceeded;\n}\n\nexport interface SelectOptionFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.SelectOptionFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.DeinitializeFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum CouponActionType {\n    ApplyCouponRequested = 'APPLY_COUPON_REQUESTED',\n    ApplyCouponSucceeded = 'APPLY_COUPON_SUCCEEDED',\n    ApplyCouponFailed = 'APPLY_COUPON_FAILED',\n\n    RemoveCouponRequested = 'REMOVE_COUPON_REQUESTED',\n    RemoveCouponSucceeded = 'REMOVE_COUPON_SUCCEEDED',\n    RemoveCouponFailed = 'REMOVE_COUPON_FAILED',\n}\n\nexport type CouponAction =\n    ApplyCouponAction |\n    RemoveCouponAction;\n\nexport type ApplyCouponAction =\n    ApplyCouponRequestedAction |\n    ApplyCouponSucceededAction |\n    ApplyCouponFailedAction;\n\nexport type RemoveCouponAction =\n    RemoveCouponRequestedAction |\n    RemoveCouponSucceededAction |\n    RemoveCouponFailedAction;\n\nexport interface ApplyCouponRequestedAction extends Action {\n    type: CouponActionType.ApplyCouponRequested;\n}\n\nexport interface ApplyCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.ApplyCouponSucceeded;\n}\n\nexport interface ApplyCouponFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: CouponActionType.ApplyCouponFailed;\n}\n\nexport interface RemoveCouponRequestedAction extends Action {\n    type: CouponActionType.RemoveCouponRequested;\n}\n\nexport interface RemoveCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.RemoveCouponSucceeded;\n}\n\nexport interface RemoveCouponFailedAction extends Action<RequestError> {\n    type: CouponActionType.RemoveCouponFailed;\n}\n","import { setPrototypeOf } from '../../utility';\n\nimport CustomError from './custom-error';\n\nexport default class StandardError extends Error implements CustomError {\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = (new Error(this.message)).stack;\n        }\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { InternalOrderResponseData } from './internal-order-responses';\nimport Order from './order';\n\nexport enum OrderActionType {\n    LoadOrderRequested = 'LOAD_ORDER_REQUESTED',\n    LoadOrderSucceeded = 'LOAD_ORDER_SUCCEEDED',\n    LoadOrderFailed = 'LOAD_ORDER_FAILED',\n\n    LoadOrderPaymentsRequested = 'LOAD_ORDER_PAYMENTS_REQUESTED',\n    LoadOrderPaymentsSucceeded = 'LOAD_ORDER_PAYMENTS_SUCCEEDED',\n    LoadOrderPaymentsFailed = 'LOAD_ORDER_PAYMENTS_FAILED',\n\n    SubmitOrderRequested = 'SUBMIT_ORDER_REQUESTED',\n    SubmitOrderSucceeded = 'SUBMIT_ORDER_SUCCEEDED',\n    SubmitOrderFailed = 'SUBMIT_ORDER_FAILED',\n\n    FinalizeOrderRequested = 'FINALIZE_ORDER_REQUESTED',\n    FinalizeOrderSucceeded = 'FINALIZE_ORDER_SUCCEEDED',\n    FinalizeOrderFailed = 'FINALIZE_ORDER_FAILED',\n}\n\nexport type OrderAction = LoadOrderAction |\n    LoadOrderPaymentsAction |\n    SubmitOrderAction |\n    FinalizeOrderAction;\n\nexport type LoadOrderPaymentsAction = LoadOrderPaymentsRequestedAction |\n    LoadOrderPaymentsSucceededAction |\n    LoadOrderPaymentsFailedAction;\n\nexport type LoadOrderAction =\n    LoadOrderRequestedAction |\n    LoadOrderSucceededAction |\n    LoadOrderFailedAction;\n\nexport type SubmitOrderAction =\n    SubmitOrderRequestedAction |\n    SubmitOrderSucceededAction |\n    SubmitOrderFailedAction |\n    LoadOrderAction;\n\nexport type FinalizeOrderAction =\n    FinalizeOrderRequestedAction |\n    FinalizeOrderSucceededAction |\n    FinalizeOrderFailedAction |\n    LoadOrderAction;\n\nexport interface LoadOrderRequestedAction extends Action {\n    type: OrderActionType.LoadOrderRequested;\n}\n\nexport interface LoadOrderSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderSucceeded;\n}\n\nexport interface LoadOrderFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderFailed;\n}\n\nexport interface LoadOrderPaymentsRequestedAction extends Action {\n    type: OrderActionType.LoadOrderPaymentsRequested;\n}\n\nexport interface LoadOrderPaymentsSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderPaymentsSucceeded;\n}\n\nexport interface LoadOrderPaymentsFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderPaymentsFailed;\n}\n\nexport interface SubmitOrderRequestedAction extends Action {\n    type: OrderActionType.SubmitOrderRequested;\n}\n\nexport interface SubmitOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.SubmitOrderSucceeded;\n}\n\nexport interface SubmitOrderFailedAction extends Action<Error> {\n    type: OrderActionType.SubmitOrderFailed;\n}\n\nexport interface FinalizeOrderRequestedAction extends Action {\n    type: OrderActionType.FinalizeOrderRequested;\n}\n\nexport interface FinalizeOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.FinalizeOrderSucceeded;\n}\n\nexport interface FinalizeOrderFailedAction extends Action<Error> {\n    type: OrderActionType.FinalizeOrderFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum BillingAddressActionType {\n    UpdateBillingAddressRequested = 'UPDATE_BILLING_ADDRESS_REQUESTED',\n    UpdateBillingAddressSucceeded = 'UPDATE_BILLING_ADDRESS_SUCCEEDED',\n    UpdateBillingAddressFailed = 'UPDATE_BILLING_ADDRESS_FAILED',\n\n    ContinueAsGuestRequested = 'CONTINUE_AS_GUEST_REQUESTED',\n    ContinueAsGuestSucceeded = 'CONTINUE_AS_GUEST_SUCCEEDED',\n    ContinueAsGuestFailed = 'CONTINUE_AS_GUEST_FAILED',\n}\n\nexport type BillingAddressAction =\n    ContinueAsGuestAction |\n    UpdateBillingAddressAction;\n\nexport type UpdateBillingAddressAction =\n    UpdateBillingAddressRequested |\n    UpdateBillingAddressSucceeded |\n    UpdateBillingAddressFailed;\n\nexport type ContinueAsGuestAction =\n    ContinueAsGuestRequested |\n    ContinueAsGuestSucceeded |\n    ContinueAsGuestFailed;\n\nexport interface UpdateBillingAddressRequested extends Action {\n    type: BillingAddressActionType.UpdateBillingAddressRequested;\n}\n\nexport interface UpdateBillingAddressSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.UpdateBillingAddressSucceeded;\n}\n\nexport interface UpdateBillingAddressFailed extends Action<Error> {\n    type: BillingAddressActionType.UpdateBillingAddressFailed;\n}\n\nexport interface ContinueAsGuestRequested extends Action {\n    type: BillingAddressActionType.ContinueAsGuestRequested;\n}\n\nexport interface ContinueAsGuestSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.ContinueAsGuestSucceeded;\n}\n\nexport interface ContinueAsGuestFailed extends Action<Error> {\n    type: BillingAddressActionType.ContinueAsGuestFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum GiftCertificateActionType {\n    ApplyGiftCertificateRequested = 'APPLY_GIFT_CERTIFICATE_REQUESTED',\n    ApplyGiftCertificateSucceeded = 'APPLY_GIFT_CERTIFICATE_SUCCEEDED',\n    ApplyGiftCertificateFailed = 'APPLY_GIFT_CERTIFICATE_FAILED',\n\n    RemoveGiftCertificateRequested = 'REMOVE_GIFT_CERTIFICATE_REQUESTED',\n    RemoveGiftCertificateSucceeded = 'REMOVE_GIFT_CERTIFICATE_SUCCEEDED',\n    RemoveGiftCertificateFailed = 'REMOVE_GIFT_CERTIFICATE_FAILED',\n}\n\nexport type GiftCertificateAction =\n    ApplyGiftCertificateAction |\n    RemoveGiftCertificateAction;\n\nexport type ApplyGiftCertificateAction =\n    ApplyGiftCertificateRequestedAction |\n    ApplyGiftCertificateSucceededAction |\n    ApplyGiftCertificateFailedAction;\n\nexport type RemoveGiftCertificateAction =\n    RemoveGiftCertificateRequestedAction |\n    RemoveGiftCertificateSucceededAction |\n    RemoveGiftCertificateFailedAction;\n\nexport interface ApplyGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.ApplyGiftCertificateRequested;\n}\n\nexport interface ApplyGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.ApplyGiftCertificateSucceeded;\n}\n\nexport interface ApplyGiftCertificateFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.ApplyGiftCertificateFailed;\n}\n\nexport interface RemoveGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.RemoveGiftCertificateRequested;\n}\n\nexport interface RemoveGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.RemoveGiftCertificateSucceeded;\n}\n\nexport interface RemoveGiftCertificateFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.RemoveGiftCertificateFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport enum PaymentMethodActionType {\n    LoadPaymentMethodRequested = 'LOAD_PAYMENT_METHOD_REQUESTED',\n    LoadPaymentMethodSucceeded = 'LOAD_PAYMENT_METHOD_SUCCEEDED',\n    LoadPaymentMethodFailed = 'LOAD_PAYMENT_METHOD_FAILED',\n\n    LoadPaymentMethodsRequested = 'LOAD_PAYMENT_METHODS_REQUESTED',\n    LoadPaymentMethodsSucceeded = 'LOAD_PAYMENT_METHODS_SUCCEEDED',\n    LoadPaymentMethodsFailed = 'LOAD_PAYMENT_METHODS_FAILED',\n}\n\nexport type PaymentMethodAction = LoadPaymentMethodAction | LoadPaymentMethodsAction;\n\nexport type LoadPaymentMethodAction =\n    LoadPaymentMethodRequestedAction |\n    LoadPaymentMethodSucceededAction |\n    LoadPaymentMethodFailedAction;\n\nexport type LoadPaymentMethodsAction =\n    LoadPaymentMethodsRequestedAction |\n    LoadPaymentMethodsSucceededAction |\n    LoadPaymentMethodsFailedAction;\n\nexport interface LoadPaymentMethodRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodRequested;\n}\n\nexport interface LoadPaymentMethodSucceededAction extends Action<PaymentMethod> {\n    type: PaymentMethodActionType.LoadPaymentMethodSucceeded;\n}\n\nexport interface LoadPaymentMethodFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodFailed;\n}\n\nexport interface LoadPaymentMethodsRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodsRequested;\n}\n\nexport interface LoadPaymentMethodsSucceededAction extends Action<PaymentMethod[], PaymentMethodMeta> {\n    type: PaymentMethodActionType.LoadPaymentMethodsSucceeded;\n}\n\nexport interface LoadPaymentMethodsFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadPaymentMethodAction } from '../payment';\n\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport enum CheckoutButtonActionType {\n    InitializeButtonFailed = 'INITIALIZE_BUTTON_FAILED',\n    InitializeButtonRequested = 'INITIALIZE_BUTTON_REQUESTED',\n    InitializeButtonSucceeded = 'INITIALIZE_BUTTON_SUCCEEDED',\n\n    DeinitializeButtonFailed = 'DEINITIALIZE_BUTTON_FAILED',\n    DeinitializeButtonRequested = 'DEINITIALIZE_BUTTON_REQUESTED',\n    DeinitializeButtonSucceeded = 'DEINITIALIZE_BUTTON_SUCCEEDED',\n}\n\nexport type CheckoutButtonAction = InitializeButtonAction | DeinitializeButtonAction;\n\nexport type InitializeButtonAction =\n    InitializeButtonRequestedAction |\n    InitializeButtonSucceededAction |\n    InitializeButtonFailedAction |\n    LoadPaymentMethodAction;\n\nexport type DeinitializeButtonAction =\n    DeinitializeButtonRequestedAction |\n    DeinitializeButtonSucceededAction |\n    DeinitializeButtonFailedAction;\n\nexport interface CheckoutButtonActionMeta {\n    methodId: CheckoutButtonMethodType;\n}\n\nexport interface InitializeButtonActionMeta extends CheckoutButtonActionMeta {\n    containerId: string;\n}\n\nexport interface InitializeButtonRequestedAction extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonRequested;\n}\n\nexport interface InitializeButtonSucceededAction extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonSucceeded;\n}\n\nexport interface InitializeButtonFailedAction extends Action<Error, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonFailed;\n}\n\nexport interface DeinitializeButtonRequestedAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonRequested;\n}\n\nexport interface DeinitializeButtonSucceededAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonSucceeded;\n}\n\nexport interface DeinitializeButtonFailedAction extends Action<Error, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonFailed;\n}\n","module.exports = require(\"rxjs/operators\");","import { Action } from '@bigcommerce/data-store';\n\nimport { InstrumentsResponseBody } from './instrument-response-body';\n\nexport enum InstrumentActionType {\n    LoadInstrumentsRequested = 'LOAD_INSTRUMENTS_REQUESTED',\n    LoadInstrumentsSucceeded = 'LOAD_INSTRUMENTS_SUCCEEDED',\n    LoadInstrumentsFailed = 'LOAD_INSTRUMENTS_FAILED',\n\n    DeleteInstrumentRequested = 'DELETE_INSTRUMENT_REQUESTED',\n    DeleteInstrumentSucceeded = 'DELETE_INSTRUMENT_SUCCEEDED',\n    DeleteInstrumentFailed = 'DELETE_INSTRUMENT_FAILED',\n}\n\nexport type InstrumentAction =\n    LoadInstrumentsAction |\n    DeleteInstrumentAction;\n\nexport type LoadInstrumentsAction =\n    LoadInstrumentsRequestedAction |\n    LoadInstrumentsSucceededAction |\n    LoadInstrumentsFailedAction;\n\nexport type DeleteInstrumentAction =\n    DeleteInstrumentRequestedAction |\n    DeleteInstrumentSucceededAction |\n    DeleteInstrumentFailedAction;\n\nexport interface LoadInstrumentsRequestedAction extends Action {\n    type: InstrumentActionType.LoadInstrumentsRequested;\n}\n\nexport interface LoadInstrumentsSucceededAction extends Action<InstrumentsResponseBody> {\n    type: InstrumentActionType.LoadInstrumentsSucceeded;\n}\n\nexport interface LoadInstrumentsFailedAction extends Action<Error> {\n    type: InstrumentActionType.LoadInstrumentsFailed;\n}\n\nexport interface DeleteInstrumentRequestedAction extends Action {\n    type: InstrumentActionType.DeleteInstrumentRequested;\n}\n\nexport interface DeleteInstrumentSucceededAction extends Action<InstrumentsResponseBody> {\n    type: InstrumentActionType.DeleteInstrumentSucceeded;\n}\n\nexport interface DeleteInstrumentFailedAction extends Action<Error> {\n    type: InstrumentActionType.DeleteInstrumentFailed;\n}\n","import EmbeddedCheckoutError from './embedded-checkout-error';\nimport EmbeddedContentOptions from './iframe-content/embedded-content-options';\n\nexport enum EmbeddedCheckoutEventType {\n    CheckoutComplete = 'CHECKOUT_COMPLETE',\n    CheckoutError = 'CHECKOUT_ERROR',\n    CheckoutLoaded = 'CHECKOUT_LOADED',\n    FrameError = 'FRAME_ERROR',\n    FrameLoaded = 'FRAME_LOADED',\n    SignedOut = 'SIGNED_OUT',\n}\n\nexport interface EmbeddedCheckoutEventMap {\n    [EmbeddedCheckoutEventType.CheckoutComplete]: EmbeddedCheckoutCompleteEvent;\n    [EmbeddedCheckoutEventType.CheckoutError]: EmbeddedCheckoutErrorEvent;\n    [EmbeddedCheckoutEventType.CheckoutLoaded]: EmbeddedCheckoutLoadedEvent;\n    [EmbeddedCheckoutEventType.FrameError]: EmbeddedCheckoutFrameErrorEvent;\n    [EmbeddedCheckoutEventType.FrameLoaded]: EmbeddedCheckoutFrameLoadedEvent;\n    [EmbeddedCheckoutEventType.SignedOut]: EmbeddedCheckoutSignedOutEvent;\n}\n\nexport type EmbeddedCheckoutEvent = (\n    EmbeddedCheckoutCompleteEvent |\n    EmbeddedCheckoutErrorEvent |\n    EmbeddedCheckoutFrameErrorEvent |\n    EmbeddedCheckoutFrameLoadedEvent |\n    EmbeddedCheckoutLoadedEvent |\n    EmbeddedCheckoutSignedOutEvent\n);\n\nexport interface EmbeddedCheckoutCompleteEvent {\n    type: EmbeddedCheckoutEventType.CheckoutComplete;\n}\n\nexport interface EmbeddedCheckoutErrorEvent {\n    type: EmbeddedCheckoutEventType.CheckoutError;\n    payload: EmbeddedCheckoutError;\n}\n\nexport interface EmbeddedCheckoutLoadedEvent {\n    type: EmbeddedCheckoutEventType.CheckoutLoaded;\n}\n\nexport interface EmbeddedCheckoutFrameErrorEvent {\n    type: EmbeddedCheckoutEventType.FrameError;\n    payload: EmbeddedCheckoutError;\n}\n\nexport interface EmbeddedCheckoutFrameLoadedEvent {\n    type: EmbeddedCheckoutEventType.FrameLoaded;\n    payload?: EmbeddedContentOptions;\n}\n\nexport interface EmbeddedCheckoutSignedOutEvent {\n    type: EmbeddedCheckoutEventType.SignedOut;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { AmazonPayRemoteCheckout } from './methods';\n\nexport enum RemoteCheckoutActionType {\n    InitializeRemoteBillingRequested = 'INITIALIZE_REMOTE_BILLING_REQUESTED',\n    InitializeRemoteBillingSucceeded = 'INITIALIZE_REMOTE_BILLING_SUCCEEDED',\n    InitializeRemoteBillingFailed = 'INITIALIZE_REMOTE_BILLING_FAILED',\n\n    InitializeRemoteShippingRequested = 'INITIALIZE_REMOTE_SHIPPING_REQUESTED',\n    InitializeRemoteShippingSucceeded = 'INITIALIZE_REMOTE_SHIPPING_SUCCEEDED',\n    InitializeRemoteShippingFailed = 'INITIALIZE_REMOTE_SHIPPING_FAILED',\n\n    InitializeRemotePaymentRequested = 'INITIALIZE_REMOTE_PAYMENT_REQUESTED',\n    InitializeRemotePaymentSucceeded = 'INITIALIZE_REMOTE_PAYMENT_SUCCEEDED',\n    InitializeRemotePaymentFailed = 'INITIALIZE_REMOTE_PAYMENT_FAILED',\n\n    LoadRemoteSettingsRequested = 'LOAD_REMOTE_SETTINGS_REQUESTED',\n    LoadRemoteSettingsSucceeded = 'LOAD_REMOTE_SETTINGS_SUCCEEDED',\n    LoadRemoteSettingsFailed = 'LOAD_REMOTE_SETTINGS_FAILED',\n\n    SignOutRemoteCustomerRequested = 'SIGN_OUT_REMOTE_CUSTOMER_REQUESTED',\n    SignOutRemoteCustomerSucceeded = 'SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED',\n    SignOutRemoteCustomerFailed = 'SIGN_OUT_REMOTE_CUSTOMER_FAILED',\n\n    UpdateRemoteCheckout = 'UPDATE_REMOTE_CHECKOUT',\n}\n\nexport type RemoteCheckoutAction = InitializeRemoteBillingAction |\n    InitializeRemoteShippingAction |\n    InitializeRemotePaymentAction |\n    SignOutRemoteCustomerAction |\n    LoadRemoteSettingsAction |\n    UpdateRemoteCheckoutAction;\n\nexport type InitializeRemoteBillingAction = InitializeRemoteBillingSucceededAction |\n    InitializeRemoteBillingFailedAction |\n    InitializeRemoteBillingRequestedAction;\n\nexport interface InitializeRemoteBillingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingSucceeded;\n}\n\nexport interface InitializeRemoteBillingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingFailed;\n}\n\nexport interface InitializeRemoteBillingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingRequested;\n}\n\nexport type InitializeRemoteShippingAction = InitializeRemoteShippingSucceededAction |\n    InitializeRemoteShippingFailedAction |\n    InitializeRemoteShippingRequestedAction;\n\nexport interface InitializeRemoteShippingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingSucceeded;\n}\n\nexport interface InitializeRemoteShippingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingFailed;\n}\n\nexport interface InitializeRemoteShippingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingRequested;\n}\n\nexport type InitializeRemotePaymentAction = InitializeRemotePaymentSucceededAction |\n    InitializeRemotePaymentFailedAction |\n    InitializeRemotePaymentRequestedAction;\n\nexport interface InitializeRemotePaymentSucceededAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentSucceeded;\n}\n\nexport interface InitializeRemotePaymentFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentFailed;\n}\n\nexport interface InitializeRemotePaymentRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentRequested;\n}\n\nexport type SignOutRemoteCustomerAction = SignOutRemoteCustomerSucceededAction |\n    SignOutRemoteCustomerFailedAction |\n    SignOutRemoteCustomerRequestedAction;\n\nexport interface SignOutRemoteCustomerSucceededAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded;\n}\n\nexport interface SignOutRemoteCustomerFailedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerFailed;\n}\n\nexport interface SignOutRemoteCustomerRequestedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerRequested;\n}\n\nexport type LoadRemoteSettingsAction = LoadRemoteSettingsSucceededAction |\n    LoadRemoteSettingsRequestedAction |\n    LoadRemoteSettingsFailedAction;\n\nexport interface LoadRemoteSettingsSucceededAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsSucceeded;\n}\n\nexport interface LoadRemoteSettingsRequestedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsRequested;\n}\n\nexport interface LoadRemoteSettingsFailedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsFailed;\n}\n\nexport interface UpdateRemoteCheckoutAction extends Action {\n    type: RemoteCheckoutActionType.UpdateRemoteCheckout;\n}\n","import { ClearErrorAction, ErrorActionType } from './error-actions';\n\nexport default class ErrorActionCreator {\n    clearError(error: Error): ClearErrorAction {\n        return {\n            type: ErrorActionType.ClearError,\n            payload: error,\n        };\n    }\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport Country from './country';\nimport { CountryActionType } from './country-actions';\nimport CountryRequestSender from './country-request-sender';\n\nexport default class CountryActionCreator {\n    constructor(\n        private _countryRequestSender: CountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<Action<Country[]>> {\n        return Observable.create((observer: Observer<Action<Country[]>>) => {\n            observer.next(createAction(CountryActionType.LoadCountriesRequested));\n\n            this._countryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(CountryActionType.LoadCountriesSucceeded, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CountryActionType.LoadCountriesFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { CountryResponseBody } from './country-responses';\n\nexport default class CountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/store/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","enum PaymentStrategyType {\n    AFFIRM = 'affirm',\n    AFTERPAY = 'afterpay',\n    AMAZON = 'amazon',\n    CREDIT_CARD = 'creditcard',\n    CYBERSOURCE = 'cybersource',\n    KLARNA = 'klarna',\n    LEGACY = 'legacy',\n    OFFLINE = 'offline',\n    OFFSITE = 'offsite',\n    PAYPAL = 'paypal',\n    PAYPAL_EXPRESS = 'paypalexpress',\n    PAYPAL_EXPRESS_CREDIT = 'paypalexpresscredit',\n    SAGE_PAY = 'sagepay',\n    SQUARE = 'squarev2',\n    NO_PAYMENT_DATA_REQUIRED = 'nopaymentdatarequired',\n    BRAINTREE = 'braintree',\n    BRAINTREE_PAYPAL = 'braintreepaypal',\n    BRAINTREE_PAYPAL_CREDIT = 'braintreepaypalcredit',\n    BRAINTREE_VISA_CHECKOUT = 'braintreevisacheckout',\n    BRAINTREE_GOOGLE_PAY = 'googlepaybraintree',\n    CHASE_PAY = 'chasepay',\n    WE_PAY = 'wepay',\n    MASTERPASS = 'masterpass',\n    STRIPE_GOOGLE_PAY = 'googlepaystripe',\n    ZIP = 'zip',\n    CONVERGE = 'converge',\n}\n\nexport default PaymentStrategyType;\n","import { StandardError } from '../../common/error/errors';\n\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.type = 'order_finalization_not_required';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, of, Observable, Observer } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { LoadOrderPaymentsAction, OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../order';\nimport { OrderFinalizationNotRequiredError } from '../order/errors';\n\nimport { PaymentInitializeOptions, PaymentRequestOptions } from './payment-request-options';\nimport {\n    PaymentStrategyActionType,\n    PaymentStrategyDeinitializeAction,\n    PaymentStrategyExecuteAction,\n    PaymentStrategyFinalizeAction,\n    PaymentStrategyInitializeAction,\n    PaymentStrategyWidgetAction,\n} from './payment-strategy-actions';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport PaymentStrategyType from './payment-strategy-type';\nimport { PaymentStrategy } from './strategies';\n\nexport default class PaymentStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: PaymentStrategyRegistry,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<PaymentStrategyExecuteAction, InternalCheckoutSelectors> {\n        return store => new Observable((observer: Observer<PaymentStrategyExecuteAction>) => {\n            const state = store.getState();\n            const { payment = {} as OrderPaymentRequestBody, useStoreCredit } = payload;\n            const meta = { methodId: payment.methodId };\n\n            let strategy: PaymentStrategy;\n\n            if (state.payment.isPaymentDataRequired(useStoreCredit)) {\n                const method = state.paymentMethods.getPaymentMethod(payment.methodId, payment.gatewayId);\n\n                if (!method) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                strategy = this._strategyRegistry.getByMethod(method);\n            } else {\n                strategy = this._strategyRegistry.get(PaymentStrategyType.NO_PAYMENT_DATA_REQUIRED);\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.ExecuteRequested, undefined, meta));\n\n            strategy\n                .execute(payload, { ...options, methodId: payment.methodId, gatewayId: payment.gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.ExecuteSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.ExecuteFailed, error, meta));\n                });\n        });\n    }\n\n    finalize(options?: RequestOptions): ThunkAction<PaymentStrategyFinalizeAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentStrategyActionType.FinalizeRequested)),\n            this._loadOrderPaymentsIfNeeded(store, options),\n            defer(() => {\n                const state = store.getState();\n                const payment = state.payment.getPaymentId();\n\n                if (!payment) {\n                    throw new OrderFinalizationNotRequiredError();\n                }\n\n                const method = state.paymentMethods.getPaymentMethod(payment.providerId, payment.gatewayId);\n\n                if (!method) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._strategyRegistry.getByMethod(method)\n                    .finalize({ ...options, methodId: method.id, gatewayId: method.gateway })\n                    .then(() => createAction(PaymentStrategyActionType.FinalizeSucceeded, undefined, { methodId: payment.providerId }));\n            })\n        ).pipe(\n            catchError(error => {\n                const state = store.getState();\n                const payment = state.payment.getPaymentId();\n\n                return throwErrorAction(PaymentStrategyActionType.FinalizeFailed, error, { methodId: payment && payment.providerId });\n            })\n        );\n    }\n\n    initialize(options: PaymentInitializeOptions): ThunkAction<PaymentStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<PaymentStrategyInitializeAction>) => {\n            const state = store.getState();\n            const { methodId, gatewayId } = options;\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            if (methodId && state.paymentStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.getByMethod(method)\n                .initialize({ ...options, methodId, gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options: PaymentRequestOptions): ThunkAction<PaymentStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<PaymentStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const { methodId, gatewayId } = options;\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            if (methodId && !state.paymentStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.getByMethod(method)\n                .deinitialize({ ...options, methodId, gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: PaymentRequestOptions): ThunkAction<PaymentStrategyWidgetAction> {\n        return store => Observable.create((observer: Observer<PaymentStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(PaymentStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(PaymentStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(PaymentStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n\n    private _loadOrderPaymentsIfNeeded(store: ReadableCheckoutStore, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        const state = store.getState();\n        const checkout = state.checkout.getCheckout();\n\n        if (checkout && checkout.orderId) {\n            return this._orderActionCreator.loadOrderPayments(checkout.orderId, options);\n        }\n\n        return empty();\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class CartChangedError extends StandardError {\n    constructor() {\n        super('An update to your shopping cart has been detected and your available shipping costs have been updated.');\n\n        this.type = 'cart_changed';\n    }\n}\n","import { isEqual, map } from 'lodash';\n\nimport { CartComparator } from '../cart';\nimport { CartChangedError } from '../cart/errors';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { Coupon, GiftCertificate } from '../coupon';\n\nimport Checkout from './checkout';\nimport CheckoutRequestSender from './checkout-request-sender';\n\nexport default class CheckoutValidator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    validate(checkout?: Checkout, options?: RequestOptions): Promise<void> {\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        return this._checkoutRequestSender.loadCheckout(checkout.id, options)\n            .then(response => {\n                const comparator = new CartComparator();\n\n                if (checkout.grandTotal === response.body.grandTotal\n                    && this._compareCoupons(checkout.coupons, response.body.coupons)\n                    && this._compareGiftCertificates(checkout.giftCertificates, response.body.giftCertificates)\n                    && comparator.isEqual(checkout.cart, response.body.cart)\n                ) {\n                    return;\n                }\n\n                throw new CartChangedError();\n            });\n    }\n\n    private _compareCoupons(couponsA: Coupon[], couponsB: Coupon[]): boolean {\n        return isEqual(map(couponsA, 'code'), map(couponsB, 'code'));\n    }\n\n    private _compareGiftCertificates(giftCertificatesA: GiftCertificate[], giftCertificatesB: GiftCertificate[]): boolean {\n        return isEqual(map(giftCertificatesA, 'code'), map(giftCertificatesB, 'code'));\n    }\n}\n","import { PaymentInstrument, VaultedInstrument } from './payment';\n\nexport default function isVaultedInstrument(instrument: PaymentInstrument): instrument is VaultedInstrument {\n    return Boolean((instrument as VaultedInstrument).instrumentId);\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { pick } from 'lodash';\nimport { concat, from, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { mapToInternalAddress } from '../address';\nimport { mapToInternalCart } from '../cart';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { StandardError } from '../common/error/errors';\nimport { mapToInternalCustomer } from '../customer';\nimport { mapToInternalOrder, OrderActionCreator } from '../order';\nimport { mapToInternalShippingOption } from '../shipping';\n\nimport isVaultedInstrument from './is-vaulted-instrument';\nimport Payment from './payment';\nimport { InitializeOffsitePaymentAction, PaymentActionType, SubmitPaymentAction } from './payment-actions';\nimport PaymentMethod from './payment-method';\nimport PaymentMethodSelector from './payment-method-selector';\nimport PaymentRequestBody from './payment-request-body';\nimport PaymentRequestSender from './payment-request-sender';\n\nexport default class PaymentActionCreator {\n    constructor(\n        private _paymentRequestSender: PaymentRequestSender,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    submitPayment(payment: Payment): ThunkAction<SubmitPaymentAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentActionType.SubmitPaymentRequested)),\n            from(this._paymentRequestSender.submitPayment(\n                this._getPaymentRequestBody(payment, store.getState())\n            ))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._orderActionCreator.loadCurrentOrder()(store),\n                        of(createAction(PaymentActionType.SubmitPaymentSucceeded, body))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(PaymentActionType.SubmitPaymentFailed, error))\n        );\n    }\n\n    initializeOffsitePayment(\n        methodId: string,\n        gatewayId?: string\n    ): ThunkAction<InitializeOffsitePaymentAction, InternalCheckoutSelectors> {\n        return store => {\n            const payload = this._getPaymentRequestBody({ gatewayId, methodId }, store.getState());\n\n            return concat(\n                of(createAction(PaymentActionType.InitializeOffsitePaymentRequested)),\n                this._paymentRequestSender.initializeOffsitePayment(payload)\n                    .then(() => createAction(PaymentActionType.InitializeOffsitePaymentSucceeded))\n            ).pipe(\n                catchError(error => throwErrorAction(PaymentActionType.InitializeOffsitePaymentFailed, error))\n            );\n        };\n    }\n\n    private _getPaymentRequestBody(payment: Payment, state: InternalCheckoutSelectors): PaymentRequestBody {\n        const billingAddress = state.billingAddress.getBillingAddress();\n        const checkout = state.checkout.getCheckout();\n        const customer = state.customer.getCustomer();\n        const order = state.order.getOrder();\n        const paymentMethod = this._getPaymentMethod(state.paymentMethods, payment.methodId, payment.gatewayId);\n        const shippingAddress = state.shippingAddress.getShippingAddress();\n        const consignments = state.consignments.getConsignments();\n        const shippingOption = state.consignments.getShippingOption();\n        const storeConfig = state.config.getStoreConfig();\n        const contextConfig = state.config.getContextConfig();\n        const instrumentMeta = state.instruments.getInstrumentsMeta();\n        const paymentMeta = state.paymentMethods.getPaymentMethodsMeta();\n        const orderMeta = state.order.getOrderMeta();\n        const internalCustomer = customer && billingAddress && mapToInternalCustomer(customer, billingAddress);\n\n        const authToken = instrumentMeta && payment.paymentData && isVaultedInstrument(payment.paymentData) ?\n            `${state.payment.getPaymentToken()}, ${instrumentMeta.vaultAccessToken}` :\n            state.payment.getPaymentToken();\n\n        if (!authToken) {\n            throw new StandardError();\n        }\n\n        return {\n            authToken,\n            paymentMethod,\n            customer: internalCustomer,\n            billingAddress: billingAddress && mapToInternalAddress(billingAddress),\n            shippingAddress: shippingAddress && mapToInternalAddress(shippingAddress, consignments),\n            shippingOption: shippingOption && mapToInternalShippingOption(shippingOption, true),\n            cart: checkout && mapToInternalCart(checkout),\n            order: order && mapToInternalOrder(order, orderMeta),\n            orderMeta,\n            payment: payment.paymentData,\n            quoteMeta: {\n                request: {\n                    ...paymentMeta,\n                    geoCountryCode: contextConfig && contextConfig.geoCountryCode,\n                },\n            },\n            source: 'bigcommerce-checkout-js-sdk',\n            store: pick(storeConfig && storeConfig.storeProfile, [\n                'storeHash',\n                'storeId',\n                'storeLanguage',\n                'storeName',\n            ]),\n        };\n    }\n\n    private _getPaymentMethod(\n        paymentMethodSelector: PaymentMethodSelector,\n        methodId: string,\n        gatewayId?: string\n    ): PaymentMethod | undefined {\n        const paymentMethod = paymentMethodSelector.getPaymentMethod(methodId, gatewayId);\n\n        if (!paymentMethod) {\n            return;\n        }\n\n        if (paymentMethod.method === 'multi-option' && !paymentMethod.gateway) {\n            return { ...paymentMethod, gateway: paymentMethod.id };\n        }\n\n        if (paymentMethod.initializationData && paymentMethod.initializationData.gateway) {\n            return { ...paymentMethod, id: paymentMethod.initializationData.gateway };\n        }\n\n        return paymentMethod;\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentRequestBody from './payment-request-body';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class PaymentRequestSender {\n    /**\n     * @constructor\n     * @param {BigpayClient} client\n     */\n    constructor(\n        private _client: any\n    ) {}\n\n    submitPayment(payload: PaymentRequestBody): Promise<Response> {\n        return new Promise((resolve, reject) => {\n            this._client.submitPayment(payload, (error: any, response: any) => {\n                if (error) {\n                    reject(this._transformResponse(error));\n                } else {\n                    resolve(this._transformResponse(response));\n                }\n            });\n        });\n    }\n\n    initializeOffsitePayment(payload: PaymentRequestBody): Promise<void> {\n        return new Promise(() => {\n            this._client.initializeOffsitePayment(payload);\n        });\n    }\n\n    private _transformResponse(response: any): Response {\n        return {\n            headers: {},\n            body: response.data,\n            status: response.status,\n            statusText: response.statusText,\n        };\n    }\n}\n","import { ReadableDataStore } from '@bigcommerce/data-store';\nimport { some } from 'lodash';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { Registry } from '../common/registry';\nimport { RegistryOptions } from '../common/registry/registry';\n\nimport PaymentMethod from './payment-method';\nimport * as paymentMethodTypes from './payment-method-types';\nimport PaymentStrategyType from './payment-strategy-type';\nimport PaymentStrategy from './strategies/payment-strategy';\n\nexport default class PaymentStrategyRegistry extends Registry<PaymentStrategy, PaymentStrategyType> {\n    constructor(\n        private _store: ReadableDataStore<InternalCheckoutSelectors>,\n        options?: PaymentStrategyRegistryOptions\n    ) {\n        super(options);\n    }\n\n    getByMethod(paymentMethod?: PaymentMethod): PaymentStrategy {\n        if (!paymentMethod) {\n            return this.get();\n        }\n\n        const token = this._getToken(paymentMethod);\n        const cacheToken = paymentMethod.gateway || paymentMethod.id;\n\n        return this.get(token, cacheToken);\n    }\n\n    private _getToken(paymentMethod: PaymentMethod): PaymentStrategyType {\n        const methodId = paymentMethod.gateway || paymentMethod.id;\n\n        if (this._hasFactoryForMethod(methodId)) {\n            return methodId;\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.OFFLINE) {\n            return PaymentStrategyType.OFFLINE;\n        }\n\n        if (this._isLegacyMethod(paymentMethod)) {\n            return PaymentStrategyType.LEGACY;\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.HOSTED) {\n            return PaymentStrategyType.OFFSITE;\n        }\n\n        return PaymentStrategyType.CREDIT_CARD;\n    }\n\n    private _hasFactoryForMethod(\n        methodId: string\n    ): methodId is PaymentStrategyType {\n        return this._hasFactory(methodId);\n    }\n\n    private _isLegacyMethod(paymentMethod: PaymentMethod): boolean {\n        const config = this._store.getState().config.getStoreConfig();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        const { clientSidePaymentProviders } = config.paymentSettings;\n\n        if (!clientSidePaymentProviders || paymentMethod.gateway === 'adyen') {\n            return false;\n        }\n\n        return !some(clientSidePaymentProviders, id =>\n            paymentMethod.id === id || paymentMethod.gateway === id\n        );\n    }\n}\n\nexport interface PaymentStrategyRegistryOptions extends RegistryOptions {\n    clientSidePaymentProviders?: string[];\n}\n","import { InvalidArgumentError } from '../../common/error/errors';\n\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(', ')}.`;\n        }\n\n        super(message);\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class PaymentMethodCancelledError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Payment process was cancelled.');\n\n        this.type = 'payment_cancelled';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError, PaymentMethodCancelledError, PaymentMethodInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { Affirm, AffirmAddress, AffirmDiscount, AffirmFailResponse, AffirmItem, AffirmRequestData, AffirmSuccessResponse } from './affirm';\nimport AffirmScriptLoader from './affirm-script-loader';\n\nexport default class AffirmPaymentStrategy implements PaymentStrategy {\n    private _affirm?: Affirm;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _affirmScriptLoader: AffirmScriptLoader\n    ) { }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(options.methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n                if (!paymentMethod || !paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const { config: { testMode }, clientToken: publicKey } = paymentMethod;\n\n                return this._affirmScriptLoader.load(publicKey, testMode);\n            })\n            .then(affirm => {\n                this._affirm = affirm;\n\n                return this._store.getState();\n            });\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const methodId = payload.payment && payload.payment.methodId;\n        const { useStoreCredit } = payload;\n        const { _affirm } = this;\n\n        if (!_affirm) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!methodId) {\n            throw new PaymentArgumentInvalidError(['payment.methodId']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit }, options))\n            .then<AffirmSuccessResponse>(() => {\n                _affirm.checkout(this._getCheckoutInformation(useStoreCredit));\n\n                return new Promise((resolve, reject) => {\n                    _affirm.checkout.open({\n                        onFail: (failObject: AffirmFailResponse) => {\n                            failObject.reason === 'canceled' ? reject(new PaymentMethodCancelledError()) : reject(new PaymentMethodInvalidError());\n                        },\n                        onSuccess: successObject => { resolve(successObject); },\n                    });\n                    _affirm.ui.error.on('close', () => {\n                        reject(new PaymentMethodCancelledError());\n                    });\n                });\n            })\n            .then(result => {\n                const paymentPayload = {\n                    methodId,\n                    paymentData: { nonce: result.checkout_token },\n                };\n\n                return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n            });\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._affirm) {\n            this._affirm = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _getCheckoutInformation(useStoreCredit: boolean = false): AffirmRequestData {\n        const state = this._store.getState();\n        const config = state.config.getStoreConfig();\n        const consignments = state.consignments.getConsignments();\n        const order = state.order.getOrder();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!order) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!consignments) {\n            throw new MissingDataError(MissingDataErrorType.MissingConsignments);\n        }\n\n        const consignment = consignments[0];\n\n        if (!consignment || !consignment.selectedShippingOption) {\n            throw new MissingDataError(MissingDataErrorType.MissingConsignments);\n        }\n\n        return {\n            merchant: {\n                user_confirmation_url: config.links.checkoutLink,\n                user_cancel_url: config.links.checkoutLink,\n                user_confirmation_url_action: 'POST',\n            },\n            shipping: this._getShippingAddress(),\n            billing: this._getBillingAddress(),\n            items: this._getItems(),\n            discounts: this._getDiscounts(),\n            metadata: {\n                shipping_type: consignment.selectedShippingOption.type,\n                mode: 'modal',\n            },\n            order_id: order.orderId ? order.orderId.toString() : '',\n            shipping_amount: order.shippingCostTotal * 100,\n            tax_amount: order.taxTotal * 100,\n            total: order.orderAmount * 100,\n        };\n\n    }\n\n    private _getBillingAddress(): AffirmAddress {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!billingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const billingInformation = {\n            name: {\n                first: billingAddress.firstName,\n                last: billingAddress.lastName,\n                full: `${billingAddress.firstName} ${billingAddress.lastName}`,\n            },\n            address: {\n                line1: billingAddress.address1,\n                line2: billingAddress.address2,\n                city: billingAddress.city,\n                state: billingAddress.stateOrProvinceCode,\n                zipcode: billingAddress.postalCode,\n                country: billingAddress.countryCode,\n            },\n            phone_number: billingAddress.phone,\n            email: billingAddress.email,\n        };\n\n        return billingInformation;\n    }\n\n    private _getShippingAddress(): AffirmAddress {\n        const state = this._store.getState();\n        const shippingAddress = state.shippingAddress.getShippingAddress();\n\n        if (!shippingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingShippingAddress);\n        }\n\n        const shippingInformation = {\n            name: {\n                first: shippingAddress.firstName,\n                last: shippingAddress.lastName,\n                full: `${shippingAddress.firstName} ${shippingAddress.lastName}`,\n            },\n            address: {\n                line1: shippingAddress.address1,\n                line2: shippingAddress.address2,\n                city: shippingAddress.city,\n                state: shippingAddress.stateOrProvinceCode,\n                zipcode: shippingAddress.postalCode,\n                country: shippingAddress.countryCode,\n            },\n            phone_number: shippingAddress.phone,\n        };\n\n        return shippingInformation;\n    }\n\n    private _getItems(): AffirmItem[] {\n        const state = this._store.getState();\n        const cart = state.cart.getCart();\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n        const items: AffirmItem[] = [];\n\n        for (const item of cart.lineItems.physicalItems) {\n            items.push({\n                display_name: item.name,\n                sku: item.sku,\n                unit_price: item.salePrice,\n                qty: item.quantity,\n                item_image_url: item.imageUrl,\n                item_url: item.url,\n            });\n        }\n\n        for (const item of cart.lineItems.digitalItems) {\n            items.push({\n                display_name: item.name,\n                sku: item.sku,\n                unit_price: item.salePrice,\n                qty: item.quantity,\n                item_image_url: item.imageUrl,\n                item_url: item.url,\n            });\n        }\n\n        if (cart.lineItems.customItems) {\n            for (const item of cart.lineItems.customItems) {\n                items.push({\n                    display_name: item.name,\n                    sku: item.sku,\n                    unit_price: item.listPrice,\n                    qty: item.quantity,\n                    item_image_url: '',\n                    item_url: '',\n                });\n            }\n        }\n\n        for (const item of cart.lineItems.giftCertificates) {\n            items.push({\n                display_name: item.name,\n                sku: '',\n                unit_price: item.amount,\n                qty: 1,\n                item_image_url: '',\n                item_url: '',\n            });\n        }\n\n        return items;\n    }\n\n    private _getDiscounts(): AffirmDiscount {\n        const state = this._store.getState();\n        const cart = state.cart.getCart();\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        const discounts: AffirmDiscount = {};\n        for (const line of cart.coupons) {\n            discounts[line.code] = {\n                discount_amount: line.discountedAmount,\n                discount_display_name: line.displayName,\n            };\n        }\n        for (const line of cart.discounts) {\n            discounts[line.id] = {\n                discount_amount: line.discountedAmount,\n                discount_display_name: line.id,\n            };\n        }\n\n        return discounts;\n    }\n\n}\n","/**\n * Used this approach as Affirm uses snipped for initializing. Please refer to Affirm documentation in: https://docs.affirm.com/Integrate_Affirm/Direct_API#1._Add_Affirm.js\n */\nexport default Function(`\n'use strict';\nreturn function loadAffirmJS(apiKey, scriptURL) {\n    var _affirm_config = {\n        public_api_key:  apiKey,\n        script:          scriptURL\n    };\n    (function(l,g,m,e,a,f,b){var d,c=l[m]||{},h=document.createElement(f),n=document.getElementsByTagName(f)[0],k=function(a,b,c){return function(){a[b]._.push([c,arguments])}};c[e]=k(c,e,\"set\");d=c[e];c[a]={};c[a]._=[];d._=[];c[a][b]=k(c,a,b);a=0;for(b=\"set add save post open empty reset on off trigger ready setProduct\".split(\" \");a<b.length;a++)d[b[a]]=k(c,e,b[a]);a=0;for(b=[\"get\",\"token\",\"url\",\"items\"];a<b.length;a++)d[b[a]]=function(){};h.async=!0;h.src=g[f];n.parentNode.insertBefore(h,n);delete g[f];d(g);l[m]=c})(window,_affirm_config,\"affirm\",\"checkout\",\"ui\",\"script\",\"ready\");\n}`)();\n","import { StandardError } from '../../../common/error/errors';\n\nimport { Affirm, AffirmHostWindow, AffirmScripts } from './affirm';\nimport loadAffirmJS from './affirmJs';\n\nexport default class AffirmScriptLoader {\n    constructor(\n        public _window: AffirmHostWindow = window\n    ) { }\n\n    load(apikey?: string, testMode?: boolean): Promise<Affirm> {\n        const scriptURI = this._getScriptURI(testMode);\n\n        loadAffirmJS(apikey, scriptURI);\n        if (!this._window.affirm) {\n            throw new StandardError();\n        }\n\n        return Promise.resolve(this._window.affirm);\n    }\n\n    private _getScriptURI(testMode: boolean = false): string {\n        const SCRIPTS_DEFAULT: AffirmScripts = {\n            PROD: '//cdn1.affirm.com/js/v2/affirm.js',\n            SANDBOX: '//cdn1-sandbox.affirm.com/js/v2/affirm.js',\n        };\n\n        return testMode ? SCRIPTS_DEFAULT.SANDBOX : SCRIPTS_DEFAULT.PROD;\n    }\n}\n","import { CheckoutStore, CheckoutValidator, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AfterpayScriptLoader from './afterpay-script-loader';\nimport AfterpaySdk from './afterpay-sdk';\n\nexport default class AfterpayPaymentStrategy implements PaymentStrategy {\n    private _afterpaySdk?: AfterpaySdk;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutValidator: CheckoutValidator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _afterpayScriptLoader: AfterpayScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId, options.gatewayId);\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._afterpayScriptLoader.load(paymentMethod, this._mapCountryToISO2(storeCountryName))\n            .then(afterpaySdk => {\n                this._afterpaySdk = afterpaySdk;\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._afterpaySdk) {\n            this._afterpaySdk = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paymentId = payload.payment && payload.payment.gatewayId;\n\n        if (!paymentId) {\n            throw new PaymentArgumentInvalidError(['payment.gatewayId']);\n        }\n\n        const useStoreCredit = !!payload.useStoreCredit;\n        const state = this._store.getState();\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(paymentId, { useStoreCredit })\n        )\n            .then(state => this._checkoutValidator.validate(state.checkout.getCheckout(), options))\n            .then(() => this._store.dispatch(\n                this._paymentMethodActionCreator.loadPaymentMethod(paymentId, options)\n            ))\n            .then(state => this._displayModal(storeCountryName, state.paymentMethods.getPaymentMethod(paymentId)))\n            // Afterpay will handle the rest of the flow so return a promise that doesn't really resolve\n            .then(() => new Promise<never>(() => {}));\n    }\n\n    finalize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._remoteCheckoutActionCreator.loadSettings(options.methodId))\n            .then(state => {\n                const payment = state.payment.getPaymentId();\n                const config = state.config.getContextConfig();\n                const afterpay = state.remoteCheckout.getCheckout('afterpay');\n\n                if (!payment) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config || !config.payment.token) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!afterpay || !afterpay.settings) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const orderPayload = {\n                    useStoreCredit: afterpay.settings.useStoreCredit,\n                };\n\n                const paymentPayload = {\n                    methodId: payment.providerId,\n                    paymentData: { nonce: config.payment.token },\n                };\n\n                return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n                    .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload)));\n            });\n    }\n\n    private _displayModal(countryName: string, paymentMethod?: PaymentMethod): void {\n        if (!this._afterpaySdk || !paymentMethod || !paymentMethod.clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._afterpaySdk.initialize({ countryCode: this._mapCountryToISO2(countryName)});\n        this._afterpaySdk.display({ token: paymentMethod.clientToken });\n    }\n\n    private _mapCountryToISO2(countryName: string): string {\n        switch (countryName) {\n        case 'Australia':\n            return 'AU';\n\n        case 'New Zealand':\n            return 'NZ';\n\n        case 'United States':\n            return 'US';\n\n        default:\n            return 'AU';\n        }\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AfterpaySdk from './afterpay-sdk';\nimport AfterpayWindow from './afterpay-window';\n\ninterface AfterpayScripts {\n    PROD: string;\n    SANDBOX: string;\n}\n\nconst SCRIPTS_DEFAULT: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal-sandbox.afterpay.com/afterpay-async.js',\n};\n\nconst SCRIPTS_US: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal.us-sandbox.afterpay.com/afterpay-async.js',\n};\n\n/** Class responsible for loading the Afterpay SDK */\nexport default class AfterpayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    /**\n     * Loads the appropriate Afterpay SDK depending on the payment method data.\n     * @param method the payment method data\n     */\n    load(method: PaymentMethod, countryCode: string): Promise<AfterpaySdk> {\n        const testMode = method.config.testMode || false;\n        const scriptURI = this._getScriptURI(countryCode, testMode);\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (window as AfterpayWindow).AfterPay);\n    }\n\n    private _getScriptURI(countryCode: string, testMode: boolean): string {\n        if (countryCode === 'US') {\n            return testMode ? SCRIPTS_US.SANDBOX : SCRIPTS_US.PROD;\n        }\n\n        return testMode ? SCRIPTS_DEFAULT.SANDBOX : SCRIPTS_DEFAULT.PROD;\n    }\n\n}\n","import { noop } from 'lodash';\n\nimport { isInternalAddressEqual, mapFromInternalAddress, mapToInternalAddress } from '../../../address';\nimport { BillingAddressActionCreator } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AmazonPayOrderReference from './amazon-pay-order-reference';\nimport AmazonPayPaymentInitializeOptions from './amazon-pay-payment-initialize-options';\nimport AmazonPayScriptLoader from './amazon-pay-script-loader';\nimport AmazonPayWallet, { AmazonPayWalletOptions } from './amazon-pay-wallet';\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _walletOptions?: AmazonPayPaymentInitializeOptions;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!amazonOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.amazon\" argument is not provided.');\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._walletOptions = amazonOptions;\n        this._paymentMethod = paymentMethod;\n\n        return new Promise((resolve, reject) => {\n            const onReady = () => {\n                this._createWallet(amazonOptions)\n                    .then(resolve)\n                    .catch(reject);\n            };\n\n            this._scriptLoader.loadWidget(paymentMethod, onReady)\n                .catch(reject);\n        })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._walletOptions = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n\n        if (!referenceId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload }, useStoreCredit = false } = payload;\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { referenceId, useStoreCredit })\n        )\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                }, options)\n            ))\n            .catch(error => {\n                if (error instanceof RequestError && error.body.type === 'provider_widget_error' && this._walletOptions) {\n                    return this._createWallet(this._walletOptions)\n                        .then(() => Promise.reject(error));\n                }\n\n                return Promise.reject(error);\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _getMerchantId(): string | undefined {\n        return this._paymentMethod && this._paymentMethod.config.merchantId;\n    }\n\n    private _getOrderReferenceId(): string | undefined {\n        const state = this._store.getState();\n        const amazon = state.remoteCheckout.getCheckout('amazon');\n\n        return amazon ? amazon.referenceId : undefined;\n    }\n\n    private _createWallet(options: AmazonPayPaymentInitializeOptions): Promise<AmazonPayWallet> {\n        return new Promise((resolve, reject) => {\n            const { container, onError = noop, onPaymentSelect = noop, onReady = noop } = options;\n            const referenceId = this._getOrderReferenceId();\n            const merchantId = this._getMerchantId();\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay Wallet widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const walletOptions: AmazonPayWalletOptions = {\n                amazonOrderReferenceId: referenceId,\n                design: { designMode: 'responsive' },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onPaymentSelect: orderReference => {\n                    this._synchronizeBillingAddress()\n                        .then(() => onPaymentSelect(orderReference))\n                        .catch(onError);\n                },\n                onReady: orderReference => {\n                    resolve();\n                    onReady(orderReference);\n                },\n            };\n\n            if (!walletOptions.amazonOrderReferenceId) {\n                walletOptions.onReady = orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                };\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.Wallet(walletOptions);\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeBillingAddress(): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializeBilling(methodId, { referenceId })\n        )\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.billing && amazon.billing.address;\n                const billingAddress = state.billingAddress.getBillingAddress();\n                const internalBillingAddress = billingAddress && mapToInternalAddress(billingAddress);\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, internalBillingAddress || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._billingAddressActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            });\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n}\n","export interface OverlayOptions {\n    background?: string;\n    id?: string;\n    transitionDuration?: number;\n}\n\nexport interface OverlayShowOptions {\n    onClick?(event: MouseEvent): void;\n}\n\nexport default class Overlay {\n    private _element: HTMLElement;\n    private _unregisterClick?: () => void;\n\n    constructor(options?: OverlayOptions) {\n        this._element = this._createElement(options);\n    }\n\n    show(options?: OverlayShowOptions): void {\n        if (this._element.parentElement) {\n            return;\n        }\n\n        this._registerClick(options);\n\n        document.body.appendChild(this._element);\n\n        // Fade In\n        setTimeout(() => this._element.style.opacity = '1');\n    }\n\n    remove(): void {\n        if (!this._element.parentElement) {\n            return;\n        }\n\n        if (this._unregisterClick) {\n            this._unregisterClick();\n        }\n\n        this._removeAfterTransition();\n\n        setTimeout(() => this._element.style.opacity = '0');\n    }\n\n    private _createElement(options?: OverlayOptions): HTMLElement {\n        const element = document.createElement('div');\n        const {\n            background = 'rgba(0, 0, 0, 0.8)',\n            id = null,\n            transitionDuration = 400,\n        } = options || {};\n\n        element.style.background = background;\n        element.style.display = 'block';\n        element.style.height = '100%';\n        element.style.left = '0px';\n        element.style.opacity = '0';\n        element.style.position = 'fixed';\n        element.style.top = '0px';\n        element.style.transition = `opacity ${transitionDuration}ms ease-out`;\n        element.style.width = '100%';\n        element.style.zIndex = '2147483647';\n\n        if (id) {\n            element.id = id;\n        }\n\n        return element;\n    }\n\n    private _registerClick(options?: OverlayShowOptions): void {\n        if (this._unregisterClick) {\n            this._unregisterClick();\n        }\n\n        if (options && options.onClick) {\n            const { onClick } = options;\n\n            this._element.addEventListener('click', onClick);\n\n            this._unregisterClick = () => {\n                this._element.removeEventListener('click', onClick);\n                this._unregisterClick = undefined;\n            };\n        }\n    }\n\n    private _removeAfterTransition(): void {\n        const handeTransition: (event: Event) => void = event => {\n            // NOTE: `event` is not correctly typed in this version of TS\n            if ((event as TransitionEvent).propertyName !== 'opacity') {\n                return;\n            }\n\n            if (this._element.parentElement) {\n                this._element.parentElement.removeChild(this._element);\n            }\n\n            this._element.removeEventListener('transitionend', handeTransition);\n        };\n\n        this._element.addEventListener('transitionend', handeTransition);\n    }\n}\n","import { Address } from '../../../address';\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { Overlay } from '../../../common/overlay';\nimport { CancellablePromise } from '../../../common/utility';\nimport { OrderPaymentRequestBody } from '../../../order';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport { CreditCardInstrument, NonceInstrument } from '../../payment';\n\nimport { BraintreePaypal, BraintreeRequestData } from './braintree';\nimport { BraintreePaymentInitializeOptions, BraintreeThreeDSecureOptions } from './braintree-payment-options';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default class BraintreePaymentProcessor {\n    private _threeDSecureOptions?: BraintreeThreeDSecureOptions;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _overlay: Overlay\n    ) {}\n\n    initialize(clientToken: string, options?: BraintreePaymentInitializeOptions): void {\n        this._braintreeSDKCreator.initialize(clientToken);\n        this._threeDSecureOptions = options && options.threeDSecure;\n    }\n\n    preloadPaypal(): Promise<BraintreePaypal> {\n        return this._braintreeSDKCreator.getPaypal();\n    }\n\n    tokenizeCard(payment: OrderPaymentRequestBody, billingAddress: Address): Promise<NonceInstrument> {\n        const { paymentData } = payment;\n        const requestData = this._mapToCreditCard(paymentData as CreditCardInstrument, billingAddress);\n\n        return this._braintreeSDKCreator.getClient()\n            .then(client => client.request(requestData))\n            .then(({ creditCards }) => ({\n                nonce: creditCards[0].nonce,\n            }));\n    }\n\n    paypal(amount: number, storeLanguage: string, currency: string, offerCredit: boolean): Promise<NonceInstrument> {\n        return this._braintreeSDKCreator.getPaypal()\n            .then(paypal => {\n                this._overlay.show({\n                    onClick: () => paypal.focusWindow(),\n                });\n\n                return paypal.tokenize({\n                    amount,\n                    currency,\n                    enableShippingAddress: true,\n                    flow: 'checkout',\n                    locale: storeLanguage,\n                    offerCredit,\n                    useraction: 'commit',\n                });\n            })\n            .then(response => {\n                this._overlay.remove();\n\n                return response;\n            })\n            .catch(error => {\n                this._overlay.remove();\n\n                throw error;\n            });\n    }\n\n    verifyCard(payment: OrderPaymentRequestBody, billingAddress: Address, amount: number): Promise<NonceInstrument> {\n        if (!this._threeDSecureOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { addFrame, removeFrame } = this._threeDSecureOptions;\n\n        return Promise.all([\n            this.tokenizeCard(payment, billingAddress),\n            this._braintreeSDKCreator.get3DS(),\n        ]).then(([paymentData, threeDSecure]) => {\n            const { nonce } = paymentData;\n            const cancelVerifyCard = () => threeDSecure.cancelVerifyCard()\n                .then(response => {\n                    verification.cancel(new PaymentMethodCancelledError());\n\n                    return response;\n                });\n\n            const verification = new CancellablePromise(\n                threeDSecure.verifyCard({\n                    addFrame: (error, iframe) => {\n                        addFrame(error, iframe, cancelVerifyCard);\n                    },\n                    amount,\n                    nonce,\n                    removeFrame,\n                })\n            );\n\n            return verification.promise;\n        });\n    }\n\n    appendSessionId(processedPayment: Promise<NonceInstrument>): Promise<NonceInstrument> {\n        return processedPayment\n            .then(paymentData => Promise.all([paymentData, this._braintreeSDKCreator.getDataCollector()]))\n            .then(([paymentData, { deviceData }]) => ({ ...paymentData, deviceSessionId: deviceData }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    private _mapToCreditCard(creditCard: CreditCardInstrument, billingAddress: Address): BraintreeRequestData {\n        let streetAddress = billingAddress.address1;\n\n        if (billingAddress.address2) {\n            streetAddress = ` ${billingAddress.address2}`;\n        }\n\n        return {\n            data: {\n                creditCard: {\n                    cardholderName: creditCard.ccName,\n                    number: creditCard.ccNumber,\n                    cvv: creditCard.ccCvv,\n                    expirationDate: `${creditCard.ccExpiry.month}/${creditCard.ccExpiry.year}`,\n                    options: {\n                        validate: false,\n                    },\n                    billingAddress: {\n                        countryName: billingAddress.country,\n                        postalCode: billingAddress.postalCode,\n                        streetAddress,\n                    },\n                },\n            },\n            endpoint: 'payment_methods/credit_cards',\n            method: 'post',\n        };\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport isCreditCardLike from '../../is-credit-card-like';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport Payment, { PaymentInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\n\nexport default class BraintreeCreditCardPaymentStrategy implements PaymentStrategy {\n    private _is3dsEnabled?: boolean;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(options.methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n                if (!paymentMethod || !paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(paymentMethod.clientToken, options.braintree);\n                this._is3dsEnabled = paymentMethod.config.is3dsEnabled;\n\n                return this._store.getState();\n            })\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(order, options)\n        )\n            .then(state =>\n                state.payment.isPaymentDataRequired(order.useStoreCredit) && payment ?\n                    this._preparePaymentData(payment) :\n                    Promise.resolve(payment as Payment)\n            )\n            .then(payment =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment(payment))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n\n    private _isUsingVaulting(paymentData: PaymentInstrument): boolean {\n        if (isCreditCardLike(paymentData)) {\n            return Boolean(paymentData.shouldSaveInstrument);\n        }\n\n        return isVaultedInstrument(paymentData);\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody): Promise<Payment> {\n        const { paymentData } = payment;\n        const state = this._store.getState();\n\n        if (paymentData && this._isUsingVaulting(paymentData)) {\n            return Promise.resolve(payment as Payment);\n        }\n\n        const order = state.order.getOrder();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!order) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrder);\n        }\n\n        if (!billingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const tokenizedCard = this._is3dsEnabled ?\n            this._braintreePaymentProcessor.verifyCard(payment, billingAddress, order.orderAmount) :\n            this._braintreePaymentProcessor.tokenizeCard(payment, billingAddress);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData }));\n    }\n}\n","import isVaultedInstrument from './is-vaulted-instrument';\nimport { CreditCardInstrument, PaymentInstrument } from './payment';\n\nexport default function isCreditCardLike(instrument: PaymentInstrument): instrument is CreditCardInstrument {\n    const card = instrument as CreditCardInstrument;\n\n    return !isVaultedInstrument(card) &&\n        typeof card.ccName === 'string' &&\n        typeof card.ccNumber === 'string' &&\n        typeof card.ccExpiry === 'object' &&\n        typeof card.ccExpiry.month === 'string' &&\n        typeof card.ccExpiry.year === 'string';\n    }\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError, PaymentMethodCancelledError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { BraintreeError } from './braintree';\nimport BraintreePaymentProcessor from './braintree-payment-processor';\nimport isBraintreeError from './is-braintree-error';\n\nexport default class BraintreePaypalPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor,\n        private _credit: boolean = false\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintree: braintreeOptions, methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (this._paymentMethod && this._paymentMethod.nonce) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(this._paymentMethod.clientToken, braintreeOptions);\n\n                return this._braintreePaymentProcessor.preloadPaypal();\n            })\n            .then(() => this._store.getState())\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return (payment ? this._preparePaymentData(payment, order.useStoreCredit) : Promise.resolve(payment))\n            .then(payment => Promise.all([payment, this._store.dispatch(this._orderActionCreator.submitOrder(order, options))]))\n            .then(([payment]) => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)))\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _handleError(error: BraintreeError | Error): never {\n        if (!isBraintreeError(error)) {\n            throw error;\n        }\n\n        if (error.code === 'PAYPAL_POPUP_CLOSED') {\n            throw new PaymentMethodCancelledError(error.message);\n        }\n\n        throw new StandardError(error.message);\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody, useStoreCredit?: boolean): Promise<Payment> {\n        const state = this._store.getState();\n        const grandTotal = state.checkout.getGrandTotal(useStoreCredit);\n        const config = state.config.getStoreConfig();\n\n        if (!grandTotal) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { currency, storeProfile: { storeLanguage } } = config;\n        const { method, nonce } = this._paymentMethod;\n\n        if (nonce) {\n            return Promise.resolve({ ...payment, paymentData: { nonce, method } });\n        }\n\n        const tokenizedCard = this._braintreePaymentProcessor\n            .paypal(grandTotal, storeLanguage, currency.code, this._credit);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData: { ...paymentData, method } }));\n    }\n}\n","export enum ChasePayEventType {\n    StartCheckout = 'startCheckout',\n    CompleteCheckout = 'completeCheckout',\n    CancelCheckout = 'cancelCheckout',\n}\n\nexport interface ChasePayEventMap {\n    [ChasePayEventType.StartCheckout](digitalSessionId: string): void;\n    [ChasePayEventType.CompleteCheckout](payload: ChasePaySuccessPayload): void;\n    [ChasePayEventType.CancelCheckout](): void;\n}\n\nexport interface ChasePayHostWindow extends Window {\n    JPMC?: JPMC;\n}\n\nexport interface JPMC {\n    ChasePay: ChasePay;\n}\n\nexport interface ChasePaySuccessPayload {\n    sessionToken: string;\n}\n\nexport interface ChasePayInsertOptions {\n    color?: string;\n    containers?: string[];\n    height?: number;\n    width?: number;\n}\n\nexport interface ChasePayConfigureOptions {\n    language?: string;\n    zindex?: number;\n    sessionWarningTime?: number;\n    sessionTimeoutTime?: number;\n}\n\nexport interface ChasePay {\n    EventType: {\n        START_CHECKOUT: ChasePayEventType.StartCheckout;\n        COMPLETE_CHECKOUT: ChasePayEventType.CompleteCheckout;\n        CANCEL_CHECKOUT: ChasePayEventType.CancelCheckout;\n    };\n    isChasePayUp(): boolean;\n    insertButtons(options: ChasePayInsertOptions): void;\n    insertBrandings(options: ChasePayInsertOptions): void;\n    startCheckout(digitalSessionId?: string): void;\n    showLoadingAnimation(): void;\n    configure(options: ChasePayConfigureOptions): void;\n    on<ChasePayEventType extends keyof ChasePayEventMap>(eventType: ChasePayEventType, callback: ChasePayEventMap[ChasePayEventType]): {};\n}\n\nexport interface ChasePayInitializeOptions {\n    /**\n     * This container is used to host the chasepay branding logo.\n     * It should be an HTML element.\n     */\n    logoContainer: string;\n\n    /**\n     * This walletButton is used to set an event listener, provide an element ID if you want\n     * users to be able to launch the ChasePay wallet modal by clicking on a button.\n     * It should be an HTML element.\n     */\n    walletButton?: string;\n\n    /**\n     * A callback that gets called when the customer selects a payment option.\n     */\n    onPaymentSelect?(): void;\n}\n","import { BraintreeError } from './braintree';\n\nexport default function isBraintreeError(error: BraintreeError | Error): error is BraintreeError {\n    return error.name === 'BraintreeError';\n}\n","import { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreeVisaCheckoutPaymentProcessor from './braintree-visacheckout-payment-processor';\nimport { VisaCheckoutPaymentSuccessPayload } from './visacheckout';\nimport VisaCheckoutScriptLoader from './visacheckout-script-loader';\n\nexport default class BraintreeVisaCheckoutPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    onError = () => {},\n                    onPaymentSelect = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: false,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, visaInitOptions]) => {\n                    visaCheckout.init(visaInitOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .then(() => onPaymentSelect())\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (payment, error) => onError(error));\n                });\n            })\n            .then(() => this._store.getState());\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData || !this._paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { nonce } = this._paymentMethod.initializationData;\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData: { nonce } }))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                paymentSuccessPayload,\n                state.shippingAddress.getShippingAddress(),\n                state.billingAddress.getBillingAddress()\n            )\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { Subject } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { toFormUrlEncoded } from '../../../common/http-request';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\nimport { WepayRiskClient } from '../wepay';\n\nimport { ChasePay, ChasePayEventType, ChasePaySuccessPayload } from './chasepay';\nimport ChasePayInitializeOptions from './chasepay-initialize-options';\nimport ChasePayScriptLoader from './chasepay-script-loader';\n\nexport default class ChasePayPaymentStrategy implements PaymentStrategy {\n    private _chasePayClient?: ChasePay;\n    private _methodId!: string;\n    private _walletButton?: HTMLElement;\n    private _walletEvent$: Subject<{ type: ChasePayEventType }>;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        this._walletEvent$ = new Subject();\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        if (!options.chasepay) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.chasepay\" argument is not provided.');\n        }\n\n        const walletButton = options.chasepay.walletButton && document.getElementById(options.chasepay.walletButton);\n\n        if (walletButton) {\n            this._walletButton = walletButton;\n            this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n        }\n\n        return this._configureWallet(options.chasepay)\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._chasePayClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._getPayment()\n            .catch(error => {\n                if (error.subtype === MissingDataErrorType.MissingPayment) {\n                    return this._displayWallet()\n                        .then(() => this._getPayment());\n                }\n\n                throw error;\n            })\n            .then(payment =>\n                this._createOrder(payment, payload.useStoreCredit, options)\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _configureWallet(options: ChasePayInitializeOptions): Promise<void> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return this._chasePayScriptLoader.load(paymentMethod.config.testMode)\n            .then(({ ChasePay }) => {\n                this._chasePayClient = ChasePay;\n\n                if (options.logoContainer && document.getElementById(options.logoContainer)) {\n                    this._chasePayClient.insertBrandings({\n                        color: 'white',\n                        containers: [options.logoContainer],\n                    });\n                }\n\n                this._chasePayClient.configure({\n                    language: storeConfig.storeProfile.storeLanguage,\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CancelCheckout, () => {\n                    this._walletEvent$.next({ type: ChasePayEventType.CancelCheckout });\n\n                    if (options.onCancel) {\n                        options.onCancel();\n                    }\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CompleteCheckout, (payload: ChasePaySuccessPayload) => {\n                    this._setSessionToken(payload.sessionToken)\n                        .then(() => {\n                            this._walletEvent$.next({ type: ChasePayEventType.CompleteCheckout });\n\n                            if (options.onPaymentSelect) {\n                                options.onPaymentSelect();\n                            }\n                        });\n                });\n            });\n    }\n\n    private _displayWallet(): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n                .then(state => {\n                    const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                    if (!this._chasePayClient) {\n                        throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                    }\n\n                    if (!paymentMethod) {\n                        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                    }\n\n                    this._chasePayClient.showLoadingAnimation();\n                    this._chasePayClient.startCheckout(paymentMethod.initializationData.digitalSessionId);\n                });\n\n            // Wait for payment selection\n            return new Promise((resolve, reject) => {\n                this._walletEvent$\n                    .pipe(take(1))\n                    .subscribe((event: { type: ChasePayEventType }) => {\n                        if (event.type === ChasePayEventType.CancelCheckout) {\n                            reject(new PaymentMethodCancelledError());\n                        } else if (event.type === ChasePayEventType.CompleteCheckout) {\n                            resolve();\n                        }\n                    });\n            });\n        }, { methodId: this._methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _setSessionToken(sessionToken: string): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const merchantRequestId = paymentMethod && paymentMethod.initializationData.merchantRequestId;\n\n        return this._requestSender.post('checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: toFormUrlEncoded({\n                action: 'set_external_checkout',\n                provider: this._methodId,\n                sessionToken,\n                merchantRequestId,\n            }),\n        })\n            // Re-hydrate checkout data\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId)),\n            ]))\n            .then(() => this._store.getState());\n    }\n\n    private _getPayment(): Promise<Payment> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n            .then(() => {\n                if (this._methodId === 'wepay') {\n                    return this._wepayRiskClient.initialize()\n                        .then(client => client.getRiskToken());\n                }\n\n                return '';\n            })\n            .then(riskToken => {\n                const state = this._store.getState();\n                const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!paymentMethod.initializationData.paymentCryptogram) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPayment);\n                }\n\n                const paymentData = {\n                    method: this._methodId,\n                    cryptogramId: paymentMethod.initializationData.paymentCryptogram,\n                    eci: paymentMethod.initializationData.eci,\n                    transactionId: btoa(paymentMethod.initializationData.reqTokenId),\n                    ccExpiry: {\n                        month: paymentMethod.initializationData.expDate.toString().substr(0, 2),\n                        year: paymentMethod.initializationData.expDate.toString().substr(2, 2),\n                    },\n                    ccNumber: paymentMethod.initializationData.accountNum,\n                    accountMask: paymentMethod.initializationData.accountMask,\n                    extraData: riskToken ? { riskToken } : undefined,\n                };\n\n                return {\n                    methodId: this._methodId,\n                    paymentData,\n                };\n            });\n    }\n\n    private _createOrder(payment: Payment, useStoreCredit?: boolean, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit }, options))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)));\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): void {\n        event.preventDefault();\n\n        this._displayWallet();\n    }\n}\n","const SignatureValidationErrors = [100004, 1010, 1011, 1020];\nexport default SignatureValidationErrors;\n\nexport interface CyberSourceCardinal {\n    configure(params: CardinalConfiguration): void;\n    on(params: CardinalEventType, callback: CardinalEventMap[CardinalEventType]): void;\n    setup(initializationType: CardinalInitializationType, initializationData: CardinalInitializatinDataMap[CardinalInitializationType]): void;\n    trigger(event: CardinalTriggerEvents, data?: string): Promise<CardinalBinProccessResponse | void>;\n    continue(paymentBrand: CardinalPaymentBrand, continueObject: ContinueObject, order: PartialOrder): void;\n}\n\nexport interface CardinalWindow extends Window {\n    Cardinal?: CyberSourceCardinal;\n}\n\nexport enum CardinalEventType {\n    SetupCompleted = 'payments.setupComplete',\n    Validated = 'payments.validated',\n}\n\nexport interface CardinalEventMap {\n    [CardinalEventType.SetupCompleted](setupCompleteData: SetupCompletedData): void;\n    [CardinalEventType.Validated](data: CardinalValidatedData, jwt?: string): void;\n}\n\nexport type CardinalConfiguration = Partial<{\n    logging?: {\n        level: string,\n    };\n    payment?: {\n        view?: string,\n        framework?: string,\n        displayLoading?: boolean,\n    };\n}>;\n\nexport interface SetupCompletedData {\n    sessionId: string;\n    modules: ModuleState[];\n}\n\nexport interface ModuleState {\n    loaded: boolean;\n    module: string;\n}\n\nexport enum CardinalInitializationType {\n    Init = 'init',\n    Complete = 'complete',\n    Confirm = 'confirm',\n}\n\nexport interface CardinalInitializatinDataMap {\n    [CardinalInitializationType.Init]: InitTypeData;\n    [CardinalInitializationType.Complete]: CompleteTypeData;\n    [CardinalInitializationType.Confirm]: ConfirmTypeData;\n}\n\nexport interface InitTypeData {\n    jwt: string;\n}\n\nexport interface CompleteTypeData {\n    Status: string;\n}\n\nexport interface ConfirmTypeData {\n    jwt: string;\n    cardinalResponseJwt: string;\n}\n\nexport enum CardinalValidatedAction {\n    SUCCCESS = 'SUCCESS',\n    NOACTION = 'NOACTION',\n    FAILURE = 'FAILURE',\n    ERROR = 'ERROR',\n}\n\nexport interface CardinalValidatedData {\n    ActionCode?: CardinalValidatedAction;\n    ErrorDescription: string;\n    ErrorNumber: number;\n    Validated?: boolean;\n    Payment?: Payment;\n}\n\nexport interface Payment {\n    ProcessorTransactionId: string;\n    Type: PaymentType;\n}\n\nexport enum PaymentType {\n    CCA = 'CCA',\n    Paypal = 'Paypal',\n    Wallet = 'Wallet',\n    VisaCheckout = 'VisaCheckout',\n    ApplePay = 'ApplePay',\n    DiscoverWallet = 'DiscoverWallet',\n}\n\nexport enum CardinalTriggerEvents {\n    ACCOUNT_NUMBER_UPDATE = 'accountNumber.update',\n    BIN_PROCCESS = 'bin.process',\n    JWT_UPDATE = 'jwt.update',\n    ORDER_UPDATE = 'order.update',\n}\n\nexport interface CardinalBinProccessResponse {\n    Status: string;\n}\n\nexport enum CardinalPaymentBrand {\n    CCA = 'cca',\n}\n\nexport interface ContinueObject {\n    AcsUrl: string;\n    Payload: string;\n}\n\nexport interface PartialOrder {\n    OrderDetails: Orderdetails;\n}\n\nexport interface Orderdetails {\n    OrderNumber?: string;\n    Amount?: number;\n    CurrencyCode?: string;\n    OrderChannel?: string;\n    TransactionId: string;\n}\n\nexport enum CardinalPaymentStep {\n    SETUP = 'setup',\n    AUTHORIZATION = 'authorization',\n}\n\nexport enum CardinalEventAction {\n    ERROR = 'error',\n    OK = 'ok',\n}\n\nexport interface CardinalEventResponse {\n    type: {\n        step: CardinalPaymentStep;\n        action: CardinalEventAction;\n    };\n    jwt?: string;\n    data?: CardinalValidatedData;\n    status: boolean;\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class ConvergePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _formPoster: FormPoster\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            )\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                    return Promise.reject(error);\n                }\n\n                return new Promise(() => {\n                    this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                        PaReq: error.body.three_ds_result.payer_auth_request,\n                        TermUrl: error.body.three_ds_result.callback_url,\n                        MD: error.body.three_ds_result.merchant_data,\n                    });\n                });\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class CreditCardPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody} from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\n\nimport {CreditCardInstrument} from '../../payment';\nimport PaymentMethod from '../../payment-method';\n\nexport default class CyberSourcePaymentProcessor {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    initialize(paymentMethod: PaymentMethod): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payment: OrderPaymentRequestBody, order: OrderRequestBody, paymentData: CreditCardInstrument, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport OrderRequestBody from '../../../order/order-request-body';\nimport { CreditCardInstrument } from '../../payment';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport CyberSourcePaymentProcessor from './cybersource-payment-processor';\nimport CyberSourceThreeDSecurePaymentProcessor from './cybersource-threedsecure-payment-processor';\n\nexport default class CyberSourcePaymentStrategy implements PaymentStrategy {\n    private _processor?: CyberSourcePaymentProcessor | CyberSourceThreeDSecurePaymentProcessor;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _threeDSecurePaymentProcessor: CyberSourceThreeDSecurePaymentProcessor,\n        private _paymentProcessor: CyberSourcePaymentProcessor\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)).then( state => {\n            this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n            if (!this._paymentMethod || !this._paymentMethod.config) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            this._processor = this._paymentMethod.config.is3dsEnabled ? this._threeDSecurePaymentProcessor : this._paymentProcessor;\n\n            return this._processor.initialize(this._paymentMethod);\n        });\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData as CreditCardInstrument;\n\n        if (!this._processor) {\n            return Promise.reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n        }\n\n        if (!payment || !paymentData) {\n            return Promise.reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n        }\n\n        return this._processor.execute(payment, order, paymentData, options);\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._processor) {\n            return Promise.reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n        }\n\n        return this._processor.finalize(options);\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._processor) {\n            return Promise.reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n        }\n\n        return this._processor.deinitialize(options);\n    }\n}\n","import {ScriptLoader} from '@bigcommerce/script-loader';\n\nimport StandardError from '../../../common/error/errors/standard-error';\n\nimport {CardinalWindow, CyberSourceCardinal} from './cybersource';\n\nconst SDK_TEST_URL = 'https://songbirdstag.cardinalcommerce.com/edge/v1/songbird.js';\nconst SDK_PROD_URL = 'https://songbird.cardinalcommerce.com/edge/v1/songbird.js';\n\nexport default class CyberSourceScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: CardinalWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<CyberSourceCardinal> {\n        return this._scriptLoader\n            .loadScript(testMode ? SDK_TEST_URL : SDK_PROD_URL)\n            .then(() => {\n                if (!this._window.Cardinal) {\n                    throw new StandardError();\n                }\n\n                return this._window.Cardinal;\n            });\n    }\n}\n","import { includes, some } from 'lodash';\nimport { Subject } from 'rxjs/index';\nimport { take } from 'rxjs/operators';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType,\n    RequestError\n} from '../../../common/error/errors';\nimport StandardError from '../../../common/error/errors/standard-error';\nimport {OrderActionCreator, OrderPaymentRequestBody} from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport OrderRequestBody from '../../../order/order-request-body';\nimport {CreditCardInstrument, ThreeDSecure} from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentRequestOptions } from '../../payment-request-options';\n\nimport {\n    default as SignatureValidationErrors,\n    CardinalEventAction, CardinalEventResponse, CardinalEventType, CardinalInitializationType, CardinalPaymentBrand,\n    CardinalPaymentStep,\n    CardinalTriggerEvents,\n    CardinalValidatedAction, CardinalValidatedData, CyberSourceCardinal, SetupCompletedData,\n} from './cybersource';\nimport CyberSourceScriptLoader from './cybersource-script-loader';\n\nexport default class CyberSourceThreeDSecurePaymentProcessor {\n    private _Cardinal?: CyberSourceCardinal;\n    private _paymentMethod?: PaymentMethod;\n    private _cardinalEvent$: Subject<CardinalEventResponse>;\n    private _isSetupCompleted = false;\n    private _cardinalSessionId?: string;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _cyberSourceScriptLoader: CyberSourceScriptLoader\n    ) {\n        this._cardinalEvent$ = new Subject();\n    }\n\n    initialize(paymentMethod: PaymentMethod): Promise<InternalCheckoutSelectors> {\n        if (this._isSetupCompleted) {\n            Promise.resolve(this._store.getState());\n        }\n\n        this._paymentMethod = paymentMethod;\n\n        if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const clientToken = this._paymentMethod.clientToken;\n\n        return this._cyberSourceScriptLoader.load(this._paymentMethod.config.testMode)\n            .then(Cardinal => {\n                this._Cardinal = Cardinal;\n\n                this._Cardinal.configure({\n                    logging: {\n                        level: 'on',\n                    },\n                });\n\n                this._Cardinal.on(CardinalEventType.SetupCompleted, (setupCompletedData: SetupCompletedData) => {\n                    this._resolveSetupEvent();\n                });\n\n                this._Cardinal.on(CardinalEventType.Validated, (data: CardinalValidatedData, jwt: string) => {\n                    switch (data.ActionCode) {\n                        case CardinalValidatedAction.SUCCCESS:\n                            this._resolveAuthorizationPromise(jwt);\n                            break;\n                        case CardinalValidatedAction.NOACTION:\n                            if (data.ErrorNumber > 0) {\n                                this._rejectAuthorizationPromise(data, CardinalEventAction.ERROR);\n                            } else {\n                                this._resolveAuthorizationPromise(jwt);\n                            }\n                            break;\n                        case CardinalValidatedAction.FAILURE:\n                            data.ErrorDescription = 'User failed authentication or an error was encountered while processing the transaction';\n                            this._rejectAuthorizationPromise(data, CardinalEventAction.ERROR);\n                            break;\n                        case CardinalValidatedAction.ERROR:\n                            if (includes(SignatureValidationErrors, data.ErrorNumber)) {\n                                this._rejectSetupEvent();\n                            } else {\n                                this._rejectAuthorizationPromise(data, CardinalEventAction.ERROR);\n                            }\n                    }\n                });\n\n                this._Cardinal.setup(CardinalInitializationType.Init, {\n                    jwt: clientToken,\n                });\n\n                this._isSetupCompleted = true;\n\n                return new Promise((resolve, reject) => {\n                    this._cardinalEvent$\n                        .pipe(take(1))\n                        .subscribe((event: CardinalEventResponse) => {\n                            if (event.type.step === CardinalPaymentStep.SETUP) {\n                                if (!event.status) {\n                                    reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n                                }\n                                resolve();\n                            }\n                        });\n                });\n            }).then(() => this._store.getState());\n    }\n\n    execute(payment: OrderPaymentRequestBody, order: OrderRequestBody, paymentData: CreditCardInstrument, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._Cardinal) {\n            return Promise.reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n        }\n\n        return this._Cardinal.trigger(CardinalTriggerEvents.BIN_PROCCESS, paymentData.ccNumber).then(result => {\n            if (result && result.Status) {\n                return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n                    .then(() =>\n                        this._store.dispatch(\n                            this._paymentActionCreator.submitPayment({\n                                ...payment,\n                                paymentData: this._addThreeDSecureData(paymentData, { session: this._cardinalSessionId }),\n                            })\n                        )\n                    ).catch(error => {\n                        if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'enrolled_card' })) {\n                            return Promise.reject(error);\n                        }\n\n                        if (!this._Cardinal) {\n                            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                        }\n\n                        const continueObject = {\n                            AcsUrl: error.body.three_ds_result.acs_url,\n                            Payload: error.body.three_ds_result.merchant_data,\n                        };\n\n                        const partialOrder = {\n                            OrderDetails: {\n                                TransactionId: error.body.three_ds_result.payer_auth_request,\n                            },\n                        };\n\n                        this._Cardinal.continue(CardinalPaymentBrand.CCA, continueObject, partialOrder);\n\n                        // If credit card is enrolled in 3DS Cybersource will handle the rest of the flow\n                        return new Promise<string>((resolve, reject) => {\n                            this._cardinalEvent$\n                                .pipe(take(1))\n                                .subscribe((event: CardinalEventResponse) => {\n                                    if (event.type.step === CardinalPaymentStep.AUTHORIZATION) {\n                                        if (event.status) {\n                                            resolve(event.jwt);\n                                        } else {\n                                            const message = event.data ? event.data.ErrorDescription : '';\n                                            reject(new StandardError(message));\n                                        }\n                                    }\n                                });\n                        }).then(jwt =>\n                            this._store.dispatch(\n                                this._paymentActionCreator.submitPayment({\n                                    ...payment,\n                                    paymentData: this._addThreeDSecureData(paymentData, { session: this._cardinalSessionId, token: jwt }),\n                                })\n                            )\n                        );\n                    });\n            } else {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n        });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _resolveAuthorizationPromise(jwt: string): void {\n        this._cardinalEvent$.next({\n            type: {\n                step: CardinalPaymentStep.AUTHORIZATION,\n                action: CardinalEventAction.OK,\n            },\n            jwt,\n            status: true,\n        });\n    }\n\n    private _resolveSetupEvent(): void {\n        this._cardinalEvent$.next({\n            type: {\n                step: CardinalPaymentStep.SETUP,\n                action: CardinalEventAction.OK,\n            },\n            status: true,\n        });\n    }\n\n    private _rejectSetupEvent(): void {\n        this._cardinalEvent$.next({\n            type: {\n                step: CardinalPaymentStep.SETUP,\n                action: CardinalEventAction.ERROR,\n            },\n            status: false,\n        });\n    }\n\n    private _rejectAuthorizationPromise(data: CardinalValidatedData, action: CardinalEventAction): void {\n        this._cardinalEvent$.next({\n            type: {\n                step: CardinalPaymentStep.AUTHORIZATION,\n                action,\n            },\n            data,\n            status: false,\n        });\n    }\n\n    private _addThreeDSecureData(payment: CreditCardInstrument, threeDSecure: ThreeDSecure): CreditCardInstrument {\n        payment.threeDSecure = threeDSecure;\n\n        return payment;\n    }\n}\n","export default interface SquarePaymentForm {\n    build(): void;\n    requestCardNonce(): void;\n    setPostalCode(postalCode: string): void;\n}\n\nexport interface SquarePaymentFormConstructor {\n    new(options: SquareFormOptions): SquarePaymentForm;\n}\n\nexport interface SquareFormOptions {\n    applicationId: string;\n    env: string;\n    locationId: string;\n    inputClass?: string;\n    inputStyles?: string[];\n    callbacks?: SquareFormCallbacks;\n    cardNumber: SquareFormElement;\n    cvv: SquareFormElement;\n    expirationDate: SquareFormElement;\n    postalCode: SquareFormElement;\n    masterpass: SquareFormElement;\n}\nexport interface LineItem {\n    label: string;\n    amount: string;\n    pending: boolean;\n}\n\nexport interface SquarePaymentRequest {\n    requestShippingAddress: boolean;\n    requestBillingInfo: boolean;\n    shippingContact?: Contact;\n    countryCode: string;\n    currencyCode: string;\n    lineItems?: LineItem[];\n    total: LineItem;\n}\n\nexport interface NonceGenerationError {\n    type: string;\n    message: string;\n    field: string;\n}\n\nexport interface CardData {\n    card_brand: CardBrand;\n    last_4: number;\n    exp_month: number;\n    exp_year: number;\n    billing_postal_code: string;\n    digital_wallet_type: DigitalWalletType;\n}\n\nexport interface Contact {\n    familyName: string;\n    givenName: string;\n    email: string;\n    country: string;\n    countryName: string;\n    region: string;\n    city: string;\n    addressLines: string[];\n    postalCode: string;\n    phone: string;\n}\n\nexport enum CardBrand {\n    americanExpress = 'AMERICAN_EXPRESS',\n    discover = 'DISCOVER',\n    discoverDiners = 'DISCOVER_DINERS',\n    JCB = 'JCB',\n    masterCard = 'MASTERCARD',\n    unionPay = 'CHINA_UNIONPAY',\n    unknown = 'OTHER_BRAND',\n    visa = 'VISA',\n    squareGift = 'SQUARE_GIFT_CARD',\n}\n\nexport enum DigitalWalletType {\n    applePay = 'APPLEPAY',\n    masterpass = 'MASTERPASS',\n    none = 'NONE',\n}\n\n/**\n * Configures any form element provided by Square payment.\n */\nexport interface SquareFormElement {\n    /**\n     * The ID of the container which the form element should insert into.\n     */\n    elementId: string;\n\n    /**\n     * The placeholder text to use for the form element, if provided.\n     */\n    placeholder?: string;\n}\n\nexport interface SquareFormCallbacks {\n    paymentFormLoaded?(form: SquarePaymentForm): void;\n    unsupportedBrowserDetected?(): void;\n    cardNonceResponseReceived?(\n        errors?: NonceGenerationError[],\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): void;\n    methodsSupported?(methods: { [key: string]: boolean }): void;\n    createPaymentRequest?(): void;\n}\n\nexport type SquareFormFactory = (options: SquareFormOptions) => SquarePaymentForm;\n","\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { GooglePaymentData, PaymentMethodData } from './googlepay';\nimport GooglePayPaymentInitializeOptions from './googlepay-initialize-options';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\n\nexport default class GooglePayPaymentStrategy implements PaymentStrategy {\n    private _googlePayOptions?: GooglePayPaymentInitializeOptions;\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        return this._googlePayPaymentProcessor.initialize(this._methodId)\n            .then(() => {\n                this._googlePayOptions = this._getGooglePayOptions(options);\n\n                if (!this._googlePayOptions) {\n                    throw new InvalidArgumentError('Unable to initialize payment because \"options.googlepay\" argument is not provided.');\n                }\n\n                const walletButton = this._googlePayOptions.walletButton && document.getElementById(this._googlePayOptions.walletButton);\n\n                if (walletButton) {\n                    this._walletButton = walletButton;\n                    this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                }\n\n                return this._store.getState();\n            });\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n\n        return this._googlePayPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._googlePayOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.googlepay\" argument is not provided.');\n        }\n\n        const {\n            onError = () => {},\n            onPaymentSelect = () => {},\n        } = this._googlePayOptions;\n\n        return Promise.resolve(this._getPayment())\n            .then(payment => {\n                if (!payment.paymentData.nonce || !payment.paymentData.cardInformation) {\n                    // TODO: Find a way to share the code with _handleWalletButtonClick method\n                    return this._googlePayPaymentProcessor.displayWallet()\n                        .then(paymentData => this._paymentInstrumentSelected(paymentData))\n                        .then(() => onPaymentSelect())\n                        .then(() => this._getPayment())\n                        .catch(error => {\n                            if (error.statusCode !== 'CANCELED') {\n                                onError(error);\n                            }\n                        });\n                }\n\n                return payment;\n            })\n            .then(payment =>\n                this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit: payload.useStoreCredit }, options))\n                    .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(this._getPayment())))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _paymentInstrumentSelected(paymentData: GooglePaymentData) {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const methodId = this._methodId;\n\n        // TODO: Revisit how we deal with GooglePaymentData after receiving it from Google\n        return this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n    }\n\n    private _getGooglePayOptions(options: PaymentInitializeOptions): GooglePayPaymentInitializeOptions {\n        if (options.methodId === 'googlepaybraintree' && options.googlepaybraintree) {\n            return options.googlepaybraintree;\n        }\n\n        if (options.methodId === 'googlepaystripe' && options.googlepaystripe) {\n            return options.googlepaystripe;\n        }\n\n        throw new InvalidArgumentError();\n    }\n\n    private _getPayment(): PaymentMethodData {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const paymentData = {\n            method: this._methodId,\n            nonce: paymentMethod.initializationData.nonce,\n            cardInformation: paymentMethod.initializationData.card_information,\n        };\n\n        return {\n            methodId: this._methodId,\n            paymentData,\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<InternalCheckoutSelectors> {\n        event.preventDefault();\n\n        if (!this._methodId || !this._googlePayOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const methodId = this._methodId;\n\n        const {\n            onError = () => {},\n            onPaymentSelect = () => {},\n        } = this._googlePayOptions;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._googlePayPaymentProcessor.displayWallet()\n                .then(paymentData => this._paymentInstrumentSelected(paymentData))\n                .then(() => onPaymentSelect())\n                .catch(error => {\n                    if (error.statusCode !== 'CANCELED') {\n                        onError(error);\n                    }\n                });\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n}\n","import { includes } from 'lodash';\n\nimport { Address } from '../../../address';\nimport BillingAddress from '../../../billing/billing-address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport PaymentMethodInvalidError from '../../errors/payment-method-invalid-error';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport KlarnaCredit, { KlarnaAddress, KlarnaLoadResponse, KlarnaUpdateSessionParams } from './klarna-credit';\nimport KlarnaScriptLoader from './klarna-script-loader';\n\nexport default class KlarnaPaymentStrategy implements PaymentStrategy {\n    private _klarnaCredit?: KlarnaCredit;\n    private _unsubscribe?: (() => void);\n    private _supportedEUCountries = ['AT', 'DE', 'DK', 'FI', 'GB', 'NL', 'NO', 'SE', 'CH'];\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _klarnaScriptLoader: KlarnaScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._klarnaScriptLoader.load()\n            .then(klarnaCredit => { this._klarnaCredit = klarnaCredit; })\n            .then(() => {\n                this._unsubscribe = this._store.subscribe(\n                    state => {\n                        if (state.paymentStrategies.isInitialized(options.methodId)) {\n                            this._loadWidget(options);\n                        }\n                    },\n                    state => {\n                        const checkout = state.checkout.getCheckout();\n\n                        return checkout && checkout.grandTotal;\n                    }\n                );\n\n                return this._loadWidget(options);\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._unsubscribe) {\n            this._unsubscribe();\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload } } = payload;\n\n        return this._authorize()\n            .then(({ authorization_token: authorizationToken }) => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { authorizationToken })\n            ))\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                    // Note: API currently doesn't support using Store Credit with Klarna.\n                    // To prevent deducting customer's store credit, set it as false.\n                    useStoreCredit: false,\n                }, options)\n            ));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _loadWidget(options: PaymentInitializeOptions): Promise<KlarnaLoadResponse> {\n        if (!options.klarna) {\n            throw new InvalidArgumentError('Unable to load widget because \"options.klarna\" argument is not provided.');\n        }\n\n        const { methodId, klarna: { container, onLoad } } = options;\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise<KlarnaLoadResponse>((resolve, reject) => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                const billingAddress = state.billingAddress.getBillingAddress();\n                const shippingAddress = state.shippingAddress.getShippingAddress();\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!billingAddress) {\n                    throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n                }\n\n                if (!this._klarnaCredit || !paymentMethod.clientToken) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const updateSessionData = this._getUpdateSessionData(billingAddress, shippingAddress);\n\n                this._klarnaCredit.init({ client_token: paymentMethod.clientToken });\n\n                this._klarnaCredit.load({ container }, updateSessionData, response => {\n                    if (onLoad) {\n                        onLoad(response);\n                    }\n\n                    if (!response.show_form) {\n                        reject(new PaymentMethodInvalidError());\n                    } else {\n                        resolve(response);\n                    }\n                });\n            }));\n    }\n\n    private _getUpdateSessionData(billingAddress: BillingAddress, shippingAddress?: Address): KlarnaUpdateSessionParams {\n        if (!includes(this._supportedEUCountries, billingAddress.countryCode)) {\n            return {};\n        }\n\n        const data: KlarnaUpdateSessionParams = {\n            billing_address: this._mapToKlarnaAddress(billingAddress, billingAddress.email),\n        };\n\n        if (shippingAddress) {\n            data.shipping_address = this._mapToKlarnaAddress(shippingAddress, billingAddress.email);\n        }\n\n        return data;\n    }\n\n    private _mapToKlarnaAddress(address: Address, email?: string): KlarnaAddress {\n        return {\n            street_address: address.address1,\n            city: address.city,\n            country: address.countryCode,\n            given_name: address.firstName,\n            family_name: address.lastName,\n            postal_code: address.postalCode,\n            region: address.stateOrProvince,\n            email,\n        };\n    }\n\n    private _authorize(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            if (!this._klarnaCredit) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            this._klarnaCredit.authorize({}, res => {\n                if (res.approved) {\n                    return resolve(res);\n                }\n\n                if (res.show_form) {\n                    return reject(new PaymentMethodCancelledError());\n                }\n\n                reject(new PaymentMethodInvalidError());\n            });\n        });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport KlarnaCredit from './klarna-credit';\nimport KlarnaWindow from './klarna-window';\n\nconst SDK_URL = '//credit.klarnacdn.net/lib/v1/api.js';\n\nexport default class KlarnaScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<KlarnaCredit> {\n        return this._scriptLoader.loadScript(SDK_URL)\n            .then(() => (window as KlarnaWindow).Klarna.Credit);\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class LegacyPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport getCallbackUrl from './get-callback-url';\nimport { Masterpass, MasterpassCheckoutOptions } from './masterpass';\nimport MasterpassScriptLoader from './masterpass-script-loader';\n\nexport default class MasterpassPaymentStrategy implements PaymentStrategy {\n    private _masterpassClient?: Masterpass;\n    private _paymentMethod?: PaymentMethod;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._masterpassScriptLoader.load(this._paymentMethod.config.testMode)\n            .then(masterpass => {\n                this._masterpassClient = masterpass;\n\n                if (!options.masterpass) {\n                    throw new InvalidArgumentError('Unable to initialize payment because \"options.masterpass\" argument is not provided.');\n                }\n\n                const walletButton  = options.masterpass.walletButton && document.getElementById(options.masterpass.walletButton);\n\n                if (walletButton) {\n                    this._walletButton = walletButton;\n                    this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                }\n\n                return this._store.getState();\n            });\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._masterpassClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment } = payload;\n        const order = { useStoreCredit: payload.useStoreCredit };\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData || !this._paymentMethod.initializationData.gateway) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        // TODO: Refactor the API endpoint to return nonce in the right place.\n        const paymentData = this._paymentMethod.initializationData.paymentData;\n\n        // TODO: Redirect to Masterpass if nonce has not been generated yet. And then finalise the order when the shopper is redirected back to the checkout page.\n        if (!paymentData) {\n            throw new InvalidArgumentError('Unable to proceed because \"paymentMethod.initializationData.paymentData\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData })));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: this._paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.subtotal.toFixed(2),\n            currency: storeConfig.currency.code,\n            cartId: checkout.cart.id,\n            suppressShippingAddress: false,\n            callbackUrl: getCallbackUrl('checkout'),\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event) {\n        event.preventDefault();\n\n        if (!this._masterpassClient) {\n            return;\n        }\n\n        const payload = this._createMasterpassPayload();\n        this._masterpassClient.checkout(payload);\n    }\n}\n","import { omit } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class NoPaymentDataRequiredPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options)\n        );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class OfflinePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const action = this._orderActionCreator.submitOrder({\n            ...payload,\n            payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n        }, options);\n\n        return this._store.dispatch(action);\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class OffsitePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const orderPayload = this._shouldSubmitFullPayload(payment) ? payload : order;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.initializeOffsitePayment(payment.methodId, payment.gatewayId))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n        const status = state.payment.getPaymentStatus();\n\n        if (order && (status === paymentStatusTypes.ACKNOWLEDGE || status === paymentStatusTypes.FINALIZE)) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _shouldSubmitFullPayload(payment?: OrderPaymentRequestBody): boolean {\n        // FIXME: A temporary workaround to support offsite payment methods\n        // where their return URL needs to be provided by the core app.\n        if (!payment) {\n            return false;\n        }\n\n        return payment.gatewayId === 'adyen' || payment.methodId === 'ccavenuemars';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\n\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class PaypalProPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isPaymentAcknowledged()) {\n            return this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n                }, options)\n            );\n        }\n\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _isPaymentAcknowledged(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nimport PaypalScriptLoader from './paypal-script-loader';\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalExpressPaymentStrategy implements PaymentStrategy {\n    private _paypalSdk?: PaypalSDK;\n    private _paymentMethod?: PaymentMethod;\n    private _useRedirectFlow: boolean = false;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _scriptLoader: PaypalScriptLoader,\n        private _window: PaypalHostWindow = window\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n        this._useRedirectFlow = (options.paypalexpress && options.paypalexpress.useRedirectFlow) === true;\n\n        if (!this._isInContextEnabled()) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._scriptLoader.loadPaypal()\n            .then(paypal => {\n                this._paypalSdk = paypal;\n\n                if (!this._paymentMethod || !this._paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._paypalSdk.checkout.setup(this._paymentMethod.config.merchantId, {\n                    button: 'paypal-button',\n                    environment: this._paymentMethod.config.testMode ? 'sandbox' : 'production',\n                });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._isInContextEnabled() && this._paypalSdk) {\n            this._paypalSdk.checkout.closeFlow();\n            this._paypalSdk = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paypal = this._paypalSdk;\n\n        if (this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n        }\n\n        if (!this._isInContextEnabled() || this._useRedirectFlow) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n                .then(state => {\n                    const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                    if (redirectUrl) {\n                        this._window.top.location.href = redirectUrl;\n                    }\n\n                    // We need to hold execution so the consumer does not redirect us somewhere else\n                    return new Promise<never>(() => {});\n                });\n        }\n\n        if (!paypal) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        paypal.checkout.initXO();\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n            .then(state => {\n                const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                if (redirectUrl) {\n                    paypal.checkout.startFlow(redirectUrl);\n                }\n\n                // We need to hold execution so the consumer does not redirect us somewhere else\n                return new Promise<never>(() => {});\n            })\n            .catch(error => {\n                paypal.checkout.closeFlow();\n\n                return Promise.reject(error);\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _isAcknowledgedOrFinalized(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE\n            || state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE;\n    }\n\n    private _isInContextEnabled(): boolean {\n        return !!(this._paymentMethod && this._paymentMethod.config.merchantId);\n    }\n}\n","import { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class SagePayPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _formPoster: any\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            )\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                    return Promise.reject(error);\n                }\n\n                return new Promise(() => {\n                    this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                        PaReq: error.body.three_ds_result.payer_auth_request,\n                        TermUrl: error.body.three_ds_result.callback_url,\n                        MD: error.body.three_ds_result.merchant_data,\n                    });\n                });\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import StandardError from './standard-error';\n\nexport default class UnsupportedBrowserError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unsupported browser error');\n\n        this.type = 'unsupported_browser';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\nimport { omit } from 'lodash';\nimport { noop } from 'rxjs';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    StandardError,\n    TimeoutError,\n    UnsupportedBrowserError,\n} from '../../../common/error/errors';\nimport { toFormUrlEncoded } from '../../../common/http-request';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { NonceInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport SquarePaymentForm, {\n    CardData,\n    Contact,\n    DigitalWalletType,\n    NonceGenerationError,\n    SquareFormElement,\n    SquareFormOptions,\n    SquarePaymentRequest\n} from './square-form';\nimport SquarePaymentInitializeOptions from './square-payment-initialize-options';\nimport SquareScriptLoader from './square-script-loader';\n\nexport default class SquarePaymentStrategy implements PaymentStrategy {\n    private _deferredRequestNonce?: DeferredPromise;\n    private _paymentForm?: SquarePaymentForm;\n    private _paymentMethod?: PaymentMethod;\n    private _squareOptions?: SquarePaymentInitializeOptions;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _scriptLoader: SquareScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n\n        this._syncPaymentMethod(methodId);\n\n        return this._scriptLoader.load()\n            .then(createSquareForm =>\n                new Promise((resolve, reject) => {\n                    this._paymentForm = createSquareForm(\n                        this._getFormOptions(options, { resolve, reject })\n                    );\n                    this._paymentForm.build();\n                }))\n            .then(() => this._store.getState());\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment } = orderRequest;\n\n        if (!payment || !payment.methodId) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        this._syncPaymentMethod(payment.methodId);\n\n        return this._getNonceInstrument(payment.methodId)\n            .then(paymentData =>\n                this._store.dispatch(this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options))\n                .then(() =>\n                    this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n                ));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _syncPaymentMethod(methodId: string): void {\n        const state = this._store.getState();\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n    }\n\n    private _getCountryCode(countryName: string) {\n        switch (countryName.toUpperCase()) {\n            case 'NEW ZELAND':\n                return 'NZ';\n            case 'AUSTRALIA':\n                return 'AU';\n            default:\n                return 'US';\n        }\n    }\n\n    private _getNonceInstrument(methodId: string): Promise<NonceInstrument> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (paymentMethod) {\n            const { initializationData } = paymentMethod;\n            if (initializationData && initializationData.paymentData.nonce) {\n                return Promise.resolve({ nonce: paymentMethod.initializationData.paymentData.nonce });\n            }\n        }\n\n        return new Promise<NonceInstrument>((resolve, reject) => {\n            if (!this._paymentForm) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            if (this._deferredRequestNonce) {\n                this._deferredRequestNonce.reject(new TimeoutError());\n            }\n\n            this._deferredRequestNonce = { resolve, reject };\n            this._paymentForm.requestCardNonce();\n        });\n    }\n\n    private _getFormOptions(options: PaymentInitializeOptions, deferred: DeferredPromise): SquareFormOptions {\n        const { square: squareOptions } = options;\n\n        if (!squareOptions || !this._paymentMethod) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.square\" argument is not provided.');\n        }\n\n        this._squareOptions = squareOptions;\n\n        return {\n            ...this._squareOptions,\n            ...this._paymentMethod.initializationData,\n            callbacks: {\n                cardNonceResponseReceived: (errors, nonce, cardData, billingContact, shippingContact) => {\n                    if (cardData && cardData.digital_wallet_type !== DigitalWalletType.none) {\n                        this._handleWalletNonceResponse(errors, nonce, cardData, billingContact, shippingContact);\n                    } else {\n                        this._handleCardNonceResponse(errors, nonce);\n                    }\n                },\n                createPaymentRequest: () => this._paymentRequestPayload(),\n                methodsSupported: methods => {\n                    const { masterpass } = squareOptions;\n\n                    if (masterpass) {\n                        this._showPaymentMethods(methods, masterpass);\n                    }\n                },\n                paymentFormLoaded: () => {\n                    deferred.resolve();\n                    this._setPostalCode();\n                },\n                unsupportedBrowserDetected: () => deferred.reject(new UnsupportedBrowserError()),\n            },\n        };\n    }\n\n    private _handleWalletNonceResponse(\n        errors?: NonceGenerationError[],\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact\n    ): void {\n        const onError = this._squareOptions && this._squareOptions.onError || noop;\n        const onPaymentSelect = this._squareOptions && this._squareOptions.onPaymentSelect || noop;\n\n        if (errors) {\n            onError(errors);\n        } else if (nonce && this._paymentMethod) {\n            this._paymentInstrumentSelected(\n                this._paymentMethod.id,\n                nonce,\n                cardData,\n                billingContact,\n                shippingContact\n            )\n                .then(onPaymentSelect)\n                .catch(onError);\n        }\n    }\n\n    private _handleCardNonceResponse(errors?: NonceGenerationError[], nonce?: string): void {\n        if (!this._deferredRequestNonce) {\n            throw new StandardError();\n        }\n\n        if (nonce && !errors) {\n            this._deferredRequestNonce.resolve({ nonce });\n\n            return;\n        }\n\n        const onError = this._squareOptions && this._squareOptions.onError || noop;\n\n        onError(errors);\n\n        this._deferredRequestNonce.reject(errors);\n    }\n\n    private _paymentInstrumentSelected(\n        methodId: string,\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): Promise<InternalCheckoutSelectors> {\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._setExternalCheckoutData(nonce, cardData, billingContact, shippingContact)\n            .then(() =>\n                Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _paymentRequestPayload(): SquarePaymentRequest {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return {\n            requestShippingAddress: true,\n            requestBillingInfo: true,\n            currencyCode: storeConfig.currency.code,\n            countryCode: this._getCountryCode(storeConfig.storeProfile.storeCountry),\n            total: {\n                label: storeConfig.storeProfile.storeName,\n                amount: String(checkout.subtotal),\n                pending: false,\n            },\n        };\n    }\n\n    private _setExternalCheckoutData(nonce?: string, cardData?: CardData, billingContact?: Contact, shippingContact?: Contact): Promise<Response<any>> {\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: toFormUrlEncoded({\n                nonce,\n                provider: 'squarev2',\n                action: 'set_external_checkout',\n                cardData: JSON.stringify(cardData),\n                billingContact: JSON.stringify(billingContact),\n                shippingContact: JSON.stringify(shippingContact),\n            }),\n        });\n    }\n\n    private _setPostalCode(): void {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!this._paymentForm) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (billingAddress && billingAddress.postalCode) {\n            this._paymentForm.setPostalCode(billingAddress.postalCode);\n        }\n    }\n\n    private _showPaymentMethods(methods: { [key: string]: boolean }, element: SquareFormElement): void {\n        const masterpassBtn = document.getElementById(element.elementId);\n\n        if (masterpassBtn && methods.masterpass) {\n            masterpassBtn.style.display = 'inline-block';\n        }\n    }\n}\n\nexport interface DeferredPromise {\n    resolve(resolution?: NonceInstrument): void;\n    reject(reason?: any): void;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { SquareFormFactory, SquareFormOptions } from './square-form';\nimport SquareWindow from './square-window';\n\nexport default class SquareScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<SquareFormFactory> {\n        const scriptURI = '//js.squareup.com/v2/paymentform';\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (options: SquareFormOptions) =>\n                new (window as SquareWindow).SqPaymentForm(options)\n            );\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport WepayRisk from './wepay-risk';\nimport WepayWindow from './wepay-window';\n\nconst SCRIPT_SRC = '//static.wepay.com/min/js/risk.1.latest.js';\n\nexport default class WepayRiskClient {\n    private _riskClient?: WepayRisk;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    initialize(): Promise<WepayRiskClient> {\n        return this._scriptLoader\n            .loadScript(SCRIPT_SRC)\n            .then(() => this._riskClient = (window as WepayWindow).WePay.risk)\n            .then(() => this);\n    }\n\n    getRiskToken(): string {\n        if (!this._riskClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._riskClient.generate_risk_token();\n\n        return this._riskClient.get_risk_token();\n    }\n}\n","import { merge } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport CreditCardPaymentStrategy from '../credit-card/credit-card-payment-strategy';\n\nimport WepayRiskClient from './wepay-risk-client';\n\nexport default class WepayPaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        orderActionCreator: OrderActionCreator,\n        paymentActionCreator: PaymentActionCreator,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        super(store, orderActionCreator, paymentActionCreator);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._wepayRiskClient.initialize();\n\n        return super.initialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const token = this._wepayRiskClient.getRiskToken();\n        const payloadWithToken = merge({}, payload, {\n            payment: {\n                paymentData: {\n                    deviceSessionId: token,\n                },\n            },\n        });\n\n        return super.execute(payloadWithToken, options);\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport PaymentMethodInvalidError from '../../errors/payment-method-invalid-error';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { Zip, ZipModalEvent } from './zip';\nimport ZipScriptLoader from './zip-script-loader';\n\nexport default class ZipPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _zipClient?: Zip;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _zipScriptLoader: ZipScriptLoader\n    ) { }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._zipScriptLoader.load()\n            .then(zip => {\n                this._zipClient = zip;\n\n                return this._store.getState();\n            });\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n        this._zipClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const { _zipClient: zipClient } = this;\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!zipClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(payment.methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(payment.methodId);\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n            })\n            .then(()  => {\n                return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n                    .then(() => new Promise<string>((resolve, reject) => {\n                        zipClient.Checkout.init({\n                            onComplete: ({ checkoutId, state }) => {\n                                if (state === ZipModalEvent.CancelCheckout) {\n                                    return reject(new PaymentMethodCancelledError());\n                                }\n\n                                if (state === ZipModalEvent.CheckoutApproved && checkoutId) {\n                                    return resolve(checkoutId);\n                                }\n\n                                reject(new PaymentMethodInvalidError());\n                            },\n                            onCheckout: openModal => {\n                                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                                }\n\n                                openModal(JSON.parse(this._paymentMethod.clientToken));\n                            },\n                        });\n                    })\n                    .then(nonce =>\n                        this._store.dispatch(this._paymentActionCreator.submitPayment({\n                            methodId: payment.methodId,\n                            paymentData: { nonce },\n                        }))\n                    ));\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { Zip, ZipHostWindow } from '../zip/zip';\n\nexport default class ZipScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: ZipHostWindow = window\n    ) {}\n\n    load(): Promise<Zip> {\n        return this._scriptLoader\n            .loadScript(`//static.zipmoney.com.au/checkout/checkout-v1.min.js`)\n            .then(() => {\n                if (!this._window.Zip) {\n                    throw new StandardError();\n                }\n\n                return this._window.Zip;\n            });\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore, CheckoutValidator } from '../checkout';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport PaymentActionCreator from './payment-action-creator';\nimport PaymentMethodActionCreator from './payment-method-action-creator';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\nimport PaymentRequestSender from './payment-request-sender';\nimport PaymentStrategyActionCreator from './payment-strategy-action-creator';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport PaymentStrategyType from './payment-strategy-type';\nimport { AffirmPaymentStrategy, AffirmScriptLoader } from './strategies/affirm';\nimport { AfterpayPaymentStrategy, AfterpayScriptLoader } from './strategies/afterpay';\nimport { AmazonPayPaymentStrategy, AmazonPayScriptLoader } from './strategies/amazon-pay';\nimport {\n    createBraintreePaymentProcessor,\n    createBraintreeVisaCheckoutPaymentProcessor,\n    BraintreeCreditCardPaymentStrategy,\n    BraintreePaypalPaymentStrategy,\n    BraintreeScriptLoader,\n    BraintreeSDKCreator,\n    BraintreeVisaCheckoutPaymentStrategy,\n    VisaCheckoutScriptLoader\n} from './strategies/braintree';\nimport { ChasePayPaymentStrategy, ChasePayScriptLoader } from './strategies/chasepay';\nimport { ConvergePaymentStrategy } from './strategies/converge';\nimport { CreditCardPaymentStrategy } from './strategies/credit-card';\nimport CyberSourcePaymentProcessor from './strategies/cybersource/cybersource-payment-processor';\nimport CyberSourcePaymentStrategy from './strategies/cybersource/cybersource-payment-strategy';\nimport CyberSourceScriptLoader from './strategies/cybersource/cybersource-script-loader';\nimport CyberSourceThreeDSecurePaymentProcessor from './strategies/cybersource/cybersource-threedsecure-payment-processor';\nimport {\n    createGooglePayPaymentProcessor,\n    GooglePayBraintreeInitializer,\n    GooglePayPaymentStrategy,\n    GooglePayStripeInitializer\n} from './strategies/googlepay';\nimport { KlarnaPaymentStrategy, KlarnaScriptLoader } from './strategies/klarna';\nimport { LegacyPaymentStrategy } from './strategies/legacy';\nimport { MasterpassPaymentStrategy, MasterpassScriptLoader } from './strategies/masterpass';\nimport { NoPaymentDataRequiredPaymentStrategy } from './strategies/no-payment';\nimport { OfflinePaymentStrategy } from './strategies/offline';\nimport { OffsitePaymentStrategy } from './strategies/offsite';\nimport { PaypalExpressPaymentStrategy, PaypalProPaymentStrategy, PaypalScriptLoader } from './strategies/paypal';\nimport { SagePayPaymentStrategy } from './strategies/sage-pay';\nimport { SquarePaymentStrategy, SquareScriptLoader } from './strategies/square';\nimport { WepayPaymentStrategy, WepayRiskClient } from './strategies/wepay';\nimport { ZipPaymentStrategy, ZipScriptLoader } from './strategies/zip';\n\nexport default function createPaymentStrategyRegistry(\n    store: CheckoutStore,\n    paymentClient: any,\n    requestSender: RequestSender\n) {\n    const registry = new PaymentStrategyRegistry(store, { defaultToken: PaymentStrategyType.CREDIT_CARD });\n    const scriptLoader = getScriptLoader();\n    const billingAddressActionCreator = new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender));\n    const braintreePaymentProcessor = createBraintreePaymentProcessor(scriptLoader);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutValidator = new CheckoutValidator(checkoutRequestSender);\n    const orderActionCreator = new OrderActionCreator(new OrderRequestSender(requestSender), checkoutValidator);\n    const paymentActionCreator = new PaymentActionCreator(new PaymentRequestSender(paymentClient), orderActionCreator);\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(new RemoteCheckoutRequestSender(requestSender));\n    const configActionCreator = new ConfigActionCreator(new ConfigRequestSender(requestSender));\n    const checkoutActionCreator = new CheckoutActionCreator(checkoutRequestSender, configActionCreator);\n    const paymentStrategyActionCreator = new PaymentStrategyActionCreator(registry, orderActionCreator);\n    const formPoster = createFormPoster();\n\n    registry.register(PaymentStrategyType.AFFIRM, () =>\n        new AffirmPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            new AffirmScriptLoader()\n        )\n    );\n\n    registry.register(PaymentStrategyType.AFTERPAY, () =>\n        new AfterpayPaymentStrategy(\n            store,\n            checkoutValidator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new AfterpayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.AMAZON, () =>\n        new AmazonPayPaymentStrategy(\n            store,\n            orderActionCreator,\n            billingAddressActionCreator,\n            remoteCheckoutActionCreator,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.CREDIT_CARD, () =>\n        new CreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.CYBERSOURCE, () =>\n        new CyberSourcePaymentStrategy(\n            store,\n            paymentMethodActionCreator,\n            new CyberSourceThreeDSecurePaymentProcessor(\n                store,\n                orderActionCreator,\n                paymentActionCreator,\n                new CyberSourceScriptLoader(scriptLoader)\n            ),\n            new CyberSourcePaymentProcessor(\n                store,\n                orderActionCreator,\n                paymentActionCreator\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.KLARNA, () =>\n        new KlarnaPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new KlarnaScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.LEGACY, () =>\n        new LegacyPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.OFFLINE, () =>\n        new OfflinePaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.OFFSITE, () =>\n        new OffsitePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL, () =>\n        new PaypalProPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL_EXPRESS, () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL_EXPRESS_CREDIT, () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.SAGE_PAY, () =>\n        new SagePayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            formPoster\n        )\n    );\n\n    registry.register(PaymentStrategyType.SQUARE, () =>\n        new SquarePaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new SquareScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.NO_PAYMENT_DATA_REQUIRED, () =>\n        new NoPaymentDataRequiredPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE, () =>\n        new BraintreeCreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_PAYPAL, () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_PAYPAL_CREDIT, () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor,\n            true\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_VISA_CHECKOUT, () =>\n        new BraintreeVisaCheckoutPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.CHASE_PAY, () =>\n        new ChasePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new ChasePayScriptLoader(scriptLoader),\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_GOOGLE_PAY, () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.WE_PAY, () =>\n        new WepayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.MASTERPASS, () =>\n        new MasterpassPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.STRIPE_GOOGLE_PAY, () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.ZIP, () =>\n        new ZipPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            new ZipScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.CONVERGE, () =>\n        new ConvergePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            formPoster\n        )\n    );\n\n    return registry;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { Overlay } from '../../../common/overlay';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default function createBraintreePaymentProcessor(scriptLoader: ScriptLoader) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n    const overlay = new Overlay();\n\n    return new BraintreePaymentProcessor(braintreeSDKCreator, overlay);\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { Address } from '../../address';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../../checkout';\nimport { addMinutes, isFuture } from '../../common/date-time';\nimport { MissingDataError, MissingDataErrorType } from '../../common/error/errors';\n\nimport { SessionContext, VaultAccessToken } from './instrument';\nimport { DeleteInstrumentAction, InstrumentActionType, LoadInstrumentsAction } from './instrument-actions';\nimport InstrumentRequestSender from './instrument-request-sender';\n\nexport default class InstrumentActionCreator {\n    constructor(\n        private _instrumentRequestSender: InstrumentRequestSender\n    ) {}\n\n    loadInstruments(): ThunkAction<LoadInstrumentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadInstrumentsAction>) => {\n            observer.next(createAction(InstrumentActionType.LoadInstrumentsRequested));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n            const shippingAddress = this._getShippingAddress(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.loadInstruments({\n                            ...session,\n                            authToken: currentToken.vaultAccessToken,\n                        },\n                        shippingAddress\n                    )\n                        .then(({ body }) => {\n                            observer.next(createAction(\n                                InstrumentActionType.LoadInstrumentsSucceeded,\n                                body,\n                                currentToken\n                            ));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(InstrumentActionType.LoadInstrumentsFailed, response));\n                });\n        });\n    }\n\n    deleteInstrument(instrumentId: string): ThunkAction<DeleteInstrumentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteInstrumentAction>) => {\n            observer.next(createAction(InstrumentActionType.DeleteInstrumentRequested, undefined, { instrumentId }));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.deleteInstrument({\n                        ...session,\n                        authToken: currentToken.vaultAccessToken,\n                    }, instrumentId)\n                        .then(({ body }) => {\n                            observer.next(createAction(InstrumentActionType.DeleteInstrumentSucceeded, body, {\n                                instrumentId,\n                                ...currentToken,\n                            }));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(InstrumentActionType.DeleteInstrumentFailed, response, { instrumentId }));\n                });\n        });\n    }\n\n    private _isValidVaultAccessToken(token: VaultAccessToken): boolean {\n        if (!token || !token.vaultAccessToken) {\n            return false;\n        }\n\n        const expiryBuffer = 2;\n        const expiry = addMinutes(new Date(token.vaultAccessExpiry), expiryBuffer);\n\n        return isFuture(expiry);\n    }\n\n    private _getCurrentAccessToken(store: ReadableCheckoutStore): VaultAccessToken | undefined {\n        const { instruments } = store.getState();\n        const meta = instruments.getInstrumentsMeta();\n\n        if (!meta) {\n            return;\n        }\n\n        return {\n            vaultAccessToken: meta.vaultAccessToken,\n            vaultAccessExpiry: meta.vaultAccessExpiry,\n        };\n    }\n\n    private _getValidAccessToken(token?: VaultAccessToken): Promise<VaultAccessToken> {\n        return token && this._isValidVaultAccessToken(token) ?\n            Promise.resolve(token) :\n            this._instrumentRequestSender.getVaultAccessToken().then(({ body }) => body);\n    }\n\n    private _getShippingAddress(store: ReadableCheckoutStore): Address | undefined {\n        const state = store.getState();\n\n        return state.shippingAddress.getShippingAddress();\n    }\n\n    private _getSessionContext(store: ReadableCheckoutStore): SessionContext {\n        const state = store.getState();\n        const config = state.config.getStoreConfig();\n        const cart = state.cart.getCart();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        const { customerId } = cart;\n        const { storeId } = config.storeProfile;\n\n        return {\n            customerId,\n            storeId,\n        };\n    }\n}\n","export default function addMinutes(date: Date, amount: number): Date {\n    const newDate = new Date(date.getTime());\n\n    newDate.setMinutes(date.getMinutes() + amount);\n\n    return newDate;\n}\n","export default function isFuture(date: Date): boolean {\n    return date.valueOf() > Date.now();\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentResponse from '../payment-response';\n\nimport Instrument, { VaultAccessToken } from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InstrumentErrorResponseBody,\n    InternalInstrument,\n    InternalInstrumentsResponseBody,\n    InternalInstrumentErrorResponseBody,\n    InternalVaultAccessTokenResponseBody,\n} from './instrument-response-body';\n\nexport default class InstrumentResponseTransformer {\n    transformResponse(\n        response: PaymentResponse<InternalInstrumentsResponseBody>\n    ): Response<InstrumentsResponseBody> {\n        const { body, ...payload } = this._transformResponse(response);\n\n        return {\n            ...payload,\n            body: {\n                vaultedInstruments: this._transformVaultedInstruments(body.vaulted_instruments),\n            },\n        };\n    }\n\n    transformErrorResponse(\n        response: PaymentResponse<InternalInstrumentErrorResponseBody>\n    ): Response<InstrumentErrorResponseBody> {\n        return this._transformResponse(response);\n    }\n\n    transformVaultAccessResponse(\n        response: Response<InternalVaultAccessTokenResponseBody>\n    ): Response<VaultAccessToken> {\n        return {\n            ...response,\n            body: {\n                vaultAccessToken: response.body.data.token,\n                vaultAccessExpiry: response.body.data.expires_at,\n            },\n        };\n    }\n\n    private _transformVaultedInstruments(vaultedInstruments: InternalInstrument[] = []): Instrument[] {\n        return vaultedInstruments.map(instrument => ({\n            bigpayToken: instrument.bigpay_token,\n            defaultInstrument: instrument.default_instrument,\n            provider: instrument.provider,\n            iin: instrument.iin,\n            last4: instrument.last_4,\n            expiryMonth: instrument.expiry_month,\n            expiryYear: instrument.expiry_year,\n            brand: instrument.brand,\n            trustedShippingAddress: instrument.trusted_shipping_address,\n        }));\n    }\n\n    private _transformResponse<T>(response: PaymentResponse<T>): Response<T> {\n        const { data: body, ...payload } = response;\n\n        return {\n            ...payload,\n            body,\n        };\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { mapToInternalAddress, Address } from '../../address';\nimport { RequestOptions } from '../../common/http-request';\nimport PaymentResponse from '../payment-response';\n\nimport { InstrumentRequestContext, VaultAccessToken } from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InternalInstrumentsResponseBody,\n    InternalInstrumentErrorResponseBody,\n} from './instrument-response-body';\nimport InstrumentResponseTransformer from './instrument-response-transformer';\n\nexport default class InstrumentRequestSender {\n    private _transformer: InstrumentResponseTransformer;\n\n    constructor(\n        private _client: any,\n        private _requestSender: RequestSender\n    ) {\n        this._transformer = new InstrumentResponseTransformer();\n    }\n\n    getVaultAccessToken(\n        { timeout }: RequestOptions = {}\n    ): Promise<Response<VaultAccessToken>> {\n        const url = '/internalapi/v1/checkout/payments/vault-access-token';\n\n        return this._requestSender.get(url, { timeout }).then(response => ({\n            ...response,\n            body: {\n                vaultAccessToken: response.body.data.token,\n                vaultAccessExpiry: response.body.data.expires_at,\n            },\n        }));\n    }\n\n    loadInstruments(\n        requestContext: InstrumentRequestContext,\n        shippingAddress?: Address\n    ): Promise<Response<InstrumentsResponseBody>> {\n        return (shippingAddress) ?\n            this._loadInstrumentsWithAddress(requestContext, shippingAddress) :\n            this._loadInstruments(requestContext);\n    }\n\n    deleteInstrument(\n        requestContext: InstrumentRequestContext,\n        instrumentId: string\n    ): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            instrumentId,\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.deleteShopperInstrument(\n                payload, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) =>  errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n\n    private _loadInstruments(\n        requestContext: InstrumentRequestContext\n    ): Promise<Response<InstrumentsResponseBody>> {\n        return new Promise((resolve, reject) => {\n            this._client.loadInstruments(\n                requestContext, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) => errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n\n    private _loadInstrumentsWithAddress(\n        requestContext: InstrumentRequestContext,\n        shippingAddress: Address\n    ): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            shippingAddress: mapToInternalAddress(shippingAddress),\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.loadInstrumentsWithAddress(\n                payload, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) => errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n}\n","import { Address } from '../address';\nimport { BillingAddress, BillingAddressSelector } from '../billing';\nimport { Cart, CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { StoreConfig } from '../config/config';\nimport { Coupon, CouponSelector, GiftCertificate, GiftCertificateSelector } from '../coupon';\nimport { Customer, CustomerSelector } from '../customer';\nimport { FormField, FormSelector } from '../form';\nimport { Country, CountrySelector } from '../geography';\nimport { Order, OrderSelector } from '../order';\nimport { PaymentMethod, PaymentMethodSelector, PaymentSelector } from '../payment';\nimport { Instrument, InstrumentSelector } from '../payment/instrument';\nimport {\n    Consignment,\n    ConsignmentSelector,\n    ShippingAddressSelector,\n    ShippingCountrySelector,\n    ShippingOption,\n} from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the state of the current checkout.\n *\n * This object has a set of methods that allow you to get a specific piece of\n * checkout information, such as shipping and billing details.\n */\n@selector\nexport default class CheckoutStoreSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customer: CustomerSelector;\n    private _form: FormSelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _payment: PaymentSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _shippingAddress: ShippingAddressSelector;\n    private _shippingCountries: ShippingCountrySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customer = selectors.customer;\n        this._form = selectors.form;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._payment = selectors.payment;\n        this._paymentMethods = selectors.paymentMethods;\n        this._shippingAddress = selectors.shippingAddress;\n        this._shippingCountries = selectors.shippingCountries;\n    }\n\n    /**\n     * Gets the current checkout.\n     *\n     * @returns The current checkout if it is loaded, otherwise undefined.\n     */\n    getCheckout(): Checkout | undefined {\n        return this._checkout.getCheckout();\n    }\n\n    /**\n     * Gets the current order.\n     *\n     * @returns The current order if it is loaded, otherwise undefined.\n     */\n    getOrder(): Order | undefined {\n        return this._order.getOrder();\n    }\n\n    /**\n     * Gets the checkout configuration of a store.\n     *\n     * @returns The configuration object if it is loaded, otherwise undefined.\n     */\n    getConfig(): StoreConfig | undefined {\n        return this._config.getStoreConfig();\n    }\n\n    /**\n     * Gets the shipping address of the current checkout.\n     *\n     * If the address is partially complete, it may not have shipping options\n     * associated with it.\n     *\n     * @returns The shipping address object if it is loaded, otherwise\n     * undefined.\n     */\n    getShippingAddress(): Address | undefined {\n        const shippingAddress = this._shippingAddress.getShippingAddress();\n        const context = this._config.getContextConfig();\n\n        if (!shippingAddress) {\n            if (!context || !context.geoCountryCode) {\n                return;\n            }\n\n            return {\n                firstName: '',\n                lastName: '',\n                company: '',\n                address1: '',\n                address2: '',\n                city: '',\n                stateOrProvince: '',\n                stateOrProvinceCode: '',\n                postalCode: '',\n                country: '',\n                phone: '',\n                customFields: [],\n                countryCode: context.geoCountryCode,\n            };\n        }\n\n        return shippingAddress;\n    }\n\n    /**\n     * Gets a list of shipping options available for the shipping address.\n     *\n     * If there is no shipping address assigned to the current checkout, the\n     * list of shipping options will be empty.\n     *\n     * @returns The list of shipping options if any, otherwise undefined.\n     */\n    getShippingOptions(): ShippingOption[] | undefined {\n        const consignments = this._consignments.getConsignments();\n\n        if (consignments && consignments.length) {\n            return consignments[0].availableShippingOptions;\n        }\n\n        return;\n    }\n\n    /**\n     * Gets a list of consignments.\n     *\n     * If there are no consignments created for to the current checkout, the\n     * list will be empty.\n     *\n     * @returns The list of consignments if any, otherwise undefined.\n     */\n    getConsignments(): Consignment[] | undefined {\n        return this._consignments.getConsignments();\n    }\n\n    /**\n     * Gets the selected shipping option for the current checkout.\n     *\n     * @returns The shipping option object if there is a selected option,\n     * otherwise undefined.\n     */\n    getSelectedShippingOption(): ShippingOption | undefined {\n        const consignments = this._consignments.getConsignments();\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return consignments[0].selectedShippingOption;\n    }\n\n    /**\n     * Gets a list of countries available for shipping.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getShippingCountries(): Country[] | undefined {\n        return this._shippingCountries.getShippingCountries();\n    }\n\n    /**\n     * Gets the billing address of an order.\n     *\n     * @returns The billing address object if it is loaded, otherwise undefined.\n     */\n    getBillingAddress(): BillingAddress | undefined {\n        return this._billingAddress.getBillingAddress();\n    }\n\n    /**\n     * Gets a list of countries available for billing.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getBillingCountries(): Country[] | undefined {\n        return this._countries.getCountries();\n    }\n\n    /**\n     * Gets a list of payment methods available for checkout.\n     *\n     * @returns The list of payment methods if it is loaded, otherwise undefined.\n     */\n    getPaymentMethods(): PaymentMethod[] | undefined {\n        return this._paymentMethods.getPaymentMethods();\n    }\n\n    /**\n     * Gets a payment method by an id.\n     *\n     * The method returns undefined if unable to find a payment method with the\n     * specified id, either because it is not available for the customer, or it\n     * is not loaded.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns The payment method object if loaded and available, otherwise,\n     * undefined.\n     */\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined {\n        return this._paymentMethods.getPaymentMethod(methodId, gatewayId);\n    }\n\n    /**\n     * Gets the payment method that is selected for checkout.\n     *\n     * @returns The payment method object if there is a selected method;\n     * undefined if otherwise.\n     */\n    getSelectedPaymentMethod(): PaymentMethod | undefined {\n        const payment = this._payment.getPaymentId();\n\n        return payment && this._paymentMethods.getPaymentMethod(payment.providerId, payment.gatewayId);\n    }\n\n    /**\n     * Gets the current cart.\n     *\n     * @returns The current cart object if it is loaded, otherwise undefined.\n     */\n    getCart(): Cart | undefined {\n        return this._cart.getCart();\n    }\n\n    /**\n     * Gets a list of coupons that are applied to the current checkout.\n     *\n     * @returns The list of applied coupons if there is any, otherwise undefined.\n     */\n    getCoupons(): Coupon[] | undefined {\n        return this._coupons.getCoupons();\n    }\n\n    /**\n     * Gets a list of gift certificates that are applied to the current checkout.\n     *\n     * @returns The list of applied gift certificates if there is any, otherwise undefined.\n     */\n    getGiftCertificates(): GiftCertificate[] | undefined {\n        return this._giftCertificates.getGiftCertificates();\n    }\n\n    /**\n     * Gets the current customer.\n     *\n     * @returns The current customer object if it is loaded, otherwise\n     * undefined.\n     */\n    getCustomer(): Customer | undefined {\n        return this._customer.getCustomer();\n    }\n\n    /**\n     * Checks if payment data is required or not.\n     *\n     * If payment data is required, customers should be prompted to enter their\n     * payment details.\n     *\n     * ```js\n     * if (state.checkout.isPaymentDataRequired()) {\n     *     // Render payment form\n     * } else {\n     *     // Render \"Payment is not required for this order\" message\n     * }\n     * ```\n     *\n     * @param useStoreCredit - If true, check whether payment data is required\n     * with store credit applied; otherwise, check without store credit.\n     * @returns True if payment data is required, otherwise false.\n     */\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean {\n        return this._payment.isPaymentDataRequired(useStoreCredit);\n    }\n\n    /**\n     * Checks if payment data is submitted or not.\n     *\n     * If payment data is already submitted using a payment method, customers\n     * should not be prompted to enter their payment details again.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns True if payment data is submitted, otherwise false.\n     */\n    isPaymentDataSubmitted(methodId: string, gatewayId?: string): boolean {\n        return this._payment.isPaymentDataSubmitted(this.getPaymentMethod(methodId, gatewayId));\n    }\n\n    /**\n     * Gets a list of payment instruments associated with the current customer.\n     *\n     * @returns The list of payment instruments if it is loaded, otherwise undefined.\n     */\n    getInstruments(): Instrument[] | undefined {\n        return this._instruments.getInstruments();\n    }\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their billing address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of billing address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getBillingAddressFields(countryCode: string): FormField[] {\n        return this._form.getBillingAddressFields(this.getBillingCountries(), countryCode);\n    }\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their shipping address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of shipping address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getShippingAddressFields(countryCode: string): FormField[] {\n        return this._form.getShippingAddressFields(this.getShippingCountries(), countryCode);\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { RequestError } from '../common/error/errors';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerStrategySelector } from '../customer';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { ConsignmentSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the error of any asynchronous checkout action, if\n * there is any.\n *\n * This object has a set of getters that would return an error if an action is\n * not executed successfully. For example, if you are unable to submit an order,\n * you can use this object to retrieve the reason for the failure.\n */\n@selector\nexport default class CheckoutStoreErrorSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customerStrategies: CustomerStrategySelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _paymentStrategies: PaymentStrategySelector;\n    private _shippingCountries: ShippingCountrySelector;\n    private _shippingStrategies: ShippingStrategySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customerStrategies = selectors.customerStrategies;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._paymentMethods = selectors.paymentMethods;\n        this._paymentStrategies = selectors.paymentStrategies;\n        this._shippingCountries = selectors.shippingCountries;\n        this._shippingStrategies = selectors.shippingStrategies;\n    }\n\n    /**\n     * Gets the error of any checkout action that has failed.\n     *\n     * @returns The error object if unable to perform any checkout action,\n     * otherwise undefined.\n     */\n    getError(): Error | undefined {\n        // tslint:disable-next-line:cyclomatic-complexity\n        return this.getLoadCheckoutError() ||\n            this.getSubmitOrderError() ||\n            this.getFinalizeOrderError() ||\n            this.getLoadOrderError() ||\n            this.getLoadCartError() ||\n            this.getLoadBillingCountriesError() ||\n            this.getLoadShippingCountriesError() ||\n            this.getLoadPaymentMethodsError() ||\n            this.getLoadPaymentMethodError() ||\n            this.getInitializePaymentError() ||\n            this.getLoadShippingOptionsError() ||\n            this.getSelectShippingOptionError() ||\n            this.getSignInError() ||\n            this.getSignOutError() ||\n            this.getInitializeCustomerError() ||\n            this.getUpdateShippingAddressError() ||\n            this.getUpdateBillingAddressError() ||\n            this.getContinueAsGuestError() ||\n            this.getUpdateConsignmentError() ||\n            this.getCreateConsignmentsError() ||\n            this.getDeleteConsignmentError() ||\n            this.getInitializeShippingError() ||\n            this.getApplyCouponError() ||\n            this.getRemoveCouponError() ||\n            this.getApplyGiftCertificateError() ||\n            this.getRemoveGiftCertificateError() ||\n            this.getLoadInstrumentsError() ||\n            this.getDeleteInstrumentError() ||\n            this.getLoadConfigError();\n    }\n\n    /**\n     * Returns an error if unable to load the current checkout.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCheckoutError(): Error | undefined {\n        return this._checkout.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to update the current checkout.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateCheckoutError(): Error | undefined {\n        return this._checkout.getUpdateError();\n    }\n\n    /**\n     * Returns an error if unable to submit the current order.\n     *\n     * @returns The error object if unable to submit, otherwise undefined.\n     */\n    getSubmitOrderError(): Error | undefined {\n        return this._paymentStrategies.getExecuteError();\n    }\n\n    /**\n     * Returns an error if unable to finalize the current order.\n     *\n     * @returns The error object if unable to finalize, otherwise undefined.\n     */\n    getFinalizeOrderError(): Error | undefined {\n        return this._paymentStrategies.getFinalizeError();\n    }\n\n    /**\n     * Returns an error if unable to load the current order.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadOrderError(): Error | undefined {\n        return this._order.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load the current cart.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCartError(): Error | undefined {\n        return this._cart.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load billing countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadBillingCountriesError(): Error | undefined {\n        return this._countries.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load shipping countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingCountriesError(): Error | undefined {\n        return this._shippingCountries.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load payment methods.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodsError(): Error | undefined {\n        return this._paymentMethods.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to load.\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodError(methodId?: string): Error | undefined {\n        return this._paymentMethods.getLoadMethodError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to initialize a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to initialize.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializePaymentError(methodId?: string): Error | undefined {\n        return this._paymentStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to sign in.\n     *\n     * @returns The error object if unable to sign in, otherwise undefined.\n     */\n    getSignInError(): Error | undefined {\n        return this._customerStrategies.getSignInError();\n    }\n\n    /**\n     * Returns an error if unable to sign out.\n     *\n     * @returns The error object if unable to sign out, otherwise undefined.\n     */\n    getSignOutError(): Error | undefined {\n        return this._customerStrategies.getSignOutError();\n    }\n\n    /**\n     * Returns an error if unable to initialize the customer step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeCustomerError(methodId?: string): Error | undefined {\n        return this._customerStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to load shipping options.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingOptionsError(): Error | undefined {\n        return this._consignments.getLoadShippingOptionsError();\n    }\n\n    /**\n     * Returns an error if unable to select a shipping option.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to select, otherwise undefined.\n     */\n    getSelectShippingOptionError(consignmentId?: string): Error | undefined {\n        return this._shippingStrategies.getSelectOptionError() ||\n            this._consignments.getUpdateShippingOptionError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to continue as guest.\n     *\n     * @returns The error object if unable to continue, otherwise undefined.\n     */\n    getContinueAsGuestError(): Error | undefined {\n        return this._billingAddress.getContinueAsGuestError();\n    }\n\n    /**\n     * Returns an error if unable to update billing address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateBillingAddressError(): Error | undefined {\n        return this._billingAddress.getUpdateError();\n    }\n\n    /**\n     * Returns an error if unable to update shipping address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateShippingAddressError(): Error | undefined {\n        return this._shippingStrategies.getUpdateAddressError();\n    }\n\n    /**\n     * Returns an error if unable to delete a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteConsignmentError(consignmentId?: string): Error | undefined {\n        return this._consignments.getDeleteError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to update a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateConsignmentError(consignmentId?: string): Error | undefined {\n        return this._consignments.getUpdateError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to create consignments.\n     *\n     * @returns The error object if unable to create, otherwise undefined.\n     */\n    getCreateConsignmentsError(): Error | undefined {\n        return this._consignments.getCreateError();\n    }\n\n    /**\n     * Returns an error if unable to initialize the shipping step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeShippingError(methodId?: string): Error | undefined {\n        return this._shippingStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to apply a coupon code.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyCouponError(): RequestError | undefined {\n        return this._coupons.getApplyError();\n    }\n\n    /**\n     * Returns an error if unable to remove a coupon code.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveCouponError(): RequestError | undefined {\n        return this._coupons.getRemoveError();\n    }\n\n    /**\n     * Returns an error if unable to apply a gift certificate.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyGiftCertificateError(): RequestError | undefined {\n        return this._giftCertificates.getApplyError();\n    }\n\n    /**\n     * Returns an error if unable to remove a gift certificate.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveGiftCertificateError(): RequestError | undefined {\n        return this._giftCertificates.getRemoveError();\n    }\n\n    /**\n     * Returns an error if unable to load payment instruments.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadInstrumentsError(): Error | undefined {\n        return this._instruments.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to delete a payment instrument.\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteInstrumentError(instrumentId?: string): Error | undefined {\n        return this._instruments.getDeleteError(instrumentId);\n    }\n\n    /**\n     * Returns an error if unable to load the checkout configuration of a store.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadConfigError(): Error | undefined {\n        return this._config.getLoadError();\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerStrategySelector } from '../customer';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { ConsignmentSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for checking the statuses of various asynchronous actions related\n * to checkout.\n *\n * This object has a set of getters that return true if an action is in\n * progress. For example, you can check whether a customer is submitting an\n * order and waiting for the request to complete.\n */\n@selector\nexport default class CheckoutStoreStatusSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customerStrategies: CustomerStrategySelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _paymentStrategies: PaymentStrategySelector;\n    private _shippingCountries: ShippingCountrySelector;\n    private _shippingStrategies: ShippingStrategySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customerStrategies = selectors.customerStrategies;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._paymentMethods = selectors.paymentMethods;\n        this._paymentStrategies = selectors.paymentStrategies;\n        this._shippingCountries = selectors.shippingCountries;\n        this._shippingStrategies = selectors.shippingStrategies;\n    }\n\n    /**\n     * Checks whether any checkout action is pending.\n     *\n     * @returns True if there is a pending action, otherwise false.\n     */\n    isPending(): boolean {\n        // tslint:disable-next-line:cyclomatic-complexity\n        return this.isLoadingCheckout() ||\n            this.isSubmittingOrder() ||\n            this.isFinalizingOrder() ||\n            this.isLoadingOrder() ||\n            this.isLoadingCart() ||\n            this.isLoadingBillingCountries() ||\n            this.isLoadingShippingCountries() ||\n            this.isLoadingPaymentMethods() ||\n            this.isLoadingPaymentMethod() ||\n            this.isInitializingPayment() ||\n            this.isLoadingShippingOptions() ||\n            this.isSelectingShippingOption() ||\n            this.isSigningIn() ||\n            this.isSigningOut() ||\n            this.isInitializingCustomer() ||\n            this.isUpdatingBillingAddress() ||\n            this.isContinuingAsGuest() ||\n            this.isUpdatingShippingAddress() ||\n            this.isUpdatingConsignment() ||\n            this.isCreatingConsignments() ||\n            this.isDeletingConsignment() ||\n            this.isInitializingShipping() ||\n            this.isApplyingCoupon() ||\n            this.isRemovingCoupon() ||\n            this.isApplyingGiftCertificate() ||\n            this.isRemovingGiftCertificate() ||\n            this.isLoadingInstruments() ||\n            this.isDeletingInstrument() ||\n            this.isLoadingConfig() ||\n            this.isCustomerStepPending() ||\n            this.isPaymentStepPending();\n    }\n\n    /**\n     * Checks whether the current checkout is loading.\n     *\n     * @returns True if the current checkout is loading, otherwise false.\n     */\n    isLoadingCheckout(): boolean {\n        return this._checkout.isLoading();\n    }\n\n    /**\n     * Checks whether the current checkout is being updated.\n     *\n     * @returns True if the current checkout is being updated, otherwise false.\n     */\n    isUpdatingCheckout(): boolean {\n        return this._checkout.isUpdating();\n    }\n\n    /**\n     * Checks whether the current order is submitting.\n     *\n     * @returns True if the current order is submitting, otherwise false.\n     */\n    isSubmittingOrder(): boolean {\n        return this._paymentStrategies.isExecuting();\n    }\n\n    /**\n     * Checks whether the current order is finalizing.\n     *\n     * @returns True if the current order is finalizing, otherwise false.\n     */\n    isFinalizingOrder(): boolean {\n        return this._paymentStrategies.isFinalizing();\n    }\n\n    /**\n     * Checks whether the current order is loading.\n     *\n     * @returns True if the current order is loading, otherwise false.\n     */\n    isLoadingOrder(): boolean {\n        return this._order.isLoading();\n    }\n\n    /**\n     * Checks whether the current cart is loading.\n     *\n     * @returns True if the current cart is loading, otherwise false.\n     */\n    isLoadingCart(): boolean {\n        return this._cart.isLoading();\n    }\n\n    /**\n     * Checks whether billing countries are loading.\n     *\n     * @returns True if billing countries are loading, otherwise false.\n     */\n    isLoadingBillingCountries(): boolean {\n        return this._countries.isLoading();\n    }\n\n    /**\n     * Checks whether shipping countries are loading.\n     *\n     * @returns True if shipping countries are loading, otherwise false.\n     */\n    isLoadingShippingCountries(): boolean {\n        return this._shippingCountries.isLoading();\n    }\n\n    /**\n     * Checks whether payment methods are loading.\n     *\n     * @returns True if payment methods are loading, otherwise false.\n     */\n    isLoadingPaymentMethods(): boolean {\n        return this._paymentMethods.isLoading();\n    }\n\n    /**\n     * Checks whether a specific or any payment method is loading.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is loading.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is loading, otherwise false.\n     */\n    isLoadingPaymentMethod(methodId?: string): boolean {\n        return this._paymentMethods.isLoadingMethod(methodId);\n    }\n\n    /**\n     * Checks whether a specific or any payment method is initializing.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is initializing.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is initializing, otherwise false.\n     */\n    isInitializingPayment(methodId?: string): boolean {\n        return this._paymentStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is signing in.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing in using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing in the\n     * current customer.\n     * @returns True if the customer is signing in, otherwise false.\n     */\n    isSigningIn(methodId?: string): boolean {\n        return this._customerStrategies.isSigningIn(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is signing out.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing out using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing out the\n     * current customer.\n     * @returns True if the customer is signing out, otherwise false.\n     */\n    isSigningOut(methodId?: string): boolean {\n        return this._customerStrategies.isSigningOut(methodId);\n    }\n\n    /**\n     * Checks whether the customer step is initializing.\n     *\n     * If an ID is provided, the method also checks whether the customer step is\n     * initializing using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for initializing the\n     * customer step of checkout.\n     * @returns True if the customer step is initializing, otherwise false.\n     */\n    isInitializingCustomer(methodId?: string): boolean {\n        return this._customerStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether shipping options are loading.\n     *\n     * @returns True if shipping options are loading, otherwise false.\n     */\n    isLoadingShippingOptions(): boolean {\n        return this._consignments.isLoadingShippingOptions();\n    }\n\n    /**\n     * Checks whether a shipping option is being selected.\n     *\n     * A consignment ID should be provided when checking if a shipping option\n     * is being selected for a specific consignment, otherwise it will check\n     * for all consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if selecting a shipping option, otherwise false.\n     */\n    isSelectingShippingOption(consignmentId?: string): boolean {\n        return this._shippingStrategies.isSelectingOption() ||\n            this._consignments.isUpdatingShippingOption(consignmentId);\n    }\n\n    /**\n     * Checks whether the billing address is being updated.\n     *\n     * @returns True if updating their billing address, otherwise false.\n     */\n    isUpdatingBillingAddress(): boolean {\n        return this._billingAddress.isUpdating();\n    }\n\n    /**\n     * Checks whether the shopper is continuing out as a guest.\n     *\n     * @returns True if continuing as guest, otherwise false.\n     */\n    isContinuingAsGuest(): boolean {\n        return this._billingAddress.isContinuingAsGuest();\n    }\n\n    /**\n     * Checks the shipping address is being updated.\n     *\n     * @returns True if updating their shipping address, otherwise false.\n     */\n    isUpdatingShippingAddress(): boolean {\n        return this._shippingStrategies.isUpdatingAddress();\n    }\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if updating consignment(s), otherwise false.\n     */\n    isUpdatingConsignment(consignmentId?: string): boolean {\n        return this._consignments.isUpdating(consignmentId);\n    }\n\n    /**\n     * Checks whether a given/any consignment is being deleted.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if deleting consignment(s), otherwise false.\n     */\n    isDeletingConsignment(consignmentId?: string): boolean {\n        return this._consignments.isDeleting(consignmentId);\n    }\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @returns True if creating consignments, otherwise false.\n     */\n    isCreatingConsignments(): boolean {\n        return this._consignments.isCreating();\n    }\n\n    /**\n     * Checks whether the shipping step of a checkout process is initializing.\n     *\n     * If an identifier is provided, the method also checks whether the shipping\n     * step is initializing using a specific shipping method with the same\n     * identifier.\n     *\n     * @param methodId - The identifer of the initialization method to check.\n     * @returns True if the shipping step is initializing, otherwise false.\n     */\n    isInitializingShipping(methodId?: string) {\n        return this._shippingStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is applying a coupon code.\n     *\n     * @returns True if applying a coupon code, otherwise false.\n     */\n    isApplyingCoupon(): boolean {\n        return this._coupons.isApplying();\n    }\n\n    /**\n     * Checks whether the current customer is removing a coupon code.\n     *\n     * @returns True if removing a coupon code, otherwise false.\n     */\n    isRemovingCoupon(): boolean {\n        return this._coupons.isRemoving();\n    }\n\n    /**\n     * Checks whether the current customer is applying a gift certificate.\n     *\n     * @returns True if applying a gift certificate, otherwise false.\n     */\n    isApplyingGiftCertificate(): boolean {\n        return this._giftCertificates.isApplying();\n    }\n\n    /**\n     * Checks whether the current customer is removing a gift certificate.\n     *\n     * @returns True if removing a gift certificate, otherwise false.\n     */\n    isRemovingGiftCertificate(): boolean {\n        return this._giftCertificates.isRemoving();\n    }\n\n    /**\n     * Checks whether the current customer's payment instruments are loading.\n     *\n     * @returns True if payment instruments are loading, otherwise false.\n     */\n    isLoadingInstruments(): boolean {\n        return this._instruments.isLoading();\n    }\n\n    /**\n     * Checks whether the current customer is deleting a payment instrument.\n     *\n     * @returns True if deleting a payment instrument, otherwise false.\n     */\n    isDeletingInstrument(instrumentId?: string): boolean {\n        return this._instruments.isDeleting(instrumentId);\n    }\n\n    /**\n     * Checks whether the checkout configuration of a store is loading.\n     *\n     * @returns True if the configuration is loading, otherwise false.\n     */\n    isLoadingConfig(): boolean {\n        return this._config.isLoading();\n    }\n\n    /**\n     * Checks whether the customer step of a checkout is in a pending state.\n     *\n     * The customer step is considered to be pending if it is in the process of\n     * initializing, signing in, signing out, and/or interacting with a customer\n     * widget.\n     *\n     * @returns True if the customer step is pending, otherwise false.\n     */\n    isCustomerStepPending(): boolean {\n        return this._customerStrategies.isInitializing() ||\n            this._customerStrategies.isSigningIn() ||\n            this._customerStrategies.isSigningOut() ||\n            this._customerStrategies.isWidgetInteracting();\n    }\n\n    /**\n     * Checks whether the payment step of a checkout is in a pending state.\n     *\n     * The payment step is considered to be pending if it is in the process of\n     * initializing, submitting an order, finalizing an order, and/or\n     * interacting with a payment widget.\n     *\n     * @returns True if the payment step is pending, otherwise false.\n     */\n    isPaymentStepPending(): boolean {\n        return this._paymentStrategies.isInitializing() ||\n            this._paymentStrategies.isExecuting() ||\n            this._paymentStrategies.isFinalizing() ||\n            this._paymentStrategies.isWidgetInteracting();\n    }\n}\n","import {\n    CheckoutSelectors,\n    CheckoutStoreErrorSelector,\n    CheckoutStoreSelector,\n    CheckoutStoreStatusSelector,\n    InternalCheckoutSelectors,\n} from '../checkout';\n\nexport default function createCheckoutSelectors(selectors: InternalCheckoutSelectors): CheckoutSelectors {\n    const data = new CheckoutStoreSelector(selectors);\n    const errors = new CheckoutStoreErrorSelector(selectors);\n    const statuses = new CheckoutStoreStatusSelector(selectors);\n\n    return {\n        data,\n        errors,\n        statuses,\n    };\n}\n","import { toSingleLine } from '../utility';\n\nexport default class ErrorMessageTransformer<TError extends Error = Error> {\n    constructor(\n        private _messageCustomizer: (type: TError) => string\n    ) {}\n\n    transform(error: TError): TError {\n        error.message = toSingleLine(this._messageCustomizer(error));\n\n        return error;\n    }\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { BillingAddressActionCreator, BillingAddressRequestBody } from '../billing';\nimport { ErrorActionCreator, ErrorMessageTransformer } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\nimport { CouponActionCreator, GiftCertificateActionCreator } from '../coupon';\nimport { CustomerCredentials, CustomerInitializeOptions, CustomerRequestOptions, CustomerStrategyActionCreator, GuestCredentials } from '../customer';\nimport { CountryActionCreator } from '../geography';\nimport { OrderActionCreator, OrderRequestBody } from '../order';\nimport { PaymentInitializeOptions, PaymentMethodActionCreator, PaymentRequestOptions, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator } from '../payment/instrument';\nimport { ConsignmentsRequestBody, ConsignmentActionCreator, ShippingCountryActionCreator, ShippingInitializeOptions, ShippingRequestOptions, ShippingStrategyActionCreator } from '../shipping';\nimport { ConsignmentAssignmentRequestBody, ConsignmentUpdateRequestBody } from '../shipping/consignment';\n\nimport { CheckoutRequestBody } from './checkout';\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutParams from './checkout-params';\nimport CheckoutSelectors from './checkout-selectors';\nimport CheckoutStore from './checkout-store';\nimport createCheckoutSelectors from './create-checkout-selectors';\nimport createCheckoutServiceErrorTransformer from './create-checkout-service-error-transformer';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for completing the checkout process for the current customer.\n *\n * This object can be used to collect all information that is required for\n * checkout, such as shipping and billing information. It can also be used to\n * retrieve the current checkout state and subscribe to its changes.\n */\nexport default class CheckoutService {\n    private _state: CheckoutSelectors;\n    private _errorTransformer: ErrorMessageTransformer;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _configActionCreator: ConfigActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _countryActionCreator: CountryActionCreator,\n        private _couponActionCreator: CouponActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _errorActionCreator: ErrorActionCreator,\n        private _giftCertificateActionCreator: GiftCertificateActionCreator,\n        private _instrumentActionCreator: InstrumentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _shippingCountryActionCreator: ShippingCountryActionCreator,\n        private _shippingStrategyActionCreator: ShippingStrategyActionCreator\n    ) {\n        this._state = createCheckoutSelectors(this._store.getState());\n        this._errorTransformer = createCheckoutServiceErrorTransformer();\n\n        this._store.subscribe(state => {\n            this._state = createCheckoutSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current checkout state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * checkout state. You can query the state by calling any of its getter\n     * methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.data.getOrder());\n     * console.log(state.errors.getSubmitOrderError());\n     * console.log(state.statuses.isSubmittingOrder());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutSelectors {\n        return this._state;\n    }\n\n    /**\n     * Notifies all subscribers with the current state.\n     *\n     * When this method gets called, the subscribers get called regardless if\n     * they have any filters applied.\n     */\n    notifyState(): void {\n        this._store.notifyState();\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the checkout state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.data.getCart();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutSelectors) => void,\n        ...filters: Array<(state: CheckoutSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            ...filters.map(filter => (state: InternalCheckoutSelectors) => filter(createCheckoutSelectors(state)))\n        );\n    }\n\n    /**\n     * Loads the current checkout.\n     *\n     * This method can only be called if there is an active checkout. Also, it\n     * can only retrieve data that belongs to the current customer. When it is\n     * successfully executed, you can retrieve the data by calling\n     * `CheckoutStoreSelector#getCheckout`.\n     *\n     * ```js\n     * const state = await service.loadCheckout('0cfd6c06-57c3-4e29-8d7a-de55cc8a9052');\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param id - The identifier of the checkout to load, or the default checkout if not provided.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    loadCheckout(id?: string, options?: RequestOptions<CheckoutParams>): Promise<CheckoutSelectors> {\n        return this._dispatch(id ?\n            this._checkoutActionCreator.loadCheckout(id, options) :\n            this._checkoutActionCreator.loadDefaultCheckout(options)\n        );\n    }\n\n    /**\n     * Updates specific properties of the current checkout.\n     *\n     * ```js\n     * const state = await service.updateCheckout(checkout);\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param payload - The checkout properties to be updated.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    updateCheckout(payload: CheckoutRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._checkoutActionCreator.updateCheckout(payload, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads an order by an id.\n     *\n     * The method can only retrieve an order if the order belongs to the current\n     * customer. If it is successfully executed, the data can be retrieved by\n     * calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.loadOrder(123);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param orderId - The identifier of the order to load.\n     * @param options - Options for loading the order.\n     * @returns A promise that resolves to the current state.\n     */\n    loadOrder(orderId: number, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const loadCheckoutAction = this._orderActionCreator.loadOrder(orderId, options);\n        const loadConfigAction = this._configActionCreator.loadConfig(options);\n\n        return Promise.all([\n            this._dispatch(loadCheckoutAction),\n            this._dispatch(loadConfigAction, { queueId: 'config' }),\n        ])\n            .then(() => this.getState());\n    }\n\n    /**\n     * Submits an order, thereby completing a checkout process.\n     *\n     * Before you can submit an order, you must initialize the payment method\n     * chosen by the customer by calling `CheckoutService#initializePayment`.\n     *\n     * ```js\n     * await service.initializePayment({ methodId: 'braintree' });\n     * await service.submitOrder({\n     *     payment: {\n     *         methodId: 'braintree',\n     *         paymentData: {\n     *             ccExpiry: { month: 10, year: 20 },\n     *             ccName: 'BigCommerce',\n     *             ccNumber: '4111111111111111',\n     *             ccCvv: 123,\n     *         },\n     *     },\n     * });\n     * ```\n     *\n     * You are not required to include `paymentData` if the order does not\n     * require additional payment details. For example, the customer has already\n     * entered their payment details on the cart page using one of the hosted\n     * payment methods, such as PayPal. Or the customer has applied a gift\n     * certificate that exceeds the grand total amount.\n     *\n     * If the order is submitted successfully, you can retrieve the newly\n     * created order by calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.submitOrder(payload);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param payload - The request payload to submit for the current order.\n     * @param options - Options for submitting the current order.\n     * @returns A promise that resolves to the current state.\n     */\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.execute(payload, options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Finalizes the submission process for an order.\n     *\n     * This method is only required for certain hosted payment methods that\n     * require a customer to enter their credit card details on their website.\n     * You need to call this method once the customer has redirected back to\n     * checkout in order to complete the checkout process.\n     *\n     * If the method is called before order finalization is required or for a\n     * payment method that does not require order finalization, an error will be\n     * thrown. Conversely, if the method is called successfully, you should\n     * immediately redirect the customer to the order confirmation page.\n     *\n     * ```js\n     * try {\n     *     await service.finalizeOrderIfNeeded();\n     *\n     *     window.location.assign('/order-confirmation');\n     * } catch (error) {\n     *     if (error.type !== 'order_finalization_not_required') {\n     *         throw error;\n     *     }\n     * }\n     * ```\n     *\n     * @param options - Options for finalizing the current order.\n     * @returns A promise that resolves to the current state.\n     * @throws `OrderFinalizationNotRequiredError` error if order finalization\n     * is not required for the current order at the time of execution.\n     */\n    finalizeOrderIfNeeded(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.finalize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of payment methods available for checkout.\n     *\n     * If a customer enters their payment details before navigating to the\n     * checkout page (i.e.: using PayPal checkout button on the cart page), only\n     * one payment method will be available for the customer - the selected\n     * payment method. Otherwise, by default, all payment methods configured by\n     * the merchant will be available for the customer.\n     *\n     * Once the method is executed successfully, you can call\n     * `CheckoutStoreSelector#getPaymentMethods` to retrieve the list of payment\n     * methods.\n     *\n     * ```js\n     * const state = service.loadPaymentMethods();\n     *\n     * console.log(state.data.getPaymentMethods());\n     * ```\n     *\n     * @param options - Options for loading the payment methods that are\n     * available to the current customer.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethods(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethods(options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Loads a payment method by an id.\n     *\n     * This method does not work with multi-option payment providers. Due to its\n     * limitation, it is deprecated and will be removed in the future.\n     *\n     * @deprecated\n     * @internal\n     * @param methodId - The identifier for the payment method to load.\n     * @param options - Options for loading the payment method.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethod(methodId: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethod(methodId, options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Initializes the payment step of a checkout process.\n     *\n     * Before a payment method can accept payment details, it must first be\n     * initialized. Some payment methods require you to provide additional\n     * initialization options. For example, Amazon requires a container ID in\n     * order to initialize their payment widget.\n     *\n     * ```js\n     * await service.initializePayment({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'walletWidget',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * De-initializes the payment step of a checkout process.\n     *\n     * The method should be called once you no longer require a payment method\n     * to be initialized. It can perform any necessary clean-up behind the\n     * scene, i.e.: remove DOM nodes or event handlers that are attached as a\n     * result of payment initialization.\n     *\n     * ```js\n     * await service.deinitializePayment({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of countries available for billing.\n     *\n     * Once you make a successful request, you will be able to retrieve the list\n     * of countries by calling `CheckoutStoreSelector#getBillingCountries`.\n     *\n     * ```js\n     * const state = await service.loadBillingCountries();\n     *\n     * console.log(state.data.getBillingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available billing countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._countryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'billingCountries' });\n    }\n\n    /**\n     * Loads a list of countries available for shipping.\n     *\n     * The list is determined based on the shipping zones configured by a\n     * merchant. Once you make a successful call, you will be able to retrieve\n     * the list of available shipping countries by calling\n     * `CheckoutStoreSelector#getShippingCountries`.\n     *\n     * ```js\n     * const state = await service.loadShippingCountries();\n     *\n     * console.log(state.data.getShippingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available shipping countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingCountryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'shippingCountries' });\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their billing address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getBillingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadBillingAddressFields();\n     *\n     * console.log(state.data.getBillingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the billing address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadBillingCountries(options);\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their shipping address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getShippingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadShippingAddressFields();\n     *\n     * console.log(state.data.getShippingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the shipping address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadShippingCountries(options);\n    }\n\n    /**\n     * Initializes the sign-in step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, have their own sign-in flow. In\n     * order to support them, this method must be called.\n     *\n     * ```js\n     * await service.initializeCustomer({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'signInButton',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeCustomer(options?: CustomerInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * De-initializes the sign-in step of a checkout process.\n     *\n     * It should be called once you no longer want to prompt customers to sign\n     * in. It can perform any necessary clean-up behind the scene, i.e.: remove\n     * DOM nodes or event handlers that are attached as a result of customer\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeCustomer({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Continues to check out as a guest.\n     *\n     * The customer is required to provide their email address in order to\n     * continue. Once they provide their email address, it will be stored as a\n     * part of their billing address.\n     *\n     * @param credentials - The guest credentials to use.\n     * @param options - Options for continuing as a guest.\n     * @returns A promise that resolves to the current state.\n     */\n    continueAsGuest(credentials: GuestCredentials, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.continueAsGuest(credentials, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Signs into a customer's registered account.\n     *\n     * Once the customer is signed in successfully, the checkout state will be\n     * populated with information associated with the customer, such as their\n     * saved addresses. You can call `CheckoutStoreSelector#getCustomer` to\n     * retrieve the data.\n     *\n     * ```js\n     * const state = await service.signInCustomer({\n     *     email: 'foo@bar.com',\n     *     password: 'password123',\n     * });\n     *\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param credentials - The credentials to be used for signing in the customer.\n     * @param options - Options for signing in the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signInCustomer(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signIn(credentials, options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Signs out the current customer if they are previously signed in.\n     *\n     * Once the customer is successfully signed out, the checkout state will be\n     * reset automatically.\n     *\n     * ```js\n     * const state = await service.signOutCustomer();\n     *\n     * // The returned object should not contain information about the previously signed-in customer.\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param options - Options for signing out the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signOutCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signOut(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Loads a list of shipping options available for checkout.\n     *\n     * Available shipping options can only be determined once a customer\n     * provides their shipping address. If the method is executed successfully,\n     * `CheckoutStoreSelector#getShippingOptions` can be called to retrieve the\n     * list of shipping options.\n     *\n     * ```js\n     * const state = await service.loadShippingOptions();\n     *\n     * console.log(state.data.getShippingOptions());\n     * ```\n     *\n     * @param options - Options for loading the available shipping options.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingOptions(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.loadShippingOptions(options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Initializes the shipping step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, can provide shipping information to\n     * be used for checkout. In order to support them, this method must be\n     * called.\n     *\n     * ```js\n     * await service.initializeShipping({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'addressBook',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeShipping(options?: ShippingInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * De-initializes the shipping step of a checkout process.\n     *\n     * It should be called once you no longer need to collect shipping details.\n     * It can perform any necessary clean-up behind the scene, i.e.: remove DOM\n     * nodes or event handlers that are attached as a result of shipping\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeShipping({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeShipping(options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for the current address.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectShippingOption('address-id', 'shipping-option-id');\n     *\n     * console.log(state.data.getSelectedShippingOption());\n     * ```\n     *\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectShippingOption(shippingOptionId: string, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.selectOption(shippingOptionId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the shipping address for the current checkout.\n     *\n     * When a customer updates their shipping address for an order, they will\n     * see an updated list of shipping options and the cost for each option,\n     * unless no options are available. If the update is successful, you can\n     * call `CheckoutStoreSelector#getShippingAddress` to retrieve the address.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateShippingAddress(address);\n     *\n     * console.log(state.data.getShippingAddress());\n     * ```\n     *\n     * @param address - The address to be used for shipping.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateShippingAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Creates consignments given a list.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddress`.\n     *\n     * When consignments are created, an updated list of shipping options will\n     * become available for each consignment, unless no options are available.\n     * If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve the updated list of\n     * consignments.'\n     *\n     * Beware that if a consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.createConsignments(consignments);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignments - The list of consignments to be created.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.createConsignments(consignments, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Deletes a consignment\n     *\n     * ```js\n     * const state = await service.deleteConsignment('55c96cda6f04c');\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The ID of the consignment to be deleted\n     * @param options - Options for the consignment delete request\n     * @returns A promise that resolves to the current state.\n     */\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.deleteConsignment(consignmentId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates a specific consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#selectShippingOption`.\n     *\n     * When a shipping address for a consignment is updated, an updated list of\n     * shipping options will become available for the consignment, unless no\n     * options are available. If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve updated list of\n     * consignments.\n     *\n     * Beware that if the updated consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateConsignment(consignment);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateConsignment(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that assigns items to be shipped to a specific address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and assigns the provided items. If no consignment matches the address, a new one\n     * will be created.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    assignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.assignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that unassigns items from a specific shipping address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and unassigns the specified items. If the consignment ends up with no line items\n     * after the unassignment, it will be deleted.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    unassignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.unassignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for a given consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddres`.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectConsignmentShippingOption(consignmentId, optionId);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The identified of the consignment to be updated.\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectConsignmentShippingOption(\n        consignmentId: string,\n        shippingOptionId: string,\n        options?: ShippingRequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateShippingOption({\n            id: consignmentId,\n            shippingOptionId,\n        }, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the billing address for the current checkout.\n     *\n     * A customer must provide their billing address before they can proceed to\n     * pay for their order.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateBillingAddress(address);\n     *\n     * console.log(state.data.getBillingAddress());\n     * ```\n     *\n     * @param address - The address to be used for billing.\n     * @param options - Options for updating the billing address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateBillingAddress(address: BillingAddressRequestBody, options: RequestOptions = {}): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a coupon code to the current checkout.\n     *\n     * Once the coupon code gets applied, the quote for the current checkout will\n     * be adjusted accordingly. The same coupon code cannot be applied more than\n     * once.\n     *\n     * ```js\n     * await service.applyCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to apply to the current checkout.\n     * @param options - Options for applying the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    applyCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.applyCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a coupon code from the current checkout.\n     *\n     * Once the coupon code gets removed, the quote for the current checkout will\n     * be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to remove from the current checkout.\n     * @param options - Options for removing the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    removeCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.removeCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a gift certificate to the current checkout.\n     *\n     * Once the gift certificate gets applied, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.applyGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to apply to the current checkout.\n     * @param options - Options for applying the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    applyGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.applyGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a gift certificate from an order.\n     *\n     * Once the gift certificate gets removed, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to remove from the current checkout.\n     * @param options - Options for removing the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    removeGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.removeGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads a list of payment instruments associated with a customer.\n     *\n     * Once the method has been called successfully, you can retrieve the list\n     * of payment instruments by calling `CheckoutStoreSelector#getInstruments`.\n     * If the customer does not have any payment instruments on record, i.e.:\n     * credit card, you will get an empty list instead.\n     *\n     * ```js\n     * const state = service.loadInstruments();\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @returns A promise that resolves to the current state.\n     */\n    loadInstruments(): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.loadInstruments();\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Deletes a payment instrument by an id.\n     *\n     * Once an instrument gets removed, it can no longer be retrieved using\n     * `CheckoutStoreSelector#getInstruments`.\n     *\n     * ```js\n     * const state = service.deleteInstrument('123');\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns A promise that resolves to the current state.\n     */\n    deleteInstrument(instrumentId: string): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.deleteInstrument(instrumentId);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Clear errors that have been collected from previous calls.\n     *\n     * ```js\n     * const state = await service.clearError(error);\n     *\n     * console.log(state.errors.getError());\n     * ```\n     *\n     * @param error - Specific error object to clear\n     * @returns A promise that resolves to the current state.\n     */\n    clearError(error: Error): Promise<CheckoutSelectors> {\n        const action = this._errorActionCreator.clearError(error);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Dispatches an action through the data store and returns the current state\n     * once the action is dispatched.\n     *\n     * @param action - The action to dispatch.\n     * @returns A promise that resolves to the current state.\n     */\n    private _dispatch(action: Action | Observable<Action> | ThunkAction<Action>, options?: { queueId?: string }): Promise<CheckoutSelectors> {\n        return this._store.dispatch(action, options)\n            .then(() => this.getState())\n            .catch(error => {\n                throw this._errorTransformer.transform(error);\n            });\n    }\n}\n","import { ErrorMessageTransformer } from '../common/error';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../common/error/errors';\nimport { getEnvironment } from '../common/utility';\n\nexport type CheckoutServiceErrorType = MissingDataError | NotInitializedError;\nexport type CheckoutServiceErrorTransformer = ErrorMessageTransformer<CheckoutServiceErrorType | Error>;\n\nexport default function createCheckoutServiceErrorTransformer(\n    isDevelopment: boolean = getEnvironment() === 'development'\n): CheckoutServiceErrorTransformer {\n    return new ErrorMessageTransformer(error => {\n        if (!isDevelopment || !isCheckoutServiceError(error)) {\n            return error.message;\n        }\n\n        switch (error.subtype || error.type) {\n        case MissingDataErrorType.MissingConsignments:\n            return `\n                ${error.message}\n                The data could be unavailable because no shipping address has been provided.\n                To fix this, create a consignment or update the shipping address before performing\n                the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCart:\n        case MissingDataErrorType.MissingCheckout:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadCheckout\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you need to make sure \\`CheckoutService\\` is initialized\n                properly by calling \\`CheckoutService#loadCheckout\\` before performing any\n                other actions.\n            `;\n\n        case MissingDataErrorType.MissingOrder:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadOrder\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingOrderId:\n            return `\n                ${error.message}\n                The data could be unavailable because no order has been created yet. You have\n                to first create the order before you can perform the action.\n            `;\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server, or\n                configured by the merchant yet. To fix the former issue, you can try calling\n                \\`CheckoutService#loadPaymentMethods\\` before performing the same action again.\n            `;\n\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return `\n                In order to initialize the customer step of checkout, you need to call\n                \\`CheckoutService#initializeCustomer\\`. Afterwards, you should be able to\n                submit customer details.\n            `;\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the payment step of checkout, you need to call\n                \\`CheckoutService#initializePayment\\`. Afterwards, you should be able to\n                submit payment details.\n            `;\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the shipping step of checkout, you need to call\n                \\`CheckoutService#initializeShipping\\`. Afterwards, you should be able to\n                submit shipping details.\n            `;\n\n        default:\n            return error.message;\n        }\n    });\n}\n\nfunction isCheckoutServiceError(error: any): error is CheckoutServiceErrorType {\n    return !!(error.subtype || error.type);\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { ErrorActionCreator } from '../common/error';\nimport { getDefaultLogger } from '../common/log';\nimport { getEnvironment } from '../common/utility';\nimport { ConfigActionCreator, ConfigRequestSender, ConfigState } from '../config';\nimport { CouponActionCreator, CouponRequestSender, GiftCertificateActionCreator, GiftCertificateRequestSender } from '../coupon';\nimport { createCustomerStrategyRegistry, CustomerStrategyActionCreator } from '../customer';\nimport { CountryActionCreator, CountryRequestSender } from '../geography';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { createPaymentClient, createPaymentStrategyRegistry, PaymentMethodActionCreator, PaymentMethodRequestSender, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator, InstrumentRequestSender } from '../payment/instrument';\nimport { createShippingStrategyRegistry, ConsignmentActionCreator, ConsignmentRequestSender, ShippingCountryActionCreator, ShippingCountryRequestSender, ShippingStrategyActionCreator } from '../shipping';\n\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport CheckoutService from './checkout-service';\nimport CheckoutValidator from './checkout-validator';\nimport createCheckoutStore from './create-checkout-store';\n\n/**\n * Creates an instance of `CheckoutService`.\n *\n * @remarks\n * ```js\n * const service = createCheckoutService();\n *\n * service.subscribe(state => {\n *     console.log(state);\n * });\n *\n * service.loadCheckout();\n * ```\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutService`.\n */\nexport default function createCheckoutService(options?: CheckoutServiceOptions): CheckoutService {\n    if (document.location.protocol !== 'https:') {\n        getDefaultLogger().warn('The BigCommerce Checkout SDK should not be used on a non-HTTPS page');\n    }\n\n    if (getEnvironment() !== 'production') {\n        getDefaultLogger().warn('Note that the development build is not optimized. To create a production build, set process.env.NODE_ENV to `production`.');\n    }\n\n    const config: ConfigState = {\n        meta: {\n            externalSource: options && options.externalSource,\n        },\n        errors: {},\n        statuses: {},\n    };\n    const { locale = '', shouldWarnMutation = true } = options || {};\n    const requestSender = createRequestSender({ host: options && options.host });\n    const store = createCheckoutStore({ config }, { shouldWarnMutation });\n    const paymentClient = createPaymentClient(store);\n    const orderRequestSender = new OrderRequestSender(requestSender);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const configActionCreator = new ConfigActionCreator(new ConfigRequestSender(requestSender));\n    const orderActionCreator = new OrderActionCreator(orderRequestSender, new CheckoutValidator(checkoutRequestSender));\n\n    return new CheckoutService(\n        store,\n        new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender)),\n        new CheckoutActionCreator(checkoutRequestSender, configActionCreator),\n        configActionCreator,\n        new ConsignmentActionCreator(new ConsignmentRequestSender(requestSender), checkoutRequestSender),\n        new CountryActionCreator(new CountryRequestSender(requestSender, { locale })),\n        new CouponActionCreator(new CouponRequestSender(requestSender)),\n        new CustomerStrategyActionCreator(createCustomerStrategyRegistry(store, requestSender)),\n        new ErrorActionCreator(),\n        new GiftCertificateActionCreator(new GiftCertificateRequestSender(requestSender)),\n        new InstrumentActionCreator(new InstrumentRequestSender(paymentClient, requestSender)),\n        orderActionCreator,\n        new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n        new PaymentStrategyActionCreator(\n            createPaymentStrategyRegistry(store, paymentClient, requestSender),\n            orderActionCreator\n        ),\n        new ShippingCountryActionCreator(new ShippingCountryRequestSender(requestSender, { locale })),\n        new ShippingStrategyActionCreator(createShippingStrategyRegistry(store, requestSender))\n    );\n}\n\nexport interface CheckoutServiceOptions {\n    locale?: string;\n    host?: string;\n    shouldWarnMutation?: boolean;\n    externalSource?: string;\n}\n","// tslint:disable-next-line:no-reference\n/// <reference path=\"../payment/bigpay-client.d.ts\" />\nimport { createClient as createBigpayClient } from '@bigcommerce/bigpay-client';\n\nimport { CheckoutStore } from '../checkout';\n\nexport default function createPaymentClient(store: CheckoutStore) {\n    const paymentClient = createBigpayClient();\n\n    store.subscribe(\n        state => {\n            const config = state.config.getStoreConfig();\n\n            if (config) {\n                paymentClient.setHost(config.paymentSettings.bigpayBaseUrl);\n            }\n        },\n        state => state.config.getStoreConfig()\n    );\n\n    return paymentClient;\n}\n","export * from './checkout-actions';\n\nexport { default as Checkout, CheckoutPayment } from './checkout';\nexport { default as CHECKOUT_DEFAULT_INCLUDES } from './checkout-default-includes';\nexport { default as CheckoutActionCreator } from './checkout-action-creator';\nexport { default as CheckoutParams, CheckoutIncludes } from './checkout-params';\nexport { default as checkoutReducer } from './checkout-reducer';\nexport { default as CheckoutRequestSender } from './checkout-request-sender';\nexport { default as CheckoutSelector } from './checkout-selector';\nexport { default as CheckoutSelectors } from './checkout-selectors';\nexport { default as CheckoutService } from './checkout-service';\nexport { default as CheckoutState } from './checkout-state';\nexport { default as CheckoutStoreErrorSelector } from './checkout-store-error-selector';\nexport { default as CheckoutStoreSelector } from './checkout-store-selector';\nexport { default as CheckoutStoreState } from './checkout-store-state';\nexport { default as CheckoutStoreStatusSelector } from './checkout-store-status-selector';\nexport { default as CheckoutStore, CheckoutStoreOptions, ReadableCheckoutStore } from './checkout-store';\nexport { default as CheckoutValidator } from './checkout-validator';\nexport { default as InternalCheckoutSelectors } from './internal-checkout-selectors';\n\nexport { default as createActionTransformer } from './create-action-transformer';\nexport { default as createCheckoutService } from './create-checkout-service';\nexport { default as createCheckoutStore } from './create-checkout-store';\nexport { default as createCheckoutSelectors } from './create-checkout-selectors';\nexport { default as createInternalCheckoutSelectors } from './create-internal-checkout-selectors';\n","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n};\n\nexport default class RequestError<TBody = any> extends StandardError {\n    body: TBody | {};\n    headers: { [key: string]: any; };\n    errors: Array<{ code: string, message?: string }>;\n    status: number;\n\n    constructor(\n        response?: Response<TBody | {}>,\n        { message, errors }: {\n            message?: string;\n            errors?: Array<{ code: string, message?: string }>,\n        } = {}\n    ) {\n        const { body, headers, status } = response || DEFAULT_RESPONSE;\n\n        super(message || 'An unexpected error has occurred.');\n\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.errors = errors || [];\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport Config from './config';\n\nexport enum ConfigActionType {\n    LoadConfigRequested = 'LOAD_CONFIG_REQUESTED',\n    LoadConfigSucceeded = 'LOAD_CONFIG_SUCCEEDED',\n    LoadConfigFailed = 'LOAD_CONFIG_FAILED',\n}\n\nexport type LoadConfigAction =\n    LoadConfigRequestedAction |\n    LoadConfigSucceededAction |\n    LoadConfigFailedAction;\n\nexport interface LoadConfigRequestedAction extends Action {\n    type: ConfigActionType.LoadConfigRequested;\n}\n\nexport interface LoadConfigSucceededAction extends Action<Config> {\n    type: ConfigActionType.LoadConfigSucceeded;\n}\n\nexport interface LoadConfigFailedAction extends Action<Error> {\n    type: ConfigActionType.LoadConfigFailed;\n}\n","import { memoize } from 'lodash';\n\nimport { bindDecorator, isEqual, isPrivate, CacheKeyResolver } from '../utility';\n\n/**\n * Decorates a class by patching all of its methods to cache their return values\n * and return them if they are called again with the same set of parameters. The\n * decorator also binds all the methods to the calling instance so it can be\n * destructed.\n */\nexport default function selectorDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                selectorMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\nfunction selectorMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let resolver = new CacheKeyResolver();\n    let method = descriptor.value;\n    let memoizedMethod = memoize(method, (...args) => resolver.getKey(...args));\n\n    return bindDecorator(target, key, {\n        get() {\n            const value = ((...args: any[]) => {\n                const cachedValue = memoizedMethod.call(this, ...args);\n\n                if (resolver.getUsedCount(...args) === 1) {\n                    return cachedValue;\n                }\n\n                const newValue = method.call(this, ...args);\n\n                if (isEqual(newValue, cachedValue, { keyFilter: key => !isPrivate(key) })) {\n                    return cachedValue;\n                }\n\n                memoizedMethod.cache.set(resolver.getKey(...args), newValue);\n\n                return newValue;\n            }) as T;\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n        set(value) {\n            resolver = new CacheKeyResolver();\n            method = value;\n            memoizedMethod = memoize(method, (...args) => resolver.getKey(...args));\n        },\n    });\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\ntype Method = (...args: any[]) => any;\n","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","import { Action } from '@bigcommerce/data-store';\n\nimport Country from './country';\n\nexport enum CountryActionType {\n    LoadCountriesRequested = 'LOAD_COUNTRIES_REQUESTED',\n    LoadCountriesSucceeded = 'LOAD_COUNTRIES_SUCCEEDED',\n    LoadCountriesFailed = 'LOAD_COUNTRIES_FAILED',\n}\n\nexport type LoadCountriesAction =\n    LoadCountriesRequestedAction |\n    LoadCountriesSucceededAction |\n    LoadCountriesFailedAction;\n\nexport interface LoadCountriesRequestedAction extends Action {\n    type: CountryActionType.LoadCountriesRequested;\n}\n\nexport interface LoadCountriesSucceededAction extends Action<Country[]> {\n    type: CountryActionType.LoadCountriesSucceeded;\n}\n\nexport interface LoadCountriesFailedAction extends Action<Error> {\n    type: CountryActionType.LoadCountriesFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Country } from '../geography';\n\nexport enum ShippingCountryActionType {\n    LoadShippingCountriesRequested = 'LOAD_SHIPPING_COUNTRIES_REQUESTED',\n    LoadShippingCountriesSucceeded = 'LOAD_SHIPPING_COUNTRIES_SUCCEEDED',\n    LoadShippingCountriesFailed = 'LOAD_SHIPPING_COUNTRIES_FAILED',\n}\n\nexport type LoadShippingCountriesAction = LoadShippingCountriesRequestedAction |\n    LoadShippingCountriesSucceededAction |\n    LoadShippingCountriesFailedAction;\n\nexport interface LoadShippingCountriesRequestedAction extends Action {\n    type: ShippingCountryActionType.LoadShippingCountriesRequested;\n}\n\nexport interface LoadShippingCountriesSucceededAction extends Action<Country[]> {\n    type: ShippingCountryActionType.LoadShippingCountriesSucceeded;\n}\n\nexport interface LoadShippingCountriesFailedAction extends Action<Error> {\n    type: ShippingCountryActionType.LoadShippingCountriesFailed;\n}\n","module.exports = require(\"@bigcommerce/request-sender\");","export const ACKNOWLEDGE = 'ACKNOWLEDGE';\nexport const FINALIZE = 'FINALIZE';\nexport const INITIALIZE = 'INITIALIZE';\n","module.exports = require(\"@bigcommerce/script-loader\");","export default interface PaymentStrategyState {\n    data: PaymentStrategyDataState;\n    errors: PaymentStrategyErrorsState;\n    statuses: PaymentStrategyStatusesState;\n}\n\nexport interface PaymentStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean,\n    };\n}\n\nexport interface PaymentStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    executeError?: Error;\n    executeMethodId?: string;\n    finalizeError?: Error;\n    finalizeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface PaymentStrategyStatusesState {\n    deinitializeMethodId?: string;\n    executeMethodId?: string;\n    finalizeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isExecuting?: boolean;\n    isFinalizing?: boolean;\n    isInitializing?: boolean;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: PaymentStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { omitDeep } from '../utility';\n\nimport { ClearErrorAction, ErrorActionType } from './error-actions';\n\nexport default function clearErrorReducer<TState extends { [key: string]: any }, TAction extends Action>(\n    state: TState,\n    action: TAction\n): TState | undefined {\n    if (isClearErrorAction(action)) {\n        return omitDeep(state, value => value === action.payload);\n    }\n\n    return state;\n}\n\nfunction isClearErrorAction(action: Action): action is ClearErrorAction {\n    return action.type === ErrorActionType.ClearError;\n}\n","const CHECKOUT_DEFAULT_INCLUDES = [\n    'cart.lineItems.physicalItems.options',\n    'cart.lineItems.digitalItems.options',\n    'customer',\n    'payments',\n    'promotions.banners',\n];\n\nexport default CHECKOUT_DEFAULT_INCLUDES;\n","export interface CompareOptions {\n    keyFilter?(key: string): boolean;\n}\n\nexport default function isEqual(objectA: any, objectB: any, options?: CompareOptions): boolean {\n    if (objectA === objectB) {\n        return true;\n    }\n\n    if (objectA && objectB && typeof objectA === 'object' && typeof objectB === 'object') {\n        if (Array.isArray(objectA) && Array.isArray(objectB)) {\n            return isArrayEqual(objectA, objectB, options);\n        }\n\n        if (Array.isArray(objectA) || Array.isArray(objectB)) {\n            return false;\n        }\n\n        if ((objectA instanceof Date) && (objectB instanceof Date)) {\n            return isDateEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof Date) || (objectB instanceof Date)) {\n            return false;\n        }\n\n        if ((objectA instanceof RegExp) && (objectB instanceof RegExp)) {\n            return isRegExpEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof RegExp) || (objectB instanceof RegExp)) {\n            return false;\n        }\n\n        return isObjectEqual(objectA, objectB, options);\n    }\n\n    return objectA === objectB;\n}\n\nfunction isRegExpEqual(objectA: RegExp, objectB: RegExp): boolean {\n    return objectA.toString() === objectB.toString();\n}\n\nfunction isDateEqual(objectA: Date, objectB: Date): boolean {\n    return objectA.getTime() === objectB.getTime();\n}\n\nfunction isArrayEqual(objectA: any[], objectB: any[], options?: CompareOptions): boolean {\n    if (objectA.length !== objectB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = objectA.length; index < length; index++) {\n        if (!isEqual(objectA[index], objectB[index], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction isObjectEqual(\n    objectA: { [key: string]: any },\n    objectB: { [key: string]: any },\n    options?: CompareOptions\n): boolean {\n    const filter = options && options.keyFilter;\n    const keysA = filter ? Object.keys(objectA).filter(filter) : Object.keys(objectA);\n    const keysB = filter ? Object.keys(objectB).filter(filter) : Object.keys(objectB);\n\n    if (keysA.length !== keysB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = keysA.length; index < length; index++) {\n        const key = keysA[index];\n\n        if (!objectB.hasOwnProperty(key)) {\n            return false;\n        }\n\n        if (!isEqual(objectA[key], objectB[key], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadCheckoutAction } from '../checkout';\n\nimport { InternalCustomerResponseData } from './internal-customer-responses';\n\nexport enum CustomerActionType {\n    SignInCustomerRequested = 'SIGN_IN_CUSTOMER_REQUESTED',\n    SignInCustomerSucceeded = 'SIGN_IN_CUSTOMER_SUCCEEDED',\n    SignInCustomerFailed = 'SIGN_IN_CUSTOMER_FAILED',\n\n    SignOutCustomerRequested = 'SIGN_OUT_CUSTOMER_REQUESTED',\n    SignOutCustomerSucceeded = 'SIGN_OUT_CUSTOMER_SUCCEEDED',\n    SignOutCustomerFailed = 'SIGN_OUT_CUSTOMER_FAILED',\n}\n\nexport type CustomerAction =\n    SignInCustomerAction |\n    SignOutCustomerAction;\n\nexport type SignInCustomerAction =\n    SignInCustomerRequestedAction |\n    SignInCustomerSucceededAction |\n    SignInCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport type SignOutCustomerAction =\n    SignOutCustomerRequestedAction |\n    SignOutCustomerSucceededAction |\n    SignOutCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport interface SignInCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignInCustomerRequested;\n}\n\nexport interface SignInCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignInCustomerSucceeded;\n}\n\nexport interface SignInCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignInCustomerFailed;\n}\n\nexport interface SignOutCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignOutCustomerRequested;\n}\n\nexport interface SignOutCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignOutCustomerSucceeded;\n}\n\nexport interface SignOutCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignOutCustomerFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderAction } from '../order';\n\nimport PaymentResponseBody from './payment-response-body';\n\nexport enum PaymentActionType {\n    SubmitPaymentRequested = 'SUBMIT_PAYMENT_REQUESTED',\n    SubmitPaymentSucceeded = 'SUBMIT_PAYMENT_SUCCEEDED',\n    SubmitPaymentFailed = 'SUBMIT_PAYMENT_FAILED',\n\n    InitializeOffsitePaymentRequested = 'INITIALIZE_OFFSITE_PAYMENT_REQUESTED',\n    InitializeOffsitePaymentSucceeded = 'INITIALIZE_OFFSITE_PAYMENT_SUCCEEDED',\n    InitializeOffsitePaymentFailed = 'INITIALIZE_OFFSITE_PAYMENT_FAILED',\n}\n\nexport type PaymentAction = SubmitPaymentAction |\n    InitializeOffsitePaymentAction;\n\nexport type SubmitPaymentAction =\n    SubmitPaymentRequestedAction |\n    SubmitPaymentSucceededAction |\n    SubmitPaymentFailedAction |\n    LoadOrderAction;\n\nexport type InitializeOffsitePaymentAction =\n    InitializeOffsitePaymentRequestedAction |\n    InitializeOffsitePaymentSucceededAction |\n    InitializeOffsitePaymentFailedAction;\n\nexport interface SubmitPaymentRequestedAction extends Action {\n    type: PaymentActionType.SubmitPaymentRequested;\n}\n\nexport interface SubmitPaymentSucceededAction extends Action<PaymentResponseBody> {\n    type: PaymentActionType.SubmitPaymentSucceeded;\n}\n\nexport interface SubmitPaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.SubmitPaymentFailed;\n}\n\nexport interface InitializeOffsitePaymentRequestedAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentRequested;\n}\n\nexport interface InitializeOffsitePaymentSucceededAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentSucceeded;\n}\n\nexport interface InitializeOffsitePaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.InitializeOffsitePaymentFailed;\n}\n","import StandardError from './standard-error';\n\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.type = 'invalid_argument';\n    }\n}\n","export const HOSTED = 'PAYMENT_TYPE_HOSTED';\nexport const OFFLINE = 'PAYMENT_TYPE_OFFLINE';\n","export default class AmountTransformer {\n    constructor(private _dp: number) {}\n\n    toInteger(amount: number): number {\n        return Math.floor(amount * Math.pow(10, this._dp));\n    }\n}\n","import IframeEvent from './iframe-event';\n\nexport default function isIframeEvent<TEvent extends IframeEvent<TType>, TType extends string>(\n    object: any,\n    type: TType\n): object is TEvent {\n    return object.type === type;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { RequestError } from '../../common/error/errors';\n\nexport default class PaymentMethodInvalidError extends RequestError {\n    constructor(response?: Response) {\n        super(response, { message: 'There is a problem processing your payment. Please try again later.' });\n\n        this.type = 'payment_method_invalid';\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonErrorSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    getInitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getInitializeError(methodId);\n    }\n\n    getDeinitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getDeinitializeError(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonStatusSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    isInitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isInitializing(methodId);\n    }\n\n    isDeinitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isDeinitializing(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\n\nimport CheckoutButtonErrorSelector from './checkout-button-error-selector';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStatusSelector from './checkout-button-status-selector';\n\nexport default function createCheckoutButtonSelectors(selectors: InternalCheckoutSelectors): CheckoutButtonSelectors {\n    const errors = new CheckoutButtonErrorSelector(selectors);\n    const statuses = new CheckoutButtonStatusSelector(selectors);\n\n    return {\n        errors,\n        statuses,\n    };\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../checkout';\nimport { isElementId, setUniqueElementId } from '../common/dom';\n\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonSelectors from './create-checkout-button-selectors';\n\nexport default class CheckoutButtonInitializer {\n    private _state: CheckoutButtonSelectors;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _buttonStrategyActionCreator: CheckoutButtonStrategyActionCreator\n    ) {\n        this._state = createCheckoutButtonSelectors(this._store.getState());\n\n        this._store.subscribe(state => {\n            this._state = createCheckoutButtonSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * state. You can query the state by calling any of its getter methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.errors.getInitializeButtonError());\n     * console.log(state.statuses.isInitializingButton());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutButtonSelectors {\n        return this._state;\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the current state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.statuses.isInitializingButton());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.errors.getInitializeButtonError();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.errors.getInitializeButtonError())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutButtonSelectors) => void,\n        ...filters: Array<(state: CheckoutButtonSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            state => state.checkoutButton.getState(),\n            ...filters.map(filter => (state: InternalCheckoutSelectors) => filter(createCheckoutButtonSelectors(state)))\n        );\n    }\n\n    /**\n     * Initializes the checkout button of a payment method.\n     *\n     * When the checkout button is initialized, it will be inserted into the DOM,\n     * ready to be interacted with by the customer.\n     *\n     * ```js\n     * initializer.initializeButton({\n     *     methodId: 'braintreepaypal',\n     *     containerId: 'checkoutButton',\n     *     braintreepaypal: {\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeButton(options: CheckoutButtonInitializeOptions): Promise<CheckoutButtonSelectors> {\n        const containerIds = isElementId(options.containerId) ?\n            [options.containerId] :\n            setUniqueElementId(options.containerId, `${options.methodId}-container`);\n\n        return Promise.all(\n            containerIds.map(containerId => {\n                const action = this._buttonStrategyActionCreator.initialize({ ...options, containerId });\n                const queueId = `checkoutButtonStrategy:${options.methodId}:${containerId}`;\n\n                return this._store.dispatch(action, { queueId });\n            })\n        )\n            .then(() => this.getState());\n    }\n\n    /**\n     * De-initializes the checkout button by performing any necessary clean-ups.\n     *\n     * ```js\n     * await service.deinitializeButton({\n     *     methodId: 'braintreepaypal',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeButton(options: CheckoutButtonOptions): Promise<CheckoutButtonSelectors> {\n        const action = this._buttonStrategyActionCreator.deinitialize(options);\n        const queueId = `checkoutButtonStrategy:${options.methodId}`;\n\n        return this._store.dispatch(action, { queueId })\n            .then(() => this.getState());\n    }\n}\n","enum CheckoutButtonMethodType {\n    BRAINTREE_PAYPAL = 'braintreepaypal',\n    BRAINTREE_PAYPAL_CREDIT = 'braintreepaypalcredit',\n    GOOGLEPAY_BRAINTREE = 'googlepaybraintree',\n    GOOGLEPAY_STRIPE = 'googlepaystripe',\n    MASTERPASS = 'masterpass',\n    PAYPALEXPRESS = 'paypalexpress',\n}\n\nexport default CheckoutButtonMethodType;\n","export default function isElementId(id: string): boolean {\n    return /^\\w[\\w\\-\\:\\.]*$/.test(id);\n}\n","import { uniqueId } from 'lodash';\n\nimport { InvalidArgumentError } from '../error/errors';\n\nexport default function setUniqueElementId(selector: string, idPrefix: string): string[] {\n    const containers = document.querySelectorAll(selector);\n\n    if (!containers.length) {\n        throw new InvalidArgumentError(`Unable to find any element with the specified selector: ${selector}`);\n    }\n\n    return Array.prototype.slice.call(containers)\n        .map((container: HTMLElement) => {\n            if (!container.id) {\n                container.id = uniqueId(idPrefix);\n            }\n\n            return container.id;\n        });\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator } from '../payment';\n\nimport { CheckoutButtonActionType, DeinitializeButtonAction, InitializeButtonAction } from './checkout-button-actions';\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport { CheckoutButtonStrategy } from './strategies';\n\nexport default class CheckoutButtonStrategyActionCreator {\n    constructor(\n        private _registry: Registry<CheckoutButtonStrategy>,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): ThunkAction<InitializeButtonAction, InternalCheckoutSelectors> {\n        return store => {\n            const meta = { methodId: options.methodId, containerId: options.containerId };\n\n            if (store.getState().checkoutButton.isInitialized(options.methodId, options.containerId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(CheckoutButtonActionType.InitializeButtonRequested, undefined, meta)),\n                this._paymentMethodActionCreator.loadPaymentMethod(options.methodId, { timeout: options.timeout, useCache: true }),\n                defer(() => this._registry.get(options.methodId).initialize(options)\n                    .then(() => createAction(CheckoutButtonActionType.InitializeButtonSucceeded, undefined, meta)))\n            ).pipe(\n                catchError(error => throwErrorAction(CheckoutButtonActionType.InitializeButtonFailed, error, meta))\n            );\n        };\n    }\n\n    deinitialize(options: CheckoutButtonOptions): ThunkAction<DeinitializeButtonAction, InternalCheckoutSelectors> {\n        return store => {\n            const meta = { methodId: options.methodId };\n\n            if (!store.getState().checkoutButton.isInitialized(options.methodId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(CheckoutButtonActionType.DeinitializeButtonRequested, undefined, meta)),\n                defer(() => this._registry.get(options.methodId).deinitialize()\n                    .then(() => createAction(CheckoutButtonActionType.DeinitializeButtonSucceeded, undefined, meta)))\n            ).pipe(\n                catchError(error => throwErrorAction(CheckoutButtonActionType.DeinitializeButtonFailed, error, meta))\n            );\n        };\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { Address, LegacyAddress } from '../../../address';\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { PaymentMethod } from '../../../payment';\nimport { BraintreeAddress, BraintreeError, BraintreePaypalCheckout, BraintreeSDKCreator, BraintreeTokenizePayload } from '../../../payment/strategies/braintree';\nimport { PaypalAuthorizeData, PaypalScriptLoader } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\n\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class BraintreePaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paypalCheckout?: BraintreePaypalCheckout;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _offerCredit: boolean = false\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = (this._offerCredit ? options.braintreepaypalcredit : options.braintreepaypal) || {};\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paymentMethod || !paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return Promise.all([\n            this._braintreeSDKCreator.getPaypalCheckout(),\n            this._paypalScriptLoader.loadPaypal(),\n        ])\n            .then(([paypalCheckout, paypal]) => {\n                this._paypalCheckout = paypalCheckout;\n\n                const allowedSources = [];\n                const disallowedSources = [];\n\n                if (paypalOptions.allowCredit) {\n                    allowedSources.push(paypal.FUNDING.CREDIT);\n                } else {\n                    disallowedSources.push(paypal.FUNDING.CREDIT);\n                }\n\n                return paypal.Button.render({\n                    env: paymentMethod.config.testMode ? 'sandbox' : 'production',\n                    commit: paypalOptions.shouldProcessPayment ? true : false,\n                    funding: {\n                        allowed: allowedSources,\n                        disallowed: disallowedSources,\n                    },\n                    style: {\n                        shape: 'rect',\n                        label: this._offerCredit ? 'credit' : undefined,\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: () => this._setupPayment(paypalOptions.onPaymentError),\n                    onAuthorize: data => this._tokenizePayment(data, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, options.containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paypalCheckout = undefined;\n        this._paymentMethod = undefined;\n\n        this._braintreeSDKCreator.teardown();\n\n        return Promise.resolve();\n    }\n\n    private _setupPayment(onError?: (error: BraintreeError | StandardError) => void): Promise<string> {\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const checkout = state.checkout.getCheckout();\n                const config = state.config.getStoreConfig();\n                const customer = state.customer.getCustomer();\n                const address = customer && customer.addresses && customer.addresses[0];\n\n                if (!this._paypalCheckout) {\n                    throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                return this._paypalCheckout.createPayment({\n                    flow: 'checkout',\n                    enableShippingAddress: true,\n                    shippingAddressEditable: false,\n                    shippingAddressOverride: address ? this._mapToBraintreeAddress(address) : undefined,\n                    amount: checkout.grandTotal,\n                    currency: config.currency.code,\n                    offerCredit: this._offerCredit,\n                });\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        shouldProcessPayment?: boolean,\n        onError?: (error: BraintreeError | StandardError) => void\n    ): Promise<BraintreeTokenizePayload> {\n        if (!this._paypalCheckout || !this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return Promise.all([\n            this._paypalCheckout.tokenizePayment(data),\n            this._braintreeSDKCreator.getDataCollector({ paypal: true }),\n        ])\n            .then(([payload, { deviceData }]) => {\n                this._formPoster.postForm('/checkout.php', {\n                    payment_type: 'paypal',\n                    provider: methodId,\n                    action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                    nonce: payload.nonce,\n                    device_data: deviceData,\n                    shipping_address: JSON.stringify(this._mapToLegacyShippingAddress(payload)),\n                    billing_address: JSON.stringify(this._mapToLegacyBillingAddress(payload)),\n                });\n\n                return payload;\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _mapToLegacyShippingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const shippingAddress = payload.details.shippingAddress;\n        const recipientName = shippingAddress && shippingAddress.recipientName || '';\n        const [firstName, lastName] = recipientName.split(' ');\n\n        return {\n            email: payload.details.email,\n            first_name: firstName,\n            last_name: lastName,\n            phone_number: shippingAddress && shippingAddress.phone || payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToLegacyBillingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const billingAddress = payload.details.billingAddress;\n        const shippingAddress = payload.details.shippingAddress;\n\n        if (billingAddress) {\n            return {\n                email: payload.details.email,\n                first_name: billingAddress.firstName || payload.details.firstName,\n                last_name: billingAddress.lastName || payload.details.lastName,\n                phone_number: billingAddress.phone || payload.details.phone,\n                address_line_1: billingAddress.line1,\n                address_line_2: billingAddress.line2,\n                city: billingAddress.city,\n                state: billingAddress.state,\n                country_code: billingAddress.countryCode,\n                postal_code: billingAddress.postalCode,\n            };\n        }\n\n        return {\n            email: payload.details.email,\n            first_name: payload.details.firstName,\n            last_name: payload.details.lastName,\n            phone_number: payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToBraintreeAddress(address: Address): BraintreeAddress {\n        return {\n            line1: address.address1,\n            line2: address.address2,\n            city: address.city,\n            state: address.stateOrProvinceCode,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phone,\n            recipientName: `${address.firstName} ${address.lastName}`,\n        };\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class GooglePayButtonStrategy implements CheckoutButtonStrategy {\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _formPoster: FormPoster,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        this._methodId = methodId;\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(() => this._googlePayPaymentProcessor.initialize(this._getMethodId()))\n            .then(() => {\n                this._walletButton = this._createSignInButton(containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.getElementById(containerId);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const googlePayButton = this._googlePayPaymentProcessor.createButton(this._handleWalletButtonClick);\n\n        container.appendChild(googlePayButton);\n\n        return googlePayButton;\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        return this._googlePayPaymentProcessor.displayWallet()\n            .then(paymentData => this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => {\n                if (paymentData.shippingAddress) {\n                    this._googlePayPaymentProcessor.updateShippingAddress(paymentData.shippingAddress);\n                }\n            }))\n            .then(() => this._onPaymentSelectComplete())\n            .catch(error => this._onError(error));\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n\n    private _onError(error?: Error): void {\n        if (error && error.message !== 'CANCELED') {\n            throw error;\n        }\n    }\n}\n","import { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType\n} from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { getCallbackUrl, Masterpass, MasterpassCheckoutOptions, MasterpassScriptLoader } from '../../../payment/strategies/masterpass';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\n\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class MasterpassButtonStrategy implements CheckoutButtonStrategy {\n    private _masterpassClient?: Masterpass;\n    private _methodId?: string;\n    private _signInButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        this._methodId = methodId;\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod || !paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._masterpassScriptLoader.load(paymentMethod.config.testMode);\n            })\n            .then(masterpass => {\n                this._masterpassClient = masterpass;\n                this._signInButton = this._createSignInButton(containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.removeEventListener('click', this._handleWalletButtonClick);\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return Promise.resolve();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const buttonContainer = document.getElementById(containerId);\n\n        if (!buttonContainer) {\n            throw new Error('Need a container to place the button');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        buttonContainer.appendChild(button);\n\n        button.addEventListener('click', this._handleWalletButtonClick);\n\n        return button;\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const paymentMethod = this._methodId ? state.paymentMethods.getPaymentMethod(this._methodId) : null;\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.cart.cartAmount.toString(),\n            currency: checkout.cart.currency.code,\n            cartId: checkout.cart.id,\n            suppressShippingAddress: false,\n            callbackUrl: getCallbackUrl('cart'),\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(): void {\n        if (!this._masterpassClient) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        this._masterpassClient.checkout(this._createMasterpassPayload());\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { INTERNAL_USE_ONLY } from '../../../common/http-request';\nimport { PaymentMethod } from '../../../payment';\nimport { PaypalActions, PaypalAuthorizeData, PaypalClientToken } from '../../../payment/strategies/paypal';\nimport { PaypalScriptLoader } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class PaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _host: string = ''\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = options.paypal;\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paypalOptions) {\n            throw new InvalidArgumentError();\n        }\n\n        return this._paypalScriptLoader.loadPaypal()\n            .then(paypal => {\n                if (!paymentMethod || !paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const merchantId = paymentMethod.config.merchantId;\n                const env = paymentMethod.config.testMode ? 'sandbox' : 'production';\n                const clientToken: PaypalClientToken = { [env]: paypalOptions.clientId };\n\n                const allowedSources = [];\n                const disallowedSources = [];\n\n                if (paypalOptions.allowCredit) {\n                    allowedSources.push(paypal.FUNDING.CREDIT);\n                } else {\n                    disallowedSources.push(paypal.FUNDING.CREDIT);\n                }\n\n                return paypal.Button.render({\n                    env,\n                    client: clientToken,\n                    commit: paypalOptions.shouldProcessPayment,\n                    funding: {\n                        allowed: allowedSources,\n                        disallowed: disallowedSources,\n                    },\n                    style: {\n                        shape: 'rect',\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: (data, actions) => this._setupPayment(merchantId, actions, paypalOptions.onPaymentError),\n                    onAuthorize: (data, actions) => this._tokenizePayment(data, actions, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, options.containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve();\n    }\n\n    private _setupPayment(merchantId: string, actions?: PaypalActions, onError?: (error: StandardError) => void): Promise<string> {\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const cart = state.cart.getCart();\n                const cartId = cart ? cart.id : '';\n\n                return actions.request.post(`${this._host}/api/storefront/payment/paypalexpress`, { merchantId, cartId }, {\n                    headers: {\n                        'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                    },\n                });\n            })\n            .then(res => res.id)\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        actions?: PaypalActions,\n        shouldProcessPayment?: boolean,\n        onError?: (error: StandardError) => void\n    ): Promise<void> {\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!data.paymentID || !data.payerID) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return actions.payment.get(data.paymentID).then(payload => {\n            this._formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                paymentId: data.paymentID,\n                payerId: data.payerID,\n                payerInfo: JSON.stringify(payload.payer.payer_info),\n            });\n        });\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { createCheckoutStore } from '../checkout';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\n\nimport CheckoutButtonInitializer from './checkout-button-initializer';\nimport CheckoutButtonInitializerOptions from './checkout-button-initializer-options';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonRegistry from './create-checkout-button-registry';\n\n/**\n * Creates an instance of `CheckoutButtonInitializer`.\n *\n * @remarks\n * ```js\n * const initializer = createCheckoutButtonInitializer();\n *\n * initializer.initializeButton({\n *     methodId: 'braintreepaypal',\n *     braintreepaypal: {\n *         container: '#checkoutButton',\n *     },\n * });\n * ```\n *\n * @alpha\n * Please note that `CheckoutButtonInitializer` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutButtonInitializer`.\n */\nexport default function createCheckoutButtonInitializer(\n    options?: CheckoutButtonInitializerOptions\n): CheckoutButtonInitializer {\n    const host = options && options.host;\n    const store = createCheckoutStore();\n    const requestSender = createRequestSender({ host });\n    const formPoster = createFormPoster({ host });\n\n    return new CheckoutButtonInitializer(\n        store,\n        new CheckoutButtonStrategyActionCreator(\n            createCheckoutButtonRegistry(store, requestSender, formPoster, host),\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender))\n        )\n    );\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { BraintreeScriptLoader, BraintreeSDKCreator } from '../payment/strategies/braintree';\nimport { createGooglePayPaymentProcessor, GooglePayBraintreeInitializer, GooglePayStripeInitializer } from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { PaypalScriptLoader } from '../payment/strategies/paypal';\n\nimport { CheckoutButtonMethodType, CheckoutButtonStrategy } from './strategies';\nimport { BraintreePaypalButtonStrategy } from './strategies/braintree';\nimport { GooglePayButtonStrategy } from './strategies/googlepay';\nimport { MasterpassButtonStrategy } from './strategies/masterpass';\nimport { PaypalButtonStrategy } from './strategies/paypal';\n\nexport default function createCheckoutButtonRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender,\n    formPoster: FormPoster,\n    host?: string\n): Registry<CheckoutButtonStrategy, CheckoutButtonMethodType> {\n    const registry = new Registry<CheckoutButtonStrategy, CheckoutButtonMethodType>();\n    const scriptLoader = getScriptLoader();\n    const checkoutActionCreator = new CheckoutActionCreator(\n        new CheckoutRequestSender(requestSender),\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            formPoster\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL_CREDIT, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            formPoster,\n            true\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.MASTERPASS, () =>\n        new MasterpassButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        ));\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_BRAINTREE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_STRIPE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.PAYPALEXPRESS, () =>\n        new PaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new PaypalScriptLoader(scriptLoader),\n            formPoster,\n            host\n        )\n    );\n\n    return registry;\n}\n","export { default as createCheckoutButtonInitializer } from './create-checkout-button-initializer';\nexport { default as checkoutButtonReducer } from './checkout-button-reducer';\nexport { default as CheckoutButtonSelector } from './checkout-button-selector';\nexport { default as CheckoutButtonState } from './checkout-button-state';\n\nexport { CheckoutButtonOptions, CheckoutButtonInitializeOptions } from './checkout-button-options';\n","export enum CheckoutIncludes {\n    AvailableShippingOptions = 'consignments.availableShippingOptions',\n    PhysicalItemsCategoryNames = 'cart.lineItems.physicalItems.categoryNames',\n    DigitalItemsCategoryNames = 'cart.lineItems.digitalItems.categoryNames',\n}\n\nexport default interface CheckoutParams {\n    include?: CheckoutIncludes[];\n}\n","module.exports = require(\"@bigcommerce/form-poster\");","import InternalLineItem from './internal-line-item';\nimport { LineItem } from './line-item';\nimport LineItemMap from './line-item-map';\nimport mapGiftCertificateToInternalLineItem from './map-gift-certificate-to-internal-line-item';\nimport mapToInternalLineItem from './map-to-internal-line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItems(\n    itemMap: LineItemMap,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem[] {\n    return (Object.keys(itemMap) as Array<keyof LineItemMap>)\n        .reduce((result, key) => [\n            ...result,\n            ...(itemMap[key] as LineItem[]).map((item: any) => {\n                if (key === 'giftCertificates') {\n                    return mapGiftCertificateToInternalLineItem(item, decimalPlaces);\n                }\n\n                return mapToInternalLineItem(\n                    item,\n                    mapToInternalLineItemType(key),\n                    decimalPlaces,\n                    idKey\n                );\n            }),\n        ], [] as InternalLineItem[]);\n}\n\nfunction mapToInternalLineItemType(type: string): string {\n    switch (type) {\n        case 'physicalItems':\n            return 'ItemPhysicalEntity';\n\n        case 'digitalItems':\n            return 'ItemDigitalEntity';\n\n        case 'giftCertificates':\n            return 'ItemGiftCertificateEntity';\n\n        default:\n            return '';\n    }\n}\n","module.exports = require(\"local-storage-fallback\");","import { createErrorAction, Action } from '@bigcommerce/data-store';\nimport { concat, of, throwError, Observable } from 'rxjs';\n\nexport default function throwErrorAction<TPayload, TMeta, TType extends string>(\n    type: TType,\n    error?: TPayload,\n    meta?: TMeta\n): Observable<Action<TPayload, TMeta, TType>> {\n    if (isErrorAction(error)) {\n        return concat(of(error), throwError(createErrorAction(type, error.payload, meta)));\n    }\n\n    return throwError(createErrorAction(type, error, meta));\n}\n\nfunction isErrorAction(action: any): action is Action {\n    return action && action.type && action.error;\n}\n","import isEqual from './is-equal';\n\nexport default class CacheKeyResolver {\n    private _lastId = 0;\n    private _maps: CacheKeyMap[] = [];\n\n    getKey(...args: any[]): string {\n        const { index, map, parentMaps } = this._resolveMap(...args);\n\n        if (map && map.cacheKey) {\n            map.usedCount++;\n\n            return map.cacheKey;\n        }\n\n        return this._generateKey(parentMaps, args.slice(index));\n    }\n\n    getUsedCount(...args: any[]): number {\n        const { map } = this._resolveMap(...args);\n\n        return map ? map.usedCount : 0;\n    }\n\n    private _resolveMap(...args: any[]): ResolveResult {\n        let index = 0;\n        let parentMaps = this._maps;\n\n        while (parentMaps.length) {\n            let isMatched = false;\n\n            for (const map of parentMaps) {\n                if (!isEqual(map.value, args[index])) {\n                    continue;\n                }\n\n                if ((args.length === 0 || index === args.length - 1) && map.cacheKey) {\n                    return { index, map, parentMaps };\n                }\n\n                isMatched = true;\n                parentMaps = map.maps;\n                index++;\n\n                break;\n            }\n\n            if (!isMatched) {\n                break;\n            }\n        }\n\n        return { index, parentMaps };\n    }\n\n    private _generateKey(maps: CacheKeyMap[], args: any[]): string {\n        let index = 0;\n        let parentMaps = maps;\n        let map!: CacheKeyMap;\n\n        do {\n            map = {\n                usedCount: 1,\n                value: args[index],\n                maps: [],\n            };\n\n            parentMaps.push(map);\n\n            parentMaps = map.maps;\n            index++;\n        } while (index < args.length);\n\n        map.cacheKey = `${++this._lastId}`;\n\n        return map.cacheKey;\n    }\n}\n\ninterface CacheKeyMap {\n    maps: CacheKeyMap[];\n    value: any;\n    usedCount: number;\n    cacheKey?: string;\n}\n\ninterface ResolveResult {\n    index: number;\n    parentMaps: CacheKeyMap[];\n    map?: CacheKeyMap;\n}\n","/**\n * Decorates a class or a method by binding all its prototype methods or itself\n * to the calling instance respectively.\n */\nexport default function bindDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T>;\nexport default function bindDecorator<T extends Constructor<object>>(target: T): T;\nexport default function bindDecorator(target: any, key?: any, descriptor?: any): any {\n    if (!key || !descriptor) {\n        return bindClassDecorator(target);\n    }\n\n    return bindMethodDecorator(target, key, descriptor);\n}\n\n/**\n * Decorates a class by binding all its prototype methods to the calling\n * instance.\n */\nexport function bindClassDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                bindMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\n/**\n * Decorates a method by binding it to the calling instance.\n */\nexport function bindMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let method: T = descriptor.value;\n\n    return {\n        get() {\n            const boundMethod = method.bind(this);\n\n            Object.defineProperty(this, key, {\n                ...descriptor,\n                value: boundMethod,\n            });\n\n            return boundMethod;\n        },\n        set(value) {\n            method = value;\n        },\n    };\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\nexport type Method = (...args: any[]) => any;\n","import { parseUrl } from '../common/url';\n\nexport default class IframeEventPoster<TEvent> {\n    private _targetOrigin: string;\n\n    constructor(\n        targetOrigin: string,\n        private _targetWindow?: Window\n    ) {\n        this._targetOrigin = targetOrigin === '*' ? '*' : parseUrl(targetOrigin).origin;\n    }\n\n    post(event: TEvent): void {\n        if (window === this._targetWindow) {\n            return;\n        }\n\n        if (!this._targetWindow) {\n            throw new Error('Unable to post message becauset target window is not set.');\n        }\n\n        this._targetWindow.postMessage(event, this._targetOrigin);\n    }\n\n    setTarget(window: Window) {\n        this._targetWindow = window;\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\nimport { from, Observable, Subscribable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { RequestErrorFactory } from '../common/error';\n\nexport default function createActionTransformer(\n    requestErrorFactory: RequestErrorFactory\n): (action: Subscribable<Action>) => Observable<Action> {\n    return action$ => from(action$).pipe(catchError<Action, never>(action => {\n        if (action instanceof Error || action.payload instanceof Error) {\n            throw action;\n        }\n\n        if (isResponse(action.payload)) {\n            const message = action.payload.body && action.payload.body.detail;\n\n            throw { ...action, payload: requestErrorFactory.createError(action.payload, message) };\n        }\n\n        throw action;\n    }));\n}\n\nfunction isResponse(object: any) {\n    if (!object || typeof object !== 'object') {\n        return false;\n    }\n\n    return ['body', 'headers', 'status', 'statusText'].every(key =>\n        object.hasOwnProperty(key)\n    );\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector } from '../customer';\nimport { ConsignmentSelector } from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutState from './checkout-state';\n\n@selector\nexport default class CheckoutSelector {\n    constructor(\n        private _checkout: CheckoutState,\n        private _billingAddress: BillingAddressSelector,\n        private _cart: CartSelector,\n        private _consignments: ConsignmentSelector,\n        private _coupons: CouponSelector,\n        private _customer: CustomerSelector,\n        private _giftCertificates: GiftCertificateSelector\n    ) {}\n\n    getCheckout(): Checkout | undefined {\n        const { data } = this._checkout;\n        const billingAddress = this._billingAddress.getBillingAddress();\n        const cart = this._cart.getCart();\n        const customer = this._customer.getCustomer();\n        const consignments = this._consignments.getConsignments() || [];\n        const coupons = this._coupons.getCoupons() || [];\n        const giftCertificates = this._giftCertificates.getGiftCertificates() || [];\n\n        if (!data || !cart || !customer) {\n            return;\n        }\n\n        return {\n            ...data,\n            billingAddress,\n            cart,\n            customer,\n            consignments,\n            coupons,\n            giftCertificates,\n        };\n    }\n\n    getGrandTotal(useStoreCredit?: boolean): number | undefined {\n        const checkout = this.getCheckout();\n\n        if (!checkout) {\n            return;\n        }\n\n        const grandTotal = checkout.grandTotal || 0;\n        const storeCredit = checkout.customer.storeCredit || 0;\n\n        return useStoreCredit ? Math.max(grandTotal - storeCredit, 0) : grandTotal;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._checkout.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return this._checkout.statuses.isLoading === true;\n    }\n\n    getUpdateError(): Error | undefined {\n        return this._checkout.errors.updateError;\n    }\n\n    isUpdating(): boolean {\n        return this._checkout.statuses.isUpdating === true;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport { clearErrorReducer } from '../common/error';\nimport { CouponAction, CouponActionType, GiftCertificateAction, GiftCertificateActionType } from '../coupon';\nimport { OrderAction, OrderActionType } from '../order';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport { CheckoutAction, CheckoutActionType } from './checkout-actions';\nimport CheckoutState, { CheckoutDataState, CheckoutErrorsState, CheckoutStatusesState } from './checkout-state';\n\nconst DEFAULT_STATE: CheckoutState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function checkoutReducer(\n    state: CheckoutState = DEFAULT_STATE,\n    action: Action\n): CheckoutState {\n    const reducer = combineReducers<CheckoutState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutDataState | undefined,\n    action: CheckoutAction | BillingAddressAction | ConsignmentAction | CouponAction | GiftCertificateAction | OrderAction\n): CheckoutDataState | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload\n            ? omit({ ...data, ...action.payload }, ['billingAddress', 'cart', 'consignments', 'customer', 'coupons', 'giftCertifcates'])\n            : data;\n\n    case OrderActionType.SubmitOrderSucceeded:\n        return action.payload && data\n            ? { ...data, orderId: action.payload.order.orderId }\n            : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CheckoutErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | OrderAction\n): CheckoutErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return {\n            ...errors,\n            loadError: undefined,\n        };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return {\n            ...errors,\n            loadError: action.payload,\n        };\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return {\n            ...errors,\n            updateError: undefined,\n        };\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n        return {\n            ...errors,\n            updateError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | OrderAction\n): CheckoutStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return {\n            ...statuses,\n            isLoading: true,\n        };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return {\n            ...statuses,\n            isLoading: false,\n        };\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n        return {\n            ...statuses,\n            isUpdating: true,\n        };\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return {\n            ...statuses,\n            isUpdating: false,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import InternalLineItem from './internal-line-item';\nimport { GiftCertificateItem } from './line-item';\n\nimport { AmountTransformer } from '.';\n\nexport default function mapGiftCertificateToInternalLineItem(\n    item: GiftCertificateItem,\n    decimalPlaces: number\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: item.id,\n        imageUrl: '',\n        name: item.name,\n        amount: item.amount,\n        amountAfterDiscount: item.amount,\n        discount: 0,\n        integerAmount: amountTransformer.toInteger(item.amount),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.amount),\n        integerDiscount: 0,\n        quantity: 1,\n        sender: item.sender,\n        recipient: item.recipient,\n        type: 'ItemGiftCertificateEntity',\n        attributes: [],\n        variantId: null,\n    };\n}\n","import AmountTransformer from './amount-transformer';\nimport InternalLineItem from './internal-line-item';\nimport { DigitalItem, LineItem } from './line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItem(\n    item: LineItem,\n    type: string,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: (item[idKey] as string | number),\n        imageUrl: item.imageUrl,\n        amount: item.extendedListPrice,\n        amountAfterDiscount: item.extendedSalePrice,\n        discount: item.discountAmount,\n        integerAmount: amountTransformer.toInteger(item.extendedListPrice),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.extendedSalePrice),\n        integerDiscount: amountTransformer.toInteger(item.discountAmount),\n        downloadsPageUrl: (item as DigitalItem).downloadPageUrl,\n        name: item.name,\n        quantity: item.quantity,\n        brand: item.brand,\n        categoryNames: item.categoryNames,\n        variantId: item.variantId,\n        productId: item.productId,\n        attributes: (item.options || []).map(option => ({\n            name: option.name,\n            value: option.value,\n        })),\n        addedByPromotion: item.addedByPromotion,\n        type,\n    };\n}\n","import { selector } from '../common/selector';\n\nimport BillingAddress from './billing-address';\nimport BillingAddressState from './billing-address-state';\n\n@selector\nexport default class BillingAddressSelector {\n    constructor(\n        private _billingAddress: BillingAddressState\n    ) {}\n\n    getBillingAddress(): BillingAddress | undefined {\n        return this._billingAddress.data;\n    }\n\n    getUpdateError(): Error | undefined {\n        return this._billingAddress.errors.updateError;\n    }\n\n    getContinueAsGuestError(): Error | undefined {\n        return this._billingAddress.errors.continueAsGuestError;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._billingAddress.errors.loadError;\n    }\n\n    isUpdating(): boolean {\n        return !!this._billingAddress.statuses.isUpdating;\n    }\n\n    isContinuingAsGuest(): boolean {\n        return !!this._billingAddress.statuses.isContinuingAsGuest;\n    }\n\n    isLoading(): boolean {\n        return !!this._billingAddress.statuses.isLoading;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Config, { ContextConfig, StoreConfig } from './config';\nimport ConfigState from './config-state';\n\n@selector\nexport default class ConfigSelector {\n    constructor(\n        private _config: ConfigState\n    ) {}\n\n    getConfig(): Config | undefined {\n        return this._config.data;\n    }\n\n    getStoreConfig(): StoreConfig | undefined {\n        return this._config.data && this._config.data.storeConfig;\n    }\n\n    getContextConfig(): ContextConfig | undefined {\n        return this._config.data && this._config.data.context;\n    }\n\n    getExternalSource(): string | undefined {\n        return this._config.meta && this._config.meta.externalSource;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._config.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._config.statuses.isLoading;\n    }\n}\n","import { find } from 'lodash';\n\nimport { selector } from '../common/selector';\nimport { ConfigState } from '../config';\nimport { Country } from '../geography';\n\nimport FormField from './form-field';\n\n@selector\nexport default class FormSelector {\n    constructor(\n        private _config: ConfigState\n    ) {}\n\n    getShippingAddressFields(countries: Country[] = [], countryCode: string): FormField[] {\n        const selectedCountry = find(countries, { code: countryCode });\n        const fields = this._config.data ? this._config.data.storeConfig.formFields.shippingAddressFields : [];\n\n        return fields.map((field: any) => this._processField(field, countries, selectedCountry));\n    }\n\n    getBillingAddressFields(countries: Country[] = [], countryCode: string): FormField[] {\n        const selectedCountry = find(countries, { code: countryCode });\n        const fields = this._config.data ? this._config.data.storeConfig.formFields.billingAddressFields : [];\n\n        return fields.map((field: any) => this._processField(field, countries, selectedCountry));\n    }\n\n    private _processField(field: FormField, countries: Country[], selectedCountry?: Country): FormField {\n        if (field.name === 'countryCode') {\n            return this._processCountry(field, countries, selectedCountry);\n        }\n\n        if (field.name === 'stateOrProvince') {\n            return this._processProvince(field, selectedCountry);\n        }\n\n        if (field.name === 'postalCode') {\n            return this._processsPostCode(field, selectedCountry);\n        }\n\n        return field;\n    }\n\n    private _processCountry(field: FormField, countries: Country[] = [], country?: Country): FormField {\n        if (!countries.length) {\n            return field;\n        }\n\n        const { code = '' } = country || {};\n        const items = countries.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            options: { items },\n            default: code,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    private _processProvince(field: FormField, country?: Country): FormField {\n        const { subdivisions = [] } = country || {};\n\n        if (!subdivisions.length) {\n            return {\n                ...field,\n                required: false,\n            };\n        }\n\n        const items = subdivisions.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            name: 'stateOrProvinceCode',\n            options: { items },\n            required: true,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    private _processsPostCode(field: FormField, country?: Country): FormField {\n        const { hasPostalCodes = [] } = country || {};\n\n        if (hasPostalCodes === undefined) {\n            return field;\n        }\n\n        return { ...field, required: Boolean(hasPostalCodes) };\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Country from './country';\nimport CountryState from './country-state';\n\n@selector\nexport default class CountrySelector {\n    constructor(\n        private _countries: CountryState\n    ) {}\n\n    getCountries(): Country[] | undefined {\n        return this._countries.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._countries.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._countries.statuses.isLoading;\n    }\n}\n","import { find } from 'lodash';\n\nimport { CheckoutPayment, CheckoutSelector } from '../checkout';\nimport { selector } from '../common/selector';\nimport { GatewayOrderPayment, InternalOrderPayment, OrderSelector } from '../order';\n\nimport PaymentMethod from './payment-method';\nimport { HOSTED } from './payment-method-types';\nimport { ACKNOWLEDGE, FINALIZE } from './payment-status-types';\n\n@selector\nexport default class PaymentSelector {\n    constructor(\n        private _checkout: CheckoutSelector,\n        private _order: OrderSelector\n    ) {}\n\n    getPaymentId(): { providerId: string, gatewayId?: string } | undefined {\n        const internalPayment = this._getInternalPayment();\n\n        if (internalPayment && internalPayment.id) {\n            return {\n                providerId: internalPayment.id,\n                gatewayId: internalPayment.gateway,\n            };\n        }\n\n        const payment = this._getHostedPayment() || this._getGatewayPayment();\n\n        if (payment && payment.providerId) {\n            return {\n                providerId: payment.providerId,\n                gatewayId: payment.gatewayId,\n            };\n        }\n    }\n\n    getPaymentStatus(): string | undefined {\n        const internalPayment = this._getInternalPayment();\n\n        if (internalPayment && internalPayment.status) {\n            return internalPayment.status.replace('PAYMENT_STATUS_', '');\n        }\n\n        const payment = this._getHostedPayment() || this._getGatewayPayment();\n\n        if (payment) {\n            return payment.detail.step;\n        }\n    }\n\n    getPaymentToken(): string | undefined {\n        const meta = this._order.getOrderMeta();\n\n        return meta && meta.token;\n    }\n\n    getPaymentRedirectUrl(): string | undefined {\n        const payment = this._getInternalPayment();\n\n        return payment && payment.redirectUrl;\n    }\n\n    isPaymentDataRequired(useStoreCredit: boolean = false): boolean {\n        const grandTotal = this._checkout.getGrandTotal(useStoreCredit);\n\n        return grandTotal ? grandTotal > 0 : false;\n    }\n\n    isPaymentDataSubmitted(paymentMethod?: PaymentMethod): boolean {\n        if (paymentMethod && paymentMethod.nonce) {\n            return true;\n        }\n\n        return this.getPaymentStatus() === ACKNOWLEDGE || this.getPaymentStatus() === FINALIZE;\n    }\n\n    private _getInternalPayment(): InternalOrderPayment | undefined {\n        const meta = this._order.getOrderMeta();\n\n        return meta && meta.payment;\n    }\n\n    private _getGatewayPayment(): GatewayOrderPayment | undefined {\n        const order = this._order.getOrder();\n\n        return find(order && order.payments, ({ providerId }) =>\n            providerId !== 'giftcertificate' && providerId !== 'storecredit'\n        ) as GatewayOrderPayment;\n    }\n\n    private _getHostedPayment(): CheckoutPayment | undefined {\n        const checkout = this._checkout.getCheckout();\n\n        return find(checkout && checkout.payments, ({ providerType }) =>\n            providerType === HOSTED\n        );\n    }\n}\n","import { find } from 'lodash';\n\nimport { selector } from '../common/selector';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState from './payment-method-state';\n\n@selector\nexport default class PaymentMethodSelector {\n    constructor(\n        private _paymentMethods: PaymentMethodState\n    ) {}\n\n    getPaymentMethods(): PaymentMethod[] | undefined {\n        return this._paymentMethods.data;\n    }\n\n    getPaymentMethodsMeta(): PaymentMethodMeta | undefined {\n        return this._paymentMethods.meta;\n    }\n\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined {\n        return gatewayId ?\n            find(this._paymentMethods.data, { id: methodId, gateway: gatewayId }) :\n            find(this._paymentMethods.data, { id: methodId });\n    }\n\n    getLoadError(): Error | undefined {\n        return this._paymentMethods.errors && this._paymentMethods.errors.loadError;\n    }\n\n    getLoadMethodError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentMethods.errors.loadMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentMethods.errors.loadMethodError;\n    }\n\n    isLoading(): boolean {\n        return !!this._paymentMethods.statuses.isLoading;\n    }\n\n    isLoadingMethod(methodId?: string): boolean {\n        if (methodId && this._paymentMethods.statuses.loadMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentMethods.statuses.isLoadingMethod;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport PaymentStrategyState, { DEFAULT_STATE } from './payment-strategy-state';\n\n@selector\nexport default class PaymentStrategySelector {\n    constructor(\n        private _paymentStrategies: PaymentStrategyState = DEFAULT_STATE\n    ) {}\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.initializeError;\n    }\n\n    getExecuteError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.executeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.executeError;\n    }\n\n    getFinalizeError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.finalizeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.finalizeError;\n    }\n\n    getWidgetInteractingError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.widgetInteractionMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.widgetInteractionError;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isInitializing;\n    }\n\n    isInitialized(methodId: string): boolean {\n        return !!(\n            this._paymentStrategies.data[methodId] &&\n            this._paymentStrategies.data[methodId].isInitialized\n        );\n    }\n\n    isExecuting(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.executeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isExecuting;\n    }\n\n    isFinalizing(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.finalizeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isFinalizing;\n    }\n\n    isWidgetInteracting(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.widgetInteractionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isWidgetInteracting;\n    }\n}\n","import Instrument from './instrument';\nimport InstrumentState, { InstrumentMeta } from './instrument-state';\n\nexport default class InstrumentSelector {\n    constructor(\n        private _instruments: InstrumentState\n    ) {}\n\n    getInstruments(): Instrument[] | undefined {\n        return this._instruments.data;\n    }\n\n    getInstrumentsMeta(): InstrumentMeta | undefined {\n        return this._instruments.meta;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._instruments.errors && this._instruments.errors.loadError;\n    }\n\n    getDeleteError(instrumentId?: string): Error | undefined {\n        if (!this._instruments.errors || (instrumentId && this._instruments.errors.failedInstrument !== instrumentId)) {\n            return;\n        }\n\n        return this._instruments.errors.deleteError;\n    }\n\n    isLoading(): boolean {\n        return !!(this._instruments.statuses && this._instruments.statuses.isLoading);\n    }\n\n    isDeleting(instrumentId?: string): boolean {\n        if (!this._instruments.statuses || (instrumentId && this._instruments.statuses.deletingInstrument !== instrumentId)) {\n            return false;\n        }\n\n        return !!this._instruments.statuses.isDeleting;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport RemoteCheckoutState, { RemoteCheckoutStateData } from './remote-checkout-state';\n\n@selector\nexport default class RemoteCheckoutSelector {\n    constructor(\n        private _remoteCheckout: RemoteCheckoutState\n    ) {}\n\n    getCheckout<TMethodId extends keyof RemoteCheckoutStateData>(\n        methodId: TMethodId\n    ): RemoteCheckoutStateData[TMethodId] | undefined {\n        return this._remoteCheckout.data[methodId];\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { CheckoutButtonSelector } from '../checkout-buttons';\nimport { createFreezeProxies } from '../common/utility';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector, CustomerStrategySelector } from '../customer';\nimport { FormSelector } from '../form';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentSelector } from '../payment';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { RemoteCheckoutSelector } from '../remote-checkout';\nimport { ConsignmentSelector, ShippingAddressSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default function createInternalCheckoutSelectors(state: CheckoutStoreState, options: CheckoutStoreOptions = {}): InternalCheckoutSelectors {\n    const billingAddress = new BillingAddressSelector(state.billingAddress);\n    const cart = new CartSelector(state.cart);\n    const checkoutButton = new CheckoutButtonSelector(state.checkoutButton);\n    const config = new ConfigSelector(state.config);\n    const countries = new CountrySelector(state.countries);\n    const coupons = new CouponSelector(state.coupons);\n    const customer = new CustomerSelector(state.customer);\n    const customerStrategies = new CustomerStrategySelector(state.customerStrategies);\n    const form = new FormSelector(state.config);\n    const giftCertificates = new GiftCertificateSelector(state.giftCertificates);\n    const instruments = new InstrumentSelector(state.instruments);\n    const paymentMethods = new PaymentMethodSelector(state.paymentMethods);\n    const paymentStrategies = new PaymentStrategySelector(state.paymentStrategies);\n    const shippingAddress = new ShippingAddressSelector(state.consignments);\n    const remoteCheckout = new RemoteCheckoutSelector(state.remoteCheckout);\n    const shippingCountries = new ShippingCountrySelector(state.shippingCountries);\n    const shippingStrategies = new ShippingStrategySelector(state.shippingStrategies);\n\n    // Compose selectors\n    const consignments = new ConsignmentSelector(state.consignments, cart);\n    const checkout = new CheckoutSelector(state.checkout, billingAddress, cart, consignments, coupons, customer, giftCertificates);\n    const order = new OrderSelector(state.order, billingAddress, coupons);\n    const payment = new PaymentSelector(checkout, order);\n\n    const selectors = {\n        billingAddress,\n        cart,\n        checkout,\n        checkoutButton,\n        config,\n        consignments,\n        countries,\n        coupons,\n        customer,\n        customerStrategies,\n        form,\n        giftCertificates,\n        instruments,\n        order,\n        payment,\n        paymentMethods,\n        paymentStrategies,\n        remoteCheckout,\n        shippingAddress,\n        shippingCountries,\n        shippingStrategies,\n    };\n\n    return options.shouldWarnMutation ? createFreezeProxies(selectors) : selectors;\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","export default function isPrivate(key: string): boolean {\n    return `${key}`.indexOf('$$') === 0 || `${key}`.indexOf('_') === 0;\n}\n","import { isPlainObject, omitBy, transform } from 'lodash';\n\nexport default function omitDeep(object: any, predicate: (value: any, key: string) => boolean): any {\n    if (Array.isArray(object)) {\n        return object.map(value => omitDeep(value, predicate));\n    }\n\n    if (isPlainObject(object)) {\n        return transform(omitBy(object, predicate), (result, value, key) => {\n            result[key] = omitDeep(value, predicate);\n        }, {});\n    }\n\n    return object;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ErrorActionType {\n    ClearError = 'CLEAR_ERROR',\n}\n\nexport type ErrorAction = ClearErrorAction;\n\nexport interface ClearErrorAction extends Action {\n    type: ErrorActionType.ClearError;\n    payload: Error;\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { cachableAction, ActionOptions } from '../common/action';\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadPaymentMethodsAction, LoadPaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\n\nexport default class PaymentMethodActionCreator {\n    constructor(\n        private _requestSender: PaymentMethodRequestSender\n    ) {}\n\n    loadPaymentMethods(options?: RequestOptions): Observable<LoadPaymentMethodsAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodsAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsRequested));\n\n            this._requestSender.loadPaymentMethods(options)\n                .then(response => {\n                    const meta = {\n                        deviceSessionId: response.headers['x-device-session-id'],\n                        sessionHash: response.headers['x-session-hash'],\n                    };\n\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsSucceeded, response.body, meta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodsFailed, response));\n                });\n        });\n    }\n\n    @cachableAction\n    loadPaymentMethod(methodId: string, options?: RequestOptions & ActionOptions): Observable<LoadPaymentMethodAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodRequested, undefined, { methodId }));\n\n            this._requestSender.loadPaymentMethod(methodId, options)\n                .then(response => {\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodSucceeded, response.body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodFailed, response, { methodId }));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport PaymentMethod from './payment-method';\n\nexport default class PaymentMethodRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadPaymentMethods({ timeout }: RequestOptions = {}): Promise<Response<PaymentMethod[]>> {\n        const url = '/api/storefront/payments';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n\n    loadPaymentMethod(methodId: string, { timeout }: RequestOptions = {}): Promise<Response<PaymentMethod>> {\n        const url = `/api/storefront/payments/${methodId}`;\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import EmbeddedCheckoutStyles from '../embedded-checkout-styles';\n\nexport enum EmbeddedContentEventType {\n    StyleConfigured = 'STYLE_CONFIGURED',\n}\n\nexport interface EmbeddedContentEventMap {\n    [EmbeddedContentEventType.StyleConfigured]: EmbeddedContentStyleConfiguredEvent;\n}\n\nexport type EmbeddedContentEvent = (\n    EmbeddedContentStyleConfiguredEvent\n);\n\nexport interface EmbeddedContentStyleConfiguredEvent {\n    type: EmbeddedContentEventType.StyleConfigured;\n    payload: EmbeddedCheckoutStyles;\n}\n","import { parseUrl } from '../common/url';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport { IframeEventMap } from './iframe-event';\nimport isIframeEvent from './is-iframe-event';\n\nexport default class IframeEventListener<TEventMap extends IframeEventMap<keyof TEventMap>> {\n    private _isListening: boolean;\n    private _listeners: EventListeners<TEventMap>;\n    private _sourceOrigin: string;\n\n    constructor(\n        sourceOrigin: string\n    ) {\n        this._sourceOrigin = parseUrl(sourceOrigin).origin;\n        this._isListening = false;\n        this._listeners = {};\n    }\n\n    listen(): void {\n        if (this._isListening) {\n            return;\n        }\n\n        this._isListening = true;\n\n        window.addEventListener('message', this._handleMessage);\n    }\n\n    stopListen(): void {\n        if (!this._isListening) {\n            return;\n        }\n\n        this._isListening = false;\n\n        window.removeEventListener('message', this._handleMessage);\n    }\n\n    addListener<TType extends keyof TEventMap>(type: TType, listener: (event: TEventMap[TType]) => void): void {\n        let listeners = this._listeners[type];\n\n        if (!listeners) {\n            this._listeners[type] = listeners = [];\n        }\n\n        listeners.push(listener);\n    }\n\n    removeListener<TType extends keyof TEventMap>(type: TType, listener: (event: TEventMap[TType]) => void): void {\n        const listeners = this._listeners[type];\n\n        if (!listeners) {\n            return;\n        }\n\n        const index = listeners.indexOf(listener);\n\n        if (index >= 0) {\n            listeners.splice(index, 1);\n        }\n    }\n\n    trigger<TType extends keyof TEventMap>(event: TEventMap[TType]): void {\n        const listeners = this._listeners[event.type];\n\n        if (!listeners) {\n            return;\n        }\n\n        listeners.forEach(listener => listener(event));\n    }\n\n    @bind\n    private _handleMessage(event: MessageEvent): void {\n        if ((event.origin !== this._sourceOrigin) || !isIframeEvent(event.data, event.data.type)) {\n            return;\n        }\n\n        this.trigger(event.data);\n    }\n}\n\ntype EventListeners<TEventMap> = {\n    [key in keyof TEventMap]?: Array<(event: TEventMap[keyof TEventMap]) => void>;\n};\n","export const INTERNAL_USE_ONLY = 'This API endpoint is for internal use only and may change in the future';\n","import { find, some, values } from 'lodash';\n\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonState from './checkout-button-state';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonSelector {\n    constructor(\n        private _checkoutButton: CheckoutButtonState\n    ) {}\n\n    getState(): CheckoutButtonState {\n        return this._checkoutButton;\n    }\n\n    isInitializing(methodId?: CheckoutButtonMethodType): boolean {\n        if (methodId) {\n            const method = this._checkoutButton.statuses[methodId];\n\n            return (method && method.isInitializing) === true;\n        }\n\n        return some(this._checkoutButton.statuses, { isInitializing: true });\n    }\n\n    isInitialized(methodId: CheckoutButtonMethodType, containerId?: string): boolean {\n        const method = this._checkoutButton.data[methodId];\n\n        if (!method) {\n            return false;\n        }\n\n        if (!containerId) {\n            return some(method.initializedContainers, isInitialized => isInitialized === true);\n        }\n\n        return method.initializedContainers[containerId] === true;\n    }\n\n    isDeinitializing(methodId?: CheckoutButtonMethodType): boolean {\n        if (methodId) {\n            const method = this._checkoutButton.statuses[methodId];\n\n            return (method && method.isDeinitializing) === true;\n        }\n\n        return some(this._checkoutButton.statuses, { isDeinitializing: true });\n    }\n\n    getInitializeError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        const method = methodId ?\n            this._checkoutButton.errors[methodId] :\n            find(values(this._checkoutButton.errors), method => !!(method && method.initializeError));\n\n        return method && method.initializeError;\n    }\n\n    getDeinitializeError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        const method = methodId ?\n            this._checkoutButton.errors[methodId] :\n            find(values(this._checkoutButton.errors), method => !!(method && method.deinitializeError));\n\n        return method && method.deinitializeError;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutButtonAction, CheckoutButtonActionType } from './checkout-button-actions';\nimport CheckoutButtonState, { CheckoutButtonDataState, CheckoutButtonErrorsState, CheckoutButtonStatusesState } from './checkout-button-state';\n\nconst DEFAULT_STATE: CheckoutButtonState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n\nconst DEFAULT_DATA_STATE: CheckoutButtonDataState = { initializedContainers: {} };\nconst DEFAULT_ERROR_STATE: CheckoutButtonErrorsState = {};\nconst DEFAULT_STATUS_STATE: CheckoutButtonStatusesState = {};\n\nexport default function checkoutButtonReducer(\n    state: CheckoutButtonState = DEFAULT_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<CheckoutButtonState>({\n        data: combineReducers({\n            [action.meta.methodId]: dataReducer,\n        }),\n        errors: combineReducers({\n            [action.meta.methodId]: errorsReducer,\n        }),\n        statuses: combineReducers({\n            [action.meta.methodId]: statusesReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutButtonDataState = DEFAULT_DATA_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonDataState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        if (!action.meta || !action.meta.containerId) {\n            return data;\n        }\n\n        return {\n            ...data,\n            initializedContainers: {\n                ...data.initializedContainers,\n                [action.meta.containerId]: true,\n            },\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return {\n            ...data,\n            initializedContainers: {},\n        };\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CheckoutButtonErrorsState = DEFAULT_ERROR_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonErrorsState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n        };\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutButtonStatusesState = DEFAULT_STATUS_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonStatusesState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n        };\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport enum NotEmbeddableErrorType {\n    MissingContainer = 'missing_container',\n    MissingContent = 'missing_content',\n    UnknownError = 'unknown_error',\n}\n\nexport default class NotEmbeddableError extends StandardError {\n    constructor(\n        message?: string,\n        public subtype: NotEmbeddableErrorType = NotEmbeddableErrorType.UnknownError\n    ) {\n        super(message || 'Unable to embed the checkout form.');\n\n        this.type = 'not_embeddable';\n    }\n}\n","import { default as storage } from 'local-storage-fallback';\n\nexport default class BrowserStorage {\n    constructor(\n        private _namespace: string\n    ) {}\n\n    getItem<TValue = any>(key: string): TValue | null {\n        const rawValue = storage.getItem(this.withNamespace(key));\n\n        if (rawValue === null) {\n            return null;\n        }\n\n        try {\n            return JSON.parse(rawValue);\n        } catch (error) {\n            // Clean up invalid values\n            this.removeItem(this.withNamespace(key));\n\n            return null;\n        }\n    }\n\n    getItemOnce<TValue = any>(key: string): TValue | null {\n        const value = this.getItem(key);\n\n        this.removeItem(key);\n\n        return value;\n    }\n\n    setItem<TValue = any>(key: string, value: TValue): void {\n        return storage.setItem(this.withNamespace(key), JSON.stringify(value));\n    }\n\n    removeItem(key: string): void {\n        return storage.removeItem(this.withNamespace(key));\n    }\n\n    private withNamespace(key: string): string {\n        return `${this._namespace}.${key}`;\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../../common/error';\nimport { RequestError } from '../../common/error/errors';\n\nexport default class InvalidLoginTokenError extends RequestError {\n    constructor(response: Response<InternalErrorResponseBody>) {\n        super(response, { message: response.body.title });\n\n        this.type = 'invalid_login_token';\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { IFrameComponent } from 'iframe-resizer';\n\nimport { BrowserStorage } from '../common/storage';\nimport { parseUrl } from '../common/url';\n\nimport EmbeddedCheckoutError from './embedded-checkout-error';\nimport { EmbeddedCheckoutEventMap, EmbeddedCheckoutEventType } from './embedded-checkout-events';\nimport EmbeddedCheckoutOptions from './embedded-checkout-options';\nimport { InvalidLoginTokenError, NotEmbeddableError, NotEmbeddableErrorType } from './errors';\nimport { EmbeddedContentEvent, EmbeddedContentEventType } from './iframe-content/embedded-content-events';\nimport IframeEventListener from './iframe-event-listener';\nimport IframeEventPoster from './iframe-event-poster';\nimport LoadingIndicator from './loading-indicator';\nimport ResizableIframeCreator from './resizable-iframe-creator';\n\nconst CAN_RETRY_ALLOW_COOKIE = 'canRetryAllowCookie';\nconst IS_COOKIE_ALLOWED_KEY = 'isCookieAllowed';\n\nexport default class EmbeddedCheckout {\n    private _iframe?: IFrameComponent;\n    private _isAttached: boolean;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _iframeCreator: ResizableIframeCreator,\n        private _messageListener: IframeEventListener<EmbeddedCheckoutEventMap>,\n        private _messagePoster: IframeEventPoster<EmbeddedContentEvent>,\n        private _loadingIndicator: LoadingIndicator,\n        private _requestSender: RequestSender,\n        private _storage: BrowserStorage,\n        private _location: Location,\n        private _options: EmbeddedCheckoutOptions\n    ) {\n        this._isAttached = false;\n\n        if (this._options.onComplete) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutComplete, this._options.onComplete);\n        }\n\n        if (this._options.onError) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutError, this._options.onError);\n        }\n\n        if (this._options.onLoad) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutLoaded, this._options.onLoad);\n        }\n\n        if (this._options.onFrameLoad) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.FrameLoaded, this._options.onFrameLoad);\n        }\n\n        if (this._options.onSignOut) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.SignedOut, this._options.onSignOut);\n        }\n\n        this._messageListener.addListener(EmbeddedCheckoutEventType.FrameLoaded, () => this._configureStyles());\n    }\n\n    attach(): Promise<this> {\n        if (this._isAttached) {\n            return Promise.resolve(this);\n        }\n\n        this._isAttached = true;\n        this._messageListener.listen();\n        this._loadingIndicator.show(this._options.containerId);\n\n        return this._allowCookie()\n            .then(() => this._attemptLogin())\n            .then(url => this._iframeCreator.createFrame(url, this._options.containerId))\n            .then(iframe => {\n                this._iframe = iframe;\n\n                this._configureStyles();\n                this._loadingIndicator.hide();\n            })\n            .catch(error => {\n                this._isAttached = false;\n\n                return this._retryAllowCookie(error)\n                    .catch(() => {\n                        this._messageListener.trigger({\n                            type: EmbeddedCheckoutEventType.FrameError,\n                            payload: error,\n                        });\n\n                        this._loadingIndicator.hide();\n\n                        throw error;\n                    });\n            })\n            .then(() => this);\n    }\n\n    detach(): void {\n        if (!this._isAttached) {\n            return;\n        }\n\n        this._isAttached = false;\n        this._messageListener.stopListen();\n\n        if (this._iframe && this._iframe.parentNode) {\n            this._iframe.parentNode.removeChild(this._iframe);\n            this._iframe.iFrameResizer.close();\n        }\n    }\n\n    private _configureStyles(): void {\n        if (!this._iframe || !this._iframe.contentWindow || !this._options.styles) {\n            return;\n        }\n\n        this._messagePoster.setTarget(this._iframe.contentWindow);\n\n        this._messagePoster.post({\n            type: EmbeddedContentEventType.StyleConfigured,\n            payload: this._options.styles,\n        });\n    }\n\n    private _attemptLogin(): Promise<string> {\n        if (!/^\\/login\\/token/.test(parseUrl(this._options.url).pathname)) {\n            return Promise.resolve(this._options.url);\n        }\n\n        return this._requestSender.post(this._options.url)\n            .then(({ body: { redirectUrl } }) => redirectUrl)\n            .catch(response => Promise.reject(new InvalidLoginTokenError(response)));\n    }\n\n    /**\n     * This workaround is required for certain browsers (namely Safari) that\n     * prevent session cookies to be set for a third party website unless the\n     * user has recently visited such website. Therefore, before we attempt to\n     * login or set an active cart in the session, we need to first redirect the\n     * user to the domain of Embedded Checkout.\n     */\n    private _allowCookie(): Promise<void> {\n        if (this._storage.getItem(IS_COOKIE_ALLOWED_KEY)) {\n            // It could be possible that the flag is set to true but the browser\n            // has already removed the permission to store cookie. In that case,\n            // we should try to redirect the user again.\n            this._storage.setItem(CAN_RETRY_ALLOW_COOKIE, true);\n\n            return Promise.resolve();\n        }\n\n        this._storage.removeItem(CAN_RETRY_ALLOW_COOKIE);\n        this._storage.setItem(IS_COOKIE_ALLOWED_KEY, true);\n\n        const { origin } = parseUrl(this._options.url);\n        const redirectUrl = `${origin}/embedded-checkout/allow-cookie?returnUrl=${encodeURIComponent(this._location.href)}`;\n\n        document.body.style.visibility = 'hidden';\n        this._location.replace(redirectUrl);\n\n        return new Promise<never>(() => {});\n    }\n\n    private _retryAllowCookie(error: EmbeddedCheckoutError): Promise<void> {\n        const canRetry = (\n            this._storage.getItem(CAN_RETRY_ALLOW_COOKIE) &&\n            error instanceof NotEmbeddableError &&\n            error.subtype === NotEmbeddableErrorType.MissingContent\n        );\n\n        if (!canRetry) {\n            return Promise.reject();\n        }\n\n        this._storage.removeItem(CAN_RETRY_ALLOW_COOKIE);\n        this._storage.removeItem(IS_COOKIE_ALLOWED_KEY);\n\n        return this._allowCookie();\n    }\n}\n","import { LoadingIndicatorStyles } from './embedded-checkout-styles';\n\nconst DEFAULT_STYLES: LoadingIndicatorStyles = {\n    size: 70,\n    color: '#d9d9d9',\n    backgroundColor: '#ffffff',\n};\n\nconst ROTATION_ANIMATION = 'embedded-checkout-loading-indicator-rotation';\n\nexport default class LoadingIndicator {\n    private _container: HTMLElement;\n    private _indicator: HTMLElement;\n    private _styles: LoadingIndicatorStyles;\n\n    constructor(\n        options?: { styles?: LoadingIndicatorStyles }\n    ) {\n        this._styles = { ...DEFAULT_STYLES, ...options && options.styles };\n\n        this._defineAnimation();\n\n        this._container = this._buildContainer();\n        this._indicator = this._buildIndicator();\n\n        this._container.appendChild(this._indicator);\n    }\n\n    show(parentId?: string): void {\n        if (parentId) {\n            const parent = document.getElementById(parentId);\n\n            if (!parent) {\n                throw new Error('Unable to attach the loading indicator because the parent ID is not valid.');\n            }\n\n            parent.appendChild(this._container);\n        }\n\n        this._container.style.visibility = 'visible';\n        this._container.style.opacity = '1';\n    }\n\n    hide(): void {\n        const handleTransitionEnd = () => {\n            this._container.style.visibility = 'hidden';\n\n            this._container.removeEventListener('transitionend', handleTransitionEnd);\n        };\n\n        this._container.addEventListener('transitionend', handleTransitionEnd);\n\n        this._container.style.opacity = '0';\n    }\n\n    private _buildContainer(): HTMLElement {\n        const container = document.createElement('div');\n\n        container.style.display = 'block';\n        container.style.bottom = '0';\n        container.style.left = '0';\n        container.style.height = '100%';\n        container.style.width = '100%';\n        container.style.position = 'absolute';\n        container.style.right = '0';\n        container.style.top = '0';\n        container.style.transition = 'all 250ms ease-out';\n        container.style.opacity = '0';\n\n        return container;\n    }\n\n    private _buildIndicator(): HTMLElement {\n        const indicator = document.createElement('div');\n\n        indicator.style.display = 'block';\n        indicator.style.width = `${this._styles.size}px`;\n        indicator.style.height = `${this._styles.size}px`;\n        indicator.style.borderRadius = `${this._styles.size}px`;\n        indicator.style.border = 'solid 1px';\n        indicator.style.borderColor = `${this._styles.backgroundColor} ${this._styles.backgroundColor} ${this._styles.color} ${this._styles.color}`;\n        indicator.style.margin = '0 auto';\n        indicator.style.position = 'absolute';\n        indicator.style.left = '0';\n        indicator.style.right = '0';\n        indicator.style.top = '50%';\n        indicator.style.transform = 'translateY(-50%) rotate(0deg)';\n        indicator.style.transformStyle = 'preserve-3d';\n        indicator.style.animation = `${ROTATION_ANIMATION} 500ms infinite cubic-bezier(0.69, 0.31, 0.56, 0.83)`;\n\n        return indicator;\n    }\n\n    private _defineAnimation(): void {\n        // In order to define CSS animation, we need to insert a stylesheet into the host frame.\n        // We only have to do it once.\n        if (document.getElementById(ROTATION_ANIMATION)) {\n            return;\n        }\n\n        const style = document.createElement('style');\n\n        style.id = ROTATION_ANIMATION;\n\n        document.head.appendChild(style);\n\n        if (style.sheet instanceof CSSStyleSheet) {\n            style.sheet.insertRule(`\n                @keyframes ${ROTATION_ANIMATION} {\n                    0% { transform: translateY(-50%) rotate(0deg); }\n                    100% { transform: translateY(-50%) rotate(360deg); }\n                }\n            `);\n        }\n    }\n}\n","import { iframeResizer, IFrameComponent } from 'iframe-resizer';\n\nimport { parseUrl } from '../common/url';\n\nimport { EmbeddedCheckoutEventType } from './embedded-checkout-events';\nimport { NotEmbeddableError, NotEmbeddableErrorType } from './errors';\nimport isIframeEvent from './is-iframe-event';\n\nexport default class ResizableIframeCreator {\n    constructor(\n        private _options?: { timeout: number }\n    ) {}\n\n    createFrame(src: string, containerId: string): Promise<IFrameComponent> {\n        const container = document.getElementById(containerId);\n        const { timeout = 60000 } = this._options || {};\n\n        if (!container) {\n            throw new NotEmbeddableError(\n                'Unable to embed the iframe because the container element could not be found.',\n                NotEmbeddableErrorType.MissingContainer\n            );\n        }\n\n        const iframe = document.createElement('iframe');\n\n        iframe.src = src;\n        iframe.style.border = 'none';\n        iframe.style.display = 'none';\n        iframe.style.width = '100%';\n        iframe.allowPaymentRequest = true;\n\n        container.appendChild(iframe);\n\n        return this._toResizableFrame(iframe, timeout)\n            .catch(error => {\n                container.removeChild(iframe);\n\n                throw error;\n            });\n    }\n\n    private _toResizableFrame(iframe: HTMLIFrameElement, timeoutInterval: number): Promise<IFrameComponent> {\n        // Can't simply listen to `load` event because it always gets triggered even if there's an error.\n        // Instead, listen to the `load` inside the iframe and let the parent frame know when it happens.\n        return new Promise((resolve, reject) => {\n            const timeout = window.setTimeout(() => {\n                reject(new NotEmbeddableError('Unable to embed the iframe because the content could not be loaded.'));\n            }, timeoutInterval);\n\n            const handleMessage = (event: MessageEvent) => {\n                if (event.origin !== parseUrl(iframe.src).origin) {\n                    return;\n                }\n\n                if (isIframeEvent(event.data, EmbeddedCheckoutEventType.FrameError)) {\n                    teardown();\n                    reject(new NotEmbeddableError(event.data.payload.message, NotEmbeddableErrorType.MissingContent));\n                }\n\n                if (isIframeEvent(event.data, EmbeddedCheckoutEventType.FrameLoaded)) {\n                    iframe.style.display = '';\n\n                    const contentId = event.data.payload && event.data.payload.contentId;\n                    const iframes = iframeResizer({\n                        scrolling: false,\n                        sizeWidth: false,\n                        heightCalculationMethod: contentId ? 'taggedElement' : 'lowestElement',\n                    }, iframe);\n\n                    teardown();\n                    resolve(iframes[iframes.length - 1]);\n                }\n            };\n\n            const teardown = () => {\n                window.removeEventListener('message', handleMessage);\n                window.clearTimeout(timeout);\n            };\n\n            window.addEventListener('message', handleMessage);\n        });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { BrowserStorage } from '../common/storage';\nimport { parseUrl } from '../common/url';\n\nimport EmbeddedCheckout from './embedded-checkout';\nimport { EmbeddedCheckoutEventMap } from './embedded-checkout-events';\nimport EmbeddedCheckoutOptions from './embedded-checkout-options';\nimport { EmbeddedContentEvent } from './iframe-content/embedded-content-events';\nimport IframeEventListener from './iframe-event-listener';\nimport IframeEventPoster from './iframe-event-poster';\nimport LoadingIndicator from './loading-indicator';\nimport ResizableIframeCreator from './resizable-iframe-creator';\n\nconst STORAGE_PREFIX = 'BigCommerce.EmbeddedCheckout';\n\n/**\n * Embed the checkout form in an iframe.\n *\n * @remarks\n * Once the iframe is embedded, it will automatically resize according to the\n * size of the checkout form. It will also notify the parent window when certain\n * events have occurred. i.e.: when the form is loaded and ready to be used.\n *\n * ```js\n * embedCheckout({\n *     url: 'https://checkout/url',\n *     containerId: 'container-id',\n * });\n * ```\n *\n * @param options - Options for embedding the checkout form.\n * @returns A promise that resolves to an instance of `EmbeddedCheckout`.\n */\nexport default function embedCheckout(options: EmbeddedCheckoutOptions): Promise<EmbeddedCheckout> {\n    const origin = parseUrl(options.url).origin;\n    const embeddedCheckout = new EmbeddedCheckout(\n        new ResizableIframeCreator(),\n        new IframeEventListener<EmbeddedCheckoutEventMap>(origin),\n        new IframeEventPoster<EmbeddedContentEvent>(origin),\n        new LoadingIndicator({ styles: options.styles && options.styles.loadingIndicator }),\n        createRequestSender(),\n        new BrowserStorage(STORAGE_PREFIX),\n        window.location,\n        options\n    );\n\n    return embeddedCheckout.attach();\n}\n","export { default as embedCheckout } from './embed-checkout';\n","import { keyBy, reduce, some } from 'lodash';\n\nimport { Checkout } from '../checkout';\nimport { mapToInternalCoupon, mapToInternalGiftCertificate } from '../coupon';\nimport { mapToDiscountNotifications } from '../promotion';\n\nimport { AmountTransformer } from '.';\nimport InternalCart from './internal-cart';\nimport mapToInternalLineItems from './map-to-internal-line-items';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCart(checkout: Checkout): InternalCart {\n    const decimalPlaces = checkout.cart.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: checkout.cart.id,\n        items: mapToInternalLineItems(checkout.cart.lineItems, decimalPlaces),\n        currency: checkout.cart.currency.code,\n        coupon: {\n            discountedAmount: reduce(checkout.cart.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: checkout.cart.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: checkout.cart.discountAmount,\n            integerAmount: amountTransformer.toInteger(checkout.cart.discountAmount),\n        },\n        discountNotifications: mapToDiscountNotifications(checkout.promotions),\n        giftCertificate: {\n            totalDiscountedAmount: reduce(checkout.giftCertificates, (sum, certificate) => {\n                return sum + certificate.used;\n            }, 0),\n            appliedGiftCertificates: keyBy(checkout.giftCertificates.map(mapToInternalGiftCertificate), 'code'),\n        },\n        shipping: {\n            amount: checkout.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.shippingCostTotal),\n            amountBeforeDiscount: checkout.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(checkout.shippingCostBeforeDiscount),\n            required: some(checkout.cart.lineItems.physicalItems, lineItem => lineItem.isShippingRequired),\n        },\n        subtotal: {\n            amount: checkout.subtotal,\n            integerAmount: amountTransformer.toInteger(checkout.subtotal),\n        },\n        storeCredit: {\n            amount: checkout.customer ? checkout.customer.storeCredit : 0,\n        },\n        taxSubtotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        taxes: checkout.taxes,\n        taxTotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        handling: {\n            amount: checkout.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: checkout.grandTotal,\n            integerAmount: amountTransformer.toInteger(checkout.grandTotal),\n        },\n    };\n}\n","import { DiscountNotification } from '../discount';\n\nimport { Promotion } from '.';\n\nexport default function mapToDiscountNotifications(promotions?: Promotion[]): DiscountNotification[] {\n    const notifications: DiscountNotification[] = [];\n\n    (promotions || []).forEach(promotion => {\n        (promotion.banners || []).forEach(banner => {\n            notifications.push({\n                placeholders: [],\n                discountType: null,\n                message: '',\n                messageHtml: banner.text,\n            });\n        });\n    });\n\n    return notifications;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, merge, of, Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\n\nimport { CheckoutRequestBody } from './checkout';\nimport { CheckoutActionType, LoadCheckoutAction, UpdateCheckoutAction } from './checkout-actions';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default class CheckoutActionCreator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender,\n        private _configActionCreator: ConfigActionCreator\n    ) {}\n\n    loadCheckout(id: string, options?: RequestOptions): Observable<LoadCheckoutAction> {\n        return concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            merge(\n                this._configActionCreator.loadConfig({ ...options, useCache: true }),\n                defer(() => this._checkoutRequestSender.loadCheckout(id, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body)))\n            )\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    loadDefaultCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            this._configActionCreator.loadConfig(),\n            defer(() => {\n                const state = store.getState();\n                const context = state.config.getContextConfig();\n\n                if (!context || !context.checkoutId) {\n                    throw new StandardError('Unable to load checkout: no cart is available');\n                }\n\n                return this._checkoutRequestSender.loadCheckout(context.checkoutId, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body));\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    updateCheckout(\n        body: CheckoutRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateCheckoutAction, InternalCheckoutSelectors> {\n        return store => new Observable(observer => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CheckoutActionType.UpdateCheckoutRequested));\n\n            this._checkoutRequestSender.updateCheckout(checkout.id, body, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CheckoutActionType.UpdateCheckoutSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CheckoutActionType.UpdateCheckoutFailed, response));\n                });\n        });\n    }\n\n    loadCurrentCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            return this.loadCheckout(checkout.id, options);\n        };\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { Cart } from '../cart';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { CheckoutIncludes } from '../checkout/checkout-params';\nimport CheckoutRequestSender from '../checkout/checkout-request-sender';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport Consignment, {\n    ConsignmentsRequestBody,\n    ConsignmentAssignmentRequestBody,\n    ConsignmentCreateRequestBody,\n    ConsignmentLineItem,\n    ConsignmentRequestBody,\n    ConsignmentShippingOptionRequestBody,\n    ConsignmentUpdateRequestBody\n} from './consignment';\nimport {\n    ConsignmentActionType,\n    CreateConsignmentsAction,\n    DeleteConsignmentAction,\n    LoadShippingOptionsAction,\n    UpdateConsignmentAction,\n    UpdateShippingOptionAction,\n} from './consignment-actions';\nimport ConsignmentRequestSender from './consignment-request-sender';\n\nexport default class ConsignmentActionCreator {\n    constructor(\n        private _consignmentRequestSender: ConsignmentRequestSender,\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    unassignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            if (!existingConsignment) {\n                throw new InvalidArgumentError('No consignment found for the specified address');\n            }\n\n            const lineItems = this._removeLineItems(\n                consignment.lineItems,\n                existingConsignment,\n                state.cart.getCart()\n            );\n\n            if (!lineItems.length) {\n                return this.deleteConsignment(existingConsignment.id, options)(store);\n            }\n\n            return this.updateConsignment({\n                id: existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems,\n            }, options)(store);\n        };\n    }\n\n    assignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            return this._createOrUpdateConsignment({\n                id: existingConsignment && existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems: this._addLineItems(\n                    consignment.lineItems,\n                    existingConsignment,\n                    state.cart.getCart()\n                ),\n            }, options)(store);\n        };\n    }\n\n    selectShippingOption(\n        id: string,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n            const consignments = state.consignments.getConsignments();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (!consignments || !consignments.length) {\n                throw new MissingDataError(MissingDataErrorType.MissingConsignments);\n            }\n\n            const consignmentUpdateBody = {\n                id: consignments[0].id,\n                shippingOptionId: id,\n            };\n\n            const consignmentMeta = {\n                id: consignments[0].id,\n            };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignmentUpdateBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(\n                        ConsignmentActionType.UpdateShippingOptionSucceeded,\n                        body,\n                        consignmentMeta\n                    ));\n\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(\n                        ConsignmentActionType.UpdateShippingOptionFailed,\n                        response,\n                        consignmentMeta\n                    ));\n                });\n        });\n    }\n\n    loadShippingOptions(options?: RequestOptions): ThunkAction<LoadShippingOptionsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadShippingOptionsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.LoadShippingOptionsRequested));\n\n            this._checkoutRequestSender.loadCheckout(checkout.id, {\n                ...options,\n                params: {\n                    include: [CheckoutIncludes.AvailableShippingOptions],\n                },\n            })\n            .then(({ body }) => {\n                observer.next(createAction(ConsignmentActionType.LoadShippingOptionsSucceeded, body));\n                observer.complete();\n            })\n            .catch(response => {\n                observer.error(createErrorAction(ConsignmentActionType.LoadShippingOptionsFailed, response));\n            });\n        });\n    }\n\n    updateAddress(\n        address: AddressRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const consignment = this._getConsignmentRequestBody(address, store);\n            const consignments = store.getState().consignments.getConsignments();\n\n            if (consignments && consignments.length) {\n                (consignment as ConsignmentUpdateRequestBody).id = consignments[0].id;\n            }\n\n            return this._createOrUpdateConsignment(consignment, options)(store);\n        };\n    }\n\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CreateConsignmentsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.CreateConsignmentsRequested));\n\n            this._consignmentRequestSender.createConsignments(checkout.id, consignments, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.CreateConsignmentsSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.CreateConsignmentsFailed, response));\n                });\n        });\n    }\n\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n            const consignmentMeta = { id: consignmentId };\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.DeleteConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.deleteConsignment(checkout.id, consignmentId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.DeleteConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.DeleteConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    updateShippingOption(\n        consignment: ConsignmentShippingOptionRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateShippingOptionSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateShippingOptionFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    private _createOrUpdateConsignment(\n        consignment: ConsignmentCreateRequestBody | ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (this._isUpdateConsignmentRequest(consignment)) {\n                return this.updateConsignment(consignment, options)(store);\n            }\n\n            return this.createConsignments([consignment], options)(store);\n        };\n    }\n\n    private _getConsignmentRequestBody(\n        shippingAddress: AddressRequestBody,\n        store: ReadableCheckoutStore\n    ): ConsignmentRequestBody {\n        const state = store.getState();\n        const cart = state.cart.getCart();\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return {\n            shippingAddress,\n            lineItems: (cart.lineItems && cart.lineItems.physicalItems || [])\n                .map(item => ({\n                    itemId: item.id,\n                    quantity: item.quantity,\n                })\n            ),\n        };\n    }\n\n    private _removeLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return this._hydrateLineItems(consignment.lineItemIds, cart).map(existingItem => {\n            const sharedItem = lineItems.find(lineItem => lineItem.itemId === existingItem.itemId);\n\n            return {\n                ...existingItem,\n                quantity: sharedItem ? (existingItem.quantity - sharedItem.quantity) : existingItem.quantity,\n            };\n        }).filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _addLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment?: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!consignment) {\n            return lineItems;\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return lineItems\n            .concat(this._hydrateLineItems(consignment.lineItemIds, cart))\n            .filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _hydrateLineItems(lineItemIds: string[], cart: Cart): ConsignmentLineItem[] {\n        return lineItemIds.map(itemId => {\n            const item = cart.lineItems.physicalItems.find(lineItem => lineItem.id === itemId );\n\n            return {\n                itemId,\n                quantity: item ? item.quantity : 0,\n            };\n        });\n    }\n\n    private _isUpdateConsignmentRequest(\n        request: ConsignmentRequestBody\n    ): request is ConsignmentUpdateRequestBody {\n        const updateRequest = request as ConsignmentUpdateRequestBody;\n\n        return !!updateRequest.id;\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { ConsignmentsRequestBody, ConsignmentUpdateRequestBody } from './consignment';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'consignments.availableShippingOptions',\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class ConsignmentRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createConsignments(checkoutId: string, consignments: ConsignmentsRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: consignments, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateConsignment(checkoutId: string, consignment: ConsignmentUpdateRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = consignment;\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n\n    deleteConsignment(checkoutId: string, consignmentId: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${consignmentId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, { params: DEFAULT_PARAMS, headers, timeout });\n    }\n}\n","import InternalShippingOption from './internal-shipping-option';\nimport ShippingOption from './shipping-option';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalShippingOption(option: ShippingOption, isSelected: boolean): InternalShippingOption {\n    return {\n        description: option.description,\n        module: option.type,\n        price: option.cost,\n        id: option.id,\n        selected: isSelected,\n        isRecommended: option.isRecommended,\n        imageUrl: option.imageUrl,\n        transitTime: option.transitTime,\n    };\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\nexport default class UnrecoverableError extends RequestError {\n    constructor(response: Response, message?: string) {\n        super(response, {\n            message: message || 'An unexpected error has occurred. The checkout process cannot continue as a result.',\n        });\n\n        this.type = 'unrecoverable';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromInternalErrorResponse(\n    response: Response<InternalErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || body.detail || body.title || message,\n        errors: errors.length ?\n            errors.map(message => ({ code: body.type, message })) :\n            [{ code: body.type, message: body.detail || body.title }],\n    });\n}\n\nfunction joinErrors(errors: string[]): string | undefined {\n    return errors.reduce((result: string[], error) => {\n        if (error) {\n            return [...result, error];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { PaymentErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromPaymentErrorResponse(\n    response: Response<PaymentErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || message,\n        errors,\n    });\n}\n\nfunction joinErrors(errors: Array<{ code: string, message?: string }>): string | undefined {\n    if (!Array.isArray(errors)) {\n        return;\n    }\n\n    return errors.reduce((result: string[], error) => {\n        if (error && error.message) {\n            return [...result, error.message];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\nimport { last } from 'lodash';\n\nimport ErrorResponseBody, {\n    InternalErrorResponseBody,\n    StorefrontErrorResponseBody\n} from './error-response-body';\nimport { RequestError, TimeoutError } from './errors';\nimport mapFromInternalErrorResponse from './errors/map-from-internal-error-response';\nimport mapFromPaymentErrorResponse from './errors/map-from-payment-error-response';\nimport mapFromStorefrontErrorResponse from './errors/map-from-storefront-error-response';\n\nexport default class RequestErrorFactory {\n    private _factoryMethods: { [key: string]: ErrorFactoryMethod } = {};\n\n    constructor() {\n        this.register('default', (response, message) => new RequestError(response, { message }));\n        this.register('internal', (response, message) => mapFromInternalErrorResponse(response, message));\n        this.register('storefront', (response, message) => mapFromStorefrontErrorResponse(response, message));\n        this.register('payment', (response, message) => mapFromPaymentErrorResponse(response, message));\n        this.register('timeout', response => new TimeoutError(response));\n    }\n\n    register(type: string, factoryMethod: ErrorFactoryMethod): void {\n        this._factoryMethods[type] = factoryMethod;\n    }\n\n    createError(response: Response, message?: string): RequestError {\n        const factoryMethod = this._factoryMethods[this._getType(response)] || this._factoryMethods.default;\n\n        return factoryMethod(response, message);\n    }\n\n    private _getType(response: Response<ErrorResponseBody>): string {\n        if (response.status === 0) {\n            return 'timeout';\n        }\n\n        if (this._isStorefrontErrorResponseBody(response.body)) {\n            return 'storefront';\n        }\n\n        if (this._isInternalErrorResponseBody(response.body)) {\n            const internalType = last(response.body.type.split('/'));\n\n            return internalType && this._factoryMethods[internalType] ?\n                internalType :\n                'internal';\n        }\n\n        const error = last(response.body && response.body.errors);\n\n        if (error && error.code && this._factoryMethods[error.code]) {\n            return error.code;\n        }\n\n        return 'payment';\n    }\n\n    private _isStorefrontErrorResponseBody(\n        errorResponse: ErrorResponseBody\n    ): errorResponse is StorefrontErrorResponseBody {\n        const storefrontErrorResponse = errorResponse as StorefrontErrorResponseBody;\n\n        return !this._isInternalErrorResponseBody(errorResponse) &&\n            typeof storefrontErrorResponse.title === 'string' &&\n            typeof storefrontErrorResponse.type === 'string' &&\n            typeof storefrontErrorResponse.status === 'number' &&\n            typeof storefrontErrorResponse.detail === 'string';\n    }\n\n    private _isInternalErrorResponseBody(\n        errorResponse: ErrorResponseBody\n    ): errorResponse is InternalErrorResponseBody {\n        const internalErrorResponse = errorResponse as InternalErrorResponseBody;\n\n        return typeof internalErrorResponse.errors === 'object' &&\n            typeof internalErrorResponse.title === 'string' &&\n            typeof internalErrorResponse.type === 'string' &&\n            typeof internalErrorResponse.status === 'number';\n    }\n}\n\nexport type ErrorFactoryMethod = (response: Response, message?: string) => RequestError;\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { StorefrontErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromStorefrontErrorResponse(\n    response: Response<StorefrontErrorResponseBody>,\n    message?: string\n): RequestError<StorefrontErrorResponseBody> {\n    const { body } = response;\n\n    return new RequestError(response, {\n        message: message || body.detail || body.title,\n        errors: [{\n            code: body.code || body.type,\n            message: body.detail || body.title,\n        }],\n    });\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport BillingAddress from './billing-address';\nimport { BillingAddressAction, BillingAddressActionType } from './billing-address-actions';\nimport BillingAddressState, { BillingAddressErrorsState, BillingAddressStatusesState } from './billing-address-state';\n\nconst DEFAULT_STATE: BillingAddressState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function billingAddressReducer(\n    state: BillingAddressState = DEFAULT_STATE,\n    action: Action\n): BillingAddressState {\n    const reducer = combineReducers<BillingAddressState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: BillingAddress | undefined,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddress | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return action.payload ? action.payload.billingAddress : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: BillingAddressErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...errors, loadError: action.payload };\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return { ...errors, updateError: undefined };\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n        return { ...errors, updateError: action.payload };\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return { ...errors, continueAsGuestError: undefined };\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n        return { ...errors, continueAsGuestError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: BillingAddressStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...statuses, isLoading: false };\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n        return { ...statuses, isUpdating: true };\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return { ...statuses, isUpdating: false };\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n        return { ...statuses, isContinuingAsGuest: true };\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return { ...statuses, isContinuingAsGuest: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport Config from './config';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\nimport ConfigState, { ConfigErrorsState, ConfigStatusesState } from './config-state';\n\nconst DEFAULT_STATE: ConfigState = {\n    meta: {},\n    errors: {},\n    statuses: {},\n};\n\nexport default function configReducer(\n    state: ConfigState = DEFAULT_STATE,\n    action: Action\n): ConfigState {\n    const reducer = combineReducers<ConfigState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Config | undefined,\n    action: LoadConfigAction\n): Config | undefined {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return action.payload ? action.payload : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConfigErrorsState = DEFAULT_STATE.errors,\n    action: LoadConfigAction\n): ConfigErrorsState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case ConfigActionType.LoadConfigFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConfigStatusesState = DEFAULT_STATE.statuses,\n    action: LoadConfigAction\n): ConfigStatusesState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigRequested:\n        return { ...statuses, isLoading: true };\n\n    case ConfigActionType.LoadConfigSucceeded:\n    case ConfigActionType.LoadConfigFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport Country from './country';\nimport { CountryActionType, LoadCountriesAction } from './country-actions';\nimport CountryState, { CountryErrorsState, CountryStatusesState } from './country-state';\n\nconst DEFAULT_STATE: CountryState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function countryReducer(\n    state: CountryState = DEFAULT_STATE,\n    action: Action\n): CountryState {\n    const reducer = combineReducers<CountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadCountriesAction\n): Country[] | undefined {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesSucceeded:\n        return action.payload || [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadCountriesAction\n): CountryErrorsState {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesRequested:\n    case CountryActionType.LoadCountriesSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case CountryActionType.LoadCountriesFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadCountriesAction\n): CountryStatusesState {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesRequested:\n        return { ...statuses, isLoading: true };\n\n    case CountryActionType.LoadCountriesSucceeded:\n    case CountryActionType.LoadCountriesFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { PaymentAction, PaymentActionType } from './payment-actions';\nimport PaymentResponseBody from './payment-response-body';\nimport PaymentState from './payment-state';\n\nexport default function paymentReducer(state: PaymentState = {}, action: PaymentAction): PaymentState {\n    const reducer = combineReducers<PaymentState, PaymentAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: PaymentResponseBody | undefined, action: PaymentAction): PaymentResponseBody | undefined {\n    switch (action.type) {\n    case PaymentActionType.SubmitPaymentSucceeded:\n        return action.payload;\n\n    default:\n        return data;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { mergeOrPush } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport { PaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { PaymentMethodErrorsState, PaymentMethodStatusesState } from './payment-method-state';\n\nconst DEFAULT_STATE: PaymentMethodState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function paymentMethodReducer(\n    state: PaymentMethodState = DEFAULT_STATE,\n    action: Action\n): PaymentMethodState {\n    const reducer = combineReducers<PaymentMethodState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentMethod[] | undefined,\n    action: PaymentMethodAction\n): PaymentMethod[] | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return action.payload ?\n            mergeOrPush(data || [], action.payload, {\n                id: action.payload.id,\n                gateway: action.payload.gateway,\n            }) :\n            data;\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return action.payload ? action.payload : [];\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: PaymentMethodMeta | undefined,\n    action: PaymentMethodAction\n): PaymentMethodMeta | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return action.meta ? { ...meta, ...action.meta } : meta;\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: PaymentMethodErrorsState = DEFAULT_STATE.errors,\n    action: PaymentMethodAction\n): PaymentMethodErrorsState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return { ...errors, loadError: action.payload };\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return {\n            ...errors,\n            loadMethodId: undefined,\n            loadMethodError: undefined,\n        };\n\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return {\n            ...errors,\n            loadMethodId: action.meta.methodId,\n            loadMethodError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentMethodStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentMethodAction\n): PaymentMethodStatusesState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n        return { ...statuses, isLoading: true };\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return { ...statuses, isLoading: false };\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n        return {\n            ...statuses,\n            isLoadingMethod: true,\n            loadMethodId: action.meta.methodId,\n        };\n\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return {\n            ...statuses,\n            isLoadingMethod: false,\n            loadMethodId: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport { PaymentStrategyAction, PaymentStrategyActionType } from './payment-strategy-actions';\nimport PaymentStrategyState, { DEFAULT_STATE, PaymentStrategyDataState, PaymentStrategyErrorsState, PaymentStrategyStatusesState } from './payment-strategy-state';\n\nexport default function paymentStrategyReducer(\n    state: PaymentStrategyState = DEFAULT_STATE,\n    action: Action\n): PaymentStrategyState {\n    const reducer = combineReducers<PaymentStrategyState, PaymentStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentStrategyDataState = DEFAULT_STATE.data,\n    action: PaymentStrategyAction\n): PaymentStrategyDataState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        };\n\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        };\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: PaymentStrategyErrorsState = DEFAULT_STATE.errors,\n    action: PaymentStrategyAction\n): PaymentStrategyErrorsState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.ExecuteRequested:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return {\n            ...errors,\n            executeError: undefined,\n            executeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.ExecuteFailed:\n        return {\n            ...errors,\n            executeError: action.payload,\n            executeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.FinalizeRequested:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return {\n            ...errors,\n            finalizeError: undefined,\n            finalizeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.FinalizeFailed:\n        return {\n            ...errors,\n            finalizeError: action.payload,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n        return {\n            ...errors,\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n        return {\n            ...errors,\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentStrategyAction\n): PaymentStrategyStatusesState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.InitializeFailed:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.ExecuteRequested:\n        return {\n            ...statuses,\n            isExecuting: true,\n            executeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.ExecuteFailed:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return {\n            ...statuses,\n            isExecuting: false,\n            executeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.FinalizeRequested:\n        return {\n            ...statuses,\n            isFinalizing: true,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.FinalizeFailed:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return {\n            ...statuses,\n            isFinalizing: false,\n            finalizeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    return {\n        ...statuses,\n        isWidgetInteracting: true,\n        widgetInteractionMethodId: action.meta.methodId,\n     };\n\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n     return {\n        ...statuses,\n        isWidgetInteracting: false,\n        widgetInteractionMethodId: undefined,\n     };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../../common/error';\n\nimport Instrument from './instrument';\nimport { InstrumentAction, InstrumentActionType } from './instrument-actions';\nimport InstrumentState, { InstrumentErrorState, InstrumentMeta, InstrumentStatusState } from './instrument-state';\n\nconst DEFAULT_STATE = {\n    data: [],\n    errors: {},\n    statuses: {},\n};\n\nexport default function instrumentReducer(\n    state: InstrumentState = DEFAULT_STATE,\n    action: Action\n): InstrumentState {\n    const reducer = combineReducers<InstrumentState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Instrument[] = DEFAULT_STATE.data,\n    action: InstrumentAction\n): Instrument[] {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n        return action.payload ? action.payload.vaultedInstruments : [];\n\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return data.filter(instrument =>\n            instrument.bigpayToken !== action.meta.instrumentId\n        );\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: InstrumentMeta | undefined,\n    action: InstrumentAction\n): InstrumentMeta | undefined {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return { ...meta, ...action.meta };\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: InstrumentErrorState = DEFAULT_STATE.errors,\n    action: InstrumentAction\n): InstrumentErrorState {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsRequested:\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case InstrumentActionType.DeleteInstrumentRequested:\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return {\n            ...errors,\n            deleteError: undefined,\n            failedInstrument: undefined,\n        };\n\n    case InstrumentActionType.LoadInstrumentsFailed:\n        return { ...errors, loadError: action.payload };\n\n    case InstrumentActionType.DeleteInstrumentFailed:\n        return {\n            ...errors,\n            deleteError: action.payload,\n            failedInstrument: action.meta.instrumentId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: InstrumentStatusState = DEFAULT_STATE.statuses,\n    action: InstrumentAction\n): InstrumentStatusState {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsRequested:\n        return { ...statuses, isLoading: true };\n\n    case InstrumentActionType.DeleteInstrumentRequested:\n        return {\n            ...statuses,\n            isDeleting: true,\n            deletingInstrument: action.meta.instrumentId,\n        };\n\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n    case InstrumentActionType.LoadInstrumentsFailed:\n        return { ...statuses, isLoading: false };\n\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n    case InstrumentActionType.DeleteInstrumentFailed:\n        return {\n            ...statuses,\n            isDeleting: false,\n            deletingInstrument: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport RemoteCheckout from './remote-checkout';\nimport { RemoteCheckoutAction, RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutState, { RemoteCheckoutStateData } from './remote-checkout-state';\n\nconst DEFAULT_STATE: RemoteCheckoutState = {\n    data: {},\n};\n\nexport default function remoteCheckoutReducer(\n    state: RemoteCheckoutState = DEFAULT_STATE,\n    action: RemoteCheckoutAction\n): RemoteCheckoutState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<RemoteCheckoutState>({\n        data: combineReducers<RemoteCheckoutStateData>({\n            [action.meta.methodId]: dataReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: RemoteCheckout = DEFAULT_STATE.data,\n    action: RemoteCheckoutAction\n): RemoteCheckout {\n    switch (action.type) {\n    case RemoteCheckoutActionType.InitializeRemoteBillingSucceeded:\n        return action.payload ? { ...data, billing: action.payload.billing } : data;\n\n    case RemoteCheckoutActionType.InitializeRemoteShippingSucceeded:\n        return action.payload ? { ...data, shipping: action.payload.shipping } : data;\n\n    case RemoteCheckoutActionType.LoadRemoteSettingsSucceeded:\n        return { ...data, settings: action.payload };\n\n    case RemoteCheckoutActionType.UpdateRemoteCheckout:\n        return { ...data, ...action.payload };\n\n    default:\n        return data;\n    }\n}\n","import { createDataStore } from '@bigcommerce/data-store';\n\nimport { createRequestErrorFactory } from '../common/error';\n\nimport CheckoutStore, { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport createActionTransformer from './create-action-transformer';\nimport createCheckoutStoreReducer from './create-checkout-store-reducer';\nimport createInternalCheckoutSelectors from './create-internal-checkout-selectors';\n\nexport default function createCheckoutStore(\n    initialState: Partial<CheckoutStoreState> = {},\n    options?: CheckoutStoreOptions\n): CheckoutStore {\n    const actionTransformer = createActionTransformer(createRequestErrorFactory());\n    const stateTransformer = (state: CheckoutStoreState) => createInternalCheckoutSelectors(state);\n\n    return createDataStore(\n        createCheckoutStoreReducer(),\n        initialState,\n        { actionTransformer, stateTransformer, ...options }\n    );\n}\n","import { PaymentMethodInvalidError } from '../../payment/errors';\n\nimport { UnrecoverableError } from './errors';\nimport RequestErrorFactory from './request-error-factory';\n\nexport default function createRequestErrorFactory(): RequestErrorFactory {\n    const factory = new RequestErrorFactory();\n\n    const unrecoverableErrorTypes = [\n        'catalog_only',\n        'empty_cart',\n        'invalid_order_id',\n        'invalid_order_token',\n        'missing_order_token',\n        'missing_provider_token',\n        'missing_shipping_method',\n        'order_completion_error',\n        'order_could_not_be_finalized_error',\n        'order_create_failed',\n        'provider_fatal_error',\n        'provider_setup_error',\n        'stock_too_low',\n    ];\n\n    unrecoverableErrorTypes.forEach(type => {\n        factory.register(type, (response, message) => new UnrecoverableError(response, message));\n    });\n\n    factory.register('invalid_payment_provider', response => new PaymentMethodInvalidError(response));\n    factory.register('payment_config_not_found', response => new PaymentMethodInvalidError(response));\n\n    return factory;\n}\n","import { combineReducers, Action, Reducer } from '@bigcommerce/data-store';\n\nimport { billingAddressReducer } from '../billing';\nimport { cartReducer } from '../cart';\nimport { checkoutButtonReducer } from '../checkout-buttons';\nimport { configReducer } from '../config';\nimport { couponReducer, giftCertificateReducer } from '../coupon';\nimport { customerReducer, customerStrategyReducer } from '../customer';\nimport { countryReducer } from '../geography';\nimport { orderReducer } from '../order';\nimport { paymentMethodReducer, paymentReducer, paymentStrategyReducer } from '../payment';\nimport { instrumentReducer } from '../payment/instrument';\nimport { remoteCheckoutReducer } from '../remote-checkout';\nimport { consignmentReducer, shippingCountryReducer, shippingStrategyReducer } from '../shipping';\n\nimport checkoutReducer from './checkout-reducer';\nimport CheckoutStoreState from './checkout-store-state';\n\nexport default function createCheckoutStoreReducer(): Reducer<CheckoutStoreState, Action> {\n    return combineReducers({\n        billingAddress: billingAddressReducer,\n        cart: cartReducer,\n        checkout: checkoutReducer,\n        checkoutButton: checkoutButtonReducer,\n        config: configReducer,\n        consignments: consignmentReducer,\n        countries: countryReducer,\n        coupons: couponReducer,\n        customer: customerReducer,\n        customerStrategies: customerStrategyReducer,\n        giftCertificates: giftCertificateReducer,\n        instruments: instrumentReducer,\n        order: orderReducer,\n        payment: paymentReducer,\n        paymentMethods: paymentMethodReducer,\n        paymentStrategies: paymentStrategyReducer,\n        remoteCheckout: remoteCheckoutReducer,\n        shippingCountries: shippingCountryReducer,\n        shippingStrategies: shippingStrategyReducer,\n    });\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../../common/error';\nimport { RequestError } from '../../common/error/errors';\n\nexport default class CheckoutNotAvailableError extends RequestError {\n    constructor(response: Response<InternalErrorResponseBody>) {\n        super(response, { message: response.body.title });\n\n        this.type = 'checkout_not_available';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nimport Checkout, { CheckoutRequestBody } from './checkout';\nimport CHECKOUT_DEFAULT_INCLUDES from './checkout-default-includes';\nimport CheckoutParams from './checkout-params';\nimport { CheckoutNotAvailableError } from './errors';\n\nexport default class CheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadCheckout(id: string, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.get(url, {\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    ...(params && params.include || []),\n                ]),\n            },\n            headers,\n            timeout,\n        }).catch(error => {\n            if (error.status >= 400 && error.status < 500) {\n                throw new CheckoutNotAvailableError(error);\n            }\n\n            throw error;\n        });\n    }\n\n    updateCheckout(id: string, body: CheckoutRequestBody, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, {\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    ...(params && params.include || []),\n                ]),\n            },\n            body,\n            headers,\n            timeout,\n        });\n    }\n}\n","import { identity, isEqual, pickBy } from 'lodash';\n\nimport Address from './address';\n\nexport default function isAddressEqual(addressA: Partial<Address>, addressB: Partial<Address>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<Address>): Partial<Address> {\n    return pickBy({\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.address1,\n        address2: address.address2,\n        city: address.city,\n        stateOrProvince: address.stateOrProvince,\n        countryCode: address.countryCode,\n        postalCode: address.postalCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    }, identity);\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { GooglePayCreator } from '../googlepay';\n\nimport {\n    BraintreeClientCreator,\n    BraintreeDataCollectorCreator,\n    BraintreeHostWindow,\n    BraintreePaypalCheckoutCreator,\n    BraintreePaypalCreator,\n    BraintreeThreeDSecureCreator,\n    BraintreeVisaCheckoutCreator,\n} from './braintree';\n\nexport default class BraintreeScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: BraintreeHostWindow = window\n    ) {}\n\n    loadClient(): Promise<BraintreeClientCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/client.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.client) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.client;\n            });\n    }\n\n    load3DS(): Promise<BraintreeThreeDSecureCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/three-d-secure.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.threeDSecure) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.threeDSecure;\n            });\n    }\n\n    loadDataCollector(): Promise<BraintreeDataCollectorCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/data-collector.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.dataCollector) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.dataCollector;\n            });\n    }\n\n    loadPaypal(): Promise<BraintreePaypalCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/paypal.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypal) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.paypal;\n            });\n    }\n\n    loadPaypalCheckout(): Promise<BraintreePaypalCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/paypal-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypalCheckout) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.paypalCheckout;\n            });\n    }\n\n    loadVisaCheckout(): Promise<BraintreeVisaCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/visa-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.visaCheckout) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.visaCheckout;\n            });\n    }\n\n    loadGooglePayment(): Promise<GooglePayCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/google-payment.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.googlePayment) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.googlePayment;\n            });\n    }\n}\n","import { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport {\n    BraintreeClient,\n    BraintreeDataCollector,\n    BraintreeModule,\n    BraintreePaypal,\n    BraintreePaypalCheckout,\n    BraintreeThreeDSecure,\n    BraintreeVisaCheckout,\n    GooglePayBraintreeSDK,\n} from './braintree';\nimport BraintreeScriptLoader from './braintree-script-loader';\n\nexport default class BraintreeSDKCreator {\n    private _client?: Promise<BraintreeClient>;\n    private _3ds?: Promise<BraintreeThreeDSecure>;\n    private _paypal?: Promise<BraintreePaypal>;\n    private _paypalCheckout?: Promise<BraintreePaypalCheckout>;\n    private _clientToken?: string;\n    private _visaCheckout?: Promise<BraintreeVisaCheckout>;\n    private _dataCollectors: {\n        default?: Promise<BraintreeDataCollector>,\n        paypal?: Promise<BraintreeDataCollector>,\n    } = {};\n    private _googlePay?: Promise<GooglePayBraintreeSDK>;\n\n    constructor(\n        private _braintreeScriptLoader: BraintreeScriptLoader\n    ) {}\n\n    initialize(clientToken: string) {\n        this._clientToken = clientToken;\n    }\n\n    getClient(): Promise<BraintreeClient> {\n        if (!this._clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!this._client) {\n            this._client = this._braintreeScriptLoader.loadClient()\n                .then(client => client.create({ authorization: this._clientToken }));\n        }\n\n        return this._client;\n    }\n\n    getPaypal(): Promise<BraintreePaypal> {\n        if (!this._paypal) {\n            this._paypal = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypal(),\n            ])\n            .then(([client, paypal]) => paypal.create({ client }));\n        }\n\n        return this._paypal;\n    }\n\n    getPaypalCheckout(): Promise<BraintreePaypalCheckout> {\n        if (!this._paypalCheckout) {\n            this._paypalCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypalCheckout(),\n            ])\n                .then(([client, paypalCheckout]) => paypalCheckout.create({ client }));\n        }\n\n        return this._paypalCheckout;\n    }\n\n    get3DS(): Promise<BraintreeThreeDSecure> {\n        if (!this._3ds) {\n            this._3ds = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.load3DS(),\n            ])\n            .then(([client, threeDSecure]) => threeDSecure.create({ client }));\n        }\n\n        return this._3ds;\n    }\n\n    getDataCollector(options?: { paypal: boolean }): Promise<BraintreeDataCollector> {\n        const cacheKey = options && options.paypal ? 'paypal' : 'default';\n        let cached = this._dataCollectors[cacheKey];\n\n        if (!cached) {\n            cached = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadDataCollector(),\n            ])\n            .then(([client, dataCollector]) => dataCollector.create({ client, kount: true, ...options }))\n            .catch(error => {\n                if (error && error.code === 'DATA_COLLECTOR_KOUNT_NOT_ENABLED') {\n                    return { deviceData: undefined, teardown: () => Promise.resolve() };\n                }\n\n                throw error;\n            });\n\n            this._dataCollectors[cacheKey] = cached;\n        }\n\n        return cached;\n    }\n\n    getVisaCheckout(): Promise<BraintreeVisaCheckout> {\n        if (!this._visaCheckout) {\n            this._visaCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadVisaCheckout(),\n            ])\n            .then(([client, visaCheckout]) => visaCheckout.create({ client }));\n        }\n\n        return this._visaCheckout;\n    }\n\n    getGooglePaymentComponent(): Promise<GooglePayBraintreeSDK> {\n        if (!this._googlePay) {\n            this._googlePay = Promise.all ([\n                this.getClient(),\n                this._braintreeScriptLoader.loadGooglePayment(),\n            ])\n                .then(([client, googlePay]) => googlePay.create({ client }));\n        }\n\n        return this._googlePay;\n    }\n\n    teardown(): Promise<void> {\n        return Promise.all([\n            this._teardown(this._3ds),\n            this._teardown(this._dataCollectors.default),\n            this._teardown(this._dataCollectors.paypal),\n            this._teardown(this._visaCheckout),\n            this._teardown(this._googlePay),\n        ]).then(() => {\n            this._3ds = undefined;\n            this._visaCheckout = undefined;\n            this._dataCollectors = {};\n            this._googlePay = undefined;\n        });\n    }\n\n    private _teardown(module?: Promise<BraintreeModule>) {\n        return module ?\n            module.then(mod => mod.teardown()) :\n            Promise.resolve();\n    }\n}\n","import Coupon from './coupon';\nimport InternalCoupon from './internal-coupon';\n\nconst couponTypes = [\n    'per_item_discount',\n    'percentage_discount',\n    'per_total_discount',\n    'shipping_discount',\n    'free_shipping',\n];\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCoupon(coupon: Coupon): InternalCoupon {\n    return {\n        code: coupon.code,\n        discount: coupon.displayName,\n        discountType: couponTypes.indexOf(coupon.couponType),\n    };\n}\n","module.exports = require(\"iframe-resizer\");","import { isBillingAddressLike } from '../billing';\nimport BillingAddress from '../billing/billing-address';\nimport { Consignment } from '../shipping';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalAddress(address: Address | BillingAddress, consignments?: Consignment[]): InternalAddress {\n    let addressId;\n\n    if (isBillingAddressLike(address)) {\n        addressId = address.id;\n    } else if (consignments && consignments.length) {\n        addressId = consignments[0].id;\n    }\n\n    return {\n        id: addressId,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        addressLine1: address.address1,\n        addressLine2: address.address2,\n        city: address.city,\n        province: address.stateOrProvince,\n        provinceCode: address.stateOrProvinceCode,\n        postCode: address.postalCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import Address from '../address/address';\n\nimport BillingAddress from './billing-address';\n\nexport default function isBillingAddressLike(address: Address): address is BillingAddress {\n    const billingAddress = address as BillingAddress;\n\n    return typeof billingAddress.id !== 'undefined';\n}\n","import { uniq } from 'lodash';\n\nexport default function joinIncludes(includes: string[]): string {\n    return uniq(includes).join(',');\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n}\n\nexport default class NotInitializedError extends StandardError {\n    constructor(\n        public subtype: NotInitializedErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n    case NotInitializedErrorType.CustomerNotInitialized:\n        return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.PaymentNotInitialized:\n        return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.ShippingNotInitialized:\n        return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n    default:\n        return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nimport Url from './url';\n\nexport default function parseUrl(url: string): Url {\n    if (!/^(https?:)?\\/\\//.test(url)) {\n        throw new InvalidArgumentError('The provided URL must be absolute.');\n    }\n\n    // new URL() is not supported in IE11, use anchor tag instead\n    const anchor = document.createElement('a');\n\n    anchor.href = url;\n\n    return {\n        hash: anchor.hash,\n        hostname: anchor.hostname,\n        href: anchor.href,\n        origin: anchor.origin,\n        pathname: anchor.pathname,\n        port: anchor.port,\n        protocol: anchor.protocol,\n        search: anchor.search,\n    };\n}\n","import cacheAction from './cache-action';\nimport isActionOptions from './is-action-options';\n\nexport default function cachableActionDecorator<TMethod extends (...args: any[]) => any>(\n    target: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<TMethod>\n): TypedPropertyDescriptor<TMethod> {\n    const memoizedMethods = new WeakMap<object, { [key: string]: TMethod }>();\n\n    function decorateMethod(this: object, method: TMethod): TMethod {\n        return ((...args: any[]) => {\n            const lastArg = args[args.length - 1];\n            const { useCache } = isActionOptions(lastArg) ? lastArg : { useCache: false };\n\n            if (!useCache) {\n                return method.call(this, ...args);\n            }\n\n            const instanceMethods = memoizedMethods.get(this) || {};\n\n            if (!memoizedMethods.get(this)) {\n                memoizedMethods.set(this, instanceMethods);\n            }\n\n            if (!instanceMethods[key]) {\n                instanceMethods[key] = cacheAction(method);\n            }\n\n            return instanceMethods[key].call(this, ...args);\n        }) as TMethod;\n    }\n\n    return {\n        get() {\n            if (typeof descriptor.value !== 'function') {\n                return descriptor.value;\n            }\n\n            const value = decorateMethod.call(this, descriptor.value);\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n    };\n}\n","import ActionOptions from './action-options';\n\nexport default function isActionOptions(param: any): param is ActionOptions {\n    return param && typeof param.useCache === 'boolean';\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { memoize } from 'lodash';\nimport { from, Observable } from 'rxjs';\nimport { shareReplay } from 'rxjs/operators';\n\nimport { CacheKeyResolver } from '../utility';\n\nexport default function cacheAction<TFunction extends CreateActionFn>(\n    fn: TFunction\n): TFunction {\n    const resolver = new CacheKeyResolver();\n\n    function decoratedFn(this: any, ...args: any[]) {\n        const action = fn.call(this, ...args);\n\n        if (action instanceof Observable) {\n            return from(action).pipe(shareReplay());\n        }\n\n        if (typeof action === 'function') {\n            return memoize(store => from(action(store)).pipe(shareReplay()));\n        }\n\n        return action;\n    }\n\n    return memoize(\n        decoratedFn as TFunction,\n        (...args) => resolver.getKey(...args)\n    );\n}\n\ntype CreateActionFn = (...args: any[]) => Observable<Action> | ThunkAction<Action> | Action;\n","import { deepFreeze } from '@bigcommerce/data-store';\n\n// tslint:disable-next-line:ban-types\ntype FunctionProperties<T> = { [K in keyof T]: T[K] extends Function ? T[K] : never };\n\nexport default function createFreezeProxy<T extends object>(target: T): T {\n    return createProxy(target, (target, name) =>\n        (...args: any[]) => deepFreeze(target[name].call(target, ...args))\n    );\n}\n\nexport function createFreezeProxies<T extends { [key: string]: object }>(map: T): T {\n    return Object.keys(map)\n        .reduce((result, key) => {\n            result[key] = createFreezeProxy(map[key]);\n\n            return result;\n        }, {} as T);\n}\n\nfunction createProxy<T extends object>(target: T, trap: (target: FunctionProperties<T>, name: keyof FunctionProperties<T>, proxy: T) => any): T {\n    const proxy = Object.create(target);\n\n    traversePrototypeOf(target, prototype => {\n        Object.getOwnPropertyNames(prototype)\n            .forEach(name => {\n                if (name === 'constructor' || typeof proxy[name] !== 'function' || name.charAt(0) === '_') {\n                    return;\n                }\n\n                proxy[name] = trap(target as FunctionProperties<T>, name as keyof T, proxy);\n            });\n    });\n\n    return proxy;\n}\n\nfunction traversePrototypeOf(target: object, iteratee: (prototype: object) => void): void {\n    let prototype = Object.getPrototypeOf(target);\n\n    while (prototype) {\n        iteratee(prototype);\n\n        prototype = Object.getPrototypeOf(prototype);\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { Registry } from '../common/registry';\n\nimport CustomerCredentials from './customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from './customer-request-options';\nimport {\n    CustomerStrategyActionType,\n    CustomerStrategyDeinitializeAction,\n    CustomerStrategyInitializeAction,\n    CustomerStrategySignInAction,\n    CustomerStrategySignOutAction,\n    CustomerStrategyWidgetAction,\n} from './customer-strategy-actions';\nimport { CustomerStrategy } from './strategies';\n\nexport default class CustomerStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<CustomerStrategy>\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Observable<CustomerStrategySignInAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignInAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignInRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signIn(credentials, options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignInSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignInFailed, error, meta));\n                });\n        });\n    }\n\n    signOut(options?: CustomerRequestOptions): Observable<CustomerStrategySignOutAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignOutAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignOutRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signOut(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignOutSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignOutFailed, error, meta));\n                });\n        });\n    }\n\n    initialize(options?: CustomerInitializeOptions): ThunkAction<CustomerStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CustomerStrategyInitializeAction>) => {\n            const state = store.getState();\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            if (methodId && state.customerStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(CustomerStrategyActionType.InitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.InitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.InitializeFailed, error, meta));\n                });\n        });\n    }\n\n    deinitialize(options?: CustomerRequestOptions): ThunkAction<CustomerStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CustomerStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            if (methodId && !state.customerStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(CustomerStrategyActionType.DeinitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.DeinitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.DeinitializeFailed, error, meta));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: CustomerRequestOptions): Observable<CustomerStrategyWidgetAction> {\n        return Observable.create((observer: Observer<CustomerStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(CustomerStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(CustomerStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, from, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\n\nimport { CustomerActionType, SignInCustomerAction, SignOutCustomerAction } from './customer-actions';\nimport CustomerCredentials from './customer-credentials';\nimport CustomerRequestSender from './customer-request-sender';\n\nexport default class CustomerActionCreator {\n    constructor(\n        private _customerRequestSender: CustomerRequestSender,\n        private _checkoutActionCreator: CheckoutActionCreator\n    ) {}\n\n    signInCustomer(\n        credentials: CustomerCredentials,\n        options?: RequestOptions\n    ): ThunkAction<SignInCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignInCustomerRequested)),\n            from(this._customerRequestSender.signInCustomer(credentials, options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignInCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignInCustomerFailed, error))\n        );\n    }\n\n    signOutCustomer(\n        options?: RequestOptions\n    ): ThunkAction<SignOutCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignOutCustomerRequested)),\n            from(this._customerRequestSender.signOutCustomer(options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignOutCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignOutCustomerFailed, error))\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport CustomerCredentials from './customer-credentials';\nimport { InternalCustomerResponseBody } from './internal-customer-responses';\n\nexport default class CustomerRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    signInCustomer(credentials: CustomerCredentials, { timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.post(url, { timeout, body: credentials });\n    }\n\n    signOutCustomer({ timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.delete(url, { timeout });\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Cart from './cart';\nimport CartState from './cart-state';\n\n@selector\nexport default class CartSelector {\n    constructor(\n        private _cart: CartState\n    ) {}\n\n    getCart(): Cart | undefined {\n        return this._cart.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._cart.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._cart.statuses.isLoading;\n    }\n}\n","import { RequestError } from '../common/error/errors';\nimport { selector } from '../common/selector';\n\nimport Coupon from './coupon';\nimport CouponState from './coupon-state';\n\n@selector\nexport default class CouponSelector {\n    constructor(\n        private _coupon: CouponState\n    ) {}\n\n    getCoupons(): Coupon[] | undefined {\n        return this._coupon.data;\n    }\n\n    getRemoveError(): RequestError | undefined {\n        return this._coupon.errors.removeCouponError;\n    }\n\n    getApplyError(): RequestError | undefined {\n        return this._coupon.errors.applyCouponError;\n    }\n\n    isApplying(): boolean {\n        return !!this._coupon.statuses.isApplyingCoupon;\n    }\n\n    isRemoving(): boolean {\n        return !!this._coupon.statuses.isRemovingCoupon;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Customer from './customer';\nimport CustomerState from './customer-state';\n\n@selector\nexport default class CustomerSelector {\n    constructor(\n        private _customer: CustomerState\n    ) {}\n\n    getCustomer(): Customer | undefined {\n        return this._customer.data;\n    }\n}\n","import CustomerStrategyState from './customer-strategy-state';\n\nexport default class CustomerStrategySelector {\n    constructor(\n        private _customerStrategies: CustomerStrategyState\n    ) {}\n\n    getSignInError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.signInMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.signInError;\n    }\n\n    getSignOutError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.signOutMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.signOutError;\n    }\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.initializeError;\n    }\n\n    getWidgetInteractionError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.widgetInteractionMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.widgetInteractionError;\n    }\n\n    isSigningIn(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.signInMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isSigningIn;\n    }\n\n    isSigningOut(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.signOutMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isSigningOut;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isInitializing;\n    }\n\n    isInitialized(methodId: string): boolean {\n        return !!(\n            this._customerStrategies.data[methodId] &&\n            this._customerStrategies.data[methodId].isInitialized\n        );\n    }\n\n    isWidgetInteracting(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.widgetInteractionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isWidgetInteracting;\n    }}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\nimport { selector } from '../common/selector';\n\nimport GiftCertificate from './gift-certificate';\nimport GiftCertificateState from './gift-certificate-state';\n\n@selector\nexport default class GiftCertificateSelector {\n    constructor(\n        private _giftCertificate: GiftCertificateState\n    ) {}\n\n    getGiftCertificates(): GiftCertificate[] | undefined {\n        return this._giftCertificate.data;\n    }\n\n    getRemoveError(): RequestError<StorefrontErrorResponseBody> | undefined {\n        return this._giftCertificate.errors.removeGiftCertificateError;\n    }\n\n    getApplyError(): RequestError<StorefrontErrorResponseBody> | undefined {\n        return this._giftCertificate.errors.applyGiftCertificateError;\n    }\n\n    isApplying(): boolean {\n        return !!this._giftCertificate.statuses.isApplyingGiftCertificate;\n    }\n\n    isRemoving(): boolean {\n        return !!this._giftCertificate.statuses.isRemovingGiftCertificate;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport { Address } from '../address';\n\nimport ConsignmentState from './consignment-state';\n\n@selector\nexport default class ShippingAddressSelector {\n    constructor(\n        private _consignments: ConsignmentState\n    ) {}\n\n    getShippingAddress(): Address | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments[0]) {\n            return;\n        }\n\n        return consignments[0].shippingAddress;\n    }\n}\n","import { selector } from '../common/selector';\nimport { Country } from '../geography';\n\nimport ShippingCountryState from './shipping-country-state';\n\n@selector\nexport default class ShippingCountrySelector {\n    constructor(\n        private _shippingCountries: ShippingCountryState\n    ) {}\n\n    getShippingCountries(): Country[] | undefined {\n        return this._shippingCountries.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._shippingCountries.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._shippingCountries.statuses.isLoading;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport ShippingStrategyState from './shipping-strategy-state';\n\n@selector\nexport default class ShippingStrategySelector {\n    constructor(\n        private _shippingStrategies: ShippingStrategyState\n    ) {}\n\n    getUpdateAddressError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.updateAddressMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.updateAddressError;\n    }\n\n    getSelectOptionError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.selectOptionMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.selectOptionError;\n    }\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.initializeError;\n    }\n\n    isUpdatingAddress(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.updateAddressMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isUpdatingAddress;\n    }\n\n    isSelectingOption(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.selectOptionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isSelectingOption;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isInitializing;\n    }\n\n    isInitialized(methodId: string): boolean {\n        return !!(\n            this._shippingStrategies.data[methodId] &&\n            this._shippingStrategies.data[methodId].isInitialized\n        );\n    }\n}\n","import { find } from 'lodash';\n\nimport { isAddressEqual, AddressRequestBody } from '../address';\nimport { CartSelector, PhysicalItem } from '../cart';\nimport { selector } from '../common/selector';\n\nimport Consignment from './consignment';\nimport ConsignmentState from './consignment-state';\nimport ShippingOption from './shipping-option';\n\n@selector\nexport default class ConsignmentSelector {\n    constructor(\n        private _consignments: ConsignmentState,\n        private _cart: CartSelector\n    ) {}\n\n    getConsignments(): Consignment[] | undefined {\n        return this._consignments.data;\n    }\n\n    getConsignmentById(id: string): Consignment | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return find(consignments, { id });\n    }\n\n    getConsignmentByAddress(address: AddressRequestBody): Consignment | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return find(consignments, consignment =>\n            isAddressEqual(consignment.shippingAddress, address)\n        );\n    }\n\n    getShippingOption(): ShippingOption | undefined {\n        const consignments = this._consignments.data;\n\n        if (consignments && consignments.length) {\n            return consignments[0].selectedShippingOption;\n        }\n    }\n\n    getLoadError(): Error | undefined {\n        return this._consignments.errors.loadError;\n    }\n\n    getCreateError(): Error | undefined {\n        return this._consignments.errors.createError;\n    }\n\n    getLoadShippingOptionsError(): Error | undefined {\n        return this._consignments.errors.loadShippingOptionsError;\n    }\n\n    getUnassignedItems(): PhysicalItem[] {\n        const cart = this._cart.getCart();\n\n        if (!cart) {\n            return [];\n        }\n\n        const assignedLineItemIds = (this.getConsignments() || []).reduce(\n            (itemIds, consignment) => itemIds.concat(consignment.lineItemIds),\n            [] as string[]\n        );\n\n        return (cart.lineItems.physicalItems || []).filter(\n            item => assignedLineItemIds.indexOf(item.id as string) < 0\n        );\n    }\n\n    getUpdateError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.updateError[consignmentId];\n        }\n\n        return find(this._consignments.errors.updateError);\n    }\n\n    getDeleteError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.deleteError[consignmentId];\n        }\n\n        return find(this._consignments.errors.deleteError);\n    }\n\n    getItemAssignmentError(address: AddressRequestBody): Error | undefined {\n        const consignment = this.getConsignmentByAddress(address);\n\n        return consignment ? this.getUpdateError(consignment.id) : this.getCreateError();\n    }\n\n    getUpdateShippingOptionError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.updateShippingOptionError[consignmentId];\n        }\n\n        return find(this._consignments.errors.updateShippingOptionError);\n    }\n\n    isLoading(): boolean {\n        return this._consignments.statuses.isLoading === true;\n    }\n\n    isLoadingShippingOptions(): boolean {\n        return this._consignments.statuses.isLoadingShippingOptions === true;\n    }\n\n    isCreating(): boolean {\n        return this._consignments.statuses.isCreating === true;\n    }\n\n    isUpdating(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isUpdating[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isUpdating) === true;\n    }\n\n    isDeleting(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isDeleting[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isDeleting) === true;\n    }\n\n    isAssigningItems(address: AddressRequestBody): boolean {\n        const consignment = this.getConsignmentByAddress(address);\n\n        return consignment ? this.isUpdating(consignment.id) : this.isCreating();\n    }\n\n    isUpdatingShippingOption(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isUpdatingShippingOption[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isUpdatingShippingOption) === true;\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { selector } from '../common/selector';\nimport { CouponSelector } from '../coupon';\n\nimport Order from './order';\nimport OrderState, { OrderMetaState } from './order-state';\n\n@selector\nexport default class OrderSelector {\n    constructor(\n        private _order: OrderState,\n        private _billingAddress: BillingAddressSelector,\n        private _coupons: CouponSelector\n    ) {}\n\n    getOrder(): Order | undefined {\n        const { data } = this._order;\n        const billingAddress = this._billingAddress.getBillingAddress();\n        const coupons = this._coupons.getCoupons() || [];\n\n        if (!data || !billingAddress) {\n            return;\n        }\n\n        return {\n            ...data,\n            billingAddress,\n            coupons,\n        };\n    }\n\n    getOrderMeta(): OrderMetaState | undefined {\n        return this._order.meta;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._order.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._order.statuses.isLoading;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing/billing-address-actions';\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { CouponAction, CouponActionType } from '../coupon/coupon-actions';\nimport { GiftCertificateAction, GiftCertificateActionType } from '../coupon/gift-certificate-actions';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport Cart from './cart';\nimport CartState, { CartErrorsState, CartStatusesState } from './cart-state';\n\nconst DEFAULT_STATE: CartState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function cartReducer(\n    state: CartState = DEFAULT_STATE,\n    action: Action\n): CartState {\n    const reducer = combineReducers<CartState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Cart | undefined,\n    action: BillingAddressAction | CheckoutAction | ConsignmentAction | CouponAction | GiftCertificateAction\n): Cart | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload ? { ...data, ...action.payload.cart } : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CartStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction\n): CartStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n\nfunction errorsReducer(\n    errors: CartErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction\n): CartErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { CouponAction, CouponActionType } from '../coupon';\nimport { CustomerAction, CustomerActionType } from '../customer';\n\nimport Consignment from './consignment';\nimport { ConsignmentAction, ConsignmentActionType } from './consignment-actions';\nimport ConsignmentState, { ConsignmentErrorsState, ConsignmentStatusesState } from './consignment-state';\n\nconst DEFAULT_STATE: ConsignmentState = {\n    errors: {\n        updateShippingOptionError: {},\n        updateError: {},\n        deleteError: {},\n    },\n    statuses: {\n        isUpdating: {},\n        isUpdatingShippingOption: {},\n        isDeleting: {},\n    },\n};\n\nexport default function consignmentReducer(\n    state: ConsignmentState = DEFAULT_STATE,\n    action: Action\n): ConsignmentState {\n    const reducer = combineReducers<ConsignmentState, ConsignmentAction | CheckoutAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Consignment[] | undefined,\n    action: ConsignmentAction | CheckoutAction | CouponAction | CustomerAction\n): Consignment[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n        return action.payload ? action.payload.consignments : data;\n\n    case CustomerActionType.SignOutCustomerSucceeded:\n        return [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConsignmentErrorsState = DEFAULT_STATE.errors,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return { ...errors, loadError: action.payload };\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n        return { ...errors, createError: undefined };\n\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return { ...errors, createError: action.payload };\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            errors.updateError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            errors.updateError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            errors.deleteError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            errors.deleteError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        if (action.meta) {\n            errors.updateShippingOptionError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            errors.updateShippingOptionError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConsignmentStatusesState = DEFAULT_STATE.statuses,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return { ...statuses, isLoadingShippingOptions: true };\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...statuses, isLoading: false };\n\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return { ...statuses, isLoadingShippingOptions: false };\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n        return { ...statuses, isCreating: true };\n\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return { ...statuses, isCreating: false };\n\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            statuses.isUpdating[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            statuses.isUpdating[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            statuses.isDeleting[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            statuses.isDeleting[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n        if (action.meta) {\n            statuses.isUpdatingShippingOption[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            statuses.isUpdatingShippingOption[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport Coupon from './coupon';\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport CouponState, { CouponErrorsState, CouponStatusesState } from './coupon-state';\n\nconst DEFAULT_STATE: CouponState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function couponReducer(\n    state: CouponState = DEFAULT_STATE,\n    action: Action\n): CouponState {\n    const reducer = combineReducers<CouponState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Coupon[] | undefined,\n    action: CouponAction | CheckoutAction | OrderAction\n): Coupon[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return action.payload ? action.payload.coupons : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CouponErrorsState = {},\n    action: CouponAction\n): CouponErrorsState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n    case CouponActionType.ApplyCouponSucceeded:\n        return { ...errors, applyCouponError: undefined };\n\n    case CouponActionType.ApplyCouponFailed:\n        return { ...errors, applyCouponError: action.payload };\n\n    case CouponActionType.RemoveCouponRequested:\n    case CouponActionType.RemoveCouponSucceeded:\n        return { ...errors, removeCouponError: undefined };\n\n    case CouponActionType.RemoveCouponFailed:\n        return { ...errors, removeCouponError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CouponStatusesState = {},\n    action: CouponAction\n): CouponStatusesState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n        return { ...statuses, isApplyingCoupon: true };\n\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.ApplyCouponFailed:\n        return { ...statuses, isApplyingCoupon: false };\n\n    case CouponActionType.RemoveCouponRequested:\n        return { ...statuses, isRemovingCoupon: true };\n\n    case CouponActionType.RemoveCouponSucceeded:\n    case CouponActionType.RemoveCouponFailed:\n        return { ...statuses, isRemovingCoupon: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\n\nimport Customer from './customer';\nimport CustomerState from './customer-state';\n\nconst DEFAULT_STATE: CustomerState = {};\n\nexport default function customerReducer(\n    state: CustomerState = DEFAULT_STATE,\n    action: CheckoutAction\n): CustomerState {\n    const reducer = combineReducers<CustomerState, CheckoutAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Customer | undefined,\n    action: CheckoutAction\n): Customer | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return action.payload ? { ...data, ...action.payload.customer } : data;\n\n    default:\n        return data;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport GiftCertificate from './gift-certificate';\nimport { GiftCertificateAction, GiftCertificateActionType } from './gift-certificate-actions';\nimport GiftCertificateState, { GiftCertificateErrorsState, GiftCertificateStatusesState } from './gift-certificate-state';\n\nconst DEFAULT_STATE: GiftCertificateState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function giftCertificateReducer(\n    state: GiftCertificateState = DEFAULT_STATE,\n    action: Action\n): GiftCertificateState {\n    const reducer = combineReducers<GiftCertificateState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: GiftCertificate[] | undefined,\n    action: CheckoutAction | GiftCertificateAction | ConsignmentAction | CouponAction\n): GiftCertificate[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload ? action.payload.giftCertificates : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: GiftCertificateErrorsState = DEFAULT_STATE.errors,\n    action: GiftCertificateAction\n): GiftCertificateErrorsState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        return { ...errors, applyGiftCertificateError: undefined };\n\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return { ...errors, applyGiftCertificateError: action.payload };\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return { ...errors, removeGiftCertificateError: undefined };\n\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return { ...errors, removeGiftCertificateError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: GiftCertificateStatusesState = DEFAULT_STATE.statuses,\n    action: GiftCertificateAction\n): GiftCertificateStatusesState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n        return { ...statuses, isApplyingGiftCertificate: true };\n\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return { ...statuses, isApplyingGiftCertificate: false };\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n        return { ...statuses, isRemovingGiftCertificate: true };\n\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return { ...statuses, isRemovingGiftCertificate: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport { OrderAction, OrderActionType } from './order-actions';\nimport OrderState, { OrderDataState, OrderErrorsState, OrderMetaState, OrderStatusesState } from './order-state';\n\nconst DEFAULT_STATE: OrderState = {\n    errors: {},\n    meta: {},\n    statuses: {},\n};\n\nexport default function orderReducer(\n    state: OrderState = DEFAULT_STATE,\n    action: Action\n): OrderState {\n    const reducer = combineReducers<OrderState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: OrderDataState | undefined,\n    action: OrderAction\n): OrderDataState | undefined {\n    switch (action.type) {\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n        return action.payload\n            ? omit({ ...data, ...action.payload }, ['billingAddress', 'coupons'])\n            : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: OrderMetaState | undefined,\n    action: OrderAction\n): OrderMetaState | undefined {\n    switch (action.type) {\n    case OrderActionType.FinalizeOrderSucceeded:\n    case OrderActionType.SubmitOrderSucceeded:\n        return action.payload ? {\n            ...meta,\n            ...action.meta,\n            callbackUrl: action.payload.order.callbackUrl,\n            orderToken: action.payload.order.token,\n            payment: action.payload.order && action.payload.order.payment,\n        } : meta;\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: OrderErrorsState = DEFAULT_STATE.errors,\n    action: OrderAction\n): OrderErrorsState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return { ...errors, loadError: undefined };\n\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: OrderStatusesState = DEFAULT_STATE.statuses,\n    action: OrderAction\n): OrderStatusesState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return { ...statuses, isLoading: true };\n\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { assign, findIndex, isPlainObject, pickBy } from 'lodash';\n\nimport { PartialDeep } from '../types';\n\n/**\n * Push an item to an array if it doesn't exist in the array. Otherwise, merge\n * with the existing item in the array. This function always returns a new array.\n */\nexport default function mergeOrPush<T>(\n    array: T[],\n    item: T,\n    predicate: ((item: T) => boolean) | PartialDeep<T>\n): T[] {\n    const index = findIndex(array, typeof predicate === 'object' ? pickBy(predicate) : predicate);\n    const newArray = [...array];\n\n    if (index === -1) {\n        newArray.push(item);\n    } else {\n        newArray[index] = isPlainObject(item) ? assign({}, array[index], item) : item;\n    }\n\n    return newArray;\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { Country } from '../geography';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryState, { ShippingCountryErrorsState, ShippingCountryStatusesState } from './shipping-country-state';\n\nconst DEFAULT_STATE: ShippingCountryState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function shippingCountryReducer(\n    state: ShippingCountryState = DEFAULT_STATE,\n    action: Action\n): ShippingCountryState {\n    const reducer = combineReducers<ShippingCountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadShippingCountriesAction\n): Country[] | undefined {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return action.payload || [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ShippingCountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadShippingCountriesAction\n): ShippingCountryErrorsState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingCountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadShippingCountriesAction\n): ShippingCountryStatusesState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n        return { ...statuses, isLoading: true };\n\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { mapToInternalAddress } from '../address';\nimport { BillingAddress } from '../billing';\n\nimport { Customer } from '.';\nimport InternalCustomer from './internal-customer';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCustomer(customer: Customer, billingAddress: BillingAddress): InternalCustomer {\n    const firstName = customer.firstName || billingAddress.firstName || '';\n    const lastName = customer.lastName || billingAddress.lastName || '';\n\n    return {\n        addresses: (customer.addresses || []).map(address => mapToInternalAddress(address)),\n        customerId: customer.id,\n        isGuest: customer.isGuest,\n        storeCredit: customer.storeCredit,\n        email: customer.email || billingAddress.email || '',\n        firstName,\n        lastName,\n        name: customer.fullName || [firstName, lastName].join(' '),\n    };\n}\n","import GiftCertificate from './gift-certificate';\nimport InternalGiftCertificate from './internal-gift-certificate';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalGiftCertificate(giftCertificate: GiftCertificate): InternalGiftCertificate {\n    return {\n        code: giftCertificate.code,\n        discountedAmount: giftCertificate.used,\n        remainingBalance: giftCertificate.remaining,\n        giftCertificate: {\n            balance: giftCertificate.balance,\n            code: giftCertificate.code,\n            purchaseDate: giftCertificate.purchaseDate,\n        },\n    };\n}\n","import { filter, find, keyBy, reduce } from 'lodash';\n\nimport { AmountTransformer, LineItem } from '../cart';\nimport { mapToInternalLineItems } from '../cart';\nimport { Checkout } from '../checkout';\nimport { mapToInternalCoupon } from '../coupon';\nimport { HOSTED } from '../payment';\n\nimport InternalOrder, { InternalGiftCertificateList, InternalIncompleteOrder, InternalOrderPayment, InternalSocialDataList } from './internal-order';\nimport Order, { GatewayOrderPayment, GiftCertificateOrderPayment, OrderPayment, OrderPayments } from './order';\nimport { OrderMetaState } from './order-state';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalOrder(order: Order, orderMeta: OrderMetaState = {}): InternalOrder {\n    const decimalPlaces = order.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: order.orderId,\n        items: mapToInternalLineItems(order.lineItems, order.currency.decimalPlaces, 'productId'),\n        orderId: order.orderId,\n        currency: order.currency.code,\n        customerCanBeCreated: order.customerCanBeCreated,\n        payment: mapToInteralOrderPayment(order.payments, orderMeta.payment),\n        subtotal: {\n            amount: order.baseAmount,\n            integerAmount: amountTransformer.toInteger(order.baseAmount),\n        },\n        coupon: {\n            discountedAmount: reduce(order.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: order.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: order.discountAmount,\n            integerAmount: amountTransformer.toInteger(order.discountAmount),\n        },\n        token: orderMeta.orderToken,\n        callbackUrl: orderMeta.callbackUrl,\n        discountNotifications: [],\n        giftCertificate: mapToGiftCertificates(order.payments),\n        socialData: mapToInternalSocialDataList(order),\n        status: order.status,\n        hasDigitalItems: order.hasDigitalItems,\n        isDownloadable: order.isDownloadable,\n        isComplete: order.isComplete,\n        shipping: {\n            amount: order.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.shippingCostTotal),\n            amountBeforeDiscount: order.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(order.shippingCostBeforeDiscount),\n        },\n        storeCredit: {\n            amount: mapToStoreCredit(order.payments),\n        },\n        taxes: order.taxes,\n        taxTotal: {\n            amount: order.taxTotal,\n            integerAmount: amountTransformer.toInteger(order.taxTotal),\n        },\n        handling: {\n            amount: order.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: order.orderAmount,\n            integerAmount: order.orderAmountAsInteger,\n        },\n    };\n}\n\nexport function mapToInternalIncompleteOrder(checkout: Checkout): InternalIncompleteOrder {\n    const payment = find(checkout.payments, { providerType: HOSTED });\n\n    return {\n        orderId: null,\n        isComplete: false,\n        payment: !payment ? {} : {\n            id: payment.providerId,\n            gateway: payment.gatewayId,\n            status: mapToInternalPaymentStatus(payment.detail.step),\n        },\n    };\n}\n\nfunction mapToInternalPaymentStatus(status: string): string {\n    return `PAYMENT_STATUS_${status}`;\n}\n\nfunction mapToStoreCredit(payments?: OrderPayments): number {\n    const item = find(payments, { providerId: 'storecredit' });\n\n    return item ? item.amount : 0;\n}\n\nfunction mapToGiftCertificates(payments?: OrderPayments): InternalGiftCertificateList {\n    const items = filter(payments, { providerId: 'giftcertificate' }) as GiftCertificateOrderPayment[];\n\n    return {\n        totalDiscountedAmount: reduce(items, (sum, item) => item.amount + sum, 0),\n        appliedGiftCertificates: keyBy(items.map(item => ({\n            code: item.detail.code,\n            discountedAmount: item.amount,\n            remainingBalance: item.detail.remaining,\n            giftCertificate: {\n                balance: item.amount + item.detail.remaining,\n                code: item.detail.code,\n                purchaseDate: '',\n            },\n        })), 'code'),\n    };\n}\n\nfunction mapToInteralOrderPayment(payments?: OrderPayments, payment: InternalOrderPayment = {}): InternalOrderPayment {\n    const item = find(payments, isDefaultOrderPayment) as GatewayOrderPayment;\n\n    if (!item) {\n        return {};\n    }\n\n    return {\n        id: item.providerId,\n        status: mapToInternalPaymentStatus(item.detail.step),\n        helpText: item.detail.instructions,\n        returnUrl: payment.returnUrl,\n    };\n}\n\nfunction isDefaultOrderPayment(payment: OrderPayment): payment is GatewayOrderPayment {\n    return payment.providerId !== 'giftcertificate' && payment.providerId !== 'storecredit';\n}\n\nfunction mapToInternalSocialDataList(order: Order): { [itemId: string]: InternalSocialDataList } | undefined {\n    const socialDataObject: { [itemId: string]: InternalSocialDataList } = {};\n    const items = [\n        ...order.lineItems.physicalItems,\n        ...order.lineItems.digitalItems,\n    ];\n\n    items.forEach(item => {\n        socialDataObject[item.id] = mapToInternalSocialData(item);\n    });\n\n    return socialDataObject;\n}\n\nfunction mapToInternalSocialData(lineItem: LineItem): InternalSocialDataList {\n    const codes = ['fb', 'tw', 'gp'];\n\n    return codes.reduce((socialData, code) => {\n        const item = lineItem.socialMedia && lineItem.socialMedia.find(item => item.code === code);\n\n        if (!item) {\n            return socialData;\n        }\n\n        socialData[code] = {\n            name: lineItem.name,\n            description: lineItem.name,\n            image: lineItem.imageUrl,\n            url: item.link,\n            shareText: item.text,\n            sharingLink: item.link,\n            channelName: item.channel,\n            channelCode: item.code,\n        };\n\n        return socialData;\n    }, {} as InternalSocialDataList);\n}\n","export default interface CustomerStrategyState {\n    data: CustomerStrategyDataState;\n    errors: CustomerStrategyErrorsState;\n    statuses: CustomerStrategyStatusesState;\n}\n\nexport interface CustomerStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean,\n    };\n}\n\nexport interface CustomerStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    signInError?: Error;\n    signInMethodId?: string;\n    signOutError?: Error;\n    signOutMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface CustomerStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isSigningIn?: boolean;\n    isSigningOut?: boolean;\n    signInMethodId?: string;\n    signOutMethodId?: string;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: CustomerStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport { CustomerStrategyAction, CustomerStrategyActionType } from './customer-strategy-actions';\nimport CustomerStrategyState, { CustomerStrategyDataState, CustomerStrategyErrorsState, CustomerStrategyStatusesState, DEFAULT_STATE } from './customer-strategy-state';\n\nexport default function customerStrategyReducer(\n    state: CustomerStrategyState = DEFAULT_STATE,\n    action: Action\n): CustomerStrategyState {\n    const reducer = combineReducers<CustomerStrategyState, CustomerStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CustomerStrategyDataState = DEFAULT_STATE.data,\n    action: CustomerStrategyAction\n): CustomerStrategyDataState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        };\n\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        };\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CustomerStrategyErrorsState = DEFAULT_STATE.errors,\n    action: CustomerStrategyAction\n): CustomerStrategyErrorsState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignInRequested:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return {\n            ...errors,\n            signInError: undefined,\n            signInMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignInFailed:\n        return {\n            ...errors,\n            signInError: action.payload,\n            signInMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignOutRequested:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return {\n            ...errors,\n            signOutError: undefined,\n            signOutMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignOutFailed:\n        return {\n            ...errors,\n            signOutError: action.payload,\n            signOutMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n        return {\n            ...errors,\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n        return {\n            ...errors,\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CustomerStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: CustomerStrategyAction\n): CustomerStrategyStatusesState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.InitializeFailed:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignInRequested:\n        return {\n            ...statuses,\n            isSigningIn: true,\n            signInMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignInFailed:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return {\n            ...statuses,\n            isSigningIn: false,\n            signInMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignOutRequested:\n        return {\n            ...statuses,\n            isSigningOut: true,\n            signOutMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignOutFailed:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return {\n            ...statuses,\n            isSigningOut: false,\n            signOutMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n        return {\n            ...statuses,\n            isWidgetInteracting: true,\n            widgetInteractionMethodId: action.meta.methodId,\n         };\n\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n         return {\n            ...statuses,\n            isWidgetInteracting: false,\n            widgetInteractionMethodId: undefined,\n         };\n\n    default:\n        return statuses;\n    }\n}\n","export default interface ShippingStrategyState {\n    data: ShippingStrategyDataState;\n    errors: ShippingStrategyErrorsState;\n    statuses: ShippingStrategyStatusesState;\n}\n\nexport interface ShippingStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean,\n    };\n}\n\nexport interface ShippingStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    updateAddressError?: Error;\n    updateAddressMethodId?: string;\n    selectOptionError?: Error;\n    selectOptionMethodId?: string;\n}\n\nexport interface ShippingStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isUpdatingAddress?: boolean;\n    isSelectingOption?: boolean;\n    updateAddressMethodId?: string;\n    selectOptionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: ShippingStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport { ShippingStrategyAction, ShippingStrategyActionType } from './shipping-strategy-actions';\nimport ShippingStrategyState, { DEFAULT_STATE, ShippingStrategyDataState, ShippingStrategyErrorsState, ShippingStrategyStatusesState } from './shipping-strategy-state';\n\nexport default function shippingStrategyReducer(\n    state: ShippingStrategyState = DEFAULT_STATE,\n    action: Action\n): ShippingStrategyState {\n    const reducer = combineReducers<ShippingStrategyState, ShippingStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: ShippingStrategyDataState = DEFAULT_STATE.data,\n    action: ShippingStrategyAction\n): ShippingStrategyDataState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        };\n\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        };\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: ShippingStrategyErrorsState = DEFAULT_STATE.errors,\n    action: ShippingStrategyAction\n): ShippingStrategyErrorsState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return {\n            ...errors,\n            updateAddressError: undefined,\n            updateAddressMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n        return {\n            ...errors,\n            updateAddressError: action.payload,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return {\n            ...errors,\n            selectOptionError: undefined,\n            selectOptionMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n        return {\n            ...errors,\n            selectOptionError: action.payload,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: ShippingStrategyAction\n): ShippingStrategyStatusesState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.InitializeFailed:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n        return {\n            ...statuses,\n            isUpdatingAddress: true,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return {\n            ...statuses,\n            isUpdatingAddress: false,\n            updateAddressMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n        return {\n            ...statuses,\n            isSelectingOption: true,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return {\n            ...statuses,\n            isSelectingOption: false,\n            selectOptionMethodId: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","export default function getCallbackUrl(origin: string): string {\n    return `${window.location.origin}/checkout.php?action=set_external_checkout&provider=masterpass&gateway=stripe&origin=${origin}`;\n}\n","import isPrivate from './is-private';\nimport omitDeep from './omit-deep';\n\nexport default function omitPrivate(object: any): any {\n    return omitDeep(object, (value: any, key: string) => isPrivate(key));\n}\n","export default function getEnvironment(): string {\n    try {\n        return process.env.NODE_ENV || 'development';\n    } catch (e) {\n        return 'development';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { InternalOrderResponseBody } from './internal-order-responses';\nimport Order from './order';\n\nexport default class OrderRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadOrder(orderId: number, { timeout }: RequestOptions = {}): Promise<Response<Order>> {\n        const url = `/api/storefront/orders/${orderId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n        const params = {\n            include: [\n                'payments',\n                'lineItems.physicalItems.socialMedia',\n                'lineItems.physicalItems.options',\n                'lineItems.digitalItems.socialMedia',\n                'lineItems.digitalItems.options',\n            ].join(','),\n        };\n\n        return this._requestSender.get(url, {\n            params,\n            headers,\n            timeout,\n        });\n    }\n\n    submitOrder(body: InternalOrderRequestBody, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = '/internalapi/v1/checkout/order';\n\n        return this._requestSender.post(url, { body, timeout });\n    }\n\n    finalizeOrder(orderId: number, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = `/internalapi/v1/checkout/order/${orderId}`;\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, from, of, Observable, Observer } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutValidator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { FinalizeOrderAction, LoadOrderAction, LoadOrderPaymentsAction, OrderActionType, SubmitOrderAction } from './order-actions';\nimport OrderRequestBody from './order-request-body';\nimport OrderRequestSender from './order-request-sender';\n\nexport default class OrderActionCreator {\n    constructor(\n        private _orderRequestSender: OrderRequestSender,\n        private _checkoutValidator: CheckoutValidator\n    ) {}\n\n    loadOrder(orderId: number, options?: RequestOptions): Observable<LoadOrderAction> {\n        return new Observable((observer: Observer<LoadOrderAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderFailed, response));\n                });\n        });\n    }\n\n    // TODO: Remove when checkout does not contain unrelated order data.\n    loadOrderPayments(orderId: number, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        return new Observable((observer: Observer<LoadOrderPaymentsAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderPaymentsRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderPaymentsSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderPaymentsFailed, response));\n                });\n        });\n    }\n\n    loadCurrentOrder(options?: RequestOptions): ThunkAction<LoadOrderAction, InternalCheckoutSelectors> {\n        return store => defer(() => {\n            const orderId = this._getCurrentOrderId(store.getState());\n\n            if (!orderId) {\n                throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n            }\n\n            return this.loadOrder(orderId, options);\n        });\n    }\n\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<SubmitOrderAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(OrderActionType.SubmitOrderRequested)),\n            defer(() => {\n                const state = store.getState();\n                const externalSource = state.config.getExternalSource();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                return from(\n                    this._checkoutValidator.validate(checkout, options)\n                        .then(() => this._orderRequestSender.submitOrder(this._mapToOrderRequestBody(payload, checkout.customerMessage, externalSource), options))\n                ).pipe(\n                    switchMap(response => concat(\n                        // TODO: Remove once we can submit orders using storefront API\n                        this.loadOrder(response.body.data.order.orderId, options),\n                        of(createAction(OrderActionType.SubmitOrderSucceeded, response.body.data, { ...response.body.meta, token: response.headers.token }))\n                    ))\n                );\n            }).pipe(\n                catchError(error => throwErrorAction(OrderActionType.SubmitOrderFailed, error))\n            )\n        );\n    }\n\n    finalizeOrder(orderId: number, options?: RequestOptions): Observable<FinalizeOrderAction | LoadOrderAction> {\n        return concat(\n            of(createAction(OrderActionType.FinalizeOrderRequested)),\n            from(this._orderRequestSender.finalizeOrder(orderId, options))\n                .pipe(\n                    switchMap(response => concat(\n                        this.loadOrder(orderId, options),\n                        of(createAction(OrderActionType.FinalizeOrderSucceeded, response.body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(OrderActionType.FinalizeOrderFailed, error))\n        );\n    }\n\n    private _getCurrentOrderId(state: InternalCheckoutSelectors): number | undefined {\n        const order = state.order.getOrder();\n        const checkout = state.checkout.getCheckout();\n\n        return (order && order.orderId) || (checkout && checkout.orderId);\n    }\n\n    private _mapToOrderRequestBody(payload: OrderRequestBody, customerMessage: string, externalSource?: string): InternalOrderRequestBody {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            return {\n                ...order,\n                customerMessage,\n                externalSource,\n            };\n        }\n\n        return {\n            ...order,\n            customerMessage,\n            externalSource,\n            payment: {\n                paymentData: payment.paymentData,\n                name: payment.methodId,\n                gateway: payment.gatewayId,\n            },\n        };\n    }\n}\n","import { isEqual } from 'lodash';\n\nimport { PartialDeep } from '../common/types';\n\nimport Cart from './cart';\n\nexport default class CartComparator {\n    isEqual(cartA: Cart, cartB: Cart): boolean {\n        return isEqual(\n            this._normalize(cartA),\n            this._normalize(cartB)\n        );\n    }\n\n    private _normalize(cart: Cart): PartialDeep<Cart> {\n        return {\n            cartAmount: cart.cartAmount,\n            currency: cart.currency,\n            id: cart.id,\n            lineItems: {\n                digitalItems: cart.lineItems.digitalItems\n                    .slice()\n                    .sort((itemA, itemB) =>\n                        `${itemA.productId}${itemA.variantId}`.localeCompare(`${itemB.productId}${itemB.variantId}`)\n                    )\n                    .map(item => ({\n                        extendedSalePrice: item.extendedSalePrice,\n                        productId: item.productId,\n                        quantity: item.quantity,\n                        variantId: item.variantId,\n                    })),\n                giftCertificates: cart.lineItems.giftCertificates\n                    .slice()\n                    .sort((itemA, itemB) => `${itemA.id}`.localeCompare(`${itemB.id}`))\n                    .map(item => ({\n                        amount: item.amount,\n                        recipient: item.recipient,\n                    })),\n                physicalItems: cart.lineItems.physicalItems\n                    .slice()\n                    .sort((itemA, itemB) =>\n                        `${itemA.productId}${itemA.variantId}`.localeCompare(`${itemB.productId}${itemB.variantId}`)\n                    )\n                    .map(item => ({\n                        extendedSalePrice: item.extendedSalePrice,\n                        productId: item.productId,\n                        quantity: item.quantity,\n                        variantId: item.variantId,\n                        giftWrapping: item.giftWrapping,\n                    })),\n            },\n        };\n    }\n}\n","export default function toSingleLine(input?: string) {\n    if (!input) {\n        return '';\n    }\n\n    return input.split(/(?:\\r\\n|\\n|\\r)/)\n        .map(line => line.replace(/^\\s+/gm, ''))\n        .join(' ')\n        .trim();\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ApplyCouponAction, CouponAction, CouponActionType, RemoveCouponAction } from './coupon-actions';\nimport CouponRequestSender from './coupon-request-sender';\n\nexport default class CouponActionCreator {\n    constructor(\n        private _couponRequestSender: CouponRequestSender\n    ) {}\n\n    applyCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.ApplyCouponRequested));\n\n            this._couponRequestSender.applyCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.ApplyCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.ApplyCouponFailed, response));\n                });\n        });\n    }\n\n    removeCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.RemoveCouponRequested));\n\n            this._couponRequestSender.removeCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.RemoveCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.RemoveCouponFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CheckoutIncludes, CHECKOUT_DEFAULT_INCLUDES } from '../checkout';\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nexport default class CouponRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    CheckoutIncludes.AvailableShippingOptions,\n                ]),\n            },\n            body: { couponCode },\n        });\n    }\n\n    removeCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons/${couponCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    CheckoutIncludes.AvailableShippingOptions,\n                ]),\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable ,  Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { GiftCertificateRequestSender } from '.';\nimport { ApplyGiftCertificateAction, GiftCertificateActionType, RemoveGiftCertificateAction } from './gift-certificate-actions';\n\nexport default class GiftCertificateActionCreator {\n    constructor(\n        private _giftCertificateRequestSender: GiftCertificateRequestSender\n    ) {}\n\n    applyGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<ApplyGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.applyGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.ApplyGiftCertificateFailed, response));\n                });\n        });\n    }\n\n    removeGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<RemoveGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.removeGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.RemoveGiftCertificateFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CHECKOUT_DEFAULT_INCLUDES } from '../checkout';\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nexport default class GiftCertificateRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n            body: { giftCertificateCode },\n        });\n    }\n\n    removeGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates/${giftCertificateCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n        });\n    }\n}\n","export default class CancellablePromise<T> {\n    promise: Promise<T>;\n    cancel!: (reason?: any) => void;\n\n    constructor(promise: Promise<T>) {\n        const cancellable = new Promise<T>((resolve, reject) => {\n            this.cancel = reject;\n        });\n\n        this.promise = Promise.race([promise, cancellable]);\n    }\n}\n","import { isEqual } from 'lodash';\n\nimport { omitPrivate } from '../common/utility';\n\nimport InternalAddress from './internal-address';\n\nexport default function isInternalAddressEqual(addressA: Partial<InternalAddress>, addressB: Partial<InternalAddress>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<InternalAddress>): Partial<InternalAddress> {\n    const ignoredKeys = ['id', 'provinceCode'];\n\n    return (Object.keys(omitPrivate(address) || {}) as Array<keyof InternalAddress>)\n        .reduce(\n            (result, key) => ignoredKeys.indexOf(key) === -1 && address[key] ?\n                { ...result, [key]: address[key] } :\n                result,\n            {}\n        );\n}\n","import { BillingAddress } from '../billing';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\nexport default function mapFromInternalAddress(address: InternalAddress): Address | BillingAddress {\n    return {\n        id: address.id,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.addressLine1,\n        address2: address.addressLine2,\n        city: address.city,\n        stateOrProvince: address.province,\n        stateOrProvinceCode: address.provinceCode,\n        postalCode: address.postCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryRequestSender from './shipping-country-request-sender';\n\nexport default class ShippingCountryActionCreator {\n    constructor(\n        private _shippingCountryRequestSender: ShippingCountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<LoadShippingCountriesAction> {\n        return Observable.create((observer: Observer<LoadShippingCountriesAction>) => {\n            observer.next(createAction(ShippingCountryActionType.LoadShippingCountriesRequested));\n\n            this._shippingCountryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(ShippingCountryActionType.LoadShippingCountriesSucceeded, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ShippingCountryActionType.LoadShippingCountriesFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\nimport { CountryResponseBody } from '../geography';\n\nexport default class ShippingCountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/shipping/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { Registry } from '../common/registry';\n\nimport { ShippingInitializeOptions, ShippingRequestOptions } from './shipping-request-options';\nimport {\n    ShippingStrategyActionType,\n    ShippingStrategyDeinitializeAction,\n    ShippingStrategyInitializeAction,\n    ShippingStrategySelectOptionAction,\n    ShippingStrategyUpdateAddressAction,\n} from './shipping-strategy-actions';\nimport { ShippingStrategy } from './strategies';\n\nexport default class ShippingStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<ShippingStrategy>\n    ) {}\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): ThunkAction<ShippingStrategyUpdateAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyUpdateAddressAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .updateAddress(address, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId }));\n                });\n        });\n    }\n\n    selectOption(shippingOptionId: string, options?: ShippingRequestOptions): ThunkAction<ShippingStrategySelectOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategySelectOptionAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.SelectOptionRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .selectOption(shippingOptionId, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.SelectOptionSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.SelectOptionFailed, error, { methodId }));\n                });\n        });\n    }\n\n    initialize(options?: ShippingInitializeOptions): ThunkAction<ShippingStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyInitializeAction>) => {\n            const state = store.getState();\n            const payment = state.payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n            const mergedOptions = { ...options, methodId };\n\n            if (methodId && state.shippingStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(ShippingStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(mergedOptions)\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options?: ShippingRequestOptions): ThunkAction<ShippingStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const payment = state.payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            if (methodId && !state.shippingStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(ShippingStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize({ ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n}\n","import StandardError from './standard-error';\n\nexport default class NotImplementedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Not implemented.');\n\n        this.type = 'not_implemented';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors} from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { AmazonPayLoginButton, AmazonPayScriptLoader, AmazonPayWindow } from '../../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nimport AmazonPayCustomerInitializeOptions from './amazon-pay-customer-initialize-options';\n\nexport default class AmazonPayCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const { onError = () => {} } = amazonOptions;\n                const onReady = () => {\n                    this._createSignInButton({\n                        ...amazonOptions,\n                        onError: error => {\n                            reject(error);\n                            onError(error);\n                        },\n                    });\n\n                    resolve();\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via AmazonPay, the shopper must click on \"Login with Amazon\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(options: AmazonPayCustomerInitializeOptions): AmazonPayLoginButton {\n        if (!this._paymentMethod || !this._window.OffAmazonPayments) {\n            throw new NotInitializedError(NotInitializedErrorType.CustomerNotInitialized);\n        }\n\n        if (!this._paymentMethod.config.merchantId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { initializationData } = this._paymentMethod;\n\n        return new this._window.OffAmazonPayments.Button(options.container, this._paymentMethod.config.merchantId, {\n            color: options.color || 'Gold',\n            size: options.size || 'small',\n            type: 'PwA',\n            useAmazonAddressBook: true,\n            onError: options.onError,\n            authorization: () => {\n                this._handleAuthorization(initializationData);\n            },\n        });\n    }\n\n    private _handleAuthorization(options: AuthorizationOptions): void {\n        this._remoteCheckoutRequestSender.generateToken()\n            .then(({ body }) => {\n                if (!this._window.amazon) {\n                    throw new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized);\n                }\n\n                this._window.amazon.Login.authorize({\n                    popup: false,\n                    scope: 'payments:shipping_address payments:billing_address payments:widget profile',\n                    state: `${options.tokenPrefix}${body.token}`,\n                }, options.redirectUrl);\n\n                this._remoteCheckoutRequestSender.trackAuthorizationEvent();\n            });\n    }\n}\n\ninterface AuthorizationOptions {\n    redirectUrl: string;\n    tokenPrefix: string;\n}\n","import { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { BraintreeVisaCheckoutPaymentProcessor } from '../../../payment/strategies/braintree';\nimport { VisaCheckoutScriptLoader } from '../../../payment/strategies/braintree';\nimport { VisaCheckoutPaymentSuccessPayload } from '../../../payment/strategies/braintree/visacheckout';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategyActionCreator from '../../customer-strategy-action-creator';\n\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class BraintreeVisaCheckoutCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _buttonClassName: string = 'visa-checkout-wrapper';\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    container,\n                    onError = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: true,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, initOptions]) => {\n                    const signInButton = this._createSignInButton(container, this._buttonClassName);\n\n                    visaCheckout.init(initOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (payment, error) => onError(error));\n\n                    return signInButton;\n                })\n                .then(signInButton => { signInButton.style.visibility = 'visible'; });\n            })\n            .then(() => this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via VisaCheckout, the shopper must click on \"Visa Checkout\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut('braintreevisacheckout', options)\n        );\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(\n            this._customerStrategyActionCreator.widgetInteraction(() => {\n                return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                    paymentSuccessPayload,\n                    state.shippingAddress.getShippingAddress(),\n                    state.billingAddress.getBillingAddress()\n                )\n                .then(() => this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _createSignInButton(containerId: string, buttonClass: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new Error('Need a container to place the button');\n        }\n\n        return (container.querySelector('.' + buttonClass) as HTMLElement) ||\n            this._insertVisaCheckoutButton(container, buttonClass);\n    }\n\n    private _insertVisaCheckoutButton(container: Element, buttonClass: string): HTMLElement {\n        const buttonSource = 'https://secure.checkout.visa.com/wallet-services-web/xo/button.png?acceptCanadianVisaDebit=false&cobrand=true&size=154';\n        const buttonTemplate = `\n            <img\n                alt=\"Visa Checkout\"\n                class=\"v-button\"\n                role=\"button\"\n                src=\"${buttonSource}\"\n                />\n            <a class=\"v-learn v-learn-default\" style=\"text-align: right; display: block; font-size: 10px; color: #003366;\" href=\"#\" data-locale=\"en_US\">Tell Me More</a>`;\n\n        const visaCheckoutButton = document.createElement('div');\n        visaCheckoutButton.style.visibility = 'hidden';\n        visaCheckoutButton.className = buttonClass;\n        visaCheckoutButton.innerHTML = buttonTemplate;\n\n        container.appendChild(visaCheckoutButton);\n\n        return visaCheckoutButton;\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { toFormUrlEncoded } from '../../../common/http-request';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { ChasePayScriptLoader, ChasePaySuccessPayload } from '../../../payment/strategies/chasepay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\n\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class ChasePayCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _requestSender: RequestSender,\n        private _formPoster: FormPoster\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { chasepay: chasePayOptions, methodId } = options;\n\n        if (!chasePayOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.chasepay\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const cart = state.cart.getCart();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.digitalSessionId) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const { container } = chasePayOptions;\n\n                return this._chasePayScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(JPMC => {\n                        const ChasePay = JPMC.ChasePay;\n\n                        ChasePay.configure({\n                            language: storeConfig.storeProfile.storeLanguage,\n                        });\n\n                        if (ChasePay.isChasePayUp) {\n                            ChasePay.insertButtons({\n                                containers: [container],\n                            });\n                        }\n\n                        ChasePay.on(ChasePay.EventType.START_CHECKOUT, () => {\n                            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n                                .then(() => {\n                                    const state = this._store.getState();\n                                    const method = state.paymentMethods.getPaymentMethod(methodId);\n                                    const sessionId = method && method.initializationData && method.initializationData.digitalSessionId;\n\n                                    if (sessionId) {\n                                        ChasePay.startCheckout(sessionId);\n                                    }\n                                });\n                        });\n\n                        ChasePay.on(ChasePay.EventType.COMPLETE_CHECKOUT, (payload: ChasePaySuccessPayload) => {\n                            const state = this._store.getState();\n                            const method = state.paymentMethods.getPaymentMethod(methodId);\n                            const requestId = method && method.initializationData && method.initializationData.merchantRequestId;\n\n                            if (requestId) {\n                                this._setExternalCheckoutData(payload, requestId)\n                                    .then(() => {\n                                        this._reloadPage();\n                                });\n                            }\n                        });\n                    });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Chase Pay®, the shopper must click on \"Chase Pay®\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _setExternalCheckoutData(payload: ChasePaySuccessPayload, requestId: string): Promise<Response> {\n        const url = `checkout.php?provider=chasepay&action=set_external_checkout`;\n        const options = {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: toFormUrlEncoded({\n                sessionToken: payload.sessionToken,\n                merchantRequestId: requestId,\n            }),\n            method: 'post',\n        };\n\n        return this._requestSender.sendRequest(url, options);\n    }\n\n    private _reloadPage() {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            params: {\n                fromChasePay: true,\n            },\n        });\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport CustomerActionCreator from '../../customer-action-creator';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\n\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class DefaultCustomerStrategy implements CustomerStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _customerActionCreator: CustomerActionCreator\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signInCustomer(credentials, options)\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signOutCustomer(options)\n        );\n    }\n\n    initialize(options?: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nimport GooglePayCustomerInitializeOptions from './googlepay-customer-initialize-options';\n\nexport default class GooglePayCustomerStrategy implements CustomerStrategy {\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor,\n        private _formPoster: FormPoster\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId }  = options;\n\n        const googlePayOptions = this._getGooglePayOptions(options);\n\n        if (!methodId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._googlePayPaymentProcessor.initialize(methodId)\n            .then(() => {\n                this._walletButton = this._createSignInButton(googlePayOptions.container);\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Google Pay, the shopper must click on \"Google Pay\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const button = this._googlePayPaymentProcessor.createButton(this._handleWalletButtonClick);\n\n        container.appendChild(button);\n\n        return button;\n    }\n\n    private _getGooglePayOptions(options: CustomerInitializeOptions): GooglePayCustomerInitializeOptions {\n        if (options.methodId === 'googlepaybraintree' && options.googlepaybraintree) {\n            return options.googlepaybraintree;\n        }\n\n        if (options.methodId === 'googlepaystripe' && options.googlepaystripe) {\n            return options.googlepaystripe;\n        }\n\n        throw new InvalidArgumentError();\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n\n    private _onError(error?: Error): void {\n        if (error && error.message !== 'CANCELED') {\n            throw error;\n        }\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        return this._googlePayPaymentProcessor.displayWallet()\n            .then(paymentData => this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => {\n                if (paymentData.shippingAddress) {\n                    this._googlePayPaymentProcessor.updateShippingAddress(paymentData.shippingAddress);\n                }\n            }))\n            .then(() => this._onPaymentSelectComplete())\n            .catch(error => this._onError(error));\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotImplementedError\n} from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { getCallbackUrl, MasterpassScriptLoader } from '../../../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\n\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class MasterpassCustomerStrategy implements CustomerStrategy {\n    private _signInButton?: HTMLElement;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { masterpass: masterpassOptions, methodId } = options;\n\n        if (!masterpassOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.masterpass\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const cart = state.cart.getCart();\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                const { container } = masterpassOptions;\n\n                const payload = {\n                    checkoutId: this._paymentMethod.initializationData.checkoutId,\n                    allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n                    amount: cart.cartAmount.toString(),\n                    currency: cart.currency.code,\n                    cartId: cart.id,\n                    suppressShippingAddress: false,\n                    callbackUrl: getCallbackUrl('checkout'),\n                };\n\n                return this._masterpassScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(Masterpass => {\n                        this._signInButton = this._createSignInButton(container);\n\n                        this._signInButton.addEventListener('click', () => {\n                            Masterpass.checkout(payload);\n                        });\n                    });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        container.appendChild(button);\n\n        return button;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { NotImplementedError} from '../../../common/error/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\n\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class SquareCustomerStrategy implements CustomerStrategy {\n\n    constructor(\n        private _store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    initialize(options?: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport {\n    createBraintreeVisaCheckoutPaymentProcessor,\n    BraintreeScriptLoader,\n    BraintreeSDKCreator,\n    VisaCheckoutScriptLoader\n} from '../payment/strategies/braintree';\nimport { ChasePayScriptLoader } from '../payment/strategies/chasepay';\nimport { createGooglePayPaymentProcessor, GooglePayBraintreeInitializer, GooglePayStripeInitializer } from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport CustomerActionCreator from './customer-action-creator';\nimport CustomerRequestSender from './customer-request-sender';\nimport CustomerStrategyActionCreator from './customer-strategy-action-creator';\nimport { CustomerStrategy } from './strategies';\nimport { AmazonPayCustomerStrategy } from './strategies/amazon';\nimport { BraintreeVisaCheckoutCustomerStrategy } from './strategies/braintree';\nimport { ChasePayCustomerStrategy } from './strategies/chasepay';\nimport { DefaultCustomerStrategy } from './strategies/default';\nimport { GooglePayCustomerStrategy } from './strategies/googlepay';\nimport { MasterpassCustomerStrategy } from './strategies/masterpass';\nimport { SquareCustomerStrategy } from './strategies/square';\n\nexport default function createCustomerStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<CustomerStrategy> {\n    const registry = new Registry<CustomerStrategy>();\n    const scriptLoader = getScriptLoader();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutActionCreator = new CheckoutActionCreator(\n        checkoutRequestSender,\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n    const formPoster = createFormPoster();\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutRequestSender = new RemoteCheckoutRequestSender(requestSender);\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(remoteCheckoutRequestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            remoteCheckoutRequestSender,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('braintreevisacheckout', () =>\n        new BraintreeVisaCheckoutCustomerStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            new CustomerStrategyActionCreator(registry),\n            remoteCheckoutActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('chasepay', () =>\n        new ChasePayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new ChasePayScriptLoader(scriptLoader),\n            requestSender,\n            formPoster\n        )\n    );\n\n    registry.register('squarev2', () =>\n        new SquareCustomerStrategy(\n            store,\n            new RemoteCheckoutActionCreator(remoteCheckoutRequestSender)\n        )\n    );\n\n    registry.register('masterpass', () =>\n        new MasterpassCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('googlepaybraintree', () =>\n        new GooglePayCustomerStrategy(\n            store,\n            remoteCheckoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            ),\n            formPoster\n        )\n    );\n\n    registry.register('googlepaystripe', () =>\n        new GooglePayCustomerStrategy(\n            store,\n            remoteCheckoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            ),\n            formPoster\n    )\n);\n\n    registry.register('default', () =>\n        new DefaultCustomerStrategy(\n            store,\n            new CustomerActionCreator(\n                new CustomerRequestSender(requestSender),\n                checkoutActionCreator\n            )\n        )\n    );\n\n    return registry;\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\n\nimport { isInternalAddressEqual, mapFromInternalAddress, AddressRequestBody } from '../../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { AmazonPayAddressBook, AmazonPayOrderReference, AmazonPayScriptLoader, AmazonPayWindow } from '../../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport ConsignmentActionCreator from '../../consignment-action-creator';\nimport { ShippingInitializeOptions, ShippingRequestOptions } from '../../shipping-request-options';\nimport { ShippingStrategyActionType } from '../../shipping-strategy-actions';\nimport ShippingStrategy from '../shipping-strategy';\n\nimport AmazonPayShippingInitializeOptions from './amazon-pay-shipping-initialize-options';\n\nexport default class AmazonPayShippingStrategy implements ShippingStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: ShippingInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const onReady = () => {\n                    this._createAddressBook(amazonOptions)\n                        .then(resolve)\n                        .catch(reject);\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n\n    private _createAddressBook(options: AmazonPayShippingInitializeOptions): Promise<AmazonPayAddressBook> {\n        return new Promise((resolve, reject) => {\n            const { container, onAddressSelect = () => {}, onError = () => {}, onReady = () => {} } = options;\n            const merchantId = this._paymentMethod && this._paymentMethod.config.merchantId;\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay AddressBook widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.AddressBook({\n                design: {\n                    designMode: 'responsive',\n                },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onAddressSelect: orderReference => {\n                    this._synchronizeShippingAddress()\n                        .then(() => onAddressSelect(orderReference))\n                        .catch(onError);\n                },\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onReady: orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                },\n            });\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeShippingAddress(): Promise<InternalCheckoutSelectors> {\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n        const amazon = this._store.getState().remoteCheckout.getCheckout('amazon');\n        const referenceId = amazon ? amazon.referenceId : undefined;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId })\n        )\n            .then(() => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializeShipping(methodId, { referenceId })\n            ))\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.shipping && amazon.shipping.address;\n                const address = state.shippingAddress.getShippingAddress();\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, address || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._consignmentActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            })\n            .then(() => this._store.dispatch(\n                createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId })\n            ))\n            .catch(error => this._store.dispatch(\n                createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId })\n            ));\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n}\n","import { AddressRequestBody } from '../../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport ConsignmentActionCreator from '../../consignment-action-creator';\nimport { ShippingRequestOptions } from '../../shipping-request-options';\n\nimport ShippingStrategy from '../shipping-strategy';\n\nexport default class DefaultShippingStrategy implements ShippingStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator\n    ) {}\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.updateAddress(address, options)\n        );\n    }\n\n    selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n\n    initialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport ConsignmentActionCreator from './consignment-action-creator';\nimport ConsignmentRequestSender from './consignment-request-sender';\nimport { ShippingStrategy } from './strategies';\nimport { AmazonPayShippingStrategy } from './strategies/amazon';\nimport { DefaultShippingStrategy } from './strategies/default';\n\nexport default function createShippingStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<ShippingStrategy> {\n    const registry = new Registry<ShippingStrategy>();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const consignmentRequestSender = new ConsignmentRequestSender(requestSender);\n    const consignmentActionCreator = new ConsignmentActionCreator(consignmentRequestSender, checkoutRequestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayShippingStrategy(\n            store,\n            consignmentActionCreator,\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n            new RemoteCheckoutActionCreator(new RemoteCheckoutRequestSender(requestSender)),\n            new AmazonPayScriptLoader(getScriptLoader())\n        )\n    );\n\n    registry.register('default', () =>\n        new DefaultShippingStrategy(\n            store,\n            consignmentActionCreator\n        )\n    );\n\n    return registry;\n}\n","module.exports = require(\"@bigcommerce/bigpay-client\");","module.exports = require(\"rxjs/index\");","module.exports = require(\"messageformat\");","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\nexport default class TimeoutError extends RequestError<{}> {\n    constructor(response?: Response) {\n        super(response, {\n            message: 'The request has timed out or aborted.',\n        });\n\n        this.type = 'timeout';\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { cachableAction, ActionOptions } from '../common/action';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ConfigRequestSender } from '.';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\n\nexport default class ConfigActionCreator {\n    constructor(\n        private _configRequestSender: ConfigRequestSender\n    ) {}\n\n    @cachableAction\n    loadConfig(options?: RequestOptions & ActionOptions): Observable<LoadConfigAction> {\n        return Observable.create((observer: Observer<LoadConfigAction>) => {\n            observer.next(createAction(ConfigActionType.LoadConfigRequested));\n\n            this._configRequestSender.loadConfig(options)\n                .then(response => {\n                    observer.next(createAction(ConfigActionType.LoadConfigSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConfigActionType.LoadConfigFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport Config from './config';\n\nexport default class ConfigRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadConfig({ timeout }: RequestOptions = {}): Promise<Response<Config>> {\n        const url = '/api/storefront/checkout-settings';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Response } from '@bigcommerce/request-sender';\nimport { Observable, Observer } from 'rxjs';\n\nimport { Checkout, InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { GuestCredentials } from '../customer';\n\nimport { BillingAddressRequestSender } from '.';\nimport { BillingAddressUpdateRequestBody } from './billing-address';\nimport { BillingAddressActionType, ContinueAsGuestAction, UpdateBillingAddressAction } from './billing-address-actions';\n\nexport default class BillingAddressActionCreator {\n    constructor(\n        private _requestSender: BillingAddressRequestSender\n    ) {}\n\n    continueAsGuest(\n        credentials: GuestCredentials,\n        options?: RequestOptions\n    ): ThunkAction<ContinueAsGuestAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ContinueAsGuestAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const customer = state.customer.getCustomer();\n\n            if (customer && !customer.isGuest) {\n                throw new StandardError('Cannot continue as guest: customer is logged in.');\n            }\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            let billingAddressRequestBody;\n\n            if (!billingAddress) {\n                billingAddressRequestBody = credentials;\n            } else {\n                const { country, ...existingBillingAddressRequestBody } = billingAddress;\n\n                billingAddressRequestBody = {\n                    ...existingBillingAddressRequestBody,\n                    ...credentials,\n                };\n            }\n\n            observer.next(createAction(BillingAddressActionType.ContinueAsGuestRequested));\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.ContinueAsGuestSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.ContinueAsGuestFailed, response));\n                });\n        });\n    }\n\n    updateAddress(\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): ThunkAction<UpdateBillingAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateBillingAddressAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(BillingAddressActionType.UpdateBillingAddressRequested));\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            // If email is not present in the address provided by the client, then\n            // fall back to the stored email as it could have been set separately\n            // using a convenience method. We can't rely on billingAddress having\n            // an ID to consider that there's a preexisting email, as billingAddress\n            // object from Order doesn't have an ID.\n            const billingAddressRequestBody = {\n                ...address,\n                email: typeof address.email === 'undefined' && billingAddress ? billingAddress.email : address.email,\n            };\n\n            if (billingAddress && billingAddress.id) {\n                billingAddressRequestBody.id = billingAddress.id;\n            }\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.UpdateBillingAddressSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.UpdateBillingAddressFailed, response));\n                });\n        });\n    }\n\n    private _createOrUpdateBillingAddress(\n        checkoutId: string,\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): Promise<Response<Checkout>> {\n        if (!address.id) {\n            return this._requestSender.createAddress(checkoutId, address, options);\n        }\n\n        return this._requestSender.updateAddress(checkoutId, address, options);\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../address';\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { BillingAddressUpdateRequestBody } from './billing-address';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class BillingAddressRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createAddress(checkoutId: string, address: Partial<AddressRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: address, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateAddress(checkoutId: string, address: Partial<BillingAddressUpdateRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = address;\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nexport default class Registry<T, K extends string = string> {\n    private _factories: { [key: string]: Factory<T> };\n    private _instances: { [key: string]: T };\n    private _options: RegistryOptions;\n\n    constructor(options?: RegistryOptions) {\n        this._factories = {};\n        this._instances = {};\n        this._options = { defaultToken: 'default', ...options };\n    }\n\n    get(token?: K, cacheToken?: string): T {\n        try {\n            return this._getInstance(\n                token || this._options.defaultToken,\n                cacheToken || token || this._options.defaultToken\n            );\n        } catch (error) {\n            return this._getInstance(\n                this._options.defaultToken,\n                cacheToken || this._options.defaultToken\n            );\n        }\n    }\n\n    register(token: K, factory: Factory<T>): void {\n        if (this._hasFactory(token)) {\n            throw new InvalidArgumentError(`'${token}' is already registered.`);\n        }\n\n        this._factories[token] = factory;\n    }\n\n    protected _hasFactory(token: string): boolean {\n        return !!this._factories[token];\n    }\n\n    private _hasInstance(token: string): boolean {\n        return !!this._instances[token];\n    }\n\n    private _getInstance(token: string, cacheToken: string): T {\n        if (!this._hasInstance(cacheToken)) {\n            const factory = this._factories[token];\n\n            if (!factory) {\n                throw new InvalidArgumentError(`'${token}' is not registered.`);\n            }\n\n            this._instances[cacheToken] = factory();\n        }\n\n        return this._instances[cacheToken];\n    }\n}\n\nexport type Factory<T> = () => T;\n\nexport interface RegistryOptions {\n    defaultToken: string;\n}\n","export default function toFormUrlEncoded(data: { [key: string]: object | string | undefined }): string {\n    return Object.keys(data)\n        .filter(key => data[key] !== undefined)\n        .map(key => {\n            const value = data[key];\n\n            if (typeof value === 'string') {\n                return `${key}=${encodeURIComponent(value)}`;\n            }\n\n            return `${key}=${encodeURIComponent(JSON.stringify(value) || '')}`;\n        })\n        .join('&');\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { Masterpass, MasterpassHostWindow } from './masterpass';\n\nexport default class MasterpassScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: MasterpassHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<Masterpass> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox.' : ''}masterpass.com/integration/merchant.js`)\n            .then(() => {\n                if (!this._window.masterpass) {\n                    throw new StandardError();\n                }\n\n                return this._window.masterpass;\n            });\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class RemoteCheckoutSynchronizationError extends StandardError {\n    constructor(\n        public error?: Error\n    ) {\n        super('Unable to synchronize your checkout details with a third party provider. Please try again later.');\n\n        this.type = 'remote_checkout_synchronization';\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeSDKCreator, GooglePayBraintreeSDK } from '../braintree';\n\nimport {\n    GooglePaymentData,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload\n} from './googlepay';\nimport { GooglePayBraintreeDataRequest, GooglePayBraintreePaymentDataRequestV1 } from './googlepay-braintree';\n\nexport default class GooglePayBraintreeInitializer implements GooglePayInitializer {\n    private _googlePaymentInstance!: GooglePayBraintreeSDK;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator\n    ) {}\n\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        if (!paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return this._braintreeSDKCreator.getGooglePaymentComponent()\n            .then(googleBraintreePaymentInstance => {\n                this._googlePaymentInstance = googleBraintreePaymentInstance;\n\n                return this._createGooglePayPayload(\n                    checkout,\n                    paymentMethod.initializationData,\n                    hasShippingAddress\n                );\n            });\n    }\n\n    teardown(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload {\n        const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token).androidPayCards[0];\n\n        return {\n            nonce: payload.nonce,\n            type: payload.type,\n            description: payload.description,\n            details: {\n                cardType: payload.details.cardType,\n                lastFour: payload.details.lastFour,\n                lastTwo: payload.details.lastTwo,\n            },\n            binData: payload.binData,\n        };\n    }\n\n    private _createGooglePayPayload(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        if (!initializationData.platformToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const googlePayBraintreePaymentDataRequest: GooglePayBraintreeDataRequest = {\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantName: initializationData.googleMerchantName,\n                merchantId: initializationData.googleMerchantId,\n            },\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.grandTotal, 2).toFixed(2),\n            },\n            cardRequirements: {\n                billingAddressRequired: true,\n                billingAddressFormat: 'FULL',\n            },\n            shippingAddressRequired: !hasShippingAddress,\n            emailRequired: true,\n            phoneNumberRequired: true,\n        };\n\n        return this._mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(\n            this._googlePaymentInstance.createPaymentDataRequest(googlePayBraintreePaymentDataRequest)\n        );\n    }\n\n    private _mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(googlePayBraintreeDataRequestV1: GooglePayBraintreePaymentDataRequestV1): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: googlePayBraintreeDataRequestV1.merchantInfo.authJwt,\n                merchantId: googlePayBraintreeDataRequestV1.merchantInfo.merchantId,\n                merchantName: googlePayBraintreeDataRequestV1.merchantInfo.merchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: googlePayBraintreeDataRequestV1.cardRequirements.allowedCardNetworks,\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: 'FULL',\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'braintree',\n                        'braintree:apiVersion': 'v1',\n                        'braintree:authorizationFingerprint': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:authorizationFingerprint'],\n                        'braintree:merchantId': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:merchantId'],\n                        'braintree:sdkVersion': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:sdkVersion'],\n                    },\n                },\n            }],\n            transactionInfo: googlePayBraintreeDataRequestV1.transactionInfo,\n            emailRequired: true,\n            shippingAddressRequired: googlePayBraintreeDataRequestV1.shippingAddressRequired,\n            shippingAddressParameters: {\n                phoneNumberRequired: googlePayBraintreeDataRequestV1.phoneNumberRequired,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { InvalidArgumentError } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\n\nimport {\n    GooglePaymentData,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload\n} from './googlepay';\n\nexport default class GooglePayStripeInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(this._mapGooglePayStripeDataRequestToGooglePayDataRequestV2(\n            checkout,\n            paymentMethod.initializationData,\n            hasShippingAddress\n        ));\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload {\n        try {\n            const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token);\n\n            return {\n                nonce: payload.id,\n                type: payload.type,\n                details: {\n                    cardType: payload.card.brand,\n                    lastFour: payload.card.last4,\n                },\n            };\n        } catch (err) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n    }\n\n    private _mapGooglePayStripeDataRequestToGooglePayDataRequestV2(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantId: initializationData.googleMerchantId,\n                merchantName: initializationData.googleMerchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: ['AMEX', 'DISCOVER', 'JCB', 'MASTERCARD', 'VISA'],\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: 'FULL',\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'stripe',\n                        'stripe:version': initializationData.stripeVersion,\n                        'stripe:publishableKey': initializationData.stripePublishableKey,\n                    },\n                },\n            }],\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.grandTotal, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalScriptLoader {\n    private _window: PaypalHostWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadPaypal(): Promise<PaypalSDK> {\n        return this._scriptLoader\n            .loadScript('//www.paypalobjects.com/api/checkout.min.js')\n            .then(() => {\n                if (!this._window.paypal) {\n                    throw new StandardError();\n                }\n\n                return this._window.paypal;\n            });\n    }\n}\n","module.exports = require(\"iframe-resizer/js/iframeResizer.contentWindow\");","import { EmbeddedCheckoutFrameLoadedEvent } from '../embedded-checkout-events';\n\nexport default function handleFrameLoadedEvent(message: EmbeddedCheckoutFrameLoadedEvent): void {\n    if (!message.payload || !message.payload.contentId) {\n        return;\n    }\n\n    const body = document.getElementById(message.payload.contentId);\n\n    if (!body || body.hasAttribute('data-iframe-height')) {\n        return;\n    }\n\n    body.setAttribute('data-iframe-height', '');\n}\n","export default interface CustomError extends Error {\n    message: string;\n    type: string;\n    subtype?: string;\n}\n\nexport function isCustomError(error: any): error is CustomError {\n    return (\n        typeof error.message === 'string' &&\n        typeof error.type === 'string' &&\n        (typeof error.subtype === 'string' || !error.subtype) &&\n        error instanceof Error\n    );\n}\n","import { isCustomError, CustomError } from '../../common/error/errors';\nimport EmbeddedCheckoutError from '../embedded-checkout-error';\nimport {\n    EmbeddedCheckoutCompleteEvent,\n    EmbeddedCheckoutErrorEvent,\n    EmbeddedCheckoutEvent,\n    EmbeddedCheckoutEventMap,\n    EmbeddedCheckoutEventType,\n    EmbeddedCheckoutFrameErrorEvent,\n    EmbeddedCheckoutFrameLoadedEvent,\n    EmbeddedCheckoutLoadedEvent,\n    EmbeddedCheckoutSignedOutEvent,\n} from '../embedded-checkout-events';\nimport EmbeddedCheckoutStyles from '../embedded-checkout-styles';\nimport IframeEventListener from '../iframe-event-listener';\nimport IframeEventPoster from '../iframe-event-poster';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\nimport { EmbeddedContentEventMap, EmbeddedContentEventType } from './embedded-content-events';\nimport EmbeddedContentOptions from './embedded-content-options';\n\nexport default class IframeEmbeddedCheckoutMessenger implements EmbeddedCheckoutMessenger {\n    /**\n     * @internal\n     */\n    constructor(\n        private _messageListener: IframeEventListener<EmbeddedContentEventMap>,\n        private _messagePoster: IframeEventPoster<EmbeddedCheckoutEvent>,\n        private _untargetedMessagePoster: IframeEventPoster<EmbeddedCheckoutEvent>,\n        private _messageHandlers: EventCallbacks<EmbeddedCheckoutEventMap> = {}\n    ) {\n        this._messageListener.listen();\n    }\n\n    postComplete(): void {\n        const message: EmbeddedCheckoutCompleteEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutComplete,\n        };\n\n        this._postMessage(message);\n    }\n\n    postError(payload: Error | CustomError): void {\n        const message: EmbeddedCheckoutErrorEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutError,\n            payload: this._transformError(payload),\n        };\n\n        this._postMessage(message);\n    }\n\n    postFrameError(payload: Error | CustomError): void {\n        const message: EmbeddedCheckoutFrameErrorEvent = {\n            type: EmbeddedCheckoutEventType.FrameError,\n            payload: this._transformError(payload),\n        };\n\n        // Ideally, all messages should be targeted at a specific origin.\n        // However, for `FrameError` message, we have to post it in an\n        // untargeted fashion. This is because the error could be caused by a\n        // missing cart. That makes it not possible to determine of site origin\n        // of the parent window. Nevertheless, we still want to notify the\n        // parent window about the error.\n        this._postMessage(message, { untargeted: true });\n    }\n\n    postFrameLoaded(payload?: EmbeddedContentOptions): void {\n        const message: EmbeddedCheckoutFrameLoadedEvent = {\n            type: EmbeddedCheckoutEventType.FrameLoaded,\n            payload,\n        };\n\n        this._postMessage(message);\n    }\n\n    postLoaded(): void {\n        const message: EmbeddedCheckoutLoadedEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutLoaded,\n        };\n\n        this._postMessage(message);\n    }\n\n    postSignedOut(): void {\n        const message: EmbeddedCheckoutSignedOutEvent = {\n            type: EmbeddedCheckoutEventType.SignedOut,\n        };\n\n        this._postMessage(message);\n    }\n\n    receiveStyles(handler: (styles: EmbeddedCheckoutStyles) => void): void {\n        this._messageListener.addListener(EmbeddedContentEventType.StyleConfigured, ({ payload }) => {\n            handler(payload);\n        });\n    }\n\n    private _postMessage(message: EmbeddedCheckoutEvent, options?: { untargeted?: boolean }): void {\n        this._notifyMessageHandlers(message);\n\n        if (options && options.untargeted) {\n            return this._untargetedMessagePoster.post(message);\n        }\n\n        this._messagePoster.post(message);\n    }\n\n    private _notifyMessageHandlers(message: EmbeddedCheckoutEvent): void {\n        Object.keys(this._messageHandlers)\n            .forEach(key => {\n                const handler = this._messageHandlers[key as keyof EmbeddedCheckoutEventMap];\n\n                if (handler) {\n                    handler.call(null, message);\n                }\n            });\n    }\n\n    private _transformError(error: Error | CustomError): EmbeddedCheckoutError {\n        return {\n            message: error.message,\n            type: isCustomError(error) ? error.type : undefined,\n            subtype: isCustomError(error) ? error.subtype : undefined,\n        };\n    }\n}\n\nexport type EventCallbacks<TEventMap> = {\n    [key in keyof TEventMap]?: (event: TEventMap[key]) => void;\n};\n","import EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\n\nexport default class NoopEmbeddedCheckoutMessenger implements EmbeddedCheckoutMessenger {\n    postComplete(): void {}\n\n    postError(): void {}\n\n    postFrameError(): void {}\n\n    postFrameLoaded(): void {}\n\n    postLoaded(): void {}\n\n    postSignedOut(): void {}\n\n    receiveStyles(): void {}\n}\n","import { EmbeddedCheckoutEvent, EmbeddedCheckoutEventType } from '../embedded-checkout-events';\nimport IframeEventListener from '../iframe-event-listener';\nimport IframeEventPoster from '../iframe-event-poster';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\nimport EmbeddedCheckoutMessengerOptions from './embedded-checkout-messenger-options';\nimport { EmbeddedContentEventMap } from './embedded-content-events';\nimport handleFrameLoadedEvent from './handle-frame-loaded-event';\nimport IframeEmbeddedCheckoutMessenger from './iframe-embedded-checkout-messenger';\nimport NoopEmbeddedCheckoutMessenger from './noop-embedded-checkout-messenger';\n\n/**\n * Create an instance of `EmbeddedCheckoutMessenger`.\n *\n * @remarks\n * The object is responsible for posting messages to the parent window from the\n * iframe when certain events have occurred. For example, when the checkout\n * form is first loaded, you should notify the parent window about it.\n *\n * The iframe can only be embedded in domains that are allowed by the store.\n *\n * ```ts\n * const messenger = createEmbeddedCheckoutMessenger({\n *     parentOrigin: 'https://some/website',\n * });\n *\n * messenger.postFrameLoaded();\n * ```\n *\n * @alpha\n * Please note that this feature is currently in an early stage of development.\n * Therefore the API is unstable and not ready for public consumption.\n *\n * @param options - Options for creating `EmbeddedCheckoutMessenger`\n * @returns - An instance of `EmbeddedCheckoutMessenger`\n */\nexport default function createEmbeddedCheckoutMessenger(options: EmbeddedCheckoutMessengerOptions): EmbeddedCheckoutMessenger {\n    const parentWindow = options.parentWindow || window.parent;\n\n    // Return a No-op messenger if it is not called inside an iframe\n    if (window === parentWindow) {\n        return new NoopEmbeddedCheckoutMessenger();\n    }\n\n    return new IframeEmbeddedCheckoutMessenger(\n        new IframeEventListener<EmbeddedContentEventMap>(options.parentOrigin),\n        new IframeEventPoster<EmbeddedCheckoutEvent>(options.parentOrigin, parentWindow),\n        new IframeEventPoster<EmbeddedCheckoutEvent>('*', parentWindow),\n        { [EmbeddedCheckoutEventType.FrameLoaded]: handleFrameLoadedEvent }\n    );\n}\n","import { isObject, union } from 'lodash';\nimport * as MessageFormat from 'messageformat';\n\nimport Logger from '../common/log/logger';\n\nimport LanguageConfig, { Locales, Translations } from './language-config';\n\nconst DEFAULT_LOCALE = 'en';\nconst KEY_PREFIX = 'optimized_checkout';\n\n/**\n * Responsible for getting language strings.\n *\n * This object can be used to retrieve language strings that are most\n * appropriate for a given locale.\n *\n * The language strings provided to the object should follow [ICU\n * MessageFormat](http://userguide.icu-project.org/formatparse/messages) syntax.\n */\nexport default class LanguageService {\n    private _locale: string;\n    private _locales: Locales;\n    private _translations: Translations;\n    private _formatters: { [key: string]: any };\n\n    /**\n     * @internal\n     */\n    constructor(\n        config: Partial<LanguageConfig>,\n        private _logger: Logger\n    ) {\n        const { locale, locales, translations } = this._transformConfig(config);\n\n        this._locale = locale;\n        this._locales = locales;\n        this._translations = translations;\n        this._formatters = {};\n    }\n\n    /**\n     * Remaps a set of language strings with a different set of keys.\n     *\n     * ```js\n     * service.mapKeys({\n     *     'new_key': 'existing_key',\n     * });\n     *\n     * console.log(service.translate('new_key'));\n     * ```\n     *\n     * @param maps - The set of language strings.\n     */\n    mapKeys(maps: { [key: string]: string }): void {\n        Object.keys(maps).forEach(key => {\n            const translationKey = `${KEY_PREFIX}.${maps[key]}`;\n\n            this._translations[`${KEY_PREFIX}.${key}`] = this._translations[translationKey];\n        });\n    }\n\n    /**\n     * Gets the preferred locale of the current customer.\n     *\n     * @returns The preferred locale code.\n     */\n    getLocale(): string {\n        return this._hasTranslations() ? this._locale : DEFAULT_LOCALE;\n    }\n\n    /**\n     * Gets a language string by a key.\n     *\n     * ```js\n     * service.translate('language_key');\n     * ```\n     *\n     * If the language string contains a placeholder, you can replace it by\n     * providing a second argument.\n     *\n     * ```js\n     * service.translate('language_key', { placeholder: 'Hello' });\n     * ```\n     *\n     * @param key - The language key.\n     * @param data - Data for replacing placeholders in the language string.\n     * @returns The translated language string.\n     */\n    translate(key: string, data: TranslationData = {}): string {\n        const prefixedKey = `${KEY_PREFIX}.${key}`;\n\n        if (typeof this._translations[prefixedKey] !== 'string') {\n            this._logger.warn(`Translation key \"${prefixedKey}\" is missing`);\n\n            return prefixedKey;\n        }\n\n        if (!this._formatters[prefixedKey]) {\n            const messageFormat = new MessageFormat(this._locales[prefixedKey]);\n\n            this._formatters[prefixedKey] = messageFormat.compile(this._translations[prefixedKey] || '');\n        }\n\n        return this._formatters[prefixedKey](this._transformData(data));\n    }\n\n    private _transformConfig(config: Partial<LanguageConfig> = {}): LanguageConfig {\n        const output: LanguageConfig = {\n            defaultTranslations: {},\n            translations: {},\n            locales: {},\n            locale: config.locale || DEFAULT_LOCALE,\n        };\n\n        const locales = config.locales || {};\n        const translations = this._flattenObject(config.translations || {});\n        const defaultTranslations = this._flattenObject(config.defaultTranslations || {});\n        const translationKeys = union(Object.keys(defaultTranslations), Object.keys(translations));\n\n        translationKeys.forEach(key => {\n            if (translations && translations[key]) {\n                output.translations[key] = translations[key];\n                output.locales[key] = locales[key] || output.locale;\n            } else {\n                output.translations[key] = defaultTranslations[key];\n                output.locales[key] = DEFAULT_LOCALE;\n            }\n        });\n\n        return output;\n    }\n\n    private _flattenObject(object: Translations, result: Translations = {}, parentKey: string = ''): Translations {\n        try {\n            Object.keys(object).forEach(key => {\n                const value = object[key];\n                const resultKey = parentKey ? `${parentKey}.${key}` : key;\n\n                if (isObject(value)) {\n                    return this._flattenObject(value as Translations, result, resultKey);\n                }\n\n                result[resultKey] = value;\n            });\n        } catch (err) {\n            this._logger.warn(`Unable to parse object: ${err}`);\n        }\n\n        return result;\n    }\n\n    private _transformData(data: TranslationData): TranslationData {\n        return Object.keys(data).reduce((result, key) => {\n            const value = data[key];\n\n            result[key] = value === null || value === undefined ? '' : value;\n\n            return result;\n        }, {} as TranslationData);\n    }\n\n    private _hasTranslations(): boolean {\n        return Object.keys(this._locales).map(key => this._locales[key])\n            .filter(code => code.split('-')[0] === this._locale.split('-')[0])\n            .length > 0;\n    }\n}\n\nexport interface TranslationData {\n    [key: string]: string | number;\n}\n","import { getDefaultLogger } from '../common/log';\n\nimport LanguageConfig from './language-config';\nimport LanguageService from './language-service';\n\n/**\n * Creates an instance of `LanguageService`.\n *\n * @remarks\n * ```js\n * const language = {{{langJson 'optimized_checkout'}}}; // `langJson` is a Handlebars helper provided by BigCommerce's Stencil template engine.\n * const service = createLanguageService(language);\n *\n * console.log(service.translate('address.city_label'));\n * ```\n *\n * @param config - A configuration object.\n * @returns An instance of `LanguageService`.\n */\nexport default function createLanguageService(config: Partial<LanguageConfig> = {}): LanguageService {\n    return new LanguageService(\n        config,\n        getDefaultLogger()\n    );\n}\n","import { InvalidArgumentError } from '../common/error/errors';\n\nimport { CurrencyConfig } from './currency';\n\nexport default class CurrencyFormatter {\n    private _decimalPlaces: number;\n    private _symbolLocation: string;\n    private _symbol: string;\n    private _thousandsSeparator: string;\n    private _decimalSeparator: string;\n\n    constructor(\n        currencySettings: CurrencyConfig\n    ) {\n        if (!currencySettings) {\n            throw new Error('Currency settings missing');\n        }\n\n        const {\n            decimalPlaces,\n            symbolLocation,\n            symbol,\n            thousandsSeparator,\n            decimalSeparator,\n        } = currencySettings;\n\n        if (\n            typeof symbolLocation !== 'string' ||\n            typeof symbol !== 'string' ||\n            typeof thousandsSeparator !== 'string' ||\n            typeof decimalSeparator !== 'string' ||\n            typeof decimalPlaces !== 'string'\n        ) {\n            throw new InvalidArgumentError('Invalid currency settings provided');\n        }\n\n        this._decimalPlaces = parseInt(decimalPlaces, 10);\n        this._symbolLocation = symbolLocation;\n        this._symbol = symbol;\n        this._thousandsSeparator = thousandsSeparator;\n        this._decimalSeparator = decimalSeparator;\n    }\n\n    format(amount?: number): string {\n        if (typeof amount !== 'number') {\n            throw new InvalidArgumentError('Invalid amount provided');\n        }\n\n        const formattedNumber = this._formatNumber(amount);\n\n        const formattedCurrency = this._formatCurrency(formattedNumber);\n\n        return amount < 0 ?\n            `-${formattedCurrency}` :\n            formattedCurrency;\n    }\n\n    private _formatNumber(amount: number): string {\n        const positiveAmount = Math.abs(amount);\n        const [ integerAmount, decimalAmount = '' ] = (this._toFixed(positiveAmount, this._decimalPlaces)).split('.');\n        const parsedIntegerAmount = integerAmount.replace(/\\B(?=(\\d{3})+(?!\\d))/g, this._thousandsSeparator);\n\n        if (this._decimalPlaces < 1) {\n            return parsedIntegerAmount;\n        }\n\n        return [\n            parsedIntegerAmount,\n            decimalAmount,\n        ].join(this._decimalSeparator);\n    }\n\n    private _formatCurrency(formattedNumber: string): string {\n        return (this._symbolLocation.toLowerCase() === 'left') ?\n            `${this._symbol}${formattedNumber}` :\n            `${formattedNumber}${this._symbol}`;\n    }\n\n    private _toFixed(value: number, precision: number): string {\n        return (+(Math.round(+(value + 'e' + precision)) + 'e' + -precision)).toFixed(precision);\n    }\n}\n","import { StoreConfig } from '../config';\n\nimport CurrencyFormatter from './currency-formatter';\n\n/**\n * Responsible for formatting and converting currencies.\n */\nexport default class CurrencyService {\n    private _customerFormatter: CurrencyFormatter;\n    private _storeFormatter: CurrencyFormatter;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _storeConfig: StoreConfig\n    ) {\n        this._customerFormatter = new CurrencyFormatter(this._storeConfig.shopperCurrency);\n        this._storeFormatter = new CurrencyFormatter(this._storeConfig.currency);\n    }\n\n    toCustomerCurrency(amount: number): string {\n        const exchangeRate = this._storeConfig.shopperCurrency.exchangeRate;\n\n        return this._customerFormatter.format(amount * exchangeRate);\n    }\n\n    toStoreCurrency(amount: number): string {\n        return this._storeFormatter.format(amount);\n    }\n}\n","import { StoreConfig } from '../config';\n\nimport CurrencyService from './currency-service';\n\n/**\n * Creates an instance of `CurrencyService`.\n *\n * @remarks\n * ```js\n * const { data } = checkoutService.getState();\n * const config = data.getConfig();\n * const checkout = data.getCheckout();\n * const currencyService = createCurrencyService(config);\n *\n * currencyService.toStoreCurrency(checkout.grandTotal);\n * currencyService.toCustomerCurrency(checkout.grandTotal);\n * ```\n *\n * @alpha\n * Please note that `CurrencyService` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param config - The config object containing the currency configuration\n * @returns an instance of `CurrencyService`.\n */\nexport default function createCurrencyService(\n    config: StoreConfig\n): CurrencyService {\n    return new CurrencyService(config);\n}\n","export { createTimeout } from '@bigcommerce/request-sender';\n\nexport { createCheckoutService } from './checkout';\nexport { createCheckoutButtonInitializer } from './checkout-buttons';\nexport { embedCheckout } from './embedded-checkout';\nexport { createEmbeddedCheckoutMessenger } from './embedded-checkout/iframe-content';\nexport { createLanguageService } from './locale';\nexport { createCurrencyService } from './currency';\n","import { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeModuleCreator, GooglePayBraintreeSDK } from '../braintree';\n\nexport type EnvironmentType = 'PRODUCTION' | 'TEST';\ntype TokenizeType = 'AndroidPayCard' | 'CreditCard';\n\nexport interface GooglePayInitializer {\n    initialize(checkout: Checkout, paymentMethod: PaymentMethod, hasShippingAddress: boolean, publishableKey?: string): Promise<GooglePayPaymentDataRequestV2>;\n    teardown(): Promise<void>;\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload;\n}\n\nexport interface GooglePayCreator extends BraintreeModuleCreator<GooglePayBraintreeSDK> {}\n\nexport interface GooglePayPaymentOptions {\n    environment: EnvironmentType;\n}\n\nexport interface GooglePayIsReadyToPayResponse {\n    result: boolean;\n    paymentMethodPresend?: boolean;\n}\n\nexport interface GooglePaySDK {\n    payments: {\n        api: {\n            PaymentsClient: {\n                new(options: GooglePayPaymentOptions): GooglePayClient;\n            },\n        },\n    };\n}\n\nexport interface GooglePayClient {\n    isReadyToPay(options: object): Promise<GooglePayIsReadyToPayResponse>;\n    loadPaymentData(paymentDataRequest: GooglePayPaymentDataRequestV2): Promise<GooglePaymentData>;\n    createButton(options: { [key: string]: string | object }): HTMLElement;\n}\n\nexport interface GooglePayHostWindow extends Window {\n    google?: GooglePaySDK;\n}\n\nexport interface TokenizePayload {\n    nonce: string;\n    details: {\n        cardType: string;\n        lastFour: string;\n        lastTwo?: string;\n    };\n    description?: string;\n    type: TokenizeType;\n    binData?: {\n        commercial: string;\n        countryOfIssuance: string;\n        debit: string;\n        durbinRegulated: string;\n        healthcare: string;\n        issuingBank: string;\n        payroll: string;\n        prepaid: string;\n        productId: string;\n    };\n}\n\nexport interface GooglePaymentData {\n    apiVersion: number;\n    apiVersionMinor: number;\n    paymentMethodData: {\n        description: string;\n        info: {\n            cardDetails: string;\n            cardNetwork: string;\n            billingAddress: GooglePayAddress;\n        };\n        tokenizationData: {\n            token: string;\n            type: string;\n        }\n        type: string;\n    };\n    shippingAddress: GooglePayAddress;\n    email: string;\n}\n\nexport interface GooglePayAddress {\n    address1: string;\n    address2: string;\n    address3: string;\n    administrativeArea: string;\n    companyName: string;\n    countryCode: string;\n    locality: string;\n    name: string;\n    postalCode: string;\n    sortingCode: string;\n    phoneNumber: string;\n}\n\nexport interface GooglePaymentsError {\n    statusCode: string;\n    statusMessage?: string;\n}\n\nexport interface PaymentMethodData {\n    methodId: string;\n    paymentData: {\n        method: string,\n        nonce: string,\n        cardInformation: {\n            type: string,\n            number: string,\n        },\n    };\n}\n\nexport enum ButtonType {\n    Long = 'long',\n    Short = 'short',\n}\nexport enum ButtonColor {\n    Default = 'default',\n    Black = 'black',\n    White = 'white',\n}\n\nexport interface GooglePayPaymentDataRequestV2 {\n    apiVersion: number;\n    apiVersionMinor: number;\n    merchantInfo: {\n        authJwt?: string;\n        merchantId?: string;\n        merchantName?: string;\n    };\n    allowedPaymentMethods: [{\n        type: string;\n        parameters: {\n            allowedAuthMethods: string[];\n            allowedCardNetworks: string[];\n            allowPrepaidCards?: boolean;\n            billingAddressRequired?: boolean;\n            billingAddressParameters?: {\n                format?: string;\n                phoneNumberRequired?: boolean;\n            };\n        },\n        tokenizationSpecification?: {\n            type: string;\n            parameters: {\n                gateway: string;\n                gatewayMerchantId?: string;\n                'braintree:apiVersion'?: string;\n                'braintree:clientKey'?: string;\n                'braintree:merchantId'?: string;\n                'braintree:sdkVersion'?: string;\n                'braintree:authorizationFingerprint'?: string;\n                'stripe:version'?: string;\n                'stripe:publishableKey'?: string;\n            };\n        };\n    }];\n    transactionInfo: {\n        currencyCode: string;\n        totalPriceStatus: string;\n        totalPrice?: string;\n        checkoutOption?: string;\n    };\n    emailRequired?: boolean;\n    shippingAddressRequired?: boolean;\n    shippingAddressParameters?: {\n        allowedCountryCodes?: string[];\n        phoneNumberRequired?: boolean;\n    };\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../../../address';\nimport { BillingAddressActionCreator, BillingAddressUpdateRequestBody } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { toFormUrlEncoded } from '../../../common/http-request/';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport { ConsignmentActionCreator } from '../../../shipping';\nimport PaymentMethodInvalidError from '../../errors/payment-method-invalid-error';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\n\nimport {\n    ButtonColor,\n    ButtonType,\n    EnvironmentType,\n    GooglePaymentData,\n    GooglePayAddress,\n    GooglePayClient,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    GooglePaySDK,\n    TokenizePayload\n} from './googlepay';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default class GooglePayPaymentProcessor {\n    private _googlePayClient?: GooglePayClient;\n    private _methodId?: string;\n    private _paymentDataRequest?: GooglePayPaymentDataRequestV2;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _googlePayScriptLoader: GooglePayScriptLoader,\n        private _googlePayInitializer: GooglePayInitializer,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _consigmentActionCreator: ConsignmentActionCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(methodId: string): Promise<void> {\n        this._methodId = methodId;\n\n        return this._configureWallet();\n    }\n\n    deinitialize(): Promise<void> {\n        return this._googlePayInitializer.teardown();\n    }\n\n    createButton(\n        onClick: (event: Event) => Promise<void>,\n        buttonType: ButtonType = ButtonType.Short,\n        buttonColor: ButtonColor = ButtonColor.Default\n    ): HTMLElement {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.createButton({\n            buttonColor,\n            buttonType,\n            onClick,\n        });\n    }\n\n    displayWallet(): Promise<GooglePaymentData> {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.loadPaymentData(this._getPaymentDataRequest());\n    }\n\n    handleSuccess(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        return this._postForm(this._googlePayInitializer.parseResponse(paymentData))\n            .then(() => this._updateBillingAddress(paymentData));\n    }\n\n    updateShippingAddress(shippingAddress: GooglePayAddress): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consigmentActionCreator.updateAddress(this._mapGooglePayAddressToShippingAddress(shippingAddress))\n        );\n    }\n\n    private _configureWallet(): Promise<void> {\n        const methodId = this._getMethodId();\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                const checkout = state.checkout.getCheckout();\n                const hasShippingAddress = !!state.shippingAddress.getShippingAddress();\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const { testMode } = paymentMethod.config;\n\n                return Promise.all([\n                    this._googlePayScriptLoader.load(),\n                    this._googlePayInitializer.initialize(checkout, paymentMethod, hasShippingAddress),\n                ]).then(([googlePay, paymentDataRequest]) => {\n                    this._googlePayClient = this._getGooglePayClient(googlePay, testMode);\n                    this._paymentDataRequest = paymentDataRequest;\n\n                    return this._googlePayClient.isReadyToPay({\n                        allowedPaymentMethods: [\n                            {\n                                type: paymentDataRequest.allowedPaymentMethods[0].type,\n                                parameters: {\n                                    allowedAuthMethods: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedAuthMethods,\n                                    allowedCardNetworks: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedCardNetworks,\n                                },\n                            },\n                        ],\n                        apiVersion: paymentDataRequest.apiVersion,\n                        apiVersionMinor: paymentDataRequest.apiVersionMinor,\n                    }).then(response => {\n                        if (response.result) {\n                            return;\n                        }\n\n                        throw new PaymentMethodInvalidError();\n                    });\n                });\n            });\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string, lastFour: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastFour,\n        };\n    }\n\n    private _getPaymentDataRequest(): GooglePayPaymentDataRequestV2 {\n        if (!this._paymentDataRequest) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._paymentDataRequest;\n    }\n\n    private _getGooglePayClient(google: GooglePaySDK, testMode?: boolean): GooglePayClient {\n        if (testMode === undefined) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const environment: EnvironmentType = testMode ? 'TEST' : 'PRODUCTION';\n\n        return new google.payments.api.PaymentsClient({ environment });\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    private _mapGooglePayAddressToBillingAddress(paymentData: GooglePaymentData, id: string): BillingAddressUpdateRequestBody {\n        return {\n            id,\n            firstName: paymentData.paymentMethodData.info.billingAddress.name.split(' ').slice(0, -1).join(' '),\n            lastName: paymentData.paymentMethodData.info.billingAddress.name.split(' ').slice(-1).join(' '),\n            company: paymentData.paymentMethodData.info.billingAddress.companyName,\n            address1: paymentData.paymentMethodData.info.billingAddress.address1,\n            address2: paymentData.paymentMethodData.info.billingAddress.address2 + paymentData.paymentMethodData.info.billingAddress.address3,\n            city: paymentData.paymentMethodData.info.billingAddress.locality,\n            stateOrProvince: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            stateOrProvinceCode: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            postalCode: paymentData.paymentMethodData.info.billingAddress.postalCode,\n            countryCode: paymentData.paymentMethodData.info.billingAddress.countryCode,\n            phone: paymentData.paymentMethodData.info.billingAddress.phoneNumber,\n            customFields: [],\n            email: paymentData.email,\n        };\n    }\n\n    private _mapGooglePayAddressToShippingAddress(address: GooglePayAddress): AddressRequestBody {\n        return {\n            firstName: address.name.split(' ').slice(0, -1).join(' '),\n            lastName: address.name.split(' ').slice(-1).join(' '),\n            company: address.companyName,\n            address1: address.address1,\n            address2: address.address2 + address.address3,\n            city: address.locality,\n            stateOrProvince: address.administrativeArea,\n            stateOrProvinceCode: address.administrativeArea,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phoneNumber,\n            customFields: [],\n        };\n    }\n\n    private _postForm(postPaymentData: TokenizePayload): Promise<Response<void>> {\n        const cardInformation = postPaymentData.details;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: toFormUrlEncoded({\n                payment_type: postPaymentData.type,\n                nonce: postPaymentData.nonce,\n                provider: this._getMethodId(),\n                action: 'set_external_checkout',\n                card_information: this._getCardInformation(cardInformation),\n            }),\n        });\n    }\n\n    private _updateBillingAddress(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        const remoteBillingAddress = this._store.getState().billingAddress.getBillingAddress();\n\n        if (!remoteBillingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const googlePayAddressMapped = this._mapGooglePayAddressToBillingAddress(paymentData, remoteBillingAddress.id);\n\n        return this._store.dispatch(\n            this._billingAddressActionCreator.updateAddress(googlePayAddressMapped)\n        );\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { GooglePayHostWindow, GooglePaySDK } from './googlepay';\n\nexport default class GooglePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GooglePayHostWindow = window\n    ) {}\n\n    load(): Promise<GooglePaySDK> {\n        return this._scriptLoader\n            .loadScript('https://pay.google.com/gp/p/js/pay.js')\n            .then(() => {\n                if (!this._window.google) {\n                    throw new StandardError();\n                }\n\n                return this._window.google;\n            });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../../../billing';\nimport { CheckoutRequestSender, CheckoutStore } from '../../../checkout';\nimport { ConsignmentActionCreator, ConsignmentRequestSender } from '../../../shipping';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport PaymentMethodRequestSender from '../../payment-method-request-sender';\n\nimport { GooglePayInitializer } from './googlepay';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default function createGooglePayPaymentProcessor(store: CheckoutStore, initializer: GooglePayInitializer): GooglePayPaymentProcessor {\n    const requestSender = createRequestSender();\n    const scriptLoader = getScriptLoader();\n\n    return new GooglePayPaymentProcessor(\n        store,\n        new PaymentMethodActionCreator(\n            new PaymentMethodRequestSender(requestSender)\n        ),\n        new GooglePayScriptLoader(scriptLoader),\n        initializer,\n        new BillingAddressActionCreator(\n            new BillingAddressRequestSender(requestSender)\n        ),\n        new ConsignmentActionCreator(\n            new ConsignmentRequestSender(requestSender),\n            new CheckoutRequestSender(requestSender)\n        ),\n        requestSender\n    );\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class RemoteCheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    initializeBilling(methodName: string, params?: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/billing`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializeShipping(methodName: string, params?: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/shipping`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializePayment(methodName: string, params?: InitializePaymentOptions, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/payment`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    loadSettings(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/settings`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    signOut(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/signout`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    generateToken({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout-token';\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    trackAuthorizationEvent({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout/events/shopper-checkout-service-provider-authorization-requested';\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n\nexport interface InitializePaymentOptions {\n    authorizationToken?: string;\n    customerMessage?: string;\n    referenceId?: string;\n    useStoreCredit?: boolean;\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutRequestSender, { InitializePaymentOptions } from './remote-checkout-request-sender';\nimport { RemoteCheckoutStateData } from './remote-checkout-state';\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action<T>\n */\nexport default class RemoteCheckoutActionCreator {\n    constructor(\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender\n    ) {}\n\n    initializeBilling(methodId: string, params?: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteBillingRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeBilling(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteBillingSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemoteBillingFailed, response, { methodId }));\n                });\n        });\n    }\n\n    initializeShipping(methodId: string, params?: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteShippingRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeShipping(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteShippingSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemoteShippingFailed, response, { methodId }));\n                });\n        });\n    }\n\n    initializePayment(methodId: string, params?: InitializePaymentOptions, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemotePaymentRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializePayment(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemotePaymentSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemotePaymentFailed, response, { methodId }));\n                });\n        });\n    }\n\n    loadSettings(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.LoadRemoteSettingsRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.loadSettings(methodId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.LoadRemoteSettingsSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.LoadRemoteSettingsFailed, response, { methodId }));\n                });\n        });\n    }\n\n    signOut(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.SignOutRemoteCustomerRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.signOut(methodId, options)\n                .then(() => {\n                    observer.next(createAction(RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.SignOutRemoteCustomerFailed, response, { methodId }));\n                });\n        });\n    }\n\n    updateCheckout<K extends keyof RemoteCheckoutStateData>(methodId: K, data: Partial<RemoteCheckoutStateData[K]>): Action {\n        return createAction(RemoteCheckoutActionType.UpdateRemoteCheckout, data, { methodId });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayScriptLoader {\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadWidget(method: PaymentMethod, onPaymentReady?: () => void): Promise<Event> {\n        const {\n            config: { merchantId, testMode },\n            initializationData: { region = 'us' } = {},\n        } = method;\n\n        const url = 'https://' +\n            (region.toLowerCase() !== 'us' ? 'static-eu.' : 'static-na.') +\n            'payments-amazon.com/OffAmazonPayments/' +\n            `${region.toLowerCase()}/` +\n            (testMode ? 'sandbox/' : '') +\n            (region.toLowerCase() !== 'us' ? 'lpa/' : '') +\n            `js/Widgets.js?sellerId=${merchantId}`;\n\n        this._configureWidget(method, onPaymentReady);\n\n        return this._scriptLoader.loadScript(url);\n    }\n\n    private _configureWidget(method: PaymentMethod, onPaymentReady?: () => void): void {\n        const onLoginReady = () => {\n            if (!this._window.amazon) {\n                return;\n            }\n\n            this._window.amazon.Login.setClientId(method.initializationData.clientId);\n            this._window.amazon.Login.setUseCookie(true);\n        };\n\n        if (this._window.amazon && this._window.amazon.Login) {\n            onLoginReady();\n        } else {\n            this._window.onAmazonLoginReady = onLoginReady;\n        }\n\n        if (this._window.OffAmazonPayments && onPaymentReady) {\n            onPaymentReady();\n        } else {\n            this._window.onAmazonPaymentsReady = onPaymentReady;\n        }\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { VisaCheckoutHostWindow, VisaCheckoutSDK } from './visacheckout';\n\nexport default class VisaCheckoutScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: VisaCheckoutHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<VisaCheckoutSDK> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox-' : ''}assets.secure.checkout.visa.com/checkout-widget/resources/js/integration/v1/sdk.js`)\n            .then(() => {\n                if (!this._window.V) {\n                    throw new StandardError();\n                }\n\n                return this._window.V;\n            });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { ChasePayHostWindow, JPMC } from '../chasepay/chasepay';\n\nexport default class ChasePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: ChasePayHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<JPMC> {\n        return this._scriptLoader\n            .loadScript(`//pwc${testMode ? 'psb' : ''}.chase.com/pwc/checkout/js/v20170521/list.action?type=raw&applId=PWC&channelId=CWC&version=1`)\n            .then(() => {\n                if (!this._window.JPMC) {\n                    throw new StandardError();\n                }\n\n                return this._window.JPMC;\n            });\n    }\n}\n","import Logger from './logger';\n\nexport default class ConsoleLogger implements Logger {\n    constructor(\n        private _console?: Console\n    ) {}\n\n    log(...messages: any[]): void {\n        this._logToConsole('log', ...messages);\n    }\n\n    info(...messages: any[]): void {\n        this._logToConsole('info', ...messages);\n    }\n\n    warn(...messages: any[]): void {\n        this._logToConsole('warn', ...messages);\n    }\n\n    error(...messages: any[]): void {\n        this._logToConsole('error', ...messages);\n    }\n\n    debug(...messages: any[]): void {\n        this._logToConsole('debug', ...messages);\n    }\n\n    private _logToConsole(type: keyof Console, ...messages: any[]): void {\n        if (!this._console || !this._console[type]) {\n            return;\n        }\n\n        this._console[type].call(this._console, ...messages);\n    }\n}\n","import Logger from './logger';\n\nexport default class NoopLogger implements Logger {\n    log(): void {}\n\n    info(): void {}\n\n    warn(): void {}\n\n    error(): void {}\n\n    debug(): void {}\n}\n","import { getEnvironment } from '../utility';\n\nimport createLogger from './create-logger';\nimport Logger from './logger';\n\nconst logger = createLogger(getEnvironment() !== 'test');\n\nexport default function getDefaultLogger(): Logger {\n    return logger;\n}\n","import ConsoleLogger from './console-logger';\nimport Logger from './logger';\nimport NoopLogger from './noop-logger';\n\nexport default function createLogger(isEnabled = true): Logger {\n    if (!isEnabled) {\n        return new NoopLogger();\n    }\n\n    return new ConsoleLogger(console);\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { Address, LegacyAddress } from '../../../address';\nimport { toFormUrlEncoded } from '../../../common/http-request';\n\nimport { BraintreeDataCollector } from './braintree';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport {\n    VisaCheckoutAddress,\n    VisaCheckoutInitOptions,\n    VisaCheckoutPaymentSuccessPayload,\n    VisaCheckoutTokenizedPayload,\n} from './visacheckout';\n\nexport default class BraintreeVisaCheckoutPaymentProcessor {\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(clientToken: string, options: VisaCheckoutInitializeOptions): Promise<VisaCheckoutInitOptions> {\n        this._braintreeSDKCreator.initialize(clientToken);\n\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(visaCheckout => visaCheckout.createInitOptions({\n                settings: {\n                    locale: options.locale,\n                    shipping: {\n                        collectShipping: options.collectShipping,\n                    },\n                },\n                paymentRequest: {\n                    currencyCode: options.currencyCode,\n                    subtotal: String(options.subtotal),\n                },\n            }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    handleSuccess(payment: VisaCheckoutPaymentSuccessPayload, shipping?: Address, billing?: Address): Promise<any> {\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(braintreeVisaCheckout => Promise.all([\n                braintreeVisaCheckout.tokenize(payment),\n                this._braintreeSDKCreator.getDataCollector(),\n            ])\n            .then(([tokenizedPayload, dataCollector]) => {\n                const {\n                    shippingAddress = this._toVisaCheckoutAddress(shipping),\n                    billingAddress = this._toVisaCheckoutAddress(billing),\n                } = tokenizedPayload;\n\n                return this._postForm({\n                    ...tokenizedPayload,\n                    shippingAddress,\n                    billingAddress,\n                }, dataCollector);\n            }));\n    }\n\n    private _postForm(paymentData: VisaCheckoutTokenizedPayload, dataCollector: BraintreeDataCollector) {\n        const {\n            userData,\n            billingAddress,\n            shippingAddress,\n            details: cardInformation,\n        } = paymentData;\n        const { userEmail } = userData;\n        const { deviceData } = dataCollector;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: toFormUrlEncoded({\n                payment_type: paymentData.type,\n                nonce: paymentData.nonce,\n                provider: 'braintreevisacheckout',\n                action: 'set_external_checkout',\n                device_data: deviceData,\n                card_information: this._getCardInformation(cardInformation),\n                billing_address: this._getAddress(userEmail, billingAddress),\n                shipping_address: this._getAddress(userEmail, shippingAddress),\n            }),\n        });\n    }\n\n    private _toVisaCheckoutAddress(address?: Address): VisaCheckoutAddress {\n        if (!address) {\n            return {};\n        }\n\n        return {\n            firstName: address.firstName,\n            lastName: address.lastName,\n            phoneNumber: address.phone,\n            streetAddress: address.address1,\n            extendedAddress: address.address2,\n            locality: address.city,\n            region: address.stateOrProvinceCode,\n            countryCode: address.countryCode,\n            postalCode: address.postalCode,\n        };\n    }\n\n    private _getAddress(email: string, address: VisaCheckoutAddress = {}): Partial<LegacyAddress> {\n        return {\n            email,\n            first_name: address.firstName,\n            last_name: address.lastName,\n            phone_number: address.phoneNumber,\n            address_line_1: address.streetAddress,\n            address_line_2: address.extendedAddress,\n            city: address.locality,\n            state: address.region,\n            country_code: address.countryCode,\n            postal_code: address.postalCode,\n        };\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string, lastTwo: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastTwo,\n        };\n    }\n}\n\nexport interface VisaCheckoutInitializeOptions {\n    locale?: string;\n    collectShipping?: boolean;\n    subtotal?: number;\n    currencyCode?: string;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport BraintreeVisaCheckoutPaymentProcessor from './braintree-visacheckout-payment-processor';\n\nexport default function createBraintreeVisaCheckoutPaymentProcessor(\n    scriptLoader: ScriptLoader,\n    requestSender: RequestSender\n) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n\n    return new BraintreeVisaCheckoutPaymentProcessor(braintreeSDKCreator, requestSender);\n}\n"],"sourceRoot":""}